==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x9 $x12)))
 (let (($x17 (and $x6 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x9 $x12)))
 (let (($x17 (and $x6 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7b97677f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6314253b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x247 (= false true)))
 (let ((?x232 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x241 (concat ?x240 (concat ?x237 (concat ?x234 ?x232)))))
 (let (($x242 (= ?x241 input.dst.llvm-%m2)))
 (let (($x243 (= $x242 true)))
 (let ((?x218 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x227 (concat ?x226 (concat ?x223 (concat ?x220 ?x218)))))
 (let (($x228 (= ?x227 input.dst.llvm-%m1)))
 (let (($x229 (= $x228 true)))
 (let (($x213 (forall ((input.ind-%var63X (_ BitVec 32)) )(let ((?x93 (bvmul input.ind-%var63X (_ bv4 32))))
 (let ((?x200 (bvadd ?x93 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x204))))
 (let ((?x46 (input.spec-%var-m1-1.1.1 input.ind-%var63X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var63X)))
 (=> $x45 (= ?x46 ?x210)))))))))
 ))
 (let (($x181 (forall ((input.ind-%var62X (_ BitVec 32)) )(let (($x22 (and (bvule (_ bv0 32) input.ind-%var62X) (bvult input.ind-%var62X (_ bv100 32)))))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var62X)))
 (= $x45 $x22))))
 ))
 (let (($x214 (and $x181 $x213)))
 (let (($x215 (= $x214 true)))
 (let ((?x162 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x163 (= (_ bv0 32) ?x162)))
 (let ((?x160 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x161 (= (_ bv0 32) ?x160)))
 (let ((?x158 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x158)))
 (let ((?x154 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x154)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (and $x153 $x155)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x152 $x156)))
 (let (($x151 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x142 $x143)))
 (let (($x145 (not $x144)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x139 $x140)))
 (let (($x147 (and (not $x141) $x145)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x133 $x134)))
 (let (($x136 (not $x135)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x111 $x112)))
 (let (($x138 (and (not $x132) $x136)))
 (let (($x169 (and (and (and (and (and (and $x138 $x147) $x149) $x151) $x157) $x159) $x161)))
 (let (($x170 (and $x169 $x163)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x129 (or false (or false (and (and true (or $x118 $x119)) (or $x124 $x125))))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x129)))
 (let (($x171 (and $x131 $x170)))
 (let (($x172 (= $x171 true)))
 (let (($x107 (forall ((input.ind-%var51X (_ BitVec 32)) )(let ((?x93 (bvmul input.ind-%var51X (_ bv4 32))))
 (let ((?x94 (bvadd ?x93 input.dst.llvm-%m2)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x98))))
 (let ((?x8 (input.spec-%var-m2-1.1.1 input.ind-%var51X)))
 (let (($x48 (input.spec-%var-m2-1.0.1 input.ind-%var51X)))
 (=> $x48 (= ?x8 ?x104)))))))))
 ))
 (let (($x25 (forall ((input.ind-%var50X (_ BitVec 32)) )(let (($x22 (and (bvule (_ bv0 32) input.ind-%var50X) (bvult input.ind-%var50X (_ bv100 32)))))
 (let (($x48 (input.spec-%var-m2-1.0.1 input.ind-%var50X)))
 (= $x48 $x22))))
 ))
 (let (($x108 (and $x25 $x107)))
 (let (($x109 (= $x108 true)))
 (let (($x173 (and $x109 $x172)))
 (let (($x216 (and $x173 $x215)))
 (let (($x230 (and $x216 $x229)))
 (let (($x244 (and $x230 $x243)))
 (let (($x47 (forall ((input.ind-%var75X (_ BitVec 32)) )(let ((?x41 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var75X)))
 (let ((?x46 (input.spec-%var-m1-1.1.1 input.ind-%var75X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var75X)))
 (=> $x45 (= ?x46 ?x41))))))
 ))
 (let (($x77 (forall ((input.ind-%var74X (_ BitVec 32)) )(let (($x24 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var74X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var74X)))
 (= $x45 $x24))))
 ))
 (let (($x28 (and $x77 $x47)))
 (let (($x245 (and $x28 $x244)))
 (let (($x80 (forall ((input.ind-%var87X (_ BitVec 32)) )(let ((?x44 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var87X)))
 (let ((?x8 (input.spec-%var-m2-1.1.1 input.ind-%var87X)))
 (let (($x48 (input.spec-%var-m2-1.0.1 input.ind-%var87X)))
 (=> $x48 (= ?x8 ?x44))))))
 ))
 (let (($x53 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var86X)))
 (let (($x48 (input.spec-%var-m2-1.0.1 input.ind-%var86X)))
 (= $x48 $x34))))
 ))
 (let (($x54 (and $x53 $x80)))
 (let (($x246 (and $x54 $x245)))
 (let (($x248 (=> $x246 $x247)))
 (not $x248)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x247 (= false true)))
 (let ((?x232 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x241 (concat ?x240 (concat ?x237 (concat ?x234 ?x232)))))
 (let (($x242 (= ?x241 input.dst.llvm-%m2)))
 (let (($x243 (= $x242 true)))
 (let ((?x218 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x227 (concat ?x226 (concat ?x223 (concat ?x220 ?x218)))))
 (let (($x228 (= ?x227 input.dst.llvm-%m1)))
 (let (($x229 (= $x228 true)))
 (let (($x213 (forall ((input.ind-%var63X (_ BitVec 32)) )(let ((?x93 (bvmul input.ind-%var63X (_ bv4 32))))
 (let ((?x200 (bvadd ?x93 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x204))))
 (let ((?x46 (input.spec-%var-m1-1.1.1 input.ind-%var63X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var63X)))
 (=> $x45 (= ?x46 ?x210)))))))))
 ))
 (let (($x181 (forall ((input.ind-%var62X (_ BitVec 32)) )(let (($x22 (and (bvule (_ bv0 32) input.ind-%var62X) (bvult input.ind-%var62X (_ bv100 32)))))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var62X)))
 (= $x45 $x22))))
 ))
 (let (($x214 (and $x181 $x213)))
 (let (($x215 (= $x214 true)))
 (let ((?x162 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x163 (= (_ bv0 32) ?x162)))
 (let ((?x160 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x161 (= (_ bv0 32) ?x160)))
 (let ((?x158 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x158)))
 (let ((?x154 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x154)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (and $x153 $x155)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x152 $x156)))
 (let (($x151 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x142 $x143)))
 (let (($x145 (not $x144)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x139 $x140)))
 (let (($x147 (and (not $x141) $x145)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x133 $x134)))
 (let (($x136 (not $x135)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x111 $x112)))
 (let (($x138 (and (not $x132) $x136)))
 (let (($x169 (and (and (and (and (and (and $x138 $x147) $x149) $x151) $x157) $x159) $x161)))
 (let (($x170 (and $x169 $x163)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x129 (or false (or false (and (and true (or $x118 $x119)) (or $x124 $x125))))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x129)))
 (let (($x171 (and $x131 $x170)))
 (let (($x172 (= $x171 true)))
 (let (($x107 (forall ((input.ind-%var51X (_ BitVec 32)) )(let ((?x93 (bvmul input.ind-%var51X (_ bv4 32))))
 (let ((?x94 (bvadd ?x93 input.dst.llvm-%m2)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x98))))
 (let ((?x8 (input.spec-%var-m2-1.1.1 input.ind-%var51X)))
 (let (($x48 (input.spec-%var-m2-1.0.1 input.ind-%var51X)))
 (=> $x48 (= ?x8 ?x104)))))))))
 ))
 (let (($x25 (forall ((input.ind-%var50X (_ BitVec 32)) )(let (($x22 (and (bvule (_ bv0 32) input.ind-%var50X) (bvult input.ind-%var50X (_ bv100 32)))))
 (let (($x48 (input.spec-%var-m2-1.0.1 input.ind-%var50X)))
 (= $x48 $x22))))
 ))
 (let (($x108 (and $x25 $x107)))
 (let (($x109 (= $x108 true)))
 (let (($x173 (and $x109 $x172)))
 (let (($x216 (and $x173 $x215)))
 (let (($x230 (and $x216 $x229)))
 (let (($x244 (and $x230 $x243)))
 (let (($x47 (forall ((input.ind-%var75X (_ BitVec 32)) )(let ((?x41 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var75X)))
 (let ((?x46 (input.spec-%var-m1-1.1.1 input.ind-%var75X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var75X)))
 (=> $x45 (= ?x46 ?x41))))))
 ))
 (let (($x77 (forall ((input.ind-%var74X (_ BitVec 32)) )(let (($x24 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var74X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var74X)))
 (= $x45 $x24))))
 ))
 (let (($x28 (and $x77 $x47)))
 (let (($x245 (and $x28 $x244)))
 (let (($x80 (forall ((input.ind-%var87X (_ BitVec 32)) )(let ((?x44 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var87X)))
 (let ((?x8 (input.spec-%var-m2-1.1.1 input.ind-%var87X)))
 (let (($x48 (input.spec-%var-m2-1.0.1 input.ind-%var87X)))
 (=> $x48 (= ?x8 ?x44))))))
 ))
 (let (($x53 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var86X)))
 (let (($x48 (input.spec-%var-m2-1.0.1 input.ind-%var86X)))
 (= $x48 $x34))))
 ))
 (let (($x54 (and $x53 $x80)))
 (let (($x246 (and $x54 $x245)))
 (let (($x248 (=> $x246 $x247)))
 (not $x248)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x26a72934)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff249508)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xff9e17c0)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xd5bfee01)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff24950b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x26a72937)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff249508)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x26a72934)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xff24950b) #xd5
    (ite (= x!0 #x26a72935) #x17
    (ite (= x!0 #xff249508) #x01
    (ite (= x!0 #x26a72937) #xff
    (ite (= x!0 #x26a72934) #xc0
    (ite (= x!0 #x26a72936) #x9e
    (ite (= x!0 #xff24950a) #xbf
    (ite (= x!0 #xff249509) #xee
      #x00)))))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x26a72937)
                                      (k!11 #x26a72936)
                                      (k!11 #x26a72935)
                                      (k!11 #x26a72934)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x26a72937)
                                      (k!11 #x26a72936)
                                      (k!11 #x26a72935)
                                      (k!11 #x26a72934)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x26a72937)
                                      (k!11 #x26a72936)
                                      (k!11 #x26a72935)
                                      (k!11 #x26a72934)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x26a72937)
                                      (k!11 #x26a72936)
                                      (k!11 #x26a72935)
                                      (k!11 #x26a72934))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xff24950b)
                                      (k!11 #xff24950a)
                                      (k!11 #xff249509)
                                      (k!11 #xff249508)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xff24950b)
                                      (k!11 #xff24950a)
                                      (k!11 #xff249509)
                                      (k!11 #xff249508)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xff24950b)
                                      (k!11 #xff24950a)
                                      (k!11 #xff249509)
                                      (k!11 #xff249508)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #xff24950b)
                                      (k!11 #xff24950a)
                                      (k!11 #xff249509)
                                      (k!11 #xff249508))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x91 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x64 (= (_ bv0 32) ?x91)))
 (let ((?x6 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x73 (= (_ bv0 32) ?x6)))
 (let ((?x59 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x82)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x84 (and $x83 $x72)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x87 $x84)))
 (let (($x86 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x68 $x62)))
 (let (($x11 (not $x39)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x60 $x71)))
 (let (($x19 (and (not $x89) $x11)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x110 $x231)))
 (let (($x5 (not $x217)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x248 $x249)))
 (let (($x51 (and (not $x69) $x5)))
 (let (($x176 (and (and (and (and (and (and $x51 $x19) $x58) $x86) $x88) $x70) $x73)))
 (let (($x177 (and $x176 $x64)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x206 (or false (or false (and (and true (or $x170 $x171)) (or $x186 $x200))))))
 (let (($x203 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x206)))
 (let (($x250 (and $x203 $x177)))
 (let (($x251 (= $x250 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x32 (concat ?x65 (concat ?x38 ?x17)))))
 (let (($x30 (= input.dst.llvm-%m2 ?x74)))
 (let ((?x189 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x198 (concat ?x179 (concat ?x197 (concat ?x188 ?x189)))))
 (let (($x183 (= input.dst.llvm-%m1 ?x198)))
 (let (($x192 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x195 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x13 (and (and (and $x195 $x192) $x183) $x30)))
 (let (($x246 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x144 (bvmul input.ind-%var139X (_ bv4 32))))
 (let ((?x240 (bvadd ?x144 input.dst.llvm-%m1)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x234))))
 (let ((?x37 (input.spec-%var-m1-1.1.1 input.ind-%var139X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var139X)))
 (=> $x150 (= ?x37 ?x243)))))))))
 ))
 (let (($x212 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X (_ bv100 32)))))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var138X)))
 (= $x150 $x128))))
 ))
 (let (($x247 (and $x212 $x246)))
 (let (($x43 (and (and (and $x203 $x247) $x177) $x13)))
 (let (($x157 (forall ((input.ind-%var129X (_ BitVec 32)) )(let ((?x144 (bvmul input.ind-%var129X (_ bv4 32))))
 (let ((?x124 (bvadd ?x144 input.dst.llvm-%m2)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x129))))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var129X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var129X)))
 (=> $x34 (= ?x45 ?x154)))))))))
 ))
 (let (($x28 (forall ((input.ind-%var128X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var128X) (bvult input.ind-%var128X (_ bv100 32)))))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var128X)))
 (= $x34 $x128))))
 ))
 (let (($x167 (and $x28 $x157)))
 (let (($x9 (and $x167 $x43)))
 (let (($x20 (= $x9 true)))
 (let (($x117 (forall ((input.ind-%var149X (_ BitVec 32)) )(let ((?x77 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var149X)))
 (let ((?x37 (input.spec-%var-m1-1.1.1 input.ind-%var149X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var149X)))
 (=> $x150 (= ?x37 ?x77))))))
 ))
 (let (($x138 (forall ((input.ind-%var148X (_ BitVec 32)) )(let (($x102 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var148X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var148X)))
 (= $x150 $x102))))
 ))
 (let (($x165 (and $x138 $x117)))
 (let (($x23 (and $x165 $x20)))
 (let (($x148 (forall ((input.ind-%var159X (_ BitVec 32)) )(let ((?x111 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var159X)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var159X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var159X)))
 (=> $x34 (= ?x45 ?x111))))))
 ))
 (let (($x8 (forall ((input.ind-%var158X (_ BitVec 32)) )(let (($x48 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var158X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var158X)))
 (= $x34 $x48))))
 ))
 (let (($x47 (and $x8 $x148)))
 (let (($x12 (and $x47 $x23)))
 (let (($x252 (=> $x12 $x251)))
 (not $x252))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x91 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x64 (= (_ bv0 32) ?x91)))
 (let ((?x6 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x73 (= (_ bv0 32) ?x6)))
 (let ((?x59 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x82)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x84 (and $x83 $x72)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x87 $x84)))
 (let (($x86 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x68 $x62)))
 (let (($x11 (not $x39)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x60 $x71)))
 (let (($x19 (and (not $x89) $x11)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x110 $x231)))
 (let (($x5 (not $x217)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x248 $x249)))
 (let (($x51 (and (not $x69) $x5)))
 (let (($x176 (and (and (and (and (and (and $x51 $x19) $x58) $x86) $x88) $x70) $x73)))
 (let (($x177 (and $x176 $x64)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x206 (or false (or false (and (and true (or $x170 $x171)) (or $x186 $x200))))))
 (let (($x203 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x206)))
 (let (($x250 (and $x203 $x177)))
 (let (($x251 (= $x250 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x32 (concat ?x65 (concat ?x38 ?x17)))))
 (let (($x30 (= input.dst.llvm-%m2 ?x74)))
 (let ((?x189 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x198 (concat ?x179 (concat ?x197 (concat ?x188 ?x189)))))
 (let (($x183 (= input.dst.llvm-%m1 ?x198)))
 (let (($x192 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x195 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x13 (and (and (and $x195 $x192) $x183) $x30)))
 (let (($x246 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x144 (bvmul input.ind-%var139X (_ bv4 32))))
 (let ((?x240 (bvadd ?x144 input.dst.llvm-%m1)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x234))))
 (let ((?x37 (input.spec-%var-m1-1.1.1 input.ind-%var139X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var139X)))
 (=> $x150 (= ?x37 ?x243)))))))))
 ))
 (let (($x212 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X (_ bv100 32)))))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var138X)))
 (= $x150 $x128))))
 ))
 (let (($x247 (and $x212 $x246)))
 (let (($x43 (and (and (and $x203 $x247) $x177) $x13)))
 (let (($x157 (forall ((input.ind-%var129X (_ BitVec 32)) )(let ((?x144 (bvmul input.ind-%var129X (_ bv4 32))))
 (let ((?x124 (bvadd ?x144 input.dst.llvm-%m2)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x129))))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var129X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var129X)))
 (=> $x34 (= ?x45 ?x154)))))))))
 ))
 (let (($x28 (forall ((input.ind-%var128X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var128X) (bvult input.ind-%var128X (_ bv100 32)))))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var128X)))
 (= $x34 $x128))))
 ))
 (let (($x167 (and $x28 $x157)))
 (let (($x9 (and $x167 $x43)))
 (let (($x20 (= $x9 true)))
 (let (($x117 (forall ((input.ind-%var149X (_ BitVec 32)) )(let ((?x77 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var149X)))
 (let ((?x37 (input.spec-%var-m1-1.1.1 input.ind-%var149X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var149X)))
 (=> $x150 (= ?x37 ?x77))))))
 ))
 (let (($x138 (forall ((input.ind-%var148X (_ BitVec 32)) )(let (($x102 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var148X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var148X)))
 (= $x150 $x102))))
 ))
 (let (($x165 (and $x138 $x117)))
 (let (($x23 (and $x165 $x20)))
 (let (($x148 (forall ((input.ind-%var159X (_ BitVec 32)) )(let ((?x111 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var159X)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var159X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var159X)))
 (=> $x34 (= ?x45 ?x111))))))
 ))
 (let (($x8 (forall ((input.ind-%var158X (_ BitVec 32)) )(let (($x48 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var158X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var158X)))
 (= $x34 $x48))))
 ))
 (let (($x47 (and $x8 $x148)))
 (let (($x12 (and $x47 $x23)))
 (let (($x252 (=> $x12 $x251)))
 (not $x252))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x93 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x79 (= $x93 true)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x239 (concat ?x230 (concat ?x168 ?x224)))))
 (let (($x99 (= input.dst.llvm-%m2 ?x31)))
 (let ((?x201 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x223 (concat ?x228 (concat ?x216 ?x201)))))
 (let (($x222 (= input.dst.llvm-%m1 ?x219)))
 (let (($x215 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x136 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x149 (and (and (and $x136 $x215) $x222) $x99)))
 (let ((?x108 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x109 (= (_ bv0 32) ?x108)))
 (let ((?x133 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x113 (= (_ bv0 32) ?x133)))
 (let ((?x119 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x18 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x135 $x63)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x142 $x94)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x104 $x40)))
 (let (($x46 (not $x103)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x193 $x56)))
 (let (($x112 (and (not $x24) $x46)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (and $x251 $x252)))
 (let (($x141 (not $x253)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x23 $x12)))
 (let (($x199 (and (not $x250) $x141)))
 (let (($x95 (and (and (and (and (and (and $x199 $x112) $x22) $x81) $x130) $x132) $x113)))
 (let (($x90 (and $x95 $x109)))
 (let (($x9 (forall ((input.ind-%var179X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var179X (_ bv4 32))))
 (let ((?x66 (bvadd ?x246 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x76))))
 (let ((?x118 (input.spec-%var-m1-1.1.1 input.ind-%var179X)))
 (let (($x110 (input.spec-%var-m1-1.0.1 input.ind-%var179X)))
 (=> $x110 (= ?x118 ?x30)))))))))
 ))
 (let (($x16 (forall ((input.ind-%var178X (_ BitVec 32)) )(let (($x206 (and (bvule (_ bv0 32) input.ind-%var178X) (bvult input.ind-%var178X (_ bv100 32)))))
 (let (($x110 (input.spec-%var-m1-1.0.1 input.ind-%var178X)))
 (= $x110 $x206))))
 ))
 (let (($x20 (and $x16 $x9)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x70 (or false (or false (and (and true (or $x57 $x86)) (or $x72 $x84))))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x164 (and (and (and $x6 $x20) $x90) $x149)))
 (let (($x78 (forall ((input.ind-%var169X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var169X (_ bv4 32))))
 (let ((?x181 (bvadd ?x246 input.dst.llvm-%m2)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x203))))
 (let ((?x150 (input.spec-%var-m2-1.1.1 input.ind-%var169X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var169X)))
 (=> $x34 (= ?x150 ?x60)))))))))
 ))
 (let (($x165 (forall ((input.ind-%var168X (_ BitVec 32)) )(let (($x206 (and (bvule (_ bv0 32) input.ind-%var168X) (bvult input.ind-%var168X (_ bv100 32)))))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var168X)))
 (= $x34 $x206))))
 ))
 (let (($x68 (and $x165 $x78)))
 (let (($x50 (and $x68 $x164)))
 (let (($x114 (= $x50 true)))
 (let (($x170 (forall ((input.ind-%var189X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var189X)))
 (let ((?x118 (input.spec-%var-m1-1.1.1 input.ind-%var189X)))
 (let (($x110 (input.spec-%var-m1-1.0.1 input.ind-%var189X)))
 (=> $x110 (= ?x118 ?x138))))))
 ))
 (let (($x233 (forall ((input.ind-%var188X (_ BitVec 32)) )(let (($x152 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var188X)))
 (let (($x110 (input.spec-%var-m1-1.0.1 input.ind-%var188X)))
 (= $x110 $x152))))
 ))
 (let (($x7 (and $x233 $x170)))
 (let (($x15 (and $x7 $x114)))
 (let (($x249 (forall ((input.ind-%var199X (_ BitVec 32)) )(let ((?x212 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var199X)))
 (let ((?x150 (input.spec-%var-m2-1.1.1 input.ind-%var199X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var199X)))
 (=> $x34 (= ?x150 ?x212))))))
 ))
 (let (($x122 (forall ((input.ind-%var198X (_ BitVec 32)) )(let (($x8 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var198X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var198X)))
 (= $x34 $x8))))
 ))
 (let (($x117 (and $x122 $x249)))
 (let (($x52 (and $x117 $x15)))
 (let (($x106 (=> $x52 $x79)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x93 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x79 (= $x93 true)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x239 (concat ?x230 (concat ?x168 ?x224)))))
 (let (($x99 (= input.dst.llvm-%m2 ?x31)))
 (let ((?x201 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x223 (concat ?x228 (concat ?x216 ?x201)))))
 (let (($x222 (= input.dst.llvm-%m1 ?x219)))
 (let (($x215 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x136 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x149 (and (and (and $x136 $x215) $x222) $x99)))
 (let ((?x108 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x109 (= (_ bv0 32) ?x108)))
 (let ((?x133 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x113 (= (_ bv0 32) ?x133)))
 (let ((?x119 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x18 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x135 $x63)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x142 $x94)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x104 $x40)))
 (let (($x46 (not $x103)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x193 $x56)))
 (let (($x112 (and (not $x24) $x46)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (and $x251 $x252)))
 (let (($x141 (not $x253)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x23 $x12)))
 (let (($x199 (and (not $x250) $x141)))
 (let (($x95 (and (and (and (and (and (and $x199 $x112) $x22) $x81) $x130) $x132) $x113)))
 (let (($x90 (and $x95 $x109)))
 (let (($x9 (forall ((input.ind-%var179X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var179X (_ bv4 32))))
 (let ((?x66 (bvadd ?x246 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x76))))
 (let ((?x118 (input.spec-%var-m1-1.1.1 input.ind-%var179X)))
 (let (($x110 (input.spec-%var-m1-1.0.1 input.ind-%var179X)))
 (=> $x110 (= ?x118 ?x30)))))))))
 ))
 (let (($x16 (forall ((input.ind-%var178X (_ BitVec 32)) )(let (($x206 (and (bvule (_ bv0 32) input.ind-%var178X) (bvult input.ind-%var178X (_ bv100 32)))))
 (let (($x110 (input.spec-%var-m1-1.0.1 input.ind-%var178X)))
 (= $x110 $x206))))
 ))
 (let (($x20 (and $x16 $x9)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x70 (or false (or false (and (and true (or $x57 $x86)) (or $x72 $x84))))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x164 (and (and (and $x6 $x20) $x90) $x149)))
 (let (($x78 (forall ((input.ind-%var169X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var169X (_ bv4 32))))
 (let ((?x181 (bvadd ?x246 input.dst.llvm-%m2)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x203))))
 (let ((?x150 (input.spec-%var-m2-1.1.1 input.ind-%var169X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var169X)))
 (=> $x34 (= ?x150 ?x60)))))))))
 ))
 (let (($x165 (forall ((input.ind-%var168X (_ BitVec 32)) )(let (($x206 (and (bvule (_ bv0 32) input.ind-%var168X) (bvult input.ind-%var168X (_ bv100 32)))))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var168X)))
 (= $x34 $x206))))
 ))
 (let (($x68 (and $x165 $x78)))
 (let (($x50 (and $x68 $x164)))
 (let (($x114 (= $x50 true)))
 (let (($x170 (forall ((input.ind-%var189X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var189X)))
 (let ((?x118 (input.spec-%var-m1-1.1.1 input.ind-%var189X)))
 (let (($x110 (input.spec-%var-m1-1.0.1 input.ind-%var189X)))
 (=> $x110 (= ?x118 ?x138))))))
 ))
 (let (($x233 (forall ((input.ind-%var188X (_ BitVec 32)) )(let (($x152 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var188X)))
 (let (($x110 (input.spec-%var-m1-1.0.1 input.ind-%var188X)))
 (= $x110 $x152))))
 ))
 (let (($x7 (and $x233 $x170)))
 (let (($x15 (and $x7 $x114)))
 (let (($x249 (forall ((input.ind-%var199X (_ BitVec 32)) )(let ((?x212 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var199X)))
 (let ((?x150 (input.spec-%var-m2-1.1.1 input.ind-%var199X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var199X)))
 (=> $x34 (= ?x150 ?x212))))))
 ))
 (let (($x122 (forall ((input.ind-%var198X (_ BitVec 32)) )(let (($x8 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var198X)))
 (let (($x34 (input.spec-%var-m2-1.0.1 input.ind-%var198X)))
 (= $x34 $x8))))
 ))
 (let (($x117 (and $x122 $x249)))
 (let (($x52 (and $x117 $x15)))
 (let (($x106 (=> $x52 $x79)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x04040400)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08000000) #x00
      #x04))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x08000003)
                                   (k!0 #x08000002)
                                   (k!0 #x08000001)
                                   (k!0 #x08000000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x08000003)
                                   (k!0 #x08000002)
                                   (k!0 #x08000001)
                                   (k!0 #x08000000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x08000003)
                                   (k!0 #x08000002)
                                   (k!0 #x08000001)
                                   (k!0 #x08000000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x08000003)
                                   (k!0 #x08000002)
                                   (k!0 #x08000001)
                                   (k!0 #x08000000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x462e171c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xda6e1640)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x20808080)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xdfbc1f00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xda6e1643)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x462e171f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xda6e1640)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x462e171c)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x462e171d) #x80
    (ite (= x!0 #xda6e1643) #xdf
    (ite (= x!0 #x462e171f) #x20
    (ite (= x!0 #x462e171c) #x80
    (ite (= x!0 #x462e171e) #x80
    (ite (= x!0 #xda6e1642) #xbc
    (ite (= x!0 #xda6e1641) #x1f
      #x00))))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x462e171f)
                                      (k!11 #x462e171e)
                                      (k!11 #x462e171d)
                                      (k!11 #x462e171c)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x462e171f)
                                      (k!11 #x462e171e)
                                      (k!11 #x462e171d)
                                      (k!11 #x462e171c)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x462e171f)
                                      (k!11 #x462e171e)
                                      (k!11 #x462e171d)
                                      (k!11 #x462e171c)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x462e171f)
                                      (k!11 #x462e171e)
                                      (k!11 #x462e171d)
                                      (k!11 #x462e171c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xda6e1643)
                                      (k!11 #xda6e1642)
                                      (k!11 #xda6e1641)
                                      (k!11 #xda6e1640)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xda6e1643)
                                      (k!11 #xda6e1642)
                                      (k!11 #xda6e1641)
                                      (k!11 #xda6e1640)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xda6e1643)
                                      (k!11 #xda6e1642)
                                      (k!11 #xda6e1641)
                                      (k!11 #xda6e1640)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #xda6e1643)
                                      (k!11 #xda6e1642)
                                      (k!11 #xda6e1641)
                                      (k!11 #xda6e1640))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x148 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x156 (= (_ bv0 2) ?x148)))
 (let (($x213 (= $x156 true)))
 (let ((?x189 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x14 (concat ?x183 (concat ?x11 ?x189)))))
 (let (($x145 (= input.dst.llvm-%m2 ?x42)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x194 (concat ?x179 (concat ?x175 (concat ?x196 ?x73)))))
 (let (($x178 (= input.dst.llvm-%m1 ?x194)))
 (let (($x195 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x237 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x69 (and (and (and $x237 $x195) $x178) $x145)))
 (let ((?x167 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x160 (= (_ bv0 32) ?x167)))
 (let ((?x242 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x161 (= (_ bv0 32) ?x242)))
 (let ((?x172 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x139 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x124 (and $x235 $x126)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x244 $x124)))
 (let (($x121 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x154 $x100)))
 (let (($x37 (not $x153)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x159 $x48)))
 (let (($x225 (and (not $x102) $x37)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x106 $x182)))
 (let (($x238 (not $x171)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x52 $x93)))
 (let (($x220 (and (not $x79) $x238)))
 (let (($x146 (and (and (and (and (and (and $x220 $x225) $x128) $x121) $x169) $x240) $x161)))
 (let (($x140 (and $x146 $x160)))
 (let (($x114 (forall ((input.ind-%var251X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var251X (_ bv4 32))))
 (let ((?x239 (bvadd ?x20 input.dst.llvm-%m1)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x168))))
 (let ((?x162 (input.spec-%var-m1-1.1.1 input.ind-%var251X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var251X)))
 (=> $x252 (= ?x162 ?x149)))))))))
 ))
 (let (($x98 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x70 (and (bvule (_ bv0 32) input.ind-%var250X) (bvult input.ind-%var250X (_ bv100 32)))))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var250X)))
 (= $x252 $x70))))
 ))
 (let (($x15 (and $x98 $x114)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x101 (or false (or false (and (and true (or $x81 $x67)) (or $x94 $x130))))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x248 (and (and (and $x113 $x15) $x140) $x69)))
 (let (($x104 (forall ((input.ind-%var241X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var241X (_ bv4 32))))
 (let ((?x82 (bvadd ?x20 input.dst.llvm-%m2)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem ?x82))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv2 32))) ?x6))))
 (let ((?x110 (input.spec-%var-m2-1.1.1 input.ind-%var241X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var241X)))
 (=> $x192 (= ?x110 ?x56)))))))))
 ))
 (let (($x7 (forall ((input.ind-%var240X (_ BitVec 32)) )(let (($x70 (and (bvule (_ bv0 32) input.ind-%var240X) (bvult input.ind-%var240X (_ bv100 32)))))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var240X)))
 (= $x192 $x70))))
 ))
 (let (($x40 (and $x7 $x104)))
 (let (($x116 (and $x40 $x248)))
 (let (($x202 (= $x116 true)))
 (let (($x57 (forall ((input.ind-%var261X (_ BitVec 32)) )(let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var261X)))
 (let ((?x162 (input.spec-%var-m1-1.1.1 input.ind-%var261X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var261X)))
 (=> $x252 (= ?x162 ?x233))))))
 ))
 (let (($x32 (forall ((input.ind-%var260X (_ BitVec 32)) )(let (($x5 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var260X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var260X)))
 (= $x252 $x5))))
 ))
 (let (($x251 (and $x32 $x57)))
 (let (($x53 (and $x251 $x202)))
 (let (($x250 (forall ((input.ind-%var271X (_ BitVec 32)) )(let ((?x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var271X)))
 (let ((?x110 (input.spec-%var-m2-1.1.1 input.ind-%var271X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var271X)))
 (=> $x192 (= ?x110 ?x16))))))
 ))
 (let (($x150 (forall ((input.ind-%var270X (_ BitVec 32)) )(let (($x122 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var270X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var270X)))
 (= $x192 $x122))))
 ))
 (let (($x170 (and $x150 $x250)))
 (let (($x45 (and $x170 $x53)))
 (let (($x254 (=> $x45 $x213)))
 (not $x254)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x148 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x156 (= (_ bv0 2) ?x148)))
 (let (($x213 (= $x156 true)))
 (let ((?x189 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x14 (concat ?x183 (concat ?x11 ?x189)))))
 (let (($x145 (= input.dst.llvm-%m2 ?x42)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x194 (concat ?x179 (concat ?x175 (concat ?x196 ?x73)))))
 (let (($x178 (= input.dst.llvm-%m1 ?x194)))
 (let (($x195 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x237 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x69 (and (and (and $x237 $x195) $x178) $x145)))
 (let ((?x167 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x160 (= (_ bv0 32) ?x167)))
 (let ((?x242 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x161 (= (_ bv0 32) ?x242)))
 (let ((?x172 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x139 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x124 (and $x235 $x126)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x244 $x124)))
 (let (($x121 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x154 $x100)))
 (let (($x37 (not $x153)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x159 $x48)))
 (let (($x225 (and (not $x102) $x37)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x106 $x182)))
 (let (($x238 (not $x171)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x52 $x93)))
 (let (($x220 (and (not $x79) $x238)))
 (let (($x146 (and (and (and (and (and (and $x220 $x225) $x128) $x121) $x169) $x240) $x161)))
 (let (($x140 (and $x146 $x160)))
 (let (($x114 (forall ((input.ind-%var251X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var251X (_ bv4 32))))
 (let ((?x239 (bvadd ?x20 input.dst.llvm-%m1)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x168))))
 (let ((?x162 (input.spec-%var-m1-1.1.1 input.ind-%var251X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var251X)))
 (=> $x252 (= ?x162 ?x149)))))))))
 ))
 (let (($x98 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x70 (and (bvule (_ bv0 32) input.ind-%var250X) (bvult input.ind-%var250X (_ bv100 32)))))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var250X)))
 (= $x252 $x70))))
 ))
 (let (($x15 (and $x98 $x114)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x101 (or false (or false (and (and true (or $x81 $x67)) (or $x94 $x130))))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x248 (and (and (and $x113 $x15) $x140) $x69)))
 (let (($x104 (forall ((input.ind-%var241X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var241X (_ bv4 32))))
 (let ((?x82 (bvadd ?x20 input.dst.llvm-%m2)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem ?x82))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv2 32))) ?x6))))
 (let ((?x110 (input.spec-%var-m2-1.1.1 input.ind-%var241X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var241X)))
 (=> $x192 (= ?x110 ?x56)))))))))
 ))
 (let (($x7 (forall ((input.ind-%var240X (_ BitVec 32)) )(let (($x70 (and (bvule (_ bv0 32) input.ind-%var240X) (bvult input.ind-%var240X (_ bv100 32)))))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var240X)))
 (= $x192 $x70))))
 ))
 (let (($x40 (and $x7 $x104)))
 (let (($x116 (and $x40 $x248)))
 (let (($x202 (= $x116 true)))
 (let (($x57 (forall ((input.ind-%var261X (_ BitVec 32)) )(let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var261X)))
 (let ((?x162 (input.spec-%var-m1-1.1.1 input.ind-%var261X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var261X)))
 (=> $x252 (= ?x162 ?x233))))))
 ))
 (let (($x32 (forall ((input.ind-%var260X (_ BitVec 32)) )(let (($x5 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var260X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var260X)))
 (= $x252 $x5))))
 ))
 (let (($x251 (and $x32 $x57)))
 (let (($x53 (and $x251 $x202)))
 (let (($x250 (forall ((input.ind-%var271X (_ BitVec 32)) )(let ((?x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var271X)))
 (let ((?x110 (input.spec-%var-m2-1.1.1 input.ind-%var271X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var271X)))
 (=> $x192 (= ?x110 ?x16))))))
 ))
 (let (($x150 (forall ((input.ind-%var270X (_ BitVec 32)) )(let (($x122 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var270X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var270X)))
 (= $x192 $x122))))
 ))
 (let (($x170 (and $x150 $x250)))
 (let (($x45 (and $x170 $x53)))
 (let (($x254 (=> $x45 $x213)))
 (not $x254)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 133 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x111 ((_ extract 7 0) input.dst.llvm-%m1)))
 (let (($x186 (= (_ bv0 8) ?x111)))
 (let (($x246 (= $x186 true)))
 (let ((?x223 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x138 (concat ?x109 (concat ?x226 ?x223)))))
 (let (($x214 (= input.dst.llvm-%m2 ?x136)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x201 (concat ?x216 (concat ?x221 (concat ?x95 ?x105)))))
 (let (($x227 (= input.dst.llvm-%m1 ?x201)))
 (let (($x65 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x203 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x78 (and (and (and $x203 $x65) $x227) $x214)))
 (let ((?x38 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x92 (= (_ bv0 32) ?x38)))
 (let ((?x26 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x75 (= (_ bv0 32) ?x26)))
 (let ((?x181 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x181)))
 (let ((?x43 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (and $x180 $x36)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x137 $x236)))
 (let (($x206 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x8 $x152)))
 (let (($x151 (not $x60)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x103 $x197)))
 (let (($x118 (and (not $x39) $x151)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x148 $x156)))
 (let (($x254 (not $x213)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x53 $x45)))
 (let (($x30 (and (not $x144) $x254)))
 (let (($x17 (and (and (and (and (and (and $x30 $x118) $x66) $x206) $x209) $x49) $x75)))
 (let (($x217 (and $x17 $x92)))
 (let (($x116 (forall ((input.ind-%var291X (_ BitVec 32)) )(let ((?x114 (bvmul input.ind-%var291X (_ bv4 32))))
 (let ((?x187 (bvadd ?x114 input.dst.llvm-%m1)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x198))))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var291X)))
 (let (($x106 (input.spec-%var-m1-1.0.1 input.ind-%var291X)))
 (=> $x106 (= ?x58 ?x145)))))))))
 ))
 (let (($x47 (forall ((input.ind-%var290X (_ BitVec 32)) )(let (($x101 (and (bvule (_ bv0 32) input.ind-%var290X) (bvult input.ind-%var290X (_ bv100 32)))))
 (let (($x106 (input.spec-%var-m1-1.0.1 input.ind-%var290X)))
 (= $x106 $x101))))
 ))
 (let (($x202 (and $x47 $x116)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x208 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x208)))
 (let (($x240 (or false (or false (and (and true (or $x96 $x121)) (or $x126 $x124))))))
 (let (($x242 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x240)))
 (let (($x84 (and (and (and $x242 $x202) $x217) $x78)))
 (let (($x33 (forall ((input.ind-%var281X (_ BitVec 32)) )(let ((?x114 (bvmul input.ind-%var281X (_ bv4 32))))
 (let ((?x63 (bvadd ?x114 input.dst.llvm-%m2)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x113))))
 (let ((?x252 (input.spec-%var-m2-1.1.1 input.ind-%var281X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var281X)))
 (=> $x192 (= ?x252 ?x159)))))))))
 ))
 (let (($x251 (forall ((input.ind-%var280X (_ BitVec 32)) )(let (($x101 (and (bvule (_ bv0 32) input.ind-%var280X) (bvult input.ind-%var280X (_ bv100 32)))))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var280X)))
 (= $x192 $x101))))
 ))
 (let (($x154 (and $x251 $x33)))
 (let (($x117 (and $x154 $x84)))
 (let (($x12 (= $x117 true)))
 (let (($x81 (forall ((input.ind-%var301X (_ BitVec 32)) )(let ((?x32 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var301X)))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var301X)))
 (let (($x106 (input.spec-%var-m1-1.0.1 input.ind-%var301X)))
 (=> $x106 (= ?x58 ?x32))))))
 ))
 (let (($x229 (forall ((input.ind-%var300X (_ BitVec 32)) )(let (($x199 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var300X)))
 (let (($x106 (input.spec-%var-m1-1.0.1 input.ind-%var300X)))
 (= $x106 $x199))))
 ))
 (let (($x62 (and $x229 $x81)))
 (let (($x27 (and $x62 $x12)))
 (let (($x93 (forall ((input.ind-%var311X (_ BitVec 32)) )(let ((?x98 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var311X)))
 (let ((?x252 (input.spec-%var-m2-1.1.1 input.ind-%var311X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var311X)))
 (=> $x192 (= ?x252 ?x98))))))
 ))
 (let (($x72 (forall ((input.ind-%var310X (_ BitVec 32)) )(let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var310X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var310X)))
 (= $x192 $x150))))
 ))
 (let (($x57 (and $x72 $x93)))
 (let (($x174 (and $x57 $x27)))
 (let (($x249 (=> $x174 $x246)))
 (not $x249)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x111 ((_ extract 7 0) input.dst.llvm-%m1)))
 (let (($x186 (= (_ bv0 8) ?x111)))
 (let (($x246 (= $x186 true)))
 (let ((?x223 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x138 (concat ?x109 (concat ?x226 ?x223)))))
 (let (($x214 (= input.dst.llvm-%m2 ?x136)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x201 (concat ?x216 (concat ?x221 (concat ?x95 ?x105)))))
 (let (($x227 (= input.dst.llvm-%m1 ?x201)))
 (let (($x65 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x203 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x78 (and (and (and $x203 $x65) $x227) $x214)))
 (let ((?x38 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x92 (= (_ bv0 32) ?x38)))
 (let ((?x26 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x75 (= (_ bv0 32) ?x26)))
 (let ((?x181 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x181)))
 (let ((?x43 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (and $x180 $x36)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x137 $x236)))
 (let (($x206 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x8 $x152)))
 (let (($x151 (not $x60)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x103 $x197)))
 (let (($x118 (and (not $x39) $x151)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x148 $x156)))
 (let (($x254 (not $x213)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x53 $x45)))
 (let (($x30 (and (not $x144) $x254)))
 (let (($x17 (and (and (and (and (and (and $x30 $x118) $x66) $x206) $x209) $x49) $x75)))
 (let (($x217 (and $x17 $x92)))
 (let (($x116 (forall ((input.ind-%var291X (_ BitVec 32)) )(let ((?x114 (bvmul input.ind-%var291X (_ bv4 32))))
 (let ((?x187 (bvadd ?x114 input.dst.llvm-%m1)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x198))))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var291X)))
 (let (($x106 (input.spec-%var-m1-1.0.1 input.ind-%var291X)))
 (=> $x106 (= ?x58 ?x145)))))))))
 ))
 (let (($x47 (forall ((input.ind-%var290X (_ BitVec 32)) )(let (($x101 (and (bvule (_ bv0 32) input.ind-%var290X) (bvult input.ind-%var290X (_ bv100 32)))))
 (let (($x106 (input.spec-%var-m1-1.0.1 input.ind-%var290X)))
 (= $x106 $x101))))
 ))
 (let (($x202 (and $x47 $x116)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x208 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x208)))
 (let (($x240 (or false (or false (and (and true (or $x96 $x121)) (or $x126 $x124))))))
 (let (($x242 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x240)))
 (let (($x84 (and (and (and $x242 $x202) $x217) $x78)))
 (let (($x33 (forall ((input.ind-%var281X (_ BitVec 32)) )(let ((?x114 (bvmul input.ind-%var281X (_ bv4 32))))
 (let ((?x63 (bvadd ?x114 input.dst.llvm-%m2)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x113))))
 (let ((?x252 (input.spec-%var-m2-1.1.1 input.ind-%var281X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var281X)))
 (=> $x192 (= ?x252 ?x159)))))))))
 ))
 (let (($x251 (forall ((input.ind-%var280X (_ BitVec 32)) )(let (($x101 (and (bvule (_ bv0 32) input.ind-%var280X) (bvult input.ind-%var280X (_ bv100 32)))))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var280X)))
 (= $x192 $x101))))
 ))
 (let (($x154 (and $x251 $x33)))
 (let (($x117 (and $x154 $x84)))
 (let (($x12 (= $x117 true)))
 (let (($x81 (forall ((input.ind-%var301X (_ BitVec 32)) )(let ((?x32 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var301X)))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var301X)))
 (let (($x106 (input.spec-%var-m1-1.0.1 input.ind-%var301X)))
 (=> $x106 (= ?x58 ?x32))))))
 ))
 (let (($x229 (forall ((input.ind-%var300X (_ BitVec 32)) )(let (($x199 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var300X)))
 (let (($x106 (input.spec-%var-m1-1.0.1 input.ind-%var300X)))
 (= $x106 $x199))))
 ))
 (let (($x62 (and $x229 $x81)))
 (let (($x27 (and $x62 $x12)))
 (let (($x93 (forall ((input.ind-%var311X (_ BitVec 32)) )(let ((?x98 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var311X)))
 (let ((?x252 (input.spec-%var-m2-1.1.1 input.ind-%var311X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var311X)))
 (=> $x192 (= ?x252 ?x98))))))
 ))
 (let (($x72 (forall ((input.ind-%var310X (_ BitVec 32)) )(let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var310X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var310X)))
 (= $x192 $x150))))
 ))
 (let (($x57 (and $x72 $x93)))
 (let (($x174 (and $x57 $x27)))
 (let (($x249 (=> $x174 $x246)))
 (not $x249)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x80
      #x00))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2d275bbc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3863a320)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xfd4c7f00)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfdeb7f08)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3863a323)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2d275bbf)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3863a320)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2d275bbc)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3863a320) #x08
    (ite (= x!0 #x2d275bbd) #x7f
    (ite (= x!0 #x3863a323) #xfd
    (ite (= x!0 #x2d275bbf) #xfd
    (ite (= x!0 #x2d275bbe) #x4c
    (ite (= x!0 #x3863a322) #xeb
    (ite (= x!0 #x3863a321) #x7f
      #x00))))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x2d275bbf)
                                      (k!11 #x2d275bbe)
                                      (k!11 #x2d275bbd)
                                      (k!11 #x2d275bbc)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x2d275bbf)
                                      (k!11 #x2d275bbe)
                                      (k!11 #x2d275bbd)
                                      (k!11 #x2d275bbc)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x2d275bbf)
                                      (k!11 #x2d275bbe)
                                      (k!11 #x2d275bbd)
                                      (k!11 #x2d275bbc)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x2d275bbf)
                                      (k!11 #x2d275bbe)
                                      (k!11 #x2d275bbd)
                                      (k!11 #x2d275bbc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3863a323)
                                      (k!11 #x3863a322)
                                      (k!11 #x3863a321)
                                      (k!11 #x3863a320)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3863a323)
                                      (k!11 #x3863a322)
                                      (k!11 #x3863a321)
                                      (k!11 #x3863a320)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3863a323)
                                      (k!11 #x3863a322)
                                      (k!11 #x3863a321)
                                      (k!11 #x3863a320)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x3863a323)
                                      (k!11 #x3863a322)
                                      (k!11 #x3863a321)
                                      (k!11 #x3863a320))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x20 ((_ extract 2 0) input.dst.llvm-%m1)))
 (let (($x250 (= (_ bv0 3) ?x20)))
 (let (($x44 (= $x250 true)))
 (let ((?x175 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x211 (concat ?x160 (concat ?x194 ?x175)))))
 (let (($x28 (= input.dst.llvm-%m2 ?x143)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x196 (concat ?x10 (concat ?x146 ?x153)))))
 (let (($x191 (= input.dst.llvm-%m1 ?x179)))
 (let (($x24 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x80 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x9 (and (and (and $x80 $x24) $x191) $x28)))
 (let ((?x147 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x40 (= (_ bv0 32) ?x147)))
 (let ((?x239 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x99 (= (_ bv0 32) ?x239)))
 (let ((?x22 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x207 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x207)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x184 (and $x164 $x76)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x83 $x184)))
 (let (($x241 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (and $x5 $x56)))
 (let (($x193 (not $x231)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x228 $x71)))
 (let (($x115 (and (not $x122) $x193)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x186 $x246)))
 (let (($x89 (not $x249)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x174 $x67)))
 (let (($x100 (and (not $x111) $x89)))
 (let (($x141 (and (and (and (and (and (and $x100 $x115) $x200) $x241) $x82) $x142) $x99)))
 (let (($x13 (and $x141 $x40)))
 (let (($x12 (forall ((input.ind-%var363X (_ BitVec 32)) )(let ((?x202 (bvmul input.ind-%var363X (_ bv4 32))))
 (let ((?x138 (bvadd ?x202 input.dst.llvm-%m1)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem ?x138))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv2 32))) ?x226))))
 (let ((?x125 (input.spec-%var-m1-1.1.1 input.ind-%var363X)))
 (let (($x156 (input.spec-%var-m1-1.0.1 input.ind-%var363X)))
 (=> $x156 (= ?x125 ?x78)))))))))
 ))
 (let (($x243 (forall ((input.ind-%var362X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var362X) (bvult input.ind-%var362X (_ bv100 32)))))
 (let (($x156 (input.spec-%var-m1-1.0.1 input.ind-%var362X)))
 (= $x156 $x240))))
 ))
 (let (($x27 (and $x243 $x12)))
 (let (($x209 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x173 (or false (or false (and (and true (or $x206 $x97)) (or $x236 $x209))))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x173)))
 (let (($x170 (and (and (and $x75 $x27) $x13) $x9)))
 (let (($x8 (forall ((input.ind-%var353X (_ BitVec 32)) )(let ((?x202 (bvmul input.ind-%var353X (_ bv4 32))))
 (let ((?x139 (bvadd ?x202 input.dst.llvm-%m2)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x242))))
 (let ((?x106 (input.spec-%var-m2-1.1.1 input.ind-%var353X)))
 (let (($x163 (input.spec-%var-m2-1.0.1 input.ind-%var353X)))
 (=> $x163 (= ?x106 ?x197)))))))))
 ))
 (let (($x62 (forall ((input.ind-%var352X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var352X) (bvult input.ind-%var352X (_ bv100 32)))))
 (let (($x163 (input.spec-%var-m2-1.0.1 input.ind-%var352X)))
 (= $x163 $x240))))
 ))
 (let (($x152 (and $x62 $x8)))
 (let (($x52 (and $x152 $x170)))
 (let (($x86 (= $x52 true)))
 (let (($x96 (forall ((input.ind-%var373X (_ BitVec 32)) )(let ((?x229 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var373X)))
 (let ((?x125 (input.spec-%var-m1-1.1.1 input.ind-%var373X)))
 (let (($x156 (input.spec-%var-m1-1.0.1 input.ind-%var373X)))
 (=> $x156 (= ?x125 ?x229))))))
 ))
 (let (($x14 (forall ((input.ind-%var372X (_ BitVec 32)) )(let (($x238 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var372X)))
 (let (($x156 (input.spec-%var-m1-1.0.1 input.ind-%var372X)))
 (= $x156 $x238))))
 ))
 (let (($x148 (and $x14 $x96)))
 (let (($x133 (and $x148 $x86)))
 (let (($x144 (forall ((input.ind-%var383X (_ BitVec 32)) )(let ((?x47 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var383X)))
 (let ((?x106 (input.spec-%var-m2-1.1.1 input.ind-%var383X)))
 (let (($x163 (input.spec-%var-m2-1.0.1 input.ind-%var383X)))
 (=> $x163 (= ?x106 ?x47))))))
 ))
 (let (($x94 (forall ((input.ind-%var382X (_ BitVec 32)) )(let (($x72 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var382X)))
 (let (($x163 (input.spec-%var-m2-1.0.1 input.ind-%var382X)))
 (= $x163 $x72))))
 ))
 (let (($x81 (and $x94 $x144)))
 (let (($x34 (and $x81 $x133)))
 (let (($x131 (=> $x34 $x44)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x20 ((_ extract 2 0) input.dst.llvm-%m1)))
 (let (($x250 (= (_ bv0 3) ?x20)))
 (let (($x44 (= $x250 true)))
 (let ((?x175 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x211 (concat ?x160 (concat ?x194 ?x175)))))
 (let (($x28 (= input.dst.llvm-%m2 ?x143)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x196 (concat ?x10 (concat ?x146 ?x153)))))
 (let (($x191 (= input.dst.llvm-%m1 ?x179)))
 (let (($x24 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x80 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x9 (and (and (and $x80 $x24) $x191) $x28)))
 (let ((?x147 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x40 (= (_ bv0 32) ?x147)))
 (let ((?x239 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x99 (= (_ bv0 32) ?x239)))
 (let ((?x22 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x207 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x207)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x184 (and $x164 $x76)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x83 $x184)))
 (let (($x241 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (and $x5 $x56)))
 (let (($x193 (not $x231)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x228 $x71)))
 (let (($x115 (and (not $x122) $x193)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x186 $x246)))
 (let (($x89 (not $x249)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x174 $x67)))
 (let (($x100 (and (not $x111) $x89)))
 (let (($x141 (and (and (and (and (and (and $x100 $x115) $x200) $x241) $x82) $x142) $x99)))
 (let (($x13 (and $x141 $x40)))
 (let (($x12 (forall ((input.ind-%var363X (_ BitVec 32)) )(let ((?x202 (bvmul input.ind-%var363X (_ bv4 32))))
 (let ((?x138 (bvadd ?x202 input.dst.llvm-%m1)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem ?x138))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv2 32))) ?x226))))
 (let ((?x125 (input.spec-%var-m1-1.1.1 input.ind-%var363X)))
 (let (($x156 (input.spec-%var-m1-1.0.1 input.ind-%var363X)))
 (=> $x156 (= ?x125 ?x78)))))))))
 ))
 (let (($x243 (forall ((input.ind-%var362X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var362X) (bvult input.ind-%var362X (_ bv100 32)))))
 (let (($x156 (input.spec-%var-m1-1.0.1 input.ind-%var362X)))
 (= $x156 $x240))))
 ))
 (let (($x27 (and $x243 $x12)))
 (let (($x209 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x173 (or false (or false (and (and true (or $x206 $x97)) (or $x236 $x209))))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x173)))
 (let (($x170 (and (and (and $x75 $x27) $x13) $x9)))
 (let (($x8 (forall ((input.ind-%var353X (_ BitVec 32)) )(let ((?x202 (bvmul input.ind-%var353X (_ bv4 32))))
 (let ((?x139 (bvadd ?x202 input.dst.llvm-%m2)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x242))))
 (let ((?x106 (input.spec-%var-m2-1.1.1 input.ind-%var353X)))
 (let (($x163 (input.spec-%var-m2-1.0.1 input.ind-%var353X)))
 (=> $x163 (= ?x106 ?x197)))))))))
 ))
 (let (($x62 (forall ((input.ind-%var352X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var352X) (bvult input.ind-%var352X (_ bv100 32)))))
 (let (($x163 (input.spec-%var-m2-1.0.1 input.ind-%var352X)))
 (= $x163 $x240))))
 ))
 (let (($x152 (and $x62 $x8)))
 (let (($x52 (and $x152 $x170)))
 (let (($x86 (= $x52 true)))
 (let (($x96 (forall ((input.ind-%var373X (_ BitVec 32)) )(let ((?x229 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var373X)))
 (let ((?x125 (input.spec-%var-m1-1.1.1 input.ind-%var373X)))
 (let (($x156 (input.spec-%var-m1-1.0.1 input.ind-%var373X)))
 (=> $x156 (= ?x125 ?x229))))))
 ))
 (let (($x14 (forall ((input.ind-%var372X (_ BitVec 32)) )(let (($x238 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var372X)))
 (let (($x156 (input.spec-%var-m1-1.0.1 input.ind-%var372X)))
 (= $x156 $x238))))
 ))
 (let (($x148 (and $x14 $x96)))
 (let (($x133 (and $x148 $x86)))
 (let (($x144 (forall ((input.ind-%var383X (_ BitVec 32)) )(let ((?x47 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var383X)))
 (let ((?x106 (input.spec-%var-m2-1.1.1 input.ind-%var383X)))
 (let (($x163 (input.spec-%var-m2-1.0.1 input.ind-%var383X)))
 (=> $x163 (= ?x106 ?x47))))))
 ))
 (let (($x94 (forall ((input.ind-%var382X (_ BitVec 32)) )(let (($x72 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var382X)))
 (let (($x163 (input.spec-%var-m2-1.0.1 input.ind-%var382X)))
 (= $x163 $x72))))
 ))
 (let (($x81 (and $x94 $x144)))
 (let (($x34 (and $x81 $x133)))
 (let (($x131 (=> $x34 $x44)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x04
      #x00))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6ffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6f99cbec)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xadf7eb00)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfb791e04)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6f99cbef)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6ffffffb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6f99cbec)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6ffffff8)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x6f99cbec) #x04
    (ite (= x!0 #x6ffffff9) #xeb
    (ite (= x!0 #x6f99cbef) #xfb
    (ite (= x!0 #x6ffffffb) #xad
    (ite (= x!0 #x6ffffffa) #xf7
    (ite (= x!0 #x6f99cbee) #x79
    (ite (= x!0 #x6f99cbed) #x1e
      #x00))))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x6ffffffb)
                                      (k!11 #x6ffffffa)
                                      (k!11 #x6ffffff9)
                                      (k!11 #x6ffffff8)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x6ffffffb)
                                      (k!11 #x6ffffffa)
                                      (k!11 #x6ffffff9)
                                      (k!11 #x6ffffff8)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x6ffffffb)
                                      (k!11 #x6ffffffa)
                                      (k!11 #x6ffffff9)
                                      (k!11 #x6ffffff8)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x6ffffffb)
                                      (k!11 #x6ffffffa)
                                      (k!11 #x6ffffff9)
                                      (k!11 #x6ffffff8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x6f99cbef)
                                      (k!11 #x6f99cbee)
                                      (k!11 #x6f99cbed)
                                      (k!11 #x6f99cbec)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x6f99cbef)
                                      (k!11 #x6f99cbee)
                                      (k!11 #x6f99cbed)
                                      (k!11 #x6f99cbec)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x6f99cbef)
                                      (k!11 #x6f99cbee)
                                      (k!11 #x6f99cbed)
                                      (k!11 #x6f99cbec)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x6f99cbef)
                                      (k!11 #x6f99cbee)
                                      (k!11 #x6f99cbed)
                                      (k!11 #x6f99cbec))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x252 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x114 (= (_ bv0 2) ?x252)))
 (let (($x93 (= $x114 true)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x203 (concat ?x32 (concat ?x92 (concat ?x108 ?x216)))))
 (let (($x54 (= input.dst.llvm-%m2 ?x203)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x95 (concat ?x219 (concat ?x17 ?x177)))))
 (let (($x215 (= input.dst.llvm-%m1 ?x105)))
 (let (($x183 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x113 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x33 (and (and (and $x113 $x183) $x215) $x54)))
 (let ((?x11 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x85 (= (_ bv0 32) ?x11)))
 (let ((?x120 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x77 (= (_ bv0 32) ?x120)))
 (let ((?x63 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x248 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x248)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x210 (and $x18 $x64)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x74 $x210)))
 (let (($x101 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x150 $x199)))
 (let (($x253 (not $x159)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (and $x60 $x188)))
 (let (($x58 (and (not $x237) $x253)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x250 $x44)))
 (let (($x185 (not $x131)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x34 $x110)))
 (let (($x145 (and (not $x20) $x185)))
 (let (($x189 (and (and (and (and (and (and $x145 $x58) $x187) $x101) $x119) $x29) $x77)))
 (let (($x171 (and $x189 $x85)))
 (let (($x86 (forall ((input.ind-%var435X (_ BitVec 32)) )(let ((?x27 (bvmul input.ind-%var435X (_ bv4 32))))
 (let ((?x211 (bvadd ?x27 input.dst.llvm-%m1)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv1 32))) (select input.dst.llvm-mem ?x211))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv2 32))) ?x194))))
 (let ((?x128 (input.spec-%var-m1-1.1.1 input.ind-%var435X)))
 (let (($x246 (input.spec-%var-m1-1.0.1 input.ind-%var435X)))
 (=> $x246 (= ?x128 ?x9)))))))))
 ))
 (let (($x55 (forall ((input.ind-%var434X (_ BitVec 32)) )(let (($x173 (and (bvule (_ bv0 32) input.ind-%var434X) (bvult input.ind-%var434X (_ bv100 32)))))
 (let (($x246 (input.spec-%var-m1-1.0.1 input.ind-%var434X)))
 (= $x246 $x173))))
 ))
 (let (($x133 (and $x55 $x86)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x224 (or false (or false (and (and true (or $x241 $x134)) (or $x184 $x82))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x224)))
 (let (($x124 (and (and (and $x99 $x133) $x171) $x33)))
 (let (($x5 (forall ((input.ind-%var425X (_ BitVec 32)) )(let ((?x27 (bvmul input.ind-%var425X (_ bv4 32))))
 (let ((?x36 (bvadd ?x27 input.dst.llvm-%m2)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x75))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 input.ind-%var425X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var425X)))
 (=> $x35 (= ?x156 ?x71)))))))))
 ))
 (let (($x148 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x173 (and (bvule (_ bv0 32) input.ind-%var424X) (bvult input.ind-%var424X (_ bv100 32)))))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var424X)))
 (= $x35 $x173))))
 ))
 (let (($x56 (and $x148 $x5)))
 (let (($x57 (and $x56 $x124)))
 (let (($x45 (= $x57 true)))
 (let (($x206 (forall ((input.ind-%var445X (_ BitVec 32)) )(let ((?x14 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var445X)))
 (let ((?x128 (input.spec-%var-m1-1.1.1 input.ind-%var445X)))
 (let (($x246 (input.spec-%var-m1-1.0.1 input.ind-%var445X)))
 (=> $x246 (= ?x128 ?x14))))))
 ))
 (let (($x112 (forall ((input.ind-%var444X (_ BitVec 32)) )(let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var444X)))
 (let (($x246 (input.spec-%var-m1-1.0.1 input.ind-%var444X)))
 (= $x246 $x30))))
 ))
 (let (($x186 (and $x112 $x206)))
 (let (($x192 (and $x186 $x45)))
 (let (($x111 (forall ((input.ind-%var455X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var455X)))
 (let ((?x156 (input.spec-%var-m2-1.1.1 input.ind-%var455X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var455X)))
 (=> $x35 (= ?x156 ?x243))))))
 ))
 (let (($x126 (forall ((input.ind-%var454X (_ BitVec 32)) )(let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var454X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var454X)))
 (= $x35 $x94))))
 ))
 (let (($x96 (and $x126 $x111)))
 (let (($x166 (and $x96 $x192)))
 (let (($x102 (=> $x166 $x93)))
 (not $x102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x252 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x114 (= (_ bv0 2) ?x252)))
 (let (($x93 (= $x114 true)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x203 (concat ?x32 (concat ?x92 (concat ?x108 ?x216)))))
 (let (($x54 (= input.dst.llvm-%m2 ?x203)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x95 (concat ?x219 (concat ?x17 ?x177)))))
 (let (($x215 (= input.dst.llvm-%m1 ?x105)))
 (let (($x183 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x113 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x33 (and (and (and $x113 $x183) $x215) $x54)))
 (let ((?x11 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x85 (= (_ bv0 32) ?x11)))
 (let ((?x120 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x77 (= (_ bv0 32) ?x120)))
 (let ((?x63 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x248 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x248)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x210 (and $x18 $x64)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x74 $x210)))
 (let (($x101 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x150 $x199)))
 (let (($x253 (not $x159)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (and $x60 $x188)))
 (let (($x58 (and (not $x237) $x253)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x250 $x44)))
 (let (($x185 (not $x131)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x34 $x110)))
 (let (($x145 (and (not $x20) $x185)))
 (let (($x189 (and (and (and (and (and (and $x145 $x58) $x187) $x101) $x119) $x29) $x77)))
 (let (($x171 (and $x189 $x85)))
 (let (($x86 (forall ((input.ind-%var435X (_ BitVec 32)) )(let ((?x27 (bvmul input.ind-%var435X (_ bv4 32))))
 (let ((?x211 (bvadd ?x27 input.dst.llvm-%m1)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv1 32))) (select input.dst.llvm-mem ?x211))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv2 32))) ?x194))))
 (let ((?x128 (input.spec-%var-m1-1.1.1 input.ind-%var435X)))
 (let (($x246 (input.spec-%var-m1-1.0.1 input.ind-%var435X)))
 (=> $x246 (= ?x128 ?x9)))))))))
 ))
 (let (($x55 (forall ((input.ind-%var434X (_ BitVec 32)) )(let (($x173 (and (bvule (_ bv0 32) input.ind-%var434X) (bvult input.ind-%var434X (_ bv100 32)))))
 (let (($x246 (input.spec-%var-m1-1.0.1 input.ind-%var434X)))
 (= $x246 $x173))))
 ))
 (let (($x133 (and $x55 $x86)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x224 (or false (or false (and (and true (or $x241 $x134)) (or $x184 $x82))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x224)))
 (let (($x124 (and (and (and $x99 $x133) $x171) $x33)))
 (let (($x5 (forall ((input.ind-%var425X (_ BitVec 32)) )(let ((?x27 (bvmul input.ind-%var425X (_ bv4 32))))
 (let ((?x36 (bvadd ?x27 input.dst.llvm-%m2)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x75))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 input.ind-%var425X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var425X)))
 (=> $x35 (= ?x156 ?x71)))))))))
 ))
 (let (($x148 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x173 (and (bvule (_ bv0 32) input.ind-%var424X) (bvult input.ind-%var424X (_ bv100 32)))))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var424X)))
 (= $x35 $x173))))
 ))
 (let (($x56 (and $x148 $x5)))
 (let (($x57 (and $x56 $x124)))
 (let (($x45 (= $x57 true)))
 (let (($x206 (forall ((input.ind-%var445X (_ BitVec 32)) )(let ((?x14 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var445X)))
 (let ((?x128 (input.spec-%var-m1-1.1.1 input.ind-%var445X)))
 (let (($x246 (input.spec-%var-m1-1.0.1 input.ind-%var445X)))
 (=> $x246 (= ?x128 ?x14))))))
 ))
 (let (($x112 (forall ((input.ind-%var444X (_ BitVec 32)) )(let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var444X)))
 (let (($x246 (input.spec-%var-m1-1.0.1 input.ind-%var444X)))
 (= $x246 $x30))))
 ))
 (let (($x186 (and $x112 $x206)))
 (let (($x192 (and $x186 $x45)))
 (let (($x111 (forall ((input.ind-%var455X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var455X)))
 (let ((?x156 (input.spec-%var-m2-1.1.1 input.ind-%var455X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var455X)))
 (=> $x35 (= ?x156 ?x243))))))
 ))
 (let (($x126 (forall ((input.ind-%var454X (_ BitVec 32)) )(let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var454X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var454X)))
 (= $x35 $x94))))
 ))
 (let (($x96 (and $x126 $x111)))
 (let (($x166 (and $x96 $x192)))
 (let (($x102 (=> $x166 $x93)))
 (not $x102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 133 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x274 (forall ((input.ind-%var505X (_ BitVec 32)) )(let ((?x86 (bvmul input.ind-%var505X (_ bv4 32))))
 (let ((?x76 (bvadd ?x86 input.dst.llvm-%m2)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x99))))
 (let ((?x246 (input.spec-%var-m2-1.1.1 input.ind-%var505X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var505X)))
 (=> $x35 (= ?x246 ?x60)))))))))
 ))
 (let (($x256 (forall ((input.ind-%var504X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var504X) (bvult input.ind-%var504X (_ bv100 32)))))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var504X)))
 (= $x35 $x224))))
 ))
 (let (($x275 (and $x256 $x274)))
 (let (($x276 (= $x275 true)))
 (let ((?x196 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x229 (concat ?x40 (concat ?x155 ?x196)))))
 (let (($x233 (= input.dst.llvm-%m2 ?x80)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x146 (concat ?x176 (concat ?x141 ?x230)))))
 (let (($x157 (= input.dst.llvm-%m1 ?x153)))
 (let (($x204 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x242 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x8 (and (and (and $x242 $x204) $x157) $x233)))
 (let ((?x223 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x212 (= (_ bv0 32) ?x223)))
 (let ((?x137 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x136 (= (_ bv0 32) ?x137)))
 (let ((?x139 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x117 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x198 (and $x235 $x109)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x31 $x198)))
 (let (($x240 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (and $x72 $x238)))
 (let (($x182 (not $x197)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x231 $x221)))
 (let (($x125 (and (not $x48) $x182)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x252 $x114)))
 (let (($x102 (not $x93)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x192 $x166)))
 (let (($x78 (and (not $x16) $x102)))
 (let (($x222 (and (and (and (and (and (and $x78 $x125) $x138) $x240) $x232) $x66) $x136)))
 (let (($x254 (and $x222 $x212)))
 (let (($x57 (forall ((input.ind-%var475X (_ BitVec 32)) )(let ((?x86 (bvmul input.ind-%var475X (_ bv4 32))))
 (let ((?x247 (bvadd ?x86 input.dst.llvm-%m1)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x46))))
 (let ((?x19 (input.spec-%var-m1-1.1.1 input.ind-%var475X)))
 (let (($x250 (input.spec-%var-m1-1.0.1 input.ind-%var475X)))
 (=> $x250 (= ?x19 ?x54)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var474X) (bvult input.ind-%var474X (_ bv100 32)))))
 (let (($x250 (input.spec-%var-m1-1.0.1 input.ind-%var474X)))
 (= $x250 $x224))))
 ))
 (let (($x45 (and $x255 $x57)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x225 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x225)))
 (let (($x29 (or false (or false (and (and true (or $x53 $x101)) (or $x64 $x210))))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x209 (and (and (and $x120 $x45) $x254) $x8)))
 (let (($x220 (forall ((input.ind-%var465X (_ BitVec 32)) )(let ((?x86 (bvmul input.ind-%var465X (_ bv4 32))))
 (let ((?x76 (bvadd ?x86 input.dst.llvm-%m2)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x99))))
 (let ((?x246 (input.spec-%var-m2-1.1.1 input.ind-%var465X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var465X)))
 (=> $x35 (= ?x246 ?x60)))))))))
 ))
 (let (($x186 (forall ((input.ind-%var464X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var464X) (bvult input.ind-%var464X (_ bv100 32)))))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var464X)))
 (= $x35 $x224))))
 ))
 (let (($x150 (and $x186 $x220)))
 (let (($x81 (and $x150 $x209)))
 (let (($x67 (= $x81 true)))
 (let (($x241 (forall ((input.ind-%var485X (_ BitVec 32)) )(let ((?x112 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var485X)))
 (let ((?x19 (input.spec-%var-m1-1.1.1 input.ind-%var485X)))
 (let (($x250 (input.spec-%var-m1-1.0.1 input.ind-%var485X)))
 (=> $x250 (= ?x19 ?x112))))))
 ))
 (let (($x73 (forall ((input.ind-%var484X (_ BitVec 32)) )(let (($x100 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var484X)))
 (let (($x250 (input.spec-%var-m1-1.0.1 input.ind-%var484X)))
 (= $x250 $x100))))
 ))
 (let (($x121 (and $x73 $x241)))
 (let (($x163 (and $x121 $x67)))
 (let (($x110 (forall ((input.ind-%var495X (_ BitVec 32)) )(let ((?x55 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var495X)))
 (let ((?x246 (input.spec-%var-m2-1.1.1 input.ind-%var495X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var495X)))
 (=> $x35 (= ?x246 ?x55))))))
 ))
 (let (($x236 (forall ((input.ind-%var494X (_ BitVec 32)) )(let (($x126 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var494X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var494X)))
 (= $x35 $x126))))
 ))
 (let (($x206 (and $x236 $x110)))
 (let (($x26 (and $x206 $x163)))
 (let (($x277 (=> $x26 $x276)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x274 (forall ((input.ind-%var505X (_ BitVec 32)) )(let ((?x86 (bvmul input.ind-%var505X (_ bv4 32))))
 (let ((?x76 (bvadd ?x86 input.dst.llvm-%m2)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x99))))
 (let ((?x246 (input.spec-%var-m2-1.1.1 input.ind-%var505X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var505X)))
 (=> $x35 (= ?x246 ?x60)))))))))
 ))
 (let (($x256 (forall ((input.ind-%var504X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var504X) (bvult input.ind-%var504X (_ bv100 32)))))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var504X)))
 (= $x35 $x224))))
 ))
 (let (($x275 (and $x256 $x274)))
 (let (($x276 (= $x275 true)))
 (let ((?x196 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x229 (concat ?x40 (concat ?x155 ?x196)))))
 (let (($x233 (= input.dst.llvm-%m2 ?x80)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x146 (concat ?x176 (concat ?x141 ?x230)))))
 (let (($x157 (= input.dst.llvm-%m1 ?x153)))
 (let (($x204 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x242 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x8 (and (and (and $x242 $x204) $x157) $x233)))
 (let ((?x223 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x212 (= (_ bv0 32) ?x223)))
 (let ((?x137 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x136 (= (_ bv0 32) ?x137)))
 (let ((?x139 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x117 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x198 (and $x235 $x109)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x31 $x198)))
 (let (($x240 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (and $x72 $x238)))
 (let (($x182 (not $x197)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x231 $x221)))
 (let (($x125 (and (not $x48) $x182)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x252 $x114)))
 (let (($x102 (not $x93)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x192 $x166)))
 (let (($x78 (and (not $x16) $x102)))
 (let (($x222 (and (and (and (and (and (and $x78 $x125) $x138) $x240) $x232) $x66) $x136)))
 (let (($x254 (and $x222 $x212)))
 (let (($x57 (forall ((input.ind-%var475X (_ BitVec 32)) )(let ((?x86 (bvmul input.ind-%var475X (_ bv4 32))))
 (let ((?x247 (bvadd ?x86 input.dst.llvm-%m1)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x46))))
 (let ((?x19 (input.spec-%var-m1-1.1.1 input.ind-%var475X)))
 (let (($x250 (input.spec-%var-m1-1.0.1 input.ind-%var475X)))
 (=> $x250 (= ?x19 ?x54)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var474X) (bvult input.ind-%var474X (_ bv100 32)))))
 (let (($x250 (input.spec-%var-m1-1.0.1 input.ind-%var474X)))
 (= $x250 $x224))))
 ))
 (let (($x45 (and $x255 $x57)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x225 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x225)))
 (let (($x29 (or false (or false (and (and true (or $x53 $x101)) (or $x64 $x210))))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x209 (and (and (and $x120 $x45) $x254) $x8)))
 (let (($x220 (forall ((input.ind-%var465X (_ BitVec 32)) )(let ((?x86 (bvmul input.ind-%var465X (_ bv4 32))))
 (let ((?x76 (bvadd ?x86 input.dst.llvm-%m2)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x99))))
 (let ((?x246 (input.spec-%var-m2-1.1.1 input.ind-%var465X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var465X)))
 (=> $x35 (= ?x246 ?x60)))))))))
 ))
 (let (($x186 (forall ((input.ind-%var464X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var464X) (bvult input.ind-%var464X (_ bv100 32)))))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var464X)))
 (= $x35 $x224))))
 ))
 (let (($x150 (and $x186 $x220)))
 (let (($x81 (and $x150 $x209)))
 (let (($x67 (= $x81 true)))
 (let (($x241 (forall ((input.ind-%var485X (_ BitVec 32)) )(let ((?x112 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var485X)))
 (let ((?x19 (input.spec-%var-m1-1.1.1 input.ind-%var485X)))
 (let (($x250 (input.spec-%var-m1-1.0.1 input.ind-%var485X)))
 (=> $x250 (= ?x19 ?x112))))))
 ))
 (let (($x73 (forall ((input.ind-%var484X (_ BitVec 32)) )(let (($x100 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var484X)))
 (let (($x250 (input.spec-%var-m1-1.0.1 input.ind-%var484X)))
 (= $x250 $x100))))
 ))
 (let (($x121 (and $x73 $x241)))
 (let (($x163 (and $x121 $x67)))
 (let (($x110 (forall ((input.ind-%var495X (_ BitVec 32)) )(let ((?x55 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var495X)))
 (let ((?x246 (input.spec-%var-m2-1.1.1 input.ind-%var495X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var495X)))
 (=> $x35 (= ?x246 ?x55))))))
 ))
 (let (($x236 (forall ((input.ind-%var494X (_ BitVec 32)) )(let (($x126 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var494X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var494X)))
 (= $x35 $x126))))
 ))
 (let (($x206 (and $x236 $x110)))
 (let (($x26 (and $x206 $x163)))
 (let (($x277 (=> $x26 $x276)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x234 (forall ((input.ind-%var555X (_ BitVec 32)) )(let ((?x57 (bvmul input.ind-%var555X (_ bv4 32))))
 (let ((?x104 (bvadd ?x57 input.dst.llvm-%m1)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x161))))
 (let ((?x127 (input.spec-%var-m1-1.1.1 input.ind-%var555X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var555X)))
 (=> $x252 (= ?x127 ?x233)))))))))
 ))
 (let (($x259 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x29 (and (bvule (_ bv0 32) input.ind-%var554X) (bvult input.ind-%var554X (_ bv100 32)))))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var554X)))
 (= $x252 $x29))))
 ))
 (let (($x272 (and $x259 $x234)))
 (let (($x258 (= $x272 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x215 (concat ?x253 (concat ?x219 ?x65)))))
 (let (($x168 (= input.dst.llvm-%m2 ?x14)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x218 (concat ?x140 (concat ?x159 ?x122)))))
 (let (($x17 (= input.dst.llvm-%m1 ?x151)))
 (let (($x149 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x75 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x79 (and (and (and $x75 $x149) $x17) $x168)))
 (let ((?x28 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x107 (= (_ bv0 32) ?x28)))
 (let ((?x83 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x211 (= (_ bv0 32) ?x83)))
 (let ((?x36 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x36)))
 (let ((?x170 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x226 (and $x43 $x37)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x42 $x226)))
 (let (($x173 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x94 $x30)))
 (let (($x213 (not $x71)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x199 $x10)))
 (let (($x128 (and (not $x39) $x213)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x274 $x275)))
 (let (($x277 (not $x276)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x163 $x26)))
 (let (($x178 (and (not $x256) $x277)))
 (let (($x175 (and (and (and (and (and (and $x178 $x128) $x123) $x173) $x181) $x200) $x211)))
 (let (($x89 (and $x175 $x107)))
 (let (($x81 (forall ((input.ind-%var525X (_ BitVec 32)) )(let ((?x57 (bvmul input.ind-%var525X (_ bv4 32))))
 (let ((?x104 (bvadd ?x57 input.dst.llvm-%m1)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x161))))
 (let ((?x127 (input.spec-%var-m1-1.1.1 input.ind-%var525X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var525X)))
 (=> $x252 (= ?x127 ?x233)))))))))
 ))
 (let (($x41 (forall ((input.ind-%var524X (_ BitVec 32)) )(let (($x29 (and (bvule (_ bv0 32) input.ind-%var524X) (bvult input.ind-%var524X (_ bv100 32)))))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var524X)))
 (= $x252 $x29))))
 ))
 (let (($x67 (and $x41 $x81)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x240 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x66 (or false (or false (and (and true (or $x174 $x240)) (or $x109 $x198))))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x20 (and (and (and $x137 $x67) $x89) $x79)))
 (let (($x103 (forall ((input.ind-%var515X (_ BitVec 32)) )(let ((?x57 (bvmul input.ind-%var515X (_ bv4 32))))
 (let ((?x248 (bvadd ?x57 input.dst.llvm-%m2)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x120))))
 (let ((?x250 (input.spec-%var-m2-1.1.1 input.ind-%var515X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var515X)))
 (=> $x35 (= ?x250 ?x231)))))))))
 ))
 (let (($x121 (forall ((input.ind-%var514X (_ BitVec 32)) )(let (($x29 (and (bvule (_ bv0 32) input.ind-%var514X) (bvult input.ind-%var514X (_ bv100 32)))))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var514X)))
 (= $x35 $x29))))
 ))
 (let (($x72 (and $x121 $x103)))
 (let (($x82 (and $x72 $x20)))
 (let (($x96 (= $x82 true)))
 (let (($x53 (forall ((input.ind-%var535X (_ BitVec 32)) )(let ((?x73 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var535X)))
 (let ((?x127 (input.spec-%var-m1-1.1.1 input.ind-%var535X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var535X)))
 (=> $x252 (= ?x127 ?x73))))))
 ))
 (let (($x92 (forall ((input.ind-%var534X (_ BitVec 32)) )(let (($x185 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var534X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var534X)))
 (= $x252 $x185))))
 ))
 (let (($x129 (and $x92 $x53)))
 (let (($x34 (and $x129 $x96)))
 (let (($x166 (forall ((input.ind-%var545X (_ BitVec 32)) )(let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var545X)))
 (let ((?x250 (input.spec-%var-m2-1.1.1 input.ind-%var545X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var545X)))
 (=> $x35 (= ?x250 ?x255))))))
 ))
 (let (($x184 (forall ((input.ind-%var544X (_ BitVec 32)) )(let (($x236 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var544X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var544X)))
 (= $x35 $x236))))
 ))
 (let (($x241 (and $x184 $x166)))
 (let (($x97 (and $x241 $x34)))
 (let (($x273 (=> $x97 $x258)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x234 (forall ((input.ind-%var555X (_ BitVec 32)) )(let ((?x57 (bvmul input.ind-%var555X (_ bv4 32))))
 (let ((?x104 (bvadd ?x57 input.dst.llvm-%m1)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x161))))
 (let ((?x127 (input.spec-%var-m1-1.1.1 input.ind-%var555X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var555X)))
 (=> $x252 (= ?x127 ?x233)))))))))
 ))
 (let (($x259 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x29 (and (bvule (_ bv0 32) input.ind-%var554X) (bvult input.ind-%var554X (_ bv100 32)))))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var554X)))
 (= $x252 $x29))))
 ))
 (let (($x272 (and $x259 $x234)))
 (let (($x258 (= $x272 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x215 (concat ?x253 (concat ?x219 ?x65)))))
 (let (($x168 (= input.dst.llvm-%m2 ?x14)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x218 (concat ?x140 (concat ?x159 ?x122)))))
 (let (($x17 (= input.dst.llvm-%m1 ?x151)))
 (let (($x149 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x75 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x79 (and (and (and $x75 $x149) $x17) $x168)))
 (let ((?x28 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x107 (= (_ bv0 32) ?x28)))
 (let ((?x83 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x211 (= (_ bv0 32) ?x83)))
 (let ((?x36 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x36)))
 (let ((?x170 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x226 (and $x43 $x37)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x42 $x226)))
 (let (($x173 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x94 $x30)))
 (let (($x213 (not $x71)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x199 $x10)))
 (let (($x128 (and (not $x39) $x213)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x274 $x275)))
 (let (($x277 (not $x276)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x163 $x26)))
 (let (($x178 (and (not $x256) $x277)))
 (let (($x175 (and (and (and (and (and (and $x178 $x128) $x123) $x173) $x181) $x200) $x211)))
 (let (($x89 (and $x175 $x107)))
 (let (($x81 (forall ((input.ind-%var525X (_ BitVec 32)) )(let ((?x57 (bvmul input.ind-%var525X (_ bv4 32))))
 (let ((?x104 (bvadd ?x57 input.dst.llvm-%m1)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x161))))
 (let ((?x127 (input.spec-%var-m1-1.1.1 input.ind-%var525X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var525X)))
 (=> $x252 (= ?x127 ?x233)))))))))
 ))
 (let (($x41 (forall ((input.ind-%var524X (_ BitVec 32)) )(let (($x29 (and (bvule (_ bv0 32) input.ind-%var524X) (bvult input.ind-%var524X (_ bv100 32)))))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var524X)))
 (= $x252 $x29))))
 ))
 (let (($x67 (and $x41 $x81)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x240 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x66 (or false (or false (and (and true (or $x174 $x240)) (or $x109 $x198))))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x20 (and (and (and $x137 $x67) $x89) $x79)))
 (let (($x103 (forall ((input.ind-%var515X (_ BitVec 32)) )(let ((?x57 (bvmul input.ind-%var515X (_ bv4 32))))
 (let ((?x248 (bvadd ?x57 input.dst.llvm-%m2)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x120))))
 (let ((?x250 (input.spec-%var-m2-1.1.1 input.ind-%var515X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var515X)))
 (=> $x35 (= ?x250 ?x231)))))))))
 ))
 (let (($x121 (forall ((input.ind-%var514X (_ BitVec 32)) )(let (($x29 (and (bvule (_ bv0 32) input.ind-%var514X) (bvult input.ind-%var514X (_ bv100 32)))))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var514X)))
 (= $x35 $x29))))
 ))
 (let (($x72 (and $x121 $x103)))
 (let (($x82 (and $x72 $x20)))
 (let (($x96 (= $x82 true)))
 (let (($x53 (forall ((input.ind-%var535X (_ BitVec 32)) )(let ((?x73 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var535X)))
 (let ((?x127 (input.spec-%var-m1-1.1.1 input.ind-%var535X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var535X)))
 (=> $x252 (= ?x127 ?x73))))))
 ))
 (let (($x92 (forall ((input.ind-%var534X (_ BitVec 32)) )(let (($x185 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var534X)))
 (let (($x252 (input.spec-%var-m1-1.0.1 input.ind-%var534X)))
 (= $x252 $x185))))
 ))
 (let (($x129 (and $x92 $x53)))
 (let (($x34 (and $x129 $x96)))
 (let (($x166 (forall ((input.ind-%var545X (_ BitVec 32)) )(let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var545X)))
 (let ((?x250 (input.spec-%var-m2-1.1.1 input.ind-%var545X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var545X)))
 (=> $x35 (= ?x250 ?x255))))))
 ))
 (let (($x184 (forall ((input.ind-%var544X (_ BitVec 32)) )(let (($x236 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var544X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var544X)))
 (= $x35 $x236))))
 ))
 (let (($x241 (and $x184 $x166)))
 (let (($x97 (and $x241 $x34)))
 (let (($x273 (=> $x97 $x258)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x135 (= false true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x157 (concat ?x182 (concat ?x176 ?x24)))))
 (let (($x91 (= input.dst.llvm-%m2 ?x112)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x193 (concat ?x190 (concat ?x158 (concat ?x197 ?x188)))))
 (let (($x141 (= input.dst.llvm-%m1 ?x193)))
 (let (($x69 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x99 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x133 (and (and (and $x99 $x69) $x141) $x91)))
 (let ((?x203 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x154 (= (_ bv0 32) ?x203)))
 (let ((?x205 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x247 (= (_ bv0 32) ?x205)))
 (let ((?x76 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x76)))
 (let ((?x33 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x33)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x167 (and $x207 $x216)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x214 $x167)))
 (let (($x224 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x126 $x100)))
 (let (($x249 (not $x60)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x238 $x95)))
 (let (($x19 (and (not $x160) $x249)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x234 $x272)))
 (let (($x273 (not $x258)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x34 $x97)))
 (let (($x227 (and (not $x259) $x273)))
 (let (($x108 (and (and (and (and (and (and $x227 $x19) $x183) $x224) $x22) $x195) $x247)))
 (let (($x131 (and $x108 $x154)))
 (let (($x82 (forall ((input.ind-%var575X (_ BitVec 32)) )(let ((?x81 (bvmul input.ind-%var575X (_ bv4 32))))
 (let ((?x85 (bvadd ?x81 input.dst.llvm-%m1)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x201))))
 (let ((?x187 (input.spec-%var-m1-1.1.1 input.ind-%var575X)))
 (let (($x274 (input.spec-%var-m1-1.0.1 input.ind-%var575X)))
 (=> $x274 (= ?x187 ?x168)))))))))
 ))
 (let (($x12 (forall ((input.ind-%var574X (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) input.ind-%var574X) (bvult input.ind-%var574X (_ bv100 32)))))
 (let (($x274 (input.spec-%var-m1-1.0.1 input.ind-%var574X)))
 (= $x274 $x66))))
 ))
 (let (($x96 (and $x12 $x82)))
 (let (($x226 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x200 (or false (or false (and (and true (or $x50 $x173)) (or $x37 $x226))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x200)))
 (let (($x16 (and (and (and $x83 $x96) $x131) $x133)))
 (let (($x228 (forall ((input.ind-%var565X (_ BitVec 32)) )(let ((?x81 (bvmul input.ind-%var565X (_ bv4 32))))
 (let ((?x117 (bvadd ?x81 input.dst.llvm-%m2)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x137))))
 (let ((?x252 (input.spec-%var-m2-1.1.1 input.ind-%var565X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var565X)))
 (=> $x35 (= ?x252 ?x199)))))))))
 ))
 (let (($x129 (forall ((input.ind-%var564X (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) input.ind-%var564X) (bvult input.ind-%var564X (_ bv100 32)))))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var564X)))
 (= $x35 $x66))))
 ))
 (let (($x94 (and $x129 $x228)))
 (let (($x210 (and $x94 $x16)))
 (let (($x206 (= $x210 true)))
 (let (($x174 (forall ((input.ind-%var585X (_ BitVec 32)) )(let ((?x92 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var585X)))
 (let ((?x187 (input.spec-%var-m1-1.1.1 input.ind-%var585X)))
 (let (($x274 (input.spec-%var-m1-1.0.1 input.ind-%var585X)))
 (=> $x274 (= ?x187 ?x92))))))
 ))
 (let (($x40 (forall ((input.ind-%var584X (_ BitVec 32)) )(let (($x102 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var584X)))
 (let (($x274 (input.spec-%var-m1-1.0.1 input.ind-%var584X)))
 (= $x274 $x102))))
 ))
 (let (($x278 (and $x40 $x174)))
 (let (($x192 (and $x278 $x206)))
 (let (($x26 (forall ((input.ind-%var595X (_ BitVec 32)) )(let ((?x41 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var595X)))
 (let ((?x252 (input.spec-%var-m2-1.1.1 input.ind-%var595X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var595X)))
 (=> $x35 (= ?x252 ?x41))))))
 ))
 (let (($x64 (forall ((input.ind-%var594X (_ BitVec 32)) )(let (($x184 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var594X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var594X)))
 (= $x35 $x184))))
 ))
 (let (($x53 (and $x64 $x26)))
 (let (($x134 (and $x53 $x192)))
 (let (($x243 (=> $x134 $x135)))
 (not $x243)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x135 (= false true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x157 (concat ?x182 (concat ?x176 ?x24)))))
 (let (($x91 (= input.dst.llvm-%m2 ?x112)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x193 (concat ?x190 (concat ?x158 (concat ?x197 ?x188)))))
 (let (($x141 (= input.dst.llvm-%m1 ?x193)))
 (let (($x69 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x99 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x133 (and (and (and $x99 $x69) $x141) $x91)))
 (let ((?x203 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x154 (= (_ bv0 32) ?x203)))
 (let ((?x205 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x247 (= (_ bv0 32) ?x205)))
 (let ((?x76 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x76)))
 (let ((?x33 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x33)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x167 (and $x207 $x216)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x214 $x167)))
 (let (($x224 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x126 $x100)))
 (let (($x249 (not $x60)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x238 $x95)))
 (let (($x19 (and (not $x160) $x249)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x234 $x272)))
 (let (($x273 (not $x258)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x34 $x97)))
 (let (($x227 (and (not $x259) $x273)))
 (let (($x108 (and (and (and (and (and (and $x227 $x19) $x183) $x224) $x22) $x195) $x247)))
 (let (($x131 (and $x108 $x154)))
 (let (($x82 (forall ((input.ind-%var575X (_ BitVec 32)) )(let ((?x81 (bvmul input.ind-%var575X (_ bv4 32))))
 (let ((?x85 (bvadd ?x81 input.dst.llvm-%m1)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x201))))
 (let ((?x187 (input.spec-%var-m1-1.1.1 input.ind-%var575X)))
 (let (($x274 (input.spec-%var-m1-1.0.1 input.ind-%var575X)))
 (=> $x274 (= ?x187 ?x168)))))))))
 ))
 (let (($x12 (forall ((input.ind-%var574X (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) input.ind-%var574X) (bvult input.ind-%var574X (_ bv100 32)))))
 (let (($x274 (input.spec-%var-m1-1.0.1 input.ind-%var574X)))
 (= $x274 $x66))))
 ))
 (let (($x96 (and $x12 $x82)))
 (let (($x226 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x200 (or false (or false (and (and true (or $x50 $x173)) (or $x37 $x226))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x200)))
 (let (($x16 (and (and (and $x83 $x96) $x131) $x133)))
 (let (($x228 (forall ((input.ind-%var565X (_ BitVec 32)) )(let ((?x81 (bvmul input.ind-%var565X (_ bv4 32))))
 (let ((?x117 (bvadd ?x81 input.dst.llvm-%m2)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x137))))
 (let ((?x252 (input.spec-%var-m2-1.1.1 input.ind-%var565X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var565X)))
 (=> $x35 (= ?x252 ?x199)))))))))
 ))
 (let (($x129 (forall ((input.ind-%var564X (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) input.ind-%var564X) (bvult input.ind-%var564X (_ bv100 32)))))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var564X)))
 (= $x35 $x66))))
 ))
 (let (($x94 (and $x129 $x228)))
 (let (($x210 (and $x94 $x16)))
 (let (($x206 (= $x210 true)))
 (let (($x174 (forall ((input.ind-%var585X (_ BitVec 32)) )(let ((?x92 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var585X)))
 (let ((?x187 (input.spec-%var-m1-1.1.1 input.ind-%var585X)))
 (let (($x274 (input.spec-%var-m1-1.0.1 input.ind-%var585X)))
 (=> $x274 (= ?x187 ?x92))))))
 ))
 (let (($x40 (forall ((input.ind-%var584X (_ BitVec 32)) )(let (($x102 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var584X)))
 (let (($x274 (input.spec-%var-m1-1.0.1 input.ind-%var584X)))
 (= $x274 $x102))))
 ))
 (let (($x278 (and $x40 $x174)))
 (let (($x192 (and $x278 $x206)))
 (let (($x26 (forall ((input.ind-%var595X (_ BitVec 32)) )(let ((?x41 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var595X)))
 (let ((?x252 (input.spec-%var-m2-1.1.1 input.ind-%var595X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var595X)))
 (=> $x35 (= ?x252 ?x41))))))
 ))
 (let (($x64 (forall ((input.ind-%var594X (_ BitVec 32)) )(let (($x184 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var594X)))
 (let (($x35 (input.spec-%var-m2-1.0.1 input.ind-%var594X)))
 (= $x35 $x184))))
 ))
 (let (($x53 (and $x64 $x26)))
 (let (($x134 (and $x53 $x192)))
 (let (($x243 (=> $x134 $x135)))
 (not $x243)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xcf51aec4)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7f9faac0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xf9fad700)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfadccd00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7f9faac3)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xcf51aec7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7f9faac0)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xcf51aec4)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xcf51aec5) #xd7
    (ite (= x!0 #x7f9faac3) #xfa
    (ite (= x!0 #xcf51aec7) #xf9
    (ite (= x!0 #xcf51aec6) #xfa
    (ite (= x!0 #x7f9faac2) #xdc
    (ite (= x!0 #x7f9faac1) #xcd
      #x00)))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf51aec7)
                                      (k!11 #xcf51aec6)
                                      (k!11 #xcf51aec5)
                                      (k!11 #xcf51aec4)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf51aec7)
                                      (k!11 #xcf51aec6)
                                      (k!11 #xcf51aec5)
                                      (k!11 #xcf51aec4)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf51aec7)
                                      (k!11 #xcf51aec6)
                                      (k!11 #xcf51aec5)
                                      (k!11 #xcf51aec4)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf51aec7)
                                      (k!11 #xcf51aec6)
                                      (k!11 #xcf51aec5)
                                      (k!11 #xcf51aec4))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x7f9faac3)
                                      (k!11 #x7f9faac2)
                                      (k!11 #x7f9faac1)
                                      (k!11 #x7f9faac0)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x7f9faac3)
                                      (k!11 #x7f9faac2)
                                      (k!11 #x7f9faac1)
                                      (k!11 #x7f9faac0)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x7f9faac3)
                                      (k!11 #x7f9faac2)
                                      (k!11 #x7f9faac1)
                                      (k!11 #x7f9faac0)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x7f9faac3)
                                      (k!11 #x7f9faac2)
                                      (k!11 #x7f9faac1)
                                      (k!11 #x7f9faac0))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x122 (= false true)))
 (let ((?x75 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x71 (= (_ bv0 32) ?x75)))
 (let ((?x115 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x221 (= (_ bv0 32) ?x115)))
 (let ((?x120 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x120)))
 (let ((?x155 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x74 $x93)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x232 $x54)))
 (let (($x49 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x169 $x248)))
 (let (($x59 (not $x25)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x8 $x196)))
 (let (($x80 (and (not $x32) $x59)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x23 $x204)))
 (let (($x29 (not $x5)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x223 $x112)))
 (let (($x18 (and (not $x127) $x29)))
 (let (($x165 (and (and (and (and (and (and $x18 $x80) $x72) $x49) $x46) $x254) $x221)))
 (let (($x113 (and $x165 $x71)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x206)))
 (let (($x231 (or false (or false (and (and true (or $x192 $x134)) (or $x30 $x146))))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x231)))
 (let (($x159 (and $x78 $x113)))
 (let (($x218 (= $x159 true)))
 (let (($x182 (forall ((input.ind-%var647X (_ BitVec 32)) )(let ((?x273 (bvmul input.ind-%var647X (_ bv4 32))))
 (let ((?x222 (bvadd ?x273 input.dst.llvm-%m1)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x188))))
 (let ((?x67 (input.spec-%var-m1-1.1.1 input.ind-%var647X)))
 (let (($x138 (input.spec-%var-m1-1.0.1 input.ind-%var647X)))
 (=> $x138 (= ?x67 ?x212)))))))))
 ))
 (let (($x76 (forall ((input.ind-%var646X (_ BitVec 32)) )(let (($x83 (and (bvule (_ bv0 32) input.ind-%var646X) (bvult input.ind-%var646X (_ bv100 32)))))
 (let (($x138 (input.spec-%var-m1-1.0.1 input.ind-%var646X)))
 (= $x138 $x83))))
 ))
 (let (($x179 (and $x76 $x182)))
 (let (($x176 (= $x179 true)))
 (let (($x58 (forall ((input.ind-%var637X (_ BitVec 32)) )(let ((?x273 (bvmul input.ind-%var637X (_ bv4 32))))
 (let ((?x227 (bvadd ?x273 input.dst.llvm-%m2)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x145))))
 (let ((?x114 (input.spec-%var-m2-1.1.1 input.ind-%var637X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var637X)))
 (=> $x255 (= ?x114 ?x150)))))))))
 ))
 (let (($x12 (forall ((input.ind-%var636X (_ BitVec 32)) )(let (($x83 (and (bvule (_ bv0 32) input.ind-%var636X) (bvult input.ind-%var636X (_ bv100 32)))))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var636X)))
 (= $x255 $x83))))
 ))
 (let (($x116 (and $x12 $x58)))
 (let (($x224 (= $x116 true)))
 (let ((?x61 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x50 (= (_ bv0 2) ?x61)))
 (let (($x123 (= $x50 true)))
 (let ((?x128 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x56 (= (_ bv0 2) ?x128)))
 (let (($x180 (= $x56 true)))
 (let (($x173 (and $x180 $x123)))
 (let (($x172 (and $x173 $x224)))
 (let (($x24 (and $x172 $x176)))
 (let (($x189 (and $x24 $x218)))
 (let (($x10 (forall ((input.ind-%var657X (_ BitVec 32)) )(let ((?x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var657X)))
 (let ((?x67 (input.spec-%var-m1-1.1.1 input.ind-%var657X)))
 (let (($x138 (input.spec-%var-m1-1.0.1 input.ind-%var657X)))
 (=> $x138 (= ?x67 ?x13))))))
 ))
 (let (($x161 (forall ((input.ind-%var656X (_ BitVec 32)) )(let (($x31 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var656X)))
 (let (($x138 (input.spec-%var-m1-1.0.1 input.ind-%var656X)))
 (= $x138 $x31))))
 ))
 (let (($x39 (and $x161 $x10)))
 (let (($x38 (and $x39 $x189)))
 (let (($x217 (forall ((input.ind-%var667X (_ BitVec 32)) )(let ((?x92 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var667X)))
 (let ((?x114 (input.spec-%var-m2-1.1.1 input.ind-%var667X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var667X)))
 (=> $x255 (= ?x114 ?x92))))))
 ))
 (let (($x26 (forall ((input.ind-%var666X (_ BitVec 32)) )(let (($x252 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var666X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var666X)))
 (= $x255 $x252))))
 ))
 (let (($x186 (and $x26 $x217)))
 (let (($x140 (and $x186 $x38)))
 (let (($x151 (=> $x140 $x122)))
 (not $x151)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x122 (= false true)))
 (let ((?x75 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x71 (= (_ bv0 32) ?x75)))
 (let ((?x115 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x221 (= (_ bv0 32) ?x115)))
 (let ((?x120 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x120)))
 (let ((?x155 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x74 $x93)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x232 $x54)))
 (let (($x49 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x169 $x248)))
 (let (($x59 (not $x25)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x8 $x196)))
 (let (($x80 (and (not $x32) $x59)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x23 $x204)))
 (let (($x29 (not $x5)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x223 $x112)))
 (let (($x18 (and (not $x127) $x29)))
 (let (($x165 (and (and (and (and (and (and $x18 $x80) $x72) $x49) $x46) $x254) $x221)))
 (let (($x113 (and $x165 $x71)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x206)))
 (let (($x231 (or false (or false (and (and true (or $x192 $x134)) (or $x30 $x146))))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x231)))
 (let (($x159 (and $x78 $x113)))
 (let (($x218 (= $x159 true)))
 (let (($x182 (forall ((input.ind-%var647X (_ BitVec 32)) )(let ((?x273 (bvmul input.ind-%var647X (_ bv4 32))))
 (let ((?x222 (bvadd ?x273 input.dst.llvm-%m1)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x188))))
 (let ((?x67 (input.spec-%var-m1-1.1.1 input.ind-%var647X)))
 (let (($x138 (input.spec-%var-m1-1.0.1 input.ind-%var647X)))
 (=> $x138 (= ?x67 ?x212)))))))))
 ))
 (let (($x76 (forall ((input.ind-%var646X (_ BitVec 32)) )(let (($x83 (and (bvule (_ bv0 32) input.ind-%var646X) (bvult input.ind-%var646X (_ bv100 32)))))
 (let (($x138 (input.spec-%var-m1-1.0.1 input.ind-%var646X)))
 (= $x138 $x83))))
 ))
 (let (($x179 (and $x76 $x182)))
 (let (($x176 (= $x179 true)))
 (let (($x58 (forall ((input.ind-%var637X (_ BitVec 32)) )(let ((?x273 (bvmul input.ind-%var637X (_ bv4 32))))
 (let ((?x227 (bvadd ?x273 input.dst.llvm-%m2)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x145))))
 (let ((?x114 (input.spec-%var-m2-1.1.1 input.ind-%var637X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var637X)))
 (=> $x255 (= ?x114 ?x150)))))))))
 ))
 (let (($x12 (forall ((input.ind-%var636X (_ BitVec 32)) )(let (($x83 (and (bvule (_ bv0 32) input.ind-%var636X) (bvult input.ind-%var636X (_ bv100 32)))))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var636X)))
 (= $x255 $x83))))
 ))
 (let (($x116 (and $x12 $x58)))
 (let (($x224 (= $x116 true)))
 (let ((?x61 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x50 (= (_ bv0 2) ?x61)))
 (let (($x123 (= $x50 true)))
 (let ((?x128 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x56 (= (_ bv0 2) ?x128)))
 (let (($x180 (= $x56 true)))
 (let (($x173 (and $x180 $x123)))
 (let (($x172 (and $x173 $x224)))
 (let (($x24 (and $x172 $x176)))
 (let (($x189 (and $x24 $x218)))
 (let (($x10 (forall ((input.ind-%var657X (_ BitVec 32)) )(let ((?x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var657X)))
 (let ((?x67 (input.spec-%var-m1-1.1.1 input.ind-%var657X)))
 (let (($x138 (input.spec-%var-m1-1.0.1 input.ind-%var657X)))
 (=> $x138 (= ?x67 ?x13))))))
 ))
 (let (($x161 (forall ((input.ind-%var656X (_ BitVec 32)) )(let (($x31 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var656X)))
 (let (($x138 (input.spec-%var-m1-1.0.1 input.ind-%var656X)))
 (= $x138 $x31))))
 ))
 (let (($x39 (and $x161 $x10)))
 (let (($x38 (and $x39 $x189)))
 (let (($x217 (forall ((input.ind-%var667X (_ BitVec 32)) )(let ((?x92 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var667X)))
 (let ((?x114 (input.spec-%var-m2-1.1.1 input.ind-%var667X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var667X)))
 (=> $x255 (= ?x114 ?x92))))))
 ))
 (let (($x26 (forall ((input.ind-%var666X (_ BitVec 32)) )(let (($x252 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var666X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var666X)))
 (= $x255 $x252))))
 ))
 (let (($x186 (and $x26 $x217)))
 (let (($x140 (and $x186 $x38)))
 (let (($x151 (=> $x140 $x122)))
 (not $x151)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x88de91f0)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbdee82d4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbdee82d7)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x88de91f3)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbdee82d4)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x88de91f0)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x267 (forall ((input.ind-%var815X (_ BitVec 32)) )(let ((?x268 (spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var815X)))
 (let ((?x66 (bvmul input.ind-%var815X (_ bv4 32))))
 (let ((?x22 (bvadd ?x66 input.dst.llvm-%m1)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x233))))
 (let (($x159 (and (bvule (_ bv0 32) input.ind-%var815X) (bvult input.ind-%var815X (_ bv100 32)))))
 (=> $x159 (= ?x70 ?x268)))))))))
 ))
 (let (($x101 (forall ((input.ind-%var814X (_ BitVec 32)) )(let (($x256 (spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var814X)))
 (let (($x159 (and (bvule (_ bv0 32) input.ind-%var814X) (bvult input.ind-%var814X (_ bv100 32)))))
 (= $x159 $x256))))
 ))
 (let (($x262 (and $x101 $x267)))
 (let (($x271 (= $x262 true)))
 (let ((?x84 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x28 (= (_ bv0 2) ?x84)))
 (let (($x107 (= $x28 true)))
 (let (($x109 (forall ((input.ind-%var783X (_ BitVec 32)) )(let ((?x66 (bvmul input.ind-%var783X (_ bv4 32))))
 (let ((?x22 (bvadd ?x66 input.dst.llvm-%m1)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x233))))
 (let ((?x14 (input.spec-%var-m1-1.1.1 input.ind-%var783X)))
 (let (($x61 (input.spec-%var-m1-1.0.1 input.ind-%var783X)))
 (=> $x61 (= ?x14 ?x70)))))))))
 ))
 (let (($x205 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var782X) (bvult input.ind-%var782X (_ bv100 32)))))
 (let (($x61 (input.spec-%var-m1-1.0.1 input.ind-%var782X)))
 (= $x61 $x159))))
 ))
 (let (($x121 (and $x205 $x109)))
 (let (($x274 (= $x121 true)))
 (let (($x79 (forall ((input.ind-%var773X (_ BitVec 32)) )(let ((?x66 (bvmul input.ind-%var773X (_ bv4 32))))
 (let ((?x68 (bvadd ?x66 input.dst.llvm-%m2)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem ?x68))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv2 32))) ?x37))))
 (let ((?x26 (input.spec-%var-m2-1.1.1 input.ind-%var773X)))
 (let (($x240 (input.spec-%var-m2-1.0.1 input.ind-%var773X)))
 (=> $x240 (= ?x26 ?x96)))))))))
 ))
 (let (($x189 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var772X) (bvult input.ind-%var772X (_ bv100 32)))))
 (let (($x240 (input.spec-%var-m2-1.0.1 input.ind-%var772X)))
 (= $x240 $x159))))
 ))
 (let (($x201 (and $x189 $x79)))
 (let (($x20 (= $x201 true)))
 (let (($x93 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x74 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x54 (and $x74 $x93)))
 (let (($x46 (= $x54 true)))
 (let ((?x32 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x104 (= (_ bv0 32) ?x32)))
 (let ((?x8 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x196 (= (_ bv0 32) ?x8)))
 (let ((?x29 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x143 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x204 (and $x112 $x23)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x223 $x204)))
 (let (($x78 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (and $x243 $x246)))
 (let (($x191 (not $x30)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x210 $x134)))
 (let (($x118 (and (not $x135) $x191)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x91 $x133)))
 (let (($x16 (not $x44)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x116 $x224)))
 (let (($x192 (and (not $x24) $x16)))
 (let (($x211 (and (and (and (and (and (and $x192 $x118) $x185) $x78) $x5) $x18) $x196)))
 (let (($x152 (and $x211 $x104)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x182 (or false (or false (and (and true (or $x62 $x136)) (or $x188 $x193))))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x72 (and $x176 $x152)))
 (let (($x175 (= $x72 true)))
 (let ((?x238 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x145 (= (_ bv0 2) ?x238)))
 (let (($x60 (= $x145 true)))
 (let (($x125 (and $x60 $x175)))
 (let (($x15 (and $x125 $x46)))
 (let (($x34 (and $x15 $x20)))
 (let (($x174 (and $x34 $x274)))
 (let (($x17 (and $x174 $x107)))
 (let (($x100 (forall ((input.ind-%var793X (_ BitVec 32)) )(let ((?x227 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var793X)))
 (let ((?x14 (input.spec-%var-m1-1.1.1 input.ind-%var793X)))
 (let (($x61 (input.spec-%var-m1-1.0.1 input.ind-%var793X)))
 (=> $x61 (= ?x14 ?x227))))))
 ))
 (let (($x36 (forall ((input.ind-%var792X (_ BitVec 32)) )(let (($x173 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var792X)))
 (let (($x61 (input.spec-%var-m1-1.0.1 input.ind-%var792X)))
 (= $x61 $x173))))
 ))
 (let (($x177 (and $x36 $x100)))
 (let (($x73 (and $x177 $x17)))
 (let (($x128 (forall ((input.ind-%var803X (_ BitVec 32)) )(let ((?x161 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var803X)))
 (let ((?x26 (input.spec-%var-m2-1.1.1 input.ind-%var803X)))
 (let (($x240 (input.spec-%var-m2-1.0.1 input.ind-%var803X)))
 (=> $x240 (= ?x26 ?x161))))))
 ))
 (let (($x278 (forall ((input.ind-%var802X (_ BitVec 32)) )(let (($x209 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var802X)))
 (let (($x240 (input.spec-%var-m2-1.0.1 input.ind-%var802X)))
 (= $x240 $x209))))
 ))
 (let (($x56 (and $x278 $x128)))
 (let (($x90 (and $x56 $x73)))
 (let (($x47 (=> $x90 $x271)))
 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x267 (forall ((input.ind-%var815X (_ BitVec 32)) )(let ((?x268 (spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var815X)))
 (let ((?x66 (bvmul input.ind-%var815X (_ bv4 32))))
 (let ((?x22 (bvadd ?x66 input.dst.llvm-%m1)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x233))))
 (let (($x159 (and (bvule (_ bv0 32) input.ind-%var815X) (bvult input.ind-%var815X (_ bv100 32)))))
 (=> $x159 (= ?x70 ?x268)))))))))
 ))
 (let (($x101 (forall ((input.ind-%var814X (_ BitVec 32)) )(let (($x256 (spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var814X)))
 (let (($x159 (and (bvule (_ bv0 32) input.ind-%var814X) (bvult input.ind-%var814X (_ bv100 32)))))
 (= $x159 $x256))))
 ))
 (let (($x262 (and $x101 $x267)))
 (let (($x271 (= $x262 true)))
 (let ((?x84 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x28 (= (_ bv0 2) ?x84)))
 (let (($x107 (= $x28 true)))
 (let (($x109 (forall ((input.ind-%var783X (_ BitVec 32)) )(let ((?x66 (bvmul input.ind-%var783X (_ bv4 32))))
 (let ((?x22 (bvadd ?x66 input.dst.llvm-%m1)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x233))))
 (let ((?x14 (input.spec-%var-m1-1.1.1 input.ind-%var783X)))
 (let (($x61 (input.spec-%var-m1-1.0.1 input.ind-%var783X)))
 (=> $x61 (= ?x14 ?x70)))))))))
 ))
 (let (($x205 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var782X) (bvult input.ind-%var782X (_ bv100 32)))))
 (let (($x61 (input.spec-%var-m1-1.0.1 input.ind-%var782X)))
 (= $x61 $x159))))
 ))
 (let (($x121 (and $x205 $x109)))
 (let (($x274 (= $x121 true)))
 (let (($x79 (forall ((input.ind-%var773X (_ BitVec 32)) )(let ((?x66 (bvmul input.ind-%var773X (_ bv4 32))))
 (let ((?x68 (bvadd ?x66 input.dst.llvm-%m2)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem ?x68))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv2 32))) ?x37))))
 (let ((?x26 (input.spec-%var-m2-1.1.1 input.ind-%var773X)))
 (let (($x240 (input.spec-%var-m2-1.0.1 input.ind-%var773X)))
 (=> $x240 (= ?x26 ?x96)))))))))
 ))
 (let (($x189 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var772X) (bvult input.ind-%var772X (_ bv100 32)))))
 (let (($x240 (input.spec-%var-m2-1.0.1 input.ind-%var772X)))
 (= $x240 $x159))))
 ))
 (let (($x201 (and $x189 $x79)))
 (let (($x20 (= $x201 true)))
 (let (($x93 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x74 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x54 (and $x74 $x93)))
 (let (($x46 (= $x54 true)))
 (let ((?x32 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x104 (= (_ bv0 32) ?x32)))
 (let ((?x8 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x196 (= (_ bv0 32) ?x8)))
 (let ((?x29 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x143 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x204 (and $x112 $x23)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x223 $x204)))
 (let (($x78 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (and $x243 $x246)))
 (let (($x191 (not $x30)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x210 $x134)))
 (let (($x118 (and (not $x135) $x191)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x91 $x133)))
 (let (($x16 (not $x44)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x116 $x224)))
 (let (($x192 (and (not $x24) $x16)))
 (let (($x211 (and (and (and (and (and (and $x192 $x118) $x185) $x78) $x5) $x18) $x196)))
 (let (($x152 (and $x211 $x104)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x182 (or false (or false (and (and true (or $x62 $x136)) (or $x188 $x193))))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x72 (and $x176 $x152)))
 (let (($x175 (= $x72 true)))
 (let ((?x238 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x145 (= (_ bv0 2) ?x238)))
 (let (($x60 (= $x145 true)))
 (let (($x125 (and $x60 $x175)))
 (let (($x15 (and $x125 $x46)))
 (let (($x34 (and $x15 $x20)))
 (let (($x174 (and $x34 $x274)))
 (let (($x17 (and $x174 $x107)))
 (let (($x100 (forall ((input.ind-%var793X (_ BitVec 32)) )(let ((?x227 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var793X)))
 (let ((?x14 (input.spec-%var-m1-1.1.1 input.ind-%var793X)))
 (let (($x61 (input.spec-%var-m1-1.0.1 input.ind-%var793X)))
 (=> $x61 (= ?x14 ?x227))))))
 ))
 (let (($x36 (forall ((input.ind-%var792X (_ BitVec 32)) )(let (($x173 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var792X)))
 (let (($x61 (input.spec-%var-m1-1.0.1 input.ind-%var792X)))
 (= $x61 $x173))))
 ))
 (let (($x177 (and $x36 $x100)))
 (let (($x73 (and $x177 $x17)))
 (let (($x128 (forall ((input.ind-%var803X (_ BitVec 32)) )(let ((?x161 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var803X)))
 (let ((?x26 (input.spec-%var-m2-1.1.1 input.ind-%var803X)))
 (let (($x240 (input.spec-%var-m2-1.0.1 input.ind-%var803X)))
 (=> $x240 (= ?x26 ?x161))))))
 ))
 (let (($x278 (forall ((input.ind-%var802X (_ BitVec 32)) )(let (($x209 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var802X)))
 (let (($x240 (input.spec-%var-m2-1.0.1 input.ind-%var802X)))
 (= $x240 $x209))))
 ))
 (let (($x56 (and $x278 $x128)))
 (let (($x90 (and $x56 $x73)))
 (let (($x47 (=> $x90 $x271)))
 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var814X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00004254)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x010c1460)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x32011250)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x32011253)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00004257)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x32011250)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00004254)
  (define-fun spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!2 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!2 (bvadd #x010c1463 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x010c1462 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x010c1461 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x010c1460 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
  (define-fun spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var814X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x022912f8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xc0a4053c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x024cf9ec)
  (define-fun input.ind-%var815X!1 () (_ BitVec 32)
    #x0c227b20)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x024cf9ef)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x022912fb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x024cf9ec)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x022912f8)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #xc0a4053f (bvmul #x00000004 x!0)))
              (k!13 (bvadd #xc0a4053e (bvmul #x00000004 x!0)))
              (k!13 (bvadd #xc0a4053d (bvmul #x00000004 x!0)))
              (k!13 (bvadd #xc0a4053c (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x0c227b20 x!0) #x0c227b20 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x0c227b20 x!0) #x0c227b20 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0c227b20) false
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0c227b20) false
      (input.spec-%var-m1-1.0.1 x!0))))
  (define-fun spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x249 (= false true)))
 (let ((?x154 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x131 (= (_ bv0 32) ?x154)))
 (let ((?x52 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x99 (= (_ bv0 32) ?x52)))
 (let ((?x247 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x247)))
 (let ((?x216 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x216)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x181 (and $x235 $x234)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x140 $x181)))
 (let (($x214 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x129 $x64)))
 (let (($x88 (not $x275)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x139 $x41)))
 (let (($x254 (and (not $x40) $x88)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x77 $x221)))
 (let (($x230 (not $x219)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x150 $x58)))
 (let (($x63 (and (not $x120) $x230)))
 (let (($x245 (and (and (and (and (and (and $x63 $x254) $x75) $x214) $x87) $x108) $x99)))
 (let (($x42 (and $x245 $x131)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x200 (or false (or false (and (and true (or $x97 $x92)) (or $x12 $x180))))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x200)))
 (let (($x272 (and $x122 $x42)))
 (let (($x85 (= $x272 true)))
 (let (($x267 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x266 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x262 (and $x266 $x267)))
 (let (($x271 (= $x262 true)))
 (let (($x73 (forall ((input.ind-%var891X (_ BitVec 32)) )(let ((?x74 (bvmul input.ind-%var891X (_ bv4 32))))
 (let ((?x233 (bvadd ?x74 input.dst.llvm-%m1)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x184))))
 (let ((?x242 (input.spec-%var-m1-1.1.1 input.ind-%var891X)))
 (let (($x208 (input.spec-%var-m1-1.0.1 input.ind-%var891X)))
 (=> $x208 (= ?x242 ?x28)))))))))
 ))
 (let (($x215 (forall ((input.ind-%var890X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var890X) (bvult input.ind-%var890X (_ bv100 32)))))
 (let (($x208 (input.spec-%var-m1-1.0.1 input.ind-%var890X)))
 (= $x208 $x248))))
 ))
 (let (($x90 (and $x215 $x73)))
 (let (($x256 (= $x90 true)))
 (let (($x66 (forall ((input.ind-%var881X (_ BitVec 32)) )(let ((?x74 (bvmul input.ind-%var881X (_ bv4 32))))
 (let ((?x155 (bvadd ?x74 input.dst.llvm-%m2)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x15))))
 (let ((?x170 (input.spec-%var-m2-1.1.1 input.ind-%var881X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var881X)))
 (=> $x213 (= ?x170 ?x189)))))))))
 ))
 (let (($x78 (forall ((input.ind-%var880X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var880X) (bvult input.ind-%var880X (_ bv100 32)))))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var880X)))
 (= $x213 $x248))))
 ))
 (let (($x68 (and $x78 $x66)))
 (let (($x259 (= $x68 true)))
 (let ((?x16 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x192 (= (_ bv0 2) ?x16)))
 (let (($x210 (= $x192 true)))
 (let ((?x206 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x91 (= (_ bv0 2) ?x206)))
 (let (($x133 (= $x91 true)))
 (let (($x134 (and $x133 $x210)))
 (let (($x6 (and $x134 $x259)))
 (let (($x163 (and $x6 $x256)))
 (let (($x47 (and $x163 $x271)))
 (let (($x207 (and $x47 $x85)))
 (let (($x176 (forall ((input.ind-%var901X (_ BitVec 32)) )(let ((?x158 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var901X)))
 (let ((?x242 (input.spec-%var-m1-1.1.1 input.ind-%var901X)))
 (let (($x208 (input.spec-%var-m1-1.0.1 input.ind-%var901X)))
 (=> $x208 (= ?x242 ?x158))))))
 ))
 (let (($x62 (forall ((input.ind-%var900X (_ BitVec 32)) )(let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var900X)))
 (let (($x208 (input.spec-%var-m1-1.0.1 input.ind-%var900X)))
 (= $x208 $x119))))
 ))
 (let (($x116 (and $x62 $x176)))
 (let (($x33 (and $x116 $x207)))
 (let (($x160 (forall ((input.ind-%var911X (_ BitVec 32)) )(let ((?x227 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var911X)))
 (let ((?x170 (input.spec-%var-m2-1.1.1 input.ind-%var911X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var911X)))
 (=> $x213 (= ?x170 ?x227))))))
 ))
 (let (($x128 (forall ((input.ind-%var910X (_ BitVec 32)) )(let (($x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var910X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var910X)))
 (= $x213 $x26))))
 ))
 (let (($x238 (and $x128 $x160)))
 (let (($x167 (and $x238 $x33)))
 (let (($x142 (=> $x167 $x249)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x249 (= false true)))
 (let ((?x154 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x131 (= (_ bv0 32) ?x154)))
 (let ((?x52 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x99 (= (_ bv0 32) ?x52)))
 (let ((?x247 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x247)))
 (let ((?x216 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x216)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x181 (and $x235 $x234)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x140 $x181)))
 (let (($x214 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x129 $x64)))
 (let (($x88 (not $x275)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x139 $x41)))
 (let (($x254 (and (not $x40) $x88)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x77 $x221)))
 (let (($x230 (not $x219)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x150 $x58)))
 (let (($x63 (and (not $x120) $x230)))
 (let (($x245 (and (and (and (and (and (and $x63 $x254) $x75) $x214) $x87) $x108) $x99)))
 (let (($x42 (and $x245 $x131)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x200 (or false (or false (and (and true (or $x97 $x92)) (or $x12 $x180))))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x200)))
 (let (($x272 (and $x122 $x42)))
 (let (($x85 (= $x272 true)))
 (let (($x267 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x266 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x262 (and $x266 $x267)))
 (let (($x271 (= $x262 true)))
 (let (($x73 (forall ((input.ind-%var891X (_ BitVec 32)) )(let ((?x74 (bvmul input.ind-%var891X (_ bv4 32))))
 (let ((?x233 (bvadd ?x74 input.dst.llvm-%m1)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x184))))
 (let ((?x242 (input.spec-%var-m1-1.1.1 input.ind-%var891X)))
 (let (($x208 (input.spec-%var-m1-1.0.1 input.ind-%var891X)))
 (=> $x208 (= ?x242 ?x28)))))))))
 ))
 (let (($x215 (forall ((input.ind-%var890X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var890X) (bvult input.ind-%var890X (_ bv100 32)))))
 (let (($x208 (input.spec-%var-m1-1.0.1 input.ind-%var890X)))
 (= $x208 $x248))))
 ))
 (let (($x90 (and $x215 $x73)))
 (let (($x256 (= $x90 true)))
 (let (($x66 (forall ((input.ind-%var881X (_ BitVec 32)) )(let ((?x74 (bvmul input.ind-%var881X (_ bv4 32))))
 (let ((?x155 (bvadd ?x74 input.dst.llvm-%m2)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x15))))
 (let ((?x170 (input.spec-%var-m2-1.1.1 input.ind-%var881X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var881X)))
 (=> $x213 (= ?x170 ?x189)))))))))
 ))
 (let (($x78 (forall ((input.ind-%var880X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var880X) (bvult input.ind-%var880X (_ bv100 32)))))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var880X)))
 (= $x213 $x248))))
 ))
 (let (($x68 (and $x78 $x66)))
 (let (($x259 (= $x68 true)))
 (let ((?x16 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x192 (= (_ bv0 2) ?x16)))
 (let (($x210 (= $x192 true)))
 (let ((?x206 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x91 (= (_ bv0 2) ?x206)))
 (let (($x133 (= $x91 true)))
 (let (($x134 (and $x133 $x210)))
 (let (($x6 (and $x134 $x259)))
 (let (($x163 (and $x6 $x256)))
 (let (($x47 (and $x163 $x271)))
 (let (($x207 (and $x47 $x85)))
 (let (($x176 (forall ((input.ind-%var901X (_ BitVec 32)) )(let ((?x158 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var901X)))
 (let ((?x242 (input.spec-%var-m1-1.1.1 input.ind-%var901X)))
 (let (($x208 (input.spec-%var-m1-1.0.1 input.ind-%var901X)))
 (=> $x208 (= ?x242 ?x158))))))
 ))
 (let (($x62 (forall ((input.ind-%var900X (_ BitVec 32)) )(let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var900X)))
 (let (($x208 (input.spec-%var-m1-1.0.1 input.ind-%var900X)))
 (= $x208 $x119))))
 ))
 (let (($x116 (and $x62 $x176)))
 (let (($x33 (and $x116 $x207)))
 (let (($x160 (forall ((input.ind-%var911X (_ BitVec 32)) )(let ((?x227 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var911X)))
 (let ((?x170 (input.spec-%var-m2-1.1.1 input.ind-%var911X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var911X)))
 (=> $x213 (= ?x170 ?x227))))))
 ))
 (let (($x128 (forall ((input.ind-%var910X (_ BitVec 32)) )(let (($x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var910X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var910X)))
 (= $x213 $x26))))
 ))
 (let (($x238 (and $x128 $x160)))
 (let (($x167 (and $x238 $x33)))
 (let (($x142 (=> $x167 $x249)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000128)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000012b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000128)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8e1a156c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x122977b4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x122977b7)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8e1a156f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x122977b4)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8e1a156c)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x147 (= false true)))
 (let ((?x178 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x22 (= (_ bv0 32) ?x178)))
 (let ((?x201 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x53 (= (_ bv0 32) ?x201)))
 (let ((?x11 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x11)))
 (let ((?x232 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x223 $x168)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x130 $x81)))
 (let (($x169 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x104 $x80)))
 (let (($x29 (not $x8)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x175 $x125)))
 (let (($x152 (and (not $x32) $x29)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x112 $x135)))
 (let (($x191 (not $x246)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x167 $x249)))
 (let (($x59 (and (not $x25) $x191)))
 (let (($x35 (and (and (and (and (and (and $x59 $x152) $x146) $x169) $x253) $x79) $x53)))
 (let (($x164 (and $x35 $x22)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x278)))
 (let (($x188 (or false (or false (and (and true (or $x36 $x183)) (or $x82 $x222))))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x188)))
 (let (($x226 (and $x76 $x164)))
 (let (($x132 (= $x226 true)))
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x272 (= (_ bv0 2) ?x42)))
 (let (($x85 (= $x272 true)))
 (let (($x52 (forall ((input.ind-%var979X (_ BitVec 32)) )(let ((?x271 (bvmul input.ind-%var979X (_ bv4 32))))
 (let ((?x229 (bvadd ?x271 input.dst.llvm-%m1)))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x229))))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv2 32))) ?x235)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv3 32))) ?x181)))
 (let ((?x78 (input.spec-%var-m1-1.1.1 input.ind-%var979X)))
 (let (($x44 (input.spec-%var-m1-1.0.1 input.ind-%var979X)))
 (=> $x44 (= ?x78 ?x247))))))))))
 ))
 (let (($x277 (forall ((input.ind-%var978X (_ BitVec 32)) )(let (($x68 (and (bvule (_ bv0 32) input.ind-%var978X) (bvult input.ind-%var978X (_ bv100 32)))))
 (let (($x44 (input.spec-%var-m1-1.0.1 input.ind-%var978X)))
 (= $x44 $x68))))
 ))
 (let (($x99 (and $x277 $x52)))
 (let (($x245 (= $x99 true)))
 (let (($x83 (forall ((input.ind-%var969X (_ BitVec 32)) )(let ((?x271 (bvmul input.ind-%var969X (_ bv4 32))))
 (let ((?x47 (bvadd ?x271 input.dst.llvm-%m2)))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x47))))
 (let ((?x105 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x47 (_ bv2 32))) ?x50)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x47 (_ bv3 32))) ?x105)))
 (let ((?x141 (input.spec-%var-m2-1.1.1 input.ind-%var969X)))
 (let (($x23 (input.spec-%var-m2-1.0.1 input.ind-%var969X)))
 (=> $x23 (= ?x141 ?x198))))))))))
 ))
 (let (($x6 (forall ((input.ind-%var968X (_ BitVec 32)) )(let (($x68 (and (bvule (_ bv0 32) input.ind-%var968X) (bvult input.ind-%var968X (_ bv100 32)))))
 (let (($x23 (input.spec-%var-m2-1.0.1 input.ind-%var968X)))
 (= $x23 $x68))))
 ))
 (let (($x180 (and $x6 $x83)))
 (let (($x123 (= $x180 true)))
 (let (($x154 (and $x123 $x245)))
 (let (($x207 (and $x154 $x85)))
 (let (($x149 (and $x207 $x132)))
 (let (($x113 (forall ((input.ind-%var989X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var989X)))
 (let ((?x78 (input.spec-%var-m1-1.1.1 input.ind-%var989X)))
 (let (($x44 (input.spec-%var-m1-1.0.1 input.ind-%var989X)))
 (=> $x44 (= ?x78 ?x74))))))
 ))
 (let (($x30 (forall ((input.ind-%var988X (_ BitVec 32)) )(let (($x210 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var988X)))
 (let (($x44 (input.spec-%var-m1-1.0.1 input.ind-%var988X)))
 (= $x44 $x210))))
 ))
 (let (($x115 (and $x30 $x113)))
 (let (($x190 (and $x115 $x149)))
 (let (($x24 (forall ((input.ind-%var999X (_ BitVec 32)) )(let ((?x158 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var999X)))
 (let ((?x141 (input.spec-%var-m2-1.1.1 input.ind-%var999X)))
 (let (($x23 (input.spec-%var-m2-1.0.1 input.ind-%var999X)))
 (=> $x23 (= ?x141 ?x158))))))
 ))
 (let (($x160 (forall ((input.ind-%var998X (_ BitVec 32)) )(let (($x170 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var998X)))
 (let (($x23 (input.spec-%var-m2-1.0.1 input.ind-%var998X)))
 (= $x23 $x170))))
 ))
 (let (($x206 (and $x160 $x24)))
 (let (($x220 (and $x206 $x190)))
 (let (($x212 (=> $x220 $x147)))
 (not $x212)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x147 (= false true)))
 (let ((?x178 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x22 (= (_ bv0 32) ?x178)))
 (let ((?x201 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x53 (= (_ bv0 32) ?x201)))
 (let ((?x11 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x11)))
 (let ((?x232 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x223 $x168)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x130 $x81)))
 (let (($x169 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x104 $x80)))
 (let (($x29 (not $x8)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x175 $x125)))
 (let (($x152 (and (not $x32) $x29)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x112 $x135)))
 (let (($x191 (not $x246)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x167 $x249)))
 (let (($x59 (and (not $x25) $x191)))
 (let (($x35 (and (and (and (and (and (and $x59 $x152) $x146) $x169) $x253) $x79) $x53)))
 (let (($x164 (and $x35 $x22)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x278)))
 (let (($x188 (or false (or false (and (and true (or $x36 $x183)) (or $x82 $x222))))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x188)))
 (let (($x226 (and $x76 $x164)))
 (let (($x132 (= $x226 true)))
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x272 (= (_ bv0 2) ?x42)))
 (let (($x85 (= $x272 true)))
 (let (($x52 (forall ((input.ind-%var979X (_ BitVec 32)) )(let ((?x271 (bvmul input.ind-%var979X (_ bv4 32))))
 (let ((?x229 (bvadd ?x271 input.dst.llvm-%m1)))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x229))))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv2 32))) ?x235)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv3 32))) ?x181)))
 (let ((?x78 (input.spec-%var-m1-1.1.1 input.ind-%var979X)))
 (let (($x44 (input.spec-%var-m1-1.0.1 input.ind-%var979X)))
 (=> $x44 (= ?x78 ?x247))))))))))
 ))
 (let (($x277 (forall ((input.ind-%var978X (_ BitVec 32)) )(let (($x68 (and (bvule (_ bv0 32) input.ind-%var978X) (bvult input.ind-%var978X (_ bv100 32)))))
 (let (($x44 (input.spec-%var-m1-1.0.1 input.ind-%var978X)))
 (= $x44 $x68))))
 ))
 (let (($x99 (and $x277 $x52)))
 (let (($x245 (= $x99 true)))
 (let (($x83 (forall ((input.ind-%var969X (_ BitVec 32)) )(let ((?x271 (bvmul input.ind-%var969X (_ bv4 32))))
 (let ((?x47 (bvadd ?x271 input.dst.llvm-%m2)))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x47))))
 (let ((?x105 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x47 (_ bv2 32))) ?x50)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x47 (_ bv3 32))) ?x105)))
 (let ((?x141 (input.spec-%var-m2-1.1.1 input.ind-%var969X)))
 (let (($x23 (input.spec-%var-m2-1.0.1 input.ind-%var969X)))
 (=> $x23 (= ?x141 ?x198))))))))))
 ))
 (let (($x6 (forall ((input.ind-%var968X (_ BitVec 32)) )(let (($x68 (and (bvule (_ bv0 32) input.ind-%var968X) (bvult input.ind-%var968X (_ bv100 32)))))
 (let (($x23 (input.spec-%var-m2-1.0.1 input.ind-%var968X)))
 (= $x23 $x68))))
 ))
 (let (($x180 (and $x6 $x83)))
 (let (($x123 (= $x180 true)))
 (let (($x154 (and $x123 $x245)))
 (let (($x207 (and $x154 $x85)))
 (let (($x149 (and $x207 $x132)))
 (let (($x113 (forall ((input.ind-%var989X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var989X)))
 (let ((?x78 (input.spec-%var-m1-1.1.1 input.ind-%var989X)))
 (let (($x44 (input.spec-%var-m1-1.0.1 input.ind-%var989X)))
 (=> $x44 (= ?x78 ?x74))))))
 ))
 (let (($x30 (forall ((input.ind-%var988X (_ BitVec 32)) )(let (($x210 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var988X)))
 (let (($x44 (input.spec-%var-m1-1.0.1 input.ind-%var988X)))
 (= $x44 $x210))))
 ))
 (let (($x115 (and $x30 $x113)))
 (let (($x190 (and $x115 $x149)))
 (let (($x24 (forall ((input.ind-%var999X (_ BitVec 32)) )(let ((?x158 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var999X)))
 (let ((?x141 (input.spec-%var-m2-1.1.1 input.ind-%var999X)))
 (let (($x23 (input.spec-%var-m2-1.0.1 input.ind-%var999X)))
 (=> $x23 (= ?x141 ?x158))))))
 ))
 (let (($x160 (forall ((input.ind-%var998X (_ BitVec 32)) )(let (($x170 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var998X)))
 (let (($x23 (input.spec-%var-m2-1.0.1 input.ind-%var998X)))
 (= $x23 $x170))))
 ))
 (let (($x206 (and $x160 $x24)))
 (let (($x220 (and $x206 $x190)))
 (let (($x212 (=> $x220 $x147)))
 (not $x212)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf3fd57f8)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xf77fb5fc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03ff1bfc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03ff1bff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf3fd57fb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03ff1bfc)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf3fd57f8)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #xf77fb5ff (bvmul #x00000004 x!0)))
              (k!11 (bvadd #xf77fb5fe (bvmul #x00000004 x!0)))
              (k!11 (bvadd #xf77fb5fd (bvmul #x00000004 x!0)))
              (k!11 (bvadd #xf77fb5fc (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x80000006 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x80000005 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x80000004 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x80000003 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x14 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x100 (=> $x14 true)))
 (let (($x244 (= $x100 true)))
 (let (($x199 (= $x14 true)))
 (let ((?x213 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x209 (= (_ bv0 32) ?x213)))
 (let ((?x159 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x119 (= (_ bv0 32) ?x159)))
 (let ((?x238 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x75 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x58 $x221)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x150 $x9)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x69 $x64)))
 (let (($x40 (not $x275)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (and $x230 $x139)))
 (let (($x41 (and (not $x254) $x40)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x215 $x262)))
 (let (($x273 (not $x219)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x243 $x37)))
 (let (($x122 (and (not $x267) $x273)))
 (let (($x176 (and (and (and (and (and (and $x122 $x41) $x88) $x21) $x72) $x248) $x119)))
 (let (($x96 (and $x176 $x209)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x268 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x54 (or false (or false (and (and true (or $x137 $x268)) (or $x107 $x184))))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x136 (and $x151 $x96)))
 (let (($x157 (= $x136 true)))
 (let (($x231 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x153 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x91 (and $x153 $x231)))
 (let (($x192 (= $x91 true)))
 (let ((?x62 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x16 (= (_ bv0 2) ?x62)))
 (let (($x127 (= $x16 true)))
 (let (($x212 (forall ((input.ind-%var1051X (_ BitVec 32)) )(let ((?x193 (bvmul input.ind-%var1051X (_ bv4 32))))
 (let ((?x205 (bvadd ?x193 input.dst.llvm-%m1)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x205))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x178)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x226)))
 (let ((?x43 (input.spec-%var-m1-1.1.1 input.ind-%var1051X)))
 (let (($x259 (input.spec-%var-m1-1.0.1 input.ind-%var1051X)))
 (=> $x259 (= ?x43 ?x190))))))))))
 ))
 (let (($x8 (forall ((input.ind-%var1050X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var1050X) (bvult input.ind-%var1050X (_ bv100 32)))))
 (let (($x259 (input.spec-%var-m1-1.0.1 input.ind-%var1050X)))
 (= $x259 $x234))))
 ))
 (let (($x56 (and $x8 $x212)))
 (let (($x84 (= $x56 true)))
 (let (($x135 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let ((?x193 (bvmul input.ind-%var1041X (_ bv4 32))))
 (let ((?x82 (bvadd ?x193 input.dst.llvm-%m2)))
 (let ((?x145 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x82))))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x82 (_ bv2 32))) ?x145)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x82 (_ bv3 32))) ?x76)))
 (let ((?x185 (input.spec-%var-m2-1.1.1 input.ind-%var1041X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1041X)))
 (=> $x109 (= ?x185 ?x25))))))))))
 ))
 (let (($x140 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var1040X) (bvult input.ind-%var1040X (_ bv100 32)))))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1040X)))
 (= $x109 $x234))))
 ))
 (let (($x246 (and $x140 $x135)))
 (let (($x191 (= $x246 true)))
 (let (($x33 (and $x191 $x84)))
 (let (($x134 (and $x33 $x127)))
 (let (($x204 (and $x134 $x192)))
 (let (($x173 (and $x204 $x157)))
 (let (($x228 (and $x173 $x199)))
 (let (($x263 (forall ((input.ind-%var1061X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1061X)))
 (let ((?x43 (input.spec-%var-m1-1.1.1 input.ind-%var1061X)))
 (let (($x259 (input.spec-%var-m1-1.0.1 input.ind-%var1061X)))
 (=> $x259 (= ?x43 ?x138))))))
 ))
 (let (($x101 (forall ((input.ind-%var1060X (_ BitVec 32)) )(let (($x121 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1060X)))
 (let (($x259 (input.spec-%var-m1-1.0.1 input.ind-%var1060X)))
 (= $x259 $x121))))
 ))
 (let (($x12 (and $x101 $x263)))
 (let (($x126 (and $x12 $x228)))
 (let (($x66 (forall ((input.ind-%var1071X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1071X)))
 (let ((?x185 (input.spec-%var-m2-1.1.1 input.ind-%var1071X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1071X)))
 (=> $x109 (= ?x185 ?x74))))))
 ))
 (let (($x24 (forall ((input.ind-%var1070X (_ BitVec 32)) )(let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1070X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1070X)))
 (= $x109 $x141))))
 ))
 (let (($x15 (and $x24 $x66)))
 (let (($x61 (and $x15 $x126)))
 (let (($x19 (=> $x61 $x244)))
 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x14 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x100 (=> $x14 true)))
 (let (($x244 (= $x100 true)))
 (let (($x199 (= $x14 true)))
 (let ((?x213 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x209 (= (_ bv0 32) ?x213)))
 (let ((?x159 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x119 (= (_ bv0 32) ?x159)))
 (let ((?x238 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x75 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x58 $x221)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x150 $x9)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x69 $x64)))
 (let (($x40 (not $x275)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (and $x230 $x139)))
 (let (($x41 (and (not $x254) $x40)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x215 $x262)))
 (let (($x273 (not $x219)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x243 $x37)))
 (let (($x122 (and (not $x267) $x273)))
 (let (($x176 (and (and (and (and (and (and $x122 $x41) $x88) $x21) $x72) $x248) $x119)))
 (let (($x96 (and $x176 $x209)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x268 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x54 (or false (or false (and (and true (or $x137 $x268)) (or $x107 $x184))))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x136 (and $x151 $x96)))
 (let (($x157 (= $x136 true)))
 (let (($x231 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x153 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x91 (and $x153 $x231)))
 (let (($x192 (= $x91 true)))
 (let ((?x62 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x16 (= (_ bv0 2) ?x62)))
 (let (($x127 (= $x16 true)))
 (let (($x212 (forall ((input.ind-%var1051X (_ BitVec 32)) )(let ((?x193 (bvmul input.ind-%var1051X (_ bv4 32))))
 (let ((?x205 (bvadd ?x193 input.dst.llvm-%m1)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x205))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x178)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x226)))
 (let ((?x43 (input.spec-%var-m1-1.1.1 input.ind-%var1051X)))
 (let (($x259 (input.spec-%var-m1-1.0.1 input.ind-%var1051X)))
 (=> $x259 (= ?x43 ?x190))))))))))
 ))
 (let (($x8 (forall ((input.ind-%var1050X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var1050X) (bvult input.ind-%var1050X (_ bv100 32)))))
 (let (($x259 (input.spec-%var-m1-1.0.1 input.ind-%var1050X)))
 (= $x259 $x234))))
 ))
 (let (($x56 (and $x8 $x212)))
 (let (($x84 (= $x56 true)))
 (let (($x135 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let ((?x193 (bvmul input.ind-%var1041X (_ bv4 32))))
 (let ((?x82 (bvadd ?x193 input.dst.llvm-%m2)))
 (let ((?x145 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x82))))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x82 (_ bv2 32))) ?x145)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x82 (_ bv3 32))) ?x76)))
 (let ((?x185 (input.spec-%var-m2-1.1.1 input.ind-%var1041X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1041X)))
 (=> $x109 (= ?x185 ?x25))))))))))
 ))
 (let (($x140 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var1040X) (bvult input.ind-%var1040X (_ bv100 32)))))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1040X)))
 (= $x109 $x234))))
 ))
 (let (($x246 (and $x140 $x135)))
 (let (($x191 (= $x246 true)))
 (let (($x33 (and $x191 $x84)))
 (let (($x134 (and $x33 $x127)))
 (let (($x204 (and $x134 $x192)))
 (let (($x173 (and $x204 $x157)))
 (let (($x228 (and $x173 $x199)))
 (let (($x263 (forall ((input.ind-%var1061X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1061X)))
 (let ((?x43 (input.spec-%var-m1-1.1.1 input.ind-%var1061X)))
 (let (($x259 (input.spec-%var-m1-1.0.1 input.ind-%var1061X)))
 (=> $x259 (= ?x43 ?x138))))))
 ))
 (let (($x101 (forall ((input.ind-%var1060X (_ BitVec 32)) )(let (($x121 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1060X)))
 (let (($x259 (input.spec-%var-m1-1.0.1 input.ind-%var1060X)))
 (= $x259 $x121))))
 ))
 (let (($x12 (and $x101 $x263)))
 (let (($x126 (and $x12 $x228)))
 (let (($x66 (forall ((input.ind-%var1071X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1071X)))
 (let ((?x185 (input.spec-%var-m2-1.1.1 input.ind-%var1071X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1071X)))
 (=> $x109 (= ?x185 ?x74))))))
 ))
 (let (($x24 (forall ((input.ind-%var1070X (_ BitVec 32)) )(let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1070X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1070X)))
 (= $x109 $x141))))
 ))
 (let (($x15 (and $x24 $x66)))
 (let (($x61 (and $x15 $x126)))
 (let (($x19 (=> $x61 $x244)))
 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x116 (= false true)))
 (let ((?x196 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x104 (= (_ bv0 32) ?x196)))
 (let ((?x20 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x175 (= (_ bv0 32) ?x20)))
 (let ((?x130 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x232 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x258 (and $x223 $x169)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x253 $x258)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x197 $x235)))
 (let (($x102 (not $x179)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x180 $x229)))
 (let (($x125 (and (not $x87) $x102)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x272 $x85)))
 (let (($x207 (not $x131)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x271 $x38)))
 (let (($x183 (and (not $x60) $x207)))
 (let (($x67 (and (and (and (and (and (and $x183 $x125) $x49) $x81) $x118) $x168) $x175)))
 (let (($x50 (and $x67 $x104)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x274 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x36 (or false (or false (and (and true (or $x174 $x274)) (or $x83 $x120))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x36)))
 (let (($x210 (and $x89 $x50)))
 (let (($x26 (= $x210 true)))
 (let ((?x133 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x160 (= (_ bv0 2) ?x133)))
 (let (($x30 (= $x160 true)))
 (let (($x100 (forall ((input.ind-%var1091X (_ BitVec 32)) )(let ((?x17 (bvmul input.ind-%var1091X (_ bv4 32))))
 (let ((?x213 (bvadd ?x17 input.dst.llvm-%m1)))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x213))))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x213 (_ bv2 32))) ?x157)))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x213 (_ bv3 32))) ?x217)))
 (let ((?x172 (input.spec-%var-m1-1.1.1 input.ind-%var1091X)))
 (let (($x171 (input.spec-%var-m1-1.0.1 input.ind-%var1091X)))
 (=> $x171 (= ?x172 ?x228))))))))))
 ))
 (let (($x88 (forall ((input.ind-%var1090X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var1090X) (bvult input.ind-%var1090X (_ bv100 32)))))
 (let (($x171 (input.spec-%var-m1-1.0.1 input.ind-%var1090X)))
 (= $x171 $x128))))
 ))
 (let (($x244 (and $x88 $x100)))
 (let (($x19 (= $x244 true)))
 (let (($x230 (forall ((input.ind-%var1081X (_ BitVec 32)) )(let ((?x17 (bvmul input.ind-%var1081X (_ bv4 32))))
 (let ((?x163 (bvadd ?x17 input.dst.llvm-%m2)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x163))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv2 32))) ?x243)))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv3 32))) ?x200)))
 (let ((?x47 (input.spec-%var-m2-1.1.1 input.ind-%var1081X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1081X)))
 (=> $x109 (= ?x47 ?x219))))))))))
 ))
 (let (($x16 (forall ((input.ind-%var1080X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var1080X) (bvult input.ind-%var1080X (_ bv100 32)))))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1080X)))
 (= $x109 $x128))))
 ))
 (let (($x139 (and $x16 $x230)))
 (let (($x254 (= $x139 true)))
 (let (($x164 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x205 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x80 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x132 (and $x80 $x205)))
 (let (($x53 (and $x132 $x164)))
 (let (($x35 (= $x53 true)))
 (let (($x225 (and $x35 $x254)))
 (let (($x276 (and $x225 $x19)))
 (let (($x6 (and $x276 $x30)))
 (let (($x170 (and $x6 $x26)))
 (let (($x5 (forall ((input.ind-%var1101X (_ BitVec 32)) )(let ((?x222 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1101X)))
 (let ((?x172 (input.spec-%var-m1-1.1.1 input.ind-%var1101X)))
 (let (($x171 (input.spec-%var-m1-1.0.1 input.ind-%var1101X)))
 (=> $x171 (= ?x172 ?x222))))))
 ))
 (let (($x278 (forall ((input.ind-%var1100X (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1100X)))
 (let (($x171 (input.spec-%var-m1-1.0.1 input.ind-%var1100X)))
 (= $x171 $x52))))
 ))
 (let (($x112 (and $x278 $x5)))
 (let (($x78 (and $x112 $x170)))
 (let (($x216 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1111X)))
 (let ((?x47 (input.spec-%var-m2-1.1.1 input.ind-%var1111X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1111X)))
 (=> $x109 (= ?x47 ?x138))))))
 ))
 (let (($x66 (forall ((input.ind-%var1110X (_ BitVec 32)) )(let (($x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1110X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1110X)))
 (= $x109 $x74))))
 ))
 (let (($x277 (and $x66 $x216)))
 (let (($x95 (and $x277 $x78)))
 (let (($x211 (=> $x95 $x116)))
 (not $x211))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x116 (= false true)))
 (let ((?x196 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x104 (= (_ bv0 32) ?x196)))
 (let ((?x20 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x175 (= (_ bv0 32) ?x20)))
 (let ((?x130 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x232 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x258 (and $x223 $x169)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x253 $x258)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x197 $x235)))
 (let (($x102 (not $x179)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x180 $x229)))
 (let (($x125 (and (not $x87) $x102)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x272 $x85)))
 (let (($x207 (not $x131)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x271 $x38)))
 (let (($x183 (and (not $x60) $x207)))
 (let (($x67 (and (and (and (and (and (and $x183 $x125) $x49) $x81) $x118) $x168) $x175)))
 (let (($x50 (and $x67 $x104)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x274 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x36 (or false (or false (and (and true (or $x174 $x274)) (or $x83 $x120))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x36)))
 (let (($x210 (and $x89 $x50)))
 (let (($x26 (= $x210 true)))
 (let ((?x133 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x160 (= (_ bv0 2) ?x133)))
 (let (($x30 (= $x160 true)))
 (let (($x100 (forall ((input.ind-%var1091X (_ BitVec 32)) )(let ((?x17 (bvmul input.ind-%var1091X (_ bv4 32))))
 (let ((?x213 (bvadd ?x17 input.dst.llvm-%m1)))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x213))))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x213 (_ bv2 32))) ?x157)))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x213 (_ bv3 32))) ?x217)))
 (let ((?x172 (input.spec-%var-m1-1.1.1 input.ind-%var1091X)))
 (let (($x171 (input.spec-%var-m1-1.0.1 input.ind-%var1091X)))
 (=> $x171 (= ?x172 ?x228))))))))))
 ))
 (let (($x88 (forall ((input.ind-%var1090X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var1090X) (bvult input.ind-%var1090X (_ bv100 32)))))
 (let (($x171 (input.spec-%var-m1-1.0.1 input.ind-%var1090X)))
 (= $x171 $x128))))
 ))
 (let (($x244 (and $x88 $x100)))
 (let (($x19 (= $x244 true)))
 (let (($x230 (forall ((input.ind-%var1081X (_ BitVec 32)) )(let ((?x17 (bvmul input.ind-%var1081X (_ bv4 32))))
 (let ((?x163 (bvadd ?x17 input.dst.llvm-%m2)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x163))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv2 32))) ?x243)))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv3 32))) ?x200)))
 (let ((?x47 (input.spec-%var-m2-1.1.1 input.ind-%var1081X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1081X)))
 (=> $x109 (= ?x47 ?x219))))))))))
 ))
 (let (($x16 (forall ((input.ind-%var1080X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var1080X) (bvult input.ind-%var1080X (_ bv100 32)))))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1080X)))
 (= $x109 $x128))))
 ))
 (let (($x139 (and $x16 $x230)))
 (let (($x254 (= $x139 true)))
 (let (($x164 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x205 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x80 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x132 (and $x80 $x205)))
 (let (($x53 (and $x132 $x164)))
 (let (($x35 (= $x53 true)))
 (let (($x225 (and $x35 $x254)))
 (let (($x276 (and $x225 $x19)))
 (let (($x6 (and $x276 $x30)))
 (let (($x170 (and $x6 $x26)))
 (let (($x5 (forall ((input.ind-%var1101X (_ BitVec 32)) )(let ((?x222 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1101X)))
 (let ((?x172 (input.spec-%var-m1-1.1.1 input.ind-%var1101X)))
 (let (($x171 (input.spec-%var-m1-1.0.1 input.ind-%var1101X)))
 (=> $x171 (= ?x172 ?x222))))))
 ))
 (let (($x278 (forall ((input.ind-%var1100X (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1100X)))
 (let (($x171 (input.spec-%var-m1-1.0.1 input.ind-%var1100X)))
 (= $x171 $x52))))
 ))
 (let (($x112 (and $x278 $x5)))
 (let (($x78 (and $x112 $x170)))
 (let (($x216 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1111X)))
 (let ((?x47 (input.spec-%var-m2-1.1.1 input.ind-%var1111X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1111X)))
 (=> $x109 (= ?x47 ?x138))))))
 ))
 (let (($x66 (forall ((input.ind-%var1110X (_ BitVec 32)) )(let (($x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1110X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1110X)))
 (= $x109 $x74))))
 ))
 (let (($x277 (and $x66 $x216)))
 (let (($x95 (and $x277 $x78)))
 (let (($x211 (=> $x95 $x116)))
 (not $x211))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00040003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000008)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xa3487a58)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3eb0ac5c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3eb0ac5f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xa3487a5b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3eb0ac5c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xa3487a58)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x263 (= $x259 true)))
 (let (($x23 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x15 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x176 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x249 (and $x176 $x15)))
 (let (($x203 (and $x249 $x23)))
 (let (($x43 (= $x203 true)))
 (let ((?x208 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x72 (= (_ bv0 32) ?x208)))
 (let ((?x150 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x248 (= (_ bv0 32) ?x150)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x40)))
 (let ((?x184 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x184)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x134 $x21)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x28 $x69)))
 (let (($x56 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x71 $x18)))
 (let (($x204 (not $x189)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x90 $x256)))
 (let (($x268 (and (not $x137) $x204)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x155 $x201)))
 (let (($x147 (not $x190)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x95 $x116)))
 (let (($x192 (and (not $x127) $x147)))
 (let (($x238 (and (and (and (and (and (and $x192 $x268) $x178) $x56) $x275) $x177) $x248)))
 (let (($x159 (and $x238 $x72)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x42 (or false (or false (and (and true (or $x101 $x140)) (or $x105 $x167))))))
 (let (($x245 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x64 (and $x245 $x159)))
 (let (($x41 (= $x64 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x210 (= (_ bv0 2) ?x50)))
 (let (($x26 (= $x210 true)))
 (let (($x20 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let ((?x30 (bvmul input.ind-%var1163X (_ bv4 32))))
 (let ((?x34 (bvadd ?x30 input.dst.llvm-%m1)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x223)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x258)))
 (let ((?x84 (input.spec-%var-m1-1.1.1 input.ind-%var1163X)))
 (let (($x146 (input.spec-%var-m1-1.0.1 input.ind-%var1163X)))
 (=> $x146 (= ?x84 ?x130))))))))))
 ))
 (let (($x143 (forall ((input.ind-%var1162X (_ BitVec 32)) )(let (($x273 (and (bvule (_ bv0 32) input.ind-%var1162X) (bvult input.ind-%var1162X (_ bv100 32)))))
 (let (($x146 (input.spec-%var-m1-1.0.1 input.ind-%var1162X)))
 (= $x146 $x273))))
 ))
 (let (($x175 (and $x143 $x20)))
 (let (($x67 (= $x175 true)))
 (let (($x181 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let ((?x30 (bvmul input.ind-%var1153X (_ bv4 32))))
 (let ((?x6 (bvadd ?x30 input.dst.llvm-%m2)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x6))))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x92)))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x73)))
 (let ((?x82 (input.spec-%var-m2-1.1.1 input.ind-%var1153X)))
 (let (($x141 (input.spec-%var-m2-1.0.1 input.ind-%var1153X)))
 (=> $x141 (= ?x82 ?x187))))))))))
 ))
 (let (($x230 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x273 (and (bvule (_ bv0 32) input.ind-%var1152X) (bvult input.ind-%var1152X (_ bv100 32)))))
 (let (($x141 (input.spec-%var-m2-1.0.1 input.ind-%var1152X)))
 (= $x141 $x273))))
 ))
 (let (($x120 (and $x230 $x181)))
 (let (($x63 (= $x120 true)))
 (let (($x196 (and $x63 $x67)))
 (let (($x170 (and $x196 $x26)))
 (let (($x242 (and $x170 $x41)))
 (let (($x224 (and $x242 $x43)))
 (let (($x215 (forall ((input.ind-%var1173X (_ BitVec 32)) )(let ((?x16 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1173X)))
 (let ((?x84 (input.spec-%var-m1-1.1.1 input.ind-%var1173X)))
 (let (($x146 (input.spec-%var-m1-1.0.1 input.ind-%var1173X)))
 (=> $x146 (= ?x84 ?x16))))))
 ))
 (let (($x35 (forall ((input.ind-%var1172X (_ BitVec 32)) )(let (($x149 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1172X)))
 (let (($x146 (input.spec-%var-m1-1.0.1 input.ind-%var1172X)))
 (= $x146 $x149))))
 ))
 (let (($x262 (and $x35 $x215)))
 (let (($x115 (and $x262 $x224)))
 (let (($x246 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let ((?x222 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1183X)))
 (let ((?x82 (input.spec-%var-m2-1.1.1 input.ind-%var1183X)))
 (let (($x141 (input.spec-%var-m2-1.0.1 input.ind-%var1183X)))
 (=> $x141 (= ?x82 ?x222))))))
 ))
 (let (($x216 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x47 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1182X)))
 (let (($x141 (input.spec-%var-m2-1.0.1 input.ind-%var1182X)))
 (= $x141 $x47))))
 ))
 (let (($x191 (and $x216 $x246)))
 (let (($x198 (and $x191 $x115)))
 (let (($x29 (=> $x198 $x263)))
 (not $x29)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x263 (= $x259 true)))
 (let (($x23 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x15 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x176 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x249 (and $x176 $x15)))
 (let (($x203 (and $x249 $x23)))
 (let (($x43 (= $x203 true)))
 (let ((?x208 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x72 (= (_ bv0 32) ?x208)))
 (let ((?x150 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x248 (= (_ bv0 32) ?x150)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x40)))
 (let ((?x184 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x184)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x134 $x21)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x28 $x69)))
 (let (($x56 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x71 $x18)))
 (let (($x204 (not $x189)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x90 $x256)))
 (let (($x268 (and (not $x137) $x204)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x155 $x201)))
 (let (($x147 (not $x190)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x95 $x116)))
 (let (($x192 (and (not $x127) $x147)))
 (let (($x238 (and (and (and (and (and (and $x192 $x268) $x178) $x56) $x275) $x177) $x248)))
 (let (($x159 (and $x238 $x72)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x42 (or false (or false (and (and true (or $x101 $x140)) (or $x105 $x167))))))
 (let (($x245 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x64 (and $x245 $x159)))
 (let (($x41 (= $x64 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x210 (= (_ bv0 2) ?x50)))
 (let (($x26 (= $x210 true)))
 (let (($x20 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let ((?x30 (bvmul input.ind-%var1163X (_ bv4 32))))
 (let ((?x34 (bvadd ?x30 input.dst.llvm-%m1)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x223)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x258)))
 (let ((?x84 (input.spec-%var-m1-1.1.1 input.ind-%var1163X)))
 (let (($x146 (input.spec-%var-m1-1.0.1 input.ind-%var1163X)))
 (=> $x146 (= ?x84 ?x130))))))))))
 ))
 (let (($x143 (forall ((input.ind-%var1162X (_ BitVec 32)) )(let (($x273 (and (bvule (_ bv0 32) input.ind-%var1162X) (bvult input.ind-%var1162X (_ bv100 32)))))
 (let (($x146 (input.spec-%var-m1-1.0.1 input.ind-%var1162X)))
 (= $x146 $x273))))
 ))
 (let (($x175 (and $x143 $x20)))
 (let (($x67 (= $x175 true)))
 (let (($x181 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let ((?x30 (bvmul input.ind-%var1153X (_ bv4 32))))
 (let ((?x6 (bvadd ?x30 input.dst.llvm-%m2)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x6))))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x92)))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x73)))
 (let ((?x82 (input.spec-%var-m2-1.1.1 input.ind-%var1153X)))
 (let (($x141 (input.spec-%var-m2-1.0.1 input.ind-%var1153X)))
 (=> $x141 (= ?x82 ?x187))))))))))
 ))
 (let (($x230 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x273 (and (bvule (_ bv0 32) input.ind-%var1152X) (bvult input.ind-%var1152X (_ bv100 32)))))
 (let (($x141 (input.spec-%var-m2-1.0.1 input.ind-%var1152X)))
 (= $x141 $x273))))
 ))
 (let (($x120 (and $x230 $x181)))
 (let (($x63 (= $x120 true)))
 (let (($x196 (and $x63 $x67)))
 (let (($x170 (and $x196 $x26)))
 (let (($x242 (and $x170 $x41)))
 (let (($x224 (and $x242 $x43)))
 (let (($x215 (forall ((input.ind-%var1173X (_ BitVec 32)) )(let ((?x16 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1173X)))
 (let ((?x84 (input.spec-%var-m1-1.1.1 input.ind-%var1173X)))
 (let (($x146 (input.spec-%var-m1-1.0.1 input.ind-%var1173X)))
 (=> $x146 (= ?x84 ?x16))))))
 ))
 (let (($x35 (forall ((input.ind-%var1172X (_ BitVec 32)) )(let (($x149 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1172X)))
 (let (($x146 (input.spec-%var-m1-1.0.1 input.ind-%var1172X)))
 (= $x146 $x149))))
 ))
 (let (($x262 (and $x35 $x215)))
 (let (($x115 (and $x262 $x224)))
 (let (($x246 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let ((?x222 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1183X)))
 (let ((?x82 (input.spec-%var-m2-1.1.1 input.ind-%var1183X)))
 (let (($x141 (input.spec-%var-m2-1.0.1 input.ind-%var1183X)))
 (=> $x141 (= ?x82 ?x222))))))
 ))
 (let (($x216 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x47 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1182X)))
 (let (($x141 (input.spec-%var-m2-1.0.1 input.ind-%var1182X)))
 (= $x141 $x47))))
 ))
 (let (($x191 (and $x216 $x246)))
 (let (($x198 (and $x191 $x115)))
 (let (($x29 (=> $x198 $x263)))
 (not $x29)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000008)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000008)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!2 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!2 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb3cf3b24)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9e66070)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9e66073)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb3cf3b27)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9e66070)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb3cf3b24)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x171 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x5 (bvneg ?x171)))
 (let (($x94 (= ?x5 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x77 (= $x94 true)))
 (let (($x52 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x231 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x85 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x277 (and $x85 $x231)))
 (let (($x109 (and $x277 $x52)))
 (let (($x236 (= $x109 true)))
 (let ((?x125 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x11 (= (_ bv0 32) ?x125)))
 (let ((?x207 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x180 (= (_ bv0 32) ?x207)))
 (let ((?x36 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x36)))
 (let ((?x254 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x254)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (and $x133 $x160)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x243 $x131)))
 (let (($x269 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (and $x126 $x61)))
 (let (($x157 (not $x209)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x240 $x19)))
 (let (($x217 (and (not $x276) $x157)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x139 $x225)))
 (let (($x233 (not $x70)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x259 $x263)))
 (let (($x199 (and (not $x164) $x233)))
 (let (($x197 (and (and (and (and (and (and $x199 $x217) $x108) $x269) $x99) $x89) $x180)))
 (let (($x102 (and $x197 $x11)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x278 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x78)))
 (let (($x132 (or false (or false (and (and true (or $x66 $x278)) (or $x138 $x76))))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x32 (and $x8 $x102)))
 (let (($x154 (= $x32 true)))
 (let ((?x203 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x43 (= (_ bv0 2) ?x203)))
 (let (($x224 (= $x43 true)))
 (let (($x161 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let ((?x7 (bvmul input.ind-%var1235X (_ bv4 32))))
 (let ((?x9 (bvadd ?x7 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x9))))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x9 (_ bv2 32))) ?x208)))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x9 (_ bv3 32))) ?x64)))
 (let ((?x65 (input.spec-%var-m1-1.1.1 input.ind-%var1235X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var1235X)))
 (=> $x122 (= ?x65 ?x119))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x169 (and (bvule (_ bv0 32) input.ind-%var1234X) (bvult input.ind-%var1234X (_ bv100 32)))))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var1234X)))
 (= $x122 $x169))))
 ))
 (let (($x15 (and $x189 $x161)))
 (let (($x249 (= $x15 true)))
 (let (($x201 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let ((?x7 (bvmul input.ind-%var1225X (_ bv4 32))))
 (let ((?x105 (bvadd ?x7 input.dst.llvm-%m2)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x105))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv2 32))) ?x194)))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv3 32))) ?x245)))
 (let ((?x53 (input.spec-%var-m2-1.1.1 input.ind-%var1225X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1225X)))
 (=> $x216 (= ?x53 ?x127))))))))))
 ))
 (let (($x253 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x169 (and (bvule (_ bv0 32) input.ind-%var1224X) (bvult input.ind-%var1224X (_ bv100 32)))))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1224X)))
 (= $x216 $x169))))
 ))
 (let (($x190 (and $x253 $x201)))
 (let (($x147 (= $x190 true)))
 (let (($x121 (and $x147 $x249)))
 (let (($x115 (and $x121 $x224)))
 (let (($x271 (and $x115 $x154)))
 (let (($x172 (and $x271 $x236)))
 (let (($x214 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1245X)))
 (let ((?x65 (input.spec-%var-m1-1.1.1 input.ind-%var1245X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var1245X)))
 (=> $x122 (= ?x65 ?x218))))))
 ))
 (let (($x244 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x14 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1244X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var1244X)))
 (= $x122 $x14))))
 ))
 (let (($x83 (and $x244 $x214)))
 (let (($x46 (and $x83 $x172)))
 (let (($x219 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let ((?x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1255X)))
 (let ((?x53 (input.spec-%var-m2-1.1.1 input.ind-%var1255X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1255X)))
 (=> $x216 (= ?x53 ?x16))))))
 ))
 (let (($x246 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x82 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1254X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1254X)))
 (= $x216 $x82))))
 ))
 (let (($x54 (and $x246 $x219)))
 (let (($x12 (and $x54 $x46)))
 (let (($x255 (=> $x12 $x77)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x171 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x5 (bvneg ?x171)))
 (let (($x94 (= ?x5 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x77 (= $x94 true)))
 (let (($x52 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x231 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x85 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x277 (and $x85 $x231)))
 (let (($x109 (and $x277 $x52)))
 (let (($x236 (= $x109 true)))
 (let ((?x125 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x11 (= (_ bv0 32) ?x125)))
 (let ((?x207 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x180 (= (_ bv0 32) ?x207)))
 (let ((?x36 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x36)))
 (let ((?x254 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x254)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (and $x133 $x160)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x243 $x131)))
 (let (($x269 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (and $x126 $x61)))
 (let (($x157 (not $x209)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x240 $x19)))
 (let (($x217 (and (not $x276) $x157)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x139 $x225)))
 (let (($x233 (not $x70)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x259 $x263)))
 (let (($x199 (and (not $x164) $x233)))
 (let (($x197 (and (and (and (and (and (and $x199 $x217) $x108) $x269) $x99) $x89) $x180)))
 (let (($x102 (and $x197 $x11)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x278 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x78)))
 (let (($x132 (or false (or false (and (and true (or $x66 $x278)) (or $x138 $x76))))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x32 (and $x8 $x102)))
 (let (($x154 (= $x32 true)))
 (let ((?x203 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x43 (= (_ bv0 2) ?x203)))
 (let (($x224 (= $x43 true)))
 (let (($x161 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let ((?x7 (bvmul input.ind-%var1235X (_ bv4 32))))
 (let ((?x9 (bvadd ?x7 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x9))))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x9 (_ bv2 32))) ?x208)))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x9 (_ bv3 32))) ?x64)))
 (let ((?x65 (input.spec-%var-m1-1.1.1 input.ind-%var1235X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var1235X)))
 (=> $x122 (= ?x65 ?x119))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x169 (and (bvule (_ bv0 32) input.ind-%var1234X) (bvult input.ind-%var1234X (_ bv100 32)))))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var1234X)))
 (= $x122 $x169))))
 ))
 (let (($x15 (and $x189 $x161)))
 (let (($x249 (= $x15 true)))
 (let (($x201 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let ((?x7 (bvmul input.ind-%var1225X (_ bv4 32))))
 (let ((?x105 (bvadd ?x7 input.dst.llvm-%m2)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x105))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv2 32))) ?x194)))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv3 32))) ?x245)))
 (let ((?x53 (input.spec-%var-m2-1.1.1 input.ind-%var1225X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1225X)))
 (=> $x216 (= ?x53 ?x127))))))))))
 ))
 (let (($x253 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x169 (and (bvule (_ bv0 32) input.ind-%var1224X) (bvult input.ind-%var1224X (_ bv100 32)))))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1224X)))
 (= $x216 $x169))))
 ))
 (let (($x190 (and $x253 $x201)))
 (let (($x147 (= $x190 true)))
 (let (($x121 (and $x147 $x249)))
 (let (($x115 (and $x121 $x224)))
 (let (($x271 (and $x115 $x154)))
 (let (($x172 (and $x271 $x236)))
 (let (($x214 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1245X)))
 (let ((?x65 (input.spec-%var-m1-1.1.1 input.ind-%var1245X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var1245X)))
 (=> $x122 (= ?x65 ?x218))))))
 ))
 (let (($x244 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x14 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1244X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var1244X)))
 (= $x122 $x14))))
 ))
 (let (($x83 (and $x244 $x214)))
 (let (($x46 (and $x83 $x172)))
 (let (($x219 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let ((?x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1255X)))
 (let ((?x53 (input.spec-%var-m2-1.1.1 input.ind-%var1255X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1255X)))
 (=> $x216 (= ?x53 ?x16))))))
 ))
 (let (($x246 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x82 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1254X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1254X)))
 (= $x216 $x82))))
 ))
 (let (($x54 (and $x246 $x219)))
 (let (($x12 (and $x54 $x46)))
 (let (($x255 (=> $x12 $x77)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x47 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x112 (bvneg ?x47)))
 (let (($x266 (= ?x112 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (= $x266 true)))
 (let (($x191 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x40 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x93 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x268 (and $x93 $x40)))
 (let (($x68 (and $x268 $x191)))
 (let (($x92 (= $x68 true)))
 (let ((?x137 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x107 (= (_ bv0 32) ?x137)))
 (let ((?x192 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x256 (= (_ bv0 32) ?x192)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x34 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x120 $x118)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x223 (and $x140 $x188)))
 (let (($x153 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x196 $x101)))
 (let (($x44 (not $x97)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x60 $x183)))
 (let (($x210 (and (not $x175) $x44)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x136 $x273)))
 (let (($x81 (not $x173)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x12 $x25)))
 (let (($x181 (and (not $x129) $x81)))
 (let (($x56 (and (and (and (and (and (and $x181 $x210) $x104) $x153) $x223) $x182) $x256)))
 (let (($x221 (and $x56 $x107)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x274 (or false (or false (and (and true (or $x252 $x168)) (or $x174 $x30))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x274)))
 (let (($x212 (and $x200 $x221)))
 (let (($x28 (= $x212 true)))
 (let ((?x52 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x109 (= (_ bv0 2) ?x52)))
 (let (($x236 (= $x109 true)))
 (let (($x152 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let ((?x22 (bvmul input.ind-%var1275X (_ bv4 32))))
 (let ((?x229 (bvadd ?x22 input.dst.llvm-%m1)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x229))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv2 32))) ?x125)))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv3 32))) ?x32)))
 (let ((?x247 (input.spec-%var-m1-1.1.1 input.ind-%var1275X)))
 (let (($x79 (input.spec-%var-m1-1.0.1 input.ind-%var1275X)))
 (=> $x79 (= ?x247 ?x38))))))))))
 ))
 (let (($x209 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1274X) (bvult input.ind-%var1274X (_ bv100 32)))))
 (let (($x79 (input.spec-%var-m1-1.0.1 input.ind-%var1274X)))
 (= $x79 $x159))))
 ))
 (let (($x231 (and $x209 $x152)))
 (let (($x277 (= $x231 true)))
 (let (($x225 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let ((?x22 (bvmul input.ind-%var1265X (_ bv4 32))))
 (let ((?x138 (bvadd ?x22 input.dst.llvm-%m2)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x138))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv2 32))) ?x220)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv3 32))) ?x8)))
 (let ((?x6 (input.spec-%var-m2-1.1.1 input.ind-%var1265X)))
 (let (($x206 (input.spec-%var-m2-1.0.1 input.ind-%var1265X)))
 (=> $x206 (= ?x6 ?x164))))))))))
 ))
 (let (($x238 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1264X) (bvult input.ind-%var1264X (_ bv100 32)))))
 (let (($x206 (input.spec-%var-m2-1.0.1 input.ind-%var1264X)))
 (= $x206 $x159))))
 ))
 (let (($x70 (and $x238 $x225)))
 (let (($x233 (= $x70 true)))
 (let (($x33 (and $x233 $x277)))
 (let (($x172 (and $x33 $x236)))
 (let (($x21 (and $x172 $x28)))
 (let (($x149 (and $x21 $x92)))
 (let (($x91 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let ((?x167 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1285X)))
 (let ((?x247 (input.spec-%var-m1-1.1.1 input.ind-%var1285X)))
 (let (($x79 (input.spec-%var-m1-1.0.1 input.ind-%var1285X)))
 (=> $x79 (= ?x247 ?x167))))))
 ))
 (let (($x24 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x20 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1284X)))
 (let (($x79 (input.spec-%var-m1-1.0.1 input.ind-%var1284X)))
 (= $x79 $x20))))
 ))
 (let (($x155 (and $x24 $x91)))
 (let (($x141 (and $x155 $x149)))
 (let (($x232 (forall ((input.ind-%var1295X (_ BitVec 32)) )(let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1295X)))
 (let ((?x6 (input.spec-%var-m2-1.1.1 input.ind-%var1295X)))
 (let (($x206 (input.spec-%var-m2-1.0.1 input.ind-%var1295X)))
 (=> $x206 (= ?x6 ?x218))))))
 ))
 (let (($x219 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let (($x53 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1294X)))
 (let (($x206 (input.spec-%var-m2-1.0.1 input.ind-%var1294X)))
 (= $x206 $x53))))
 ))
 (let (($x143 (and $x219 $x232)))
 (let (($x74 (and $x143 $x141)))
 (let (($x215 (=> $x74 $x146)))
 (not $x215)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x47 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x112 (bvneg ?x47)))
 (let (($x266 (= ?x112 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (= $x266 true)))
 (let (($x191 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x40 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x93 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x268 (and $x93 $x40)))
 (let (($x68 (and $x268 $x191)))
 (let (($x92 (= $x68 true)))
 (let ((?x137 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x107 (= (_ bv0 32) ?x137)))
 (let ((?x192 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x256 (= (_ bv0 32) ?x192)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x34 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x120 $x118)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x223 (and $x140 $x188)))
 (let (($x153 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x196 $x101)))
 (let (($x44 (not $x97)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x60 $x183)))
 (let (($x210 (and (not $x175) $x44)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x136 $x273)))
 (let (($x81 (not $x173)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x12 $x25)))
 (let (($x181 (and (not $x129) $x81)))
 (let (($x56 (and (and (and (and (and (and $x181 $x210) $x104) $x153) $x223) $x182) $x256)))
 (let (($x221 (and $x56 $x107)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x274 (or false (or false (and (and true (or $x252 $x168)) (or $x174 $x30))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x274)))
 (let (($x212 (and $x200 $x221)))
 (let (($x28 (= $x212 true)))
 (let ((?x52 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x109 (= (_ bv0 2) ?x52)))
 (let (($x236 (= $x109 true)))
 (let (($x152 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let ((?x22 (bvmul input.ind-%var1275X (_ bv4 32))))
 (let ((?x229 (bvadd ?x22 input.dst.llvm-%m1)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x229))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv2 32))) ?x125)))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x229 (_ bv3 32))) ?x32)))
 (let ((?x247 (input.spec-%var-m1-1.1.1 input.ind-%var1275X)))
 (let (($x79 (input.spec-%var-m1-1.0.1 input.ind-%var1275X)))
 (=> $x79 (= ?x247 ?x38))))))))))
 ))
 (let (($x209 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1274X) (bvult input.ind-%var1274X (_ bv100 32)))))
 (let (($x79 (input.spec-%var-m1-1.0.1 input.ind-%var1274X)))
 (= $x79 $x159))))
 ))
 (let (($x231 (and $x209 $x152)))
 (let (($x277 (= $x231 true)))
 (let (($x225 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let ((?x22 (bvmul input.ind-%var1265X (_ bv4 32))))
 (let ((?x138 (bvadd ?x22 input.dst.llvm-%m2)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x138))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv2 32))) ?x220)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv3 32))) ?x8)))
 (let ((?x6 (input.spec-%var-m2-1.1.1 input.ind-%var1265X)))
 (let (($x206 (input.spec-%var-m2-1.0.1 input.ind-%var1265X)))
 (=> $x206 (= ?x6 ?x164))))))))))
 ))
 (let (($x238 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1264X) (bvult input.ind-%var1264X (_ bv100 32)))))
 (let (($x206 (input.spec-%var-m2-1.0.1 input.ind-%var1264X)))
 (= $x206 $x159))))
 ))
 (let (($x70 (and $x238 $x225)))
 (let (($x233 (= $x70 true)))
 (let (($x33 (and $x233 $x277)))
 (let (($x172 (and $x33 $x236)))
 (let (($x21 (and $x172 $x28)))
 (let (($x149 (and $x21 $x92)))
 (let (($x91 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let ((?x167 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1285X)))
 (let ((?x247 (input.spec-%var-m1-1.1.1 input.ind-%var1285X)))
 (let (($x79 (input.spec-%var-m1-1.0.1 input.ind-%var1285X)))
 (=> $x79 (= ?x247 ?x167))))))
 ))
 (let (($x24 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x20 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1284X)))
 (let (($x79 (input.spec-%var-m1-1.0.1 input.ind-%var1284X)))
 (= $x79 $x20))))
 ))
 (let (($x155 (and $x24 $x91)))
 (let (($x141 (and $x155 $x149)))
 (let (($x232 (forall ((input.ind-%var1295X (_ BitVec 32)) )(let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1295X)))
 (let ((?x6 (input.spec-%var-m2-1.1.1 input.ind-%var1295X)))
 (let (($x206 (input.spec-%var-m2-1.0.1 input.ind-%var1295X)))
 (=> $x206 (= ?x6 ?x218))))))
 ))
 (let (($x219 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let (($x53 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1294X)))
 (let (($x206 (input.spec-%var-m2-1.0.1 input.ind-%var1294X)))
 (= $x206 $x53))))
 ))
 (let (($x143 (and $x219 $x232)))
 (let (($x74 (and $x143 $x141)))
 (let (($x215 (=> $x74 $x146)))
 (not $x215)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x135 (= $x65 true)))
 (let ((?x54 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x116 (= (_ bv0 2) ?x54)))
 (let (($x194 (= $x116 true)))
 (let (($x126 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let ((?x35 (bvmul input.ind-%var1315X (_ bv4 32))))
 (let ((?x179 (bvadd ?x35 input.dst.llvm-%m2)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x179))))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv2 32))) ?x254)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv3 32))) ?x37)))
 (let ((?x105 (input.spec-%var-m2-1.1.1 input.ind-%var1315X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1315X)))
 (=> $x176 (= ?x105 ?x59))))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var1314X) (bvult input.ind-%var1314X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1314X)))
 (= $x176 $x102))))
 ))
 (let (($x36 (and $x62 $x126)))
 (let (($x217 (= $x36 true)))
 (let (($x67 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x186 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x73 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x130 (and $x73 $x186)))
 (let (($x150 (and $x130 $x67)))
 (let (($x64 (= $x150 true)))
 (let ((?x112 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x266 (= (_ bv0 32) ?x112)))
 (let ((?x84 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x47 (= (_ bv0 32) ?x84)))
 (let ((?x141 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x191 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x191)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x92 (and $x158 $x68)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x177 $x92)))
 (let (($x268 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x221 $x212)))
 (let (($x21 (not $x28)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x56 $x137)))
 (let (($x90 (and (not $x107) $x21)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x134 $x193)))
 (let (($x184 (not $x182)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x60 $x183)))
 (let (($x256 (and (not $x223) $x184)))
 (let (($x246 (and (and (and (and (and (and $x256 $x90) $x71) $x268) $x149) $x74) $x47)))
 (let (($x244 (and $x246 $x266)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x34 (or false (or false (and (and true (or $x44 $x210)) (or $x170 $x153))))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x34)))
 (let (($x253 (and $x188 $x244)))
 (let (($x42 (= $x253 true)))
 (let (($x273 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let ((?x35 (bvmul input.ind-%var1305X (_ bv4 32))))
 (let ((?x174 (bvadd ?x35 input.dst.llvm-%m1)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x174))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x174 (_ bv2 32))) ?x222)))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x174 (_ bv3 32))) ?x200)))
 (let ((?x80 (input.spec-%var-m1-1.1.1 input.ind-%var1305X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var1305X)))
 (=> $x248 (= ?x80 ?x129))))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var1304X) (bvult input.ind-%var1304X (_ bv100 32)))))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var1304X)))
 (= $x248 $x102))))
 ))
 (let (($x173 (and $x197 $x273)))
 (let (($x81 (= $x173 true)))
 (let (($x7 (and $x81 $x42)))
 (let (($x201 (and $x7 $x64)))
 (let (($x89 (and $x201 $x217)))
 (let (($x14 (and $x89 $x194)))
 (let (($x151 (forall ((input.ind-%var1325X (_ BitVec 32)) )(let ((?x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1325X)))
 (let ((?x80 (input.spec-%var-m1-1.1.1 input.ind-%var1325X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var1325X)))
 (=> $x248 (= ?x80 ?x76))))))
 ))
 (let (($x78 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let (($x161 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1324X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var1324X)))
 (= $x248 $x161))))
 ))
 (let (($x139 (and $x78 $x151)))
 (let (($x216 (and $x139 $x14)))
 (let (($x72 (forall ((input.ind-%var1335X (_ BitVec 32)) )(let ((?x167 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1335X)))
 (let ((?x105 (input.spec-%var-m2-1.1.1 input.ind-%var1335X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1335X)))
 (=> $x176 (= ?x105 ?x167))))))
 ))
 (let (($x232 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let (($x6 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1334X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1334X)))
 (= $x176 $x6))))
 ))
 (let (($x189 (and $x232 $x72)))
 (let (($x145 (and $x189 $x216)))
 (let (($x262 (=> $x145 $x135)))
 (not $x262)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x135 (= $x65 true)))
 (let ((?x54 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x116 (= (_ bv0 2) ?x54)))
 (let (($x194 (= $x116 true)))
 (let (($x126 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let ((?x35 (bvmul input.ind-%var1315X (_ bv4 32))))
 (let ((?x179 (bvadd ?x35 input.dst.llvm-%m2)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x179))))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv2 32))) ?x254)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv3 32))) ?x37)))
 (let ((?x105 (input.spec-%var-m2-1.1.1 input.ind-%var1315X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1315X)))
 (=> $x176 (= ?x105 ?x59))))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var1314X) (bvult input.ind-%var1314X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1314X)))
 (= $x176 $x102))))
 ))
 (let (($x36 (and $x62 $x126)))
 (let (($x217 (= $x36 true)))
 (let (($x67 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x186 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x73 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x130 (and $x73 $x186)))
 (let (($x150 (and $x130 $x67)))
 (let (($x64 (= $x150 true)))
 (let ((?x112 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x266 (= (_ bv0 32) ?x112)))
 (let ((?x84 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x47 (= (_ bv0 32) ?x84)))
 (let ((?x141 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x191 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x191)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x92 (and $x158 $x68)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x177 $x92)))
 (let (($x268 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x221 $x212)))
 (let (($x21 (not $x28)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x56 $x137)))
 (let (($x90 (and (not $x107) $x21)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x134 $x193)))
 (let (($x184 (not $x182)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x60 $x183)))
 (let (($x256 (and (not $x223) $x184)))
 (let (($x246 (and (and (and (and (and (and $x256 $x90) $x71) $x268) $x149) $x74) $x47)))
 (let (($x244 (and $x246 $x266)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x34 (or false (or false (and (and true (or $x44 $x210)) (or $x170 $x153))))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x34)))
 (let (($x253 (and $x188 $x244)))
 (let (($x42 (= $x253 true)))
 (let (($x273 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let ((?x35 (bvmul input.ind-%var1305X (_ bv4 32))))
 (let ((?x174 (bvadd ?x35 input.dst.llvm-%m1)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x174))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x174 (_ bv2 32))) ?x222)))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x174 (_ bv3 32))) ?x200)))
 (let ((?x80 (input.spec-%var-m1-1.1.1 input.ind-%var1305X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var1305X)))
 (=> $x248 (= ?x80 ?x129))))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var1304X) (bvult input.ind-%var1304X (_ bv100 32)))))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var1304X)))
 (= $x248 $x102))))
 ))
 (let (($x173 (and $x197 $x273)))
 (let (($x81 (= $x173 true)))
 (let (($x7 (and $x81 $x42)))
 (let (($x201 (and $x7 $x64)))
 (let (($x89 (and $x201 $x217)))
 (let (($x14 (and $x89 $x194)))
 (let (($x151 (forall ((input.ind-%var1325X (_ BitVec 32)) )(let ((?x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1325X)))
 (let ((?x80 (input.spec-%var-m1-1.1.1 input.ind-%var1325X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var1325X)))
 (=> $x248 (= ?x80 ?x76))))))
 ))
 (let (($x78 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let (($x161 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1324X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var1324X)))
 (= $x248 $x161))))
 ))
 (let (($x139 (and $x78 $x151)))
 (let (($x216 (and $x139 $x14)))
 (let (($x72 (forall ((input.ind-%var1335X (_ BitVec 32)) )(let ((?x167 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1335X)))
 (let ((?x105 (input.spec-%var-m2-1.1.1 input.ind-%var1335X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1335X)))
 (=> $x176 (= ?x105 ?x167))))))
 ))
 (let (($x232 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let (($x6 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1334X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1334X)))
 (= $x176 $x6))))
 ))
 (let (($x189 (and $x232 $x72)))
 (let (($x145 (and $x189 $x216)))
 (let (($x262 (=> $x145 $x135)))
 (not $x262)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x40000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x40000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x40000001 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x40000000 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1248c130)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xceb2806c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xceb2806f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1248c133)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xceb2806c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1248c130)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00400003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00400002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00400001 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00400000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x79 ((_ extract 21 0) input.dst.llvm-%m2)))
 (let (($x91 (= (_ bv0 22) ?x79)))
 (let (($x157 (= $x91 true)))
 (let ((?x20 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x206 (= (_ bv0 2) ?x20)))
 (let (($x82 (= $x206 true)))
 (let (($x100 (forall ((input.ind-%var1387X (_ BitVec 32)) )(let ((?x21 (bvmul input.ind-%var1387X (_ bv4 32))))
 (let ((?x205 (bvadd ?x21 input.dst.llvm-%m2)))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x205))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x278)))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x19)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var1387X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1387X)))
 (=> $x176 (= ?x138 ?x88))))))))))
 ))
 (let (($x17 (forall ((input.ind-%var1386X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var1386X) (bvult input.ind-%var1386X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1386X)))
 (= $x176 $x210))))
 ))
 (let (($x227 (and $x17 $x100)))
 (let (($x143 (= $x227 true)))
 (let (($x225 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x159 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x242 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x249 (and $x242 $x159)))
 (let (($x61 (and $x249 $x225)))
 (let (($x108 (= $x61 true)))
 (let ((?x187 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x85 (= (_ bv0 32) ?x187)))
 (let ((?x135 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x262 (= (_ bv0 32) ?x135)))
 (let ((?x145 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x116 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x116)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x54 $x194)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x185 $x14)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x131 $x254)))
 (let (($x59 (not $x37)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x87 $x99)))
 (let (($x96 (and (not $x133) $x59)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x113 $x62)))
 (let (($x243 (not $x179)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x46 $x84)))
 (let (($x269 (and (not $x201) $x243)))
 (let (($x132 (and (and (and (and (and (and $x269 $x96) $x36) $x89) $x216) $x65) $x262)))
 (let (($x22 (and $x132 $x85)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x244 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x244)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x244)))
 (let (($x67 (or false (or false (and (and true (or $x253 $x42)) (or $x211 $x186))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x226 (and $x64 $x22)))
 (let (($x218 (= $x226 true)))
 (let (($x149 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let ((?x21 (bvmul input.ind-%var1377X (_ bv4 32))))
 (let ((?x90 (bvadd ?x21 input.dst.llvm-%m1)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x90))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv2 32))) ?x215)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv3 32))) ?x272)))
 (let ((?x163 (input.spec-%var-m1-1.1.1 input.ind-%var1377X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1377X)))
 (=> $x180 (= ?x163 ?x191))))))))))
 ))
 (let (($x26 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var1376X) (bvult input.ind-%var1376X (_ bv100 32)))))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1376X)))
 (= $x180 $x210))))
 ))
 (let (($x165 (and $x26 $x149)))
 (let (($x141 (= $x165 true)))
 (let (($x245 (and $x141 $x218)))
 (let (($x231 (and $x245 $x108)))
 (let (($x263 (and $x231 $x143)))
 (let (($x247 (and $x263 $x82)))
 (let (($x258 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let ((?x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1397X)))
 (let ((?x163 (input.spec-%var-m1-1.1.1 input.ind-%var1397X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1397X)))
 (=> $x180 (= ?x163 ?x30))))))
 ))
 (let (($x255 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x152 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1396X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1396X)))
 (= $x180 $x152))))
 ))
 (let (($x136 (and $x255 $x258)))
 (let (($x267 (and $x136 $x247)))
 (let (($x11 (forall ((input.ind-%var1407X (_ BitVec 32)) )(let ((?x76 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1407X)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var1407X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1407X)))
 (=> $x176 (= ?x138 ?x76))))))
 ))
 (let (($x72 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x105 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1406X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1406X)))
 (= $x176 $x105))))
 ))
 (let (($x209 (and $x72 $x11)))
 (let (($x83 (and $x209 $x267)))
 (let (($x122 (=> $x83 $x157)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x79 ((_ extract 21 0) input.dst.llvm-%m2)))
 (let (($x91 (= (_ bv0 22) ?x79)))
 (let (($x157 (= $x91 true)))
 (let ((?x20 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x206 (= (_ bv0 2) ?x20)))
 (let (($x82 (= $x206 true)))
 (let (($x100 (forall ((input.ind-%var1387X (_ BitVec 32)) )(let ((?x21 (bvmul input.ind-%var1387X (_ bv4 32))))
 (let ((?x205 (bvadd ?x21 input.dst.llvm-%m2)))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x205))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x278)))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x19)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var1387X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1387X)))
 (=> $x176 (= ?x138 ?x88))))))))))
 ))
 (let (($x17 (forall ((input.ind-%var1386X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var1386X) (bvult input.ind-%var1386X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1386X)))
 (= $x176 $x210))))
 ))
 (let (($x227 (and $x17 $x100)))
 (let (($x143 (= $x227 true)))
 (let (($x225 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x159 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x242 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x249 (and $x242 $x159)))
 (let (($x61 (and $x249 $x225)))
 (let (($x108 (= $x61 true)))
 (let ((?x187 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x85 (= (_ bv0 32) ?x187)))
 (let ((?x135 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x262 (= (_ bv0 32) ?x135)))
 (let ((?x145 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x116 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x116)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x54 $x194)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x185 $x14)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x131 $x254)))
 (let (($x59 (not $x37)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x87 $x99)))
 (let (($x96 (and (not $x133) $x59)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x113 $x62)))
 (let (($x243 (not $x179)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x46 $x84)))
 (let (($x269 (and (not $x201) $x243)))
 (let (($x132 (and (and (and (and (and (and $x269 $x96) $x36) $x89) $x216) $x65) $x262)))
 (let (($x22 (and $x132 $x85)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x244 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x244)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x244)))
 (let (($x67 (or false (or false (and (and true (or $x253 $x42)) (or $x211 $x186))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x226 (and $x64 $x22)))
 (let (($x218 (= $x226 true)))
 (let (($x149 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let ((?x21 (bvmul input.ind-%var1377X (_ bv4 32))))
 (let ((?x90 (bvadd ?x21 input.dst.llvm-%m1)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x90))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv2 32))) ?x215)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv3 32))) ?x272)))
 (let ((?x163 (input.spec-%var-m1-1.1.1 input.ind-%var1377X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1377X)))
 (=> $x180 (= ?x163 ?x191))))))))))
 ))
 (let (($x26 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var1376X) (bvult input.ind-%var1376X (_ bv100 32)))))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1376X)))
 (= $x180 $x210))))
 ))
 (let (($x165 (and $x26 $x149)))
 (let (($x141 (= $x165 true)))
 (let (($x245 (and $x141 $x218)))
 (let (($x231 (and $x245 $x108)))
 (let (($x263 (and $x231 $x143)))
 (let (($x247 (and $x263 $x82)))
 (let (($x258 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let ((?x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1397X)))
 (let ((?x163 (input.spec-%var-m1-1.1.1 input.ind-%var1397X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1397X)))
 (=> $x180 (= ?x163 ?x30))))))
 ))
 (let (($x255 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x152 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1396X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1396X)))
 (= $x180 $x152))))
 ))
 (let (($x136 (and $x255 $x258)))
 (let (($x267 (and $x136 $x247)))
 (let (($x11 (forall ((input.ind-%var1407X (_ BitVec 32)) )(let ((?x76 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1407X)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var1407X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1407X)))
 (=> $x176 (= ?x138 ?x76))))))
 ))
 (let (($x72 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x105 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1406X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1406X)))
 (= $x176 $x105))))
 ))
 (let (($x209 (and $x72 $x11)))
 (let (($x83 (and $x209 $x267)))
 (let (($x122 (=> $x83 $x157)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x35b1c404)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb5081280)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb5081283)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x35b1c407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb5081280)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x35b1c404)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00010003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00010002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00010001 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00010000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0000000)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000007 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000006 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000005 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x63 (= false true)))
 (let ((?x252 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x228 (= (_ bv0 32) ?x252)))
 (let ((?x15 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x213 (= (_ bv0 32) ?x15)))
 (let ((?x154 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x23 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x198 (and $x115 $x18)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x121 $x198)))
 (let (($x229 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x97 $x212)))
 (let (($x28 (not $x170)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x221 $x173)))
 (let (($x33 (and (not $x196) $x28)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x256 $x192)))
 (let (($x183 (not $x134)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x274 $x35)))
 (let (($x56 (and (not $x184) $x183)))
 (let (($x189 (and (and (and (and (and (and $x56 $x33) $x5) $x229) $x125) $x123) $x213)))
 (let (($x25 (and $x189 $x228)))
 (let (($x273 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x171)))
 (let (($x60 (or false (or false (and (and true (or $x271 $x38)) (or $x69 $x273))))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x60)))
 (let (($x222 (and $x58 $x25)))
 (let (($x161 (= $x222 true)))
 (let ((?x275 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x74 (= (_ bv0 2) ?x275)))
 (let (($x232 (= $x74 true)))
 (let (($x79 (forall ((input.ind-%var1459X (_ BitVec 32)) )(let ((?x194 (bvmul input.ind-%var1459X (_ bv4 32))))
 (let ((?x224 (bvadd ?x194 input.dst.llvm-%m1)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x224))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x224 (_ bv2 32))) ?x263)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x224 (_ bv3 32))) ?x206)))
 (let ((?x40 (input.spec-%var-m1-1.1.1 input.ind-%var1459X)))
 (let (($x75 (input.spec-%var-m1-1.0.1 input.ind-%var1459X)))
 (=> $x75 (= ?x40 ?x267))))))))))
 ))
 (let (($x225 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1458X) (bvult input.ind-%var1458X (_ bv100 32)))))
 (let (($x75 (input.spec-%var-m1-1.0.1 input.ind-%var1458X)))
 (= $x75 $x84))))
 ))
 (let (($x91 (and $x225 $x79)))
 (let (($x157 (= $x91 true)))
 (let (($x218 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let ((?x194 (bvmul input.ind-%var1449X (_ bv4 32))))
 (let ((?x14 (bvadd ?x194 input.dst.llvm-%m2)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x14))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x14 (_ bv2 32))) ?x65)))
 (let ((?x85 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x14 (_ bv3 32))) ?x262)))
 (let ((?x174 (input.spec-%var-m2-1.1.1 input.ind-%var1449X)))
 (let (($x140 (input.spec-%var-m2-1.0.1 input.ind-%var1449X)))
 (=> $x140 (= ?x174 ?x85))))))))))
 ))
 (let (($x160 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1448X) (bvult input.ind-%var1448X (_ bv100 32)))))
 (let (($x140 (input.spec-%var-m2-1.0.1 input.ind-%var1448X)))
 (= $x140 $x84))))
 ))
 (let (($x245 (and $x160 $x218)))
 (let (($x259 (= $x245 true)))
 (let (($x42 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x112 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x47 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x244 (and $x47 $x112)))
 (let (($x7 (and $x244 $x42)))
 (let (($x142 (= $x7 true)))
 (let (($x29 (and $x142 $x259)))
 (let (($x122 (and $x29 $x157)))
 (let (($x78 (and $x122 $x232)))
 (let (($x53 (and $x78 $x161)))
 (let (($x68 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let ((?x93 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1469X)))
 (let ((?x40 (input.spec-%var-m1-1.1.1 input.ind-%var1469X)))
 (let (($x75 (input.spec-%var-m1-1.0.1 input.ind-%var1469X)))
 (=> $x75 (= ?x40 ?x93))))))
 ))
 (let (($x137 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1468X)))
 (let (($x75 (input.spec-%var-m1-1.0.1 input.ind-%var1468X)))
 (= $x75 $x120))))
 ))
 (let (($x92 (and $x137 $x68)))
 (let (($x95 (and $x92 $x53)))
 (let (($x101 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let ((?x30 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1479X)))
 (let ((?x174 (input.spec-%var-m2-1.1.1 input.ind-%var1479X)))
 (let (($x140 (input.spec-%var-m2-1.0.1 input.ind-%var1479X)))
 (=> $x140 (= ?x174 ?x30))))))
 ))
 (let (($x11 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x138 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1478X)))
 (let (($x140 (input.spec-%var-m2-1.0.1 input.ind-%var1478X)))
 (= $x140 $x138))))
 ))
 (let (($x234 (and $x11 $x101)))
 (let (($x80 (and $x234 $x95)))
 (let (($x155 (=> $x80 $x63)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x63 (= false true)))
 (let ((?x252 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x228 (= (_ bv0 32) ?x252)))
 (let ((?x15 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x213 (= (_ bv0 32) ?x15)))
 (let ((?x154 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x23 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x198 (and $x115 $x18)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x121 $x198)))
 (let (($x229 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x97 $x212)))
 (let (($x28 (not $x170)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x221 $x173)))
 (let (($x33 (and (not $x196) $x28)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x256 $x192)))
 (let (($x183 (not $x134)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x274 $x35)))
 (let (($x56 (and (not $x184) $x183)))
 (let (($x189 (and (and (and (and (and (and $x56 $x33) $x5) $x229) $x125) $x123) $x213)))
 (let (($x25 (and $x189 $x228)))
 (let (($x273 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x171)))
 (let (($x60 (or false (or false (and (and true (or $x271 $x38)) (or $x69 $x273))))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x60)))
 (let (($x222 (and $x58 $x25)))
 (let (($x161 (= $x222 true)))
 (let ((?x275 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x74 (= (_ bv0 2) ?x275)))
 (let (($x232 (= $x74 true)))
 (let (($x79 (forall ((input.ind-%var1459X (_ BitVec 32)) )(let ((?x194 (bvmul input.ind-%var1459X (_ bv4 32))))
 (let ((?x224 (bvadd ?x194 input.dst.llvm-%m1)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x224))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x224 (_ bv2 32))) ?x263)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x224 (_ bv3 32))) ?x206)))
 (let ((?x40 (input.spec-%var-m1-1.1.1 input.ind-%var1459X)))
 (let (($x75 (input.spec-%var-m1-1.0.1 input.ind-%var1459X)))
 (=> $x75 (= ?x40 ?x267))))))))))
 ))
 (let (($x225 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1458X) (bvult input.ind-%var1458X (_ bv100 32)))))
 (let (($x75 (input.spec-%var-m1-1.0.1 input.ind-%var1458X)))
 (= $x75 $x84))))
 ))
 (let (($x91 (and $x225 $x79)))
 (let (($x157 (= $x91 true)))
 (let (($x218 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let ((?x194 (bvmul input.ind-%var1449X (_ bv4 32))))
 (let ((?x14 (bvadd ?x194 input.dst.llvm-%m2)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x14))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x14 (_ bv2 32))) ?x65)))
 (let ((?x85 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x14 (_ bv3 32))) ?x262)))
 (let ((?x174 (input.spec-%var-m2-1.1.1 input.ind-%var1449X)))
 (let (($x140 (input.spec-%var-m2-1.0.1 input.ind-%var1449X)))
 (=> $x140 (= ?x174 ?x85))))))))))
 ))
 (let (($x160 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1448X) (bvult input.ind-%var1448X (_ bv100 32)))))
 (let (($x140 (input.spec-%var-m2-1.0.1 input.ind-%var1448X)))
 (= $x140 $x84))))
 ))
 (let (($x245 (and $x160 $x218)))
 (let (($x259 (= $x245 true)))
 (let (($x42 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x112 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x47 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x244 (and $x47 $x112)))
 (let (($x7 (and $x244 $x42)))
 (let (($x142 (= $x7 true)))
 (let (($x29 (and $x142 $x259)))
 (let (($x122 (and $x29 $x157)))
 (let (($x78 (and $x122 $x232)))
 (let (($x53 (and $x78 $x161)))
 (let (($x68 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let ((?x93 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1469X)))
 (let ((?x40 (input.spec-%var-m1-1.1.1 input.ind-%var1469X)))
 (let (($x75 (input.spec-%var-m1-1.0.1 input.ind-%var1469X)))
 (=> $x75 (= ?x40 ?x93))))))
 ))
 (let (($x137 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1468X)))
 (let (($x75 (input.spec-%var-m1-1.0.1 input.ind-%var1468X)))
 (= $x75 $x120))))
 ))
 (let (($x92 (and $x137 $x68)))
 (let (($x95 (and $x92 $x53)))
 (let (($x101 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let ((?x30 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1479X)))
 (let ((?x174 (input.spec-%var-m2-1.1.1 input.ind-%var1479X)))
 (let (($x140 (input.spec-%var-m2-1.0.1 input.ind-%var1479X)))
 (=> $x140 (= ?x174 ?x30))))))
 ))
 (let (($x11 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x138 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1478X)))
 (let (($x140 (input.spec-%var-m2-1.0.1 input.ind-%var1478X)))
 (= $x140 $x138))))
 ))
 (let (($x234 (and $x11 $x101)))
 (let (($x80 (and $x234 $x95)))
 (let (($x155 (=> $x80 $x63)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00040003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000008)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xa3487a58)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3eb0ac5c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3eb0ac5f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xa3487a5b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3eb0ac5c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xa3487a58)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x180 (= false true)))
 (let ((?x88 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x108 (= (_ bv0 32) ?x88)))
 (let ((?x249 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x207 (= (_ bv0 32) ?x249)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x66 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x178 $x205)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x190 $x41)))
 (let (($x128 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x242 (and $x116 $x231)))
 (let (($x203 (not $x242)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x67 $x54)))
 (let (($x236 (and (not $x62) $x203)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x131 $x96)))
 (let (($x185 (not $x181)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x76 $x200)))
 (let (($x169 (and (not $x59) $x185)))
 (let (($x152 (and (and (and (and (and (and $x169 $x236) $x208) $x128) $x9) $x119) $x207)))
 (let (($x176 (and $x152 $x108)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x223)))
 (let (($x126 (or false (or false (and (and true (or $x210 $x188)) (or $x50 $x133))))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x126)))
 (let (($x6 (and $x37 $x176)))
 (let (($x163 (= $x6 true)))
 (let ((?x254 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x24 (bvneg ?x254)))
 (let (($x26 (= ?x24 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x268 (= $x26 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x269 (= (_ bv0 2) ?x87)))
 (let (($x197 (= $x269 true)))
 (let (($x95 (forall ((input.ind-%var1531X (_ BitVec 32)) )(let ((?x12 (bvmul input.ind-%var1531X (_ bv4 32))))
 (let ((?x199 (bvadd ?x12 input.dst.llvm-%m1)))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x199))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x199 (_ bv2 32))) ?x15)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x199 (_ bv3 32))) ?x252)))
 (let ((?x84 (input.spec-%var-m1-1.1.1 input.ind-%var1531X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1531X)))
 (=> $x150 (= ?x84 ?x222))))))))))
 ))
 (let (($x168 (forall ((input.ind-%var1530X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var1530X) (bvult input.ind-%var1530X (_ bv100 32)))))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1530X)))
 (= $x150 $x224))))
 ))
 (let (($x80 (and $x168 $x95)))
 (let (($x63 (= $x80 true)))
 (let (($x35 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let ((?x12 (bvmul input.ind-%var1521X (_ bv4 32))))
 (let ((?x38 (bvadd ?x12 input.dst.llvm-%m2)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x38))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv2 32))) ?x69)))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv3 32))) ?x175)))
 (let ((?x90 (input.spec-%var-m2-1.1.1 input.ind-%var1521X)))
 (let (($x174 (input.spec-%var-m2-1.0.1 input.ind-%var1521X)))
 (=> $x174 (= ?x90 ?x60))))))))))
 ))
 (let (($x247 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var1520X) (bvult input.ind-%var1520X (_ bv100 32)))))
 (let (($x174 (input.spec-%var-m2-1.0.1 input.ind-%var1520X)))
 (= $x174 $x224))))
 ))
 (let (($x184 (and $x247 $x35)))
 (let (($x193 (= $x184 true)))
 (let (($x216 (= ?x24 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (= $x216 true)))
 (let (($x256 (and $x65 $x193)))
 (let (($x155 (and $x256 $x63)))
 (let (($x72 (and $x155 $x197)))
 (let (($x21 (and $x72 $x268)))
 (let (($x147 (and $x21 $x163)))
 (let (($x187 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1541X)))
 (let ((?x84 (input.spec-%var-m1-1.1.1 input.ind-%var1541X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1541X)))
 (=> $x150 (= ?x84 ?x243))))))
 ))
 (let (($x73 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1540X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1540X)))
 (= $x150 $x253))))
 ))
 (let (($x49 (and $x73 $x187)))
 (let (($x139 (and $x49 $x147)))
 (let (($x165 (forall ((input.ind-%var1551X (_ BitVec 32)) )(let ((?x93 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1551X)))
 (let ((?x90 (input.spec-%var-m2-1.1.1 input.ind-%var1551X)))
 (let (($x174 (input.spec-%var-m2-1.0.1 input.ind-%var1551X)))
 (=> $x174 (= ?x90 ?x93))))))
 ))
 (let (($x101 (forall ((input.ind-%var1550X (_ BitVec 32)) )(let (($x266 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1550X)))
 (let (($x174 (input.spec-%var-m2-1.0.1 input.ind-%var1550X)))
 (= $x174 $x266))))
 ))
 (let (($x141 (and $x101 $x165)))
 (let (($x129 (and $x141 $x139)))
 (let (($x258 (=> $x129 $x180)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x180 (= false true)))
 (let ((?x88 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x108 (= (_ bv0 32) ?x88)))
 (let ((?x249 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x207 (= (_ bv0 32) ?x249)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x66 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x178 $x205)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x190 $x41)))
 (let (($x128 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x242 (and $x116 $x231)))
 (let (($x203 (not $x242)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x67 $x54)))
 (let (($x236 (and (not $x62) $x203)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x131 $x96)))
 (let (($x185 (not $x181)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x76 $x200)))
 (let (($x169 (and (not $x59) $x185)))
 (let (($x152 (and (and (and (and (and (and $x169 $x236) $x208) $x128) $x9) $x119) $x207)))
 (let (($x176 (and $x152 $x108)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x223)))
 (let (($x126 (or false (or false (and (and true (or $x210 $x188)) (or $x50 $x133))))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x126)))
 (let (($x6 (and $x37 $x176)))
 (let (($x163 (= $x6 true)))
 (let ((?x254 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x24 (bvneg ?x254)))
 (let (($x26 (= ?x24 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x268 (= $x26 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x269 (= (_ bv0 2) ?x87)))
 (let (($x197 (= $x269 true)))
 (let (($x95 (forall ((input.ind-%var1531X (_ BitVec 32)) )(let ((?x12 (bvmul input.ind-%var1531X (_ bv4 32))))
 (let ((?x199 (bvadd ?x12 input.dst.llvm-%m1)))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x199))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x199 (_ bv2 32))) ?x15)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x199 (_ bv3 32))) ?x252)))
 (let ((?x84 (input.spec-%var-m1-1.1.1 input.ind-%var1531X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1531X)))
 (=> $x150 (= ?x84 ?x222))))))))))
 ))
 (let (($x168 (forall ((input.ind-%var1530X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var1530X) (bvult input.ind-%var1530X (_ bv100 32)))))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1530X)))
 (= $x150 $x224))))
 ))
 (let (($x80 (and $x168 $x95)))
 (let (($x63 (= $x80 true)))
 (let (($x35 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let ((?x12 (bvmul input.ind-%var1521X (_ bv4 32))))
 (let ((?x38 (bvadd ?x12 input.dst.llvm-%m2)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x38))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv2 32))) ?x69)))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv3 32))) ?x175)))
 (let ((?x90 (input.spec-%var-m2-1.1.1 input.ind-%var1521X)))
 (let (($x174 (input.spec-%var-m2-1.0.1 input.ind-%var1521X)))
 (=> $x174 (= ?x90 ?x60))))))))))
 ))
 (let (($x247 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var1520X) (bvult input.ind-%var1520X (_ bv100 32)))))
 (let (($x174 (input.spec-%var-m2-1.0.1 input.ind-%var1520X)))
 (= $x174 $x224))))
 ))
 (let (($x184 (and $x247 $x35)))
 (let (($x193 (= $x184 true)))
 (let (($x216 (= ?x24 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (= $x216 true)))
 (let (($x256 (and $x65 $x193)))
 (let (($x155 (and $x256 $x63)))
 (let (($x72 (and $x155 $x197)))
 (let (($x21 (and $x72 $x268)))
 (let (($x147 (and $x21 $x163)))
 (let (($x187 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1541X)))
 (let ((?x84 (input.spec-%var-m1-1.1.1 input.ind-%var1541X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1541X)))
 (=> $x150 (= ?x84 ?x243))))))
 ))
 (let (($x73 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1540X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1540X)))
 (= $x150 $x253))))
 ))
 (let (($x49 (and $x73 $x187)))
 (let (($x139 (and $x49 $x147)))
 (let (($x165 (forall ((input.ind-%var1551X (_ BitVec 32)) )(let ((?x93 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1551X)))
 (let ((?x90 (input.spec-%var-m2-1.1.1 input.ind-%var1551X)))
 (let (($x174 (input.spec-%var-m2-1.0.1 input.ind-%var1551X)))
 (=> $x174 (= ?x90 ?x93))))))
 ))
 (let (($x101 (forall ((input.ind-%var1550X (_ BitVec 32)) )(let (($x266 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1550X)))
 (let (($x174 (input.spec-%var-m2-1.0.1 input.ind-%var1550X)))
 (= $x174 $x266))))
 ))
 (let (($x141 (and $x101 $x165)))
 (let (($x129 (and $x141 $x139)))
 (let (($x258 (=> $x129 $x180)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x80000006 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x80000005 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x80000004 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x80000003 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf3fd57f8)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xf77fb5fc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03ff1bfc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03ff1bff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf3fd57fb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03ff1bfc)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf3fd57f8)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #xf77fb5ff (bvmul #x00000004 x!0)))
              (k!11 (bvadd #xf77fb5fe (bvmul #x00000004 x!0)))
              (k!11 (bvadd #xf77fb5fd (bvmul #x00000004 x!0)))
              (k!11 (bvadd #xf77fb5fc (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x51 (forall ((input.ind-%var1687X (_ BitVec 32)) )(let ((?x57 (spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1687X)))
 (let ((?x160 (bvmul input.ind-%var1687X (_ bv4 32))))
 (let ((?x220 (bvadd ?x160 input.dst.llvm-%m2)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x220))))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv2 32))) ?x245)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv3 32))) ?x167)))
 (let (($x108 (and (bvule (_ bv0 32) input.ind-%var1687X) (bvult input.ind-%var1687X (_ bv100 32)))))
 (=> $x108 (= ?x232 ?x57))))))))))
 ))
 (let (($x144 (forall ((input.ind-%var1686X (_ BitVec 32)) )(let (($x166 (spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1686X)))
 (let (($x108 (and (bvule (_ bv0 32) input.ind-%var1686X) (bvult input.ind-%var1686X (_ bv100 32)))))
 (= $x108 $x166))))
 ))
 (let (($x257 (and $x144 $x51)))
 (let (($x279 (= $x257 true)))
 (let ((?x61 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x248 (= (_ bv0 2) ?x61)))
 (let (($x151 (= $x248 true)))
 (let (($x140 (forall ((input.ind-%var1655X (_ BitVec 32)) )(let ((?x160 (bvmul input.ind-%var1655X (_ bv4 32))))
 (let ((?x198 (bvadd ?x160 input.dst.llvm-%m1)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x198))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv2 32))) ?x125)))
 (let ((?x138 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv3 32))) ?x130)))
 (let ((?x12 (input.spec-%var-m1-1.1.1 input.ind-%var1655X)))
 (let (($x216 (input.spec-%var-m1-1.0.1 input.ind-%var1655X)))
 (=> $x216 (= ?x12 ?x138))))))))))
 ))
 (let (($x192 (forall ((input.ind-%var1654X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var1654X) (bvult input.ind-%var1654X (_ bv100 32)))))
 (let (($x216 (input.spec-%var-m1-1.0.1 input.ind-%var1654X)))
 (= $x216 $x108))))
 ))
 (let (($x136 (and $x192 $x140)))
 (let (($x191 (= $x136 true)))
 (let (($x79 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let ((?x160 (bvmul input.ind-%var1645X (_ bv4 32))))
 (let ((?x220 (bvadd ?x160 input.dst.llvm-%m2)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x220))))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv2 32))) ?x245)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv3 32))) ?x167)))
 (let ((?x90 (input.spec-%var-m2-1.1.1 input.ind-%var1645X)))
 (let (($x92 (input.spec-%var-m2-1.0.1 input.ind-%var1645X)))
 (=> $x92 (= ?x90 ?x232))))))))))
 ))
 (let (($x6 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var1644X) (bvult input.ind-%var1644X (_ bv100 32)))))
 (let (($x92 (input.spec-%var-m2-1.0.1 input.ind-%var1644X)))
 (= $x92 $x108))))
 ))
 (let (($x214 (and $x6 $x79)))
 (let (($x78 (= $x214 true)))
 (let (($x178 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x128 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x66 (and $x128 $x178)))
 (let (($x205 (= $x66 true)))
 (let ((?x169 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x67 (= (_ bv0 32) ?x169)))
 (let ((?x181 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x185 (= (_ bv0 32) ?x181)))
 (let ((?x131 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x131)))
 (let ((?x76 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x76)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x126 $x200)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x219 $x59)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (and $x153 $x188)))
 (let (($x179 (not $x113)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x44 $x223)))
 (let (($x50 (and (not $x210) $x179)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x26 $x268)))
 (let (($x177 (not $x21)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x228 $x25)))
 (let (($x36 (and (not $x255) $x177)))
 (let (($x242 (and (and (and (and (and (and $x36 $x50) $x133) $x89) $x211) $x96) $x185)))
 (let (($x203 (and $x242 $x67)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x269 (or false (or false (and (and true (or $x15 $x252)) (or $x80 $x63))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x269)))
 (let (($x236 (and $x72 $x203)))
 (let (($x276 (= $x236 true)))
 (let ((?x69 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x175 (bvneg ?x69)))
 (let (($x184 (= ?x175 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x193 (= $x184 true)))
 (let (($x58 (= ?x175 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x274 (= $x58 true)))
 (let (($x256 (and $x274 $x193)))
 (let (($x17 (and $x256 $x276)))
 (let (($x41 (and $x17 $x205)))
 (let (($x8 (and $x41 $x78)))
 (let (($x75 (and $x8 $x191)))
 (let (($x43 (and $x75 $x151)))
 (let (($x91 (forall ((input.ind-%var1665X (_ BitVec 32)) )(let ((?x111 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1665X)))
 (let ((?x12 (input.spec-%var-m1-1.1.1 input.ind-%var1665X)))
 (let (($x216 (input.spec-%var-m1-1.0.1 input.ind-%var1665X)))
 (=> $x216 (= ?x12 ?x111))))))
 ))
 (let (($x82 (forall ((input.ind-%var1664X (_ BitVec 32)) )(let (($x225 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1664X)))
 (let (($x216 (input.spec-%var-m1-1.0.1 input.ind-%var1664X)))
 (= $x216 $x225))))
 ))
 (let (($x102 (and $x82 $x91)))
 (let (($x204 (and $x102 $x43)))
 (let (($x135 (forall ((input.ind-%var1675X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1675X)))
 (let ((?x90 (input.spec-%var-m2-1.1.1 input.ind-%var1675X)))
 (let (($x92 (input.spec-%var-m2-1.0.1 input.ind-%var1675X)))
 (=> $x92 (= ?x90 ?x243))))))
 ))
 (let (($x93 (forall ((input.ind-%var1674X (_ BitVec 32)) )(let (($x174 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1674X)))
 (let (($x92 (input.spec-%var-m2-1.0.1 input.ind-%var1674X)))
 (= $x92 $x174))))
 ))
 (let (($x254 (and $x93 $x135)))
 (let (($x31 (and $x254 $x204)))
 (let (($x280 (=> $x31 $x279)))
 (not $x280)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x51 (forall ((input.ind-%var1687X (_ BitVec 32)) )(let ((?x57 (spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1687X)))
 (let ((?x160 (bvmul input.ind-%var1687X (_ bv4 32))))
 (let ((?x220 (bvadd ?x160 input.dst.llvm-%m2)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x220))))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv2 32))) ?x245)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv3 32))) ?x167)))
 (let (($x108 (and (bvule (_ bv0 32) input.ind-%var1687X) (bvult input.ind-%var1687X (_ bv100 32)))))
 (=> $x108 (= ?x232 ?x57))))))))))
 ))
 (let (($x144 (forall ((input.ind-%var1686X (_ BitVec 32)) )(let (($x166 (spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1686X)))
 (let (($x108 (and (bvule (_ bv0 32) input.ind-%var1686X) (bvult input.ind-%var1686X (_ bv100 32)))))
 (= $x108 $x166))))
 ))
 (let (($x257 (and $x144 $x51)))
 (let (($x279 (= $x257 true)))
 (let ((?x61 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x248 (= (_ bv0 2) ?x61)))
 (let (($x151 (= $x248 true)))
 (let (($x140 (forall ((input.ind-%var1655X (_ BitVec 32)) )(let ((?x160 (bvmul input.ind-%var1655X (_ bv4 32))))
 (let ((?x198 (bvadd ?x160 input.dst.llvm-%m1)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x198))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv2 32))) ?x125)))
 (let ((?x138 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv3 32))) ?x130)))
 (let ((?x12 (input.spec-%var-m1-1.1.1 input.ind-%var1655X)))
 (let (($x216 (input.spec-%var-m1-1.0.1 input.ind-%var1655X)))
 (=> $x216 (= ?x12 ?x138))))))))))
 ))
 (let (($x192 (forall ((input.ind-%var1654X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var1654X) (bvult input.ind-%var1654X (_ bv100 32)))))
 (let (($x216 (input.spec-%var-m1-1.0.1 input.ind-%var1654X)))
 (= $x216 $x108))))
 ))
 (let (($x136 (and $x192 $x140)))
 (let (($x191 (= $x136 true)))
 (let (($x79 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let ((?x160 (bvmul input.ind-%var1645X (_ bv4 32))))
 (let ((?x220 (bvadd ?x160 input.dst.llvm-%m2)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x220))))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv2 32))) ?x245)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv3 32))) ?x167)))
 (let ((?x90 (input.spec-%var-m2-1.1.1 input.ind-%var1645X)))
 (let (($x92 (input.spec-%var-m2-1.0.1 input.ind-%var1645X)))
 (=> $x92 (= ?x90 ?x232))))))))))
 ))
 (let (($x6 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var1644X) (bvult input.ind-%var1644X (_ bv100 32)))))
 (let (($x92 (input.spec-%var-m2-1.0.1 input.ind-%var1644X)))
 (= $x92 $x108))))
 ))
 (let (($x214 (and $x6 $x79)))
 (let (($x78 (= $x214 true)))
 (let (($x178 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x128 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x66 (and $x128 $x178)))
 (let (($x205 (= $x66 true)))
 (let ((?x169 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x67 (= (_ bv0 32) ?x169)))
 (let ((?x181 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x185 (= (_ bv0 32) ?x181)))
 (let ((?x131 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x131)))
 (let ((?x76 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x76)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x126 $x200)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x219 $x59)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (and $x153 $x188)))
 (let (($x179 (not $x113)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x44 $x223)))
 (let (($x50 (and (not $x210) $x179)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x26 $x268)))
 (let (($x177 (not $x21)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x228 $x25)))
 (let (($x36 (and (not $x255) $x177)))
 (let (($x242 (and (and (and (and (and (and $x36 $x50) $x133) $x89) $x211) $x96) $x185)))
 (let (($x203 (and $x242 $x67)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x269 (or false (or false (and (and true (or $x15 $x252)) (or $x80 $x63))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x269)))
 (let (($x236 (and $x72 $x203)))
 (let (($x276 (= $x236 true)))
 (let ((?x69 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x175 (bvneg ?x69)))
 (let (($x184 (= ?x175 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x193 (= $x184 true)))
 (let (($x58 (= ?x175 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x274 (= $x58 true)))
 (let (($x256 (and $x274 $x193)))
 (let (($x17 (and $x256 $x276)))
 (let (($x41 (and $x17 $x205)))
 (let (($x8 (and $x41 $x78)))
 (let (($x75 (and $x8 $x191)))
 (let (($x43 (and $x75 $x151)))
 (let (($x91 (forall ((input.ind-%var1665X (_ BitVec 32)) )(let ((?x111 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1665X)))
 (let ((?x12 (input.spec-%var-m1-1.1.1 input.ind-%var1665X)))
 (let (($x216 (input.spec-%var-m1-1.0.1 input.ind-%var1665X)))
 (=> $x216 (= ?x12 ?x111))))))
 ))
 (let (($x82 (forall ((input.ind-%var1664X (_ BitVec 32)) )(let (($x225 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1664X)))
 (let (($x216 (input.spec-%var-m1-1.0.1 input.ind-%var1664X)))
 (= $x216 $x225))))
 ))
 (let (($x102 (and $x82 $x91)))
 (let (($x204 (and $x102 $x43)))
 (let (($x135 (forall ((input.ind-%var1675X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1675X)))
 (let ((?x90 (input.spec-%var-m2-1.1.1 input.ind-%var1675X)))
 (let (($x92 (input.spec-%var-m2-1.0.1 input.ind-%var1675X)))
 (=> $x92 (= ?x90 ?x243))))))
 ))
 (let (($x93 (forall ((input.ind-%var1674X (_ BitVec 32)) )(let (($x174 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1674X)))
 (let (($x92 (input.spec-%var-m2-1.0.1 input.ind-%var1674X)))
 (= $x92 $x174))))
 ))
 (let (($x254 (and $x93 $x135)))
 (let (($x31 (and $x254 $x204)))
 (let (($x280 (=> $x31 $x279)))
 (not $x280)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08450120)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xaa2440a4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var1686X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80282060)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80282063)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xaa2440a7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80282060)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xaa2440a4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!2 (bvadd #x08450123 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x08450122 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x08450121 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x08450120 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!2 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
  (define-fun spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00440208)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0fc01584)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.ind-%var1686X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6f980b60)
  (define-fun input.ind-%var1687X!1 () (_ BitVec 32)
    #x2fa4215c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6f980b63)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0fc01587)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6f980b60)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0fc01584)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x2fa4215c x!0) #x2fa4215c #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x2fa4215c x!0) #x2fa4215c #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x2fa4215c) false
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x0044020b (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x0044020a (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00440209 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00440208 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x2fa4215c) false
      (input.spec-%var-m1-1.0.1 x!0))))
  (define-fun spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x34 (= false true)))
 (let ((?x235 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x77 (= (_ bv0 32) ?x235)))
 (let ((?x121 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x18 (= (_ bv0 32) ?x121)))
 (let ((?x109 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x109)))
 (let ((?x28 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x28)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x29 (and $x244 $x85)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x147 $x29)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x137 $x71)))
 (let (($x11 (not $x112)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x42 $x99)))
 (let (($x158 (and (not $x105) $x11)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x19 $x215)))
 (let (($x100 (not $x172)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x196 $x199)))
 (let (($x46 (and (not $x9) $x100)))
 (let (($x134 (and (and (and (and (and (and $x46 $x158) $x207) $x183) $x171) $x115) $x18)))
 (let (($x259 (and $x134 $x77)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x32 (or false (or false (and (and true (or $x118 $x73)) (or $x206 $x24))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x32)))
 (let (($x20 (and $x139 $x259)))
 (let (($x271 (= $x20 true)))
 (let (($x51 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x106 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x257 (and $x106 $x51)))
 (let (($x279 (= $x257 true)))
 (let ((?x87 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x269 (bvneg ?x87)))
 (let (($x31 (= ?x269 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x166 (= $x31 true)))
 (let ((?x61 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x248 (= (_ bv0 2) ?x61)))
 (let (($x151 (= $x248 true)))
 (let (($x140 (forall ((input.ind-%var1763X (_ BitVec 32)) )(let ((?x67 (bvmul input.ind-%var1763X (_ bv4 32))))
 (let ((?x198 (bvadd ?x67 input.dst.llvm-%m1)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x198))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv2 32))) ?x234)))
 (let ((?x138 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv3 32))) ?x246)))
 (let ((?x123 (input.spec-%var-m1-1.1.1 input.ind-%var1763X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var1763X)))
 (=> $x58 (= ?x123 ?x138))))))))))
 ))
 (let (($x107 (forall ((input.ind-%var1762X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1762X) (bvult input.ind-%var1762X (_ bv100 32)))))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var1762X)))
 (= $x58 $x16))))
 ))
 (let (($x136 (and $x107 $x140)))
 (let (($x191 (= $x136 true)))
 (let (($x41 (forall ((input.ind-%var1753X (_ BitVec 32)) )(let ((?x67 (bvmul input.ind-%var1753X (_ bv4 32))))
 (let ((?x203 (bvadd ?x67 input.dst.llvm-%m2)))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x203))))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv2 32))) ?x208)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv3 32))) ?x128)))
 (let ((?x224 (input.spec-%var-m2-1.1.1 input.ind-%var1753X)))
 (let (($x180 (input.spec-%var-m2-1.0.1 input.ind-%var1753X)))
 (=> $x180 (= ?x224 ?x178))))))))))
 ))
 (let (($x188 (forall ((input.ind-%var1752X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1752X) (bvult input.ind-%var1752X (_ bv100 32)))))
 (let (($x180 (input.spec-%var-m2-1.0.1 input.ind-%var1752X)))
 (= $x180 $x16))))
 ))
 (let (($x88 (and $x188 $x41)))
 (let (($x119 (= $x88 true)))
 (let (($x228 (= ?x269 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x25 (= $x228 true)))
 (let (($x152 (and $x25 $x119)))
 (let (($x75 (and $x152 $x191)))
 (let (($x43 (and $x75 $x151)))
 (let (($x260 (and $x43 $x166)))
 (let (($x280 (and $x260 $x279)))
 (let (($x221 (and $x280 $x271)))
 (let (($x95 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let ((?x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1773X)))
 (let ((?x123 (input.spec-%var-m1-1.1.1 input.ind-%var1773X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var1773X)))
 (=> $x58 (= ?x123 ?x230))))))
 ))
 (let (($x33 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let (($x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1772X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var1772X)))
 (= $x58 $x184))))
 ))
 (let (($x63 (and $x33 $x95)))
 (let (($x56 (and $x63 $x221)))
 (let (($x52 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let ((?x111 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1783X)))
 (let ((?x224 (input.spec-%var-m2-1.1.1 input.ind-%var1783X)))
 (let (($x180 (input.spec-%var-m2-1.0.1 input.ind-%var1783X)))
 (=> $x180 (= ?x224 ?x111))))))
 ))
 (let (($x135 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1782X)))
 (let (($x180 (input.spec-%var-m2-1.0.1 input.ind-%var1782X)))
 (= $x180 $x90))))
 ))
 (let (($x69 (and $x135 $x52)))
 (let (($x173 (and $x69 $x56)))
 (let (($x266 (=> $x173 $x34)))
 (not $x266))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x34 (= false true)))
 (let ((?x235 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x77 (= (_ bv0 32) ?x235)))
 (let ((?x121 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x18 (= (_ bv0 32) ?x121)))
 (let ((?x109 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x109)))
 (let ((?x28 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x28)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x29 (and $x244 $x85)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x147 $x29)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x137 $x71)))
 (let (($x11 (not $x112)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x42 $x99)))
 (let (($x158 (and (not $x105) $x11)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x19 $x215)))
 (let (($x100 (not $x172)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x196 $x199)))
 (let (($x46 (and (not $x9) $x100)))
 (let (($x134 (and (and (and (and (and (and $x46 $x158) $x207) $x183) $x171) $x115) $x18)))
 (let (($x259 (and $x134 $x77)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x32 (or false (or false (and (and true (or $x118 $x73)) (or $x206 $x24))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x32)))
 (let (($x20 (and $x139 $x259)))
 (let (($x271 (= $x20 true)))
 (let (($x51 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x106 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x257 (and $x106 $x51)))
 (let (($x279 (= $x257 true)))
 (let ((?x87 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x269 (bvneg ?x87)))
 (let (($x31 (= ?x269 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x166 (= $x31 true)))
 (let ((?x61 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x248 (= (_ bv0 2) ?x61)))
 (let (($x151 (= $x248 true)))
 (let (($x140 (forall ((input.ind-%var1763X (_ BitVec 32)) )(let ((?x67 (bvmul input.ind-%var1763X (_ bv4 32))))
 (let ((?x198 (bvadd ?x67 input.dst.llvm-%m1)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x198))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv2 32))) ?x234)))
 (let ((?x138 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x198 (_ bv3 32))) ?x246)))
 (let ((?x123 (input.spec-%var-m1-1.1.1 input.ind-%var1763X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var1763X)))
 (=> $x58 (= ?x123 ?x138))))))))))
 ))
 (let (($x107 (forall ((input.ind-%var1762X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1762X) (bvult input.ind-%var1762X (_ bv100 32)))))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var1762X)))
 (= $x58 $x16))))
 ))
 (let (($x136 (and $x107 $x140)))
 (let (($x191 (= $x136 true)))
 (let (($x41 (forall ((input.ind-%var1753X (_ BitVec 32)) )(let ((?x67 (bvmul input.ind-%var1753X (_ bv4 32))))
 (let ((?x203 (bvadd ?x67 input.dst.llvm-%m2)))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x203))))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv2 32))) ?x208)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv3 32))) ?x128)))
 (let ((?x224 (input.spec-%var-m2-1.1.1 input.ind-%var1753X)))
 (let (($x180 (input.spec-%var-m2-1.0.1 input.ind-%var1753X)))
 (=> $x180 (= ?x224 ?x178))))))))))
 ))
 (let (($x188 (forall ((input.ind-%var1752X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1752X) (bvult input.ind-%var1752X (_ bv100 32)))))
 (let (($x180 (input.spec-%var-m2-1.0.1 input.ind-%var1752X)))
 (= $x180 $x16))))
 ))
 (let (($x88 (and $x188 $x41)))
 (let (($x119 (= $x88 true)))
 (let (($x228 (= ?x269 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x25 (= $x228 true)))
 (let (($x152 (and $x25 $x119)))
 (let (($x75 (and $x152 $x191)))
 (let (($x43 (and $x75 $x151)))
 (let (($x260 (and $x43 $x166)))
 (let (($x280 (and $x260 $x279)))
 (let (($x221 (and $x280 $x271)))
 (let (($x95 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let ((?x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1773X)))
 (let ((?x123 (input.spec-%var-m1-1.1.1 input.ind-%var1773X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var1773X)))
 (=> $x58 (= ?x123 ?x230))))))
 ))
 (let (($x33 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let (($x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1772X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var1772X)))
 (= $x58 $x184))))
 ))
 (let (($x63 (and $x33 $x95)))
 (let (($x56 (and $x63 $x221)))
 (let (($x52 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let ((?x111 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1783X)))
 (let ((?x224 (input.spec-%var-m2-1.1.1 input.ind-%var1783X)))
 (let (($x180 (input.spec-%var-m2-1.0.1 input.ind-%var1783X)))
 (=> $x180 (= ?x224 ?x111))))))
 ))
 (let (($x135 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1782X)))
 (let (($x180 (input.spec-%var-m2-1.0.1 input.ind-%var1782X)))
 (= $x180 $x90))))
 ))
 (let (($x69 (and $x135 $x52)))
 (let (($x173 (and $x69 $x56)))
 (let (($x266 (=> $x173 $x34)))
 (not $x266))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x88000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x88000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x88000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x530aeb38)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x219c3f94)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x219c3f97)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x530aeb3b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x219c3f94)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x530aeb38)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x201 (= false true)))
 (let ((?x214 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x78 (= (_ bv0 32) ?x214)))
 (let ((?x127 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x226 (= (_ bv0 32) ?x127)))
 (let ((?x6 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x179 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x267 (and $x242 $x169)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x44 $x267)))
 (let (($x36 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x211 $x116)))
 (let (($x76 (not $x37)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x159 $x231)))
 (let (($x200 (and (not $x181) $x76)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x113 $x50)))
 (let (($x268 (not $x255)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x56 $x173)))
 (let (($x240 (and (not $x256) $x268)))
 (let (($x232 (and (and (and (and (and (and $x240 $x200) $x185) $x36) $x108) $x129) $x226)))
 (let (($x79 (and $x232 $x78)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x281 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x281)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x281)))
 (let (($x35 (or false (or false (and (and true (or $x93 $x82)) (or $x243 $x104))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x35)))
 (let (($x8 (and $x60 $x79)))
 (let (($x176 (= $x8 true)))
 (let ((?x115 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x70 (bvneg ?x115)))
 (let (($x259 (= ?x70 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x20 (= $x259 true)))
 (let (($x18 (= ?x70 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x134 (= $x18 true)))
 (let (($x28 (forall ((input.ind-%var1851X (_ BitVec 32)) )(let ((?x166 (bvmul input.ind-%var1851X (_ bv4 32))))
 (let ((?x71 (bvadd ?x166 input.dst.llvm-%m2)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x71 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x71))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x71 (_ bv2 32))) ?x229)))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x71 (_ bv3 32))) ?x94)))
 (let ((?x168 (input.spec-%var-m2-1.1.1 input.ind-%var1851X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1851X)))
 (=> $x133 (= ?x168 ?x23))))))))))
 ))
 (let (($x22 (forall ((input.ind-%var1850X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var1850X) (bvult input.ind-%var1850X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1850X)))
 (= $x133 $x152))))
 ))
 (let (($x85 (and $x22 $x28)))
 (let (($x29 (= $x85 true)))
 (let (($x218 (forall ((input.ind-%var1841X (_ BitVec 32)) )(let ((?x166 (bvmul input.ind-%var1841X (_ bv4 32))))
 (let ((?x260 (bvadd ?x166 input.dst.llvm-%m1)))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x260))))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x260 (_ bv2 32))) ?x202)))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x260 (_ bv3 32))) ?x279)))
 (let ((?x67 (input.spec-%var-m1-1.1.1 input.ind-%var1841X)))
 (let (($x228 (input.spec-%var-m1-1.0.1 input.ind-%var1841X)))
 (=> $x228 (= ?x67 ?x141))))))))))
 ))
 (let (($x107 (forall ((input.ind-%var1840X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var1840X) (bvult input.ind-%var1840X (_ bv100 32)))))
 (let (($x228 (input.spec-%var-m1-1.0.1 input.ind-%var1840X)))
 (= $x228 $x152))))
 ))
 (let (($x118 (and $x107 $x218)))
 (let (($x83 (= $x118 true)))
 (let (($x171 (and $x83 $x29)))
 (let (($x235 (and $x171 $x134)))
 (let (($x271 (and $x235 $x20)))
 (let (($x258 (and $x271 $x176)))
 (let (($x126 (forall ((input.ind-%var1861X (_ BitVec 32)) )(let ((?x96 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1861X)))
 (let ((?x67 (input.spec-%var-m1-1.1.1 input.ind-%var1861X)))
 (let (($x228 (input.spec-%var-m1-1.0.1 input.ind-%var1861X)))
 (=> $x228 (= ?x67 ?x96))))))
 ))
 (let (($x153 (forall ((input.ind-%var1860X (_ BitVec 32)) )(let (($x210 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1860X)))
 (let (($x228 (input.spec-%var-m1-1.0.1 input.ind-%var1860X)))
 (= $x228 $x210))))
 ))
 (let (($x276 (and $x153 $x126)))
 (let (($x160 (and $x276 $x258)))
 (let (($x164 (forall ((input.ind-%var1871X (_ BitVec 32)) )(let ((?x230 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1871X)))
 (let ((?x168 (input.spec-%var-m2-1.1.1 input.ind-%var1871X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1871X)))
 (=> $x133 (= ?x168 ?x230))))))
 ))
 (let (($x52 (forall ((input.ind-%var1870X (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1870X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1870X)))
 (= $x133 $x224))))
 ))
 (let (($x87 (and $x52 $x164)))
 (let (($x170 (and $x87 $x160)))
 (let (($x192 (=> $x170 $x201)))
 (not $x192)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x201 (= false true)))
 (let ((?x214 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x78 (= (_ bv0 32) ?x214)))
 (let ((?x127 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x226 (= (_ bv0 32) ?x127)))
 (let ((?x6 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x179 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x267 (and $x242 $x169)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x44 $x267)))
 (let (($x36 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x211 $x116)))
 (let (($x76 (not $x37)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x159 $x231)))
 (let (($x200 (and (not $x181) $x76)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x113 $x50)))
 (let (($x268 (not $x255)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x56 $x173)))
 (let (($x240 (and (not $x256) $x268)))
 (let (($x232 (and (and (and (and (and (and $x240 $x200) $x185) $x36) $x108) $x129) $x226)))
 (let (($x79 (and $x232 $x78)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x281 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x281)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x281)))
 (let (($x35 (or false (or false (and (and true (or $x93 $x82)) (or $x243 $x104))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x35)))
 (let (($x8 (and $x60 $x79)))
 (let (($x176 (= $x8 true)))
 (let ((?x115 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x70 (bvneg ?x115)))
 (let (($x259 (= ?x70 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x20 (= $x259 true)))
 (let (($x18 (= ?x70 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x134 (= $x18 true)))
 (let (($x28 (forall ((input.ind-%var1851X (_ BitVec 32)) )(let ((?x166 (bvmul input.ind-%var1851X (_ bv4 32))))
 (let ((?x71 (bvadd ?x166 input.dst.llvm-%m2)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x71 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x71))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x71 (_ bv2 32))) ?x229)))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x71 (_ bv3 32))) ?x94)))
 (let ((?x168 (input.spec-%var-m2-1.1.1 input.ind-%var1851X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1851X)))
 (=> $x133 (= ?x168 ?x23))))))))))
 ))
 (let (($x22 (forall ((input.ind-%var1850X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var1850X) (bvult input.ind-%var1850X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1850X)))
 (= $x133 $x152))))
 ))
 (let (($x85 (and $x22 $x28)))
 (let (($x29 (= $x85 true)))
 (let (($x218 (forall ((input.ind-%var1841X (_ BitVec 32)) )(let ((?x166 (bvmul input.ind-%var1841X (_ bv4 32))))
 (let ((?x260 (bvadd ?x166 input.dst.llvm-%m1)))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x260))))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x260 (_ bv2 32))) ?x202)))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x260 (_ bv3 32))) ?x279)))
 (let ((?x67 (input.spec-%var-m1-1.1.1 input.ind-%var1841X)))
 (let (($x228 (input.spec-%var-m1-1.0.1 input.ind-%var1841X)))
 (=> $x228 (= ?x67 ?x141))))))))))
 ))
 (let (($x107 (forall ((input.ind-%var1840X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var1840X) (bvult input.ind-%var1840X (_ bv100 32)))))
 (let (($x228 (input.spec-%var-m1-1.0.1 input.ind-%var1840X)))
 (= $x228 $x152))))
 ))
 (let (($x118 (and $x107 $x218)))
 (let (($x83 (= $x118 true)))
 (let (($x171 (and $x83 $x29)))
 (let (($x235 (and $x171 $x134)))
 (let (($x271 (and $x235 $x20)))
 (let (($x258 (and $x271 $x176)))
 (let (($x126 (forall ((input.ind-%var1861X (_ BitVec 32)) )(let ((?x96 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1861X)))
 (let ((?x67 (input.spec-%var-m1-1.1.1 input.ind-%var1861X)))
 (let (($x228 (input.spec-%var-m1-1.0.1 input.ind-%var1861X)))
 (=> $x228 (= ?x67 ?x96))))))
 ))
 (let (($x153 (forall ((input.ind-%var1860X (_ BitVec 32)) )(let (($x210 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1860X)))
 (let (($x228 (input.spec-%var-m1-1.0.1 input.ind-%var1860X)))
 (= $x228 $x210))))
 ))
 (let (($x276 (and $x153 $x126)))
 (let (($x160 (and $x276 $x258)))
 (let (($x164 (forall ((input.ind-%var1871X (_ BitVec 32)) )(let ((?x230 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1871X)))
 (let ((?x168 (input.spec-%var-m2-1.1.1 input.ind-%var1871X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1871X)))
 (=> $x133 (= ?x168 ?x230))))))
 ))
 (let (($x52 (forall ((input.ind-%var1870X (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1870X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1870X)))
 (= $x133 $x224))))
 ))
 (let (($x87 (and $x52 $x164)))
 (let (($x170 (and $x87 $x160)))
 (let (($x192 (=> $x170 $x201)))
 (not $x192)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x60090007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x60090007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60090004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x60090007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60090004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x6009000a (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x60090009 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x60090008 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x60090007 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x6009000a (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x60090009 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x60090008 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x60090007 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x9ff09bd9)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe186411c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfdedb5da)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x726a2468)
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x726a246b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe186411f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x726a2468)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe186411c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #xfdedb5dd (bvmul #x00000004 x!0)))
              (k!11 (bvadd #xfdedb5dc (bvmul #x00000004 x!0)))
              (k!11 (bvadd #xfdedb5db (bvmul #x00000004 x!0)))
              (k!11 (bvadd #xfdedb5da (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x9ff09bdc (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x9ff09bdb (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x9ff09bda (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x9ff09bd9 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x150 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x216 (=> $x150 true)))
 (let (($x91 (= $x216 true)))
 (let (($x12 (= $x150 true)))
 (let ((?x180 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x174 (= (_ bv0 32) ?x180)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x184 (= (_ bv0 32) ?x59)))
 (let ((?x69 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x64 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (and $x247 $x145)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x206 $x137)))
 (let (($x217 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x99 $x172)))
 (let (($x272 (not $x100)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x139 $x199)))
 (let (($x9 (and (not $x42) $x272)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x198 $x31)))
 (let (($x73 (not $x32)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x223 $x262)))
 (let (($x270 (and (not $x204) $x73)))
 (let (($x95 (and (and (and (and (and (and $x270 $x9) $x46) $x217) $x190) $x54) $x184)))
 (let (($x74 (and $x95 $x174)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x194 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x194)))
 (let (($x236 (or false (or false (and (and true (or $x234 $x248)) (or $x40 $x246))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x236)))
 (let (($x254 (and $x41 $x74)))
 (let (($x189 (= $x254 true)))
 (let (($x62 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x53 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x269 (and $x53 $x62)))
 (let (($x26 (= $x269 true)))
 (let ((?x201 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x192 (bvneg ?x201)))
 (let (($x25 (= ?x192 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x89 (= $x25 true)))
 (let (($x7 (= ?x192 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x221 (= $x7 true)))
 (let (($x79 (forall ((input.ind-%var1923X (_ BitVec 32)) )(let ((?x143 (bvmul input.ind-%var1923X (_ bv4 32))))
 (let ((?x179 (bvadd ?x143 input.dst.llvm-%m2)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x179))))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x179 (_ bv2 32))) ?x167)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x179 (_ bv3 32))) ?x227)))
 (let ((?x16 (input.spec-%var-m2-1.1.1 input.ind-%var1923X)))
 (let (($x212 (input.spec-%var-m2-1.0.1 input.ind-%var1923X)))
 (=> $x212 (= ?x16 ?x232))))))))))
 ))
 (let (($x240 (forall ((input.ind-%var1922X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1922X) (bvult input.ind-%var1922X (_ bv100 32)))))
 (let (($x212 (input.spec-%var-m2-1.0.1 input.ind-%var1922X)))
 (= $x212 $x207))))
 ))
 (let (($x8 (and $x240 $x79)))
 (let (($x176 (= $x8 true)))
 (let (($x35 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let ((?x143 (bvmul input.ind-%var1913X (_ bv4 32))))
 (let ((?x281 (bvadd ?x143 input.dst.llvm-%m1)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x281))))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x274)))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x243)))
 (let ((?x51 (input.spec-%var-m1-1.1.1 input.ind-%var1913X)))
 (let (($x220 (input.spec-%var-m1-1.0.1 input.ind-%var1913X)))
 (=> $x220 (= ?x51 ?x213))))))))))
 ))
 (let (($x158 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1912X) (bvult input.ind-%var1912X (_ bv100 32)))))
 (let (($x220 (input.spec-%var-m1-1.0.1 input.ind-%var1912X)))
 (= $x220 $x207))))
 ))
 (let (($x60 (and $x158 $x35)))
 (let (($x56 (= $x60 true)))
 (let (($x258 (and $x56 $x176)))
 (let (($x135 (and $x258 $x221)))
 (let (($x21 (and $x135 $x89)))
 (let (($x203 (and $x21 $x26)))
 (let (($x161 (and $x203 $x189)))
 (let (($x253 (and $x161 $x12)))
 (let (($x163 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let ((?x57 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1933X)))
 (let ((?x51 (input.spec-%var-m1-1.1.1 input.ind-%var1933X)))
 (let (($x220 (input.spec-%var-m1-1.0.1 input.ind-%var1933X)))
 (=> $x220 (= ?x51 ?x57))))))
 ))
 (let (($x61 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1932X)))
 (let (($x220 (input.spec-%var-m1-1.0.1 input.ind-%var1932X)))
 (= $x220 $x120))))
 ))
 (let (($x65 (and $x61 $x163)))
 (let (($x49 (and $x65 $x253)))
 (let (($x119 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let ((?x96 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1943X)))
 (let ((?x16 (input.spec-%var-m2-1.1.1 input.ind-%var1943X)))
 (let (($x212 (input.spec-%var-m2-1.0.1 input.ind-%var1943X)))
 (=> $x212 (= ?x16 ?x96))))))
 ))
 (let (($x164 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1942X)))
 (let (($x212 (input.spec-%var-m2-1.0.1 input.ind-%var1942X)))
 (= $x212 $x168))))
 ))
 (let (($x178 (and $x164 $x119)))
 (let (($x273 (and $x178 $x49)))
 (let (($x239 (=> $x273 $x91)))
 (not $x239))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x150 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x216 (=> $x150 true)))
 (let (($x91 (= $x216 true)))
 (let (($x12 (= $x150 true)))
 (let ((?x180 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x174 (= (_ bv0 32) ?x180)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x184 (= (_ bv0 32) ?x59)))
 (let ((?x69 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x64 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (and $x247 $x145)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x206 $x137)))
 (let (($x217 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x99 $x172)))
 (let (($x272 (not $x100)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x139 $x199)))
 (let (($x9 (and (not $x42) $x272)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x198 $x31)))
 (let (($x73 (not $x32)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x223 $x262)))
 (let (($x270 (and (not $x204) $x73)))
 (let (($x95 (and (and (and (and (and (and $x270 $x9) $x46) $x217) $x190) $x54) $x184)))
 (let (($x74 (and $x95 $x174)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x194 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x194)))
 (let (($x236 (or false (or false (and (and true (or $x234 $x248)) (or $x40 $x246))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x236)))
 (let (($x254 (and $x41 $x74)))
 (let (($x189 (= $x254 true)))
 (let (($x62 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x53 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x269 (and $x53 $x62)))
 (let (($x26 (= $x269 true)))
 (let ((?x201 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x192 (bvneg ?x201)))
 (let (($x25 (= ?x192 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x89 (= $x25 true)))
 (let (($x7 (= ?x192 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x221 (= $x7 true)))
 (let (($x79 (forall ((input.ind-%var1923X (_ BitVec 32)) )(let ((?x143 (bvmul input.ind-%var1923X (_ bv4 32))))
 (let ((?x179 (bvadd ?x143 input.dst.llvm-%m2)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x179))))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x179 (_ bv2 32))) ?x167)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x179 (_ bv3 32))) ?x227)))
 (let ((?x16 (input.spec-%var-m2-1.1.1 input.ind-%var1923X)))
 (let (($x212 (input.spec-%var-m2-1.0.1 input.ind-%var1923X)))
 (=> $x212 (= ?x16 ?x232))))))))))
 ))
 (let (($x240 (forall ((input.ind-%var1922X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1922X) (bvult input.ind-%var1922X (_ bv100 32)))))
 (let (($x212 (input.spec-%var-m2-1.0.1 input.ind-%var1922X)))
 (= $x212 $x207))))
 ))
 (let (($x8 (and $x240 $x79)))
 (let (($x176 (= $x8 true)))
 (let (($x35 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let ((?x143 (bvmul input.ind-%var1913X (_ bv4 32))))
 (let ((?x281 (bvadd ?x143 input.dst.llvm-%m1)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x281))))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x274)))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x243)))
 (let ((?x51 (input.spec-%var-m1-1.1.1 input.ind-%var1913X)))
 (let (($x220 (input.spec-%var-m1-1.0.1 input.ind-%var1913X)))
 (=> $x220 (= ?x51 ?x213))))))))))
 ))
 (let (($x158 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1912X) (bvult input.ind-%var1912X (_ bv100 32)))))
 (let (($x220 (input.spec-%var-m1-1.0.1 input.ind-%var1912X)))
 (= $x220 $x207))))
 ))
 (let (($x60 (and $x158 $x35)))
 (let (($x56 (= $x60 true)))
 (let (($x258 (and $x56 $x176)))
 (let (($x135 (and $x258 $x221)))
 (let (($x21 (and $x135 $x89)))
 (let (($x203 (and $x21 $x26)))
 (let (($x161 (and $x203 $x189)))
 (let (($x253 (and $x161 $x12)))
 (let (($x163 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let ((?x57 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1933X)))
 (let ((?x51 (input.spec-%var-m1-1.1.1 input.ind-%var1933X)))
 (let (($x220 (input.spec-%var-m1-1.0.1 input.ind-%var1933X)))
 (=> $x220 (= ?x51 ?x57))))))
 ))
 (let (($x61 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1932X)))
 (let (($x220 (input.spec-%var-m1-1.0.1 input.ind-%var1932X)))
 (= $x220 $x120))))
 ))
 (let (($x65 (and $x61 $x163)))
 (let (($x49 (and $x65 $x253)))
 (let (($x119 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let ((?x96 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1943X)))
 (let ((?x16 (input.spec-%var-m2-1.1.1 input.ind-%var1943X)))
 (let (($x212 (input.spec-%var-m2-1.0.1 input.ind-%var1943X)))
 (=> $x212 (= ?x16 ?x96))))))
 ))
 (let (($x164 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1942X)))
 (let (($x212 (input.spec-%var-m2-1.0.1 input.ind-%var1942X)))
 (= $x212 $x168))))
 ))
 (let (($x178 (and $x164 $x119)))
 (let (($x273 (and $x178 $x49)))
 (let (($x239 (=> $x273 $x91)))
 (not $x239))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x30 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x81 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x30)))
 (let ((?x38 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x149 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x38)))
 (let (($x165 (= ?x149 ?x81)))
 (let (($x142 (= $x165 true)))
 (let ((?x87 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x101 (bvneg ?x87)))
 (let (($x277 (= ?x101 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x63 (= $x277 true)))
 (let (($x210 (= ?x101 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x90 (= $x210 true)))
 (let (($x245 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x254 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x174 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x189 (and $x174 $x254)))
 (let (($x255 (and $x189 $x245)))
 (let (($x44 (= $x255 true)))
 (let (($x256 (= $x245 true)))
 (let ((?x173 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x177 (= (_ bv0 32) ?x173)))
 (let ((?x15 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x181 (= (_ bv0 32) ?x15)))
 (let ((?x266 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x266)))
 (let ((?x34 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x77 $x118)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x121 $x71)))
 (let (($x5 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (and $x196 $x85)))
 (let (($x20 (not $x171)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x94 $x218)))
 (let (($x134 (and (not $x24) $x20)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x88 $x130)))
 (let (($x152 (not $x138)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x150 $x12)))
 (let (($x112 (and (not $x136) $x152)))
 (let (($x131 (and (and (and (and (and (and $x112 $x134) $x115) $x5) $x47) $x229) $x181)))
 (let (($x185 (and $x131 $x177)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x275 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x91)))
 (let (($x230 (or false (or false (and (and true (or $x239 $x275)) (or $x153 $x107))))))
 (let (($x280 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x230)))
 (let (($x76 (and $x280 $x185)))
 (let (($x200 (= $x76 true)))
 (let (($x161 (= $x189 true)))
 (let (($x54 (forall ((input.ind-%var1963X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var1963X (_ bv4 32))))
 (let ((?x46 (bvadd ?x62 input.dst.llvm-%m2)))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x46))))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x46 (_ bv2 32))) ?x102)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x46 (_ bv3 32))) ?x64)))
 (let ((?x260 (input.spec-%var-m2-1.1.1 input.ind-%var1963X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1963X)))
 (=> $x133 (= ?x260 ?x190))))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1962X (_ BitVec 32)) )(let (($x129 (and (bvule (_ bv0 32) input.ind-%var1962X) (bvult input.ind-%var1962X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1962X)))
 (= $x133 $x129))))
 ))
 (let (($x58 (and $x262 $x54)))
 (let (($x59 (= $x58 true)))
 (let (($x75 (forall ((input.ind-%var1953X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var1953X (_ bv4 32))))
 (let ((?x269 (bvadd ?x62 input.dst.llvm-%m1)))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x269))))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x269 (_ bv2 32))) ?x17)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x269 (_ bv3 32))) ?x194)))
 (let ((?x154 (input.spec-%var-m1-1.1.1 input.ind-%var1953X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var1953X)))
 (=> $x11 (= ?x154 ?x248))))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x129 (and (bvule (_ bv0 32) input.ind-%var1952X) (bvult input.ind-%var1952X (_ bv100 32)))))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var1952X)))
 (= $x11 $x129))))
 ))
 (let (($x40 (and $x108 $x75)))
 (let (($x233 (= $x40 true)))
 (let (($x184 (and $x233 $x59)))
 (let (($x225 (and $x184 $x161)))
 (let (($x37 (and $x225 $x200)))
 (let (($x50 (and $x37 $x256)))
 (let (($x231 (and $x50 $x44)))
 (let (($x224 (and $x231 $x90)))
 (let (($x278 (and $x224 $x63)))
 (let (($x197 (forall ((input.ind-%var1973X (_ BitVec 32)) )(let ((?x186 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1973X)))
 (let ((?x154 (input.spec-%var-m1-1.1.1 input.ind-%var1973X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var1973X)))
 (=> $x11 (= ?x154 ?x186))))))
 ))
 (let (($x259 (forall ((input.ind-%var1972X (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1972X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var1972X)))
 (= $x11 $x28))))
 ))
 (let (($x175 (and $x259 $x197)))
 (let (($x228 (and $x175 $x278)))
 (let (($x249 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let ((?x57 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1983X)))
 (let ((?x260 (input.spec-%var-m2-1.1.1 input.ind-%var1983X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1983X)))
 (=> $x133 (= ?x260 ?x57))))))
 ))
 (let (($x208 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1982X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1982X)))
 (= $x133 $x16))))
 ))
 (let (($x22 (and $x208 $x249)))
 (let (($x126 (and $x22 $x228)))
 (let (($x84 (=> $x126 $x142)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x30 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x81 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x30)))
 (let ((?x38 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x149 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x38)))
 (let (($x165 (= ?x149 ?x81)))
 (let (($x142 (= $x165 true)))
 (let ((?x87 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x101 (bvneg ?x87)))
 (let (($x277 (= ?x101 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x63 (= $x277 true)))
 (let (($x210 (= ?x101 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x90 (= $x210 true)))
 (let (($x245 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x254 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x174 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x189 (and $x174 $x254)))
 (let (($x255 (and $x189 $x245)))
 (let (($x44 (= $x255 true)))
 (let (($x256 (= $x245 true)))
 (let ((?x173 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x177 (= (_ bv0 32) ?x173)))
 (let ((?x15 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x181 (= (_ bv0 32) ?x15)))
 (let ((?x266 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x266)))
 (let ((?x34 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x77 $x118)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x121 $x71)))
 (let (($x5 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (and $x196 $x85)))
 (let (($x20 (not $x171)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x94 $x218)))
 (let (($x134 (and (not $x24) $x20)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x88 $x130)))
 (let (($x152 (not $x138)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x150 $x12)))
 (let (($x112 (and (not $x136) $x152)))
 (let (($x131 (and (and (and (and (and (and $x112 $x134) $x115) $x5) $x47) $x229) $x181)))
 (let (($x185 (and $x131 $x177)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x275 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x91)))
 (let (($x230 (or false (or false (and (and true (or $x239 $x275)) (or $x153 $x107))))))
 (let (($x280 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x230)))
 (let (($x76 (and $x280 $x185)))
 (let (($x200 (= $x76 true)))
 (let (($x161 (= $x189 true)))
 (let (($x54 (forall ((input.ind-%var1963X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var1963X (_ bv4 32))))
 (let ((?x46 (bvadd ?x62 input.dst.llvm-%m2)))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x46))))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x46 (_ bv2 32))) ?x102)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x46 (_ bv3 32))) ?x64)))
 (let ((?x260 (input.spec-%var-m2-1.1.1 input.ind-%var1963X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1963X)))
 (=> $x133 (= ?x260 ?x190))))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1962X (_ BitVec 32)) )(let (($x129 (and (bvule (_ bv0 32) input.ind-%var1962X) (bvult input.ind-%var1962X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1962X)))
 (= $x133 $x129))))
 ))
 (let (($x58 (and $x262 $x54)))
 (let (($x59 (= $x58 true)))
 (let (($x75 (forall ((input.ind-%var1953X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var1953X (_ bv4 32))))
 (let ((?x269 (bvadd ?x62 input.dst.llvm-%m1)))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x269))))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x269 (_ bv2 32))) ?x17)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x269 (_ bv3 32))) ?x194)))
 (let ((?x154 (input.spec-%var-m1-1.1.1 input.ind-%var1953X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var1953X)))
 (=> $x11 (= ?x154 ?x248))))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x129 (and (bvule (_ bv0 32) input.ind-%var1952X) (bvult input.ind-%var1952X (_ bv100 32)))))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var1952X)))
 (= $x11 $x129))))
 ))
 (let (($x40 (and $x108 $x75)))
 (let (($x233 (= $x40 true)))
 (let (($x184 (and $x233 $x59)))
 (let (($x225 (and $x184 $x161)))
 (let (($x37 (and $x225 $x200)))
 (let (($x50 (and $x37 $x256)))
 (let (($x231 (and $x50 $x44)))
 (let (($x224 (and $x231 $x90)))
 (let (($x278 (and $x224 $x63)))
 (let (($x197 (forall ((input.ind-%var1973X (_ BitVec 32)) )(let ((?x186 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1973X)))
 (let ((?x154 (input.spec-%var-m1-1.1.1 input.ind-%var1973X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var1973X)))
 (=> $x11 (= ?x154 ?x186))))))
 ))
 (let (($x259 (forall ((input.ind-%var1972X (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1972X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var1972X)))
 (= $x11 $x28))))
 ))
 (let (($x175 (and $x259 $x197)))
 (let (($x228 (and $x175 $x278)))
 (let (($x249 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let ((?x57 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1983X)))
 (let ((?x260 (input.spec-%var-m2-1.1.1 input.ind-%var1983X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1983X)))
 (=> $x133 (= ?x260 ?x57))))))
 ))
 (let (($x208 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1982X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1982X)))
 (= $x133 $x16))))
 ))
 (let (($x22 (and $x208 $x249)))
 (let (($x126 (and $x22 $x228)))
 (let (($x84 (=> $x126 $x142)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x160 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x222 (= (_ bv0 32) ?x160)))
 (let ((?x201 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x192 (= (_ bv0 32) ?x201)))
 (let ((?x221 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x8 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x21 (and $x211 $x258)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x268 $x21)))
 (let (($x35 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (and $x252 $x18)))
 (let (($x23 (not $x183)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (and $x82 $x164)))
 (let (($x207 (and (not $x279) $x23)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x92 $x155)))
 (let (($x158 (not $x61)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x84 $x132)))
 (let (($x143 (and (not $x214) $x158)))
 (let (($x53 (and (and (and (and (and (and $x143 $x207) $x169) $x35) $x209) $x135) $x192)))
 (let (($x167 (and $x53 $x222)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x235 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x235)))
 (let (($x182 (or false (or false (and (and true (or $x115 $x219)) (or $x77 $x34))))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x156 (and $x229 $x167)))
 (let (($x241 (= $x156 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x19 (concat ?x73 (concat ?x68 ?x198)))))
 (let (($x163 (= ?x99 input.dst.llvm-%m1)))
 (let (($x159 (= $x163 true)))
 (let ((?x270 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x48 (concat ?x236 (concat ?x172 ?x270)))))
 (let (($x96 (= ?x215 input.dst.llvm-%m2)))
 (let (($x141 (= $x96 true)))
 (let (($x93 (= input.dst.llvm-%m2 ?x215)))
 (let (($x139 (= input.dst.llvm-%m1 ?x99)))
 (let (($x89 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x243 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x17 (and $x243 $x89)))
 (let (($x104 (and (and $x17 $x139) $x93)))
 (let (($x165 (forall ((input.ind-%var2003X (_ BitVec 32)) )(let ((?x166 (bvmul input.ind-%var2003X (_ bv4 32))))
 (let ((?x210 (bvadd ?x166 input.dst.llvm-%m1)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x277))))
 (let ((?x267 (input.spec-%var-m1-1.1.1 input.ind-%var2003X)))
 (let (($x107 (input.spec-%var-m1-1.0.1 input.ind-%var2003X)))
 (=> $x107 (= ?x267 ?x149)))))))))
 ))
 (let (($x177 (forall ((input.ind-%var2002X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var2002X) (bvult input.ind-%var2002X (_ bv100 32)))))
 (let (($x107 (input.spec-%var-m1-1.0.1 input.ind-%var2002X)))
 (= $x107 $x105))))
 ))
 (let (($x142 (and $x177 $x165)))
 (let (($x33 (and (and (and $x229 $x142) $x167) $x104)))
 (let (($x218 (forall ((input.ind-%var1993X (_ BitVec 32)) )(let ((?x166 (bvmul input.ind-%var1993X (_ bv4 32))))
 (let ((?x106 (bvadd ?x166 input.dst.llvm-%m2)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem ?x106))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv2 32))) ?x12))))
 (let ((?x11 (input.spec-%var-m2-1.1.1 input.ind-%var1993X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1993X)))
 (=> $x133 (= ?x11 ?x152)))))))))
 ))
 (let (($x46 (forall ((input.ind-%var1992X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var1992X) (bvult input.ind-%var1992X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1992X)))
 (= $x133 $x105))))
 ))
 (let (($x24 (and $x46 $x218)))
 (let (($x119 (and $x24 $x33)))
 (let (($x51 (= $x119 true)))
 (let (($x176 (= $x17 true)))
 (let (($x168 (and $x176 $x51)))
 (let (($x220 (and $x168 $x141)))
 (let (($x263 (and $x220 $x159)))
 (let (($x145 (forall ((input.ind-%var2013X (_ BitVec 32)) )(let ((?x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2013X)))
 (let ((?x267 (input.spec-%var-m1-1.1.1 input.ind-%var2013X)))
 (let (($x107 (input.spec-%var-m1-1.0.1 input.ind-%var2013X)))
 (=> $x107 (= ?x267 ?x259))))))
 ))
 (let (($x225 (forall ((input.ind-%var2012X (_ BitVec 32)) )(let (($x234 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2012X)))
 (let (($x107 (input.spec-%var-m1-1.0.1 input.ind-%var2012X)))
 (= $x107 $x234))))
 ))
 (let (($x52 (and $x225 $x145)))
 (let (($x187 (and $x52 $x263)))
 (let (($x72 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2023X)))
 (let ((?x11 (input.spec-%var-m2-1.1.1 input.ind-%var2023X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2023X)))
 (=> $x133 (= ?x11 ?x184))))))
 ))
 (let (($x65 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x208 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2022X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2022X)))
 (= $x133 $x208))))
 ))
 (let (($x197 (and $x65 $x72)))
 (let (($x237 (and $x197 $x187)))
 (let (($x264 (=> $x237 $x241)))
 (not $x264)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x160 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x222 (= (_ bv0 32) ?x160)))
 (let ((?x201 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x192 (= (_ bv0 32) ?x201)))
 (let ((?x221 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x8 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x21 (and $x211 $x258)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x268 $x21)))
 (let (($x35 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (and $x252 $x18)))
 (let (($x23 (not $x183)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (and $x82 $x164)))
 (let (($x207 (and (not $x279) $x23)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x92 $x155)))
 (let (($x158 (not $x61)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x84 $x132)))
 (let (($x143 (and (not $x214) $x158)))
 (let (($x53 (and (and (and (and (and (and $x143 $x207) $x169) $x35) $x209) $x135) $x192)))
 (let (($x167 (and $x53 $x222)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x235 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x235)))
 (let (($x182 (or false (or false (and (and true (or $x115 $x219)) (or $x77 $x34))))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x156 (and $x229 $x167)))
 (let (($x241 (= $x156 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x19 (concat ?x73 (concat ?x68 ?x198)))))
 (let (($x163 (= ?x99 input.dst.llvm-%m1)))
 (let (($x159 (= $x163 true)))
 (let ((?x270 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x48 (concat ?x236 (concat ?x172 ?x270)))))
 (let (($x96 (= ?x215 input.dst.llvm-%m2)))
 (let (($x141 (= $x96 true)))
 (let (($x93 (= input.dst.llvm-%m2 ?x215)))
 (let (($x139 (= input.dst.llvm-%m1 ?x99)))
 (let (($x89 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x243 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x17 (and $x243 $x89)))
 (let (($x104 (and (and $x17 $x139) $x93)))
 (let (($x165 (forall ((input.ind-%var2003X (_ BitVec 32)) )(let ((?x166 (bvmul input.ind-%var2003X (_ bv4 32))))
 (let ((?x210 (bvadd ?x166 input.dst.llvm-%m1)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x277))))
 (let ((?x267 (input.spec-%var-m1-1.1.1 input.ind-%var2003X)))
 (let (($x107 (input.spec-%var-m1-1.0.1 input.ind-%var2003X)))
 (=> $x107 (= ?x267 ?x149)))))))))
 ))
 (let (($x177 (forall ((input.ind-%var2002X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var2002X) (bvult input.ind-%var2002X (_ bv100 32)))))
 (let (($x107 (input.spec-%var-m1-1.0.1 input.ind-%var2002X)))
 (= $x107 $x105))))
 ))
 (let (($x142 (and $x177 $x165)))
 (let (($x33 (and (and (and $x229 $x142) $x167) $x104)))
 (let (($x218 (forall ((input.ind-%var1993X (_ BitVec 32)) )(let ((?x166 (bvmul input.ind-%var1993X (_ bv4 32))))
 (let ((?x106 (bvadd ?x166 input.dst.llvm-%m2)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem ?x106))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv2 32))) ?x12))))
 (let ((?x11 (input.spec-%var-m2-1.1.1 input.ind-%var1993X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1993X)))
 (=> $x133 (= ?x11 ?x152)))))))))
 ))
 (let (($x46 (forall ((input.ind-%var1992X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var1992X) (bvult input.ind-%var1992X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var1992X)))
 (= $x133 $x105))))
 ))
 (let (($x24 (and $x46 $x218)))
 (let (($x119 (and $x24 $x33)))
 (let (($x51 (= $x119 true)))
 (let (($x176 (= $x17 true)))
 (let (($x168 (and $x176 $x51)))
 (let (($x220 (and $x168 $x141)))
 (let (($x263 (and $x220 $x159)))
 (let (($x145 (forall ((input.ind-%var2013X (_ BitVec 32)) )(let ((?x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2013X)))
 (let ((?x267 (input.spec-%var-m1-1.1.1 input.ind-%var2013X)))
 (let (($x107 (input.spec-%var-m1-1.0.1 input.ind-%var2013X)))
 (=> $x107 (= ?x267 ?x259))))))
 ))
 (let (($x225 (forall ((input.ind-%var2012X (_ BitVec 32)) )(let (($x234 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2012X)))
 (let (($x107 (input.spec-%var-m1-1.0.1 input.ind-%var2012X)))
 (= $x107 $x234))))
 ))
 (let (($x52 (and $x225 $x145)))
 (let (($x187 (and $x52 $x263)))
 (let (($x72 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2023X)))
 (let ((?x11 (input.spec-%var-m2-1.1.1 input.ind-%var2023X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2023X)))
 (=> $x133 (= ?x11 ?x184))))))
 ))
 (let (($x65 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x208 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2022X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2022X)))
 (= $x133 $x208))))
 ))
 (let (($x197 (and $x65 $x72)))
 (let (($x237 (and $x197 $x187)))
 (let (($x264 (=> $x237 $x241)))
 (not $x264)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x249 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x191 (= (_ bv0 2) ?x249)))
 (let (($x204 (= $x191 true)))
 (let ((?x256 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x101 (concat ?x85 (concat ?x50 ?x256)))))
 (let (($x147 (= ?x186 input.dst.llvm-%m2)))
 (let (($x78 (= $x147 true)))
 (let (($x76 (= input.dst.llvm-%m2 ?x186)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x210 (concat ?x229 (concat ?x218 (concat ?x138 ?x108)))))
 (let (($x44 (= input.dst.llvm-%m1 ?x210)))
 (let (($x230 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x171 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x232 (and $x171 $x230)))
 (let (($x240 (and (and $x232 $x44) $x76)))
 (let ((?x200 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x196 (= (_ bv0 32) ?x200)))
 (let ((?x190 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x257 (= (_ bv0 32) ?x190)))
 (let ((?x253 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x102 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x102)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x194 $x58)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x254 $x54)))
 (let (($x74 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x161 $x223)))
 (let (($x174 (not $x40)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x217 $x203)))
 (let (($x151 (and (not $x175) $x174)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x95 $x244)))
 (let (($x6 (not $x129)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x66 $x154)))
 (let (($x247 (and (not $x212) $x6)))
 (let (($x144 (and (and (and (and (and (and $x247 $x151) $x180) $x74) $x189) $x275) $x257)))
 (let (($x255 (and $x144 $x196)))
 (let (($x248 (forall ((input.ind-%var2043X (_ BitVec 32)) )(let ((?x18 (bvmul input.ind-%var2043X (_ bv4 32))))
 (let ((?x263 (bvadd ?x18 input.dst.llvm-%m1)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x241))))
 (let ((?x269 (input.spec-%var-m1-1.1.1 input.ind-%var2043X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var2043X)))
 (=> $x165 (= ?x269 ?x188)))))))))
 ))
 (let (($x236 (forall ((input.ind-%var2042X (_ BitVec 32)) )(let (($x235 (and (bvule (_ bv0 32) input.ind-%var2042X) (bvult input.ind-%var2042X (_ bv100 32)))))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var2042X)))
 (= $x165 $x235))))
 ))
 (let (($x281 (and $x236 $x248)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x43 (or false (or false (and (and true (or $x160 $x222)) (or $x31 $x73))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x43)))
 (let (($x83 (and (and (and $x99 $x281) $x255) $x240)))
 (let (($x258 (forall ((input.ind-%var2033X (_ BitVec 32)) )(let ((?x18 (bvmul input.ind-%var2033X (_ bv4 32))))
 (let ((?x183 (bvadd ?x18 input.dst.llvm-%m2)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x29))))
 (let ((?x107 (input.spec-%var-m2-1.1.1 input.ind-%var2033X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2033X)))
 (=> $x133 (= ?x107 ?x268)))))))))
 ))
 (let (($x71 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x235 (and (bvule (_ bv0 32) input.ind-%var2032X) (bvult input.ind-%var2032X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2032X)))
 (= $x133 $x235))))
 ))
 (let (($x21 (and $x71 $x258)))
 (let (($x153 (and $x21 $x83)))
 (let (($x64 (= $x153 true)))
 (let (($x176 (= $x232 true)))
 (let (($x24 (= ?x210 input.dst.llvm-%m1)))
 (let (($x20 (= $x24 true)))
 (let (($x273 (and $x20 $x176)))
 (let (($x22 (and $x273 $x64)))
 (let (($x262 (and $x22 $x78)))
 (let (($x94 (forall ((input.ind-%var2053X (_ BitVec 32)) )(let ((?x225 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2053X)))
 (let ((?x269 (input.spec-%var-m1-1.1.1 input.ind-%var2053X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var2053X)))
 (=> $x165 (= ?x269 ?x225))))))
 ))
 (let (($x177 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x105 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2052X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var2052X)))
 (= $x165 $x105))))
 ))
 (let (($x81 (and $x177 $x94)))
 (let (($x276 (and $x81 $x262)))
 (let (($x149 (forall ((input.ind-%var2063X (_ BitVec 32)) )(let ((?x121 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2063X)))
 (let ((?x107 (input.spec-%var-m2-1.1.1 input.ind-%var2063X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2063X)))
 (=> $x133 (= ?x107 ?x121))))))
 ))
 (let (($x238 (forall ((input.ind-%var2062X (_ BitVec 32)) )(let (($x65 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2062X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2062X)))
 (= $x133 $x65))))
 ))
 (let (($x145 (and $x238 $x149)))
 (let (($x260 (and $x145 $x276)))
 (let (($x45 (=> $x260 $x204)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x249 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x191 (= (_ bv0 2) ?x249)))
 (let (($x204 (= $x191 true)))
 (let ((?x256 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x101 (concat ?x85 (concat ?x50 ?x256)))))
 (let (($x147 (= ?x186 input.dst.llvm-%m2)))
 (let (($x78 (= $x147 true)))
 (let (($x76 (= input.dst.llvm-%m2 ?x186)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x210 (concat ?x229 (concat ?x218 (concat ?x138 ?x108)))))
 (let (($x44 (= input.dst.llvm-%m1 ?x210)))
 (let (($x230 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x171 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x232 (and $x171 $x230)))
 (let (($x240 (and (and $x232 $x44) $x76)))
 (let ((?x200 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x196 (= (_ bv0 32) ?x200)))
 (let ((?x190 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x257 (= (_ bv0 32) ?x190)))
 (let ((?x253 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x102 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x102)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x194 $x58)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x254 $x54)))
 (let (($x74 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x161 $x223)))
 (let (($x174 (not $x40)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x217 $x203)))
 (let (($x151 (and (not $x175) $x174)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x95 $x244)))
 (let (($x6 (not $x129)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x66 $x154)))
 (let (($x247 (and (not $x212) $x6)))
 (let (($x144 (and (and (and (and (and (and $x247 $x151) $x180) $x74) $x189) $x275) $x257)))
 (let (($x255 (and $x144 $x196)))
 (let (($x248 (forall ((input.ind-%var2043X (_ BitVec 32)) )(let ((?x18 (bvmul input.ind-%var2043X (_ bv4 32))))
 (let ((?x263 (bvadd ?x18 input.dst.llvm-%m1)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x241))))
 (let ((?x269 (input.spec-%var-m1-1.1.1 input.ind-%var2043X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var2043X)))
 (=> $x165 (= ?x269 ?x188)))))))))
 ))
 (let (($x236 (forall ((input.ind-%var2042X (_ BitVec 32)) )(let (($x235 (and (bvule (_ bv0 32) input.ind-%var2042X) (bvult input.ind-%var2042X (_ bv100 32)))))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var2042X)))
 (= $x165 $x235))))
 ))
 (let (($x281 (and $x236 $x248)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x43 (or false (or false (and (and true (or $x160 $x222)) (or $x31 $x73))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x43)))
 (let (($x83 (and (and (and $x99 $x281) $x255) $x240)))
 (let (($x258 (forall ((input.ind-%var2033X (_ BitVec 32)) )(let ((?x18 (bvmul input.ind-%var2033X (_ bv4 32))))
 (let ((?x183 (bvadd ?x18 input.dst.llvm-%m2)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x29))))
 (let ((?x107 (input.spec-%var-m2-1.1.1 input.ind-%var2033X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2033X)))
 (=> $x133 (= ?x107 ?x268)))))))))
 ))
 (let (($x71 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x235 (and (bvule (_ bv0 32) input.ind-%var2032X) (bvult input.ind-%var2032X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2032X)))
 (= $x133 $x235))))
 ))
 (let (($x21 (and $x71 $x258)))
 (let (($x153 (and $x21 $x83)))
 (let (($x64 (= $x153 true)))
 (let (($x176 (= $x232 true)))
 (let (($x24 (= ?x210 input.dst.llvm-%m1)))
 (let (($x20 (= $x24 true)))
 (let (($x273 (and $x20 $x176)))
 (let (($x22 (and $x273 $x64)))
 (let (($x262 (and $x22 $x78)))
 (let (($x94 (forall ((input.ind-%var2053X (_ BitVec 32)) )(let ((?x225 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2053X)))
 (let ((?x269 (input.spec-%var-m1-1.1.1 input.ind-%var2053X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var2053X)))
 (=> $x165 (= ?x269 ?x225))))))
 ))
 (let (($x177 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x105 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2052X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var2052X)))
 (= $x165 $x105))))
 ))
 (let (($x81 (and $x177 $x94)))
 (let (($x276 (and $x81 $x262)))
 (let (($x149 (forall ((input.ind-%var2063X (_ BitVec 32)) )(let ((?x121 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2063X)))
 (let ((?x107 (input.spec-%var-m2-1.1.1 input.ind-%var2063X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2063X)))
 (=> $x133 (= ?x107 ?x121))))))
 ))
 (let (($x238 (forall ((input.ind-%var2062X (_ BitVec 32)) )(let (($x65 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2062X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2062X)))
 (= $x133 $x65))))
 ))
 (let (($x145 (and $x238 $x149)))
 (let (($x260 (and $x145 $x276)))
 (let (($x45 (=> $x260 $x204)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x11 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x137 (= (_ bv0 2) ?x11)))
 (let (($x72 (= $x137 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x221 (concat ?x33 (concat ?x93 ?x119)))))
 (let (($x115 (= ?x123 input.dst.llvm-%m1)))
 (let (($x197 (= $x115 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x53 (concat ?x18 (concat ?x266 ?x89)))))
 (let (($x163 (= input.dst.llvm-%m2 ?x222)))
 (let (($x48 (= input.dst.llvm-%m1 ?x123)))
 (let (($x118 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x23 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x17 (and $x23 $x118)))
 (let (($x172 (and (and $x17 $x48) $x163)))
 (let ((?x116 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x252 (= (_ bv0 32) ?x116)))
 (let ((?x77 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x109 (= (_ bv0 32) ?x77)))
 (let ((?x150 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x214 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x214)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x92 $x155)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x279 (and $x193 $x143)))
 (let (($x158 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x12 $x126)))
 (let (($x84 (not $x47)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x166 $x70)))
 (let (($x82 (and (not $x90) $x84)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x267 $x226)))
 (let (($x277 (not $x34)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x136 $x128)))
 (let (($x26 (and (not $x32) $x277)))
 (let (($x41 (and (and (and (and (and (and $x26 $x82) $x164) $x158) $x279) $x59) $x109)))
 (let (($x96 (and $x41 $x252)))
 (let (($x208 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x66 (bvmul input.ind-%var2083X (_ bv4 32))))
 (let ((?x262 (bvadd ?x66 input.dst.llvm-%m1)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x249))))
 (let ((?x106 (input.spec-%var-m1-1.1.1 input.ind-%var2083X)))
 (let (($x236 (input.spec-%var-m1-1.0.1 input.ind-%var2083X)))
 (=> $x236 (= ?x106 ?x209)))))))))
 ))
 (let (($x131 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var2082X) (bvult input.ind-%var2082X (_ bv100 32)))))
 (let (($x236 (input.spec-%var-m1-1.0.1 input.ind-%var2082X)))
 (= $x236 $x207))))
 ))
 (let (($x234 (and $x131 $x208)))
 (let (($x253 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x37)))
 (let (($x257 (or false (or false (and (and true (or $x254 $x194)) (or $x157 $x253))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x257)))
 (let (($x233 (and (and (and $x200 $x234) $x96) $x172)))
 (let (($x223 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x66 (bvmul input.ind-%var2073X (_ bv4 32))))
 (let ((?x154 (bvadd ?x66 input.dst.llvm-%m2)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x244))))
 (let ((?x165 (input.spec-%var-m2-1.1.1 input.ind-%var2073X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2073X)))
 (=> $x133 (= ?x165 ?x175)))))))))
 ))
 (let (($x127 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var2072X) (bvult input.ind-%var2072X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2072X)))
 (= $x133 $x207))))
 ))
 (let (($x40 (and $x127 $x223)))
 (let (($x280 (and $x40 $x233)))
 (let (($x239 (= $x280 true)))
 (let (($x91 (= $x17 true)))
 (let (($x183 (= ?x222 input.dst.llvm-%m2)))
 (let (($x60 (= $x183 true)))
 (let (($x171 (and $x60 $x91)))
 (let (($x30 (and $x171 $x239)))
 (let (($x228 (and $x30 $x197)))
 (let (($x274 (forall ((input.ind-%var2093X (_ BitVec 32)) )(let ((?x177 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2093X)))
 (let ((?x106 (input.spec-%var-m1-1.1.1 input.ind-%var2093X)))
 (let (($x236 (input.spec-%var-m1-1.0.1 input.ind-%var2093X)))
 (=> $x236 (= ?x106 ?x177))))))
 ))
 (let (($x192 (forall ((input.ind-%var2092X (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2092X)))
 (let (($x236 (input.spec-%var-m1-1.0.1 input.ind-%var2092X)))
 (= $x236 $x52))))
 ))
 (let (($x140 (and $x192 $x274)))
 (let (($x79 (and $x140 $x228)))
 (let (($x43 (forall ((input.ind-%var2103X (_ BitVec 32)) )(let ((?x258 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2103X)))
 (let ((?x165 (input.spec-%var-m2-1.1.1 input.ind-%var2103X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2103X)))
 (=> $x133 (= ?x165 ?x258))))))
 ))
 (let (($x134 (forall ((input.ind-%var2102X (_ BitVec 32)) )(let (($x238 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2102X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2102X)))
 (= $x133 $x238))))
 ))
 (let (($x94 (and $x134 $x43)))
 (let (($x88 (and $x94 $x79)))
 (let (($x49 (=> $x88 $x72)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x11 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x137 (= (_ bv0 2) ?x11)))
 (let (($x72 (= $x137 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x221 (concat ?x33 (concat ?x93 ?x119)))))
 (let (($x115 (= ?x123 input.dst.llvm-%m1)))
 (let (($x197 (= $x115 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x53 (concat ?x18 (concat ?x266 ?x89)))))
 (let (($x163 (= input.dst.llvm-%m2 ?x222)))
 (let (($x48 (= input.dst.llvm-%m1 ?x123)))
 (let (($x118 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x23 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x17 (and $x23 $x118)))
 (let (($x172 (and (and $x17 $x48) $x163)))
 (let ((?x116 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x252 (= (_ bv0 32) ?x116)))
 (let ((?x77 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x109 (= (_ bv0 32) ?x77)))
 (let ((?x150 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x214 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x214)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x92 $x155)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x279 (and $x193 $x143)))
 (let (($x158 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x12 $x126)))
 (let (($x84 (not $x47)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x166 $x70)))
 (let (($x82 (and (not $x90) $x84)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x267 $x226)))
 (let (($x277 (not $x34)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x136 $x128)))
 (let (($x26 (and (not $x32) $x277)))
 (let (($x41 (and (and (and (and (and (and $x26 $x82) $x164) $x158) $x279) $x59) $x109)))
 (let (($x96 (and $x41 $x252)))
 (let (($x208 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x66 (bvmul input.ind-%var2083X (_ bv4 32))))
 (let ((?x262 (bvadd ?x66 input.dst.llvm-%m1)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x249))))
 (let ((?x106 (input.spec-%var-m1-1.1.1 input.ind-%var2083X)))
 (let (($x236 (input.spec-%var-m1-1.0.1 input.ind-%var2083X)))
 (=> $x236 (= ?x106 ?x209)))))))))
 ))
 (let (($x131 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var2082X) (bvult input.ind-%var2082X (_ bv100 32)))))
 (let (($x236 (input.spec-%var-m1-1.0.1 input.ind-%var2082X)))
 (= $x236 $x207))))
 ))
 (let (($x234 (and $x131 $x208)))
 (let (($x253 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x37)))
 (let (($x257 (or false (or false (and (and true (or $x254 $x194)) (or $x157 $x253))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x257)))
 (let (($x233 (and (and (and $x200 $x234) $x96) $x172)))
 (let (($x223 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x66 (bvmul input.ind-%var2073X (_ bv4 32))))
 (let ((?x154 (bvadd ?x66 input.dst.llvm-%m2)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x244))))
 (let ((?x165 (input.spec-%var-m2-1.1.1 input.ind-%var2073X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2073X)))
 (=> $x133 (= ?x165 ?x175)))))))))
 ))
 (let (($x127 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var2072X) (bvult input.ind-%var2072X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2072X)))
 (= $x133 $x207))))
 ))
 (let (($x40 (and $x127 $x223)))
 (let (($x280 (and $x40 $x233)))
 (let (($x239 (= $x280 true)))
 (let (($x91 (= $x17 true)))
 (let (($x183 (= ?x222 input.dst.llvm-%m2)))
 (let (($x60 (= $x183 true)))
 (let (($x171 (and $x60 $x91)))
 (let (($x30 (and $x171 $x239)))
 (let (($x228 (and $x30 $x197)))
 (let (($x274 (forall ((input.ind-%var2093X (_ BitVec 32)) )(let ((?x177 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2093X)))
 (let ((?x106 (input.spec-%var-m1-1.1.1 input.ind-%var2093X)))
 (let (($x236 (input.spec-%var-m1-1.0.1 input.ind-%var2093X)))
 (=> $x236 (= ?x106 ?x177))))))
 ))
 (let (($x192 (forall ((input.ind-%var2092X (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2092X)))
 (let (($x236 (input.spec-%var-m1-1.0.1 input.ind-%var2092X)))
 (= $x236 $x52))))
 ))
 (let (($x140 (and $x192 $x274)))
 (let (($x79 (and $x140 $x228)))
 (let (($x43 (forall ((input.ind-%var2103X (_ BitVec 32)) )(let ((?x258 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2103X)))
 (let ((?x165 (input.spec-%var-m2-1.1.1 input.ind-%var2103X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2103X)))
 (=> $x133 (= ?x165 ?x258))))))
 ))
 (let (($x134 (forall ((input.ind-%var2102X (_ BitVec 32)) )(let (($x238 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2102X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2102X)))
 (= $x133 $x238))))
 ))
 (let (($x94 (and $x134 $x43)))
 (let (($x88 (and $x94 $x79)))
 (let (($x49 (=> $x88 $x72)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 142 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x282 (forall ((input.ind-%var2153X (_ BitVec 32)) )(let ((?x136 (bvmul input.ind-%var2153X (_ bv4 32))))
 (let ((?x128 (bvadd ?x136 input.dst.llvm-%m2)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x226))))
 (let ((?x236 (input.spec-%var-m2-1.1.1 input.ind-%var2153X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2153X)))
 (=> $x133 (= ?x236 ?x90)))))))))
 ))
 (let (($x124 (forall ((input.ind-%var2152X (_ BitVec 32)) )(let (($x170 (and (bvule (_ bv0 32) input.ind-%var2152X) (bvult input.ind-%var2152X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2152X)))
 (= $x133 $x170))))
 ))
 (let (($x283 (and $x124 $x282)))
 (let (($x284 (= $x283 true)))
 (let ((?x240 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x75 (concat ?x83 (concat ?x181 ?x240)))))
 (let (($x25 (= ?x44 input.dst.llvm-%m2)))
 (let (($x145 (= $x25 true)))
 (let (($x147 (= input.dst.llvm-%m2 ?x44)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x194 (concat ?x37 (concat ?x66 (concat ?x169 ?x5)))))
 (let (($x64 (= input.dst.llvm-%m1 ?x194)))
 (let (($x135 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x217 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x218 (and $x217 $x135)))
 (let (($x87 (and (and $x218 $x64) $x147)))
 (let ((?x211 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x205 (= (_ bv0 32) ?x211)))
 (let ((?x8 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x281 (= (_ bv0 32) ?x8)))
 (let ((?x67 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x148 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x148)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x156 $x187)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x237 $x188)))
 (let (($x56 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x14 $x167)))
 (let (($x199 (not $x100)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (and $x152 $x227)))
 (let (($x16 (and (not $x246) $x199)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x269 $x243)))
 (let (($x68 (not $x21)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x232 $x125)))
 (let (($x80 (and (not $x210) $x68)))
 (let (($x50 (and (and (and (and (and (and $x80 $x16) $x241) $x56) $x248) $x230) $x281)))
 (let (($x153 (and $x50 $x205)))
 (let (($x65 (forall ((input.ind-%var2123X (_ BitVec 32)) )(let ((?x136 (bvmul input.ind-%var2123X (_ bv4 32))))
 (let ((?x228 (bvadd ?x136 input.dst.llvm-%m1)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x11))))
 (let ((?x112 (input.spec-%var-m1-1.1.1 input.ind-%var2123X)))
 (let (($x131 (input.spec-%var-m1-1.0.1 input.ind-%var2123X)))
 (=> $x131 (= ?x112 ?x174)))))))))
 ))
 (let (($x215 (forall ((input.ind-%var2122X (_ BitVec 32)) )(let (($x170 (and (bvule (_ bv0 32) input.ind-%var2122X) (bvult input.ind-%var2122X (_ bv100 32)))))
 (let (($x131 (input.spec-%var-m1-1.0.1 input.ind-%var2122X)))
 (= $x131 $x170))))
 ))
 (let (($x105 (and $x215 $x65)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x109 (or false (or false (and (and true (or $x193 $x92)) (or $x178 $x150))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x109)))
 (let (($x24 (and (and (and $x116 $x105) $x153) $x87)))
 (let (($x126 (forall ((input.ind-%var2113X (_ BitVec 32)) )(let ((?x136 (bvmul input.ind-%var2113X (_ bv4 32))))
 (let ((?x128 (bvadd ?x136 input.dst.llvm-%m2)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x226))))
 (let ((?x236 (input.spec-%var-m2-1.1.1 input.ind-%var2113X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2113X)))
 (=> $x133 (= ?x236 ?x90)))))))))
 ))
 (let (($x180 (forall ((input.ind-%var2112X (_ BitVec 32)) )(let (($x170 (and (bvule (_ bv0 32) input.ind-%var2112X) (bvult input.ind-%var2112X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2112X)))
 (= $x133 $x170))))
 ))
 (let (($x47 (and $x180 $x126)))
 (let (($x182 (and $x47 $x24)))
 (let (($x224 (= $x182 true)))
 (let (($x108 (= $x218 true)))
 (let (($x154 (= ?x194 input.dst.llvm-%m1)))
 (let (($x203 (= $x154 true)))
 (let (($x35 (and $x203 $x108)))
 (let (($x99 (and $x35 $x224)))
 (let (($x198 (and $x99 $x145)))
 (let (($x271 (forall ((input.ind-%var2133X (_ BitVec 32)) )(let ((?x192 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2133X)))
 (let ((?x112 (input.spec-%var-m1-1.1.1 input.ind-%var2133X)))
 (let (($x131 (input.spec-%var-m1-1.0.1 input.ind-%var2133X)))
 (=> $x131 (= ?x112 ?x192))))))
 ))
 (let (($x74 (forall ((input.ind-%var2132X (_ BitVec 32)) )(let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2132X)))
 (let (($x131 (input.spec-%var-m1-1.0.1 input.ind-%var2132X)))
 (= $x131 $x81))))
 ))
 (let (($x202 (and $x74 $x271)))
 (let (($x142 (and $x202 $x198)))
 (let (($x257 (forall ((input.ind-%var2143X (_ BitVec 32)) )(let ((?x223 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2143X)))
 (let ((?x236 (input.spec-%var-m2-1.1.1 input.ind-%var2143X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2143X)))
 (=> $x133 (= ?x236 ?x223))))))
 ))
 (let (($x111 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2142X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2142X)))
 (= $x133 $x134))))
 ))
 (let (($x274 (and $x111 $x257)))
 (let (($x235 (and $x274 $x142)))
 (let (($x285 (=> $x235 $x284)))
 (not $x285)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x282 (forall ((input.ind-%var2153X (_ BitVec 32)) )(let ((?x136 (bvmul input.ind-%var2153X (_ bv4 32))))
 (let ((?x128 (bvadd ?x136 input.dst.llvm-%m2)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x226))))
 (let ((?x236 (input.spec-%var-m2-1.1.1 input.ind-%var2153X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2153X)))
 (=> $x133 (= ?x236 ?x90)))))))))
 ))
 (let (($x124 (forall ((input.ind-%var2152X (_ BitVec 32)) )(let (($x170 (and (bvule (_ bv0 32) input.ind-%var2152X) (bvult input.ind-%var2152X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2152X)))
 (= $x133 $x170))))
 ))
 (let (($x283 (and $x124 $x282)))
 (let (($x284 (= $x283 true)))
 (let ((?x240 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x75 (concat ?x83 (concat ?x181 ?x240)))))
 (let (($x25 (= ?x44 input.dst.llvm-%m2)))
 (let (($x145 (= $x25 true)))
 (let (($x147 (= input.dst.llvm-%m2 ?x44)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x194 (concat ?x37 (concat ?x66 (concat ?x169 ?x5)))))
 (let (($x64 (= input.dst.llvm-%m1 ?x194)))
 (let (($x135 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x217 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x218 (and $x217 $x135)))
 (let (($x87 (and (and $x218 $x64) $x147)))
 (let ((?x211 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x205 (= (_ bv0 32) ?x211)))
 (let ((?x8 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x281 (= (_ bv0 32) ?x8)))
 (let ((?x67 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x148 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x148)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x156 $x187)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x237 $x188)))
 (let (($x56 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x14 $x167)))
 (let (($x199 (not $x100)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (and $x152 $x227)))
 (let (($x16 (and (not $x246) $x199)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x269 $x243)))
 (let (($x68 (not $x21)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x232 $x125)))
 (let (($x80 (and (not $x210) $x68)))
 (let (($x50 (and (and (and (and (and (and $x80 $x16) $x241) $x56) $x248) $x230) $x281)))
 (let (($x153 (and $x50 $x205)))
 (let (($x65 (forall ((input.ind-%var2123X (_ BitVec 32)) )(let ((?x136 (bvmul input.ind-%var2123X (_ bv4 32))))
 (let ((?x228 (bvadd ?x136 input.dst.llvm-%m1)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x11))))
 (let ((?x112 (input.spec-%var-m1-1.1.1 input.ind-%var2123X)))
 (let (($x131 (input.spec-%var-m1-1.0.1 input.ind-%var2123X)))
 (=> $x131 (= ?x112 ?x174)))))))))
 ))
 (let (($x215 (forall ((input.ind-%var2122X (_ BitVec 32)) )(let (($x170 (and (bvule (_ bv0 32) input.ind-%var2122X) (bvult input.ind-%var2122X (_ bv100 32)))))
 (let (($x131 (input.spec-%var-m1-1.0.1 input.ind-%var2122X)))
 (= $x131 $x170))))
 ))
 (let (($x105 (and $x215 $x65)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x109 (or false (or false (and (and true (or $x193 $x92)) (or $x178 $x150))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x109)))
 (let (($x24 (and (and (and $x116 $x105) $x153) $x87)))
 (let (($x126 (forall ((input.ind-%var2113X (_ BitVec 32)) )(let ((?x136 (bvmul input.ind-%var2113X (_ bv4 32))))
 (let ((?x128 (bvadd ?x136 input.dst.llvm-%m2)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x226))))
 (let ((?x236 (input.spec-%var-m2-1.1.1 input.ind-%var2113X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2113X)))
 (=> $x133 (= ?x236 ?x90)))))))))
 ))
 (let (($x180 (forall ((input.ind-%var2112X (_ BitVec 32)) )(let (($x170 (and (bvule (_ bv0 32) input.ind-%var2112X) (bvult input.ind-%var2112X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2112X)))
 (= $x133 $x170))))
 ))
 (let (($x47 (and $x180 $x126)))
 (let (($x182 (and $x47 $x24)))
 (let (($x224 (= $x182 true)))
 (let (($x108 (= $x218 true)))
 (let (($x154 (= ?x194 input.dst.llvm-%m1)))
 (let (($x203 (= $x154 true)))
 (let (($x35 (and $x203 $x108)))
 (let (($x99 (and $x35 $x224)))
 (let (($x198 (and $x99 $x145)))
 (let (($x271 (forall ((input.ind-%var2133X (_ BitVec 32)) )(let ((?x192 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2133X)))
 (let ((?x112 (input.spec-%var-m1-1.1.1 input.ind-%var2133X)))
 (let (($x131 (input.spec-%var-m1-1.0.1 input.ind-%var2133X)))
 (=> $x131 (= ?x112 ?x192))))))
 ))
 (let (($x74 (forall ((input.ind-%var2132X (_ BitVec 32)) )(let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2132X)))
 (let (($x131 (input.spec-%var-m1-1.0.1 input.ind-%var2132X)))
 (= $x131 $x81))))
 ))
 (let (($x202 (and $x74 $x271)))
 (let (($x142 (and $x202 $x198)))
 (let (($x257 (forall ((input.ind-%var2143X (_ BitVec 32)) )(let ((?x223 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2143X)))
 (let ((?x236 (input.spec-%var-m2-1.1.1 input.ind-%var2143X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2143X)))
 (=> $x133 (= ?x236 ?x223))))))
 ))
 (let (($x111 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2142X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2142X)))
 (= $x133 $x134))))
 ))
 (let (($x274 (and $x111 $x257)))
 (let (($x235 (and $x274 $x142)))
 (let (($x285 (=> $x235 $x284)))
 (not $x285)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x42 (forall ((input.ind-%var2203X (_ BitVec 32)) )(let ((?x232 (bvmul input.ind-%var2203X (_ bv4 32))))
 (let ((?x198 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x282))))
 (let ((?x71 (input.spec-%var-m1-1.1.1 input.ind-%var2203X)))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2203X)))
 (=> $x215 (= ?x71 ?x84)))))))))
 ))
 (let (($x103 (forall ((input.ind-%var2202X (_ BitVec 32)) )(let (($x213 (and (bvule (_ bv0 32) input.ind-%var2202X) (bvult input.ind-%var2202X (_ bv100 32)))))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2202X)))
 (= $x215 $x213))))
 ))
 (let (($x162 (and $x103 $x42)))
 (let (($x265 (= $x162 true)))
 (let ((?x239 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x270 (concat ?x30 (concat ?x168 (concat ?x172 ?x239)))))
 (let (($x200 (= ?x270 input.dst.llvm-%m1)))
 (let (($x95 (= $x200 true)))
 (let ((?x268 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x139 (concat ?x136 (concat ?x129 ?x268)))))
 (let (($x220 (= input.dst.llvm-%m2 ?x92)))
 (let (($x7 (= input.dst.llvm-%m1 ?x270)))
 (let (($x216 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x32 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x18 (and $x32 $x216)))
 (let (($x177 (and (and $x18 $x7) $x220)))
 (let ((?x33 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x69 (= (_ bv0 32) ?x33)))
 (let ((?x161 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x234 (= (_ bv0 32) ?x161)))
 (let ((?x73 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x204 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x204)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x209 (and $x62 $x276)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (and $x260 $x209)))
 (let (($x45 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x176 $x102)))
 (let (($x130 (not $x144)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x63 $x247)))
 (let (($x245 (and (not $x275) $x130)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x106 $x173)))
 (let (($x242 (not $x40)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x17 $x20)))
 (let (($x219 (and (not $x222) $x242)))
 (let (($x119 (and (and (and (and (and (and $x219 $x245) $x46) $x45) $x208) $x118) $x234)))
 (let (($x104 (and $x119 $x69)))
 (let (($x238 (forall ((input.ind-%var2173X (_ BitVec 32)) )(let ((?x232 (bvmul input.ind-%var2173X (_ bv4 32))))
 (let ((?x198 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x282))))
 (let ((?x71 (input.spec-%var-m1-1.1.1 input.ind-%var2173X)))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2173X)))
 (=> $x215 (= ?x71 ?x84)))))))))
 ))
 (let (($x36 (forall ((input.ind-%var2172X (_ BitVec 32)) )(let (($x213 (and (bvule (_ bv0 32) input.ind-%var2172X) (bvult input.ind-%var2172X (_ bv100 32)))))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2172X)))
 (= $x215 $x213))))
 ))
 (let (($x52 (and $x36 $x238)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x196)))
 (let (($x281 (or false (or false (and (and true (or $x237 $x156)) (or $x255 $x67))))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x281)))
 (let (($x31 (and (and (and $x211 $x52) $x104) $x177)))
 (let (($x167 (forall ((input.ind-%var2163X (_ BitVec 32)) )(let ((?x232 (bvmul input.ind-%var2163X (_ bv4 32))))
 (let ((?x125 (bvadd ?x232 input.dst.llvm-%m2)))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x243))))
 (let ((?x131 (input.spec-%var-m2-1.1.1 input.ind-%var2163X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2163X)))
 (=> $x133 (= ?x131 ?x246)))))))))
 ))
 (let (($x179 (forall ((input.ind-%var2162X (_ BitVec 32)) )(let (($x213 (and (bvule (_ bv0 32) input.ind-%var2162X) (bvult input.ind-%var2162X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2162X)))
 (= $x133 $x213))))
 ))
 (let (($x100 (and $x179 $x167)))
 (let (($x183 (and $x100 $x31)))
 (let (($x201 (= $x183 true)))
 (let (($x89 (= $x18 true)))
 (let (($x128 (= ?x92 input.dst.llvm-%m2)))
 (let (($x70 (= $x128 true)))
 (let (($x217 (and $x70 $x89)))
 (let (($x19 (and $x217 $x201)))
 (let (($x94 (and $x19 $x95)))
 (let (($x251 (forall ((input.ind-%var2183X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2183X)))
 (let ((?x71 (input.spec-%var-m1-1.1.1 input.ind-%var2183X)))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2183X)))
 (=> $x215 (= ?x71 ?x74))))))
 ))
 (let (($x158 (forall ((input.ind-%var2182X (_ BitVec 32)) )(let (($x140 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2182X)))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2182X)))
 (= $x215 $x140))))
 ))
 (let (($x221 (and $x158 $x251)))
 (let (($x190 (and $x221 $x94)))
 (let (($x109 (forall ((input.ind-%var2193X (_ BitVec 32)) )(let ((?x126 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2193X)))
 (let ((?x131 (input.spec-%var-m2-1.1.1 input.ind-%var2193X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2193X)))
 (=> $x133 (= ?x131 ?x126))))))
 ))
 (let (($x6 (forall ((input.ind-%var2192X (_ BitVec 32)) )(let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2192X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2192X)))
 (= $x133 $x111))))
 ))
 (let (($x271 (and $x6 $x109)))
 (let (($x263 (and $x271 $x190)))
 (let (($x97 (=> $x263 $x265)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x42 (forall ((input.ind-%var2203X (_ BitVec 32)) )(let ((?x232 (bvmul input.ind-%var2203X (_ bv4 32))))
 (let ((?x198 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x282))))
 (let ((?x71 (input.spec-%var-m1-1.1.1 input.ind-%var2203X)))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2203X)))
 (=> $x215 (= ?x71 ?x84)))))))))
 ))
 (let (($x103 (forall ((input.ind-%var2202X (_ BitVec 32)) )(let (($x213 (and (bvule (_ bv0 32) input.ind-%var2202X) (bvult input.ind-%var2202X (_ bv100 32)))))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2202X)))
 (= $x215 $x213))))
 ))
 (let (($x162 (and $x103 $x42)))
 (let (($x265 (= $x162 true)))
 (let ((?x239 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x270 (concat ?x30 (concat ?x168 (concat ?x172 ?x239)))))
 (let (($x200 (= ?x270 input.dst.llvm-%m1)))
 (let (($x95 (= $x200 true)))
 (let ((?x268 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x139 (concat ?x136 (concat ?x129 ?x268)))))
 (let (($x220 (= input.dst.llvm-%m2 ?x92)))
 (let (($x7 (= input.dst.llvm-%m1 ?x270)))
 (let (($x216 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x32 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x18 (and $x32 $x216)))
 (let (($x177 (and (and $x18 $x7) $x220)))
 (let ((?x33 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x69 (= (_ bv0 32) ?x33)))
 (let ((?x161 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x234 (= (_ bv0 32) ?x161)))
 (let ((?x73 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x204 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x204)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x209 (and $x62 $x276)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (and $x260 $x209)))
 (let (($x45 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x176 $x102)))
 (let (($x130 (not $x144)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x63 $x247)))
 (let (($x245 (and (not $x275) $x130)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x106 $x173)))
 (let (($x242 (not $x40)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x17 $x20)))
 (let (($x219 (and (not $x222) $x242)))
 (let (($x119 (and (and (and (and (and (and $x219 $x245) $x46) $x45) $x208) $x118) $x234)))
 (let (($x104 (and $x119 $x69)))
 (let (($x238 (forall ((input.ind-%var2173X (_ BitVec 32)) )(let ((?x232 (bvmul input.ind-%var2173X (_ bv4 32))))
 (let ((?x198 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x282))))
 (let ((?x71 (input.spec-%var-m1-1.1.1 input.ind-%var2173X)))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2173X)))
 (=> $x215 (= ?x71 ?x84)))))))))
 ))
 (let (($x36 (forall ((input.ind-%var2172X (_ BitVec 32)) )(let (($x213 (and (bvule (_ bv0 32) input.ind-%var2172X) (bvult input.ind-%var2172X (_ bv100 32)))))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2172X)))
 (= $x215 $x213))))
 ))
 (let (($x52 (and $x36 $x238)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x196)))
 (let (($x281 (or false (or false (and (and true (or $x237 $x156)) (or $x255 $x67))))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x281)))
 (let (($x31 (and (and (and $x211 $x52) $x104) $x177)))
 (let (($x167 (forall ((input.ind-%var2163X (_ BitVec 32)) )(let ((?x232 (bvmul input.ind-%var2163X (_ bv4 32))))
 (let ((?x125 (bvadd ?x232 input.dst.llvm-%m2)))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x243))))
 (let ((?x131 (input.spec-%var-m2-1.1.1 input.ind-%var2163X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2163X)))
 (=> $x133 (= ?x131 ?x246)))))))))
 ))
 (let (($x179 (forall ((input.ind-%var2162X (_ BitVec 32)) )(let (($x213 (and (bvule (_ bv0 32) input.ind-%var2162X) (bvult input.ind-%var2162X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2162X)))
 (= $x133 $x213))))
 ))
 (let (($x100 (and $x179 $x167)))
 (let (($x183 (and $x100 $x31)))
 (let (($x201 (= $x183 true)))
 (let (($x89 (= $x18 true)))
 (let (($x128 (= ?x92 input.dst.llvm-%m2)))
 (let (($x70 (= $x128 true)))
 (let (($x217 (and $x70 $x89)))
 (let (($x19 (and $x217 $x201)))
 (let (($x94 (and $x19 $x95)))
 (let (($x251 (forall ((input.ind-%var2183X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2183X)))
 (let ((?x71 (input.spec-%var-m1-1.1.1 input.ind-%var2183X)))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2183X)))
 (=> $x215 (= ?x71 ?x74))))))
 ))
 (let (($x158 (forall ((input.ind-%var2182X (_ BitVec 32)) )(let (($x140 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2182X)))
 (let (($x215 (input.spec-%var-m1-1.0.1 input.ind-%var2182X)))
 (= $x215 $x140))))
 ))
 (let (($x221 (and $x158 $x251)))
 (let (($x190 (and $x221 $x94)))
 (let (($x109 (forall ((input.ind-%var2193X (_ BitVec 32)) )(let ((?x126 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2193X)))
 (let ((?x131 (input.spec-%var-m2-1.1.1 input.ind-%var2193X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2193X)))
 (=> $x133 (= ?x131 ?x126))))))
 ))
 (let (($x6 (forall ((input.ind-%var2192X (_ BitVec 32)) )(let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2192X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var2192X)))
 (= $x133 $x111))))
 ))
 (let (($x271 (and $x6 $x109)))
 (let (($x263 (and $x271 $x190)))
 (let (($x97 (=> $x263 $x265)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x44 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x24 (bvneg ?x44)))
 (let (($x99 (= ?x24 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x85 (= $x99 true)))
 (let (($x182 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x172 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x168 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x239 (and $x168 $x172)))
 (let (($x224 (and $x239 $x182)))
 (let (($x147 (= $x224 true)))
 (let ((?x65 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x253 (= (_ bv0 32) ?x65)))
 (let ((?x79 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x174 (= (_ bv0 32) ?x79)))
 (let ((?x57 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x141 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x141)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x38 $x11)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x137 $x49)))
 (let (($x113 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x9 $x37)))
 (let (($x272 (not $x29)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x112 $x160)))
 (let (($x59 (and (not $x47) $x272)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x280 $x134)))
 (let (($x218 (not $x81)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x7 $x115)))
 (let (($x194 (and (not $x58) $x218)))
 (let (($x78 (and (and (and (and (and (and $x194 $x59) $x214) $x113) $x88) $x72) $x174)))
 (let (($x83 (and $x78 $x253)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x101 (or false (or false (and (and true (or $x19 $x200)) (or $x103 $x42))))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x16 (and $x199 $x83)))
 (let (($x205 (= $x16 true)))
 (let (($x123 (= $x239 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x104 (= (_ bv0 2) ?x69)))
 (let (($x197 (= $x104 true)))
 (let (($x96 (forall ((input.ind-%var2223X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var2223X (_ bv4 32))))
 (let ((?x93 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x93))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv2 32))) ?x260)))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv3 32))) ?x276)))
 (let ((?x128 (input.spec-%var-m1-1.1.1 input.ind-%var2223X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var2223X)))
 (=> $x127 (= ?x128 ?x252))))))))))
 ))
 (let (($x20 (forall ((input.ind-%var2222X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var2222X) (bvult input.ind-%var2222X (_ bv100 32)))))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var2222X)))
 (= $x127 $x152))))
 ))
 (let (($x161 (and $x20 $x96)))
 (let (($x234 (= $x161 true)))
 (let (($x142 (forall ((input.ind-%var2213X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var2213X (_ bv4 32))))
 (let ((?x122 (bvadd ?x230 input.dst.llvm-%m2)))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x122))))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv2 32))) ?x225)))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv3 32))) ?x286)))
 (let ((?x203 (input.spec-%var-m2-1.1.1 input.ind-%var2213X)))
 (let (($x228 (input.spec-%var-m2-1.0.1 input.ind-%var2213X)))
 (=> $x228 (= ?x203 ?x284))))))))))
 ))
 (let (($x21 (forall ((input.ind-%var2212X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var2212X) (bvult input.ind-%var2212X (_ bv100 32)))))
 (let (($x228 (input.spec-%var-m2-1.0.1 input.ind-%var2212X)))
 (= $x228 $x152))))
 ))
 (let (($x282 (and $x21 $x142)))
 (let (($x285 (= $x282 true)))
 (let (($x119 (and $x285 $x234)))
 (let (($x233 (and $x119 $x197)))
 (let (($x259 (and $x233 $x123)))
 (let (($x153 (and $x259 $x205)))
 (let (($x87 (and $x153 $x147)))
 (let (($x89 (forall ((input.ind-%var2233X (_ BitVec 32)) )(let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2233X)))
 (let ((?x128 (input.spec-%var-m1-1.1.1 input.ind-%var2233X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var2233X)))
 (=> $x127 (= ?x128 ?x180))))))
 ))
 (let (($x169 (forall ((input.ind-%var2232X (_ BitVec 32)) )(let (($x5 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2232X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var2232X)))
 (= $x127 $x5))))
 ))
 (let (($x217 (and $x169 $x89)))
 (let (($x256 (and $x217 $x87)))
 (let (($x244 (forall ((input.ind-%var2243X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2243X)))
 (let ((?x203 (input.spec-%var-m2-1.1.1 input.ind-%var2243X)))
 (let (($x228 (input.spec-%var-m2-1.0.1 input.ind-%var2243X)))
 (=> $x228 (= ?x203 ?x74))))))
 ))
 (let (($x109 (forall ((input.ind-%var2242X (_ BitVec 32)) )(let (($x131 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2242X)))
 (let (($x228 (input.spec-%var-m2-1.0.1 input.ind-%var2242X)))
 (= $x228 $x131))))
 ))
 (let (($x178 (and $x109 $x244)))
 (let (($x22 (and $x178 $x256)))
 (let (($x278 (=> $x22 $x85)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x44 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x24 (bvneg ?x44)))
 (let (($x99 (= ?x24 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x85 (= $x99 true)))
 (let (($x182 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x172 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x168 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x239 (and $x168 $x172)))
 (let (($x224 (and $x239 $x182)))
 (let (($x147 (= $x224 true)))
 (let ((?x65 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x253 (= (_ bv0 32) ?x65)))
 (let ((?x79 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x174 (= (_ bv0 32) ?x79)))
 (let ((?x57 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x141 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x141)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x38 $x11)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x137 $x49)))
 (let (($x113 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x9 $x37)))
 (let (($x272 (not $x29)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x112 $x160)))
 (let (($x59 (and (not $x47) $x272)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x280 $x134)))
 (let (($x218 (not $x81)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x7 $x115)))
 (let (($x194 (and (not $x58) $x218)))
 (let (($x78 (and (and (and (and (and (and $x194 $x59) $x214) $x113) $x88) $x72) $x174)))
 (let (($x83 (and $x78 $x253)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x101 (or false (or false (and (and true (or $x19 $x200)) (or $x103 $x42))))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x16 (and $x199 $x83)))
 (let (($x205 (= $x16 true)))
 (let (($x123 (= $x239 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x104 (= (_ bv0 2) ?x69)))
 (let (($x197 (= $x104 true)))
 (let (($x96 (forall ((input.ind-%var2223X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var2223X (_ bv4 32))))
 (let ((?x93 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x93))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv2 32))) ?x260)))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv3 32))) ?x276)))
 (let ((?x128 (input.spec-%var-m1-1.1.1 input.ind-%var2223X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var2223X)))
 (=> $x127 (= ?x128 ?x252))))))))))
 ))
 (let (($x20 (forall ((input.ind-%var2222X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var2222X) (bvult input.ind-%var2222X (_ bv100 32)))))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var2222X)))
 (= $x127 $x152))))
 ))
 (let (($x161 (and $x20 $x96)))
 (let (($x234 (= $x161 true)))
 (let (($x142 (forall ((input.ind-%var2213X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var2213X (_ bv4 32))))
 (let ((?x122 (bvadd ?x230 input.dst.llvm-%m2)))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x122))))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv2 32))) ?x225)))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv3 32))) ?x286)))
 (let ((?x203 (input.spec-%var-m2-1.1.1 input.ind-%var2213X)))
 (let (($x228 (input.spec-%var-m2-1.0.1 input.ind-%var2213X)))
 (=> $x228 (= ?x203 ?x284))))))))))
 ))
 (let (($x21 (forall ((input.ind-%var2212X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var2212X) (bvult input.ind-%var2212X (_ bv100 32)))))
 (let (($x228 (input.spec-%var-m2-1.0.1 input.ind-%var2212X)))
 (= $x228 $x152))))
 ))
 (let (($x282 (and $x21 $x142)))
 (let (($x285 (= $x282 true)))
 (let (($x119 (and $x285 $x234)))
 (let (($x233 (and $x119 $x197)))
 (let (($x259 (and $x233 $x123)))
 (let (($x153 (and $x259 $x205)))
 (let (($x87 (and $x153 $x147)))
 (let (($x89 (forall ((input.ind-%var2233X (_ BitVec 32)) )(let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2233X)))
 (let ((?x128 (input.spec-%var-m1-1.1.1 input.ind-%var2233X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var2233X)))
 (=> $x127 (= ?x128 ?x180))))))
 ))
 (let (($x169 (forall ((input.ind-%var2232X (_ BitVec 32)) )(let (($x5 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2232X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var2232X)))
 (= $x127 $x5))))
 ))
 (let (($x217 (and $x169 $x89)))
 (let (($x256 (and $x217 $x87)))
 (let (($x244 (forall ((input.ind-%var2243X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2243X)))
 (let ((?x203 (input.spec-%var-m2-1.1.1 input.ind-%var2243X)))
 (let (($x228 (input.spec-%var-m2-1.0.1 input.ind-%var2243X)))
 (=> $x228 (= ?x203 ?x74))))))
 ))
 (let (($x109 (forall ((input.ind-%var2242X (_ BitVec 32)) )(let (($x131 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2242X)))
 (let (($x228 (input.spec-%var-m2-1.0.1 input.ind-%var2242X)))
 (= $x228 $x131))))
 ))
 (let (($x178 (and $x109 $x244)))
 (let (($x22 (and $x178 $x256)))
 (let (($x278 (=> $x22 $x85)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x223 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x277 (bvneg ?x223)))
 (let (($x175 (= ?x277 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x215 (= $x175 true)))
 (let (($x271 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x240 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x256 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x44 (and $x256 $x240)))
 (let (($x92 (and $x44 $x271)))
 (let (($x34 (= $x92 true)))
 (let ((?x176 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x63 (= (_ bv0 32) ?x176)))
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x191 (= (_ bv0 32) ?x130)))
 (let ((?x242 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x242)))
 (let ((?x84 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x238 (and $x106 $x120)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x67 $x238)))
 (let (($x229 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x50 $x100)))
 (let (($x156 (not $x151)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x241 (and $x237 $x56)))
 (let (($x150 (and (not $x241) $x156)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x108 $x143)))
 (let (($x167 (not $x264)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x278 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x278 $x64)))
 (let (($x188 (and (not $x61) $x167)))
 (let (($x76 (and (and (and (and (and (and $x188 $x150) $x185) $x229) $x173) $x144) $x191)))
 (let (($x52 (and $x76 $x63)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x266 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x129 (or false (or false (and (and true (or $x70 $x266)) (or $x155 $x193))))))
 (let (($x269 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x129)))
 (let (($x51 (and $x269 $x52)))
 (let (($x159 (= $x51 true)))
 (let (($x24 (= $x44 true)))
 (let ((?x231 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x181 (= (_ bv0 2) ?x231)))
 (let (($x182 (= $x181 true)))
 (let (($x253 (forall ((input.ind-%var2263X (_ BitVec 32)) )(let ((?x212 (bvmul input.ind-%var2263X (_ bv4 32))))
 (let ((?x38 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x38))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv2 32))) ?x88)))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv3 32))) ?x72)))
 (let ((?x36 (input.spec-%var-m1-1.1.1 input.ind-%var2263X)))
 (let (($x227 (input.spec-%var-m1-1.0.1 input.ind-%var2263X)))
 (=> $x227 (= ?x36 ?x174))))))))))
 ))
 (let (($x218 (forall ((input.ind-%var2262X (_ BitVec 32)) )(let (($x204 (and (bvule (_ bv0 32) input.ind-%var2262X) (bvult input.ind-%var2262X (_ bv100 32)))))
 (let (($x227 (input.spec-%var-m1-1.0.1 input.ind-%var2262X)))
 (= $x227 $x204))))
 ))
 (let (($x83 (and $x218 $x253)))
 (let (($x16 (= $x83 true)))
 (let (($x97 (forall ((input.ind-%var2253X (_ BitVec 32)) )(let ((?x212 (bvmul input.ind-%var2253X (_ bv4 32))))
 (let ((?x31 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x31))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x31 (_ bv2 32))) ?x200)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x31 (_ bv3 32))) ?x190)))
 (let ((?x268 (input.spec-%var-m2-1.1.1 input.ind-%var2253X)))
 (let (($x80 (input.spec-%var-m2-1.0.1 input.ind-%var2253X)))
 (=> $x80 (= ?x268 ?x42))))))))))
 ))
 (let (($x82 (forall ((input.ind-%var2252X (_ BitVec 32)) )(let (($x204 (and (bvule (_ bv0 32) input.ind-%var2252X) (bvult input.ind-%var2252X (_ bv100 32)))))
 (let (($x80 (input.spec-%var-m2-1.0.1 input.ind-%var2252X)))
 (= $x80 $x204))))
 ))
 (let (($x101 (and $x82 $x97)))
 (let (($x199 (= $x101 true)))
 (let (($x205 (and $x199 $x16)))
 (let (($x224 (and $x205 $x182)))
 (let (($x99 (and $x224 $x24)))
 (let (($x53 (and $x99 $x159)))
 (let (($x140 (and $x53 $x34)))
 (let (($x235 (forall ((input.ind-%var2273X (_ BitVec 32)) )(let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2273X)))
 (let ((?x36 (input.spec-%var-m1-1.1.1 input.ind-%var2273X)))
 (let (($x227 (input.spec-%var-m1-1.0.1 input.ind-%var2273X)))
 (=> $x227 (= ?x36 ?x281))))))
 ))
 (let (($x148 (forall ((input.ind-%var2272X (_ BitVec 32)) )(let (($x246 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2272X)))
 (let (($x227 (input.spec-%var-m1-1.0.1 input.ind-%var2272X)))
 (= $x227 $x246))))
 ))
 (let (($x124 (and $x148 $x235)))
 (let (($x133 (and $x124 $x140)))
 (let (($x125 (forall ((input.ind-%var2283X (_ BitVec 32)) )(let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2283X)))
 (let ((?x268 (input.spec-%var-m2-1.1.1 input.ind-%var2283X)))
 (let (($x80 (input.spec-%var-m2-1.0.1 input.ind-%var2283X)))
 (=> $x80 (= ?x268 ?x180))))))
 ))
 (let (($x244 (forall ((input.ind-%var2282X (_ BitVec 32)) )(let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2282X)))
 (let (($x80 (input.spec-%var-m2-1.0.1 input.ind-%var2282X)))
 (= $x80 $x203))))
 ))
 (let (($x213 (and $x244 $x125)))
 (let (($x254 (and $x213 $x133)))
 (let (($x251 (=> $x254 $x215)))
 (not $x251)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x223 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x277 (bvneg ?x223)))
 (let (($x175 (= ?x277 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x215 (= $x175 true)))
 (let (($x271 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x240 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x256 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x44 (and $x256 $x240)))
 (let (($x92 (and $x44 $x271)))
 (let (($x34 (= $x92 true)))
 (let ((?x176 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x63 (= (_ bv0 32) ?x176)))
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x191 (= (_ bv0 32) ?x130)))
 (let ((?x242 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x242)))
 (let ((?x84 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x238 (and $x106 $x120)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x67 $x238)))
 (let (($x229 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x50 $x100)))
 (let (($x156 (not $x151)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x241 (and $x237 $x56)))
 (let (($x150 (and (not $x241) $x156)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x108 $x143)))
 (let (($x167 (not $x264)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x278 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x278 $x64)))
 (let (($x188 (and (not $x61) $x167)))
 (let (($x76 (and (and (and (and (and (and $x188 $x150) $x185) $x229) $x173) $x144) $x191)))
 (let (($x52 (and $x76 $x63)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x266 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x129 (or false (or false (and (and true (or $x70 $x266)) (or $x155 $x193))))))
 (let (($x269 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x129)))
 (let (($x51 (and $x269 $x52)))
 (let (($x159 (= $x51 true)))
 (let (($x24 (= $x44 true)))
 (let ((?x231 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x181 (= (_ bv0 2) ?x231)))
 (let (($x182 (= $x181 true)))
 (let (($x253 (forall ((input.ind-%var2263X (_ BitVec 32)) )(let ((?x212 (bvmul input.ind-%var2263X (_ bv4 32))))
 (let ((?x38 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x38))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv2 32))) ?x88)))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv3 32))) ?x72)))
 (let ((?x36 (input.spec-%var-m1-1.1.1 input.ind-%var2263X)))
 (let (($x227 (input.spec-%var-m1-1.0.1 input.ind-%var2263X)))
 (=> $x227 (= ?x36 ?x174))))))))))
 ))
 (let (($x218 (forall ((input.ind-%var2262X (_ BitVec 32)) )(let (($x204 (and (bvule (_ bv0 32) input.ind-%var2262X) (bvult input.ind-%var2262X (_ bv100 32)))))
 (let (($x227 (input.spec-%var-m1-1.0.1 input.ind-%var2262X)))
 (= $x227 $x204))))
 ))
 (let (($x83 (and $x218 $x253)))
 (let (($x16 (= $x83 true)))
 (let (($x97 (forall ((input.ind-%var2253X (_ BitVec 32)) )(let ((?x212 (bvmul input.ind-%var2253X (_ bv4 32))))
 (let ((?x31 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x31))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x31 (_ bv2 32))) ?x200)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x31 (_ bv3 32))) ?x190)))
 (let ((?x268 (input.spec-%var-m2-1.1.1 input.ind-%var2253X)))
 (let (($x80 (input.spec-%var-m2-1.0.1 input.ind-%var2253X)))
 (=> $x80 (= ?x268 ?x42))))))))))
 ))
 (let (($x82 (forall ((input.ind-%var2252X (_ BitVec 32)) )(let (($x204 (and (bvule (_ bv0 32) input.ind-%var2252X) (bvult input.ind-%var2252X (_ bv100 32)))))
 (let (($x80 (input.spec-%var-m2-1.0.1 input.ind-%var2252X)))
 (= $x80 $x204))))
 ))
 (let (($x101 (and $x82 $x97)))
 (let (($x199 (= $x101 true)))
 (let (($x205 (and $x199 $x16)))
 (let (($x224 (and $x205 $x182)))
 (let (($x99 (and $x224 $x24)))
 (let (($x53 (and $x99 $x159)))
 (let (($x140 (and $x53 $x34)))
 (let (($x235 (forall ((input.ind-%var2273X (_ BitVec 32)) )(let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2273X)))
 (let ((?x36 (input.spec-%var-m1-1.1.1 input.ind-%var2273X)))
 (let (($x227 (input.spec-%var-m1-1.0.1 input.ind-%var2273X)))
 (=> $x227 (= ?x36 ?x281))))))
 ))
 (let (($x148 (forall ((input.ind-%var2272X (_ BitVec 32)) )(let (($x246 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2272X)))
 (let (($x227 (input.spec-%var-m1-1.0.1 input.ind-%var2272X)))
 (= $x227 $x246))))
 ))
 (let (($x124 (and $x148 $x235)))
 (let (($x133 (and $x124 $x140)))
 (let (($x125 (forall ((input.ind-%var2283X (_ BitVec 32)) )(let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2283X)))
 (let ((?x268 (input.spec-%var-m2-1.1.1 input.ind-%var2283X)))
 (let (($x80 (input.spec-%var-m2-1.0.1 input.ind-%var2283X)))
 (=> $x80 (= ?x268 ?x180))))))
 ))
 (let (($x244 (forall ((input.ind-%var2282X (_ BitVec 32)) )(let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2282X)))
 (let (($x80 (input.spec-%var-m2-1.0.1 input.ind-%var2282X)))
 (= $x80 $x203))))
 ))
 (let (($x213 (and $x244 $x125)))
 (let (($x254 (and $x213 $x133)))
 (let (($x251 (=> $x254 $x215)))
 (not $x251)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x178 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x111 (=> $x178 true)))
 (let (($x128 (= $x111 true)))
 (let (($x283 (= $x178 true)))
 (let ((?x91 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x29 (= (_ bv0 32) ?x91)))
 (let ((?x41 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x135 (= (_ bv0 32) ?x41)))
 (let ((?x9 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x7 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x160 $x58)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x177 $x60)))
 (let (($x260 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x233 (and $x197 $x33)))
 (let (($x163 (not $x233)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x48 $x168)))
 (let (($x282 (and (not $x104) $x163)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x17 $x40)))
 (let (($x119 (not $x161)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x251 $x184)))
 (let (($x123 (and (not $x142) $x119)))
 (let (($x115 (and (and (and (and (and (and $x123 $x282) $x209) $x260) $x47) $x12) $x135)))
 (let (($x280 (and $x115 $x29)))
 (let (($x232 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x14 (or false (or false (and (and true (or $x198 $x230)) (or $x196 $x232))))))
 (let (($x276 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x14)))
 (let (($x134 (and $x276 $x280)))
 (let (($x105 (= $x134 true)))
 (let (($x71 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x133 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x223 (and $x133 $x71)))
 (let (($x277 (= $x223 true)))
 (let ((?x46 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x32 (= (_ bv0 2) ?x46)))
 (let (($x271 (= $x32 true)))
 (let (($x63 (forall ((input.ind-%var2303X (_ BitVec 32)) )(let ((?x68 (bvmul input.ind-%var2303X (_ bv4 32))))
 (let ((?x106 (bvadd ?x68 input.dst.llvm-%m1)))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x106))))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x106 (_ bv2 32))) ?x173)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x106 (_ bv3 32))) ?x144)))
 (let ((?x95 (input.spec-%var-m1-1.1.1 input.ind-%var2303X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var2303X)))
 (=> $x45 (= ?x95 ?x191))))))))))
 ))
 (let (($x167 (forall ((input.ind-%var2302X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var2302X) (bvult input.ind-%var2302X (_ bv100 32)))))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var2302X)))
 (= $x45 $x57))))
 ))
 (let (($x52 (and $x167 $x63)))
 (let (($x51 (= $x52 true)))
 (let (($x139 (forall ((input.ind-%var2293X (_ BitVec 32)) )(let ((?x68 (bvmul input.ind-%var2293X (_ bv4 32))))
 (let ((?x6 (bvadd ?x68 input.dst.llvm-%m2)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x6))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x266)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x226)))
 (let ((?x122 (input.spec-%var-m2-1.1.1 input.ind-%var2293X)))
 (let (($x118 (input.spec-%var-m2-1.0.1 input.ind-%var2293X)))
 (=> $x118 (= ?x122 ?x193))))))))))
 ))
 (let (($x49 (forall ((input.ind-%var2292X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var2292X) (bvult input.ind-%var2292X (_ bv100 32)))))
 (let (($x118 (input.spec-%var-m2-1.0.1 input.ind-%var2292X)))
 (= $x118 $x57))))
 ))
 (let (($x129 (and $x49 $x139)))
 (let (($x269 (= $x129 true)))
 (let (($x159 (and $x269 $x51)))
 (let (($x92 (and $x159 $x271)))
 (let (($x175 (and $x92 $x277)))
 (let (($x112 (and $x175 $x105)))
 (let (($x225 (and $x112 $x283)))
 (let (($x162 (forall ((input.ind-%var2313X (_ BitVec 32)) )(let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2313X)))
 (let ((?x95 (input.spec-%var-m1-1.1.1 input.ind-%var2313X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var2313X)))
 (=> $x45 (= ?x95 ?x19))))))
 ))
 (let (($x172 (forall ((input.ind-%var2312X (_ BitVec 32)) )(let (($x96 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2312X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var2312X)))
 (= $x45 $x96))))
 ))
 (let (($x265 (and $x172 $x162)))
 (let (($x5 (and $x265 $x225)))
 (let (($x62 (forall ((input.ind-%var2323X (_ BitVec 32)) )(let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2323X)))
 (let ((?x122 (input.spec-%var-m2-1.1.1 input.ind-%var2323X)))
 (let (($x118 (input.spec-%var-m2-1.0.1 input.ind-%var2323X)))
 (=> $x118 (= ?x122 ?x281))))))
 ))
 (let (($x125 (forall ((input.ind-%var2322X (_ BitVec 32)) )(let (($x268 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2322X)))
 (let (($x118 (input.spec-%var-m2-1.0.1 input.ind-%var2322X)))
 (= $x118 $x268))))
 ))
 (let (($x20 (and $x125 $x62)))
 (let (($x228 (and $x20 $x5)))
 (let (($x279 (=> $x228 $x128)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x178 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x111 (=> $x178 true)))
 (let (($x128 (= $x111 true)))
 (let (($x283 (= $x178 true)))
 (let ((?x91 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x29 (= (_ bv0 32) ?x91)))
 (let ((?x41 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x135 (= (_ bv0 32) ?x41)))
 (let ((?x9 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x7 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x160 $x58)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x177 $x60)))
 (let (($x260 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x233 (and $x197 $x33)))
 (let (($x163 (not $x233)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x48 $x168)))
 (let (($x282 (and (not $x104) $x163)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x17 $x40)))
 (let (($x119 (not $x161)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x251 $x184)))
 (let (($x123 (and (not $x142) $x119)))
 (let (($x115 (and (and (and (and (and (and $x123 $x282) $x209) $x260) $x47) $x12) $x135)))
 (let (($x280 (and $x115 $x29)))
 (let (($x232 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x14 (or false (or false (and (and true (or $x198 $x230)) (or $x196 $x232))))))
 (let (($x276 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x14)))
 (let (($x134 (and $x276 $x280)))
 (let (($x105 (= $x134 true)))
 (let (($x71 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x133 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x223 (and $x133 $x71)))
 (let (($x277 (= $x223 true)))
 (let ((?x46 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x32 (= (_ bv0 2) ?x46)))
 (let (($x271 (= $x32 true)))
 (let (($x63 (forall ((input.ind-%var2303X (_ BitVec 32)) )(let ((?x68 (bvmul input.ind-%var2303X (_ bv4 32))))
 (let ((?x106 (bvadd ?x68 input.dst.llvm-%m1)))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x106))))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x106 (_ bv2 32))) ?x173)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x106 (_ bv3 32))) ?x144)))
 (let ((?x95 (input.spec-%var-m1-1.1.1 input.ind-%var2303X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var2303X)))
 (=> $x45 (= ?x95 ?x191))))))))))
 ))
 (let (($x167 (forall ((input.ind-%var2302X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var2302X) (bvult input.ind-%var2302X (_ bv100 32)))))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var2302X)))
 (= $x45 $x57))))
 ))
 (let (($x52 (and $x167 $x63)))
 (let (($x51 (= $x52 true)))
 (let (($x139 (forall ((input.ind-%var2293X (_ BitVec 32)) )(let ((?x68 (bvmul input.ind-%var2293X (_ bv4 32))))
 (let ((?x6 (bvadd ?x68 input.dst.llvm-%m2)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x6))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x266)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x226)))
 (let ((?x122 (input.spec-%var-m2-1.1.1 input.ind-%var2293X)))
 (let (($x118 (input.spec-%var-m2-1.0.1 input.ind-%var2293X)))
 (=> $x118 (= ?x122 ?x193))))))))))
 ))
 (let (($x49 (forall ((input.ind-%var2292X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var2292X) (bvult input.ind-%var2292X (_ bv100 32)))))
 (let (($x118 (input.spec-%var-m2-1.0.1 input.ind-%var2292X)))
 (= $x118 $x57))))
 ))
 (let (($x129 (and $x49 $x139)))
 (let (($x269 (= $x129 true)))
 (let (($x159 (and $x269 $x51)))
 (let (($x92 (and $x159 $x271)))
 (let (($x175 (and $x92 $x277)))
 (let (($x112 (and $x175 $x105)))
 (let (($x225 (and $x112 $x283)))
 (let (($x162 (forall ((input.ind-%var2313X (_ BitVec 32)) )(let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2313X)))
 (let ((?x95 (input.spec-%var-m1-1.1.1 input.ind-%var2313X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var2313X)))
 (=> $x45 (= ?x95 ?x19))))))
 ))
 (let (($x172 (forall ((input.ind-%var2312X (_ BitVec 32)) )(let (($x96 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2312X)))
 (let (($x45 (input.spec-%var-m1-1.0.1 input.ind-%var2312X)))
 (= $x45 $x96))))
 ))
 (let (($x265 (and $x172 $x162)))
 (let (($x5 (and $x265 $x225)))
 (let (($x62 (forall ((input.ind-%var2323X (_ BitVec 32)) )(let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2323X)))
 (let ((?x122 (input.spec-%var-m2-1.1.1 input.ind-%var2323X)))
 (let (($x118 (input.spec-%var-m2-1.0.1 input.ind-%var2323X)))
 (=> $x118 (= ?x122 ?x281))))))
 ))
 (let (($x125 (forall ((input.ind-%var2322X (_ BitVec 32)) )(let (($x268 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2322X)))
 (let (($x118 (input.spec-%var-m2-1.0.1 input.ind-%var2322X)))
 (= $x118 $x268))))
 ))
 (let (($x20 (and $x125 $x62)))
 (let (($x228 (and $x20 $x5)))
 (let (($x279 (=> $x228 $x128)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x235 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x222 (=> $x235 true)))
 (let (($x25 (= $x222 true)))
 (let (($x194 (= $x235 true)))
 (let ((?x237 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x67 (= (_ bv0 32) ?x237)))
 (let ((?x143 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x275 (= (_ bv0 32) ?x143)))
 (let ((?x64 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x185 (and $x156 $x150)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x151 $x185)))
 (let (($x179 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x56 $x278)))
 (let (($x187 (not $x61)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x270 (and $x243 $x88)))
 (let (($x50 (and (not $x270) $x187)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x224 $x22)))
 (let (($x101 (not $x99)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x286 $x103)))
 (let (($x132 (and (not $x153) $x101)))
 (let (($x80 (and (and (and (and (and (and $x132 $x50) $x248) $x179) $x229) $x108) $x275)))
 (let (($x131 (and $x80 $x67)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x204)))
 (let (($x256 (or false (or false (and (and true (or $x234 $x141)) (or $x83 $x205))))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x256)))
 (let (($x36 (and $x182 $x131)))
 (let (($x66 (= $x36 true)))
 (let (($x82 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x244 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x94 (and $x244 $x82)))
 (let (($x212 (= $x94 true)))
 (let ((?x8 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x178 (bvneg ?x8)))
 (let (($x128 (= ?x178 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x279 (= $x128 true)))
 (let (($x225 (= ?x178 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (= $x225 true)))
 (let (($x29 (forall ((input.ind-%var2343X (_ BitVec 32)) )(let ((?x249 (bvmul input.ind-%var2343X (_ bv4 32))))
 (let ((?x160 (bvadd ?x249 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x160))))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x160 (_ bv2 32))) ?x47)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x160 (_ bv3 32))) ?x12)))
 (let ((?x31 (input.spec-%var-m2-1.1.1 input.ind-%var2343X)))
 (let (($x65 (input.spec-%var-m2-1.0.1 input.ind-%var2343X)))
 (=> $x65 (= ?x31 ?x135))))))))))
 ))
 (let (($x119 (forall ((input.ind-%var2342X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var2342X) (bvult input.ind-%var2342X (_ bv100 32)))))
 (let (($x65 (input.spec-%var-m2-1.0.1 input.ind-%var2342X)))
 (= $x65 $x242))))
 ))
 (let (($x280 (and $x119 $x29)))
 (let (($x134 (= $x280 true)))
 (let (($x152 (forall ((input.ind-%var2333X (_ BitVec 32)) )(let ((?x249 (bvmul input.ind-%var2333X (_ bv4 32))))
 (let ((?x109 (bvadd ?x249 input.dst.llvm-%m1)))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x109))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x109 (_ bv2 32))) ?x230)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x109 (_ bv3 32))) ?x216)))
 (let ((?x166 (input.spec-%var-m1-1.1.1 input.ind-%var2333X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var2333X)))
 (=> $x11 (= ?x166 ?x232))))))))))
 ))
 (let (($x238 (forall ((input.ind-%var2332X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var2332X) (bvult input.ind-%var2332X (_ bv100 32)))))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var2332X)))
 (= $x11 $x242))))
 ))
 (let (($x14 (and $x238 $x152)))
 (let (($x276 (= $x14 true)))
 (let (($x105 (and $x276 $x134)))
 (let (($x228 (and $x105 $x5)))
 (let (($x221 (and $x228 $x279)))
 (let (($x183 (and $x221 $x212)))
 (let (($x217 (and $x183 $x66)))
 (let (($x18 (and $x217 $x194)))
 (let (($x136 (forall ((input.ind-%var2353X (_ BitVec 32)) )(let ((?x70 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2353X)))
 (let ((?x166 (input.spec-%var-m1-1.1.1 input.ind-%var2353X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var2353X)))
 (=> $x11 (= ?x166 ?x70))))))
 ))
 (let (($x240 (forall ((input.ind-%var2352X (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2352X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var2352X)))
 (= $x11 $x253))))
 ))
 (let (($x54 (and $x240 $x136)))
 (let (($x127 (and $x54 $x18)))
 (let (($x75 (forall ((input.ind-%var2363X (_ BitVec 32)) )(let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2363X)))
 (let ((?x31 (input.spec-%var-m2-1.1.1 input.ind-%var2363X)))
 (let (($x65 (input.spec-%var-m2-1.0.1 input.ind-%var2363X)))
 (=> $x65 (= ?x31 ?x19))))))
 ))
 (let (($x62 (forall ((input.ind-%var2362X (_ BitVec 32)) )(let (($x122 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2362X)))
 (let (($x65 (input.spec-%var-m2-1.0.1 input.ind-%var2362X)))
 (= $x65 $x122))))
 ))
 (let (($x218 (and $x62 $x75)))
 (let (($x89 (and $x218 $x127)))
 (let (($x192 (=> $x89 $x25)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x235 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x222 (=> $x235 true)))
 (let (($x25 (= $x222 true)))
 (let (($x194 (= $x235 true)))
 (let ((?x237 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x67 (= (_ bv0 32) ?x237)))
 (let ((?x143 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x275 (= (_ bv0 32) ?x143)))
 (let ((?x64 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x185 (and $x156 $x150)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x151 $x185)))
 (let (($x179 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x56 $x278)))
 (let (($x187 (not $x61)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x270 (and $x243 $x88)))
 (let (($x50 (and (not $x270) $x187)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x224 $x22)))
 (let (($x101 (not $x99)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x286 $x103)))
 (let (($x132 (and (not $x153) $x101)))
 (let (($x80 (and (and (and (and (and (and $x132 $x50) $x248) $x179) $x229) $x108) $x275)))
 (let (($x131 (and $x80 $x67)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x204)))
 (let (($x256 (or false (or false (and (and true (or $x234 $x141)) (or $x83 $x205))))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x256)))
 (let (($x36 (and $x182 $x131)))
 (let (($x66 (= $x36 true)))
 (let (($x82 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x244 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x94 (and $x244 $x82)))
 (let (($x212 (= $x94 true)))
 (let ((?x8 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x178 (bvneg ?x8)))
 (let (($x128 (= ?x178 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x279 (= $x128 true)))
 (let (($x225 (= ?x178 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (= $x225 true)))
 (let (($x29 (forall ((input.ind-%var2343X (_ BitVec 32)) )(let ((?x249 (bvmul input.ind-%var2343X (_ bv4 32))))
 (let ((?x160 (bvadd ?x249 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x160))))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x160 (_ bv2 32))) ?x47)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x160 (_ bv3 32))) ?x12)))
 (let ((?x31 (input.spec-%var-m2-1.1.1 input.ind-%var2343X)))
 (let (($x65 (input.spec-%var-m2-1.0.1 input.ind-%var2343X)))
 (=> $x65 (= ?x31 ?x135))))))))))
 ))
 (let (($x119 (forall ((input.ind-%var2342X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var2342X) (bvult input.ind-%var2342X (_ bv100 32)))))
 (let (($x65 (input.spec-%var-m2-1.0.1 input.ind-%var2342X)))
 (= $x65 $x242))))
 ))
 (let (($x280 (and $x119 $x29)))
 (let (($x134 (= $x280 true)))
 (let (($x152 (forall ((input.ind-%var2333X (_ BitVec 32)) )(let ((?x249 (bvmul input.ind-%var2333X (_ bv4 32))))
 (let ((?x109 (bvadd ?x249 input.dst.llvm-%m1)))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x109))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x109 (_ bv2 32))) ?x230)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x109 (_ bv3 32))) ?x216)))
 (let ((?x166 (input.spec-%var-m1-1.1.1 input.ind-%var2333X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var2333X)))
 (=> $x11 (= ?x166 ?x232))))))))))
 ))
 (let (($x238 (forall ((input.ind-%var2332X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var2332X) (bvult input.ind-%var2332X (_ bv100 32)))))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var2332X)))
 (= $x11 $x242))))
 ))
 (let (($x14 (and $x238 $x152)))
 (let (($x276 (= $x14 true)))
 (let (($x105 (and $x276 $x134)))
 (let (($x228 (and $x105 $x5)))
 (let (($x221 (and $x228 $x279)))
 (let (($x183 (and $x221 $x212)))
 (let (($x217 (and $x183 $x66)))
 (let (($x18 (and $x217 $x194)))
 (let (($x136 (forall ((input.ind-%var2353X (_ BitVec 32)) )(let ((?x70 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2353X)))
 (let ((?x166 (input.spec-%var-m1-1.1.1 input.ind-%var2353X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var2353X)))
 (=> $x11 (= ?x166 ?x70))))))
 ))
 (let (($x240 (forall ((input.ind-%var2352X (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2352X)))
 (let (($x11 (input.spec-%var-m1-1.0.1 input.ind-%var2352X)))
 (= $x11 $x253))))
 ))
 (let (($x54 (and $x240 $x136)))
 (let (($x127 (and $x54 $x18)))
 (let (($x75 (forall ((input.ind-%var2363X (_ BitVec 32)) )(let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2363X)))
 (let ((?x31 (input.spec-%var-m2-1.1.1 input.ind-%var2363X)))
 (let (($x65 (input.spec-%var-m2-1.0.1 input.ind-%var2363X)))
 (=> $x65 (= ?x31 ?x19))))))
 ))
 (let (($x62 (forall ((input.ind-%var2362X (_ BitVec 32)) )(let (($x122 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2362X)))
 (let (($x65 (input.spec-%var-m2-1.0.1 input.ind-%var2362X)))
 (= $x65 $x122))))
 ))
 (let (($x218 (and $x62 $x75)))
 (let (($x89 (and $x218 $x127)))
 (let (($x192 (=> $x89 $x25)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x157 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x154 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x157)))
 (let ((?x188 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x145 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x188)))
 (let (($x15 (= ?x145 ?x154)))
 (let (($x189 (= $x15 true)))
 (let ((?x20 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x202 (bvneg ?x20)))
 (let (($x164 (= ?x202 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (= $x164 true)))
 (let (($x96 (= ?x202 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x118 (= $x96 true)))
 (let (($x260 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x131 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x237 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x36 (and $x237 $x131)))
 (let (($x40 (and $x36 $x260)))
 (let (($x59 (= $x40 true)))
 (let (($x184 (= $x260 true)))
 (let ((?x251 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x142 (= (_ bv0 32) ?x251)))
 (let ((?x85 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x168 (= (_ bv0 32) ?x85)))
 (let ((?x73 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x175 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x175)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x254 $x129)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x245 (and $x92 $x106)))
 (let (($x53 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x255 $x52)))
 (let (($x223 (not $x159)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x144 $x139)))
 (let (($x140 (and (not $x264) $x223)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x79 $x174)))
 (let (($x57 (not $x231)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x227 $x235)))
 (let (($x84 (and (not $x147) $x57)))
 (let (($x272 (and (and (and (and (and (and $x84 $x140) $x32) $x53) $x245) $x173) $x168)))
 (let (($x93 (and $x272 $x142)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x222 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x222)))
 (let (($x281 (or false (or false (and (and true (or $x25 $x192)) (or $x172 $x49))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x281)))
 (let (($x233 (and $x155 $x93)))
 (let (($x163 (= $x233 true)))
 (let (($x66 (= $x36 true)))
 (let (($x64 (forall ((input.ind-%var2383X (_ BitVec 32)) )(let ((?x148 (bvmul input.ind-%var2383X (_ bv4 32))))
 (let ((?x219 (bvadd ?x148 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x219))))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x219 (_ bv2 32))) ?x179)))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x219 (_ bv3 32))) ?x156)))
 (let ((?x6 (input.spec-%var-m2-1.1.1 input.ind-%var2383X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var2383X)))
 (=> $x176 (= ?x6 ?x185))))))))))
 ))
 (let (($x286 (forall ((input.ind-%var2382X (_ BitVec 32)) )(let (($x9 (and (bvule (_ bv0 32) input.ind-%var2382X) (bvult input.ind-%var2382X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var2382X)))
 (= $x176 $x9))))
 ))
 (let (($x108 (and $x286 $x64)))
 (let (($x246 (= $x108 true)))
 (let (($x97 (forall ((input.ind-%var2373X (_ BitVec 32)) )(let ((?x148 (bvmul input.ind-%var2373X (_ bv4 32))))
 (let ((?x82 (bvadd ?x148 input.dst.llvm-%m1)))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x82))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x82 (_ bv2 32))) ?x30)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x82 (_ bv3 32))) ?x252)))
 (let ((?x211 (input.spec-%var-m1-1.1.1 input.ind-%var2373X)))
 (let (($x120 (input.spec-%var-m1-1.0.1 input.ind-%var2373X)))
 (=> $x120 (= ?x211 ?x69))))))))))
 ))
 (let (($x60 (forall ((input.ind-%var2372X (_ BitVec 32)) )(let (($x9 (and (bvule (_ bv0 32) input.ind-%var2372X) (bvult input.ind-%var2372X (_ bv100 32)))))
 (let (($x120 (input.spec-%var-m1-1.0.1 input.ind-%var2372X)))
 (= $x120 $x9))))
 ))
 (let (($x81 (and $x60 $x97)))
 (let (($x83 (= $x81 true)))
 (let (($x143 (and $x83 $x246)))
 (let (($x217 (and $x143 $x66)))
 (let (($x33 (and $x217 $x163)))
 (let (($x17 (and $x33 $x184)))
 (let (($x48 (and $x17 $x59)))
 (let (($x203 (and $x48 $x118)))
 (let (($x42 (and $x203 $x124)))
 (let (($x210 (forall ((input.ind-%var2393X (_ BitVec 32)) )(let ((?x198 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2393X)))
 (let ((?x211 (input.spec-%var-m1-1.1.1 input.ind-%var2393X)))
 (let (($x120 (input.spec-%var-m1-1.0.1 input.ind-%var2393X)))
 (=> $x120 (= ?x211 ?x198))))))
 ))
 (let (($x71 (forall ((input.ind-%var2392X (_ BitVec 32)) )(let (($x63 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2392X)))
 (let (($x120 (input.spec-%var-m1-1.0.1 input.ind-%var2392X)))
 (= $x120 $x63))))
 ))
 (let (($x28 (and $x71 $x210)))
 (let (($x45 (and $x28 $x42)))
 (let (($x102 (forall ((input.ind-%var2403X (_ BitVec 32)) )(let ((?x70 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2403X)))
 (let ((?x6 (input.spec-%var-m2-1.1.1 input.ind-%var2403X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var2403X)))
 (=> $x176 (= ?x6 ?x70))))))
 ))
 (let (($x75 (forall ((input.ind-%var2402X (_ BitVec 32)) )(let (($x31 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2402X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var2402X)))
 (= $x176 $x31))))
 ))
 (let (($x167 (and $x75 $x102)))
 (let (($x162 (and $x167 $x45)))
 (let (($x116 (=> $x162 $x189)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x157 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x154 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x157)))
 (let ((?x188 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x145 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x188)))
 (let (($x15 (= ?x145 ?x154)))
 (let (($x189 (= $x15 true)))
 (let ((?x20 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x202 (bvneg ?x20)))
 (let (($x164 (= ?x202 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (= $x164 true)))
 (let (($x96 (= ?x202 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x118 (= $x96 true)))
 (let (($x260 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x131 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x237 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x36 (and $x237 $x131)))
 (let (($x40 (and $x36 $x260)))
 (let (($x59 (= $x40 true)))
 (let (($x184 (= $x260 true)))
 (let ((?x251 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x142 (= (_ bv0 32) ?x251)))
 (let ((?x85 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x168 (= (_ bv0 32) ?x85)))
 (let ((?x73 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x175 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x175)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x254 $x129)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x245 (and $x92 $x106)))
 (let (($x53 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x255 $x52)))
 (let (($x223 (not $x159)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x144 $x139)))
 (let (($x140 (and (not $x264) $x223)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x79 $x174)))
 (let (($x57 (not $x231)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x227 $x235)))
 (let (($x84 (and (not $x147) $x57)))
 (let (($x272 (and (and (and (and (and (and $x84 $x140) $x32) $x53) $x245) $x173) $x168)))
 (let (($x93 (and $x272 $x142)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x222 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x222)))
 (let (($x281 (or false (or false (and (and true (or $x25 $x192)) (or $x172 $x49))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x281)))
 (let (($x233 (and $x155 $x93)))
 (let (($x163 (= $x233 true)))
 (let (($x66 (= $x36 true)))
 (let (($x64 (forall ((input.ind-%var2383X (_ BitVec 32)) )(let ((?x148 (bvmul input.ind-%var2383X (_ bv4 32))))
 (let ((?x219 (bvadd ?x148 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x219))))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x219 (_ bv2 32))) ?x179)))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x219 (_ bv3 32))) ?x156)))
 (let ((?x6 (input.spec-%var-m2-1.1.1 input.ind-%var2383X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var2383X)))
 (=> $x176 (= ?x6 ?x185))))))))))
 ))
 (let (($x286 (forall ((input.ind-%var2382X (_ BitVec 32)) )(let (($x9 (and (bvule (_ bv0 32) input.ind-%var2382X) (bvult input.ind-%var2382X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var2382X)))
 (= $x176 $x9))))
 ))
 (let (($x108 (and $x286 $x64)))
 (let (($x246 (= $x108 true)))
 (let (($x97 (forall ((input.ind-%var2373X (_ BitVec 32)) )(let ((?x148 (bvmul input.ind-%var2373X (_ bv4 32))))
 (let ((?x82 (bvadd ?x148 input.dst.llvm-%m1)))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x82))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x82 (_ bv2 32))) ?x30)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x82 (_ bv3 32))) ?x252)))
 (let ((?x211 (input.spec-%var-m1-1.1.1 input.ind-%var2373X)))
 (let (($x120 (input.spec-%var-m1-1.0.1 input.ind-%var2373X)))
 (=> $x120 (= ?x211 ?x69))))))))))
 ))
 (let (($x60 (forall ((input.ind-%var2372X (_ BitVec 32)) )(let (($x9 (and (bvule (_ bv0 32) input.ind-%var2372X) (bvult input.ind-%var2372X (_ bv100 32)))))
 (let (($x120 (input.spec-%var-m1-1.0.1 input.ind-%var2372X)))
 (= $x120 $x9))))
 ))
 (let (($x81 (and $x60 $x97)))
 (let (($x83 (= $x81 true)))
 (let (($x143 (and $x83 $x246)))
 (let (($x217 (and $x143 $x66)))
 (let (($x33 (and $x217 $x163)))
 (let (($x17 (and $x33 $x184)))
 (let (($x48 (and $x17 $x59)))
 (let (($x203 (and $x48 $x118)))
 (let (($x42 (and $x203 $x124)))
 (let (($x210 (forall ((input.ind-%var2393X (_ BitVec 32)) )(let ((?x198 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2393X)))
 (let ((?x211 (input.spec-%var-m1-1.1.1 input.ind-%var2393X)))
 (let (($x120 (input.spec-%var-m1-1.0.1 input.ind-%var2393X)))
 (=> $x120 (= ?x211 ?x198))))))
 ))
 (let (($x71 (forall ((input.ind-%var2392X (_ BitVec 32)) )(let (($x63 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2392X)))
 (let (($x120 (input.spec-%var-m1-1.0.1 input.ind-%var2392X)))
 (= $x120 $x63))))
 ))
 (let (($x28 (and $x71 $x210)))
 (let (($x45 (and $x28 $x42)))
 (let (($x102 (forall ((input.ind-%var2403X (_ BitVec 32)) )(let ((?x70 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2403X)))
 (let ((?x6 (input.spec-%var-m2-1.1.1 input.ind-%var2403X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var2403X)))
 (=> $x176 (= ?x6 ?x70))))))
 ))
 (let (($x75 (forall ((input.ind-%var2402X (_ BitVec 32)) )(let (($x31 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2402X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var2402X)))
 (= $x176 $x31))))
 ))
 (let (($x167 (and $x75 $x102)))
 (let (($x162 (and $x167 $x45)))
 (let (($x116 (=> $x162 $x189)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x225 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x276 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x75 (or (bvugt input.memlabel-mem--arg.0_begin ?x6) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x75) (or $x276 $x225)))))))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= ?x100 (_ bv0 32))))
 (let ((?x58 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x181 $x148)))
 (let (($x156 (and $x63 $x151)))
 (let (($x185 (and $x156 $x182)))
 (and $x185 $x208)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x225 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x276 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x75 (or (bvugt input.memlabel-mem--arg.0_begin ?x6) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x75) (or $x276 $x225)))))))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= ?x100 (_ bv0 32))))
 (let ((?x58 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x181 $x148)))
 (let (($x156 (and $x63 $x151)))
 (let (($x185 (and $x156 $x182)))
 (and $x185 $x208)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x27 (= false true)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x11 (concat ?x285 (concat ?x65 ?x230)))))
 (let (($x123 (= ?x136 input.dst.llvm-%m)))
 (let (($x274 (= $x123 true)))
 (let ((?x132 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x87 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x132 (_ bv3 32)))))
 (let (($x218 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x205 $x87)))))))
 (let (($x243 (= $x218 true)))
 (let ((?x160 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x44 (bvugt ?x160 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x160 (_ bv3 32)))))
 (let (($x270 (=> (bvule ?x160 (bvsub (bvadd ?x160 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x44)))))))
 (let (($x113 (= $x270 true)))
 (let (($x8 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x14 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x8)))))))
 (let (($x280 (= $x14 true)))
 (let (($x12 (forall ((input.ind-%var2471X (_ BitVec 32)) )(let ((?x74 (bvadd (bvmul input.ind-%var2471X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x226))))
 (let ((?x71 (input.spec-%var-m-0.1.1 input.ind-%var2471X)))
 (let (($x232 (input.spec-%var-m-0.0.1 input.ind-%var2471X)))
 (=> $x232 (= ?x71 ?x242))))))))
 ))
 (let (($x203 (forall ((input.ind-%var2470X (_ BitVec 32)) )(let (($x232 (input.spec-%var-m-0.0.1 input.ind-%var2470X)))
 (= $x232 (and (bvule (_ bv0 32) input.ind-%var2470X) (bvult input.ind-%var2470X (_ bv100 32))))))
 ))
 (let (($x152 (and $x203 $x12)))
 (let (($x161 (= $x152 true)))
 (let ((?x233 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x163 (= (_ bv0 32) ?x233)))
 (let ((?x251 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x272 $x142)))
 (let (($x33 (and $x93 $x163)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x92 $x33)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x245)))))))
 (let (($x209 (and $x168 $x282)))
 (let (($x260 (= $x209 true)))
 (let ((?x231 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x140 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x231 (_ bv3 32)))))
 (let (($x53 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x223 $x140)))))))
 (let (($x144 (= $x53 true)))
 (let (($x184 (and $x144 $x260)))
 (let (($x259 (and $x184 $x161)))
 (let (($x105 (and $x259 $x280)))
 (let (($x215 (and $x105 $x113)))
 (let (($x101 (and $x215 $x243)))
 (let (($x77 (and $x101 $x274)))
 (let ((?x198 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x281 (= ?x198 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x89 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x192 (ite $x89 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x192 (_ bv1 32))))
 (let (($x155 (=> $x49 $x281)))
 (let (($x126 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x68 (= $x49 $x126)))
 (let (($x216 (= false false)))
 (let (($x186 (= ?x192 (_ bv0 32))))
 (let (($x125 (=> $x186 $x216)))
 (let (($x180 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x172 (= $x186 $x180)))
 (let (($x147 (and (and (and $x172 $x125) $x68) $x155)))
 (let (($x262 (and $x147 $x77)))
 (let ((?x199 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x18 (= ?x199 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x108 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x275 (ite $x108 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x275 (_ bv1 32))))
 (let (($x190 (=> $x36 $x18)))
 (let (($x66 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x217 (= $x36 $x66)))
 (let (($x179 (= ?x275 (_ bv0 32))))
 (let (($x131 (=> $x179 $x216)))
 (let (($x229 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x213 (= $x179 $x229)))
 (let (($x25 (and (and (and $x213 $x131) $x217) $x190)))
 (let (($x170 (and $x25 $x262)))
 (let ((?x237 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x72 (= ?x237 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x211 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x128 (ite $x211 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x128 (_ bv1 32))))
 (let (($x97 (=> $x30 $x72)))
 (let (($x252 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x69 (= $x30 $x252)))
 (let (($x70 (= ?x128 (_ bv0 32))))
 (let (($x94 (=> $x70 $x216)))
 (let (($x212 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x183 (= $x70 $x212)))
 (let (($x22 (and (and (and $x183 $x94) $x69) $x97)))
 (let (($x258 (and $x22 $x170)))
 (let ((?x134 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x109 (= ?x134 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x143 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x276 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x276 (_ bv1 32))))
 (let (($x167 (=> $x210 $x109)))
 (let (($x28 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x234 (= $x210 $x28)))
 (let (($x225 (= ?x276 (_ bv0 32))))
 (let (($x204 (=> $x225 $x216)))
 (let (($x120 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x54 (= $x225 $x120)))
 (let (($x102 (and (and (and $x54 $x204) $x234) $x167)))
 (let (($x236 (and $x102 $x258)))
 (let (($x248 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x138 (and $x248 $x236)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x257 (and $x181 $x138)))
 (let (($x91 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x35 (and $x91 $x257)))
 (let (($x200 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x149 (and $x200 $x35)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x207 (and $x135 $x149)))
 (let (($x165 (and $x216 $x207)))
 (let (($x80 (= ?x198 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x206 (and $x80 $x165)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x55 (and $x156 $x206)))
 (let (($x10 (and $x216 $x55)))
 (let (($x286 (= ?x199 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x13 (and $x286 $x10)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x195 (and $x246 $x13)))
 (let (($x250 (and $x216 $x195)))
 (let (($x60 (= ?x237 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x117 (and $x60 $x250)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x110 (and $x67 $x117)))
 (let (($x114 (and $x216 $x110)))
 (let (($x75 (= ?x134 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x86 (and $x75 $x114)))
 (let (($x39 (=> $x86 $x27)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x27 (= false true)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x11 (concat ?x285 (concat ?x65 ?x230)))))
 (let (($x123 (= ?x136 input.dst.llvm-%m)))
 (let (($x274 (= $x123 true)))
 (let ((?x132 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x87 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x132 (_ bv3 32)))))
 (let (($x218 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x205 $x87)))))))
 (let (($x243 (= $x218 true)))
 (let ((?x160 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x44 (bvugt ?x160 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x160 (_ bv3 32)))))
 (let (($x270 (=> (bvule ?x160 (bvsub (bvadd ?x160 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x44)))))))
 (let (($x113 (= $x270 true)))
 (let (($x8 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x14 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x8)))))))
 (let (($x280 (= $x14 true)))
 (let (($x12 (forall ((input.ind-%var2471X (_ BitVec 32)) )(let ((?x74 (bvadd (bvmul input.ind-%var2471X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x226))))
 (let ((?x71 (input.spec-%var-m-0.1.1 input.ind-%var2471X)))
 (let (($x232 (input.spec-%var-m-0.0.1 input.ind-%var2471X)))
 (=> $x232 (= ?x71 ?x242))))))))
 ))
 (let (($x203 (forall ((input.ind-%var2470X (_ BitVec 32)) )(let (($x232 (input.spec-%var-m-0.0.1 input.ind-%var2470X)))
 (= $x232 (and (bvule (_ bv0 32) input.ind-%var2470X) (bvult input.ind-%var2470X (_ bv100 32))))))
 ))
 (let (($x152 (and $x203 $x12)))
 (let (($x161 (= $x152 true)))
 (let ((?x233 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x163 (= (_ bv0 32) ?x233)))
 (let ((?x251 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x272 $x142)))
 (let (($x33 (and $x93 $x163)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x92 $x33)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x245)))))))
 (let (($x209 (and $x168 $x282)))
 (let (($x260 (= $x209 true)))
 (let ((?x231 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x140 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x231 (_ bv3 32)))))
 (let (($x53 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x223 $x140)))))))
 (let (($x144 (= $x53 true)))
 (let (($x184 (and $x144 $x260)))
 (let (($x259 (and $x184 $x161)))
 (let (($x105 (and $x259 $x280)))
 (let (($x215 (and $x105 $x113)))
 (let (($x101 (and $x215 $x243)))
 (let (($x77 (and $x101 $x274)))
 (let ((?x198 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x281 (= ?x198 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x89 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x192 (ite $x89 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x192 (_ bv1 32))))
 (let (($x155 (=> $x49 $x281)))
 (let (($x126 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x68 (= $x49 $x126)))
 (let (($x216 (= false false)))
 (let (($x186 (= ?x192 (_ bv0 32))))
 (let (($x125 (=> $x186 $x216)))
 (let (($x180 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x172 (= $x186 $x180)))
 (let (($x147 (and (and (and $x172 $x125) $x68) $x155)))
 (let (($x262 (and $x147 $x77)))
 (let ((?x199 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x18 (= ?x199 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x108 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x275 (ite $x108 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x275 (_ bv1 32))))
 (let (($x190 (=> $x36 $x18)))
 (let (($x66 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x217 (= $x36 $x66)))
 (let (($x179 (= ?x275 (_ bv0 32))))
 (let (($x131 (=> $x179 $x216)))
 (let (($x229 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x213 (= $x179 $x229)))
 (let (($x25 (and (and (and $x213 $x131) $x217) $x190)))
 (let (($x170 (and $x25 $x262)))
 (let ((?x237 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x72 (= ?x237 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x211 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x128 (ite $x211 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x128 (_ bv1 32))))
 (let (($x97 (=> $x30 $x72)))
 (let (($x252 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x69 (= $x30 $x252)))
 (let (($x70 (= ?x128 (_ bv0 32))))
 (let (($x94 (=> $x70 $x216)))
 (let (($x212 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x183 (= $x70 $x212)))
 (let (($x22 (and (and (and $x183 $x94) $x69) $x97)))
 (let (($x258 (and $x22 $x170)))
 (let ((?x134 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x109 (= ?x134 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x143 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x276 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x276 (_ bv1 32))))
 (let (($x167 (=> $x210 $x109)))
 (let (($x28 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x234 (= $x210 $x28)))
 (let (($x225 (= ?x276 (_ bv0 32))))
 (let (($x204 (=> $x225 $x216)))
 (let (($x120 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x54 (= $x225 $x120)))
 (let (($x102 (and (and (and $x54 $x204) $x234) $x167)))
 (let (($x236 (and $x102 $x258)))
 (let (($x248 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x138 (and $x248 $x236)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x257 (and $x181 $x138)))
 (let (($x91 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x35 (and $x91 $x257)))
 (let (($x200 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x149 (and $x200 $x35)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x207 (and $x135 $x149)))
 (let (($x165 (and $x216 $x207)))
 (let (($x80 (= ?x198 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x206 (and $x80 $x165)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x55 (and $x156 $x206)))
 (let (($x10 (and $x216 $x55)))
 (let (($x286 (= ?x199 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x13 (and $x286 $x10)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x195 (and $x246 $x13)))
 (let (($x250 (and $x216 $x195)))
 (let (($x60 (= ?x237 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x117 (and $x60 $x250)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x110 (and $x67 $x117)))
 (let (($x114 (and $x216 $x110)))
 (let (($x75 (= ?x134 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x86 (and $x75 $x114)))
 (let (($x39 (=> $x86 $x27)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6c42700c)
  (define-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32)
    #x04000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff5)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6c42700f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6c42700c)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x6c42700c) #xf5
    (ite (= x!0 #x6c42700d) #xff
    (ite (= x!0 #x6c42700f) #x7f
    (ite (= x!0 #x6c42700e) #xff
      #x00)))))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      (not (bvule #x00000064 x!0)))))))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x6c42700f)
                                     (k!4 #x6c42700e)
                                     (k!4 #x6c42700d)
                                     (k!4 #x6c42700c)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x6c42700f)
                                     (k!4 #x6c42700e)
                                     (k!4 #x6c42700d)
                                     (k!4 #x6c42700c)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x6c42700f)
                                     (k!4 #x6c42700e)
                                     (k!4 #x6c42700d)
                                     (k!4 #x6c42700c)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #x6c42700f)
                                     (k!4 #x6c42700e)
                                     (k!4 #x6c42700d)
                                     (k!4 #x6c42700c))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x00000400)
  (define-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffefff4)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffefff7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffefff4)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m-0.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      false)))))
  (define-fun k!5 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!1 #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.0.1!6 (k!5 x!0)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffefff6) #xff
    (ite (= x!0 #xfffefff5) #xff
    (ite (= x!0 #xfffefff7) #xff
    (ite (= x!0 #xfffefff4) #xf6
      #x00)))))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffefff7)
                                     (k!4 #xfffefff6)
                                     (k!4 #xfffefff5)
                                     (k!4 #xfffefff4)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffefff7)
                                     (k!4 #xfffefff6)
                                     (k!4 #xfffefff5)
                                     (k!4 #xfffefff4)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffefff7)
                                     (k!4 #xfffefff6)
                                     (k!4 #xfffefff5)
                                     (k!4 #xfffefff4)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffefff7)
                                     (k!4 #xfffefff6)
                                     (k!4 #xfffefff5)
                                     (k!4 #xfffefff4))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x202 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x96 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x96 (_ bv1 32))))
 (let (($x92 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x272 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x272 (_ bv1 32))))
 (let (($x32 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x104 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x104 (_ bv1 32))))
 (let (($x158 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x147 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x147 (_ bv0 32))))
 (let (($x277 (bvuge ?x147 (_ bv1 32))))
 (let (($x317 (or $x277 $x79)))
 (let (($x319 (and $x317 $x129)))
 (let (($x53 (= ?x104 (_ bv0 32))))
 (let (($x318 (and $x317 $x53)))
 (let (($x320 (or $x318 $x319)))
 (let (($x322 (and $x320 $x33)))
 (let (($x251 (= ?x272 (_ bv0 32))))
 (let (($x321 (and $x320 $x251)))
 (let (($x323 (or $x321 $x322)))
 (let (($x325 (and $x323 $x74)))
 (let (($x118 (= ?x96 (_ bv0 32))))
 (let (($x324 (and $x323 $x118)))
 (let (($x326 (or $x324 $x325)))
 (let (($x327 (or false $x326)))
 (let (($x328 (= $x327 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x292 (concat ?x291 (concat ?x288 (concat ?x273 ?x107)))))
 (let (($x293 (= ?x292 input.dst.llvm-%m)))
 (let (($x294 (= $x293 true)))
 (let ((?x276 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x240 (= (bvand ?x276 (_ bv4294967292 32)) ?x276)))
 (let ((?x176 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x40 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x188 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv4 32))) (bvult ?x176 (bvsub ?x176 (_ bv4 32))))))
 (let (($x154 (and true $x188)))
 (let ((?x119 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x115 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x116 (and $x115 $x154)))
 (let (($x162 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x276 (bvsub ?x276 (_ bv8 32))) (bvult ?x276 (bvsub ?x276 (_ bv8 32))))))
 (let (($x62 (and (and (and true $x162) $x116) $x40)))
 (let (($x103 (and $x62 $x240)))
 (let (($x121 (= $x103 true)))
 (let (($x39 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x98 (and true $x39)))
 (let (($x55 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x16 (and $x55 $x98)))
 (let (($x117 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x119 (bvsub ?x119 (_ bv12 32))) (bvult ?x119 (bvsub ?x119 (_ bv12 32))))))
 (let (($x185 (and (and (and true $x55) $x117) $x16)))
 (let (($x58 (= $x185 true)))
 (let (($x257 (forall ((input.ind-%var2607X (_ BitVec 32)) )(let ((?x65 (bvadd (bvmul input.ind-%var2607X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x136))))
 (let ((?x141 (input.spec-%var-m-0.1.1 input.ind-%var2607X)))
 (let (($x281 (input.spec-%var-m-0.0.1 input.ind-%var2607X)))
 (=> $x281 (= ?x141 ?x258))))))))
 ))
 (let (($x241 (forall ((input.ind-%var2606X (_ BitVec 32)) )(let (($x281 (input.spec-%var-m-0.0.1 input.ind-%var2606X)))
 (= $x281 (and (bvule (_ bv0 32) input.ind-%var2606X) (bvult input.ind-%var2606X (_ bv100 32))))))
 ))
 (let (($x35 (and $x241 $x257)))
 (let (($x149 (= $x35 true)))
 (let ((?x14 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x280 (= (_ bv0 32) ?x14)))
 (let ((?x112 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x283 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x178 $x283)))
 (let (($x105 (and $x111 $x280)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x51 $x105)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x259)))))))
 (let (($x47 (and $x8 $x160)))
 (let (($x244 (= $x47 true)))
 (let (($x207 (and $x244 $x149)))
 (let (($x124 (and $x207 $x58)))
 (let (($x43 (and $x124 $x121)))
 (let (($x295 (and $x43 $x294)))
 (let ((?x25 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x34 (= ?x25 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x169 (=> $x74 $x34)))
 (let (($x191 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x46 (= $x74 $x191)))
 (let (($x108 (= false false)))
 (let (($x238 (=> $x118 $x108)))
 (let (($x71 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x42 (= $x118 $x71)))
 (let (($x226 (and (and (and $x42 $x238) $x46) $x169)))
 (let (($x296 (and $x226 $x295)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x184 (= ?x217 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x122 (=> $x33 $x184)))
 (let (($x282 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x209 (= $x33 $x282)))
 (let (($x266 (and (and (= $x251 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x251 $x108)) $x209)))
 (let (($x48 (and $x266 $x122)))
 (let (($x297 (and $x48 $x296)))
 (let ((?x213 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x73 (= ?x213 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x173 (=> $x129 $x73)))
 (let (($x106 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x245 (= $x129 $x106)))
 (let (($x168 (and (and (= $x53 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x53 $x108)) $x245)))
 (let (($x197 (and $x168 $x173)))
 (let (($x298 (and $x197 $x297)))
 (let ((?x102 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x223 (= ?x102 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x52 (=> $x277 $x223)))
 (let (($x271 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x255 (= $x277 $x271)))
 (let (($x264 (=> $x79 $x108)))
 (let (($x231 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x57 (= $x79 $x231)))
 (let (($x133 (and (and (and $x57 $x264) $x255) $x52)))
 (let (($x299 (and $x133 $x298)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x300 (and $x235 $x299)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x301 (and $x126 $x300)))
 (let (($x227 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x302 (and $x227 $x301)))
 (let (($x172 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x303 (and $x172 $x302)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x304 (and $x76 $x303)))
 (let (($x305 (and $x108 $x304)))
 (let (($x192 (= ?x25 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x306 (and $x192 $x305)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x307 (and $x190 $x306)))
 (let (($x308 (and $x108 $x307)))
 (let (($x194 (= ?x217 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x309 (and $x194 $x308)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x310 (and $x66 $x309)))
 (let (($x311 (and $x108 $x310)))
 (let (($x127 (= ?x213 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x312 (and $x127 $x311)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x313 (and $x150 $x312)))
 (let (($x314 (and $x108 $x313)))
 (let (($x22 (= ?x102 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x315 (and $x22 $x314)))
 (let (($x212 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x176 (_ bv3 32)))))
 (let (($x69 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x212)))))))
 (let (($x29 (bvugt ?x276 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x276 (_ bv3 32)))))
 (let (($x109 (=> (bvule ?x276 (bvsub (bvadd ?x276 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x29)))))))
 (let (($x63 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x119 (_ bv3 32)))))
 (let (($x143 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x200 $x63)))))))
 (let (($x134 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x198 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x134)))))))
 (let (($x269 (and $x198 $x143)))
 (let (($x225 (and $x269 $x109)))
 (let (($x167 (and $x225 $x69)))
 (let (($x316 (and $x167 $x315)))
 (let (($x329 (=> $x316 $x328)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x202 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x96 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x96 (_ bv1 32))))
 (let (($x92 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x272 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x272 (_ bv1 32))))
 (let (($x32 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x104 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x104 (_ bv1 32))))
 (let (($x158 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x147 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x147 (_ bv0 32))))
 (let (($x277 (bvuge ?x147 (_ bv1 32))))
 (let (($x317 (or $x277 $x79)))
 (let (($x319 (and $x317 $x129)))
 (let (($x53 (= ?x104 (_ bv0 32))))
 (let (($x318 (and $x317 $x53)))
 (let (($x320 (or $x318 $x319)))
 (let (($x322 (and $x320 $x33)))
 (let (($x251 (= ?x272 (_ bv0 32))))
 (let (($x321 (and $x320 $x251)))
 (let (($x323 (or $x321 $x322)))
 (let (($x325 (and $x323 $x74)))
 (let (($x118 (= ?x96 (_ bv0 32))))
 (let (($x324 (and $x323 $x118)))
 (let (($x326 (or $x324 $x325)))
 (let (($x327 (or false $x326)))
 (let (($x328 (= $x327 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x292 (concat ?x291 (concat ?x288 (concat ?x273 ?x107)))))
 (let (($x293 (= ?x292 input.dst.llvm-%m)))
 (let (($x294 (= $x293 true)))
 (let ((?x276 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x240 (= (bvand ?x276 (_ bv4294967292 32)) ?x276)))
 (let ((?x176 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x40 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x188 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv4 32))) (bvult ?x176 (bvsub ?x176 (_ bv4 32))))))
 (let (($x154 (and true $x188)))
 (let ((?x119 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x115 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x116 (and $x115 $x154)))
 (let (($x162 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x276 (bvsub ?x276 (_ bv8 32))) (bvult ?x276 (bvsub ?x276 (_ bv8 32))))))
 (let (($x62 (and (and (and true $x162) $x116) $x40)))
 (let (($x103 (and $x62 $x240)))
 (let (($x121 (= $x103 true)))
 (let (($x39 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x98 (and true $x39)))
 (let (($x55 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x16 (and $x55 $x98)))
 (let (($x117 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x119 (bvsub ?x119 (_ bv12 32))) (bvult ?x119 (bvsub ?x119 (_ bv12 32))))))
 (let (($x185 (and (and (and true $x55) $x117) $x16)))
 (let (($x58 (= $x185 true)))
 (let (($x257 (forall ((input.ind-%var2607X (_ BitVec 32)) )(let ((?x65 (bvadd (bvmul input.ind-%var2607X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x136))))
 (let ((?x141 (input.spec-%var-m-0.1.1 input.ind-%var2607X)))
 (let (($x281 (input.spec-%var-m-0.0.1 input.ind-%var2607X)))
 (=> $x281 (= ?x141 ?x258))))))))
 ))
 (let (($x241 (forall ((input.ind-%var2606X (_ BitVec 32)) )(let (($x281 (input.spec-%var-m-0.0.1 input.ind-%var2606X)))
 (= $x281 (and (bvule (_ bv0 32) input.ind-%var2606X) (bvult input.ind-%var2606X (_ bv100 32))))))
 ))
 (let (($x35 (and $x241 $x257)))
 (let (($x149 (= $x35 true)))
 (let ((?x14 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x280 (= (_ bv0 32) ?x14)))
 (let ((?x112 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x283 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x178 $x283)))
 (let (($x105 (and $x111 $x280)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x51 $x105)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x259)))))))
 (let (($x47 (and $x8 $x160)))
 (let (($x244 (= $x47 true)))
 (let (($x207 (and $x244 $x149)))
 (let (($x124 (and $x207 $x58)))
 (let (($x43 (and $x124 $x121)))
 (let (($x295 (and $x43 $x294)))
 (let ((?x25 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x34 (= ?x25 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x169 (=> $x74 $x34)))
 (let (($x191 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x46 (= $x74 $x191)))
 (let (($x108 (= false false)))
 (let (($x238 (=> $x118 $x108)))
 (let (($x71 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x42 (= $x118 $x71)))
 (let (($x226 (and (and (and $x42 $x238) $x46) $x169)))
 (let (($x296 (and $x226 $x295)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x184 (= ?x217 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x122 (=> $x33 $x184)))
 (let (($x282 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x209 (= $x33 $x282)))
 (let (($x266 (and (and (= $x251 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x251 $x108)) $x209)))
 (let (($x48 (and $x266 $x122)))
 (let (($x297 (and $x48 $x296)))
 (let ((?x213 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x73 (= ?x213 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x173 (=> $x129 $x73)))
 (let (($x106 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x245 (= $x129 $x106)))
 (let (($x168 (and (and (= $x53 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x53 $x108)) $x245)))
 (let (($x197 (and $x168 $x173)))
 (let (($x298 (and $x197 $x297)))
 (let ((?x102 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x223 (= ?x102 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x52 (=> $x277 $x223)))
 (let (($x271 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x255 (= $x277 $x271)))
 (let (($x264 (=> $x79 $x108)))
 (let (($x231 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x57 (= $x79 $x231)))
 (let (($x133 (and (and (and $x57 $x264) $x255) $x52)))
 (let (($x299 (and $x133 $x298)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x300 (and $x235 $x299)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x301 (and $x126 $x300)))
 (let (($x227 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x302 (and $x227 $x301)))
 (let (($x172 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x303 (and $x172 $x302)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x304 (and $x76 $x303)))
 (let (($x305 (and $x108 $x304)))
 (let (($x192 (= ?x25 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x306 (and $x192 $x305)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x307 (and $x190 $x306)))
 (let (($x308 (and $x108 $x307)))
 (let (($x194 (= ?x217 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x309 (and $x194 $x308)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x310 (and $x66 $x309)))
 (let (($x311 (and $x108 $x310)))
 (let (($x127 (= ?x213 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x312 (and $x127 $x311)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x313 (and $x150 $x312)))
 (let (($x314 (and $x108 $x313)))
 (let (($x22 (= ?x102 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x315 (and $x22 $x314)))
 (let (($x212 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x176 (_ bv3 32)))))
 (let (($x69 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x212)))))))
 (let (($x29 (bvugt ?x276 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x276 (_ bv3 32)))))
 (let (($x109 (=> (bvule ?x276 (bvsub (bvadd ?x276 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x29)))))))
 (let (($x63 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x119 (_ bv3 32)))))
 (let (($x143 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x200 $x63)))))))
 (let (($x134 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x198 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x134)))))))
 (let (($x269 (and $x198 $x143)))
 (let (($x225 (and $x269 $x109)))
 (let (($x167 (and $x225 $x69)))
 (let (($x316 (and $x167 $x315)))
 (let (($x329 (=> $x316 $x328)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 201 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x366 (bvmul (_ bv4294967295 32) ?x217)))
 (let ((?x167 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x368 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x167)))
 (let ((?x369 (bvadd ?x368 ?x366)))
 (let ((?x355 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x356 (concat ?x355 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x246 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x200 (bvadd ?x246 (_ bv3 32))))
 (let ((?x361 (concat (select input.dst.llvm-mem ?x200) (concat ?x358 ?x356))))
 (let ((?x362 (bvmul (_ bv4294967295 32) ?x361)))
 (let ((?x345 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x346 (concat ?x345 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x81 (bvadd ?x29 (_ bv3 32))))
 (let ((?x351 (concat (select input.dst.llvm-mem ?x81) (concat ?x348 ?x346))))
 (let ((?x336 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x337 (concat ?x336 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x339 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x60 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x36 (bvadd ?x60 (_ bv3 32))))
 (let ((?x342 (concat (select input.dst.llvm-mem ?x36) (concat ?x339 ?x337))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x88)))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x331)))
 (let ((?x365 (bvadd (bvadd (bvadd ?x333 ?x342) ?x351) ?x362)))
 (let (($x370 (= ?x365 ?x369)))
 (let (($x371 (= $x370 true)))
 (let ((?x309 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x311 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x318 (concat ?x317 (concat ?x314 (concat ?x311 ?x309)))))
 (let (($x328 (= ?x318 input.dst.llvm-%m)))
 (let (($x329 (= $x328 true)))
 (let (($x319 (= input.dst.llvm-%m ?x318)))
 (let ((?x304 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x305 (= (_ bv0 32) ?x304)))
 (let ((?x301 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x301)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (and $x300 $x302)))
 (let (($x306 (and $x303 $x305)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (and $x299 $x306)))
 (let (($x296 (forall ((input.ind-%var2655X (_ BitVec 32)) )(let ((?x290 (bvadd (bvmul input.ind-%var2655X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem ?x290))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv2 32))) ?x146))))
 (let ((?x213 (input.spec-%var-m-0.1.1 input.ind-%var2655X)))
 (let (($x108 (input.spec-%var-m-0.0.1 input.ind-%var2655X)))
 (=> $x108 (= ?x213 ?x293))))))))
 ))
 (let (($x162 (forall ((input.ind-%var2654X (_ BitVec 32)) )(let (($x108 (input.spec-%var-m-0.0.1 input.ind-%var2654X)))
 (= $x108 (and (bvule (_ bv0 32) input.ind-%var2654X) (bvult input.ind-%var2654X (_ bv100 32))))))
 ))
 (let (($x297 (and $x162 $x296)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x250 $x117)))))))
 (let (($x241 (= (bvand ?x246 (_ bv4294967292 32)) ?x246)))
 (let (($x270 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x47 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x244 (and true $x47)))
 (let (($x111 (= (bvand ?x60 (_ bv4294967292 32)) ?x60)))
 (let (($x83 (and $x111 $x244)))
 (let (($x178 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x246 (bvsub ?x246 (_ bv8 32))) (bvult ?x246 (bvsub ?x246 (_ bv8 32))))))
 (let (($x113 (and (and (and true $x178) $x83) $x270)))
 (let (($x258 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x236 (and true $x258)))
 (let (($x65 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x138 (and $x65 $x236)))
 (let (($x268 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x60 (bvsub ?x60 (_ bv12 32))) (bvult ?x60 (bvsub ?x60 (_ bv12 32))))))
 (let (($x149 (and (and (and true $x65) $x268) $x138)))
 (let (($x325 (and (and (and (and (and (and $x149 $x113) $x241) $x39) $x297) $x307) $x319)))
 (let (($x326 (= $x325 true)))
 (let (($x207 (= $x149 true)))
 (let (($x141 (and $x113 $x241)))
 (let (($x21 (= $x141 true)))
 (let (($x165 (and $x21 $x207)))
 (let (($x327 (and $x165 $x326)))
 (let (($x330 (and $x327 $x329)))
 (let (($x85 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x220 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x220 (_ bv1 32))))
 (let (($x57 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x140 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x140 (_ bv1 32))))
 (let (($x279 (and $x223 $x73)))
 (let (($x163 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x232 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x232 (_ bv1 32))))
 (let (($x221 (and $x184 $x279)))
 (let (($x238 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x19 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x19 (_ bv1 32))))
 (let (($x78 (and $x34 $x221)))
 (let (($x286 (and $x78 $x330)))
 (let ((?x180 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x12 (= ?x180 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x228 (=> $x34 $x12)))
 (let (($x169 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x226 (= $x34 $x169)))
 (let (($x212 (= false false)))
 (let (($x74 (= ?x19 (_ bv0 32))))
 (let (($x196 (=> $x74 $x212)))
 (let (($x46 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x249 (= $x74 $x46)))
 (let (($x259 (and (and (and $x249 $x196) $x226) $x228)))
 (let (($x130 (and $x259 $x286)))
 (let ((?x25 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x96 (= ?x25 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x118 (=> $x184 $x96)))
 (let (($x122 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x48 (= $x184 $x122)))
 (let (($x33 (= ?x232 (_ bv0 32))))
 (let (($x260 (=> $x33 $x212)))
 (let (($x209 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x266 (= $x33 $x209)))
 (let (($x42 (and (and (and $x266 $x260) $x48) $x118)))
 (let (($x171 (and $x42 $x130)))
 (let (($x272 (= ?x217 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x251 (=> $x73 $x272)))
 (let (($x173 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x197 (= $x73 $x173)))
 (let (($x129 (= ?x220 (_ bv0 32))))
 (let (($x37 (=> $x129 $x212)))
 (let (($x245 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x168 (= $x129 $x245)))
 (let (($x233 (and (and (and $x168 $x37) $x197) $x251)))
 (let (($x155 (and $x233 $x171)))
 (let (($x104 (= ?x167 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x53 (=> $x223 $x104)))
 (let (($x52 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x133 (= $x223 $x52)))
 (let (($x277 (= ?x140 (_ bv0 32))))
 (let (($x159 (=> $x277 $x212)))
 (let (($x255 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x239 (= $x277 $x255)))
 (let (($x175 (and (and (and $x239 $x159) $x133) $x53)))
 (let (($x72 (and $x175 $x155)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x56 (and $x231 $x72)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x61 (and $x79 $x56)))
 (let (($x158 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x26 (and $x158 $x61)))
 (let (($x68 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x24 (and $x68 $x26)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x187 (and $x49 $x24)))
 (let (($x205 (and $x212 $x187)))
 (let (($x125 (= ?x180 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x101 (and $x125 $x205)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x193 (and $x76 $x101)))
 (let (($x201 (and $x212 $x193)))
 (let (($x192 (= ?x25 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x218 (and $x192 $x201)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x256 (and $x190 $x218)))
 (let (($x50 (and $x212 $x256)))
 (let (($x194 (= ?x217 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x87 (and $x194 $x50)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x153 (and $x128 $x87)))
 (let (($x243 (and $x212 $x153)))
 (let (($x70 (= ?x167 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x11 (and $x70 $x243)))
 (let (($x30 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x179 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x30)))))))
 (let (($x91 (bvugt ?x246 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x200)))
 (let (($x54 (=> (bvule ?x246 (bvsub (bvadd ?x246 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x91)))))))
 (let (($x216 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x198 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x216)))))))
 (let (($x135 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x143 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x135)))))))
 (let (($x269 (and $x143 $x198)))
 (let (($x182 (and $x269 $x54)))
 (let (($x109 (and $x182 $x179)))
 (let (($x38 (and $x109 $x11)))
 (let (($x372 (=> $x38 $x371)))
 (not $x372))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x366 (bvmul (_ bv4294967295 32) ?x217)))
 (let ((?x167 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x368 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x167)))
 (let ((?x369 (bvadd ?x368 ?x366)))
 (let ((?x355 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x356 (concat ?x355 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x246 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x200 (bvadd ?x246 (_ bv3 32))))
 (let ((?x361 (concat (select input.dst.llvm-mem ?x200) (concat ?x358 ?x356))))
 (let ((?x362 (bvmul (_ bv4294967295 32) ?x361)))
 (let ((?x345 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x346 (concat ?x345 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x81 (bvadd ?x29 (_ bv3 32))))
 (let ((?x351 (concat (select input.dst.llvm-mem ?x81) (concat ?x348 ?x346))))
 (let ((?x336 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x337 (concat ?x336 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x339 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x60 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x36 (bvadd ?x60 (_ bv3 32))))
 (let ((?x342 (concat (select input.dst.llvm-mem ?x36) (concat ?x339 ?x337))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x88)))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x331)))
 (let ((?x365 (bvadd (bvadd (bvadd ?x333 ?x342) ?x351) ?x362)))
 (let (($x370 (= ?x365 ?x369)))
 (let (($x371 (= $x370 true)))
 (let ((?x309 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x311 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x318 (concat ?x317 (concat ?x314 (concat ?x311 ?x309)))))
 (let (($x328 (= ?x318 input.dst.llvm-%m)))
 (let (($x329 (= $x328 true)))
 (let (($x319 (= input.dst.llvm-%m ?x318)))
 (let ((?x304 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x305 (= (_ bv0 32) ?x304)))
 (let ((?x301 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x301)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (and $x300 $x302)))
 (let (($x306 (and $x303 $x305)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (and $x299 $x306)))
 (let (($x296 (forall ((input.ind-%var2655X (_ BitVec 32)) )(let ((?x290 (bvadd (bvmul input.ind-%var2655X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem ?x290))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv2 32))) ?x146))))
 (let ((?x213 (input.spec-%var-m-0.1.1 input.ind-%var2655X)))
 (let (($x108 (input.spec-%var-m-0.0.1 input.ind-%var2655X)))
 (=> $x108 (= ?x213 ?x293))))))))
 ))
 (let (($x162 (forall ((input.ind-%var2654X (_ BitVec 32)) )(let (($x108 (input.spec-%var-m-0.0.1 input.ind-%var2654X)))
 (= $x108 (and (bvule (_ bv0 32) input.ind-%var2654X) (bvult input.ind-%var2654X (_ bv100 32))))))
 ))
 (let (($x297 (and $x162 $x296)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x250 $x117)))))))
 (let (($x241 (= (bvand ?x246 (_ bv4294967292 32)) ?x246)))
 (let (($x270 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x47 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x244 (and true $x47)))
 (let (($x111 (= (bvand ?x60 (_ bv4294967292 32)) ?x60)))
 (let (($x83 (and $x111 $x244)))
 (let (($x178 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x246 (bvsub ?x246 (_ bv8 32))) (bvult ?x246 (bvsub ?x246 (_ bv8 32))))))
 (let (($x113 (and (and (and true $x178) $x83) $x270)))
 (let (($x258 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x236 (and true $x258)))
 (let (($x65 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x138 (and $x65 $x236)))
 (let (($x268 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x60 (bvsub ?x60 (_ bv12 32))) (bvult ?x60 (bvsub ?x60 (_ bv12 32))))))
 (let (($x149 (and (and (and true $x65) $x268) $x138)))
 (let (($x325 (and (and (and (and (and (and $x149 $x113) $x241) $x39) $x297) $x307) $x319)))
 (let (($x326 (= $x325 true)))
 (let (($x207 (= $x149 true)))
 (let (($x141 (and $x113 $x241)))
 (let (($x21 (= $x141 true)))
 (let (($x165 (and $x21 $x207)))
 (let (($x327 (and $x165 $x326)))
 (let (($x330 (and $x327 $x329)))
 (let (($x85 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x220 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x220 (_ bv1 32))))
 (let (($x57 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x140 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x140 (_ bv1 32))))
 (let (($x279 (and $x223 $x73)))
 (let (($x163 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x232 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x232 (_ bv1 32))))
 (let (($x221 (and $x184 $x279)))
 (let (($x238 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x19 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x19 (_ bv1 32))))
 (let (($x78 (and $x34 $x221)))
 (let (($x286 (and $x78 $x330)))
 (let ((?x180 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x12 (= ?x180 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x228 (=> $x34 $x12)))
 (let (($x169 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x226 (= $x34 $x169)))
 (let (($x212 (= false false)))
 (let (($x74 (= ?x19 (_ bv0 32))))
 (let (($x196 (=> $x74 $x212)))
 (let (($x46 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x249 (= $x74 $x46)))
 (let (($x259 (and (and (and $x249 $x196) $x226) $x228)))
 (let (($x130 (and $x259 $x286)))
 (let ((?x25 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x96 (= ?x25 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x118 (=> $x184 $x96)))
 (let (($x122 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x48 (= $x184 $x122)))
 (let (($x33 (= ?x232 (_ bv0 32))))
 (let (($x260 (=> $x33 $x212)))
 (let (($x209 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x266 (= $x33 $x209)))
 (let (($x42 (and (and (and $x266 $x260) $x48) $x118)))
 (let (($x171 (and $x42 $x130)))
 (let (($x272 (= ?x217 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x251 (=> $x73 $x272)))
 (let (($x173 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x197 (= $x73 $x173)))
 (let (($x129 (= ?x220 (_ bv0 32))))
 (let (($x37 (=> $x129 $x212)))
 (let (($x245 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x168 (= $x129 $x245)))
 (let (($x233 (and (and (and $x168 $x37) $x197) $x251)))
 (let (($x155 (and $x233 $x171)))
 (let (($x104 (= ?x167 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x53 (=> $x223 $x104)))
 (let (($x52 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x133 (= $x223 $x52)))
 (let (($x277 (= ?x140 (_ bv0 32))))
 (let (($x159 (=> $x277 $x212)))
 (let (($x255 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x239 (= $x277 $x255)))
 (let (($x175 (and (and (and $x239 $x159) $x133) $x53)))
 (let (($x72 (and $x175 $x155)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x56 (and $x231 $x72)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x61 (and $x79 $x56)))
 (let (($x158 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x26 (and $x158 $x61)))
 (let (($x68 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x24 (and $x68 $x26)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x187 (and $x49 $x24)))
 (let (($x205 (and $x212 $x187)))
 (let (($x125 (= ?x180 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x101 (and $x125 $x205)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x193 (and $x76 $x101)))
 (let (($x201 (and $x212 $x193)))
 (let (($x192 (= ?x25 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x218 (and $x192 $x201)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x256 (and $x190 $x218)))
 (let (($x50 (and $x212 $x256)))
 (let (($x194 (= ?x217 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x87 (and $x194 $x50)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x153 (and $x128 $x87)))
 (let (($x243 (and $x212 $x153)))
 (let (($x70 (= ?x167 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x11 (and $x70 $x243)))
 (let (($x30 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x179 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x30)))))))
 (let (($x91 (bvugt ?x246 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x200)))
 (let (($x54 (=> (bvule ?x246 (bvsub (bvadd ?x246 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x91)))))))
 (let (($x216 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x198 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x216)))))))
 (let (($x135 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x143 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x135)))))))
 (let (($x269 (and $x143 $x198)))
 (let (($x182 (and $x269 $x54)))
 (let (($x109 (and $x182 $x179)))
 (let (($x38 (and $x109 $x11)))
 (let (($x372 (=> $x38 $x371)))
 (not $x372))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x240 (bvmul (_ bv4294967295 32) ?x25)))
 (let ((?x58 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x240)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x145 (concat ?x15 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x143 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x214 (bvadd ?x143 (_ bv3 32))))
 (let ((?x188 (concat (select input.dst.llvm-mem ?x214) (concat ?x164 ?x145))))
 (let ((?x154 (bvmul (_ bv4294967295 32) ?x188)))
 (let ((?x373 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x237 (concat ?x373 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x91 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x97 (bvadd ?x91 (_ bv3 32))))
 (let ((?x115 (concat (select input.dst.llvm-mem ?x97) (concat ?x308 ?x237))))
 (let ((?x362 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x365 (concat ?x362 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x368 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x247 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x18 (bvadd ?x247 (_ bv3 32))))
 (let ((?x370 (concat (select input.dst.llvm-mem ?x18) (concat ?x368 ?x365))))
 (let ((?x357 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x357)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x355)))
 (let ((?x40 (bvadd (bvadd (bvadd ?x356 ?x370) ?x115) ?x154)))
 (let (($x124 (= ?x40 ?x58)))
 (let (($x103 (= $x124 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x256 (concat ?x218 (concat ?x101 (concat ?x24 ?x61)))))
 (let (($x99 (= ?x256 input.dst.llvm-%m)))
 (let (($x166 (= $x99 true)))
 (let (($x50 (= input.dst.llvm-%m ?x256)))
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x171 (= (_ bv0 32) ?x130)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x328 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (and $x328 $x330)))
 (let (($x155 (and $x286 $x171)))
 (let (($x327 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x327 $x155)))
 (let (($x319 (forall ((input.ind-%var2699X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var2699X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x317))))
 (let ((?x217 (input.spec-%var-m-0.1.1 input.ind-%var2699X)))
 (let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2699X)))
 (=> $x212 (= ?x217 ?x312))))))))
 ))
 (let (($x107 (forall ((input.ind-%var2698X (_ BitVec 32)) )(let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2698X)))
 (= $x212 (and (bvule (_ bv0 32) input.ind-%var2698X) (bvult input.ind-%var2698X (_ bv100 32))))))
 ))
 (let (($x325 (and $x107 $x319)))
 (let (($x322 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x322)))))))
 (let (($x170 (= (bvand ?x143 (_ bv4294967292 32)) ?x143)))
 (let (($x141 (= (bvand ?x91 (_ bv4294967292 32)) ?x91)))
 (let (($x270 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x91 (bvsub ?x91 (_ bv4 32))) (bvult ?x91 (bvsub ?x91 (_ bv4 32))))))
 (let (($x113 (and true $x270)))
 (let (($x47 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x215 (and $x47 $x113)))
 (let (($x14 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x143 (bvsub ?x143 (_ bv8 32))) (bvult ?x143 (bvsub ?x143 (_ bv8 32))))))
 (let (($x65 (and (and (and true $x14) $x215) $x141)))
 (let (($x207 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x165 (and true $x207)))
 (let (($x268 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x320 (and $x268 $x165)))
 (let (($x77 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 (_ bv12 32))) (bvult ?x247 (bvsub ?x247 (_ bv12 32))))))
 (let (($x10 (and (and (and true $x268) $x77) $x320)))
 (let (($x332 (and (and (and (and (and (and $x10 $x65) $x170) $x177) $x325) $x72) $x50)))
 (let (($x285 (= $x332 true)))
 (let (($x27 (= $x10 true)))
 (let (($x262 (and $x65 $x170)))
 (let (($x123 (= $x262 true)))
 (let (($x195 (and $x123 $x27)))
 (let (($x95 (and $x195 $x285)))
 (let (($x224 (and $x95 $x166)))
 (let (($x37 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x142 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x142 (_ bv1 32))))
 (let (($x239 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x144 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x144 (_ bv0 32))))
 (let (($x51 (and $x223 $x272)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x203 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x203 (_ bv1 32))))
 (let (($x178 (and $x96 $x51)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x152 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x152 (_ bv1 32))))
 (let (($x44 (and $x12 $x178)))
 (let (($x88 (and $x44 $x224)))
 (let ((?x126 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x221 (= ?x126 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x78 (=> $x12 $x221)))
 (let (($x228 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x259 (= $x12 $x228)))
 (let (($x30 (= false false)))
 (let (($x34 (= ?x152 (_ bv0 32))))
 (let (($x7 (=> $x34 $x30)))
 (let (($x226 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x161 (= $x34 $x226)))
 (let (($x242 (and (and (and $x161 $x7) $x259) $x78)))
 (let (($x331 (and $x242 $x88)))
 (let ((?x180 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x19 (= ?x180 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x74 (=> $x96 $x19)))
 (let (($x118 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x42 (= $x96 $x118)))
 (let (($x184 (= ?x203 (_ bv0 32))))
 (let (($x202 (=> $x184 $x30)))
 (let (($x48 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x71 (= $x184 $x48)))
 (let (($x249 (and (and (and $x71 $x202) $x42) $x74)))
 (let (($x333 (and $x249 $x331)))
 (let (($x232 (= ?x25 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x33 (=> $x272 $x232)))
 (let (($x251 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x233 (= $x272 $x251)))
 (let (($x73 (= ?x142 (_ bv0 32))))
 (let (($x92 (=> $x73 $x30)))
 (let (($x197 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x93 (= $x73 $x197)))
 (let (($x266 (and (and (and $x93 $x92) $x233) $x33)))
 (let (($x341 (and $x266 $x333)))
 (let ((?x109 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x220 (= ?x109 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x104 (bvuge ?x144 (_ bv1 32))))
 (let (($x129 (=> $x104 $x220)))
 (let (($x53 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x175 (= $x104 $x53)))
 (let (($x32 (=> $x223 $x30)))
 (let (($x133 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x254 (= $x223 $x133)))
 (let (($x168 (and (and (and $x254 $x32) $x175) $x129)))
 (let (($x338 (and $x168 $x341)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x339 (and $x255 $x338)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x335 (and $x277 $x339)))
 (let (($x57 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x336 (and $x57 $x335)))
 (let (($x174 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x334 (and $x174 $x336)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x337 (and $x147 $x334)))
 (let (($x340 (and $x30 $x337)))
 (let (($x235 (= ?x126 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x342 (and $x235 $x340)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x363 (and $x49 $x342)))
 (let (($x350 (and $x30 $x363)))
 (let (($x125 (= ?x180 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x347 (and $x125 $x350)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x348 (and $x76 $x347)))
 (let (($x344 (and $x30 $x348)))
 (let (($x192 (= ?x25 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x345 (and $x192 $x344)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x343 (and $x82 $x345)))
 (let (($x346 (and $x30 $x343)))
 (let (($x81 (= ?x109 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x349 (and $x81 $x346)))
 (let (($x275 (bvugt ?x91 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x211 (=> (bvule ?x91 (bvsub (bvadd ?x91 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x275)))))))
 (let (($x199 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x214)))
 (let (($x28 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x216 $x199)))))))
 (let (($x200 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x156 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x200)))))))
 (let (($x120 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x198 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x276 $x120)))))))
 (let (($x269 (and $x198 $x156)))
 (let (($x67 (and $x269 $x28)))
 (let (($x54 (and $x67 $x211)))
 (let (($x351 (and $x54 $x349)))
 (let (($x267 (=> $x351 $x103)))
 (not $x267)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x240 (bvmul (_ bv4294967295 32) ?x25)))
 (let ((?x58 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x240)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x145 (concat ?x15 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x143 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x214 (bvadd ?x143 (_ bv3 32))))
 (let ((?x188 (concat (select input.dst.llvm-mem ?x214) (concat ?x164 ?x145))))
 (let ((?x154 (bvmul (_ bv4294967295 32) ?x188)))
 (let ((?x373 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x237 (concat ?x373 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x91 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x97 (bvadd ?x91 (_ bv3 32))))
 (let ((?x115 (concat (select input.dst.llvm-mem ?x97) (concat ?x308 ?x237))))
 (let ((?x362 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x365 (concat ?x362 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x368 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x247 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x18 (bvadd ?x247 (_ bv3 32))))
 (let ((?x370 (concat (select input.dst.llvm-mem ?x18) (concat ?x368 ?x365))))
 (let ((?x357 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x357)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x355)))
 (let ((?x40 (bvadd (bvadd (bvadd ?x356 ?x370) ?x115) ?x154)))
 (let (($x124 (= ?x40 ?x58)))
 (let (($x103 (= $x124 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x256 (concat ?x218 (concat ?x101 (concat ?x24 ?x61)))))
 (let (($x99 (= ?x256 input.dst.llvm-%m)))
 (let (($x166 (= $x99 true)))
 (let (($x50 (= input.dst.llvm-%m ?x256)))
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x171 (= (_ bv0 32) ?x130)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x328 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (and $x328 $x330)))
 (let (($x155 (and $x286 $x171)))
 (let (($x327 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x327 $x155)))
 (let (($x319 (forall ((input.ind-%var2699X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var2699X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x317))))
 (let ((?x217 (input.spec-%var-m-0.1.1 input.ind-%var2699X)))
 (let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2699X)))
 (=> $x212 (= ?x217 ?x312))))))))
 ))
 (let (($x107 (forall ((input.ind-%var2698X (_ BitVec 32)) )(let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2698X)))
 (= $x212 (and (bvule (_ bv0 32) input.ind-%var2698X) (bvult input.ind-%var2698X (_ bv100 32))))))
 ))
 (let (($x325 (and $x107 $x319)))
 (let (($x322 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x322)))))))
 (let (($x170 (= (bvand ?x143 (_ bv4294967292 32)) ?x143)))
 (let (($x141 (= (bvand ?x91 (_ bv4294967292 32)) ?x91)))
 (let (($x270 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x91 (bvsub ?x91 (_ bv4 32))) (bvult ?x91 (bvsub ?x91 (_ bv4 32))))))
 (let (($x113 (and true $x270)))
 (let (($x47 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x215 (and $x47 $x113)))
 (let (($x14 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x143 (bvsub ?x143 (_ bv8 32))) (bvult ?x143 (bvsub ?x143 (_ bv8 32))))))
 (let (($x65 (and (and (and true $x14) $x215) $x141)))
 (let (($x207 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x165 (and true $x207)))
 (let (($x268 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x320 (and $x268 $x165)))
 (let (($x77 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 (_ bv12 32))) (bvult ?x247 (bvsub ?x247 (_ bv12 32))))))
 (let (($x10 (and (and (and true $x268) $x77) $x320)))
 (let (($x332 (and (and (and (and (and (and $x10 $x65) $x170) $x177) $x325) $x72) $x50)))
 (let (($x285 (= $x332 true)))
 (let (($x27 (= $x10 true)))
 (let (($x262 (and $x65 $x170)))
 (let (($x123 (= $x262 true)))
 (let (($x195 (and $x123 $x27)))
 (let (($x95 (and $x195 $x285)))
 (let (($x224 (and $x95 $x166)))
 (let (($x37 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x142 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x142 (_ bv1 32))))
 (let (($x239 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x144 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x144 (_ bv0 32))))
 (let (($x51 (and $x223 $x272)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x203 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x203 (_ bv1 32))))
 (let (($x178 (and $x96 $x51)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x152 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x152 (_ bv1 32))))
 (let (($x44 (and $x12 $x178)))
 (let (($x88 (and $x44 $x224)))
 (let ((?x126 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x221 (= ?x126 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x78 (=> $x12 $x221)))
 (let (($x228 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x259 (= $x12 $x228)))
 (let (($x30 (= false false)))
 (let (($x34 (= ?x152 (_ bv0 32))))
 (let (($x7 (=> $x34 $x30)))
 (let (($x226 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x161 (= $x34 $x226)))
 (let (($x242 (and (and (and $x161 $x7) $x259) $x78)))
 (let (($x331 (and $x242 $x88)))
 (let ((?x180 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x19 (= ?x180 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x74 (=> $x96 $x19)))
 (let (($x118 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x42 (= $x96 $x118)))
 (let (($x184 (= ?x203 (_ bv0 32))))
 (let (($x202 (=> $x184 $x30)))
 (let (($x48 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x71 (= $x184 $x48)))
 (let (($x249 (and (and (and $x71 $x202) $x42) $x74)))
 (let (($x333 (and $x249 $x331)))
 (let (($x232 (= ?x25 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x33 (=> $x272 $x232)))
 (let (($x251 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x233 (= $x272 $x251)))
 (let (($x73 (= ?x142 (_ bv0 32))))
 (let (($x92 (=> $x73 $x30)))
 (let (($x197 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x93 (= $x73 $x197)))
 (let (($x266 (and (and (and $x93 $x92) $x233) $x33)))
 (let (($x341 (and $x266 $x333)))
 (let ((?x109 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x220 (= ?x109 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x104 (bvuge ?x144 (_ bv1 32))))
 (let (($x129 (=> $x104 $x220)))
 (let (($x53 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x175 (= $x104 $x53)))
 (let (($x32 (=> $x223 $x30)))
 (let (($x133 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x254 (= $x223 $x133)))
 (let (($x168 (and (and (and $x254 $x32) $x175) $x129)))
 (let (($x338 (and $x168 $x341)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x339 (and $x255 $x338)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x335 (and $x277 $x339)))
 (let (($x57 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x336 (and $x57 $x335)))
 (let (($x174 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x334 (and $x174 $x336)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x337 (and $x147 $x334)))
 (let (($x340 (and $x30 $x337)))
 (let (($x235 (= ?x126 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x342 (and $x235 $x340)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x363 (and $x49 $x342)))
 (let (($x350 (and $x30 $x363)))
 (let (($x125 (= ?x180 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x347 (and $x125 $x350)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x348 (and $x76 $x347)))
 (let (($x344 (and $x30 $x348)))
 (let (($x192 (= ?x25 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x345 (and $x192 $x344)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x343 (and $x82 $x345)))
 (let (($x346 (and $x30 $x343)))
 (let (($x81 (= ?x109 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x349 (and $x81 $x346)))
 (let (($x275 (bvugt ?x91 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x211 (=> (bvule ?x91 (bvsub (bvadd ?x91 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x275)))))))
 (let (($x199 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x214)))
 (let (($x28 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x216 $x199)))))))
 (let (($x200 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x156 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x200)))))))
 (let (($x120 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x198 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x276 $x120)))))))
 (let (($x269 (and $x198 $x156)))
 (let (($x67 (and $x269 $x28)))
 (let (($x54 (and $x67 $x211)))
 (let (($x351 (and $x54 $x349)))
 (let (($x267 (=> $x351 $x103)))
 (not $x267)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 221 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x189 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x54)))
 (let ((?x293 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x300 (concat ?x293 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x198 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x9 (bvadd ?x198 (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x9) (concat ?x323 ?x300))))
 (let ((?x294 (bvmul (_ bv4294967295 32) ?x296)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x250 (concat ?x134 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x199 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x176 (bvadd ?x199 (_ bv3 32))))
 (let ((?x117 (concat (select input.dst.llvm-mem ?x176) (concat ?x159 ?x250))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x40 (concat ?x154 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x119 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x186 (bvadd ?x119 (_ bv3 32))))
 (let ((?x103 (concat (select input.dst.llvm-mem ?x186) (concat ?x240 ?x40))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x62)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x15)))
 (let ((?x302 (bvadd (bvadd (bvadd ?x145 ?x103) ?x117) ?x294)))
 (let (($x43 (= ?x302 ?x189)))
 (let (($x303 (= $x43 true)))
 (let ((?x335 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x348 (concat ?x347 (concat ?x342 (concat ?x334 ?x335)))))
 (let (($x352 (= ?x348 input.dst.llvm-%m)))
 (let (($x360 (= $x352 true)))
 (let (($x344 (= input.dst.llvm-%m ?x348)))
 (let ((?x331 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x333 (= (_ bv0 32) ?x331)))
 (let ((?x166 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x99 $x224)))
 (let (($x341 (and $x88 $x333)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x338 (and $x95 $x341)))
 (let (($x50 (forall ((input.ind-%var2743X (_ BitVec 32)) )(let ((?x155 (bvadd (bvmul input.ind-%var2743X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x218))))
 (let ((?x25 (input.spec-%var-m-0.1.1 input.ind-%var2743X)))
 (let (($x30 (input.spec-%var-m-0.0.1 input.ind-%var2743X)))
 (=> $x30 (= ?x25 ?x187))))))))
 ))
 (let (($x314 (forall ((input.ind-%var2742X (_ BitVec 32)) )(let (($x30 (input.spec-%var-m-0.0.1 input.ind-%var2742X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var2742X) (bvult input.ind-%var2742X (_ bv100 32))))))
 ))
 (let (($x332 (and $x314 $x50)))
 (let (($x243 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x292 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x177 $x243)))))))
 (let (($x230 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x262 (= (bvand ?x199 (_ bv4294967292 32)) ?x199)))
 (let (($x141 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x199 (bvsub ?x199 (_ bv4 32))) (bvult ?x199 (bvsub ?x199 (_ bv4 32))))))
 (let (($x65 (and true $x141)))
 (let (($x270 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x257 (and $x270 $x65)))
 (let (($x244 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x198 (bvsub ?x198 (_ bv8 32))) (bvult ?x198 (bvsub ?x198 (_ bv8 32))))))
 (let (($x268 (and (and (and true $x244) $x257) $x262)))
 (let (($x27 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x195 (and true $x27)))
 (let (($x77 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x87 (and $x77 $x195)))
 (let (($x149 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x119 (bvsub ?x119 (_ bv12 32))) (bvult ?x119 (bvsub ?x119 (_ bv12 32))))))
 (let (($x110 (and (and (and true $x77) $x149) $x87)))
 (let (($x353 (and (and (and (and (and (and $x110 $x268) $x230) $x292) $x332) $x338) $x344)))
 (let (($x358 (= $x353 true)))
 (let (($x59 (= $x110 true)))
 (let (($x35 (and $x268 $x230)))
 (let (($x265 (= $x35 true)))
 (let (($x86 (and $x265 $x59)))
 (let (($x354 (and $x86 $x358)))
 (let (($x364 (and $x354 $x360)))
 (let (($x92 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x282 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x282 (_ bv0 32))))
 (let (($x254 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x106 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x106 (_ bv1 32))))
 (let (($x280 (and $x220 $x272)))
 (let (($x202 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x191 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x191 (_ bv1 32))))
 (let (($x14 (and $x19 $x280)))
 (let (($x7 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x8 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x8 (_ bv1 32))))
 (let (($x21 (and $x221 $x14)))
 (let (($x357 (and $x21 $x364)))
 (let ((?x79 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x178 (= ?x79 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x44 (=> $x221 $x178)))
 (let (($x78 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x242 (= $x221 $x78)))
 (let (($x275 (= false false)))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let (($x279 (=> $x12 $x275)))
 (let (($x259 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x5 (= $x12 $x259)))
 (let (($x111 (and (and (and $x5 $x279) $x242) $x44)))
 (let (($x355 (and $x111 $x357)))
 (let ((?x126 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x152 (= ?x126 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x34 (=> $x19 $x152)))
 (let (($x74 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x249 (= $x19 $x74)))
 (let (($x96 (= ?x191 (_ bv0 32))))
 (let (($x238 (=> $x96 $x275)))
 (let (($x42 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x46 (= $x96 $x42)))
 (let (($x161 (and (and (and $x46 $x238) $x249) $x34)))
 (let (($x356 (and $x161 $x355)))
 (let ((?x180 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x203 (= ?x180 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x232 (bvuge ?x282 (_ bv1 32))))
 (let (($x184 (=> $x232 $x203)))
 (let (($x33 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x266 (= $x232 $x33)))
 (let (($x48 (and (and (= $x272 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x272 $x275)) $x266)))
 (let (($x71 (and $x48 $x184)))
 (let (($x369 (and $x71 $x356)))
 (let (($x142 (= ?x54 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x73 (=> $x220 $x142)))
 (let (($x129 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x168 (= $x220 $x129)))
 (let (($x104 (= ?x106 (_ bv0 32))))
 (let (($x85 (=> $x104 $x275)))
 (let (($x175 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x245 (= $x104 $x175)))
 (let (($x93 (and (and (and $x245 $x85) $x168) $x73)))
 (let (($x367 (and $x93 $x369)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x368 (and $x133 $x367)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x361 (and $x223 $x368)))
 (let (($x239 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x362 (and $x239 $x361)))
 (let (($x271 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x359 (and $x271 $x362)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x365 (and $x140 $x359)))
 (let (($x366 (and $x275 $x365)))
 (let (($x231 (= ?x79 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x370 (and $x231 $x366)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x157 (and $x147 $x370)))
 (let (($x94 (and $x275 $x157)))
 (let (($x235 (= ?x126 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x206 (and $x235 $x94)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x308 (and $x49 $x206)))
 (let (($x372 (and $x275 $x308)))
 (let (($x125 (= ?x180 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x373 (and $x125 $x372)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x371 (and $x183 $x373)))
 (let (($x237 (and $x275 $x371)))
 (let (($x97 (= ?x54 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x264 (and $x97 $x237)))
 (let (($x225 (bvugt ?x199 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x102 (=> (bvule ?x199 (bvsub (bvadd ?x199 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x225)))))))
 (let (($x148 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x181 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x200 $x148)))))))
 (let (($x214 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x276 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x214)))))))
 (let (($x210 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x247 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x247)))
 (let (($x156 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x246 $x210)))))))
 (let (($x269 (and $x156 $x276)))
 (let (($x248 (and $x269 $x181)))
 (let (($x28 (and $x248 $x102)))
 (let (($x115 (and $x28 $x264)))
 (let (($x288 (=> $x115 $x303)))
 (not $x288))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x189 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x54)))
 (let ((?x293 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x300 (concat ?x293 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x198 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x9 (bvadd ?x198 (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x9) (concat ?x323 ?x300))))
 (let ((?x294 (bvmul (_ bv4294967295 32) ?x296)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x250 (concat ?x134 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x199 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x176 (bvadd ?x199 (_ bv3 32))))
 (let ((?x117 (concat (select input.dst.llvm-mem ?x176) (concat ?x159 ?x250))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x40 (concat ?x154 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x119 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x186 (bvadd ?x119 (_ bv3 32))))
 (let ((?x103 (concat (select input.dst.llvm-mem ?x186) (concat ?x240 ?x40))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x62)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x15)))
 (let ((?x302 (bvadd (bvadd (bvadd ?x145 ?x103) ?x117) ?x294)))
 (let (($x43 (= ?x302 ?x189)))
 (let (($x303 (= $x43 true)))
 (let ((?x335 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x348 (concat ?x347 (concat ?x342 (concat ?x334 ?x335)))))
 (let (($x352 (= ?x348 input.dst.llvm-%m)))
 (let (($x360 (= $x352 true)))
 (let (($x344 (= input.dst.llvm-%m ?x348)))
 (let ((?x331 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x333 (= (_ bv0 32) ?x331)))
 (let ((?x166 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x99 $x224)))
 (let (($x341 (and $x88 $x333)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x338 (and $x95 $x341)))
 (let (($x50 (forall ((input.ind-%var2743X (_ BitVec 32)) )(let ((?x155 (bvadd (bvmul input.ind-%var2743X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x218))))
 (let ((?x25 (input.spec-%var-m-0.1.1 input.ind-%var2743X)))
 (let (($x30 (input.spec-%var-m-0.0.1 input.ind-%var2743X)))
 (=> $x30 (= ?x25 ?x187))))))))
 ))
 (let (($x314 (forall ((input.ind-%var2742X (_ BitVec 32)) )(let (($x30 (input.spec-%var-m-0.0.1 input.ind-%var2742X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var2742X) (bvult input.ind-%var2742X (_ bv100 32))))))
 ))
 (let (($x332 (and $x314 $x50)))
 (let (($x243 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x292 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x177 $x243)))))))
 (let (($x230 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x262 (= (bvand ?x199 (_ bv4294967292 32)) ?x199)))
 (let (($x141 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x199 (bvsub ?x199 (_ bv4 32))) (bvult ?x199 (bvsub ?x199 (_ bv4 32))))))
 (let (($x65 (and true $x141)))
 (let (($x270 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x257 (and $x270 $x65)))
 (let (($x244 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x198 (bvsub ?x198 (_ bv8 32))) (bvult ?x198 (bvsub ?x198 (_ bv8 32))))))
 (let (($x268 (and (and (and true $x244) $x257) $x262)))
 (let (($x27 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x195 (and true $x27)))
 (let (($x77 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x87 (and $x77 $x195)))
 (let (($x149 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x119 (bvsub ?x119 (_ bv12 32))) (bvult ?x119 (bvsub ?x119 (_ bv12 32))))))
 (let (($x110 (and (and (and true $x77) $x149) $x87)))
 (let (($x353 (and (and (and (and (and (and $x110 $x268) $x230) $x292) $x332) $x338) $x344)))
 (let (($x358 (= $x353 true)))
 (let (($x59 (= $x110 true)))
 (let (($x35 (and $x268 $x230)))
 (let (($x265 (= $x35 true)))
 (let (($x86 (and $x265 $x59)))
 (let (($x354 (and $x86 $x358)))
 (let (($x364 (and $x354 $x360)))
 (let (($x92 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x282 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x282 (_ bv0 32))))
 (let (($x254 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x106 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x106 (_ bv1 32))))
 (let (($x280 (and $x220 $x272)))
 (let (($x202 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x191 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x191 (_ bv1 32))))
 (let (($x14 (and $x19 $x280)))
 (let (($x7 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x8 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x8 (_ bv1 32))))
 (let (($x21 (and $x221 $x14)))
 (let (($x357 (and $x21 $x364)))
 (let ((?x79 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x178 (= ?x79 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x44 (=> $x221 $x178)))
 (let (($x78 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x242 (= $x221 $x78)))
 (let (($x275 (= false false)))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let (($x279 (=> $x12 $x275)))
 (let (($x259 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x5 (= $x12 $x259)))
 (let (($x111 (and (and (and $x5 $x279) $x242) $x44)))
 (let (($x355 (and $x111 $x357)))
 (let ((?x126 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x152 (= ?x126 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x34 (=> $x19 $x152)))
 (let (($x74 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x249 (= $x19 $x74)))
 (let (($x96 (= ?x191 (_ bv0 32))))
 (let (($x238 (=> $x96 $x275)))
 (let (($x42 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x46 (= $x96 $x42)))
 (let (($x161 (and (and (and $x46 $x238) $x249) $x34)))
 (let (($x356 (and $x161 $x355)))
 (let ((?x180 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x203 (= ?x180 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x232 (bvuge ?x282 (_ bv1 32))))
 (let (($x184 (=> $x232 $x203)))
 (let (($x33 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x266 (= $x232 $x33)))
 (let (($x48 (and (and (= $x272 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x272 $x275)) $x266)))
 (let (($x71 (and $x48 $x184)))
 (let (($x369 (and $x71 $x356)))
 (let (($x142 (= ?x54 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x73 (=> $x220 $x142)))
 (let (($x129 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x168 (= $x220 $x129)))
 (let (($x104 (= ?x106 (_ bv0 32))))
 (let (($x85 (=> $x104 $x275)))
 (let (($x175 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x245 (= $x104 $x175)))
 (let (($x93 (and (and (and $x245 $x85) $x168) $x73)))
 (let (($x367 (and $x93 $x369)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x368 (and $x133 $x367)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x361 (and $x223 $x368)))
 (let (($x239 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x362 (and $x239 $x361)))
 (let (($x271 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x359 (and $x271 $x362)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x365 (and $x140 $x359)))
 (let (($x366 (and $x275 $x365)))
 (let (($x231 (= ?x79 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x370 (and $x231 $x366)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x157 (and $x147 $x370)))
 (let (($x94 (and $x275 $x157)))
 (let (($x235 (= ?x126 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x206 (and $x235 $x94)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x308 (and $x49 $x206)))
 (let (($x372 (and $x275 $x308)))
 (let (($x125 (= ?x180 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x373 (and $x125 $x372)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x371 (and $x183 $x373)))
 (let (($x237 (and $x275 $x371)))
 (let (($x97 (= ?x54 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x264 (and $x97 $x237)))
 (let (($x225 (bvugt ?x199 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x102 (=> (bvule ?x199 (bvsub (bvadd ?x199 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x225)))))))
 (let (($x148 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x181 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x200 $x148)))))))
 (let (($x214 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x276 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x214)))))))
 (let (($x210 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x247 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x247)))
 (let (($x156 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x246 $x210)))))))
 (let (($x269 (and $x156 $x276)))
 (let (($x248 (and $x269 $x181)))
 (let (($x28 (and $x248 $x102)))
 (let (($x115 (and $x28 $x264)))
 (let (($x288 (=> $x115 $x303)))
 (not $x288))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 218 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x277 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x146 (bvadd ?x277 ?x79)))
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x329 (concat ?x328 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x234 (bvadd ?x6 (_ bv3 32))))
 (let ((?x315 (concat (select input.dst.llvm-mem ?x234) (concat ?x326 ?x329))))
 (let ((?x325 (bvmul (_ bv4294967295 32) ?x315)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x339 (concat ?x39 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x148 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x29 (bvadd ?x148 (_ bv3 32))))
 (let ((?x273 (concat (select input.dst.llvm-mem ?x29) (concat ?x70 ?x339))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x302 (concat ?x294 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x252 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x227 (bvadd ?x252 (_ bv3 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem ?x227) (concat ?x189 ?x302))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x301)))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x293)))
 (let ((?x229 (bvadd (bvadd (bvadd ?x300 ?x288) ?x273) ?x325)))
 (let (($x305 (= ?x229 ?x146)))
 (let (($x286 (= $x305 true)))
 (let ((?x361 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x308 (concat ?x206 (concat ?x370 (concat ?x359 ?x361)))))
 (let (($x55 (= ?x308 input.dst.llvm-%m)))
 (let (($x284 (= $x55 true)))
 (let (($x372 (= input.dst.llvm-%m ?x308)))
 (let ((?x355 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x356 (= (_ bv0 32) ?x355)))
 (let ((?x360 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x364 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x360)))
 (let (($x352 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x357 (and $x352 $x364)))
 (let (($x369 (and $x357 $x356)))
 (let (($x354 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x367 (and $x354 $x369)))
 (let (($x344 (forall ((input.ind-%var2787X (_ BitVec 32)) )(let ((?x341 (bvadd (bvmul input.ind-%var2787X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem ?x341))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv2 32))) ?x347))))
 (let ((?x180 (input.spec-%var-m-0.1.1 input.ind-%var2787X)))
 (let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var2787X)))
 (=> $x275 (= ?x180 ?x337))))))))
 ))
 (let (($x101 (forall ((input.ind-%var2786X (_ BitVec 32)) )(let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var2786X)))
 (= $x275 (and (bvule (_ bv0 32) input.ind-%var2786X) (bvult input.ind-%var2786X (_ bv100 32))))))
 ))
 (let (($x353 (and $x101 $x344)))
 (let (($x346 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x309 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x292 $x346)))))))
 (let (($x236 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x35 (= (bvand ?x148 (_ bv4294967292 32)) ?x148)))
 (let (($x262 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x148 (bvsub ?x148 (_ bv4 32))) (bvult ?x148 (bvsub ?x148 (_ bv4 32))))))
 (let (($x268 (and true $x262)))
 (let (($x141 (= (bvand ?x252 (_ bv4294967292 32)) ?x252)))
 (let (($x321 (and $x141 $x268)))
 (let (($x113 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x77 (and (and (and true $x113) $x321) $x35)))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x86 (and true $x59)))
 (let (($x149 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x345 (and $x149 $x86)))
 (let (($x10 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x252 (bvsub ?x252 (_ bv12 32))) (bvult ?x252 (bvsub ?x252 (_ bv12 32))))))
 (let (($x17 (and (and (and true $x149) $x10) $x345)))
 (let (($x98 (and (and (and (and (and (and $x17 $x77) $x236) $x309) $x353) $x367) $x372)))
 (let (($x164 (= $x98 true)))
 (let (($x290 (= $x17 true)))
 (let (($x13 (and $x77 $x236)))
 (let (($x258 (= $x13 true)))
 (let (($x16 (and $x258 $x290)))
 (let (($x185 (and $x16 $x164)))
 (let (($x116 (and $x185 $x284)))
 (let (($x163 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x122 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x122 (_ bv0 32))))
 (let (($x245 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x173 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x173 (_ bv0 32))))
 (let (($x83 (and $x220 $x232)))
 (let (($x238 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x169 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x169 (_ bv1 32))))
 (let (($x244 (and $x152 $x83)))
 (let (($x279 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x283 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x283 (_ bv1 32))))
 (let (($x123 (and $x178 $x244)))
 (let (($x62 (and $x123 $x116)))
 (let (($x14 (= ?x277 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x21 (=> $x178 $x14)))
 (let (($x44 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x111 (= $x178 $x44)))
 (let (($x225 (= false false)))
 (let (($x221 (= ?x283 (_ bv0 32))))
 (let (($x51 (=> $x221 $x225)))
 (let (($x242 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x112 (= $x221 $x242)))
 (let (($x47 (and (and (and $x112 $x51) $x111) $x21)))
 (let (($x15 (and $x47 $x62)))
 (let (($x8 (= ?x79 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x12 (=> $x152 $x8)))
 (let (($x34 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x161 (= $x152 $x34)))
 (let (($x19 (= ?x169 (_ bv0 32))))
 (let (($x196 (=> $x19 $x225)))
 (let (($x249 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x226 (= $x19 $x249)))
 (let (($x5 (and (and (and $x226 $x196) $x161) $x12)))
 (let (($x145 (and $x5 $x15)))
 (let ((?x126 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x191 (= ?x126 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x203 (bvuge ?x122 (_ bv1 32))))
 (let (($x96 (=> $x203 $x191)))
 (let (($x184 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x71 (= $x203 $x184)))
 (let (($x42 (and (and (= $x232 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x232 $x225)) $x71)))
 (let (($x46 (and $x42 $x96)))
 (let (($x124 (and $x46 $x145)))
 (let ((?x28 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x282 (= ?x28 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x142 (bvuge ?x173 (_ bv1 32))))
 (let (($x272 (=> $x142 $x282)))
 (let (($x73 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x93 (= $x142 $x73)))
 (let (($x37 (=> $x220 $x225)))
 (let (($x168 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x197 (= $x220 $x168)))
 (let (($x209 (and (and (and $x197 $x37) $x93) $x272)))
 (let (($x139 (and $x209 $x124)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x240 (and $x175 $x139)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x188 (and $x104 $x240)))
 (let (($x254 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x154 (and $x254 $x188)))
 (let (($x52 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x20 (and $x52 $x154)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x40 (and $x144 $x20)))
 (let (($x58 (and $x225 $x40)))
 (let (($x255 (= ?x277 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x103 (and $x255 $x58)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x297 (and $x140 $x103)))
 (let (($x291 (and $x225 $x297)))
 (let (($x231 (= ?x79 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x56 (and $x231 $x291)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x159 (and $x147 $x56)))
 (let (($x121 (and $x225 $x159)))
 (let (($x235 (= ?x126 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x134 (and $x235 $x121)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x267 (and $x69 $x134)))
 (let (($x250 (and $x225 $x267)))
 (let (($x176 (= ?x28 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x22 (and $x176 $x250)))
 (let (($x182 (bvugt ?x148 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x167 (=> (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x211 $x182)))))))
 (let (($x219 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x234)))
 (let (($x204 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x219)))))))
 (let (($x9 (bvugt ?x252 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x246 (=> (bvule ?x252 (bvsub (bvadd ?x252 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x9)))))))
 (let (($x100 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x276 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x100)))))))
 (let (($x269 (and $x276 $x246)))
 (let (($x131 (and $x269 $x204)))
 (let (($x181 (and $x131 $x167)))
 (let (($x117 (and $x181 $x22)))
 (let (($x316 (=> $x117 $x286)))
 (not $x316))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x277 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x146 (bvadd ?x277 ?x79)))
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x329 (concat ?x328 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x234 (bvadd ?x6 (_ bv3 32))))
 (let ((?x315 (concat (select input.dst.llvm-mem ?x234) (concat ?x326 ?x329))))
 (let ((?x325 (bvmul (_ bv4294967295 32) ?x315)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x339 (concat ?x39 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x148 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x29 (bvadd ?x148 (_ bv3 32))))
 (let ((?x273 (concat (select input.dst.llvm-mem ?x29) (concat ?x70 ?x339))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x302 (concat ?x294 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x252 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x227 (bvadd ?x252 (_ bv3 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem ?x227) (concat ?x189 ?x302))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x301)))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x293)))
 (let ((?x229 (bvadd (bvadd (bvadd ?x300 ?x288) ?x273) ?x325)))
 (let (($x305 (= ?x229 ?x146)))
 (let (($x286 (= $x305 true)))
 (let ((?x361 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x308 (concat ?x206 (concat ?x370 (concat ?x359 ?x361)))))
 (let (($x55 (= ?x308 input.dst.llvm-%m)))
 (let (($x284 (= $x55 true)))
 (let (($x372 (= input.dst.llvm-%m ?x308)))
 (let ((?x355 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x356 (= (_ bv0 32) ?x355)))
 (let ((?x360 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x364 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x360)))
 (let (($x352 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x357 (and $x352 $x364)))
 (let (($x369 (and $x357 $x356)))
 (let (($x354 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x367 (and $x354 $x369)))
 (let (($x344 (forall ((input.ind-%var2787X (_ BitVec 32)) )(let ((?x341 (bvadd (bvmul input.ind-%var2787X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem ?x341))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv2 32))) ?x347))))
 (let ((?x180 (input.spec-%var-m-0.1.1 input.ind-%var2787X)))
 (let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var2787X)))
 (=> $x275 (= ?x180 ?x337))))))))
 ))
 (let (($x101 (forall ((input.ind-%var2786X (_ BitVec 32)) )(let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var2786X)))
 (= $x275 (and (bvule (_ bv0 32) input.ind-%var2786X) (bvult input.ind-%var2786X (_ bv100 32))))))
 ))
 (let (($x353 (and $x101 $x344)))
 (let (($x346 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x309 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x292 $x346)))))))
 (let (($x236 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x35 (= (bvand ?x148 (_ bv4294967292 32)) ?x148)))
 (let (($x262 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x148 (bvsub ?x148 (_ bv4 32))) (bvult ?x148 (bvsub ?x148 (_ bv4 32))))))
 (let (($x268 (and true $x262)))
 (let (($x141 (= (bvand ?x252 (_ bv4294967292 32)) ?x252)))
 (let (($x321 (and $x141 $x268)))
 (let (($x113 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x77 (and (and (and true $x113) $x321) $x35)))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x86 (and true $x59)))
 (let (($x149 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x345 (and $x149 $x86)))
 (let (($x10 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x252 (bvsub ?x252 (_ bv12 32))) (bvult ?x252 (bvsub ?x252 (_ bv12 32))))))
 (let (($x17 (and (and (and true $x149) $x10) $x345)))
 (let (($x98 (and (and (and (and (and (and $x17 $x77) $x236) $x309) $x353) $x367) $x372)))
 (let (($x164 (= $x98 true)))
 (let (($x290 (= $x17 true)))
 (let (($x13 (and $x77 $x236)))
 (let (($x258 (= $x13 true)))
 (let (($x16 (and $x258 $x290)))
 (let (($x185 (and $x16 $x164)))
 (let (($x116 (and $x185 $x284)))
 (let (($x163 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x122 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x122 (_ bv0 32))))
 (let (($x245 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x173 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x173 (_ bv0 32))))
 (let (($x83 (and $x220 $x232)))
 (let (($x238 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x169 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x169 (_ bv1 32))))
 (let (($x244 (and $x152 $x83)))
 (let (($x279 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x283 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x283 (_ bv1 32))))
 (let (($x123 (and $x178 $x244)))
 (let (($x62 (and $x123 $x116)))
 (let (($x14 (= ?x277 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x21 (=> $x178 $x14)))
 (let (($x44 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x111 (= $x178 $x44)))
 (let (($x225 (= false false)))
 (let (($x221 (= ?x283 (_ bv0 32))))
 (let (($x51 (=> $x221 $x225)))
 (let (($x242 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x112 (= $x221 $x242)))
 (let (($x47 (and (and (and $x112 $x51) $x111) $x21)))
 (let (($x15 (and $x47 $x62)))
 (let (($x8 (= ?x79 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x12 (=> $x152 $x8)))
 (let (($x34 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x161 (= $x152 $x34)))
 (let (($x19 (= ?x169 (_ bv0 32))))
 (let (($x196 (=> $x19 $x225)))
 (let (($x249 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x226 (= $x19 $x249)))
 (let (($x5 (and (and (and $x226 $x196) $x161) $x12)))
 (let (($x145 (and $x5 $x15)))
 (let ((?x126 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x191 (= ?x126 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x203 (bvuge ?x122 (_ bv1 32))))
 (let (($x96 (=> $x203 $x191)))
 (let (($x184 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x71 (= $x203 $x184)))
 (let (($x42 (and (and (= $x232 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x232 $x225)) $x71)))
 (let (($x46 (and $x42 $x96)))
 (let (($x124 (and $x46 $x145)))
 (let ((?x28 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x282 (= ?x28 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x142 (bvuge ?x173 (_ bv1 32))))
 (let (($x272 (=> $x142 $x282)))
 (let (($x73 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x93 (= $x142 $x73)))
 (let (($x37 (=> $x220 $x225)))
 (let (($x168 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x197 (= $x220 $x168)))
 (let (($x209 (and (and (and $x197 $x37) $x93) $x272)))
 (let (($x139 (and $x209 $x124)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x240 (and $x175 $x139)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x188 (and $x104 $x240)))
 (let (($x254 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x154 (and $x254 $x188)))
 (let (($x52 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x20 (and $x52 $x154)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x40 (and $x144 $x20)))
 (let (($x58 (and $x225 $x40)))
 (let (($x255 (= ?x277 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x103 (and $x255 $x58)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x297 (and $x140 $x103)))
 (let (($x291 (and $x225 $x297)))
 (let (($x231 (= ?x79 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x56 (and $x231 $x291)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x159 (and $x147 $x56)))
 (let (($x121 (and $x225 $x159)))
 (let (($x235 (= ?x126 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x134 (and $x235 $x121)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x267 (and $x69 $x134)))
 (let (($x250 (and $x225 $x267)))
 (let (($x176 (= ?x28 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x22 (and $x176 $x250)))
 (let (($x182 (bvugt ?x148 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x167 (=> (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x211 $x182)))))))
 (let (($x219 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x234)))
 (let (($x204 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x219)))))))
 (let (($x9 (bvugt ?x252 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x246 (=> (bvule ?x252 (bvsub (bvadd ?x252 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x9)))))))
 (let (($x100 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x276 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x100)))))))
 (let (($x269 (and $x276 $x246)))
 (let (($x131 (and $x269 $x204)))
 (let (($x181 (and $x131 $x167)))
 (let (($x117 (and $x181 $x22)))
 (let (($x316 (=> $x117 $x286)))
 (not $x316))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 218 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x171 (bvmul (_ bv4294967295 32) ?x79)))
 (let ((?x201 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x171)))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x349 (concat ?x166 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x256 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x276 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x31 (bvadd ?x276 (_ bv3 32))))
 (let ((?x332 (concat (select input.dst.llvm-mem ?x31) (concat ?x256 ?x349))))
 (let ((?x95 (bvmul (_ bv4294967295 32) ?x332)))
 (let ((?x368 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x85 (concat ?x368 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x219 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x91 (bvadd ?x219 (_ bv3 32))))
 (let ((?x25 (concat (select input.dst.llvm-mem ?x91) (concat ?x72 ?x85))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x229 (concat ?x325 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x36 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x158 (bvadd ?x36 (_ bv3 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem ?x158) (concat ?x305 ?x229))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x11)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x328)))
 (let ((?x317 (bvadd (bvadd (bvadd ?x329 ?x130) ?x25) ?x95)))
 (let (($x331 (= ?x317 ?x201)))
 (let (($x324 (= $x331 true)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x56 (concat ?x103 (concat ?x20 ?x188)))))
 (let (($x45 (= ?x159 input.dst.llvm-%m)))
 (let (($x295 (= $x45 true)))
 (let (($x121 (= input.dst.llvm-%m ?x159)))
 (let ((?x15 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x145 (= (_ bv0 32) ?x15)))
 (let ((?x284 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x284)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x55 $x116)))
 (let (($x124 (and $x62 $x145)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x185 $x124)))
 (let (($x372 (forall ((input.ind-%var2831X (_ BitVec 32)) )(let ((?x369 (bvadd (bvmul input.ind-%var2831X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x369 (_ bv1 32))) (select input.dst.llvm-mem ?x369))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x369 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x369 (_ bv2 32))) ?x206))))
 (let ((?x126 (input.spec-%var-m-0.1.1 input.ind-%var2831X)))
 (let (($x225 (input.spec-%var-m-0.0.1 input.ind-%var2831X)))
 (=> $x225 (= ?x126 ?x365))))))))
 ))
 (let (($x342 (forall ((input.ind-%var2830X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.0.1 input.ind-%var2830X)))
 (= $x225 (and (bvule (_ bv0 32) input.ind-%var2830X) (bvult input.ind-%var2830X (_ bv100 32))))))
 ))
 (let (($x98 (and $x342 $x372)))
 (let (($x237 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x309 $x237)))))))
 (let (($x165 (= (bvand ?x276 (_ bv4294967292 32)) ?x276)))
 (let (($x13 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let (($x35 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv4 32))) (bvult ?x219 (bvsub ?x219 (_ bv4 32))))))
 (let (($x77 (and true $x35)))
 (let (($x262 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x153 (and $x262 $x77)))
 (let (($x65 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x276 (bvsub ?x276 (_ bv8 32))) (bvult ?x276 (bvsub ?x276 (_ bv8 32))))))
 (let (($x149 (and (and (and true $x65) $x153) $x13)))
 (let (($x290 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x16 (and true $x290)))
 (let (($x10 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x373 (and $x10 $x16)))
 (let (($x110 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x36 (bvsub ?x36 (_ bv12 32))) (bvult ?x36 (bvsub ?x36 (_ bv12 32))))))
 (let (($x289 (and (and (and true $x10) $x110) $x373)))
 (let (($x213 (and (and (and (and (and (and $x289 $x149) $x165) $x61) $x98) $x139) $x121)))
 (let (($x323 (= $x213 true)))
 (let (($x306 (= $x289 true)))
 (let (($x114 (and $x149 $x165)))
 (let (($x207 (= $x114 true)))
 (let (($x162 (and $x207 $x306)))
 (let (($x261 (and $x162 $x323)))
 (let (($x299 (and $x261 $x295)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x118 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x118 (_ bv1 32))))
 (let (($x197 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x251 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x251 (_ bv1 32))))
 (let (($x215 (and $x282 $x191)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x228 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x228 (_ bv0 32))))
 (let (($x113 (and $x152 $x215)))
 (let (($x51 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x160 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x160 (_ bv1 32))))
 (let (($x265 (and $x14 $x113)))
 (let (($x301 (and $x265 $x299)))
 (let ((?x223 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x244 (= ?x223 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x123 (=> $x14 $x244)))
 (let (($x21 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x47 (= $x14 $x21)))
 (let (($x182 (= false false)))
 (let (($x178 (= ?x160 (_ bv0 32))))
 (let (($x280 (=> $x178 $x182)))
 (let (($x111 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x105 (= $x178 $x111)))
 (let (($x270 (and (and (and $x105 $x280) $x47) $x123)))
 (let (($x293 (and $x270 $x301)))
 (let ((?x277 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x283 (= ?x277 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x8 (bvuge ?x228 (_ bv1 32))))
 (let (($x221 (=> $x8 $x283)))
 (let (($x12 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x5 (= $x8 $x12)))
 (let (($x242 (and (and (= $x152 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x152 $x182)) $x5)))
 (let (($x112 (and $x242 $x221)))
 (let (($x300 (and $x112 $x293)))
 (let (($x169 (= ?x79 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x19 (=> $x191 $x169)))
 (let (($x96 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x46 (= $x191 $x96)))
 (let (($x203 (= ?x118 (_ bv0 32))))
 (let (($x202 (=> $x203 $x182)))
 (let (($x71 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x42 (= $x203 $x71)))
 (let (($x226 (and (and (and $x42 $x202) $x46) $x19)))
 (let (($x303 (and $x226 $x300)))
 (let ((?x181 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x122 (= ?x181 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x232 (=> $x282 $x122)))
 (let (($x272 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x209 (= $x282 $x272)))
 (let (($x142 (= ?x251 (_ bv0 32))))
 (let (($x92 (=> $x142 $x182)))
 (let (($x93 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x233 (= $x142 $x93)))
 (let (($x48 (and (and (and $x233 $x92) $x209) $x232)))
 (let (($x23 (and $x48 $x303)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x189 (and $x168 $x23)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x296 (and $x220 $x189)))
 (let (($x245 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x294 (and $x245 $x296)))
 (let (($x53 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x298 (and $x53 $x294)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x302 (and $x106 $x298)))
 (let (($x43 (and $x182 $x302)))
 (let (($x133 (= ?x223 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x288 (and $x133 $x43)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x327 (and $x144 $x288)))
 (let (($x322 (and $x182 $x327)))
 (let (($x255 (= ?x277 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x32 (and $x255 $x322)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x70 (and $x140 $x32)))
 (let (($x127 (and $x182 $x70)))
 (let (($x231 (= ?x79 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x39 (and $x231 $x127)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x304 (and $x179 $x39)))
 (let (($x339 (and $x182 $x304)))
 (let (($x29 (= ?x181 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x307 (and $x29 $x339)))
 (let (($x67 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x109 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x67)))))))
 (let (($x41 (bvugt ?x276 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x63 (=> (bvule ?x276 (bvsub (bvadd ?x276 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x41)))))))
 (let (($x234 (bvugt ?x36 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x143 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x234)))))))
 (let (($x208 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x252 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x252)))
 (let (($x246 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x208)))))))
 (let (($x269 (and $x246 $x143)))
 (let (($x151 (and $x269 $x63)))
 (let (($x204 (and $x151 $x109)))
 (let (($x273 (and $x204 $x307)))
 (let (($x287 (=> $x273 $x324)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x171 (bvmul (_ bv4294967295 32) ?x79)))
 (let ((?x201 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x171)))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x349 (concat ?x166 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x256 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x276 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x31 (bvadd ?x276 (_ bv3 32))))
 (let ((?x332 (concat (select input.dst.llvm-mem ?x31) (concat ?x256 ?x349))))
 (let ((?x95 (bvmul (_ bv4294967295 32) ?x332)))
 (let ((?x368 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x85 (concat ?x368 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x219 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x91 (bvadd ?x219 (_ bv3 32))))
 (let ((?x25 (concat (select input.dst.llvm-mem ?x91) (concat ?x72 ?x85))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x229 (concat ?x325 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x36 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x158 (bvadd ?x36 (_ bv3 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem ?x158) (concat ?x305 ?x229))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x11)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x328)))
 (let ((?x317 (bvadd (bvadd (bvadd ?x329 ?x130) ?x25) ?x95)))
 (let (($x331 (= ?x317 ?x201)))
 (let (($x324 (= $x331 true)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x56 (concat ?x103 (concat ?x20 ?x188)))))
 (let (($x45 (= ?x159 input.dst.llvm-%m)))
 (let (($x295 (= $x45 true)))
 (let (($x121 (= input.dst.llvm-%m ?x159)))
 (let ((?x15 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x145 (= (_ bv0 32) ?x15)))
 (let ((?x284 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x284)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x55 $x116)))
 (let (($x124 (and $x62 $x145)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x185 $x124)))
 (let (($x372 (forall ((input.ind-%var2831X (_ BitVec 32)) )(let ((?x369 (bvadd (bvmul input.ind-%var2831X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x369 (_ bv1 32))) (select input.dst.llvm-mem ?x369))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x369 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x369 (_ bv2 32))) ?x206))))
 (let ((?x126 (input.spec-%var-m-0.1.1 input.ind-%var2831X)))
 (let (($x225 (input.spec-%var-m-0.0.1 input.ind-%var2831X)))
 (=> $x225 (= ?x126 ?x365))))))))
 ))
 (let (($x342 (forall ((input.ind-%var2830X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.0.1 input.ind-%var2830X)))
 (= $x225 (and (bvule (_ bv0 32) input.ind-%var2830X) (bvult input.ind-%var2830X (_ bv100 32))))))
 ))
 (let (($x98 (and $x342 $x372)))
 (let (($x237 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x309 $x237)))))))
 (let (($x165 (= (bvand ?x276 (_ bv4294967292 32)) ?x276)))
 (let (($x13 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let (($x35 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv4 32))) (bvult ?x219 (bvsub ?x219 (_ bv4 32))))))
 (let (($x77 (and true $x35)))
 (let (($x262 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x153 (and $x262 $x77)))
 (let (($x65 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x276 (bvsub ?x276 (_ bv8 32))) (bvult ?x276 (bvsub ?x276 (_ bv8 32))))))
 (let (($x149 (and (and (and true $x65) $x153) $x13)))
 (let (($x290 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x16 (and true $x290)))
 (let (($x10 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x373 (and $x10 $x16)))
 (let (($x110 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x36 (bvsub ?x36 (_ bv12 32))) (bvult ?x36 (bvsub ?x36 (_ bv12 32))))))
 (let (($x289 (and (and (and true $x10) $x110) $x373)))
 (let (($x213 (and (and (and (and (and (and $x289 $x149) $x165) $x61) $x98) $x139) $x121)))
 (let (($x323 (= $x213 true)))
 (let (($x306 (= $x289 true)))
 (let (($x114 (and $x149 $x165)))
 (let (($x207 (= $x114 true)))
 (let (($x162 (and $x207 $x306)))
 (let (($x261 (and $x162 $x323)))
 (let (($x299 (and $x261 $x295)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x118 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x118 (_ bv1 32))))
 (let (($x197 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x251 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x251 (_ bv1 32))))
 (let (($x215 (and $x282 $x191)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x228 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x228 (_ bv0 32))))
 (let (($x113 (and $x152 $x215)))
 (let (($x51 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x160 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x160 (_ bv1 32))))
 (let (($x265 (and $x14 $x113)))
 (let (($x301 (and $x265 $x299)))
 (let ((?x223 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x244 (= ?x223 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x123 (=> $x14 $x244)))
 (let (($x21 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x47 (= $x14 $x21)))
 (let (($x182 (= false false)))
 (let (($x178 (= ?x160 (_ bv0 32))))
 (let (($x280 (=> $x178 $x182)))
 (let (($x111 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x105 (= $x178 $x111)))
 (let (($x270 (and (and (and $x105 $x280) $x47) $x123)))
 (let (($x293 (and $x270 $x301)))
 (let ((?x277 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x283 (= ?x277 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x8 (bvuge ?x228 (_ bv1 32))))
 (let (($x221 (=> $x8 $x283)))
 (let (($x12 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x5 (= $x8 $x12)))
 (let (($x242 (and (and (= $x152 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x152 $x182)) $x5)))
 (let (($x112 (and $x242 $x221)))
 (let (($x300 (and $x112 $x293)))
 (let (($x169 (= ?x79 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x19 (=> $x191 $x169)))
 (let (($x96 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x46 (= $x191 $x96)))
 (let (($x203 (= ?x118 (_ bv0 32))))
 (let (($x202 (=> $x203 $x182)))
 (let (($x71 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x42 (= $x203 $x71)))
 (let (($x226 (and (and (and $x42 $x202) $x46) $x19)))
 (let (($x303 (and $x226 $x300)))
 (let ((?x181 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x122 (= ?x181 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x232 (=> $x282 $x122)))
 (let (($x272 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x209 (= $x282 $x272)))
 (let (($x142 (= ?x251 (_ bv0 32))))
 (let (($x92 (=> $x142 $x182)))
 (let (($x93 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x233 (= $x142 $x93)))
 (let (($x48 (and (and (and $x233 $x92) $x209) $x232)))
 (let (($x23 (and $x48 $x303)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x189 (and $x168 $x23)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x296 (and $x220 $x189)))
 (let (($x245 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x294 (and $x245 $x296)))
 (let (($x53 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x298 (and $x53 $x294)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x302 (and $x106 $x298)))
 (let (($x43 (and $x182 $x302)))
 (let (($x133 (= ?x223 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x288 (and $x133 $x43)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x327 (and $x144 $x288)))
 (let (($x322 (and $x182 $x327)))
 (let (($x255 (= ?x277 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x32 (and $x255 $x322)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x70 (and $x140 $x32)))
 (let (($x127 (and $x182 $x70)))
 (let (($x231 (= ?x79 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x39 (and $x231 $x127)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x304 (and $x179 $x39)))
 (let (($x339 (and $x182 $x304)))
 (let (($x29 (= ?x181 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x307 (and $x29 $x339)))
 (let (($x67 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x109 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x67)))))))
 (let (($x41 (bvugt ?x276 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x63 (=> (bvule ?x276 (bvsub (bvadd ?x276 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x41)))))))
 (let (($x234 (bvugt ?x36 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x143 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x234)))))))
 (let (($x208 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x252 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x252)))
 (let (($x246 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x208)))))))
 (let (($x269 (and $x246 $x143)))
 (let (($x151 (and $x269 $x63)))
 (let (($x204 (and $x151 $x109)))
 (let (($x273 (and $x204 $x307)))
 (let (($x287 (=> $x273 $x324)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 219 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x277 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x190 (bvmul (_ bv4294967295 32) ?x277)))
 (let ((?x104 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x218 (bvadd ?x104 ?x190)))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x352 (concat ?x337 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x183 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x84 (bvadd ?x183 (_ bv3 32))))
 (let ((?x344 (concat (select input.dst.llvm-mem ?x84) (concat ?x264 ?x352))))
 (let ((?x363 (bvmul (_ bv4294967295 32) ?x344)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x292 (concat ?x210 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x41 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x199 (bvadd ?x41 (_ bv3 32))))
 (let ((?x346 (concat (select input.dst.llvm-mem ?x199) (concat ?x37 ?x292))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x317 (concat ?x95 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x57 (bvadd ?x156 (_ bv3 32))))
 (let ((?x324 (concat (select input.dst.llvm-mem ?x57) (concat ?x171 ?x317))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x285)))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x166)))
 (let ((?x364 (bvadd (bvadd (bvadd ?x349 ?x324) ?x346) ?x363)))
 (let (($x333 (= ?x364 ?x218)))
 (let (($x357 (= $x333 true)))
 (let ((?x296 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x32 (concat ?x288 (concat ?x298 ?x296)))))
 (let (($x217 (= ?x70 input.dst.llvm-%m)))
 (let (($x319 (= $x217 true)))
 (let (($x127 (= input.dst.llvm-%m ?x70)))
 (let ((?x293 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x300 (= (_ bv0 32) ?x293)))
 (let ((?x295 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x295)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (and $x45 $x299)))
 (let (($x303 (and $x301 $x300)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x261 $x303)))
 (let (($x121 (forall ((input.ind-%var2875X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var2875X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x56))))
 (let ((?x79 (input.spec-%var-m-0.1.1 input.ind-%var2875X)))
 (let (($x182 (input.spec-%var-m-0.0.1 input.ind-%var2875X)))
 (=> $x182 (= ?x79 ?x40))))))))
 ))
 (let (($x370 (forall ((input.ind-%var2874X (_ BitVec 32)) )(let (($x182 (input.spec-%var-m-0.0.1 input.ind-%var2874X)))
 (= $x182 (and (bvule (_ bv0 32) input.ind-%var2874X) (bvult input.ind-%var2874X (_ bv100 32))))))
 ))
 (let (($x213 (and $x370 $x121)))
 (let (($x250 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x335 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x250)))))))
 (let (($x195 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x114 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x13 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv4 32))) (bvult ?x41 (bvsub ?x41 (_ bv4 32))))))
 (let (($x149 (and true $x13)))
 (let (($x35 (= (bvand ?x156 (_ bv4294967292 32)) ?x156)))
 (let (($x343 (and $x35 $x149)))
 (let (($x268 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x183 (bvsub ?x183 (_ bv8 32))) (bvult ?x183 (bvsub ?x183 (_ bv8 32))))))
 (let (($x10 (and (and (and true $x268) $x343) $x114)))
 (let (($x306 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x162 (and true $x306)))
 (let (($x110 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x134 (and $x110 $x162)))
 (let (($x17 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x156 (bvsub ?x156 (_ bv12 32))) (bvult ?x156 (bvsub ?x156 (_ bv12 32))))))
 (let (($x311 (and (and (and true $x110) $x17) $x134)))
 (let (($x310 (and (and (and (and (and (and $x311 $x10) $x195) $x335) $x213) $x23) $x127)))
 (let (($x326 (= $x310 true)))
 (let (($x155 (= $x311 true)))
 (let (($x108 (and $x10 $x195)))
 (let (($x27 (= $x108 true)))
 (let (($x107 (and $x27 $x155)))
 (let (($x312 (and $x107 $x326)))
 (let (($x330 (and $x312 $x319)))
 (let (($x202 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x74 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x74 (_ bv1 32))))
 (let (($x233 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x33 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x33 (_ bv0 32))))
 (let (($x257 (and $x282 $x169)))
 (let (($x7 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x78 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x78 (_ bv0 32))))
 (let (($x65 (and $x8 $x257)))
 (let (($x280 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x281 (ite $x280 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x281 (_ bv1 32))))
 (let (($x258 (and $x244 $x65)))
 (let (($x11 (and $x258 $x330)))
 (let (($x113 (= ?x104 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x265 (=> $x244 $x113)))
 (let (($x123 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x270 (= $x244 $x123)))
 (let (($x67 (= false false)))
 (let (($x14 (= ?x281 (_ bv0 32))))
 (let (($x83 (=> $x14 $x67)))
 (let (($x47 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x278 (= $x14 $x47)))
 (let (($x141 (and (and (and $x278 $x83) $x270) $x265)))
 (let (($x328 (and $x141 $x11)))
 (let ((?x223 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x160 (= ?x223 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x283 (bvuge ?x78 (_ bv1 32))))
 (let (($x178 (=> $x283 $x160)))
 (let (($x221 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x112 (= $x283 $x221)))
 (let (($x111 (and (and (= $x8 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x8 $x67)) $x112)))
 (let (($x105 (and $x111 $x178)))
 (let (($x329 (and $x105 $x328)))
 (let (($x228 (= ?x277 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x152 (=> $x169 $x228)))
 (let (($x19 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x226 (= $x169 $x19)))
 (let (($x191 (= ?x74 (_ bv0 32))))
 (let (($x238 (=> $x191 $x67)))
 (let (($x46 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x249 (= $x191 $x46)))
 (let (($x259 (and (and (and $x249 $x238) $x226) $x152)))
 (let (($x316 (and $x259 $x329)))
 (let ((?x204 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x118 (= ?x204 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x122 (bvuge ?x33 (_ bv1 32))))
 (let (($x203 (=> $x122 $x118)))
 (let (($x232 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x48 (= $x122 $x232)))
 (let (($x163 (=> $x282 $x67)))
 (let (($x209 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x266 (= $x282 $x209)))
 (let (($x42 (and (and (and $x266 $x163) $x48) $x203)))
 (let (($x146 (and $x42 $x316)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x305 (and $x93 $x146)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x315 (and $x142 $x305)))
 (let (($x197 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x325 (and $x197 $x315)))
 (let (($x129 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x318 (and $x129 $x325)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x229 (and $x173 $x318)))
 (let (($x286 (and $x67 $x229)))
 (let (($x175 (= ?x104 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x130 (and $x175 $x286)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x224 (and $x106 $x130)))
 (let (($x313 (and $x67 $x224)))
 (let (($x133 (= ?x223 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x81 (and $x133 $x313)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x72 (and $x144 $x81)))
 (let (($x177 (and $x67 $x72)))
 (let (($x255 (= ?x277 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x368 (and $x255 $x177)))
 (let (($x211 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x120 (and $x211 $x368)))
 (let (($x85 (and $x67 $x120)))
 (let (($x91 (= ?x204 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x243 (and $x91 $x85)))
 (let (($x248 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x199)))
 (let (($x54 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x248)))))))
 (let (($x89 (bvugt ?x183 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x216 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x89)))))))
 (let (($x31 (bvugt ?x156 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x198 (=> (bvule ?x156 (bvsub (bvadd ?x156 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x31)))))))
 (let (($x75 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x143 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x75)))))))
 (let (($x269 (and $x143 $x198)))
 (let (($x60 (and $x269 $x216)))
 (let (($x63 (and $x60 $x54)))
 (let (($x25 (and $x63 $x243)))
 (let (($x350 (=> $x25 $x357)))
 (not $x350)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x277 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x190 (bvmul (_ bv4294967295 32) ?x277)))
 (let ((?x104 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x218 (bvadd ?x104 ?x190)))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x352 (concat ?x337 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x183 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x84 (bvadd ?x183 (_ bv3 32))))
 (let ((?x344 (concat (select input.dst.llvm-mem ?x84) (concat ?x264 ?x352))))
 (let ((?x363 (bvmul (_ bv4294967295 32) ?x344)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x292 (concat ?x210 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x41 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x199 (bvadd ?x41 (_ bv3 32))))
 (let ((?x346 (concat (select input.dst.llvm-mem ?x199) (concat ?x37 ?x292))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x317 (concat ?x95 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x57 (bvadd ?x156 (_ bv3 32))))
 (let ((?x324 (concat (select input.dst.llvm-mem ?x57) (concat ?x171 ?x317))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x285)))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x166)))
 (let ((?x364 (bvadd (bvadd (bvadd ?x349 ?x324) ?x346) ?x363)))
 (let (($x333 (= ?x364 ?x218)))
 (let (($x357 (= $x333 true)))
 (let ((?x296 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x32 (concat ?x288 (concat ?x298 ?x296)))))
 (let (($x217 (= ?x70 input.dst.llvm-%m)))
 (let (($x319 (= $x217 true)))
 (let (($x127 (= input.dst.llvm-%m ?x70)))
 (let ((?x293 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x300 (= (_ bv0 32) ?x293)))
 (let ((?x295 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x295)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (and $x45 $x299)))
 (let (($x303 (and $x301 $x300)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x261 $x303)))
 (let (($x121 (forall ((input.ind-%var2875X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var2875X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x56))))
 (let ((?x79 (input.spec-%var-m-0.1.1 input.ind-%var2875X)))
 (let (($x182 (input.spec-%var-m-0.0.1 input.ind-%var2875X)))
 (=> $x182 (= ?x79 ?x40))))))))
 ))
 (let (($x370 (forall ((input.ind-%var2874X (_ BitVec 32)) )(let (($x182 (input.spec-%var-m-0.0.1 input.ind-%var2874X)))
 (= $x182 (and (bvule (_ bv0 32) input.ind-%var2874X) (bvult input.ind-%var2874X (_ bv100 32))))))
 ))
 (let (($x213 (and $x370 $x121)))
 (let (($x250 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x335 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x250)))))))
 (let (($x195 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x114 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x13 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv4 32))) (bvult ?x41 (bvsub ?x41 (_ bv4 32))))))
 (let (($x149 (and true $x13)))
 (let (($x35 (= (bvand ?x156 (_ bv4294967292 32)) ?x156)))
 (let (($x343 (and $x35 $x149)))
 (let (($x268 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x183 (bvsub ?x183 (_ bv8 32))) (bvult ?x183 (bvsub ?x183 (_ bv8 32))))))
 (let (($x10 (and (and (and true $x268) $x343) $x114)))
 (let (($x306 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x162 (and true $x306)))
 (let (($x110 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x134 (and $x110 $x162)))
 (let (($x17 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x156 (bvsub ?x156 (_ bv12 32))) (bvult ?x156 (bvsub ?x156 (_ bv12 32))))))
 (let (($x311 (and (and (and true $x110) $x17) $x134)))
 (let (($x310 (and (and (and (and (and (and $x311 $x10) $x195) $x335) $x213) $x23) $x127)))
 (let (($x326 (= $x310 true)))
 (let (($x155 (= $x311 true)))
 (let (($x108 (and $x10 $x195)))
 (let (($x27 (= $x108 true)))
 (let (($x107 (and $x27 $x155)))
 (let (($x312 (and $x107 $x326)))
 (let (($x330 (and $x312 $x319)))
 (let (($x202 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x74 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x74 (_ bv1 32))))
 (let (($x233 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x33 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x33 (_ bv0 32))))
 (let (($x257 (and $x282 $x169)))
 (let (($x7 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x78 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x78 (_ bv0 32))))
 (let (($x65 (and $x8 $x257)))
 (let (($x280 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x281 (ite $x280 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x281 (_ bv1 32))))
 (let (($x258 (and $x244 $x65)))
 (let (($x11 (and $x258 $x330)))
 (let (($x113 (= ?x104 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x265 (=> $x244 $x113)))
 (let (($x123 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x270 (= $x244 $x123)))
 (let (($x67 (= false false)))
 (let (($x14 (= ?x281 (_ bv0 32))))
 (let (($x83 (=> $x14 $x67)))
 (let (($x47 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x278 (= $x14 $x47)))
 (let (($x141 (and (and (and $x278 $x83) $x270) $x265)))
 (let (($x328 (and $x141 $x11)))
 (let ((?x223 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x160 (= ?x223 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x283 (bvuge ?x78 (_ bv1 32))))
 (let (($x178 (=> $x283 $x160)))
 (let (($x221 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x112 (= $x283 $x221)))
 (let (($x111 (and (and (= $x8 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x8 $x67)) $x112)))
 (let (($x105 (and $x111 $x178)))
 (let (($x329 (and $x105 $x328)))
 (let (($x228 (= ?x277 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x152 (=> $x169 $x228)))
 (let (($x19 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x226 (= $x169 $x19)))
 (let (($x191 (= ?x74 (_ bv0 32))))
 (let (($x238 (=> $x191 $x67)))
 (let (($x46 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x249 (= $x191 $x46)))
 (let (($x259 (and (and (and $x249 $x238) $x226) $x152)))
 (let (($x316 (and $x259 $x329)))
 (let ((?x204 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x118 (= ?x204 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x122 (bvuge ?x33 (_ bv1 32))))
 (let (($x203 (=> $x122 $x118)))
 (let (($x232 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x48 (= $x122 $x232)))
 (let (($x163 (=> $x282 $x67)))
 (let (($x209 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x266 (= $x282 $x209)))
 (let (($x42 (and (and (and $x266 $x163) $x48) $x203)))
 (let (($x146 (and $x42 $x316)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x305 (and $x93 $x146)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x315 (and $x142 $x305)))
 (let (($x197 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x325 (and $x197 $x315)))
 (let (($x129 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x318 (and $x129 $x325)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x229 (and $x173 $x318)))
 (let (($x286 (and $x67 $x229)))
 (let (($x175 (= ?x104 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x130 (and $x175 $x286)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x224 (and $x106 $x130)))
 (let (($x313 (and $x67 $x224)))
 (let (($x133 (= ?x223 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x81 (and $x133 $x313)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x72 (and $x144 $x81)))
 (let (($x177 (and $x67 $x72)))
 (let (($x255 (= ?x277 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x368 (and $x255 $x177)))
 (let (($x211 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x120 (and $x211 $x368)))
 (let (($x85 (and $x67 $x120)))
 (let (($x91 (= ?x204 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x243 (and $x91 $x85)))
 (let (($x248 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x199)))
 (let (($x54 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x248)))))))
 (let (($x89 (bvugt ?x183 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x216 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x89)))))))
 (let (($x31 (bvugt ?x156 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x198 (=> (bvule ?x156 (bvsub (bvadd ?x156 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x31)))))))
 (let (($x75 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x143 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x75)))))))
 (let (($x269 (and $x143 $x198)))
 (let (($x60 (and $x269 $x216)))
 (let (($x63 (and $x60 $x54)))
 (let (($x25 (and $x63 $x243)))
 (let (($x350 (=> $x25 $x357)))
 (not $x350)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 219 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x220 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x347 (bvadd ?x220 ?x63)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x284 (concat ?x55 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x135 (bvadd ?x68 (_ bv3 32))))
 (let ((?x157 (concat (select input.dst.llvm-mem ?x135) (concat ?x164 ?x284))))
 (let ((?x98 (bvmul (_ bv4294967295 32) ?x157)))
 (let ((?x309 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x189 (concat ?x309 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x89 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x148 (bvadd ?x89 (_ bv3 32))))
 (let ((?x340 (concat (select input.dst.llvm-mem ?x148) (concat ?x176 ?x189))))
 (let ((?x363 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x364 (concat ?x363 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x82 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x239 (bvadd ?x82 (_ bv3 32))))
 (let ((?x350 (concat (select input.dst.llvm-mem ?x239) (concat ?x218 ?x364))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x360)))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x337)))
 (let ((?x76 (bvadd (bvadd (bvadd ?x352 ?x350) ?x340) ?x98)))
 (let (($x356 (= ?x76 ?x347)))
 (let (($x62 (= $x356 true)))
 (let ((?x315 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x318 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x81 (concat ?x130 (concat ?x318 ?x315)))))
 (let (($x26 (= ?x72 input.dst.llvm-%m)))
 (let (($x193 (= $x26 true)))
 (let (($x177 (= input.dst.llvm-%m ?x72)))
 (let ((?x328 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x329 (= (_ bv0 32) ?x328)))
 (let ((?x319 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x319)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x217 $x330)))
 (let (($x316 (and $x11 $x329)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x312 $x316)))
 (let (($x127 (forall ((input.ind-%var2919X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var2919X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x32))))
 (let ((?x277 (input.spec-%var-m-0.1.1 input.ind-%var2919X)))
 (let (($x67 (input.spec-%var-m-0.0.1 input.ind-%var2919X)))
 (=> $x67 (= ?x277 ?x302))))))))
 ))
 (let (($x103 (forall ((input.ind-%var2918X (_ BitVec 32)) )(let (($x67 (input.spec-%var-m-0.0.1 input.ind-%var2918X)))
 (= $x67 (and (bvule (_ bv0 32) input.ind-%var2918X) (bvult input.ind-%var2918X (_ bv100 32))))))
 ))
 (let (($x310 (and $x103 $x127)))
 (let (($x339 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x335 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x361 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x335 $x339)))))))
 (let (($x86 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x108 (= (bvand ?x89 (_ bv4294967292 32)) ?x89)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x89 (bvsub ?x89 (_ bv4 32))) (bvult ?x89 (bvsub ?x89 (_ bv4 32))))))
 (let (($x10 (and true $x114)))
 (let (($x13 (= (bvand ?x82 (_ bv4294967292 32)) ?x82)))
 (let (($x371 (and $x13 $x10)))
 (let (($x77 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv8 32))) (bvult ?x68 (bvsub ?x68 (_ bv8 32))))))
 (let (($x110 (and (and (and true $x77) $x371) $x108)))
 (let (($x155 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x107 (and true $x155)))
 (let (($x17 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x39 (and $x17 $x107)))
 (let (($x289 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x82 (bvsub ?x82 (_ bv12 32))) (bvult ?x82 (bvsub ?x82 (_ bv12 32))))))
 (let (($x24 (and (and (and true $x17) $x289) $x39)))
 (let (($x187 (and (and (and (and (and (and $x24 $x110) $x86) $x361) $x310) $x146) $x177)))
 (let (($x256 (= $x187 true)))
 (let (($x341 (= $x24 true)))
 (let (($x212 (and $x110 $x86)))
 (let (($x59 (= $x212 true)))
 (let (($x314 (and $x59 $x341)))
 (let (($x99 (and $x314 $x256)))
 (let (($x66 (and $x99 $x193)))
 (let (($x238 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x34 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x34 (_ bv0 32))))
 (let (($x266 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x184 (ite $x266 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x184 (_ bv1 32))))
 (let (($x321 (and $x118 $x169)))
 (let (($x279 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x44 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x44 (_ bv0 32))))
 (let (($x268 (and $x283 $x321)))
 (let (($x83 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x241 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x241 (_ bv1 32))))
 (let (($x207 (and $x113 $x268)))
 (let (($x285 (and $x207 $x66)))
 (let (($x65 (= ?x220 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x258 (=> $x113 $x65)))
 (let (($x265 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x141 (= $x113 $x265)))
 (let (($x248 (= false false)))
 (let (($x244 (= ?x241 (_ bv0 32))))
 (let (($x215 (=> $x244 $x248)))
 (let (($x270 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x253 (= $x244 $x270)))
 (let (($x262 (and (and (and $x253 $x215) $x141) $x258)))
 (let (($x166 (and $x262 $x285)))
 (let ((?x104 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x281 (= ?x104 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x160 (bvuge ?x44 (_ bv1 32))))
 (let (($x14 (=> $x160 $x281)))
 (let (($x178 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x105 (= $x160 $x178)))
 (let (($x47 (and (and (= $x283 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x283 $x248)) $x105)))
 (let (($x278 (and $x47 $x14)))
 (let (($x349 (and $x278 $x166)))
 (let ((?x223 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x78 (= ?x223 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x228 (bvuge ?x34 (_ bv1 32))))
 (let (($x8 (=> $x228 $x78)))
 (let (($x152 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x259 (= $x228 $x152)))
 (let (($x5 (and (and (= $x169 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x169 $x248)) $x259)))
 (let (($x242 (and $x5 $x8)))
 (let (($x331 (and $x242 $x349)))
 (let (($x74 (= ?x63 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x191 (=> $x118 $x74)))
 (let (($x203 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x42 (= $x118 $x203)))
 (let (($x122 (= ?x184 (_ bv0 32))))
 (let (($x260 (=> $x122 $x248)))
 (let (($x48 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x71 (= $x122 $x48)))
 (let (($x249 (and (and (and $x71 $x260) $x42) $x191)))
 (let (($x88 (and $x249 $x331)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x171 (and $x209 $x88)))
 (let (($x282 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x332 (and $x282 $x171)))
 (let (($x233 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x95 (and $x233 $x332)))
 (let (($x73 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x50 (and $x73 $x95)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x317 (and $x251 $x50)))
 (let (($x201 (and $x248 $x317)))
 (let (($x168 (= ?x220 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x324 (and $x168 $x201)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x353 (and $x173 $x324)))
 (let (($x338 (and $x248 $x353)))
 (let (($x175 (= ?x104 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x240 (and $x175 $x338)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x37 (and $x106 $x240)))
 (let (($x90 (and $x248 $x37)))
 (let (($x133 (= ?x223 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x210 (and $x133 $x90)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x287 (and $x102 $x210)))
 (let (($x292 (and $x248 $x287)))
 (let (($x199 (= ?x63 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x97 (and $x199 $x292)))
 (let (($x131 (bvugt ?x89 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x28 (=> (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x131)))))))
 (let (($x235 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x200 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x235)))))))
 (let (($x84 (bvugt ?x82 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x6 (=> (bvule ?x82 (bvsub (bvadd ?x82 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x222 $x84)))))))
 (let (($x137 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x198 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x276 $x137)))))))
 (let (($x269 (and $x198 $x6)))
 (let (($x172 (and $x269 $x200)))
 (let (($x216 (and $x172 $x28)))
 (let (($x346 (and $x216 $x97)))
 (let (($x94 (=> $x346 $x62)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x220 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x347 (bvadd ?x220 ?x63)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x284 (concat ?x55 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x135 (bvadd ?x68 (_ bv3 32))))
 (let ((?x157 (concat (select input.dst.llvm-mem ?x135) (concat ?x164 ?x284))))
 (let ((?x98 (bvmul (_ bv4294967295 32) ?x157)))
 (let ((?x309 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x189 (concat ?x309 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x89 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x148 (bvadd ?x89 (_ bv3 32))))
 (let ((?x340 (concat (select input.dst.llvm-mem ?x148) (concat ?x176 ?x189))))
 (let ((?x363 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x364 (concat ?x363 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x82 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x239 (bvadd ?x82 (_ bv3 32))))
 (let ((?x350 (concat (select input.dst.llvm-mem ?x239) (concat ?x218 ?x364))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x360)))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x337)))
 (let ((?x76 (bvadd (bvadd (bvadd ?x352 ?x350) ?x340) ?x98)))
 (let (($x356 (= ?x76 ?x347)))
 (let (($x62 (= $x356 true)))
 (let ((?x315 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x318 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x81 (concat ?x130 (concat ?x318 ?x315)))))
 (let (($x26 (= ?x72 input.dst.llvm-%m)))
 (let (($x193 (= $x26 true)))
 (let (($x177 (= input.dst.llvm-%m ?x72)))
 (let ((?x328 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x329 (= (_ bv0 32) ?x328)))
 (let ((?x319 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x319)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x217 $x330)))
 (let (($x316 (and $x11 $x329)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x312 $x316)))
 (let (($x127 (forall ((input.ind-%var2919X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var2919X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x32))))
 (let ((?x277 (input.spec-%var-m-0.1.1 input.ind-%var2919X)))
 (let (($x67 (input.spec-%var-m-0.0.1 input.ind-%var2919X)))
 (=> $x67 (= ?x277 ?x302))))))))
 ))
 (let (($x103 (forall ((input.ind-%var2918X (_ BitVec 32)) )(let (($x67 (input.spec-%var-m-0.0.1 input.ind-%var2918X)))
 (= $x67 (and (bvule (_ bv0 32) input.ind-%var2918X) (bvult input.ind-%var2918X (_ bv100 32))))))
 ))
 (let (($x310 (and $x103 $x127)))
 (let (($x339 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x335 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x361 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x335 $x339)))))))
 (let (($x86 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x108 (= (bvand ?x89 (_ bv4294967292 32)) ?x89)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x89 (bvsub ?x89 (_ bv4 32))) (bvult ?x89 (bvsub ?x89 (_ bv4 32))))))
 (let (($x10 (and true $x114)))
 (let (($x13 (= (bvand ?x82 (_ bv4294967292 32)) ?x82)))
 (let (($x371 (and $x13 $x10)))
 (let (($x77 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv8 32))) (bvult ?x68 (bvsub ?x68 (_ bv8 32))))))
 (let (($x110 (and (and (and true $x77) $x371) $x108)))
 (let (($x155 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x107 (and true $x155)))
 (let (($x17 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x39 (and $x17 $x107)))
 (let (($x289 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x82 (bvsub ?x82 (_ bv12 32))) (bvult ?x82 (bvsub ?x82 (_ bv12 32))))))
 (let (($x24 (and (and (and true $x17) $x289) $x39)))
 (let (($x187 (and (and (and (and (and (and $x24 $x110) $x86) $x361) $x310) $x146) $x177)))
 (let (($x256 (= $x187 true)))
 (let (($x341 (= $x24 true)))
 (let (($x212 (and $x110 $x86)))
 (let (($x59 (= $x212 true)))
 (let (($x314 (and $x59 $x341)))
 (let (($x99 (and $x314 $x256)))
 (let (($x66 (and $x99 $x193)))
 (let (($x238 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x34 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x34 (_ bv0 32))))
 (let (($x266 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x184 (ite $x266 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x184 (_ bv1 32))))
 (let (($x321 (and $x118 $x169)))
 (let (($x279 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x44 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x44 (_ bv0 32))))
 (let (($x268 (and $x283 $x321)))
 (let (($x83 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x241 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x241 (_ bv1 32))))
 (let (($x207 (and $x113 $x268)))
 (let (($x285 (and $x207 $x66)))
 (let (($x65 (= ?x220 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x258 (=> $x113 $x65)))
 (let (($x265 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x141 (= $x113 $x265)))
 (let (($x248 (= false false)))
 (let (($x244 (= ?x241 (_ bv0 32))))
 (let (($x215 (=> $x244 $x248)))
 (let (($x270 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x253 (= $x244 $x270)))
 (let (($x262 (and (and (and $x253 $x215) $x141) $x258)))
 (let (($x166 (and $x262 $x285)))
 (let ((?x104 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x281 (= ?x104 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x160 (bvuge ?x44 (_ bv1 32))))
 (let (($x14 (=> $x160 $x281)))
 (let (($x178 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x105 (= $x160 $x178)))
 (let (($x47 (and (and (= $x283 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x283 $x248)) $x105)))
 (let (($x278 (and $x47 $x14)))
 (let (($x349 (and $x278 $x166)))
 (let ((?x223 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x78 (= ?x223 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x228 (bvuge ?x34 (_ bv1 32))))
 (let (($x8 (=> $x228 $x78)))
 (let (($x152 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x259 (= $x228 $x152)))
 (let (($x5 (and (and (= $x169 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x169 $x248)) $x259)))
 (let (($x242 (and $x5 $x8)))
 (let (($x331 (and $x242 $x349)))
 (let (($x74 (= ?x63 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x191 (=> $x118 $x74)))
 (let (($x203 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x42 (= $x118 $x203)))
 (let (($x122 (= ?x184 (_ bv0 32))))
 (let (($x260 (=> $x122 $x248)))
 (let (($x48 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x71 (= $x122 $x48)))
 (let (($x249 (and (and (and $x71 $x260) $x42) $x191)))
 (let (($x88 (and $x249 $x331)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x171 (and $x209 $x88)))
 (let (($x282 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x332 (and $x282 $x171)))
 (let (($x233 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x95 (and $x233 $x332)))
 (let (($x73 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x50 (and $x73 $x95)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x317 (and $x251 $x50)))
 (let (($x201 (and $x248 $x317)))
 (let (($x168 (= ?x220 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x324 (and $x168 $x201)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x353 (and $x173 $x324)))
 (let (($x338 (and $x248 $x353)))
 (let (($x175 (= ?x104 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x240 (and $x175 $x338)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x37 (and $x106 $x240)))
 (let (($x90 (and $x248 $x37)))
 (let (($x133 (= ?x223 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x210 (and $x133 $x90)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x287 (and $x102 $x210)))
 (let (($x292 (and $x248 $x287)))
 (let (($x199 (= ?x63 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x97 (and $x199 $x292)))
 (let (($x131 (bvugt ?x89 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x28 (=> (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x131)))))))
 (let (($x235 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x200 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x235)))))))
 (let (($x84 (bvugt ?x82 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x6 (=> (bvule ?x82 (bvsub (bvadd ?x82 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x222 $x84)))))))
 (let (($x137 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x198 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x276 $x137)))))))
 (let (($x269 (and $x198 $x6)))
 (let (($x172 (and $x269 $x200)))
 (let (($x216 (and $x172 $x28)))
 (let (($x346 (and $x216 $x97)))
 (let (($x94 (=> $x346 $x62)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 216 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x295 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x307 (concat ?x295 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x276 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x222 (bvadd ?x276 (_ bv3 32))))
 (let ((?x213 (concat (select input.dst.llvm-mem ?x222) (concat ?x159 ?x307))))
 (let ((?x261 (bvmul (_ bv4294967295 32) ?x213)))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x163 (concat ?x305 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x219 (bvadd ?x235 (_ bv3 32))))
 (let ((?x79 (concat (select input.dst.llvm-mem ?x219) (concat ?x139 ?x163))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x76 (concat ?x98 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x75 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x254 (bvadd ?x75 (_ bv3 32))))
 (let ((?x15 (concat (select input.dst.llvm-mem ?x254) (concat ?x356 ?x76))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x22)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x55)))
 (let ((?x206 (bvadd (bvadd (bvadd ?x284 ?x15) ?x79) ?x261)))
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x145 (= ?x142 ?x206)))
 (let (($x301 (= $x145 true)))
 (let ((?x332 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x240 (concat ?x324 (concat ?x50 ?x332)))))
 (let (($x205 (= ?x37 input.dst.llvm-%m)))
 (let (($x348 (= $x205 true)))
 (let (($x90 (= input.dst.llvm-%m ?x37)))
 (let ((?x166 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x349 (= (_ bv0 32) ?x166)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (and $x26 $x66)))
 (let (($x331 (and $x285 $x349)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x99 $x331)))
 (let (($x177 (forall ((input.ind-%var2963X (_ BitVec 32)) )(let ((?x316 (bvadd (bvmul input.ind-%var2963X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem ?x316))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv2 32))) ?x81))))
 (let ((?x223 (input.spec-%var-m-0.1.1 input.ind-%var2963X)))
 (let (($x248 (input.spec-%var-m-0.0.1 input.ind-%var2963X)))
 (=> $x248 (= ?x223 ?x229))))))))
 ))
 (let (($x288 (forall ((input.ind-%var2962X (_ BitVec 32)) )(let (($x248 (input.spec-%var-m-0.0.1 input.ind-%var2962X)))
 (= $x248 (and (bvule (_ bv0 32) input.ind-%var2962X) (bvult input.ind-%var2962X (_ bv100 32))))))
 ))
 (let (($x187 (and $x288 $x177)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x361 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x361 $x85)))))))
 (let (($x16 (= (bvand ?x276 (_ bv4294967292 32)) ?x276)))
 (let (($x212 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x110 (and true $x108)))
 (let (($x114 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x267 (and $x114 $x110)))
 (let (($x149 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x276 (bvsub ?x276 (_ bv8 32))) (bvult ?x276 (bvsub ?x276 (_ bv8 32))))))
 (let (($x17 (and (and (and true $x149) $x267) $x212)))
 (let (($x341 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x314 (and true $x341)))
 (let (($x289 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x368 (and $x289 $x314)))
 (let (($x311 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv12 32))) (bvult ?x75 (bvsub ?x75 (_ bv12 32))))))
 (let (($x334 (and (and (and true $x289) $x311) $x368)))
 (let (($x180 (and (and (and (and (and (and $x334 $x17) $x16) $x188) $x187) $x88) $x90)))
 (let (($x264 (= $x180 true)))
 (let (($x369 (= $x334 true)))
 (let (($x30 (and $x17 $x16)))
 (let (($x290 (= $x30 true)))
 (let (($x101 (and $x290 $x369)))
 (let (($x336 (and $x101 $x264)))
 (let (($x354 (and $x336 $x348)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x12 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (= ?x12 (_ bv0 32))))
 (let (($x71 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x96 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x96 (_ bv0 32))))
 (let (($x153 (and $x118 $x228)))
 (let (($x51 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x21 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x21 (_ bv0 32))))
 (let (($x77 (and $x160 $x153)))
 (let (($x215 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x170 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x170 (_ bv1 32))))
 (let (($x27 (and $x65 $x77)))
 (let (($x360 (and $x27 $x354)))
 (let (($x268 (= ?x142 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x207 (=> $x65 $x268)))
 (let (($x258 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x262 (= $x65 $x258)))
 (let (($x131 (= false false)))
 (let (($x113 (= ?x170 (_ bv0 32))))
 (let (($x257 (=> $x113 $x131)))
 (let (($x141 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x274 (= $x113 $x141)))
 (let (($x35 (and (and (and $x274 $x257) $x262) $x207)))
 (let (($x337 (and $x35 $x360)))
 (let ((?x220 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x241 (= ?x220 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x281 (bvuge ?x21 (_ bv1 32))))
 (let (($x244 (=> $x281 $x241)))
 (let (($x14 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x278 (= $x281 $x14)))
 (let (($x270 (and (and (= $x160 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x160 $x131)) $x278)))
 (let (($x253 (and $x270 $x244)))
 (let (($x352 (and $x253 $x337)))
 (let ((?x104 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x44 (= ?x104 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x78 (bvuge ?x12 (_ bv1 32))))
 (let (($x283 (=> $x78 $x44)))
 (let (($x8 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x242 (= $x78 $x8)))
 (let (($x112 (and (and (= $x228 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x228 $x131)) $x242)))
 (let (($x111 (and $x112 $x283)))
 (let (($x357 (and $x111 $x352)))
 (let ((?x216 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x34 (= ?x216 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x74 (bvuge ?x96 (_ bv1 32))))
 (let (($x169 (=> $x74 $x34)))
 (let (($x191 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x249 (= $x74 $x191)))
 (let (($x202 (=> $x118 $x131)))
 (let (($x42 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x46 (= $x118 $x42)))
 (let (($x161 (and (and (and $x46 $x202) $x249) $x169)))
 (let (($x190 (and $x161 $x357)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x218 (and $x48 $x190)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x344 (and $x122 $x218)))
 (let (($x266 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x363 (and $x266 $x344)))
 (let (($x272 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x358 (and $x272 $x363)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x364 (and $x33 $x358)))
 (let (($x333 (and $x131 $x364)))
 (let (($x93 (= ?x142 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x350 (and $x93 $x333)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x185 (and $x251 $x350)))
 (let (($x237 (and $x131 $x185)))
 (let (($x168 (= ?x220 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x92 (and $x168 $x237)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x176 (and $x173 $x92)))
 (let (($x125 (and $x131 $x176)))
 (let (($x175 (= ?x104 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x309 (and $x175 $x125)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x355 (and $x167 $x309)))
 (let (($x189 (and $x131 $x355)))
 (let (($x148 (= ?x216 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x367 (and $x148 $x189)))
 (let (($x151 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x181 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x151)))))))
 (let (($x231 (bvugt ?x276 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x214 (=> (bvule ?x276 (bvsub (bvadd ?x276 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x231)))))))
 (let (($x135 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x137 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x135)))))))
 (let (($x64 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x6 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x64)))))))
 (let (($x269 (and $x6 $x137)))
 (let (($x252 (and $x269 $x214)))
 (let (($x200 (and $x252 $x181)))
 (let (($x340 (and $x200 $x367)))
 (let (($x291 (=> $x340 $x301)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x295 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x307 (concat ?x295 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x276 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x222 (bvadd ?x276 (_ bv3 32))))
 (let ((?x213 (concat (select input.dst.llvm-mem ?x222) (concat ?x159 ?x307))))
 (let ((?x261 (bvmul (_ bv4294967295 32) ?x213)))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x163 (concat ?x305 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x219 (bvadd ?x235 (_ bv3 32))))
 (let ((?x79 (concat (select input.dst.llvm-mem ?x219) (concat ?x139 ?x163))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x76 (concat ?x98 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x75 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x254 (bvadd ?x75 (_ bv3 32))))
 (let ((?x15 (concat (select input.dst.llvm-mem ?x254) (concat ?x356 ?x76))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x22)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x55)))
 (let ((?x206 (bvadd (bvadd (bvadd ?x284 ?x15) ?x79) ?x261)))
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x145 (= ?x142 ?x206)))
 (let (($x301 (= $x145 true)))
 (let ((?x332 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x240 (concat ?x324 (concat ?x50 ?x332)))))
 (let (($x205 (= ?x37 input.dst.llvm-%m)))
 (let (($x348 (= $x205 true)))
 (let (($x90 (= input.dst.llvm-%m ?x37)))
 (let ((?x166 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x349 (= (_ bv0 32) ?x166)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (and $x26 $x66)))
 (let (($x331 (and $x285 $x349)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x99 $x331)))
 (let (($x177 (forall ((input.ind-%var2963X (_ BitVec 32)) )(let ((?x316 (bvadd (bvmul input.ind-%var2963X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem ?x316))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x316 (_ bv2 32))) ?x81))))
 (let ((?x223 (input.spec-%var-m-0.1.1 input.ind-%var2963X)))
 (let (($x248 (input.spec-%var-m-0.0.1 input.ind-%var2963X)))
 (=> $x248 (= ?x223 ?x229))))))))
 ))
 (let (($x288 (forall ((input.ind-%var2962X (_ BitVec 32)) )(let (($x248 (input.spec-%var-m-0.0.1 input.ind-%var2962X)))
 (= $x248 (and (bvule (_ bv0 32) input.ind-%var2962X) (bvult input.ind-%var2962X (_ bv100 32))))))
 ))
 (let (($x187 (and $x288 $x177)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x361 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x361 $x85)))))))
 (let (($x16 (= (bvand ?x276 (_ bv4294967292 32)) ?x276)))
 (let (($x212 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x110 (and true $x108)))
 (let (($x114 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x267 (and $x114 $x110)))
 (let (($x149 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x276 (bvsub ?x276 (_ bv8 32))) (bvult ?x276 (bvsub ?x276 (_ bv8 32))))))
 (let (($x17 (and (and (and true $x149) $x267) $x212)))
 (let (($x341 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x314 (and true $x341)))
 (let (($x289 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x368 (and $x289 $x314)))
 (let (($x311 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv12 32))) (bvult ?x75 (bvsub ?x75 (_ bv12 32))))))
 (let (($x334 (and (and (and true $x289) $x311) $x368)))
 (let (($x180 (and (and (and (and (and (and $x334 $x17) $x16) $x188) $x187) $x88) $x90)))
 (let (($x264 (= $x180 true)))
 (let (($x369 (= $x334 true)))
 (let (($x30 (and $x17 $x16)))
 (let (($x290 (= $x30 true)))
 (let (($x101 (and $x290 $x369)))
 (let (($x336 (and $x101 $x264)))
 (let (($x354 (and $x336 $x348)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x12 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (= ?x12 (_ bv0 32))))
 (let (($x71 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x96 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x96 (_ bv0 32))))
 (let (($x153 (and $x118 $x228)))
 (let (($x51 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x21 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x21 (_ bv0 32))))
 (let (($x77 (and $x160 $x153)))
 (let (($x215 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x170 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x170 (_ bv1 32))))
 (let (($x27 (and $x65 $x77)))
 (let (($x360 (and $x27 $x354)))
 (let (($x268 (= ?x142 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x207 (=> $x65 $x268)))
 (let (($x258 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x262 (= $x65 $x258)))
 (let (($x131 (= false false)))
 (let (($x113 (= ?x170 (_ bv0 32))))
 (let (($x257 (=> $x113 $x131)))
 (let (($x141 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x274 (= $x113 $x141)))
 (let (($x35 (and (and (and $x274 $x257) $x262) $x207)))
 (let (($x337 (and $x35 $x360)))
 (let ((?x220 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x241 (= ?x220 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x281 (bvuge ?x21 (_ bv1 32))))
 (let (($x244 (=> $x281 $x241)))
 (let (($x14 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x278 (= $x281 $x14)))
 (let (($x270 (and (and (= $x160 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x160 $x131)) $x278)))
 (let (($x253 (and $x270 $x244)))
 (let (($x352 (and $x253 $x337)))
 (let ((?x104 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x44 (= ?x104 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x78 (bvuge ?x12 (_ bv1 32))))
 (let (($x283 (=> $x78 $x44)))
 (let (($x8 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x242 (= $x78 $x8)))
 (let (($x112 (and (and (= $x228 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x228 $x131)) $x242)))
 (let (($x111 (and $x112 $x283)))
 (let (($x357 (and $x111 $x352)))
 (let ((?x216 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x34 (= ?x216 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x74 (bvuge ?x96 (_ bv1 32))))
 (let (($x169 (=> $x74 $x34)))
 (let (($x191 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x249 (= $x74 $x191)))
 (let (($x202 (=> $x118 $x131)))
 (let (($x42 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x46 (= $x118 $x42)))
 (let (($x161 (and (and (and $x46 $x202) $x249) $x169)))
 (let (($x190 (and $x161 $x357)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x218 (and $x48 $x190)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x344 (and $x122 $x218)))
 (let (($x266 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x363 (and $x266 $x344)))
 (let (($x272 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x358 (and $x272 $x363)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x364 (and $x33 $x358)))
 (let (($x333 (and $x131 $x364)))
 (let (($x93 (= ?x142 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x350 (and $x93 $x333)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x185 (and $x251 $x350)))
 (let (($x237 (and $x131 $x185)))
 (let (($x168 (= ?x220 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x92 (and $x168 $x237)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x176 (and $x173 $x92)))
 (let (($x125 (and $x131 $x176)))
 (let (($x175 (= ?x104 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x309 (and $x175 $x125)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x355 (and $x167 $x309)))
 (let (($x189 (and $x131 $x355)))
 (let (($x148 (= ?x216 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x367 (and $x148 $x189)))
 (let (($x151 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x181 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x151)))))))
 (let (($x231 (bvugt ?x276 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x214 (=> (bvule ?x276 (bvsub (bvadd ?x276 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x231)))))))
 (let (($x135 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x137 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x135)))))))
 (let (($x64 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x6 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x64)))))))
 (let (($x269 (and $x6 $x137)))
 (let (($x252 (and $x269 $x214)))
 (let (($x200 (and $x252 $x181)))
 (let (($x340 (and $x200 $x367)))
 (let (($x291 (=> $x340 $x301)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 215 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x11 (bvmul (_ bv4294967295 32) ?x220)))
 (let ((?x328 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x11)))
 (let ((?x243 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x326 (concat ?x243 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x18 (bvadd ?x6 (_ bv3 32))))
 (let ((?x312 (concat (select input.dst.llvm-mem ?x18) (concat ?x127 ?x326))))
 (let ((?x330 (bvmul (_ bv4294967295 32) ?x312)))
 (let ((?x260 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x91 (concat ?x260 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x339 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x231 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x41 (bvadd ?x231 (_ bv3 32))))
 (let ((?x294 (concat (select input.dst.llvm-mem ?x41) (concat ?x339 ?x91))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x206 (concat ?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x227 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x245 (bvadd ?x227 (_ bv3 32))))
 (let ((?x69 (concat (select input.dst.llvm-mem ?x245) (concat ?x301 ?x206))))
 (let ((?x323 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x323)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x295)))
 (let ((?x300 (bvadd (bvadd (bvadd ?x307 ?x69) ?x294) ?x330)))
 (let (($x117 (= ?x300 ?x328)))
 (let (($x115 (= $x117 true)))
 (let ((?x344 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x358 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x176 (concat ?x92 (concat ?x350 (concat ?x358 ?x344)))))
 (let (($x126 (= ?x176 input.dst.llvm-%m)))
 (let (($x372 (= $x126 true)))
 (let (($x125 (= input.dst.llvm-%m ?x176)))
 (let ((?x337 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x352 (= (_ bv0 32) ?x337)))
 (let ((?x348 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x354 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x348)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x360 (and $x205 $x354)))
 (let (($x357 (and $x360 $x352)))
 (let (($x336 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x336 $x357)))
 (let (($x90 (forall ((input.ind-%var3007X (_ BitVec 32)) )(let ((?x331 (bvadd (bvmul input.ind-%var3007X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv1 32))) (select input.dst.llvm-mem ?x331))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv2 32))) ?x240))))
 (let ((?x104 (input.spec-%var-m-0.1.1 input.ind-%var3007X)))
 (let (($x131 (input.spec-%var-m-0.0.1 input.ind-%var3007X)))
 (=> $x131 (= ?x104 ?x317))))))))
 ))
 (let (($x130 (forall ((input.ind-%var3006X (_ BitVec 32)) )(let (($x131 (input.spec-%var-m-0.0.1 input.ind-%var3006X)))
 (= $x131 (and (bvule (_ bv0 32) input.ind-%var3006X) (bvult input.ind-%var3006X (_ bv100 32))))))
 ))
 (let (($x180 (and $x130 $x90)))
 (let (($x292 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x296 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x292)))))))
 (let (($x162 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x30 (= (bvand ?x231 (_ bv4294967292 32)) ?x231)))
 (let (($x212 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x231 (bvsub ?x231 (_ bv4 32))) (bvult ?x231 (bvsub ?x231 (_ bv4 32))))))
 (let (($x17 (and true $x212)))
 (let (($x108 (= (bvand ?x227 (_ bv4294967292 32)) ?x227)))
 (let (($x304 (and $x108 $x17)))
 (let (($x10 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x289 (and (and (and true $x10) $x304) $x30)))
 (let (($x369 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x101 (and true $x369)))
 (let (($x311 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x210 (and $x311 $x101)))
 (let (($x24 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x227 (bvsub ?x227 (_ bv12 32))) (bvult ?x227 (bvsub ?x227 (_ bv12 32))))))
 (let (($x359 (and (and (and true $x311) $x24) $x210)))
 (let (($x362 (and (and (and (and (and (and $x359 $x289) $x162) $x296) $x180) $x190) $x125)))
 (let (($x164 (= $x362 true)))
 (let (($x124 (= $x359 true)))
 (let (($x275 (and $x289 $x162)))
 (let (($x306 (= $x275 true)))
 (let (($x342 (and $x306 $x124)))
 (let (($x365 (and $x342 $x164)))
 (let (($x116 (and $x365 $x372)))
 (let (($x7 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x221 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x221 (_ bv1 32))))
 (let (($x46 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x19 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x19 (_ bv1 32))))
 (let (($x343 (and $x34 $x44)))
 (let (($x280 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x123 (ite $x280 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x123 (_ bv1 32))))
 (let (($x149 (and $x241 $x343)))
 (let (($x257 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x230 (ite $x257 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x230 (_ bv0 32))))
 (let (($x59 (and $x65 $x149)))
 (let (($x22 (and $x59 $x116)))
 (let ((?x282 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x77 (= ?x282 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x268 (bvuge ?x230 (_ bv1 32))))
 (let (($x27 (=> $x268 $x77)))
 (let (($x207 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x35 (= $x268 $x207)))
 (let (($x151 (= false false)))
 (let (($x321 (=> $x65 $x151)))
 (let (($x262 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x136 (= $x65 $x262)))
 (let (($x13 (and (and (and $x136 $x321) $x35) $x27)))
 (let (($x55 (and $x13 $x22)))
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x170 (= ?x142 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x113 (=> $x241 $x170)))
 (let (($x244 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x253 (= $x241 $x244)))
 (let (($x281 (= ?x123 (_ bv0 32))))
 (let (($x83 (=> $x281 $x151)))
 (let (($x278 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x270 (= $x281 $x278)))
 (let (($x274 (and (and (and $x270 $x83) $x253) $x113)))
 (let (($x284 (and $x274 $x55)))
 (let (($x21 (= ?x220 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x160 (=> $x44 $x21)))
 (let (($x283 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x111 (= $x44 $x283)))
 (let (($x78 (= ?x221 (_ bv0 32))))
 (let (($x279 (=> $x78 $x151)))
 (let (($x242 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x112 (= $x78 $x242)))
 (let (($x47 (and (and (and $x112 $x279) $x111) $x160)))
 (let (($x94 (and $x47 $x284)))
 (let ((?x200 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x12 (= ?x200 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x228 (=> $x34 $x12)))
 (let (($x169 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x161 (= $x34 $x169)))
 (let (($x74 (= ?x19 (_ bv0 32))))
 (let (($x238 (=> $x74 $x151)))
 (let (($x249 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x226 (= $x74 $x249)))
 (let (($x5 (and (and (and $x226 $x238) $x161) $x228)))
 (let (($x347 (and $x5 $x94)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x356 (and $x42 $x347)))
 (let (($x118 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x157 (and $x118 $x356)))
 (let (($x71 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x98 (and $x71 $x157)))
 (let (($x232 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x308 (and $x232 $x98)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x76 (and $x184 $x308)))
 (let (($x62 (and $x151 $x76)))
 (let (($x209 (= ?x282 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x15 (and $x209 $x62)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x299 (and $x33 $x15)))
 (let (($x366 (and $x151 $x299)))
 (let (($x93 (= ?x142 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x29 (and $x93 $x366)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x139 (and $x251 $x29)))
 (let (($x61 (and $x151 $x139)))
 (let (($x168 (= ?x220 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x305 (and $x168 $x61)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x247 (and $x109 $x305)))
 (let (($x163 (and $x151 $x247)))
 (let (($x219 (= ?x200 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x250 (and $x219 $x163)))
 (let (($x60 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x204 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x60)))))))
 (let (($x174 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x9 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x174)))))))
 (let (($x222 (bvugt ?x227 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x183 (=> (bvule ?x227 (bvsub (bvadd ?x227 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x222)))))))
 (let (($x128 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x137 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x128)))))))
 (let (($x269 (and $x137 $x183)))
 (let (($x255 (and $x269 $x9)))
 (let (($x214 (and $x255 $x204)))
 (let (($x79 (and $x214 $x250)))
 (let (($x351 (=> $x79 $x115)))
 (not $x351)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x11 (bvmul (_ bv4294967295 32) ?x220)))
 (let ((?x328 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x11)))
 (let ((?x243 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x326 (concat ?x243 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x18 (bvadd ?x6 (_ bv3 32))))
 (let ((?x312 (concat (select input.dst.llvm-mem ?x18) (concat ?x127 ?x326))))
 (let ((?x330 (bvmul (_ bv4294967295 32) ?x312)))
 (let ((?x260 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x91 (concat ?x260 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x339 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x231 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x41 (bvadd ?x231 (_ bv3 32))))
 (let ((?x294 (concat (select input.dst.llvm-mem ?x41) (concat ?x339 ?x91))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x206 (concat ?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x227 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x245 (bvadd ?x227 (_ bv3 32))))
 (let ((?x69 (concat (select input.dst.llvm-mem ?x245) (concat ?x301 ?x206))))
 (let ((?x323 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x323)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x295)))
 (let ((?x300 (bvadd (bvadd (bvadd ?x307 ?x69) ?x294) ?x330)))
 (let (($x117 (= ?x300 ?x328)))
 (let (($x115 (= $x117 true)))
 (let ((?x344 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x358 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x176 (concat ?x92 (concat ?x350 (concat ?x358 ?x344)))))
 (let (($x126 (= ?x176 input.dst.llvm-%m)))
 (let (($x372 (= $x126 true)))
 (let (($x125 (= input.dst.llvm-%m ?x176)))
 (let ((?x337 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x352 (= (_ bv0 32) ?x337)))
 (let ((?x348 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x354 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x348)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x360 (and $x205 $x354)))
 (let (($x357 (and $x360 $x352)))
 (let (($x336 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x336 $x357)))
 (let (($x90 (forall ((input.ind-%var3007X (_ BitVec 32)) )(let ((?x331 (bvadd (bvmul input.ind-%var3007X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv1 32))) (select input.dst.llvm-mem ?x331))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv2 32))) ?x240))))
 (let ((?x104 (input.spec-%var-m-0.1.1 input.ind-%var3007X)))
 (let (($x131 (input.spec-%var-m-0.0.1 input.ind-%var3007X)))
 (=> $x131 (= ?x104 ?x317))))))))
 ))
 (let (($x130 (forall ((input.ind-%var3006X (_ BitVec 32)) )(let (($x131 (input.spec-%var-m-0.0.1 input.ind-%var3006X)))
 (= $x131 (and (bvule (_ bv0 32) input.ind-%var3006X) (bvult input.ind-%var3006X (_ bv100 32))))))
 ))
 (let (($x180 (and $x130 $x90)))
 (let (($x292 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x296 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x292)))))))
 (let (($x162 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x30 (= (bvand ?x231 (_ bv4294967292 32)) ?x231)))
 (let (($x212 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x231 (bvsub ?x231 (_ bv4 32))) (bvult ?x231 (bvsub ?x231 (_ bv4 32))))))
 (let (($x17 (and true $x212)))
 (let (($x108 (= (bvand ?x227 (_ bv4294967292 32)) ?x227)))
 (let (($x304 (and $x108 $x17)))
 (let (($x10 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x289 (and (and (and true $x10) $x304) $x30)))
 (let (($x369 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x101 (and true $x369)))
 (let (($x311 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x210 (and $x311 $x101)))
 (let (($x24 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x227 (bvsub ?x227 (_ bv12 32))) (bvult ?x227 (bvsub ?x227 (_ bv12 32))))))
 (let (($x359 (and (and (and true $x311) $x24) $x210)))
 (let (($x362 (and (and (and (and (and (and $x359 $x289) $x162) $x296) $x180) $x190) $x125)))
 (let (($x164 (= $x362 true)))
 (let (($x124 (= $x359 true)))
 (let (($x275 (and $x289 $x162)))
 (let (($x306 (= $x275 true)))
 (let (($x342 (and $x306 $x124)))
 (let (($x365 (and $x342 $x164)))
 (let (($x116 (and $x365 $x372)))
 (let (($x7 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x221 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x221 (_ bv1 32))))
 (let (($x46 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x19 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x19 (_ bv1 32))))
 (let (($x343 (and $x34 $x44)))
 (let (($x280 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x123 (ite $x280 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x123 (_ bv1 32))))
 (let (($x149 (and $x241 $x343)))
 (let (($x257 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x230 (ite $x257 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x230 (_ bv0 32))))
 (let (($x59 (and $x65 $x149)))
 (let (($x22 (and $x59 $x116)))
 (let ((?x282 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x77 (= ?x282 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x268 (bvuge ?x230 (_ bv1 32))))
 (let (($x27 (=> $x268 $x77)))
 (let (($x207 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x35 (= $x268 $x207)))
 (let (($x151 (= false false)))
 (let (($x321 (=> $x65 $x151)))
 (let (($x262 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x136 (= $x65 $x262)))
 (let (($x13 (and (and (and $x136 $x321) $x35) $x27)))
 (let (($x55 (and $x13 $x22)))
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x170 (= ?x142 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x113 (=> $x241 $x170)))
 (let (($x244 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x253 (= $x241 $x244)))
 (let (($x281 (= ?x123 (_ bv0 32))))
 (let (($x83 (=> $x281 $x151)))
 (let (($x278 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x270 (= $x281 $x278)))
 (let (($x274 (and (and (and $x270 $x83) $x253) $x113)))
 (let (($x284 (and $x274 $x55)))
 (let (($x21 (= ?x220 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x160 (=> $x44 $x21)))
 (let (($x283 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x111 (= $x44 $x283)))
 (let (($x78 (= ?x221 (_ bv0 32))))
 (let (($x279 (=> $x78 $x151)))
 (let (($x242 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x112 (= $x78 $x242)))
 (let (($x47 (and (and (and $x112 $x279) $x111) $x160)))
 (let (($x94 (and $x47 $x284)))
 (let ((?x200 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x12 (= ?x200 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x228 (=> $x34 $x12)))
 (let (($x169 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x161 (= $x34 $x169)))
 (let (($x74 (= ?x19 (_ bv0 32))))
 (let (($x238 (=> $x74 $x151)))
 (let (($x249 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x226 (= $x74 $x249)))
 (let (($x5 (and (and (and $x226 $x238) $x161) $x228)))
 (let (($x347 (and $x5 $x94)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x356 (and $x42 $x347)))
 (let (($x118 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x157 (and $x118 $x356)))
 (let (($x71 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x98 (and $x71 $x157)))
 (let (($x232 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x308 (and $x232 $x98)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x76 (and $x184 $x308)))
 (let (($x62 (and $x151 $x76)))
 (let (($x209 (= ?x282 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x15 (and $x209 $x62)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x299 (and $x33 $x15)))
 (let (($x366 (and $x151 $x299)))
 (let (($x93 (= ?x142 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x29 (and $x93 $x366)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x139 (and $x251 $x29)))
 (let (($x61 (and $x151 $x139)))
 (let (($x168 (= ?x220 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x305 (and $x168 $x61)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x247 (and $x109 $x305)))
 (let (($x163 (and $x151 $x247)))
 (let (($x219 (= ?x200 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x250 (and $x219 $x163)))
 (let (($x60 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x204 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x60)))))))
 (let (($x174 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x9 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x174)))))))
 (let (($x222 (bvugt ?x227 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x183 (=> (bvule ?x227 (bvsub (bvadd ?x227 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x222)))))))
 (let (($x128 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x137 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x128)))))))
 (let (($x269 (and $x137 $x183)))
 (let (($x255 (and $x269 $x9)))
 (let (($x214 (and $x255 $x204)))
 (let (($x79 (and $x214 $x250)))
 (let (($x351 (=> $x79 $x115)))
 (not $x351)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 221 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x140 (bvmul (_ bv4294967295 32) ?x142)))
 (let ((?x282 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x32 (bvadd ?x282 ?x140)))
 (let ((?x229 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x26 (concat ?x229 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x102 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x100 (bvadd ?x102 (_ bv3 32))))
 (let ((?x177 (concat (select input.dst.llvm-mem ?x100) (concat ?x97 ?x26))))
 (let ((?x224 (bvmul (_ bv4294967295 32) ?x177)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x361 (concat ?x57 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x174 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x89 (bvadd ?x174 (_ bv3 32))))
 (let ((?x85 (concat (select input.dst.llvm-mem ?x89) (concat ?x202 ?x361))))
 (let ((?x330 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x300 (concat ?x330 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x198 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x197 (bvadd ?x198 (_ bv3 32))))
 (let ((?x115 (concat (select input.dst.llvm-mem ?x197) (concat ?x11 ?x300))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x70)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x243)))
 (let ((?x66 (bvadd (bvadd (bvadd ?x326 ?x115) ?x85) ?x224)))
 (let (($x329 (= ?x66 ?x32)))
 (let (($x285 (= $x329 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x29 (concat ?x15 (concat ?x308 ?x157)))))
 (let (($x154 (= ?x139 input.dst.llvm-%m)))
 (let (($x297 (= $x154 true)))
 (let (($x61 (= input.dst.llvm-%m ?x139)))
 (let ((?x55 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x284 (= (_ bv0 32) ?x55)))
 (let ((?x372 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x372)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x126 $x116)))
 (let (($x94 (and $x22 $x284)))
 (let (($x365 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x347 (and $x365 $x94)))
 (let (($x125 (forall ((input.ind-%var3051X (_ BitVec 32)) )(let ((?x357 (bvadd (bvmul input.ind-%var3051X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x92))))
 (let ((?x220 (input.spec-%var-m-0.1.1 input.ind-%var3051X)))
 (let (($x151 (input.spec-%var-m-0.0.1 input.ind-%var3051X)))
 (=> $x151 (= ?x220 ?x364))))))))
 ))
 (let (($x324 (forall ((input.ind-%var3050X (_ BitVec 32)) )(let (($x151 (input.spec-%var-m-0.0.1 input.ind-%var3050X)))
 (= $x151 (and (bvule (_ bv0 32) input.ind-%var3050X) (bvult input.ind-%var3050X (_ bv100 32))))))
 ))
 (let (($x362 (and $x324 $x125)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x315 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x296 $x189)))))))
 (let (($x107 (= (bvand ?x102 (_ bv4294967292 32)) ?x102)))
 (let (($x275 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x30 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x174 (bvsub ?x174 (_ bv4 32))) (bvult ?x174 (bvsub ?x174 (_ bv4 32))))))
 (let (($x289 (and true $x30)))
 (let (($x212 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x120 (and $x212 $x289)))
 (let (($x110 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x102 (bvsub ?x102 (_ bv8 32))) (bvult ?x102 (bvsub ?x102 (_ bv8 32))))))
 (let (($x311 (and (and (and true $x110) $x120) $x275)))
 (let (($x124 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x342 (and true $x124)))
 (let (($x24 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x309 (and $x24 $x342)))
 (let (($x334 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x198 (bvsub ?x198 (_ bv12 32))) (bvult ?x198 (bvsub ?x198 (_ bv12 32))))))
 (let (($x20 (and (and (and true $x24) $x334) $x309)))
 (let (($x40 (and (and (and (and (and (and $x20 $x311) $x107) $x315) $x362) $x347) $x61)))
 (let (($x159 (= $x40 true)))
 (let (($x303 (= $x20 true)))
 (let (($x225 (and $x311 $x107)))
 (let (($x155 (= $x225 true)))
 (let (($x370 (and $x155 $x303)))
 (let (($x45 (and $x370 $x159)))
 (let (($x49 (and $x45 $x297)))
 (let (($x279 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x178 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x178 (_ bv1 32))))
 (let (($x226 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x152 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x152 (_ bv0 32))))
 (let (($x371 (and $x34 $x21)))
 (let (($x83 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x265 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x265 (_ bv1 32))))
 (let (($x10 (and $x170 $x371)))
 (let (($x321 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x236 (ite $x321 (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x236 (_ bv0 32))))
 (let (($x290 (and $x268 $x10)))
 (let (($x323 (and $x290 $x49)))
 (let ((?x122 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x149 (= ?x122 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x77 (bvuge ?x236 (_ bv1 32))))
 (let (($x59 (=> $x77 $x149)))
 (let (($x27 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x13 (= $x77 $x27)))
 (let (($x60 (= false false)))
 (let (($x153 (=> $x268 $x60)))
 (let (($x35 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x138 (= $x268 $x35)))
 (let (($x114 (and (and (and $x138 $x153) $x13) $x59)))
 (let (($x295 (and $x114 $x323)))
 (let (($x230 (= ?x282 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x65 (=> $x170 $x230)))
 (let (($x113 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x274 (= $x170 $x113)))
 (let (($x241 (= ?x265 (_ bv0 32))))
 (let (($x215 (=> $x241 $x60)))
 (let (($x253 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x141 (= $x241 $x253)))
 (let (($x136 (and (and (and $x141 $x215) $x274) $x65)))
 (let (($x307 (and $x136 $x295)))
 (let (($x123 (= ?x142 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x281 (=> $x21 $x123)))
 (let (($x160 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x47 (= $x21 $x160)))
 (let (($x44 (= ?x178 (_ bv0 32))))
 (let (($x51 (=> $x44 $x60)))
 (let (($x111 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x105 (= $x44 $x111)))
 (let (($x270 (and (and (and $x105 $x51) $x47) $x281)))
 (let (($x293 (and $x270 $x307)))
 (let ((?x214 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x221 (= ?x214 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x12 (bvuge ?x152 (_ bv1 32))))
 (let (($x78 (=> $x12 $x221)))
 (let (($x228 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x5 (= $x12 $x228)))
 (let (($x196 (=> $x34 $x60)))
 (let (($x161 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x259 (= $x34 $x161)))
 (let (($x112 (and (and (and $x259 $x196) $x5) $x78)))
 (let (($x145 (and $x112 $x293)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x301 (and $x249 $x145)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x213 (and $x74 $x301)))
 (let (($x46 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x261 (and $x46 $x213)))
 (let (($x203 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x121 (and $x203 $x261)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x206 (and $x96 $x121)))
 (let (($x291 (and $x60 $x206)))
 (let (($x48 (= ?x122 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x69 (and $x48 $x291)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x147 (and $x184 $x69)))
 (let (($x277 (and $x60 $x147)))
 (let (($x209 (= ?x282 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x23 (and $x209 $x277)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x339 (and $x33 $x23)))
 (let (($x171 (and $x60 $x339)))
 (let (($x93 (= ?x142 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x260 (and $x93 $x171)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x335 (and $x54 $x260)))
 (let (($x91 (and $x60 $x335)))
 (let (($x41 (= ?x214 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x58 (and $x41 $x91)))
 (let (($x172 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x63 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x172)))))))
 (let (($x194 (bvugt ?x102 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x234 (=> (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x222 $x194)))))))
 (let (($x18 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x68 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x18)))))))
 (let (($x150 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x183 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x276 $x150)))))))
 (let (($x269 (and $x183 $x68)))
 (let (($x36 (and $x269 $x234)))
 (let (($x9 (and $x36 $x63)))
 (let (($x294 (and $x9 $x58)))
 (let (($x313 (=> $x294 $x285)))
 (not $x313)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x140 (bvmul (_ bv4294967295 32) ?x142)))
 (let ((?x282 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x32 (bvadd ?x282 ?x140)))
 (let ((?x229 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x26 (concat ?x229 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x102 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x100 (bvadd ?x102 (_ bv3 32))))
 (let ((?x177 (concat (select input.dst.llvm-mem ?x100) (concat ?x97 ?x26))))
 (let ((?x224 (bvmul (_ bv4294967295 32) ?x177)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x361 (concat ?x57 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x174 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x89 (bvadd ?x174 (_ bv3 32))))
 (let ((?x85 (concat (select input.dst.llvm-mem ?x89) (concat ?x202 ?x361))))
 (let ((?x330 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x300 (concat ?x330 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x198 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x197 (bvadd ?x198 (_ bv3 32))))
 (let ((?x115 (concat (select input.dst.llvm-mem ?x197) (concat ?x11 ?x300))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x70)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x243)))
 (let ((?x66 (bvadd (bvadd (bvadd ?x326 ?x115) ?x85) ?x224)))
 (let (($x329 (= ?x66 ?x32)))
 (let (($x285 (= $x329 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x29 (concat ?x15 (concat ?x308 ?x157)))))
 (let (($x154 (= ?x139 input.dst.llvm-%m)))
 (let (($x297 (= $x154 true)))
 (let (($x61 (= input.dst.llvm-%m ?x139)))
 (let ((?x55 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x284 (= (_ bv0 32) ?x55)))
 (let ((?x372 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x372)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x126 $x116)))
 (let (($x94 (and $x22 $x284)))
 (let (($x365 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x347 (and $x365 $x94)))
 (let (($x125 (forall ((input.ind-%var3051X (_ BitVec 32)) )(let ((?x357 (bvadd (bvmul input.ind-%var3051X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x92))))
 (let ((?x220 (input.spec-%var-m-0.1.1 input.ind-%var3051X)))
 (let (($x151 (input.spec-%var-m-0.0.1 input.ind-%var3051X)))
 (=> $x151 (= ?x220 ?x364))))))))
 ))
 (let (($x324 (forall ((input.ind-%var3050X (_ BitVec 32)) )(let (($x151 (input.spec-%var-m-0.0.1 input.ind-%var3050X)))
 (= $x151 (and (bvule (_ bv0 32) input.ind-%var3050X) (bvult input.ind-%var3050X (_ bv100 32))))))
 ))
 (let (($x362 (and $x324 $x125)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x315 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x296 $x189)))))))
 (let (($x107 (= (bvand ?x102 (_ bv4294967292 32)) ?x102)))
 (let (($x275 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x30 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x174 (bvsub ?x174 (_ bv4 32))) (bvult ?x174 (bvsub ?x174 (_ bv4 32))))))
 (let (($x289 (and true $x30)))
 (let (($x212 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x120 (and $x212 $x289)))
 (let (($x110 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x102 (bvsub ?x102 (_ bv8 32))) (bvult ?x102 (bvsub ?x102 (_ bv8 32))))))
 (let (($x311 (and (and (and true $x110) $x120) $x275)))
 (let (($x124 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x342 (and true $x124)))
 (let (($x24 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x309 (and $x24 $x342)))
 (let (($x334 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x198 (bvsub ?x198 (_ bv12 32))) (bvult ?x198 (bvsub ?x198 (_ bv12 32))))))
 (let (($x20 (and (and (and true $x24) $x334) $x309)))
 (let (($x40 (and (and (and (and (and (and $x20 $x311) $x107) $x315) $x362) $x347) $x61)))
 (let (($x159 (= $x40 true)))
 (let (($x303 (= $x20 true)))
 (let (($x225 (and $x311 $x107)))
 (let (($x155 (= $x225 true)))
 (let (($x370 (and $x155 $x303)))
 (let (($x45 (and $x370 $x159)))
 (let (($x49 (and $x45 $x297)))
 (let (($x279 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x178 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x178 (_ bv1 32))))
 (let (($x226 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x152 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x152 (_ bv0 32))))
 (let (($x371 (and $x34 $x21)))
 (let (($x83 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x265 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x265 (_ bv1 32))))
 (let (($x10 (and $x170 $x371)))
 (let (($x321 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x236 (ite $x321 (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x236 (_ bv0 32))))
 (let (($x290 (and $x268 $x10)))
 (let (($x323 (and $x290 $x49)))
 (let ((?x122 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x149 (= ?x122 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x77 (bvuge ?x236 (_ bv1 32))))
 (let (($x59 (=> $x77 $x149)))
 (let (($x27 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x13 (= $x77 $x27)))
 (let (($x60 (= false false)))
 (let (($x153 (=> $x268 $x60)))
 (let (($x35 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x138 (= $x268 $x35)))
 (let (($x114 (and (and (and $x138 $x153) $x13) $x59)))
 (let (($x295 (and $x114 $x323)))
 (let (($x230 (= ?x282 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x65 (=> $x170 $x230)))
 (let (($x113 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x274 (= $x170 $x113)))
 (let (($x241 (= ?x265 (_ bv0 32))))
 (let (($x215 (=> $x241 $x60)))
 (let (($x253 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x141 (= $x241 $x253)))
 (let (($x136 (and (and (and $x141 $x215) $x274) $x65)))
 (let (($x307 (and $x136 $x295)))
 (let (($x123 (= ?x142 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x281 (=> $x21 $x123)))
 (let (($x160 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x47 (= $x21 $x160)))
 (let (($x44 (= ?x178 (_ bv0 32))))
 (let (($x51 (=> $x44 $x60)))
 (let (($x111 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x105 (= $x44 $x111)))
 (let (($x270 (and (and (and $x105 $x51) $x47) $x281)))
 (let (($x293 (and $x270 $x307)))
 (let ((?x214 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x221 (= ?x214 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x12 (bvuge ?x152 (_ bv1 32))))
 (let (($x78 (=> $x12 $x221)))
 (let (($x228 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x5 (= $x12 $x228)))
 (let (($x196 (=> $x34 $x60)))
 (let (($x161 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x259 (= $x34 $x161)))
 (let (($x112 (and (and (and $x259 $x196) $x5) $x78)))
 (let (($x145 (and $x112 $x293)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x301 (and $x249 $x145)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x213 (and $x74 $x301)))
 (let (($x46 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x261 (and $x46 $x213)))
 (let (($x203 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x121 (and $x203 $x261)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x206 (and $x96 $x121)))
 (let (($x291 (and $x60 $x206)))
 (let (($x48 (= ?x122 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x69 (and $x48 $x291)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x147 (and $x184 $x69)))
 (let (($x277 (and $x60 $x147)))
 (let (($x209 (= ?x282 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x23 (and $x209 $x277)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x339 (and $x33 $x23)))
 (let (($x171 (and $x60 $x339)))
 (let (($x93 (= ?x142 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x260 (and $x93 $x171)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x335 (and $x54 $x260)))
 (let (($x91 (and $x60 $x335)))
 (let (($x41 (= ?x214 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x58 (and $x41 $x91)))
 (let (($x172 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x63 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x172)))))))
 (let (($x194 (bvugt ?x102 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x234 (=> (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x222 $x194)))))))
 (let (($x18 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x68 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x18)))))))
 (let (($x150 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x183 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x276 $x150)))))))
 (let (($x269 (and $x183 $x68)))
 (let (($x36 (and $x269 $x234)))
 (let (($x9 (and $x36 $x63)))
 (let (($x294 (and $x9 $x58)))
 (let (($x313 (=> $x294 $x285)))
 (not $x313)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 221 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x122 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x81 (bvadd ?x122 ?x9)))
 (let ((?x205 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x348 (concat ?x205 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x53 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x208 (bvadd ?x53 (_ bv3 32))))
 (let ((?x353 (concat (select input.dst.llvm-mem ?x208) (concat ?x264 ?x348))))
 (let ((?x180 (bvmul (_ bv4294967295 32) ?x353)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x356 (concat ?x188 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x194 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x235 (bvadd ?x194 (_ bv3 32))))
 (let ((?x286 (concat (select input.dst.llvm-mem ?x235) (concat ?x148 ?x356))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x66 (concat ?x224 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x211 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x233 (bvadd ?x211 (_ bv3 32))))
 (let ((?x313 (concat (select input.dst.llvm-mem ?x233) (concat ?x32 ?x66))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x193)))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x229)))
 (let ((?x144 (bvadd (bvadd (bvadd ?x26 ?x313) ?x286) ?x180)))
 (let (($x349 (= ?x144 ?x81)))
 (let (($x360 (= $x349 true)))
 (let ((?x213 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x339 (concat ?x23 (concat ?x69 (concat ?x121 ?x213)))))
 (let (($x302 (= ?x339 input.dst.llvm-%m)))
 (let (($x310 (= $x302 true)))
 (let (($x171 (= input.dst.llvm-%m ?x339)))
 (let ((?x295 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x307 (= (_ bv0 32) ?x295)))
 (let ((?x297 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (and $x154 $x49)))
 (let (($x293 (and $x323 $x307)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x45 $x293)))
 (let (($x61 (forall ((input.ind-%var3095X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var3095X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x29))))
 (let ((?x142 (input.spec-%var-m-0.1.1 input.ind-%var3095X)))
 (let (($x60 (input.spec-%var-m-0.0.1 input.ind-%var3095X)))
 (=> $x60 (= ?x142 ?x76))))))))
 ))
 (let (($x350 (forall ((input.ind-%var3094X (_ BitVec 32)) )(let (($x60 (input.spec-%var-m-0.0.1 input.ind-%var3094X)))
 (= $x60 (and (bvule (_ bv0 32) input.ind-%var3094X) (bvult input.ind-%var3094X (_ bv100 32))))))
 ))
 (let (($x40 (and $x350 $x61)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x332 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x315 $x163)))))))
 (let (($x314 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x225 (= (bvand ?x194 (_ bv4294967292 32)) ?x194)))
 (let (($x275 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x194 (bvsub ?x194 (_ bv4 32))) (bvult ?x194 (bvsub ?x194 (_ bv4 32))))))
 (let (($x311 (and true $x275)))
 (let (($x30 (= (bvand ?x211 (_ bv4294967292 32)) ?x211)))
 (let (($x287 (and $x30 $x311)))
 (let (($x17 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x53 (bvsub ?x53 (_ bv8 32))) (bvult ?x53 (bvsub ?x53 (_ bv8 32))))))
 (let (($x24 (and (and (and true $x17) $x287) $x225)))
 (let (($x303 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x370 (and true $x303)))
 (let (($x334 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x305 (and $x334 $x370)))
 (let (($x359 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x211 (bvsub ?x211 (_ bv12 32))) (bvult ?x211 (bvsub ?x211 (_ bv12 32))))))
 (let (($x298 (and (and (and true $x334) $x359) $x305)))
 (let (($x217 (and (and (and (and (and (and $x298 $x24) $x314) $x332) $x40) $x145) $x171)))
 (let (($x127 (= $x217 true)))
 (let (($x316 (= $x298 true)))
 (let (($x182 (and $x24 $x314)))
 (let (($x341 (= $x182 true)))
 (let (($x103 (and $x341 $x316)))
 (let (($x319 (and $x103 $x127)))
 (let (($x56 (and $x319 $x310)))
 (let (($x51 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x14 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x14 (_ bv0 32))))
 (let (($x259 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x8 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x8 (_ bv1 32))))
 (let (($x267 (and $x221 $x21)))
 (let (($x215 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x258 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x258 (_ bv1 32))))
 (let (($x110 (and $x230 $x267)))
 (let (($x153 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x165 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x165 (_ bv0 32))))
 (let (($x306 (and $x77 $x110)))
 (let (($x70 (and $x306 $x56)))
 (let ((?x118 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x10 (= ?x118 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x149 (bvuge ?x165 (_ bv1 32))))
 (let (($x290 (=> $x149 $x10)))
 (let (($x59 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x114 (= $x149 $x59)))
 (let (($x172 (= false false)))
 (let (($x343 (=> $x77 $x172)))
 (let (($x13 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x320 (= $x77 $x13)))
 (let (($x108 (and (and (and $x320 $x343) $x114) $x290)))
 (let (($x243 (and $x108 $x70)))
 (let (($x236 (= ?x122 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x268 (=> $x230 $x236)))
 (let (($x65 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x136 (= $x230 $x65)))
 (let (($x170 (= ?x258 (_ bv0 32))))
 (let (($x257 (=> $x170 $x172)))
 (let (($x274 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x262 (= $x170 $x274)))
 (let (($x138 (and (and (and $x262 $x257) $x136) $x268)))
 (let (($x326 (and $x138 $x243)))
 (let ((?x282 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x265 (= ?x282 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x123 (bvuge ?x14 (_ bv1 32))))
 (let (($x241 (=> $x123 $x265)))
 (let (($x281 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x270 (= $x123 $x281)))
 (let (($x253 (and (and (= $x21 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x21 $x172)) $x270)))
 (let (($x141 (and $x253 $x241)))
 (let (($x117 (and $x141 $x326)))
 (let (($x178 (= ?x9 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x44 (=> $x221 $x178)))
 (let (($x78 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x112 (= $x221 $x78)))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let (($x7 (=> $x12 $x172)))
 (let (($x5 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x242 (= $x12 $x5)))
 (let (($x105 (and (and (and $x242 $x7) $x112) $x44)))
 (let (($x322 (and $x105 $x117)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x11 (and $x161 $x322)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x312 (and $x34 $x11)))
 (let (($x226 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x330 (and $x226 $x312)))
 (let (($x191 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x327 (and $x191 $x330)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x300 (and $x19 $x327)))
 (let (($x328 (and $x172 $x300)))
 (let (($x42 (= ?x118 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x115 (and $x42 $x328)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x187 (and $x96 $x115)))
 (let (($x146 (and $x172 $x187)))
 (let (($x48 (= ?x122 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x218 (and $x48 $x146)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x202 (and $x184 $x218)))
 (let (($x38 (and $x172 $x202)))
 (let (($x209 (= ?x282 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x57 (and $x209 $x38)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x351 (and $x28 $x57)))
 (let (($x361 (and $x172 $x351)))
 (let (($x89 (= ?x9 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x199 (and $x89 $x361)))
 (let (($x252 (bvugt ?x194 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x216 (=> (bvule ?x194 (bvsub (bvadd ?x194 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x252)))))))
 (let (($x271 (bvugt ?x53 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x31 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x271)))))))
 (let (($x100 (bvugt ?x211 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x276 (=> (bvule ?x211 (bvsub (bvadd ?x211 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x100)))))))
 (let (($x186 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x68 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x186)))))))
 (let (($x269 (and $x68 $x276)))
 (let (($x52 (and $x269 $x31)))
 (let (($x234 (and $x52 $x216)))
 (let (($x85 (and $x234 $x199)))
 (let (($x338 (=> $x85 $x360)))
 (not $x338))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x122 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x81 (bvadd ?x122 ?x9)))
 (let ((?x205 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x348 (concat ?x205 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x53 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x208 (bvadd ?x53 (_ bv3 32))))
 (let ((?x353 (concat (select input.dst.llvm-mem ?x208) (concat ?x264 ?x348))))
 (let ((?x180 (bvmul (_ bv4294967295 32) ?x353)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x356 (concat ?x188 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x194 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x235 (bvadd ?x194 (_ bv3 32))))
 (let ((?x286 (concat (select input.dst.llvm-mem ?x235) (concat ?x148 ?x356))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x66 (concat ?x224 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x211 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x233 (bvadd ?x211 (_ bv3 32))))
 (let ((?x313 (concat (select input.dst.llvm-mem ?x233) (concat ?x32 ?x66))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x193)))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x229)))
 (let ((?x144 (bvadd (bvadd (bvadd ?x26 ?x313) ?x286) ?x180)))
 (let (($x349 (= ?x144 ?x81)))
 (let (($x360 (= $x349 true)))
 (let ((?x213 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x339 (concat ?x23 (concat ?x69 (concat ?x121 ?x213)))))
 (let (($x302 (= ?x339 input.dst.llvm-%m)))
 (let (($x310 (= $x302 true)))
 (let (($x171 (= input.dst.llvm-%m ?x339)))
 (let ((?x295 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x307 (= (_ bv0 32) ?x295)))
 (let ((?x297 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (and $x154 $x49)))
 (let (($x293 (and $x323 $x307)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x45 $x293)))
 (let (($x61 (forall ((input.ind-%var3095X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var3095X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x29))))
 (let ((?x142 (input.spec-%var-m-0.1.1 input.ind-%var3095X)))
 (let (($x60 (input.spec-%var-m-0.0.1 input.ind-%var3095X)))
 (=> $x60 (= ?x142 ?x76))))))))
 ))
 (let (($x350 (forall ((input.ind-%var3094X (_ BitVec 32)) )(let (($x60 (input.spec-%var-m-0.0.1 input.ind-%var3094X)))
 (= $x60 (and (bvule (_ bv0 32) input.ind-%var3094X) (bvult input.ind-%var3094X (_ bv100 32))))))
 ))
 (let (($x40 (and $x350 $x61)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x332 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x315 $x163)))))))
 (let (($x314 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x225 (= (bvand ?x194 (_ bv4294967292 32)) ?x194)))
 (let (($x275 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x194 (bvsub ?x194 (_ bv4 32))) (bvult ?x194 (bvsub ?x194 (_ bv4 32))))))
 (let (($x311 (and true $x275)))
 (let (($x30 (= (bvand ?x211 (_ bv4294967292 32)) ?x211)))
 (let (($x287 (and $x30 $x311)))
 (let (($x17 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x53 (bvsub ?x53 (_ bv8 32))) (bvult ?x53 (bvsub ?x53 (_ bv8 32))))))
 (let (($x24 (and (and (and true $x17) $x287) $x225)))
 (let (($x303 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x370 (and true $x303)))
 (let (($x334 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x305 (and $x334 $x370)))
 (let (($x359 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x211 (bvsub ?x211 (_ bv12 32))) (bvult ?x211 (bvsub ?x211 (_ bv12 32))))))
 (let (($x298 (and (and (and true $x334) $x359) $x305)))
 (let (($x217 (and (and (and (and (and (and $x298 $x24) $x314) $x332) $x40) $x145) $x171)))
 (let (($x127 (= $x217 true)))
 (let (($x316 (= $x298 true)))
 (let (($x182 (and $x24 $x314)))
 (let (($x341 (= $x182 true)))
 (let (($x103 (and $x341 $x316)))
 (let (($x319 (and $x103 $x127)))
 (let (($x56 (and $x319 $x310)))
 (let (($x51 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x14 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x14 (_ bv0 32))))
 (let (($x259 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x8 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x8 (_ bv1 32))))
 (let (($x267 (and $x221 $x21)))
 (let (($x215 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x258 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x258 (_ bv1 32))))
 (let (($x110 (and $x230 $x267)))
 (let (($x153 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x165 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x165 (_ bv0 32))))
 (let (($x306 (and $x77 $x110)))
 (let (($x70 (and $x306 $x56)))
 (let ((?x118 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x10 (= ?x118 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x149 (bvuge ?x165 (_ bv1 32))))
 (let (($x290 (=> $x149 $x10)))
 (let (($x59 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x114 (= $x149 $x59)))
 (let (($x172 (= false false)))
 (let (($x343 (=> $x77 $x172)))
 (let (($x13 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x320 (= $x77 $x13)))
 (let (($x108 (and (and (and $x320 $x343) $x114) $x290)))
 (let (($x243 (and $x108 $x70)))
 (let (($x236 (= ?x122 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x268 (=> $x230 $x236)))
 (let (($x65 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x136 (= $x230 $x65)))
 (let (($x170 (= ?x258 (_ bv0 32))))
 (let (($x257 (=> $x170 $x172)))
 (let (($x274 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x262 (= $x170 $x274)))
 (let (($x138 (and (and (and $x262 $x257) $x136) $x268)))
 (let (($x326 (and $x138 $x243)))
 (let ((?x282 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x265 (= ?x282 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x123 (bvuge ?x14 (_ bv1 32))))
 (let (($x241 (=> $x123 $x265)))
 (let (($x281 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x270 (= $x123 $x281)))
 (let (($x253 (and (and (= $x21 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x21 $x172)) $x270)))
 (let (($x141 (and $x253 $x241)))
 (let (($x117 (and $x141 $x326)))
 (let (($x178 (= ?x9 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x44 (=> $x221 $x178)))
 (let (($x78 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x112 (= $x221 $x78)))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let (($x7 (=> $x12 $x172)))
 (let (($x5 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x242 (= $x12 $x5)))
 (let (($x105 (and (and (and $x242 $x7) $x112) $x44)))
 (let (($x322 (and $x105 $x117)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x11 (and $x161 $x322)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x312 (and $x34 $x11)))
 (let (($x226 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x330 (and $x226 $x312)))
 (let (($x191 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x327 (and $x191 $x330)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x300 (and $x19 $x327)))
 (let (($x328 (and $x172 $x300)))
 (let (($x42 (= ?x118 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x115 (and $x42 $x328)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x187 (and $x96 $x115)))
 (let (($x146 (and $x172 $x187)))
 (let (($x48 (= ?x122 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x218 (and $x48 $x146)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x202 (and $x184 $x218)))
 (let (($x38 (and $x172 $x202)))
 (let (($x209 (= ?x282 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x57 (and $x209 $x38)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x351 (and $x28 $x57)))
 (let (($x361 (and $x172 $x351)))
 (let (($x89 (= ?x9 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x199 (and $x89 $x361)))
 (let (($x252 (bvugt ?x194 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x216 (=> (bvule ?x194 (bvsub (bvadd ?x194 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x252)))))))
 (let (($x271 (bvugt ?x53 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x31 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x271)))))))
 (let (($x100 (bvugt ?x211 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x276 (=> (bvule ?x211 (bvsub (bvadd ?x211 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x100)))))))
 (let (($x186 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x68 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x186)))))))
 (let (($x269 (and $x68 $x276)))
 (let (($x52 (and $x269 $x31)))
 (let (($x234 (and $x52 $x216)))
 (let (($x85 (and $x234 $x199)))
 (let (($x338 (=> $x85 $x360)))
 (not $x338))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 218 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x372 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x250 (concat ?x372 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x158 (bvadd ?x6 (_ bv3 32))))
 (let ((?x362 (concat (select input.dst.llvm-mem ?x158) (concat ?x176 ?x250))))
 (let ((?x365 (bvmul (_ bv4294967295 32) ?x362)))
 (let ((?x301 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x196 (concat ?x301 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x271 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x231 (bvadd ?x271 (_ bv3 32))))
 (let ((?x220 (concat (select input.dst.llvm-mem ?x231) (concat ?x190 ?x196))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x144 (concat ?x180 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x150 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x266 (bvadd ?x150 (_ bv3 32))))
 (let ((?x337 (concat (select input.dst.llvm-mem ?x266) (concat ?x349 ?x144))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x367)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x205)))
 (let ((?x240 (bvadd (bvadd (bvadd ?x348 ?x337) ?x220) ?x365)))
 (let ((?x118 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x352 (= ?x118 ?x240)))
 (let (($x22 (= $x352 true)))
 (let ((?x312 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x327 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x218 (concat ?x115 (concat ?x327 ?x312)))))
 (let (($x43 (= ?x202 input.dst.llvm-%m)))
 (let (($x72 (= $x43 true)))
 (let (($x38 (= input.dst.llvm-%m ?x202)))
 (let ((?x243 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x326 (= (_ bv0 32) ?x243)))
 (let ((?x310 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x310)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x302 $x56)))
 (let (($x117 (and $x70 $x326)))
 (let (($x319 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x322 (and $x319 $x117)))
 (let (($x171 (forall ((input.ind-%var3139X (_ BitVec 32)) )(let ((?x293 (bvadd (bvmul input.ind-%var3139X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem ?x293))))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv2 32))) ?x23))))
 (let ((?x282 (input.spec-%var-m-0.1.1 input.ind-%var3139X)))
 (let (($x172 (input.spec-%var-m-0.0.1 input.ind-%var3139X)))
 (=> $x172 (= ?x282 ?x206))))))))
 ))
 (let (($x15 (forall ((input.ind-%var3138X (_ BitVec 32)) )(let (($x172 (input.spec-%var-m-0.0.1 input.ind-%var3138X)))
 (= $x172 (and (bvule (_ bv0 32) input.ind-%var3138X) (bvult input.ind-%var3138X (_ bv100 32))))))
 ))
 (let (($x217 (and $x15 $x171)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x344 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x332 $x91)))))))
 (let (($x101 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x182 (= (bvand ?x271 (_ bv4294967292 32)) ?x271)))
 (let (($x225 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x271 (bvsub ?x271 (_ bv4 32))) (bvult ?x271 (bvsub ?x271 (_ bv4 32))))))
 (let (($x24 (and true $x225)))
 (let (($x275 (= (bvand ?x150 (_ bv4294967292 32)) ?x150)))
 (let (($x355 (and $x275 $x24)))
 (let (($x289 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x334 (and (and (and true $x289) $x355) $x182)))
 (let (($x316 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x103 (and true $x316)))
 (let (($x359 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x260 (and $x359 $x103)))
 (let (($x20 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x150 (bvsub ?x150 (_ bv12 32))) (bvult ?x150 (bvsub ?x150 (_ bv12 32))))))
 (let (($x318 (and (and (and true $x359) $x20) $x260)))
 (let (($x223 (and (and (and (and (and (and $x318 $x334) $x101) $x344) $x217) $x322) $x38)))
 (let (($x97 (= $x223 true)))
 (let (($x331 (= $x318 true)))
 (let (($x67 (and $x334 $x101)))
 (let (($x369 (= $x67 true)))
 (let (($x288 (and $x369 $x331)))
 (let (($x325 (and $x288 $x97)))
 (let (($x99 (and $x325 $x72)))
 (let (($x280 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x244 (ite $x280 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x244 (_ bv0 32))))
 (let (($x242 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x283 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x283 (_ bv0 32))))
 (let (($x304 (and $x221 $x123)))
 (let (($x257 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x207 (ite $x257 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x207 (_ bv1 32))))
 (let (($x17 (and $x236 $x304)))
 (let (($x343 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x195 (ite $x343 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x195 (_ bv0 32))))
 (let (($x155 (and $x149 $x17)))
 (let (($x193 (and $x155 $x99)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x110 (= ?x74 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x10 (bvuge ?x195 (_ bv1 32))))
 (let (($x306 (=> $x10 $x110)))
 (let (($x290 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x108 (= $x10 $x290)))
 (let (($x252 (= false false)))
 (let (($x371 (=> $x149 $x252)))
 (let (($x114 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x87 (= $x149 $x114)))
 (let (($x212 (and (and (and $x87 $x371) $x108) $x306)))
 (let (($x229 (and $x212 $x193)))
 (let (($x165 (= ?x118 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x77 (=> $x236 $x165)))
 (let (($x268 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x138 (= $x236 $x268)))
 (let (($x230 (= ?x207 (_ bv0 32))))
 (let (($x321 (=> $x230 $x252)))
 (let (($x136 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x35 (= $x230 $x136)))
 (let (($x320 (and (and (and $x35 $x321) $x138) $x77)))
 (let (($x26 (and $x320 $x229)))
 (let ((?x122 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x258 (= ?x122 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x265 (bvuge ?x244 (_ bv1 32))))
 (let (($x170 (=> $x265 $x258)))
 (let (($x241 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x141 (= $x265 $x241)))
 (let (($x274 (and (and (= $x123 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x123 $x252)) $x141)))
 (let (($x262 (and $x274 $x170)))
 (let (($x285 (and $x262 $x26)))
 (let ((?x234 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x14 (= ?x234 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x178 (bvuge ?x283 (_ bv1 32))))
 (let (($x21 (=> $x178 $x14)))
 (let (($x44 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x105 (= $x178 $x44)))
 (let (($x279 (=> $x221 $x252)))
 (let (($x112 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x111 (= $x221 $x112)))
 (let (($x278 (and (and (and $x111 $x279) $x105) $x21)))
 (let (($x140 (and $x278 $x285)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x32 (and $x5 $x140)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x177 (and $x12 $x32)))
 (let (($x259 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x224 (and $x259 $x177)))
 (let (($x169 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x256 (and $x169 $x224)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x66 (and $x152 $x256)))
 (let (($x329 (and $x252 $x66)))
 (let (($x249 (= ?x74 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x313 (and $x249 $x329)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x336 (and $x19 $x313)))
 (let (($x292 (and $x252 $x336)))
 (let (($x42 (= ?x118 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x238 (and $x42 $x292)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x148 (and $x96 $x238)))
 (let (($x133 (and $x252 $x148)))
 (let (($x48 (= ?x122 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x188 (and $x48 $x133)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x166 (and $x181 $x188)))
 (let (($x356 (and $x252 $x166)))
 (let (($x235 (= ?x234 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x88 (and $x235 $x356)))
 (let (($x255 (bvugt ?x271 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x200 (=> (bvule ?x271 (bvsub (bvadd ?x271 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x255)))))))
 (let (($x175 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x84 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x175)))))))
 (let (($x208 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x186 (=> (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x208)))))))
 (let (($x192 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x211 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x276 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x192)))))))
 (let (($x269 (and $x276 $x186)))
 (let (($x75 (and $x269 $x84)))
 (let (($x31 (and $x75 $x200)))
 (let (($x286 (and $x31 $x88)))
 (let (($x237 (=> $x286 $x22)))
 (not $x237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x372 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x250 (concat ?x372 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x158 (bvadd ?x6 (_ bv3 32))))
 (let ((?x362 (concat (select input.dst.llvm-mem ?x158) (concat ?x176 ?x250))))
 (let ((?x365 (bvmul (_ bv4294967295 32) ?x362)))
 (let ((?x301 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x196 (concat ?x301 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x271 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x231 (bvadd ?x271 (_ bv3 32))))
 (let ((?x220 (concat (select input.dst.llvm-mem ?x231) (concat ?x190 ?x196))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x144 (concat ?x180 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x150 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x266 (bvadd ?x150 (_ bv3 32))))
 (let ((?x337 (concat (select input.dst.llvm-mem ?x266) (concat ?x349 ?x144))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x367)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x205)))
 (let ((?x240 (bvadd (bvadd (bvadd ?x348 ?x337) ?x220) ?x365)))
 (let ((?x118 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x352 (= ?x118 ?x240)))
 (let (($x22 (= $x352 true)))
 (let ((?x312 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x327 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x218 (concat ?x115 (concat ?x327 ?x312)))))
 (let (($x43 (= ?x202 input.dst.llvm-%m)))
 (let (($x72 (= $x43 true)))
 (let (($x38 (= input.dst.llvm-%m ?x202)))
 (let ((?x243 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x326 (= (_ bv0 32) ?x243)))
 (let ((?x310 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x310)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x302 $x56)))
 (let (($x117 (and $x70 $x326)))
 (let (($x319 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x322 (and $x319 $x117)))
 (let (($x171 (forall ((input.ind-%var3139X (_ BitVec 32)) )(let ((?x293 (bvadd (bvmul input.ind-%var3139X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem ?x293))))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv2 32))) ?x23))))
 (let ((?x282 (input.spec-%var-m-0.1.1 input.ind-%var3139X)))
 (let (($x172 (input.spec-%var-m-0.0.1 input.ind-%var3139X)))
 (=> $x172 (= ?x282 ?x206))))))))
 ))
 (let (($x15 (forall ((input.ind-%var3138X (_ BitVec 32)) )(let (($x172 (input.spec-%var-m-0.0.1 input.ind-%var3138X)))
 (= $x172 (and (bvule (_ bv0 32) input.ind-%var3138X) (bvult input.ind-%var3138X (_ bv100 32))))))
 ))
 (let (($x217 (and $x15 $x171)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x344 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x332 $x91)))))))
 (let (($x101 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x182 (= (bvand ?x271 (_ bv4294967292 32)) ?x271)))
 (let (($x225 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x271 (bvsub ?x271 (_ bv4 32))) (bvult ?x271 (bvsub ?x271 (_ bv4 32))))))
 (let (($x24 (and true $x225)))
 (let (($x275 (= (bvand ?x150 (_ bv4294967292 32)) ?x150)))
 (let (($x355 (and $x275 $x24)))
 (let (($x289 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x334 (and (and (and true $x289) $x355) $x182)))
 (let (($x316 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x103 (and true $x316)))
 (let (($x359 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x260 (and $x359 $x103)))
 (let (($x20 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x150 (bvsub ?x150 (_ bv12 32))) (bvult ?x150 (bvsub ?x150 (_ bv12 32))))))
 (let (($x318 (and (and (and true $x359) $x20) $x260)))
 (let (($x223 (and (and (and (and (and (and $x318 $x334) $x101) $x344) $x217) $x322) $x38)))
 (let (($x97 (= $x223 true)))
 (let (($x331 (= $x318 true)))
 (let (($x67 (and $x334 $x101)))
 (let (($x369 (= $x67 true)))
 (let (($x288 (and $x369 $x331)))
 (let (($x325 (and $x288 $x97)))
 (let (($x99 (and $x325 $x72)))
 (let (($x280 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x244 (ite $x280 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x244 (_ bv0 32))))
 (let (($x242 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x283 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x283 (_ bv0 32))))
 (let (($x304 (and $x221 $x123)))
 (let (($x257 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x207 (ite $x257 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x207 (_ bv1 32))))
 (let (($x17 (and $x236 $x304)))
 (let (($x343 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x195 (ite $x343 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x195 (_ bv0 32))))
 (let (($x155 (and $x149 $x17)))
 (let (($x193 (and $x155 $x99)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x110 (= ?x74 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x10 (bvuge ?x195 (_ bv1 32))))
 (let (($x306 (=> $x10 $x110)))
 (let (($x290 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x108 (= $x10 $x290)))
 (let (($x252 (= false false)))
 (let (($x371 (=> $x149 $x252)))
 (let (($x114 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x87 (= $x149 $x114)))
 (let (($x212 (and (and (and $x87 $x371) $x108) $x306)))
 (let (($x229 (and $x212 $x193)))
 (let (($x165 (= ?x118 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x77 (=> $x236 $x165)))
 (let (($x268 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x138 (= $x236 $x268)))
 (let (($x230 (= ?x207 (_ bv0 32))))
 (let (($x321 (=> $x230 $x252)))
 (let (($x136 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x35 (= $x230 $x136)))
 (let (($x320 (and (and (and $x35 $x321) $x138) $x77)))
 (let (($x26 (and $x320 $x229)))
 (let ((?x122 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x258 (= ?x122 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x265 (bvuge ?x244 (_ bv1 32))))
 (let (($x170 (=> $x265 $x258)))
 (let (($x241 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x141 (= $x265 $x241)))
 (let (($x274 (and (and (= $x123 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x123 $x252)) $x141)))
 (let (($x262 (and $x274 $x170)))
 (let (($x285 (and $x262 $x26)))
 (let ((?x234 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x14 (= ?x234 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x178 (bvuge ?x283 (_ bv1 32))))
 (let (($x21 (=> $x178 $x14)))
 (let (($x44 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x105 (= $x178 $x44)))
 (let (($x279 (=> $x221 $x252)))
 (let (($x112 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x111 (= $x221 $x112)))
 (let (($x278 (and (and (and $x111 $x279) $x105) $x21)))
 (let (($x140 (and $x278 $x285)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x32 (and $x5 $x140)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x177 (and $x12 $x32)))
 (let (($x259 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x224 (and $x259 $x177)))
 (let (($x169 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x256 (and $x169 $x224)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x66 (and $x152 $x256)))
 (let (($x329 (and $x252 $x66)))
 (let (($x249 (= ?x74 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x313 (and $x249 $x329)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x336 (and $x19 $x313)))
 (let (($x292 (and $x252 $x336)))
 (let (($x42 (= ?x118 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x238 (and $x42 $x292)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x148 (and $x96 $x238)))
 (let (($x133 (and $x252 $x148)))
 (let (($x48 (= ?x122 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x188 (and $x48 $x133)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x166 (and $x181 $x188)))
 (let (($x356 (and $x252 $x166)))
 (let (($x235 (= ?x234 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x88 (and $x235 $x356)))
 (let (($x255 (bvugt ?x271 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x200 (=> (bvule ?x271 (bvsub (bvadd ?x271 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x255)))))))
 (let (($x175 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x84 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x175)))))))
 (let (($x208 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x186 (=> (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x208)))))))
 (let (($x192 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x211 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x276 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x192)))))))
 (let (($x269 (and $x276 $x186)))
 (let (($x75 (and $x269 $x84)))
 (let (($x31 (and $x75 $x200)))
 (let (($x286 (and $x31 $x88)))
 (let (($x237 (=> $x286 $x22)))
 (not $x237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 217 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x118 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x323 (bvmul (_ bv4294967295 32) ?x118)))
 (let ((?x31 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x366 (bvadd ?x31 ?x323)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x159 (concat ?x58 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x54 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x156 (bvadd ?x54 (_ bv3 32))))
 (let ((?x45 (concat (select input.dst.llvm-mem ?x156) (concat ?x61 ?x159))))
 (let ((?x49 (bvmul (_ bv4294967295 32) ?x45)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x41 (concat ?x7 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x175 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x174 (bvadd ?x175 (_ bv3 32))))
 (let ((?x98 (concat (select input.dst.llvm-mem ?x174) (concat ?x163 ?x41))))
 (let ((?x365 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x240 (concat ?x365 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x254 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x71 (bvadd ?x254 (_ bv3 32))))
 (let ((?x167 (concat (select input.dst.llvm-mem ?x71) (concat ?x22 ?x240))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x164)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x372)))
 (let ((?x284 (bvadd (bvadd (bvadd ?x250 ?x167) ?x98) ?x49)))
 (let (($x295 (= ?x284 ?x366)))
 (let (($x340 (= $x295 true)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x256 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x148 (concat ?x238 (concat ?x313 (concat ?x256 ?x177)))))
 (let (($x104 (= ?x148 input.dst.llvm-%m)))
 (let (($x90 (= $x104 true)))
 (let (($x133 (= input.dst.llvm-%m ?x148)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x26 (= (_ bv0 32) ?x229)))
 (let ((?x72 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x43 $x99)))
 (let (($x285 (and $x193 $x26)))
 (let (($x325 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x325 $x285)))
 (let (($x38 (forall ((input.ind-%var3183X (_ BitVec 32)) )(let ((?x117 (bvadd (bvmul input.ind-%var3183X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x218))))
 (let ((?x122 (input.spec-%var-m-0.1.1 input.ind-%var3183X)))
 (let (($x252 (input.spec-%var-m-0.0.1 input.ind-%var3183X)))
 (=> $x252 (= ?x122 ?x300))))))))
 ))
 (let (($x69 (forall ((input.ind-%var3182X (_ BitVec 32)) )(let (($x252 (input.spec-%var-m-0.0.1 input.ind-%var3182X)))
 (= $x252 (and (bvule (_ bv0 32) input.ind-%var3182X) (bvult input.ind-%var3182X (_ bv100 32))))))
 ))
 (let (($x223 (and $x69 $x38)))
 (let (($x361 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x344 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x344 $x361)))))))
 (let (($x342 (= (bvand ?x54 (_ bv4294967292 32)) ?x54)))
 (let (($x67 (= (bvand ?x175 (_ bv4294967292 32)) ?x175)))
 (let (($x182 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x175 (bvsub ?x175 (_ bv4 32))) (bvult ?x175 (bvsub ?x175 (_ bv4 32))))))
 (let (($x334 (and true $x182)))
 (let (($x225 (= (bvand ?x254 (_ bv4294967292 32)) ?x254)))
 (let (($x247 (and $x225 $x334)))
 (let (($x311 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x54 (bvsub ?x54 (_ bv8 32))) (bvult ?x54 (bvsub ?x54 (_ bv8 32))))))
 (let (($x359 (and (and (and true $x311) $x247) $x67)))
 (let (($x331 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x288 (and true $x331)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x57 (and $x20 $x288)))
 (let (($x298 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x254 (bvsub ?x254 (_ bv12 32))) (bvult ?x254 (bvsub ?x254 (_ bv12 32))))))
 (let (($x50 (and (and (and true $x20) $x298) $x57)))
 (let (($x95 (and (and (and (and (and (and $x50 $x359) $x342) $x157) $x223) $x140) $x133)))
 (let (($x264 (= $x95 true)))
 (let (($x357 (= $x50 true)))
 (let (($x248 (and $x359 $x342)))
 (let (($x124 (= $x248 true)))
 (let (($x130 (and $x124 $x357)))
 (let (($x317 (and $x130 $x264)))
 (let (($x354 (and $x317 $x90)))
 (let (($x83 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x113 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x113 (_ bv1 32))))
 (let (($x111 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x160 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x160 (_ bv1 32))))
 (let (($x120 (and $x14 $x258)))
 (let (($x321 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x27 (ite $x321 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x27 (_ bv0 32))))
 (let (($x289 (and $x236 $x120)))
 (let (($x371 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x86 (ite $x371 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x86 (_ bv0 32))))
 (let (($x341 (and $x10 $x289)))
 (let (($x367 (and $x341 $x354)))
 (let ((?x34 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x17 (= ?x34 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x110 (bvuge ?x86 (_ bv1 32))))
 (let (($x155 (=> $x110 $x17)))
 (let (($x306 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x212 (= $x110 $x306)))
 (let (($x255 (= false false)))
 (let (($x267 (=> $x10 $x255)))
 (let (($x108 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x345 (= $x10 $x108)))
 (let (($x30 (and (and (and $x345 $x267) $x212) $x155)))
 (let (($x205 (and $x30 $x367)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x195 (= ?x74 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x165 (bvuge ?x27 (_ bv1 32))))
 (let (($x149 (=> $x165 $x195)))
 (let (($x77 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x320 (= $x165 $x77)))
 (let (($x114 (and (and (= $x236 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x236 $x255)) $x320)))
 (let (($x87 (and $x114 $x149)))
 (let (($x348 (and $x87 $x205)))
 (let (($x207 (= ?x118 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x230 (=> $x258 $x207)))
 (let (($x170 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x262 (= $x258 $x170)))
 (let (($x265 (= ?x113 (_ bv0 32))))
 (let (($x215 (=> $x265 $x255)))
 (let (($x141 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x274 (= $x265 $x141)))
 (let (($x35 (and (and (and $x274 $x215) $x262) $x230)))
 (let (($x338 (and $x35 $x348)))
 (let (($x244 (= ?x31 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x123 (=> $x14 $x244)))
 (let (($x21 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x278 (= $x14 $x21)))
 (let (($x178 (= ?x160 (_ bv0 32))))
 (let (($x51 (=> $x178 $x255)))
 (let (($x105 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x47 (= $x178 $x105)))
 (let (($x253 (and (and (and $x47 $x51) $x278) $x123)))
 (let (($x81 (and $x253 $x338)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x349 (and $x112 $x81)))
 (let (($x221 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x353 (and $x221 $x349)))
 (let (($x242 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x180 (and $x242 $x353)))
 (let (($x228 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x37 (and $x228 $x180)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x144 (and $x8 $x37)))
 (let (($x360 (and $x255 $x144)))
 (let (($x161 (= ?x34 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x337 (and $x161 $x360)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x116 (and $x152 $x337)))
 (let (($x201 (and $x255 $x116)))
 (let (($x249 (= ?x74 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x219 (and $x249 $x201)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x190 (and $x19 $x219)))
 (let (($x296 (and $x255 $x190)))
 (let (($x42 (= ?x118 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x301 (and $x42 $x296)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x143 (and $x204 $x301)))
 (let (($x196 (and $x255 $x143)))
 (let (($x231 (= ?x31 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x189 (and $x231 $x196)))
 (let (($x36 (bvugt ?x175 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x214 (=> (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x216 $x36)))))))
 (let (($x239 (bvugt ?x54 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x135 (=> (bvule ?x54 (bvsub (bvadd ?x54 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x239)))))))
 (let (($x158 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x102 (=> (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x158)))))))
 (let (($x263 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x186 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x263)))))))
 (let (($x269 (and $x186 $x102)))
 (let (($x73 (and $x269 $x135)))
 (let (($x84 (and $x73 $x214)))
 (let (($x220 (and $x84 $x189)))
 (let (($x346 (=> $x220 $x340)))
 (not $x346)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x118 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x323 (bvmul (_ bv4294967295 32) ?x118)))
 (let ((?x31 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x366 (bvadd ?x31 ?x323)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x159 (concat ?x58 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x54 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x156 (bvadd ?x54 (_ bv3 32))))
 (let ((?x45 (concat (select input.dst.llvm-mem ?x156) (concat ?x61 ?x159))))
 (let ((?x49 (bvmul (_ bv4294967295 32) ?x45)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x41 (concat ?x7 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x175 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x174 (bvadd ?x175 (_ bv3 32))))
 (let ((?x98 (concat (select input.dst.llvm-mem ?x174) (concat ?x163 ?x41))))
 (let ((?x365 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x240 (concat ?x365 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x254 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x71 (bvadd ?x254 (_ bv3 32))))
 (let ((?x167 (concat (select input.dst.llvm-mem ?x71) (concat ?x22 ?x240))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x164)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x372)))
 (let ((?x284 (bvadd (bvadd (bvadd ?x250 ?x167) ?x98) ?x49)))
 (let (($x295 (= ?x284 ?x366)))
 (let (($x340 (= $x295 true)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x256 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x148 (concat ?x238 (concat ?x313 (concat ?x256 ?x177)))))
 (let (($x104 (= ?x148 input.dst.llvm-%m)))
 (let (($x90 (= $x104 true)))
 (let (($x133 (= input.dst.llvm-%m ?x148)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x26 (= (_ bv0 32) ?x229)))
 (let ((?x72 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x43 $x99)))
 (let (($x285 (and $x193 $x26)))
 (let (($x325 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x325 $x285)))
 (let (($x38 (forall ((input.ind-%var3183X (_ BitVec 32)) )(let ((?x117 (bvadd (bvmul input.ind-%var3183X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x218))))
 (let ((?x122 (input.spec-%var-m-0.1.1 input.ind-%var3183X)))
 (let (($x252 (input.spec-%var-m-0.0.1 input.ind-%var3183X)))
 (=> $x252 (= ?x122 ?x300))))))))
 ))
 (let (($x69 (forall ((input.ind-%var3182X (_ BitVec 32)) )(let (($x252 (input.spec-%var-m-0.0.1 input.ind-%var3182X)))
 (= $x252 (and (bvule (_ bv0 32) input.ind-%var3182X) (bvult input.ind-%var3182X (_ bv100 32))))))
 ))
 (let (($x223 (and $x69 $x38)))
 (let (($x361 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x344 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x344 $x361)))))))
 (let (($x342 (= (bvand ?x54 (_ bv4294967292 32)) ?x54)))
 (let (($x67 (= (bvand ?x175 (_ bv4294967292 32)) ?x175)))
 (let (($x182 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x175 (bvsub ?x175 (_ bv4 32))) (bvult ?x175 (bvsub ?x175 (_ bv4 32))))))
 (let (($x334 (and true $x182)))
 (let (($x225 (= (bvand ?x254 (_ bv4294967292 32)) ?x254)))
 (let (($x247 (and $x225 $x334)))
 (let (($x311 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x54 (bvsub ?x54 (_ bv8 32))) (bvult ?x54 (bvsub ?x54 (_ bv8 32))))))
 (let (($x359 (and (and (and true $x311) $x247) $x67)))
 (let (($x331 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x288 (and true $x331)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x57 (and $x20 $x288)))
 (let (($x298 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x254 (bvsub ?x254 (_ bv12 32))) (bvult ?x254 (bvsub ?x254 (_ bv12 32))))))
 (let (($x50 (and (and (and true $x20) $x298) $x57)))
 (let (($x95 (and (and (and (and (and (and $x50 $x359) $x342) $x157) $x223) $x140) $x133)))
 (let (($x264 (= $x95 true)))
 (let (($x357 (= $x50 true)))
 (let (($x248 (and $x359 $x342)))
 (let (($x124 (= $x248 true)))
 (let (($x130 (and $x124 $x357)))
 (let (($x317 (and $x130 $x264)))
 (let (($x354 (and $x317 $x90)))
 (let (($x83 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x113 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x113 (_ bv1 32))))
 (let (($x111 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x160 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x160 (_ bv1 32))))
 (let (($x120 (and $x14 $x258)))
 (let (($x321 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x27 (ite $x321 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x27 (_ bv0 32))))
 (let (($x289 (and $x236 $x120)))
 (let (($x371 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x86 (ite $x371 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x86 (_ bv0 32))))
 (let (($x341 (and $x10 $x289)))
 (let (($x367 (and $x341 $x354)))
 (let ((?x34 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x17 (= ?x34 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x110 (bvuge ?x86 (_ bv1 32))))
 (let (($x155 (=> $x110 $x17)))
 (let (($x306 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x212 (= $x110 $x306)))
 (let (($x255 (= false false)))
 (let (($x267 (=> $x10 $x255)))
 (let (($x108 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x345 (= $x10 $x108)))
 (let (($x30 (and (and (and $x345 $x267) $x212) $x155)))
 (let (($x205 (and $x30 $x367)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x195 (= ?x74 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x165 (bvuge ?x27 (_ bv1 32))))
 (let (($x149 (=> $x165 $x195)))
 (let (($x77 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x320 (= $x165 $x77)))
 (let (($x114 (and (and (= $x236 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x236 $x255)) $x320)))
 (let (($x87 (and $x114 $x149)))
 (let (($x348 (and $x87 $x205)))
 (let (($x207 (= ?x118 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x230 (=> $x258 $x207)))
 (let (($x170 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x262 (= $x258 $x170)))
 (let (($x265 (= ?x113 (_ bv0 32))))
 (let (($x215 (=> $x265 $x255)))
 (let (($x141 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x274 (= $x265 $x141)))
 (let (($x35 (and (and (and $x274 $x215) $x262) $x230)))
 (let (($x338 (and $x35 $x348)))
 (let (($x244 (= ?x31 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x123 (=> $x14 $x244)))
 (let (($x21 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x278 (= $x14 $x21)))
 (let (($x178 (= ?x160 (_ bv0 32))))
 (let (($x51 (=> $x178 $x255)))
 (let (($x105 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x47 (= $x178 $x105)))
 (let (($x253 (and (and (and $x47 $x51) $x278) $x123)))
 (let (($x81 (and $x253 $x338)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x349 (and $x112 $x81)))
 (let (($x221 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x353 (and $x221 $x349)))
 (let (($x242 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x180 (and $x242 $x353)))
 (let (($x228 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x37 (and $x228 $x180)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x144 (and $x8 $x37)))
 (let (($x360 (and $x255 $x144)))
 (let (($x161 (= ?x34 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x337 (and $x161 $x360)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x116 (and $x152 $x337)))
 (let (($x201 (and $x255 $x116)))
 (let (($x249 (= ?x74 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x219 (and $x249 $x201)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x190 (and $x19 $x219)))
 (let (($x296 (and $x255 $x190)))
 (let (($x42 (= ?x118 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x301 (and $x42 $x296)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x143 (and $x204 $x301)))
 (let (($x196 (and $x255 $x143)))
 (let (($x231 (= ?x31 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x189 (and $x231 $x196)))
 (let (($x36 (bvugt ?x175 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x214 (=> (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x216 $x36)))))))
 (let (($x239 (bvugt ?x54 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x135 (=> (bvule ?x54 (bvsub (bvadd ?x54 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x239)))))))
 (let (($x158 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x102 (=> (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x158)))))))
 (let (($x263 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x186 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x263)))))))
 (let (($x269 (and $x186 $x102)))
 (let (($x73 (and $x269 $x135)))
 (let (($x84 (and $x73 $x214)))
 (let (($x220 (and $x84 $x189)))
 (let (($x346 (=> $x220 $x340)))
 (not $x346)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 219 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x29 (bvmul (_ bv4294967295 32) ?x74)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x310 (concat ?x302 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x93 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x64 (bvadd ?x93 (_ bv3 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem ?x64) (concat ?x127 ?x310))))
 (let ((?x217 (bvmul (_ bv4294967295 32) ?x147)))
 (let ((?x332 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x32 (concat ?x332 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x239 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x194 (bvadd ?x239 (_ bv3 32))))
 (let ((?x62 (concat (select input.dst.llvm-mem ?x194) (concat ?x89 ?x32))))
 (let ((?x284 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x323 (concat ?x284 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x82 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x46 (bvadd ?x82 (_ bv3 32))))
 (let ((?x25 (concat (select input.dst.llvm-mem ?x46) (concat ?x295 ?x323))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x61)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x154)))
 (let ((?x251 (bvadd (bvadd (bvadd ?x299 ?x25) ?x62) ?x217)))
 (let (($x307 (= ?x251 ?x29)))
 (let (($x70 (= $x307 true)))
 (let ((?x353 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x219 (concat ?x337 (concat ?x37 ?x353)))))
 (let (($x363 (= ?x190 input.dst.llvm-%m)))
 (let (($x185 (= $x363 true)))
 (let (($x296 (= input.dst.llvm-%m ?x190)))
 (let ((?x205 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x348 (= (_ bv0 32) ?x205)))
 (let ((?x90 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x354 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x367 (and $x104 $x354)))
 (let (($x338 (and $x367 $x348)))
 (let (($x317 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x317 $x338)))
 (let (($x133 (forall ((input.ind-%var3227X (_ BitVec 32)) )(let ((?x285 (bvadd (bvmul input.ind-%var3227X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x238))))
 (let ((?x118 (input.spec-%var-m-0.1.1 input.ind-%var3227X)))
 (let (($x255 (input.spec-%var-m-0.0.1 input.ind-%var3227X)))
 (=> $x255 (= ?x118 ?x66))))))))
 ))
 (let (($x115 (forall ((input.ind-%var3226X (_ BitVec 32)) )(let (($x255 (input.spec-%var-m-0.0.1 input.ind-%var3226X)))
 (= $x255 (and (bvule (_ bv0 32) input.ind-%var3226X) (bvult input.ind-%var3226X (_ bv100 32))))))
 ))
 (let (($x95 (and $x115 $x133)))
 (let (($x356 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x157 $x356)))))))
 (let (($x370 (= (bvand ?x93 (_ bv4294967292 32)) ?x93)))
 (let (($x248 (= (bvand ?x239 (_ bv4294967292 32)) ?x239)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x239 (bvsub ?x239 (_ bv4 32))) (bvult ?x239 (bvsub ?x239 (_ bv4 32))))))
 (let (($x359 (and true $x67)))
 (let (($x182 (= (bvand ?x82 (_ bv4294967292 32)) ?x82)))
 (let (($x335 (and $x182 $x359)))
 (let (($x24 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x93 (bvsub ?x93 (_ bv8 32))) (bvult ?x93 (bvsub ?x93 (_ bv8 32))))))
 (let (($x20 (and (and (and true $x24) $x335) $x248)))
 (let (($x357 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x130 (and true $x357)))
 (let (($x298 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x188 (and $x298 $x130)))
 (let (($x318 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x82 (bvsub ?x82 (_ bv12 32))) (bvult ?x82 (bvsub ?x82 (_ bv12 32))))))
 (let (($x358 (and (and (and true $x298) $x318) $x188)))
 (let (($x364 (and (and (and (and (and (and $x358 $x20) $x370) $x213) $x95) $x81) $x296)))
 (let (($x176 (= $x364 true)))
 (let (($x94 (= $x358 true)))
 (let (($x131 (and $x20 $x370)))
 (let (($x303 (= $x131 true)))
 (let (($x324 (and $x303 $x94)))
 (let (($x126 (and $x324 $x176)))
 (let (($x106 (and $x126 $x185)))
 (let (($x215 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x65 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x65 (_ bv1 32))))
 (let (($x47 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x281 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x281 (_ bv0 32))))
 (let (($x287 (and $x14 $x207)))
 (let (($x153 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x59 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x59 (_ bv0 32))))
 (let (($x311 (and $x165 $x287)))
 (let (($x267 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x16 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x16 (_ bv0 32))))
 (let (($x369 (and $x110 $x311)))
 (let (($x164 (and $x369 $x106)))
 (let ((?x12 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x289 (= ?x12 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x17 (bvuge ?x16 (_ bv1 32))))
 (let (($x341 (=> $x17 $x289)))
 (let (($x155 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x30 (= $x17 $x155)))
 (let (($x36 (= false false)))
 (let (($x304 (=> $x110 $x36)))
 (let (($x212 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x373 (= $x110 $x212)))
 (let (($x275 (and (and (and $x373 $x304) $x30) $x341)))
 (let (($x372 (and $x275 $x164)))
 (let ((?x34 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x86 (= ?x34 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x195 (bvuge ?x59 (_ bv1 32))))
 (let (($x10 (=> $x195 $x86)))
 (let (($x149 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x87 (= $x195 $x149)))
 (let (($x108 (and (and (= $x165 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x165 $x36)) $x87)))
 (let (($x345 (and $x108 $x10)))
 (let (($x250 (and $x345 $x372)))
 (let (($x27 (= ?x74 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x236 (=> $x207 $x27)))
 (let (($x230 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x35 (= $x207 $x230)))
 (let (($x258 (= ?x65 (_ bv0 32))))
 (let (($x257 (=> $x258 $x36)))
 (let (($x262 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x136 (= $x258 $x262)))
 (let (($x13 (and (and (and $x136 $x257) $x35) $x236)))
 (let (($x55 (and $x13 $x250)))
 (let ((?x84 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x113 (= ?x84 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x244 (bvuge ?x281 (_ bv1 32))))
 (let (($x265 (=> $x244 $x113)))
 (let (($x123 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x253 (= $x244 $x123)))
 (let (($x280 (=> $x14 $x36)))
 (let (($x278 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x270 (= $x14 $x278)))
 (let (($x274 (and (and (and $x270 $x280) $x253) $x265)))
 (let (($x352 (and $x274 $x55)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x22 (and $x105 $x352)))
 (let (($x178 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x362 (and $x178 $x22)))
 (let (($x111 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x365 (and $x111 $x362)))
 (let (($x78 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x125 (and $x78 $x365)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x240 (and $x283 $x125)))
 (let (($x237 (and $x36 $x240)))
 (let (($x5 (= ?x12 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x167 (and $x5 $x237)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x173 (and $x8 $x167)))
 (let (($x142 (and $x36 $x173)))
 (let (($x161 (= ?x34 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x347 (and $x161 $x142)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x163 (and $x152 $x347)))
 (let (($x11 (and $x36 $x163)))
 (let (($x249 (= ?x74 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x7 (and $x249 $x11)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x315 (and $x63 $x7)))
 (let (($x41 (and $x36 $x315)))
 (let (($x174 (= ?x84 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x333 (and $x174 $x41)))
 (let (($x52 (bvugt ?x239 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x9 (=> (bvule ?x239 (bvsub (bvadd ?x239 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x200 $x52)))))))
 (let (($x129 (bvugt ?x93 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x222 (=> (bvule ?x93 (bvsub (bvadd ?x93 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x129)))))))
 (let (($x156 (bvugt ?x82 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x53 (=> (bvule ?x82 (bvsub (bvadd ?x82 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x156)))))))
 (let (($x179 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x102 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x179)))))))
 (let (($x269 (and $x102 $x53)))
 (let (($x276 (and $x269 $x222)))
 (let (($x135 (and $x276 $x9)))
 (let (($x98 (and $x135 $x333)))
 (let (($x277 (=> $x98 $x70)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x29 (bvmul (_ bv4294967295 32) ?x74)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x310 (concat ?x302 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x93 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x64 (bvadd ?x93 (_ bv3 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem ?x64) (concat ?x127 ?x310))))
 (let ((?x217 (bvmul (_ bv4294967295 32) ?x147)))
 (let ((?x332 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x32 (concat ?x332 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x239 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x194 (bvadd ?x239 (_ bv3 32))))
 (let ((?x62 (concat (select input.dst.llvm-mem ?x194) (concat ?x89 ?x32))))
 (let ((?x284 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x323 (concat ?x284 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x82 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x46 (bvadd ?x82 (_ bv3 32))))
 (let ((?x25 (concat (select input.dst.llvm-mem ?x46) (concat ?x295 ?x323))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x61)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x154)))
 (let ((?x251 (bvadd (bvadd (bvadd ?x299 ?x25) ?x62) ?x217)))
 (let (($x307 (= ?x251 ?x29)))
 (let (($x70 (= $x307 true)))
 (let ((?x353 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x219 (concat ?x337 (concat ?x37 ?x353)))))
 (let (($x363 (= ?x190 input.dst.llvm-%m)))
 (let (($x185 (= $x363 true)))
 (let (($x296 (= input.dst.llvm-%m ?x190)))
 (let ((?x205 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x348 (= (_ bv0 32) ?x205)))
 (let ((?x90 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x354 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x367 (and $x104 $x354)))
 (let (($x338 (and $x367 $x348)))
 (let (($x317 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x317 $x338)))
 (let (($x133 (forall ((input.ind-%var3227X (_ BitVec 32)) )(let ((?x285 (bvadd (bvmul input.ind-%var3227X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x238))))
 (let ((?x118 (input.spec-%var-m-0.1.1 input.ind-%var3227X)))
 (let (($x255 (input.spec-%var-m-0.0.1 input.ind-%var3227X)))
 (=> $x255 (= ?x118 ?x66))))))))
 ))
 (let (($x115 (forall ((input.ind-%var3226X (_ BitVec 32)) )(let (($x255 (input.spec-%var-m-0.0.1 input.ind-%var3226X)))
 (= $x255 (and (bvule (_ bv0 32) input.ind-%var3226X) (bvult input.ind-%var3226X (_ bv100 32))))))
 ))
 (let (($x95 (and $x115 $x133)))
 (let (($x356 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x157 $x356)))))))
 (let (($x370 (= (bvand ?x93 (_ bv4294967292 32)) ?x93)))
 (let (($x248 (= (bvand ?x239 (_ bv4294967292 32)) ?x239)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x239 (bvsub ?x239 (_ bv4 32))) (bvult ?x239 (bvsub ?x239 (_ bv4 32))))))
 (let (($x359 (and true $x67)))
 (let (($x182 (= (bvand ?x82 (_ bv4294967292 32)) ?x82)))
 (let (($x335 (and $x182 $x359)))
 (let (($x24 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x93 (bvsub ?x93 (_ bv8 32))) (bvult ?x93 (bvsub ?x93 (_ bv8 32))))))
 (let (($x20 (and (and (and true $x24) $x335) $x248)))
 (let (($x357 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x130 (and true $x357)))
 (let (($x298 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x188 (and $x298 $x130)))
 (let (($x318 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x82 (bvsub ?x82 (_ bv12 32))) (bvult ?x82 (bvsub ?x82 (_ bv12 32))))))
 (let (($x358 (and (and (and true $x298) $x318) $x188)))
 (let (($x364 (and (and (and (and (and (and $x358 $x20) $x370) $x213) $x95) $x81) $x296)))
 (let (($x176 (= $x364 true)))
 (let (($x94 (= $x358 true)))
 (let (($x131 (and $x20 $x370)))
 (let (($x303 (= $x131 true)))
 (let (($x324 (and $x303 $x94)))
 (let (($x126 (and $x324 $x176)))
 (let (($x106 (and $x126 $x185)))
 (let (($x215 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x65 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x65 (_ bv1 32))))
 (let (($x47 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x281 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x281 (_ bv0 32))))
 (let (($x287 (and $x14 $x207)))
 (let (($x153 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x59 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x59 (_ bv0 32))))
 (let (($x311 (and $x165 $x287)))
 (let (($x267 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x16 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x16 (_ bv0 32))))
 (let (($x369 (and $x110 $x311)))
 (let (($x164 (and $x369 $x106)))
 (let ((?x12 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x289 (= ?x12 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x17 (bvuge ?x16 (_ bv1 32))))
 (let (($x341 (=> $x17 $x289)))
 (let (($x155 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x30 (= $x17 $x155)))
 (let (($x36 (= false false)))
 (let (($x304 (=> $x110 $x36)))
 (let (($x212 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x373 (= $x110 $x212)))
 (let (($x275 (and (and (and $x373 $x304) $x30) $x341)))
 (let (($x372 (and $x275 $x164)))
 (let ((?x34 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x86 (= ?x34 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x195 (bvuge ?x59 (_ bv1 32))))
 (let (($x10 (=> $x195 $x86)))
 (let (($x149 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x87 (= $x195 $x149)))
 (let (($x108 (and (and (= $x165 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x165 $x36)) $x87)))
 (let (($x345 (and $x108 $x10)))
 (let (($x250 (and $x345 $x372)))
 (let (($x27 (= ?x74 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x236 (=> $x207 $x27)))
 (let (($x230 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x35 (= $x207 $x230)))
 (let (($x258 (= ?x65 (_ bv0 32))))
 (let (($x257 (=> $x258 $x36)))
 (let (($x262 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x136 (= $x258 $x262)))
 (let (($x13 (and (and (and $x136 $x257) $x35) $x236)))
 (let (($x55 (and $x13 $x250)))
 (let ((?x84 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x113 (= ?x84 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x244 (bvuge ?x281 (_ bv1 32))))
 (let (($x265 (=> $x244 $x113)))
 (let (($x123 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x253 (= $x244 $x123)))
 (let (($x280 (=> $x14 $x36)))
 (let (($x278 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x270 (= $x14 $x278)))
 (let (($x274 (and (and (and $x270 $x280) $x253) $x265)))
 (let (($x352 (and $x274 $x55)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x22 (and $x105 $x352)))
 (let (($x178 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x362 (and $x178 $x22)))
 (let (($x111 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x365 (and $x111 $x362)))
 (let (($x78 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x125 (and $x78 $x365)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x240 (and $x283 $x125)))
 (let (($x237 (and $x36 $x240)))
 (let (($x5 (= ?x12 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x167 (and $x5 $x237)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x173 (and $x8 $x167)))
 (let (($x142 (and $x36 $x173)))
 (let (($x161 (= ?x34 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x347 (and $x161 $x142)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x163 (and $x152 $x347)))
 (let (($x11 (and $x36 $x163)))
 (let (($x249 (= ?x74 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x7 (and $x249 $x11)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x315 (and $x63 $x7)))
 (let (($x41 (and $x36 $x315)))
 (let (($x174 (= ?x84 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x333 (and $x174 $x41)))
 (let (($x52 (bvugt ?x239 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x9 (=> (bvule ?x239 (bvsub (bvadd ?x239 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x200 $x52)))))))
 (let (($x129 (bvugt ?x93 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x222 (=> (bvule ?x93 (bvsub (bvadd ?x93 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x129)))))))
 (let (($x156 (bvugt ?x82 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x53 (=> (bvule ?x82 (bvsub (bvadd ?x82 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x156)))))))
 (let (($x179 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x102 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x179)))))))
 (let (($x269 (and $x102 $x53)))
 (let (($x276 (and $x269 $x222)))
 (let (($x135 (and $x276 $x9)))
 (let (($x98 (and $x135 $x333)))
 (let (($x277 (=> $x98 $x70)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 218 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x88 (concat ?x72 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x128 (bvadd ?x6 (_ bv3 32))))
 (let ((?x223 (concat (select input.dst.llvm-mem ?x128) (concat ?x202 ?x88))))
 (let ((?x325 (bvmul (_ bv4294967295 32) ?x223)))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x51 (concat ?x349 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x129 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x271 (bvadd ?x129 (_ bv3 32))))
 (let ((?x122 (concat (select input.dst.llvm-mem ?x271) (concat ?x322 ?x51))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x251 (concat ?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x266 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x226 (bvadd ?x266 (_ bv3 32))))
 (let ((?x243 (concat (select input.dst.llvm-mem ?x226) (concat ?x307 ?x251))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x199)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x302)))
 (let ((?x23 (bvadd (bvadd (bvadd ?x310 ?x243) ?x122) ?x325)))
 (let ((?x135 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x326 (= ?x135 ?x23)))
 (let (($x193 (= $x326 true)))
 (let ((?x362 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x347 (concat ?x167 (concat ?x125 ?x362)))))
 (let (($x40 (= ?x163 input.dst.llvm-%m)))
 (let (($x139 (= $x40 true)))
 (let (($x11 (= input.dst.llvm-%m ?x163)))
 (let ((?x372 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x250 (= (_ bv0 32) ?x372)))
 (let ((?x185 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x185)))
 (let (($x363 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x363 $x106)))
 (let (($x55 (and $x164 $x250)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (and $x126 $x55)))
 (let (($x296 (forall ((input.ind-%var3271X (_ BitVec 32)) )(let ((?x338 (bvadd (bvmul input.ind-%var3271X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem ?x338))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv2 32))) ?x219))))
 (let ((?x74 (input.spec-%var-m-0.1.1 input.ind-%var3271X)))
 (let (($x36 (input.spec-%var-m-0.0.1 input.ind-%var3271X)))
 (=> $x36 (= ?x74 ?x144))))))))
 ))
 (let (($x313 (forall ((input.ind-%var3270X (_ BitVec 32)) )(let (($x36 (input.spec-%var-m-0.0.1 input.ind-%var3270X)))
 (= $x36 (and (bvule (_ bv0 32) input.ind-%var3270X) (bvult input.ind-%var3270X (_ bv100 32))))))
 ))
 (let (($x364 (and $x313 $x296)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x312 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x213 $x196)))))))
 (let (($x103 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x131 (= (bvand ?x129 (_ bv4294967292 32)) ?x129)))
 (let (($x248 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x129 (bvsub ?x129 (_ bv4 32))) (bvult ?x129 (bvsub ?x129 (_ bv4 32))))))
 (let (($x20 (and true $x248)))
 (let (($x67 (= (bvand ?x266 (_ bv4294967292 32)) ?x266)))
 (let (($x351 (and $x67 $x20)))
 (let (($x334 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x298 (and (and (and true $x334) $x351) $x131)))
 (let (($x94 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x324 (and true $x94)))
 (let (($x318 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x301 (and $x318 $x324)))
 (let (($x50 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x266 (bvsub ?x266 (_ bv12 32))) (bvult ?x266 (bvsub ?x266 (_ bv12 32))))))
 (let (($x308 (and (and (and true $x318) $x50) $x301)))
 (let (($x159 (and (and (and (and (and (and $x308 $x298) $x103) $x312) $x364) $x352) $x11)))
 (let (($x297 (= $x159 true)))
 (let (($x293 (= $x308 true)))
 (let (($x151 (and $x298 $x103)))
 (let (($x316 (= $x151 true)))
 (let (($x350 (and $x316 $x293)))
 (let (($x58 (and $x350 $x297)))
 (let (($x92 (and $x58 $x139)))
 (let (($x257 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x268 (ite $x257 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x268 (_ bv0 32))))
 (let (($x270 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x241 (ite $x270 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x241 (_ bv1 32))))
 (let (($x355 (and $x113 $x207)))
 (let (($x343 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x290 (ite $x343 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x290 (_ bv0 32))))
 (let (($x24 (and $x195 $x355)))
 (let (($x304 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x162 (ite $x304 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x162 (_ bv0 32))))
 (let (($x124 (and $x17 $x24)))
 (let (($x61 (and $x124 $x92)))
 (let ((?x221 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x311 (= ?x221 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x289 (bvuge ?x162 (_ bv1 32))))
 (let (($x369 (=> $x289 $x311)))
 (let (($x341 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x275 (= $x289 $x341)))
 (let (($x52 (= false false)))
 (let (($x120 (=> $x17 $x52)))
 (let (($x30 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x134 (= $x17 $x30)))
 (let (($x225 (and (and (and $x134 $x120) $x275) $x369)))
 (let (($x154 (and $x225 $x61)))
 (let ((?x12 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x16 (= ?x12 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x86 (bvuge ?x290 (_ bv1 32))))
 (let (($x110 (=> $x86 $x16)))
 (let (($x10 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x345 (= $x86 $x10)))
 (let (($x212 (and (and (= $x195 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x195 $x52)) $x345)))
 (let (($x373 (and $x212 $x110)))
 (let (($x299 (and $x373 $x154)))
 (let ((?x34 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x59 (= ?x34 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x27 (bvuge ?x268 (_ bv1 32))))
 (let (($x165 (=> $x27 $x59)))
 (let (($x236 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x13 (= $x27 $x236)))
 (let (($x320 (and (and (= $x207 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x207 $x52)) $x13)))
 (let (($x114 (and $x320 $x165)))
 (let (($x346 (and $x114 $x299)))
 (let (($x65 (= ?x135 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x258 (=> $x113 $x65)))
 (let (($x265 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x274 (= $x113 $x265)))
 (let (($x244 (= ?x241 (_ bv0 32))))
 (let (($x83 (=> $x244 $x52)))
 (let (($x253 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x141 (= $x244 $x253)))
 (let (($x136 (and (and (and $x141 $x83) $x274) $x258)))
 (let (($x366 (and $x136 $x346)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x295 (and $x278 $x366)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x49 (and $x14 $x295)))
 (let (($x47 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x284 (and $x47 $x49)))
 (let (($x44 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x45 (and $x44 $x284)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x323 (and $x160 $x45)))
 (let (($x340 (and $x52 $x323)))
 (let (($x112 (= ?x221 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x25 (and $x112 $x340)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x319 (and $x283 $x25)))
 (let (($x91 (and $x52 $x319)))
 (let (($x5 (= ?x12 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x279 (and $x5 $x91)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x89 (and $x8 $x279)))
 (let (($x197 (and $x52 $x89)))
 (let (($x161 (= ?x34 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x332 (and $x161 $x197)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x209 (and $x216 $x332)))
 (let (($x32 (and $x52 $x209)))
 (let (($x194 (= ?x135 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x145 (and $x194 $x32)))
 (let (($x75 (bvugt ?x129 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x271)))
 (let (($x234 (=> (bvule ?x129 (bvsub (bvadd ?x129 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x75)))))))
 (let (($x76 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x18 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x76)))))))
 (let (($x64 (bvugt ?x266 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x179 (=> (bvule ?x266 (bvsub (bvadd ?x266 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x64)))))))
 (let (($x119 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x53 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x119)))))))
 (let (($x269 (and $x53 $x179)))
 (let (($x211 (and $x269 $x18)))
 (let (($x222 (and $x211 $x234)))
 (let (($x62 (and $x222 $x145)))
 (let (($x146 (=> $x62 $x193)))
 (not $x146)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x88 (concat ?x72 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x128 (bvadd ?x6 (_ bv3 32))))
 (let ((?x223 (concat (select input.dst.llvm-mem ?x128) (concat ?x202 ?x88))))
 (let ((?x325 (bvmul (_ bv4294967295 32) ?x223)))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x51 (concat ?x349 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x129 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x271 (bvadd ?x129 (_ bv3 32))))
 (let ((?x122 (concat (select input.dst.llvm-mem ?x271) (concat ?x322 ?x51))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x251 (concat ?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x266 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x226 (bvadd ?x266 (_ bv3 32))))
 (let ((?x243 (concat (select input.dst.llvm-mem ?x226) (concat ?x307 ?x251))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x199)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x302)))
 (let ((?x23 (bvadd (bvadd (bvadd ?x310 ?x243) ?x122) ?x325)))
 (let ((?x135 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x326 (= ?x135 ?x23)))
 (let (($x193 (= $x326 true)))
 (let ((?x362 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x347 (concat ?x167 (concat ?x125 ?x362)))))
 (let (($x40 (= ?x163 input.dst.llvm-%m)))
 (let (($x139 (= $x40 true)))
 (let (($x11 (= input.dst.llvm-%m ?x163)))
 (let ((?x372 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x250 (= (_ bv0 32) ?x372)))
 (let ((?x185 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x185)))
 (let (($x363 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x363 $x106)))
 (let (($x55 (and $x164 $x250)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (and $x126 $x55)))
 (let (($x296 (forall ((input.ind-%var3271X (_ BitVec 32)) )(let ((?x338 (bvadd (bvmul input.ind-%var3271X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem ?x338))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv2 32))) ?x219))))
 (let ((?x74 (input.spec-%var-m-0.1.1 input.ind-%var3271X)))
 (let (($x36 (input.spec-%var-m-0.0.1 input.ind-%var3271X)))
 (=> $x36 (= ?x74 ?x144))))))))
 ))
 (let (($x313 (forall ((input.ind-%var3270X (_ BitVec 32)) )(let (($x36 (input.spec-%var-m-0.0.1 input.ind-%var3270X)))
 (= $x36 (and (bvule (_ bv0 32) input.ind-%var3270X) (bvult input.ind-%var3270X (_ bv100 32))))))
 ))
 (let (($x364 (and $x313 $x296)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x312 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x213 $x196)))))))
 (let (($x103 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x131 (= (bvand ?x129 (_ bv4294967292 32)) ?x129)))
 (let (($x248 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x129 (bvsub ?x129 (_ bv4 32))) (bvult ?x129 (bvsub ?x129 (_ bv4 32))))))
 (let (($x20 (and true $x248)))
 (let (($x67 (= (bvand ?x266 (_ bv4294967292 32)) ?x266)))
 (let (($x351 (and $x67 $x20)))
 (let (($x334 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x298 (and (and (and true $x334) $x351) $x131)))
 (let (($x94 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x324 (and true $x94)))
 (let (($x318 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x301 (and $x318 $x324)))
 (let (($x50 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x266 (bvsub ?x266 (_ bv12 32))) (bvult ?x266 (bvsub ?x266 (_ bv12 32))))))
 (let (($x308 (and (and (and true $x318) $x50) $x301)))
 (let (($x159 (and (and (and (and (and (and $x308 $x298) $x103) $x312) $x364) $x352) $x11)))
 (let (($x297 (= $x159 true)))
 (let (($x293 (= $x308 true)))
 (let (($x151 (and $x298 $x103)))
 (let (($x316 (= $x151 true)))
 (let (($x350 (and $x316 $x293)))
 (let (($x58 (and $x350 $x297)))
 (let (($x92 (and $x58 $x139)))
 (let (($x257 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x268 (ite $x257 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x268 (_ bv0 32))))
 (let (($x270 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x241 (ite $x270 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x241 (_ bv1 32))))
 (let (($x355 (and $x113 $x207)))
 (let (($x343 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x290 (ite $x343 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x290 (_ bv0 32))))
 (let (($x24 (and $x195 $x355)))
 (let (($x304 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x162 (ite $x304 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x162 (_ bv0 32))))
 (let (($x124 (and $x17 $x24)))
 (let (($x61 (and $x124 $x92)))
 (let ((?x221 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x311 (= ?x221 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x289 (bvuge ?x162 (_ bv1 32))))
 (let (($x369 (=> $x289 $x311)))
 (let (($x341 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x275 (= $x289 $x341)))
 (let (($x52 (= false false)))
 (let (($x120 (=> $x17 $x52)))
 (let (($x30 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x134 (= $x17 $x30)))
 (let (($x225 (and (and (and $x134 $x120) $x275) $x369)))
 (let (($x154 (and $x225 $x61)))
 (let ((?x12 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x16 (= ?x12 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x86 (bvuge ?x290 (_ bv1 32))))
 (let (($x110 (=> $x86 $x16)))
 (let (($x10 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x345 (= $x86 $x10)))
 (let (($x212 (and (and (= $x195 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x195 $x52)) $x345)))
 (let (($x373 (and $x212 $x110)))
 (let (($x299 (and $x373 $x154)))
 (let ((?x34 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x59 (= ?x34 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x27 (bvuge ?x268 (_ bv1 32))))
 (let (($x165 (=> $x27 $x59)))
 (let (($x236 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x13 (= $x27 $x236)))
 (let (($x320 (and (and (= $x207 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x207 $x52)) $x13)))
 (let (($x114 (and $x320 $x165)))
 (let (($x346 (and $x114 $x299)))
 (let (($x65 (= ?x135 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x258 (=> $x113 $x65)))
 (let (($x265 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x274 (= $x113 $x265)))
 (let (($x244 (= ?x241 (_ bv0 32))))
 (let (($x83 (=> $x244 $x52)))
 (let (($x253 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x141 (= $x244 $x253)))
 (let (($x136 (and (and (and $x141 $x83) $x274) $x258)))
 (let (($x366 (and $x136 $x346)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x295 (and $x278 $x366)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x49 (and $x14 $x295)))
 (let (($x47 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x284 (and $x47 $x49)))
 (let (($x44 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x45 (and $x44 $x284)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x323 (and $x160 $x45)))
 (let (($x340 (and $x52 $x323)))
 (let (($x112 (= ?x221 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x25 (and $x112 $x340)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x319 (and $x283 $x25)))
 (let (($x91 (and $x52 $x319)))
 (let (($x5 (= ?x12 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x279 (and $x5 $x91)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x89 (and $x8 $x279)))
 (let (($x197 (and $x52 $x89)))
 (let (($x161 (= ?x34 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x332 (and $x161 $x197)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x209 (and $x216 $x332)))
 (let (($x32 (and $x52 $x209)))
 (let (($x194 (= ?x135 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x145 (and $x194 $x32)))
 (let (($x75 (bvugt ?x129 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x271)))
 (let (($x234 (=> (bvule ?x129 (bvsub (bvadd ?x129 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x75)))))))
 (let (($x76 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x18 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x76)))))))
 (let (($x64 (bvugt ?x266 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x179 (=> (bvule ?x266 (bvsub (bvadd ?x266 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x64)))))))
 (let (($x119 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x53 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x119)))))))
 (let (($x269 (and $x53 $x179)))
 (let (($x211 (and $x269 $x18)))
 (let (($x222 (and $x211 $x234)))
 (let (($x62 (and $x222 $x145)))
 (let (($x146 (=> $x62 $x193)))
 (not $x146)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 215 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x264 (concat ?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x249 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x245 (bvadd ?x249 (_ bv3 32))))
 (let ((?x317 (concat (select input.dst.llvm-mem ?x245) (concat ?x133 ?x264))))
 (let ((?x354 (bvmul (_ bv4294967295 32) ?x317)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x231 (concat ?x280 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x76 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x175 (bvadd ?x76 (_ bv3 32))))
 (let ((?x224 (concat (select input.dst.llvm-mem ?x175) (concat ?x356 ?x231))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x326 (concat ?x23 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x233 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x8 (bvadd ?x233 (_ bv3 32))))
 (let ((?x28 (concat (select input.dst.llvm-mem ?x8) (concat ?x146 ?x326))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x202)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x300)))
 (let ((?x26 (bvadd (bvadd (bvadd ?x38 ?x28) ?x224) ?x354)))
 (let (($x367 (= (_ bv0 32) ?x26)))
 (let (($x292 (= $x367 true)))
 (let ((?x284 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x89 (concat ?x319 (concat ?x323 ?x284)))))
 (let (($x171 (= ?x197 input.dst.llvm-%m)))
 (let (($x56 (= $x171 true)))
 (let (($x332 (= input.dst.llvm-%m ?x197)))
 (let ((?x299 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x346 (= (_ bv0 32) ?x299)))
 (let ((?x92 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x139 $x61)))
 (let (($x366 (and $x154 $x346)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x40 $x366)))
 (let (($x159 (forall ((input.ind-%var3315X (_ BitVec 32)) )(let ((?x352 (bvadd (bvmul input.ind-%var3315X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x237))))
 (let ((?x169 (input.spec-%var-m-0.1.1 input.ind-%var3315X)))
 (let (($x83 (input.spec-%var-m-0.0.1 input.ind-%var3315X)))
 (=> $x83 (= ?x169 ?x173))))))))
 ))
 (let (($x220 (forall ((input.ind-%var3314X (_ BitVec 32)) )(let (($x83 (input.spec-%var-m-0.0.1 input.ind-%var3314X)))
 (= $x83 (and (bvule (_ bv0 32) input.ind-%var3314X) (bvult input.ind-%var3314X (_ bv100 32))))))
 ))
 (let (($x297 (and $x220 $x159)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x329 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x19)))))))
 (let (($x60 (= (bvand ?x249 (_ bv4294967292 32)) ?x249)))
 (let (($x316 (= (bvand ?x76 (_ bv4294967292 32)) ?x76)))
 (let (($x298 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x76 (bvsub ?x76 (_ bv4 32))) (bvult ?x76 (bvsub ?x76 (_ bv4 32))))))
 (let (($x166 (and true $x298)))
 (let (($x20 (= (bvand ?x233 (_ bv4294967292 32)) ?x233)))
 (let (($x103 (and $x20 $x166)))
 (let (($x309 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x249 (bvsub ?x249 (_ bv8 32))) (bvult ?x249 (bvsub ?x249 (_ bv8 32))))))
 (let (($x143 (and (and (and true $x309) $x103) $x316)))
 (let (($x350 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x7 (and true $x350)))
 (let (($x172 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x315 (and $x172 $x7)))
 (let (($x94 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x233 (bvsub ?x233 (_ bv12 32))) (bvult ?x233 (bvsub ?x233 (_ bv12 32))))))
 (let (($x117 (and (and (and true $x172) $x94) $x315)))
 (let (($x127 (and (and (and (and (and (and $x117 $x143) $x60) $x329) $x297) $x295) $x332)))
 (let (($x206 (= $x127 true)))
 (let (($x15 (= $x117 true)))
 (let (($x331 (and $x143 $x60)))
 (let (($x57 (= $x331 true)))
 (let (($x213 (and $x57 $x15)))
 (let (($x282 (and $x213 $x206)))
 (let (($x199 (and $x282 $x56)))
 (let (($x77 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x27 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x27 (_ bv0 32))))
 (let (($x52 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x113 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x113 (_ bv0 32))))
 (let (($x334 (and $x265 $x236)))
 (let (($x306 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x86 (ite $x306 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x86 (_ bv0 32))))
 (let (($x303 (and $x10 $x334)))
 (let (($x107 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x289 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (= ?x289 (_ bv0 32))))
 (let (($x210 (and $x341 $x303)))
 (let (($x302 (and $x210 $x199)))
 (let ((?x44 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x124 (= ?x44 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x369 (bvuge ?x289 (_ bv1 32))))
 (let (($x314 (=> $x369 $x124)))
 (let (($x225 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x355 (= $x369 $x225)))
 (let (($x75 (= false false)))
 (let (($x311 (=> $x341 $x75)))
 (let (($x39 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x287 (= $x341 $x39)))
 (let (($x247 (and (and (and $x287 $x311) $x355) $x314)))
 (let (($x310 (and $x247 $x302)))
 (let ((?x78 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x17 (= ?x78 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x110 (bvuge ?x86 (_ bv1 32))))
 (let (($x155 (=> $x110 $x17)))
 (let (($x373 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x304 (= $x110 $x373)))
 (let (($x134 (and (and (= $x10 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x10 $x75)) $x304)))
 (let (($x120 (and $x134 $x155)))
 (let (($x277 (and $x120 $x310)))
 (let ((?x228 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x195 (= ?x228 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x165 (bvuge ?x27 (_ bv1 32))))
 (let (($x149 (=> $x165 $x195)))
 (let (($x114 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x343 (= $x165 $x114)))
 (let (($x108 (and (and (= $x236 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x236 $x75)) $x343)))
 (let (($x371 (and $x108 $x149)))
 (let (($x29 (and $x371 $x277)))
 (let ((?x222 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x207 (= ?x222 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x258 (bvuge ?x113 (_ bv1 32))))
 (let (($x230 (=> $x258 $x207)))
 (let (($x136 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x257 (= $x258 $x136)))
 (let (($x65 (=> $x265 $x75)))
 (let (($x262 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x215 (= $x265 $x262)))
 (let (($x321 (and (and (and $x215 $x65) $x257) $x230)))
 (let (($x307 (and $x321 $x29)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x147 (and $x141 $x307)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x217 (and $x123 $x147)))
 (let (($x241 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x339 (and $x241 $x217)))
 (let (($x278 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x251 (and $x278 $x339)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x70 (and $x14 $x251)))
 (let (($x243 (and $x75 $x70)))
 (let (($x47 (= ?x44 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x99 (and $x47 $x243)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x291 (and $x178 $x99)))
 (let (($x235 (and $x75 $x291)))
 (let (($x111 (= ?x78 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x322 (and $x111 $x235)))
 (let (($x221 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x344 (and $x221 $x322)))
 (let (($x349 (and $x75 $x344)))
 (let (($x242 (= ?x228 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x227 (and $x242 $x349)))
 (let (($x200 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x51 (and $x200 $x227)))
 (let (($x361 (and $x75 $x51)))
 (let (($x271 (= ?x222 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x122 (and $x271 $x361)))
 (let (($x73 (bvugt ?x76 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x216 (=> (bvule ?x76 (bvsub (bvadd ?x76 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x73)))))))
 (let (($x68 (bvugt ?x249 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x100 (=> (bvule ?x249 (bvsub (bvadd ?x249 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x68)))))))
 (let (($x128 (bvugt ?x233 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x246 (=> (bvule ?x233 (bvsub (bvadd ?x233 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x128)))))))
 (let (($x204 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x179 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x204)))))))
 (let (($x269 (and $x179 $x246)))
 (let (($x82 (and $x269 $x100)))
 (let (($x18 (and $x82 $x216)))
 (let (($x33 (and $x18 $x122)))
 (let (($x205 (=> $x33 $x292)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x264 (concat ?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x249 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x245 (bvadd ?x249 (_ bv3 32))))
 (let ((?x317 (concat (select input.dst.llvm-mem ?x245) (concat ?x133 ?x264))))
 (let ((?x354 (bvmul (_ bv4294967295 32) ?x317)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x231 (concat ?x280 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x76 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x175 (bvadd ?x76 (_ bv3 32))))
 (let ((?x224 (concat (select input.dst.llvm-mem ?x175) (concat ?x356 ?x231))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x326 (concat ?x23 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x233 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x8 (bvadd ?x233 (_ bv3 32))))
 (let ((?x28 (concat (select input.dst.llvm-mem ?x8) (concat ?x146 ?x326))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x202)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x300)))
 (let ((?x26 (bvadd (bvadd (bvadd ?x38 ?x28) ?x224) ?x354)))
 (let (($x367 (= (_ bv0 32) ?x26)))
 (let (($x292 (= $x367 true)))
 (let ((?x284 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x89 (concat ?x319 (concat ?x323 ?x284)))))
 (let (($x171 (= ?x197 input.dst.llvm-%m)))
 (let (($x56 (= $x171 true)))
 (let (($x332 (= input.dst.llvm-%m ?x197)))
 (let ((?x299 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x346 (= (_ bv0 32) ?x299)))
 (let ((?x92 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x139 $x61)))
 (let (($x366 (and $x154 $x346)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x40 $x366)))
 (let (($x159 (forall ((input.ind-%var3315X (_ BitVec 32)) )(let ((?x352 (bvadd (bvmul input.ind-%var3315X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x237))))
 (let ((?x169 (input.spec-%var-m-0.1.1 input.ind-%var3315X)))
 (let (($x83 (input.spec-%var-m-0.0.1 input.ind-%var3315X)))
 (=> $x83 (= ?x169 ?x173))))))))
 ))
 (let (($x220 (forall ((input.ind-%var3314X (_ BitVec 32)) )(let (($x83 (input.spec-%var-m-0.0.1 input.ind-%var3314X)))
 (= $x83 (and (bvule (_ bv0 32) input.ind-%var3314X) (bvult input.ind-%var3314X (_ bv100 32))))))
 ))
 (let (($x297 (and $x220 $x159)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x329 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x19)))))))
 (let (($x60 (= (bvand ?x249 (_ bv4294967292 32)) ?x249)))
 (let (($x316 (= (bvand ?x76 (_ bv4294967292 32)) ?x76)))
 (let (($x298 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x76 (bvsub ?x76 (_ bv4 32))) (bvult ?x76 (bvsub ?x76 (_ bv4 32))))))
 (let (($x166 (and true $x298)))
 (let (($x20 (= (bvand ?x233 (_ bv4294967292 32)) ?x233)))
 (let (($x103 (and $x20 $x166)))
 (let (($x309 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x249 (bvsub ?x249 (_ bv8 32))) (bvult ?x249 (bvsub ?x249 (_ bv8 32))))))
 (let (($x143 (and (and (and true $x309) $x103) $x316)))
 (let (($x350 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x7 (and true $x350)))
 (let (($x172 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x315 (and $x172 $x7)))
 (let (($x94 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x233 (bvsub ?x233 (_ bv12 32))) (bvult ?x233 (bvsub ?x233 (_ bv12 32))))))
 (let (($x117 (and (and (and true $x172) $x94) $x315)))
 (let (($x127 (and (and (and (and (and (and $x117 $x143) $x60) $x329) $x297) $x295) $x332)))
 (let (($x206 (= $x127 true)))
 (let (($x15 (= $x117 true)))
 (let (($x331 (and $x143 $x60)))
 (let (($x57 (= $x331 true)))
 (let (($x213 (and $x57 $x15)))
 (let (($x282 (and $x213 $x206)))
 (let (($x199 (and $x282 $x56)))
 (let (($x77 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x27 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x27 (_ bv0 32))))
 (let (($x52 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x113 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x113 (_ bv0 32))))
 (let (($x334 (and $x265 $x236)))
 (let (($x306 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x86 (ite $x306 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x86 (_ bv0 32))))
 (let (($x303 (and $x10 $x334)))
 (let (($x107 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x289 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (= ?x289 (_ bv0 32))))
 (let (($x210 (and $x341 $x303)))
 (let (($x302 (and $x210 $x199)))
 (let ((?x44 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x124 (= ?x44 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x369 (bvuge ?x289 (_ bv1 32))))
 (let (($x314 (=> $x369 $x124)))
 (let (($x225 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x355 (= $x369 $x225)))
 (let (($x75 (= false false)))
 (let (($x311 (=> $x341 $x75)))
 (let (($x39 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x287 (= $x341 $x39)))
 (let (($x247 (and (and (and $x287 $x311) $x355) $x314)))
 (let (($x310 (and $x247 $x302)))
 (let ((?x78 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x17 (= ?x78 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x110 (bvuge ?x86 (_ bv1 32))))
 (let (($x155 (=> $x110 $x17)))
 (let (($x373 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x304 (= $x110 $x373)))
 (let (($x134 (and (and (= $x10 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x10 $x75)) $x304)))
 (let (($x120 (and $x134 $x155)))
 (let (($x277 (and $x120 $x310)))
 (let ((?x228 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x195 (= ?x228 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x165 (bvuge ?x27 (_ bv1 32))))
 (let (($x149 (=> $x165 $x195)))
 (let (($x114 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x343 (= $x165 $x114)))
 (let (($x108 (and (and (= $x236 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x236 $x75)) $x343)))
 (let (($x371 (and $x108 $x149)))
 (let (($x29 (and $x371 $x277)))
 (let ((?x222 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x207 (= ?x222 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x258 (bvuge ?x113 (_ bv1 32))))
 (let (($x230 (=> $x258 $x207)))
 (let (($x136 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x257 (= $x258 $x136)))
 (let (($x65 (=> $x265 $x75)))
 (let (($x262 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x215 (= $x265 $x262)))
 (let (($x321 (and (and (and $x215 $x65) $x257) $x230)))
 (let (($x307 (and $x321 $x29)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x147 (and $x141 $x307)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x217 (and $x123 $x147)))
 (let (($x241 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x339 (and $x241 $x217)))
 (let (($x278 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x251 (and $x278 $x339)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x70 (and $x14 $x251)))
 (let (($x243 (and $x75 $x70)))
 (let (($x47 (= ?x44 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x99 (and $x47 $x243)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x291 (and $x178 $x99)))
 (let (($x235 (and $x75 $x291)))
 (let (($x111 (= ?x78 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x322 (and $x111 $x235)))
 (let (($x221 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x344 (and $x221 $x322)))
 (let (($x349 (and $x75 $x344)))
 (let (($x242 (= ?x228 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x227 (and $x242 $x349)))
 (let (($x200 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x51 (and $x200 $x227)))
 (let (($x361 (and $x75 $x51)))
 (let (($x271 (= ?x222 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x122 (and $x271 $x361)))
 (let (($x73 (bvugt ?x76 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x216 (=> (bvule ?x76 (bvsub (bvadd ?x76 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x73)))))))
 (let (($x68 (bvugt ?x249 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x100 (=> (bvule ?x249 (bvsub (bvadd ?x249 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x68)))))))
 (let (($x128 (bvugt ?x233 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x246 (=> (bvule ?x233 (bvsub (bvadd ?x233 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x128)))))))
 (let (($x204 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x179 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x204)))))))
 (let (($x269 (and $x179 $x246)))
 (let (($x82 (and $x269 $x100)))
 (let (($x18 (and $x82 $x216)))
 (let (($x33 (and $x18 $x122)))
 (let (($x205 (=> $x33 $x292)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 215 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x311 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x368 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x368 (_ bv1 32))))
 (let (($x16 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x30 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x30 (_ bv1 32))))
 (let (($x59 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x87 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x87 (_ bv1 32))))
 (let (($x215 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x35 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x35 (_ bv0 32))))
 (let (($x207 (bvuge ?x35 (_ bv1 32))))
 (let (($x140 (or $x207 $x258)))
 (let (($x22 (and $x140 $x195)))
 (let (($x165 (= ?x87 (_ bv0 32))))
 (let (($x356 (and $x140 $x165)))
 (let (($x280 (or $x356 $x22)))
 (let (($x231 (and $x280 $x17)))
 (let (($x110 (= ?x30 (_ bv0 32))))
 (let (($x157 (and $x280 $x110)))
 (let (($x328 (or $x157 $x231)))
 (let (($x218 (and $x328 $x124)))
 (let (($x369 (= ?x368 (_ bv0 32))))
 (let (($x224 (and $x328 $x369)))
 (let (($x66 (or $x224 $x218)))
 (let (($x95 (or false $x66)))
 (let (($x148 (= $x95 true)))
 (let ((?x251 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x227 (concat ?x349 (concat ?x235 (concat ?x243 ?x251)))))
 (let (($x51 (= ?x227 input.dst.llvm-%m)))
 (let (($x361 (= $x51 true)))
 (let (($x199 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x302 (and true $x199)))
 (let (($x284 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x310 (and $x284 $x302)))
 (let ((?x191 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x340 (bvsub ?x191 (_ bv12 32))))
 (let (($x127 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x191 ?x340) (bvult ?x191 ?x340))))
 (let (($x307 (and (and (and true $x284) $x127) $x310)))
 (let (($x147 (= $x307 true)))
 (let ((?x109 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x89 (= (bvand ?x109 (_ bv4294967292 32)) ?x109)))
 (let ((?x192 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x346 (= (bvand ?x192 (_ bv4294967292 32)) ?x192)))
 (let (($x92 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x192 (bvsub ?x192 (_ bv4 32))) (bvult ?x192 (bvsub ?x192 (_ bv4 32))))))
 (let (($x61 (and true $x92)))
 (let (($x297 (= (bvand ?x191 (_ bv4294967292 32)) ?x191)))
 (let (($x154 (and $x297 $x61)))
 (let (($x163 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x109 (bvsub ?x109 (_ bv8 32))) (bvult ?x109 (bvsub ?x109 (_ bv8 32))))))
 (let (($x261 (and (and (and true $x163) $x154) $x346)))
 (let (($x25 (and $x261 $x89)))
 (let (($x319 (= $x25 true)))
 (let (($x167 (forall ((input.ind-%var3359X (_ BitVec 32)) )(let ((?x83 (bvadd (bvmul input.ind-%var3359X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x360))))
 (let ((?x211 (input.spec-%var-m-0.1.1 input.ind-%var3359X)))
 (let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3359X)))
 (=> $x75 (= ?x211 ?x352))))))))
 ))
 (let (($x7 (forall ((input.ind-%var3358X (_ BitVec 32)) )(let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3358X)))
 (= $x75 (and (bvule (_ bv0 32) input.ind-%var3358X) (bvult input.ind-%var3358X (_ bv100 32))))))
 ))
 (let (($x365 (and $x7 $x167)))
 (let (($x142 (= $x365 true)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x331 (= (_ bv0 32) ?x60)))
 (let ((?x316 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (and $x151 $x143)))
 (let (($x57 (and $x288 $x331)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x260 $x57)))
 (let (($x351 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x305 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x318 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x305 $x351)))))))
 (let (($x172 (and $x318 $x50)))
 (let (($x252 (= $x172 true)))
 (let (($x347 (and $x252 $x142)))
 (let (($x45 (and $x347 $x319)))
 (let (($x217 (and $x45 $x147)))
 (let (($x122 (and $x217 $x361)))
 (let ((?x21 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x303 (= ?x21 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x210 (=> $x124 $x303)))
 (let (($x314 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x247 (= $x124 $x314)))
 (let (($x228 (= false false)))
 (let (($x24 (=> $x369 $x228)))
 (let (($x355 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x182 (= $x369 $x355)))
 (let (($x335 (and (and (and $x182 $x24) $x247) $x210)))
 (let (($x33 (and $x335 $x122)))
 (let ((?x44 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x289 (= ?x44 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x341 (=> $x17 $x289)))
 (let (($x155 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x120 (= $x17 $x155)))
 (let (($x39 (and (and (= $x110 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x110 $x228)) $x120)))
 (let (($x287 (and $x39 $x341)))
 (let (($x88 (and $x287 $x33)))
 (let ((?x78 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x86 (= ?x78 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x10 (=> $x195 $x86)))
 (let (($x149 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x371 (= $x195 $x149)))
 (let (($x212 (and (and (= $x165 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x165 $x228)) $x371)))
 (let (($x267 (and $x212 $x10)))
 (let (($x43 (and $x267 $x88)))
 (let ((?x152 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x27 (= ?x152 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x236 (=> $x207 $x27)))
 (let (($x230 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x321 (= $x207 $x230)))
 (let (($x268 (=> $x258 $x228)))
 (let (($x257 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x138 (= $x258 $x257)))
 (let (($x153 (and (and (and $x138 $x268) $x321) $x236)))
 (let (($x72 (and $x153 $x43)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x187 (and $x262 $x72)))
 (let (($x265 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x97 (and $x265 $x187)))
 (let (($x52 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x330 (and $x52 $x97)))
 (let (($x253 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x202 (and $x253 $x330)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x300 (and $x244 $x202)))
 (let (($x38 (and $x228 $x300)))
 (let (($x270 (= ?x21 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x232 (and $x270 $x38)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x193 (and $x14 $x232)))
 (let (($x146 (and $x228 $x193)))
 (let (($x47 (= ?x44 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x325 (and $x47 $x146)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x23 (and $x178 $x325)))
 (let (($x223 (and $x228 $x23)))
 (let (($x111 (= ?x78 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x326 (and $x111 $x223)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x229 (and $x283 $x326)))
 (let (($x28 (and $x228 $x229)))
 (let (($x12 (= ?x152 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x184 (and $x12 $x28)))
 (let (($x194 (bvugt ?x192 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x192 (_ bv3 32)))))
 (let (($x129 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x194)))))))
 (let (($x158 (bvugt ?x109 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x109 (_ bv3 32)))))
 (let (($x135 (=> (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x158)))))))
 (let (($x183 (bvugt ?x191 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x191 (_ bv3 32)))))
 (let (($x249 (=> (bvule ?x191 (bvsub (bvadd ?x191 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x183)))))))
 (let (($x226 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x6 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x186 $x226)))))))
 (let (($x168 (and $x6 $x249)))
 (let (($x208 (and $x168 $x135)))
 (let (($x214 (and $x208 $x129)))
 (let (($x118 (and $x214 $x184)))
 (let (($x133 (=> $x118 $x148)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x311 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x368 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x368 (_ bv1 32))))
 (let (($x16 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x30 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x30 (_ bv1 32))))
 (let (($x59 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x87 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x87 (_ bv1 32))))
 (let (($x215 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x35 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x35 (_ bv0 32))))
 (let (($x207 (bvuge ?x35 (_ bv1 32))))
 (let (($x140 (or $x207 $x258)))
 (let (($x22 (and $x140 $x195)))
 (let (($x165 (= ?x87 (_ bv0 32))))
 (let (($x356 (and $x140 $x165)))
 (let (($x280 (or $x356 $x22)))
 (let (($x231 (and $x280 $x17)))
 (let (($x110 (= ?x30 (_ bv0 32))))
 (let (($x157 (and $x280 $x110)))
 (let (($x328 (or $x157 $x231)))
 (let (($x218 (and $x328 $x124)))
 (let (($x369 (= ?x368 (_ bv0 32))))
 (let (($x224 (and $x328 $x369)))
 (let (($x66 (or $x224 $x218)))
 (let (($x95 (or false $x66)))
 (let (($x148 (= $x95 true)))
 (let ((?x251 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x227 (concat ?x349 (concat ?x235 (concat ?x243 ?x251)))))
 (let (($x51 (= ?x227 input.dst.llvm-%m)))
 (let (($x361 (= $x51 true)))
 (let (($x199 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x302 (and true $x199)))
 (let (($x284 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x310 (and $x284 $x302)))
 (let ((?x191 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x340 (bvsub ?x191 (_ bv12 32))))
 (let (($x127 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x191 ?x340) (bvult ?x191 ?x340))))
 (let (($x307 (and (and (and true $x284) $x127) $x310)))
 (let (($x147 (= $x307 true)))
 (let ((?x109 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x89 (= (bvand ?x109 (_ bv4294967292 32)) ?x109)))
 (let ((?x192 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x346 (= (bvand ?x192 (_ bv4294967292 32)) ?x192)))
 (let (($x92 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x192 (bvsub ?x192 (_ bv4 32))) (bvult ?x192 (bvsub ?x192 (_ bv4 32))))))
 (let (($x61 (and true $x92)))
 (let (($x297 (= (bvand ?x191 (_ bv4294967292 32)) ?x191)))
 (let (($x154 (and $x297 $x61)))
 (let (($x163 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x109 (bvsub ?x109 (_ bv8 32))) (bvult ?x109 (bvsub ?x109 (_ bv8 32))))))
 (let (($x261 (and (and (and true $x163) $x154) $x346)))
 (let (($x25 (and $x261 $x89)))
 (let (($x319 (= $x25 true)))
 (let (($x167 (forall ((input.ind-%var3359X (_ BitVec 32)) )(let ((?x83 (bvadd (bvmul input.ind-%var3359X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x360))))
 (let ((?x211 (input.spec-%var-m-0.1.1 input.ind-%var3359X)))
 (let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3359X)))
 (=> $x75 (= ?x211 ?x352))))))))
 ))
 (let (($x7 (forall ((input.ind-%var3358X (_ BitVec 32)) )(let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3358X)))
 (= $x75 (and (bvule (_ bv0 32) input.ind-%var3358X) (bvult input.ind-%var3358X (_ bv100 32))))))
 ))
 (let (($x365 (and $x7 $x167)))
 (let (($x142 (= $x365 true)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x331 (= (_ bv0 32) ?x60)))
 (let ((?x316 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (and $x151 $x143)))
 (let (($x57 (and $x288 $x331)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x260 $x57)))
 (let (($x351 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x305 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x318 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x305 $x351)))))))
 (let (($x172 (and $x318 $x50)))
 (let (($x252 (= $x172 true)))
 (let (($x347 (and $x252 $x142)))
 (let (($x45 (and $x347 $x319)))
 (let (($x217 (and $x45 $x147)))
 (let (($x122 (and $x217 $x361)))
 (let ((?x21 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x303 (= ?x21 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x210 (=> $x124 $x303)))
 (let (($x314 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x247 (= $x124 $x314)))
 (let (($x228 (= false false)))
 (let (($x24 (=> $x369 $x228)))
 (let (($x355 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x182 (= $x369 $x355)))
 (let (($x335 (and (and (and $x182 $x24) $x247) $x210)))
 (let (($x33 (and $x335 $x122)))
 (let ((?x44 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x289 (= ?x44 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x341 (=> $x17 $x289)))
 (let (($x155 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x120 (= $x17 $x155)))
 (let (($x39 (and (and (= $x110 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x110 $x228)) $x120)))
 (let (($x287 (and $x39 $x341)))
 (let (($x88 (and $x287 $x33)))
 (let ((?x78 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x86 (= ?x78 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x10 (=> $x195 $x86)))
 (let (($x149 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x371 (= $x195 $x149)))
 (let (($x212 (and (and (= $x165 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x165 $x228)) $x371)))
 (let (($x267 (and $x212 $x10)))
 (let (($x43 (and $x267 $x88)))
 (let ((?x152 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x27 (= ?x152 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x236 (=> $x207 $x27)))
 (let (($x230 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x321 (= $x207 $x230)))
 (let (($x268 (=> $x258 $x228)))
 (let (($x257 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x138 (= $x258 $x257)))
 (let (($x153 (and (and (and $x138 $x268) $x321) $x236)))
 (let (($x72 (and $x153 $x43)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x187 (and $x262 $x72)))
 (let (($x265 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x97 (and $x265 $x187)))
 (let (($x52 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x330 (and $x52 $x97)))
 (let (($x253 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x202 (and $x253 $x330)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x300 (and $x244 $x202)))
 (let (($x38 (and $x228 $x300)))
 (let (($x270 (= ?x21 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x232 (and $x270 $x38)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x193 (and $x14 $x232)))
 (let (($x146 (and $x228 $x193)))
 (let (($x47 (= ?x44 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x325 (and $x47 $x146)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x23 (and $x178 $x325)))
 (let (($x223 (and $x228 $x23)))
 (let (($x111 (= ?x78 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x326 (and $x111 $x223)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x229 (and $x283 $x326)))
 (let (($x28 (and $x228 $x229)))
 (let (($x12 (= ?x152 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x184 (and $x12 $x28)))
 (let (($x194 (bvugt ?x192 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x192 (_ bv3 32)))))
 (let (($x129 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x194)))))))
 (let (($x158 (bvugt ?x109 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x109 (_ bv3 32)))))
 (let (($x135 (=> (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x158)))))))
 (let (($x183 (bvugt ?x191 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x191 (_ bv3 32)))))
 (let (($x249 (=> (bvule ?x191 (bvsub (bvadd ?x191 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x183)))))))
 (let (($x226 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x6 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x186 $x226)))))))
 (let (($x168 (and $x6 $x249)))
 (let (($x208 (and $x168 $x135)))
 (let (($x214 (and $x208 $x129)))
 (let (($x118 (and $x214 $x184)))
 (let (($x133 (=> $x118 $x148)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x44 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x372 (bvmul (_ bv4294967295 32) ?x44)))
 (let ((?x214 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x250 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x214)))
 (let ((?x286 (bvadd ?x250 ?x372)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x126 (concat ?x176 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x226 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x71 (bvadd ?x226 (_ bv3 32))))
 (let ((?x363 (concat (select input.dst.llvm-mem ?x71) (concat ?x364 ?x126))))
 (let ((?x164 (bvmul (_ bv4294967295 32) ?x363)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x174 (concat ?x170 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x158 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x216 (bvadd ?x158 (_ bv3 32))))
 (let ((?x144 (concat (select input.dst.llvm-mem ?x216) (concat ?x96 ?x174))))
 (let ((?x354 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x26 (concat ?x354 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x266 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x160 (bvadd ?x266 (_ bv3 32))))
 (let ((?x53 (concat (select input.dst.llvm-mem ?x160) (concat ?x292 ?x26))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x117)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x189)))
 (let ((?x338 (bvadd (bvadd (bvadd ?x264 ?x53) ?x144) ?x164)))
 (let (($x294 (= ?x338 ?x286)))
 (let (($x79 (= $x294 true)))
 (let ((?x325 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x356 (concat ?x140 (concat ?x28 (concat ?x223 ?x325)))))
 (let (($x148 (= ?x356 input.dst.llvm-%m)))
 (let (($x133 (= $x148 true)))
 (let (($x22 (= input.dst.llvm-%m ?x356)))
 (let ((?x300 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x38 (= (_ bv0 32) ?x300)))
 (let ((?x97 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (and $x187 $x330)))
 (let (($x232 (and $x202 $x38)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x72 $x232)))
 (let (($x33 (forall ((input.ind-%var3407X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var3407X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem ?x344))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv2 32))) ?x70))))
 (let ((?x78 (input.spec-%var-m-0.1.1 input.ind-%var3407X)))
 (let (($x228 (input.spec-%var-m-0.0.1 input.ind-%var3407X)))
 (=> $x228 (= ?x78 ?x51))))))))
 ))
 (let (($x45 (forall ((input.ind-%var3406X (_ BitVec 32)) )(let (($x228 (input.spec-%var-m-0.0.1 input.ind-%var3406X)))
 (= $x228 (and (bvule (_ bv0 32) input.ind-%var3406X) (bvult input.ind-%var3406X (_ bv100 32))))))
 ))
 (let (($x88 (and $x45 $x33)))
 (let (($x297 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x297)))))))
 (let (($x7 (= (bvand ?x226 (_ bv4294967292 32)) ?x226)))
 (let (($x308 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x172 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x158 (bvsub ?x158 (_ bv4 32))) (bvult ?x158 (bvsub ?x158 (_ bv4 32))))))
 (let (($x252 (and true $x172)))
 (let (($x288 (= (bvand ?x266 (_ bv4294967292 32)) ?x266)))
 (let (($x271 (and $x288 $x252)))
 (let (($x151 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x226 (bvsub ?x226 (_ bv8 32))) (bvult ?x226 (bvsub ?x226 (_ bv8 32))))))
 (let (($x293 (and (and (and true $x151) $x271) $x308)))
 (let (($x352 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x362 (and true $x352)))
 (let (($x83 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x240 (and $x83 $x362)))
 (let (($x74 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x266 (bvsub ?x266 (_ bv12 32))) (bvult ?x266 (bvsub ?x266 (_ bv12 32))))))
 (let (($x142 (and (and (and true $x83) $x74) $x240)))
 (let (($x218 (and (and (and (and (and (and $x142 $x293) $x7) $x61) $x88) $x193) $x22)))
 (let (($x66 (= $x218 true)))
 (let (($x347 (= $x142 true)))
 (let (($x211 (and $x293 $x7)))
 (let (($x213 (= $x211 true)))
 (let (($x237 (and $x213 $x347)))
 (let (($x95 (and $x237 $x66)))
 (let (($x90 (and $x95 $x133)))
 (let (($x290 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x345 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x345 (_ bv1 32))))
 (let (($x138 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x13 (ite $x138 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (bvuge ?x13 (_ bv1 32))))
 (let (($x370 (and $x27 $x86)))
 (let (($x162 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x275 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x275 (_ bv1 32))))
 (let (($x131 (and $x289 $x370)))
 (let (($x24 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x67 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x67 (_ bv1 32))))
 (let (($x298 (and $x303 $x131)))
 (let (($x203 (and $x298 $x90)))
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x248 (= ?x123 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x103 (=> $x303 $x248)))
 (let (($x210 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x335 (= $x303 $x210)))
 (let (($x194 (= false false)))
 (let (($x124 (= ?x67 (_ bv0 32))))
 (let (($x334 (=> $x124 $x194)))
 (let (($x247 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x101 (= $x124 $x247)))
 (let (($x351 (and (and (and $x101 $x334) $x335) $x103)))
 (let (($x359 (and $x351 $x203)))
 (let ((?x21 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x368 (= ?x21 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x369 (=> $x289 $x368)))
 (let (($x341 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x287 (= $x289 $x341)))
 (let (($x17 (= ?x275 (_ bv0 32))))
 (let (($x107 (=> $x17 $x194)))
 (let (($x120 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x39 (= $x17 $x120)))
 (let (($x182 (and (and (and $x39 $x107) $x287) $x369)))
 (let (($x339 (and $x182 $x359)))
 (let (($x30 (= ?x44 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x110 (=> $x86 $x30)))
 (let (($x10 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x267 (= $x86 $x10)))
 (let (($x195 (= ?x345 (_ bv0 32))))
 (let (($x306 (=> $x195 $x194)))
 (let (($x371 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x212 (= $x195 $x371)))
 (let (($x134 (and (and (and $x212 $x306) $x267) $x110)))
 (let (($x65 (and $x134 $x339)))
 (let (($x87 (= ?x214 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x165 (=> $x27 $x87)))
 (let (($x236 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x153 (= $x27 $x236)))
 (let (($x207 (= ?x13 (_ bv0 32))))
 (let (($x77 (=> $x207 $x194)))
 (let (($x321 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x320 (= $x207 $x321)))
 (let (($x108 (and (and (and $x320 $x77) $x153) $x165)))
 (let (($x84 (and $x108 $x65)))
 (let (($x257 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x15 (and $x257 $x84)))
 (let (($x258 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x357 (and $x258 $x15)))
 (let (($x215 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x188 (and $x215 $x357)))
 (let (($x274 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x94 (and $x274 $x188)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x209 (and $x113 $x94)))
 (let (($x32 (and $x194 $x209)))
 (let (($x141 (= ?x123 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x256 (and $x141 $x32)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x115 (and $x244 $x256)))
 (let (($x41 (and $x194 $x115)))
 (let (($x270 (= ?x21 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x19 (and $x270 $x41)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x69 (and $x14 $x19)))
 (let (($x177 (and $x194 $x69)))
 (let (($x47 (= ?x44 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x327 (and $x47 $x177)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x312 (and $x9 $x327)))
 (let (($x36 (and $x194 $x312)))
 (let (($x73 (= ?x214 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x285 (and $x73 $x36)))
 (let (($x18 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x216)))
 (let (($x242 (=> (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x239 $x18)))))))
 (let (($x156 (bvugt ?x226 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x64 (=> (bvule ?x226 (bvsub (bvadd ?x226 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x156)))))))
 (let (($x68 (bvugt ?x266 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x204 (=> (bvule ?x266 (bvsub (bvadd ?x266 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x68)))))))
 (let (($x198 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x191 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x249 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x198)))))))
 (let (($x168 (and $x249 $x204)))
 (let (($x63 (and $x168 $x64)))
 (let (($x135 (and $x63 $x242)))
 (let (($x130 (and $x135 $x285)))
 (let (($x273 (=> $x130 $x79)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x44 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x372 (bvmul (_ bv4294967295 32) ?x44)))
 (let ((?x214 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x250 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x214)))
 (let ((?x286 (bvadd ?x250 ?x372)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x126 (concat ?x176 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x226 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x71 (bvadd ?x226 (_ bv3 32))))
 (let ((?x363 (concat (select input.dst.llvm-mem ?x71) (concat ?x364 ?x126))))
 (let ((?x164 (bvmul (_ bv4294967295 32) ?x363)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x174 (concat ?x170 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x158 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x216 (bvadd ?x158 (_ bv3 32))))
 (let ((?x144 (concat (select input.dst.llvm-mem ?x216) (concat ?x96 ?x174))))
 (let ((?x354 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x26 (concat ?x354 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x266 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x160 (bvadd ?x266 (_ bv3 32))))
 (let ((?x53 (concat (select input.dst.llvm-mem ?x160) (concat ?x292 ?x26))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x117)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x189)))
 (let ((?x338 (bvadd (bvadd (bvadd ?x264 ?x53) ?x144) ?x164)))
 (let (($x294 (= ?x338 ?x286)))
 (let (($x79 (= $x294 true)))
 (let ((?x325 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x356 (concat ?x140 (concat ?x28 (concat ?x223 ?x325)))))
 (let (($x148 (= ?x356 input.dst.llvm-%m)))
 (let (($x133 (= $x148 true)))
 (let (($x22 (= input.dst.llvm-%m ?x356)))
 (let ((?x300 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x38 (= (_ bv0 32) ?x300)))
 (let ((?x97 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (and $x187 $x330)))
 (let (($x232 (and $x202 $x38)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x72 $x232)))
 (let (($x33 (forall ((input.ind-%var3407X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var3407X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem ?x344))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv2 32))) ?x70))))
 (let ((?x78 (input.spec-%var-m-0.1.1 input.ind-%var3407X)))
 (let (($x228 (input.spec-%var-m-0.0.1 input.ind-%var3407X)))
 (=> $x228 (= ?x78 ?x51))))))))
 ))
 (let (($x45 (forall ((input.ind-%var3406X (_ BitVec 32)) )(let (($x228 (input.spec-%var-m-0.0.1 input.ind-%var3406X)))
 (= $x228 (and (bvule (_ bv0 32) input.ind-%var3406X) (bvult input.ind-%var3406X (_ bv100 32))))))
 ))
 (let (($x88 (and $x45 $x33)))
 (let (($x297 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x297)))))))
 (let (($x7 (= (bvand ?x226 (_ bv4294967292 32)) ?x226)))
 (let (($x308 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x172 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x158 (bvsub ?x158 (_ bv4 32))) (bvult ?x158 (bvsub ?x158 (_ bv4 32))))))
 (let (($x252 (and true $x172)))
 (let (($x288 (= (bvand ?x266 (_ bv4294967292 32)) ?x266)))
 (let (($x271 (and $x288 $x252)))
 (let (($x151 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x226 (bvsub ?x226 (_ bv8 32))) (bvult ?x226 (bvsub ?x226 (_ bv8 32))))))
 (let (($x293 (and (and (and true $x151) $x271) $x308)))
 (let (($x352 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x362 (and true $x352)))
 (let (($x83 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x240 (and $x83 $x362)))
 (let (($x74 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x266 (bvsub ?x266 (_ bv12 32))) (bvult ?x266 (bvsub ?x266 (_ bv12 32))))))
 (let (($x142 (and (and (and true $x83) $x74) $x240)))
 (let (($x218 (and (and (and (and (and (and $x142 $x293) $x7) $x61) $x88) $x193) $x22)))
 (let (($x66 (= $x218 true)))
 (let (($x347 (= $x142 true)))
 (let (($x211 (and $x293 $x7)))
 (let (($x213 (= $x211 true)))
 (let (($x237 (and $x213 $x347)))
 (let (($x95 (and $x237 $x66)))
 (let (($x90 (and $x95 $x133)))
 (let (($x290 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x345 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x345 (_ bv1 32))))
 (let (($x138 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x13 (ite $x138 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (bvuge ?x13 (_ bv1 32))))
 (let (($x370 (and $x27 $x86)))
 (let (($x162 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x275 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x275 (_ bv1 32))))
 (let (($x131 (and $x289 $x370)))
 (let (($x24 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x67 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x67 (_ bv1 32))))
 (let (($x298 (and $x303 $x131)))
 (let (($x203 (and $x298 $x90)))
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x248 (= ?x123 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x103 (=> $x303 $x248)))
 (let (($x210 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x335 (= $x303 $x210)))
 (let (($x194 (= false false)))
 (let (($x124 (= ?x67 (_ bv0 32))))
 (let (($x334 (=> $x124 $x194)))
 (let (($x247 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x101 (= $x124 $x247)))
 (let (($x351 (and (and (and $x101 $x334) $x335) $x103)))
 (let (($x359 (and $x351 $x203)))
 (let ((?x21 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x368 (= ?x21 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x369 (=> $x289 $x368)))
 (let (($x341 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x287 (= $x289 $x341)))
 (let (($x17 (= ?x275 (_ bv0 32))))
 (let (($x107 (=> $x17 $x194)))
 (let (($x120 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x39 (= $x17 $x120)))
 (let (($x182 (and (and (and $x39 $x107) $x287) $x369)))
 (let (($x339 (and $x182 $x359)))
 (let (($x30 (= ?x44 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x110 (=> $x86 $x30)))
 (let (($x10 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x267 (= $x86 $x10)))
 (let (($x195 (= ?x345 (_ bv0 32))))
 (let (($x306 (=> $x195 $x194)))
 (let (($x371 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x212 (= $x195 $x371)))
 (let (($x134 (and (and (and $x212 $x306) $x267) $x110)))
 (let (($x65 (and $x134 $x339)))
 (let (($x87 (= ?x214 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x165 (=> $x27 $x87)))
 (let (($x236 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x153 (= $x27 $x236)))
 (let (($x207 (= ?x13 (_ bv0 32))))
 (let (($x77 (=> $x207 $x194)))
 (let (($x321 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x320 (= $x207 $x321)))
 (let (($x108 (and (and (and $x320 $x77) $x153) $x165)))
 (let (($x84 (and $x108 $x65)))
 (let (($x257 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x15 (and $x257 $x84)))
 (let (($x258 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x357 (and $x258 $x15)))
 (let (($x215 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x188 (and $x215 $x357)))
 (let (($x274 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x94 (and $x274 $x188)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x209 (and $x113 $x94)))
 (let (($x32 (and $x194 $x209)))
 (let (($x141 (= ?x123 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x256 (and $x141 $x32)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x115 (and $x244 $x256)))
 (let (($x41 (and $x194 $x115)))
 (let (($x270 (= ?x21 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x19 (and $x270 $x41)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x69 (and $x14 $x19)))
 (let (($x177 (and $x194 $x69)))
 (let (($x47 (= ?x44 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x327 (and $x47 $x177)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x312 (and $x9 $x327)))
 (let (($x36 (and $x194 $x312)))
 (let (($x73 (= ?x214 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x285 (and $x73 $x36)))
 (let (($x18 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x216)))
 (let (($x242 (=> (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x239 $x18)))))))
 (let (($x156 (bvugt ?x226 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x64 (=> (bvule ?x226 (bvsub (bvadd ?x226 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x156)))))))
 (let (($x68 (bvugt ?x266 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x204 (=> (bvule ?x266 (bvsub (bvadd ?x266 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x68)))))))
 (let (($x198 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x191 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x249 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x198)))))))
 (let (($x168 (and $x249 $x204)))
 (let (($x63 (and $x168 $x64)))
 (let (($x135 (and $x63 $x242)))
 (let (($x130 (and $x135 $x285)))
 (let (($x273 (=> $x130 $x79)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x310 (bvmul (_ bv4294967295 32) ?x21)))
 (let ((?x346 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x310)))
 (let ((?x340 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x197 (concat ?x340 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x198 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x76 (bvadd ?x198 (_ bv3 32))))
 (let ((?x127 (concat (select input.dst.llvm-mem ?x76) (concat ?x302 ?x197))))
 (let ((?x29 (bvmul (_ bv4294967295 32) ?x127)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x42 (concat ?x132 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x156 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x200 (bvadd ?x156 (_ bv3 32))))
 (let ((?x277 (concat (select input.dst.llvm-mem ?x200) (concat ?x146 ?x42))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x338 (concat ?x164 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x181 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x281 (bvadd ?x181 (_ bv3 32))))
 (let ((?x294 (concat (select input.dst.llvm-mem ?x281) (concat ?x250 ?x338))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x296)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x176)))
 (let ((?x56 (bvadd (bvadd (bvadd ?x126 ?x294) ?x277) ?x29)))
 (let (($x261 (= ?x56 ?x346)))
 (let (($x307 (= $x261 true)))
 (let ((?x357 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x256 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x19 (concat ?x256 (concat ?x94 ?x357)))))
 (let (($x301 (= ?x69 input.dst.llvm-%m)))
 (let (($x329 (= $x301 true)))
 (let (($x177 (= input.dst.llvm-%m ?x69)))
 (let ((?x359 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x339 (= (_ bv0 32) ?x359)))
 (let ((?x133 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x148 $x90)))
 (let (($x65 (and $x203 $x339)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x95 $x65)))
 (let (($x22 (forall ((input.ind-%var3451X (_ BitVec 32)) )(let ((?x232 (bvadd (bvmul input.ind-%var3451X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x140))))
 (let ((?x44 (input.spec-%var-m-0.1.1 input.ind-%var3451X)))
 (let (($x194 (input.spec-%var-m-0.0.1 input.ind-%var3451X)))
 (=> $x194 (= ?x44 ?x326))))))))
 ))
 (let (($x251 (forall ((input.ind-%var3450X (_ BitVec 32)) )(let (($x194 (input.spec-%var-m-0.0.1 input.ind-%var3450X)))
 (= $x194 (and (bvule (_ bv0 32) input.ind-%var3450X) (bvult input.ind-%var3450X (_ bv100 32))))))
 ))
 (let (($x218 (and $x251 $x22)))
 (let (($x231 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x231)))))))
 (let (($x55 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x211 (= (bvand ?x156 (_ bv4294967292 32)) ?x156)))
 (let (($x308 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x156 (bvsub ?x156 (_ bv4 32))) (bvult ?x156 (bvsub ?x156 (_ bv4 32))))))
 (let (($x293 (and true $x308)))
 (let (($x172 (= (bvand ?x181 (_ bv4294967292 32)) ?x181)))
 (let (($x350 (and $x172 $x293)))
 (let (($x60 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x198 (bvsub ?x198 (_ bv8 32))) (bvult ?x198 (bvsub ?x198 (_ bv8 32))))))
 (let (($x83 (and (and (and true $x60) $x350) $x211)))
 (let (($x347 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x237 (and true $x347)))
 (let (($x74 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x280 (and $x74 $x237)))
 (let (($x169 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x181 (bvsub ?x181 (_ bv12 32))) (bvult ?x181 (bvsub ?x181 (_ bv12 32))))))
 (let (($x366 (and (and (and true $x74) $x169) $x280)))
 (let (($x104 (and (and (and (and (and (and $x366 $x83) $x55) $x25) $x218) $x84) $x177)))
 (let (($x145 (= $x104 true)))
 (let (($x92 (= $x366 true)))
 (let (($x180 (and $x83 $x55)))
 (let (($x337 (= $x180 true)))
 (let (($x11 (and $x337 $x92)))
 (let (($x201 (and $x11 $x145)))
 (let (($x121 (and $x201 $x329)))
 (let (($x306 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x373 (ite $x306 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x373 (_ bv1 32))))
 (let (($x320 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x114 (ite $x320 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x114 (_ bv0 32))))
 (let (($x260 (and $x27 $x30)))
 (let (($x107 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x225 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x368 (bvuge ?x225 (_ bv1 32))))
 (let (($x151 (and $x368 $x260)))
 (let (($x334 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x20 (ite $x334 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x20 (_ bv1 32))))
 (let (($x358 (and $x248 $x151)))
 (let (($x117 (and $x358 $x121)))
 (let ((?x265 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x131 (= ?x265 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x298 (=> $x248 $x131)))
 (let (($x103 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x351 (= $x248 $x103)))
 (let (($x18 (= false false)))
 (let (($x303 (= ?x20 (_ bv0 32))))
 (let (($x342 (=> $x303 $x18)))
 (let (($x335 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x305 (= $x303 $x335)))
 (let (($x309 (and (and (and $x305 $x342) $x351) $x298)))
 (let (($x189 (and $x309 $x117)))
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x67 (= ?x123 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x124 (=> $x368 $x67)))
 (let (($x369 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x182 (= $x368 $x369)))
 (let (($x289 (= ?x225 (_ bv0 32))))
 (let (($x311 (=> $x289 $x18)))
 (let (($x287 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x355 (= $x289 $x287)))
 (let (($x101 (and (and (and $x355 $x311) $x182) $x124)))
 (let (($x264 (and $x101 $x189)))
 (let (($x275 (= ?x21 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x17 (=> $x30 $x275)))
 (let (($x110 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x134 (= $x30 $x110)))
 (let (($x86 (= ?x373 (_ bv0 32))))
 (let (($x16 (=> $x86 $x18)))
 (let (($x267 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x304 (= $x86 $x267)))
 (let (($x39 (and (and (and $x304 $x16) $x134) $x17)))
 (let (($x85 (and $x39 $x264)))
 (let ((?x135 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x345 (= ?x135 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x87 (bvuge ?x114 (_ bv1 32))))
 (let (($x195 (=> $x87 $x345)))
 (let (($x165 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x108 (= $x87 $x165)))
 (let (($x59 (=> $x27 $x18)))
 (let (($x153 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x343 (= $x27 $x153)))
 (let (($x212 (and (and (and $x343 $x59) $x108) $x195)))
 (let (($x367 (and $x212 $x85)))
 (let (($x321 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x292 (and $x321 $x367)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x317 (and $x207 $x292)))
 (let (($x138 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x354 (and $x138 $x317)))
 (let (($x136 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x336 (and $x136 $x354)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x26 (and $x35 $x336)))
 (let (($x205 (and $x18 $x26)))
 (let (($x262 (= ?x265 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x53 (and $x262 $x205)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x255 (and $x113 $x53)))
 (let (($x238 (and $x18 $x255)))
 (let (($x141 (= ?x123 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x219 (and $x141 $x238)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x96 (and $x244 $x219)))
 (let (($x49 (and $x18 $x96)))
 (let (($x270 (= ?x21 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x170 (and $x270 $x49)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x196 (and $x234 $x170)))
 (let (($x174 (and $x18 $x196)))
 (let (($x216 (= ?x135 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x313 (and $x216 $x174)))
 (let (($x5 (bvugt ?x156 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x200)))
 (let (($x175 (=> (bvule ?x156 (bvsub (bvadd ?x156 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x5)))))))
 (let (($x150 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x272 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x150)))))))
 (let (($x71 (bvugt ?x181 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x281)))
 (let (($x191 (=> (bvule ?x181 (bvsub (bvadd ?x181 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x71)))))))
 (let (($x245 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x204 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x245)))))))
 (let (($x168 (and $x204 $x191)))
 (let (($x80 (and $x168 $x272)))
 (let (($x64 (and $x80 $x175)))
 (let (($x144 (and $x64 $x313)))
 (let (($x284 (=> $x144 $x307)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x310 (bvmul (_ bv4294967295 32) ?x21)))
 (let ((?x346 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x310)))
 (let ((?x340 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x197 (concat ?x340 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x198 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x76 (bvadd ?x198 (_ bv3 32))))
 (let ((?x127 (concat (select input.dst.llvm-mem ?x76) (concat ?x302 ?x197))))
 (let ((?x29 (bvmul (_ bv4294967295 32) ?x127)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x42 (concat ?x132 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x156 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x200 (bvadd ?x156 (_ bv3 32))))
 (let ((?x277 (concat (select input.dst.llvm-mem ?x200) (concat ?x146 ?x42))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x338 (concat ?x164 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x181 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x281 (bvadd ?x181 (_ bv3 32))))
 (let ((?x294 (concat (select input.dst.llvm-mem ?x281) (concat ?x250 ?x338))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x296)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x176)))
 (let ((?x56 (bvadd (bvadd (bvadd ?x126 ?x294) ?x277) ?x29)))
 (let (($x261 (= ?x56 ?x346)))
 (let (($x307 (= $x261 true)))
 (let ((?x357 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x256 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x19 (concat ?x256 (concat ?x94 ?x357)))))
 (let (($x301 (= ?x69 input.dst.llvm-%m)))
 (let (($x329 (= $x301 true)))
 (let (($x177 (= input.dst.llvm-%m ?x69)))
 (let ((?x359 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x339 (= (_ bv0 32) ?x359)))
 (let ((?x133 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x148 $x90)))
 (let (($x65 (and $x203 $x339)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x95 $x65)))
 (let (($x22 (forall ((input.ind-%var3451X (_ BitVec 32)) )(let ((?x232 (bvadd (bvmul input.ind-%var3451X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x140))))
 (let ((?x44 (input.spec-%var-m-0.1.1 input.ind-%var3451X)))
 (let (($x194 (input.spec-%var-m-0.0.1 input.ind-%var3451X)))
 (=> $x194 (= ?x44 ?x326))))))))
 ))
 (let (($x251 (forall ((input.ind-%var3450X (_ BitVec 32)) )(let (($x194 (input.spec-%var-m-0.0.1 input.ind-%var3450X)))
 (= $x194 (and (bvule (_ bv0 32) input.ind-%var3450X) (bvult input.ind-%var3450X (_ bv100 32))))))
 ))
 (let (($x218 (and $x251 $x22)))
 (let (($x231 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x231)))))))
 (let (($x55 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x211 (= (bvand ?x156 (_ bv4294967292 32)) ?x156)))
 (let (($x308 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x156 (bvsub ?x156 (_ bv4 32))) (bvult ?x156 (bvsub ?x156 (_ bv4 32))))))
 (let (($x293 (and true $x308)))
 (let (($x172 (= (bvand ?x181 (_ bv4294967292 32)) ?x181)))
 (let (($x350 (and $x172 $x293)))
 (let (($x60 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x198 (bvsub ?x198 (_ bv8 32))) (bvult ?x198 (bvsub ?x198 (_ bv8 32))))))
 (let (($x83 (and (and (and true $x60) $x350) $x211)))
 (let (($x347 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x237 (and true $x347)))
 (let (($x74 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x280 (and $x74 $x237)))
 (let (($x169 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x181 (bvsub ?x181 (_ bv12 32))) (bvult ?x181 (bvsub ?x181 (_ bv12 32))))))
 (let (($x366 (and (and (and true $x74) $x169) $x280)))
 (let (($x104 (and (and (and (and (and (and $x366 $x83) $x55) $x25) $x218) $x84) $x177)))
 (let (($x145 (= $x104 true)))
 (let (($x92 (= $x366 true)))
 (let (($x180 (and $x83 $x55)))
 (let (($x337 (= $x180 true)))
 (let (($x11 (and $x337 $x92)))
 (let (($x201 (and $x11 $x145)))
 (let (($x121 (and $x201 $x329)))
 (let (($x306 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x373 (ite $x306 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x373 (_ bv1 32))))
 (let (($x320 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x114 (ite $x320 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x114 (_ bv0 32))))
 (let (($x260 (and $x27 $x30)))
 (let (($x107 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x225 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x368 (bvuge ?x225 (_ bv1 32))))
 (let (($x151 (and $x368 $x260)))
 (let (($x334 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x20 (ite $x334 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x20 (_ bv1 32))))
 (let (($x358 (and $x248 $x151)))
 (let (($x117 (and $x358 $x121)))
 (let ((?x265 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x131 (= ?x265 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x298 (=> $x248 $x131)))
 (let (($x103 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x351 (= $x248 $x103)))
 (let (($x18 (= false false)))
 (let (($x303 (= ?x20 (_ bv0 32))))
 (let (($x342 (=> $x303 $x18)))
 (let (($x335 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x305 (= $x303 $x335)))
 (let (($x309 (and (and (and $x305 $x342) $x351) $x298)))
 (let (($x189 (and $x309 $x117)))
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x67 (= ?x123 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x124 (=> $x368 $x67)))
 (let (($x369 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x182 (= $x368 $x369)))
 (let (($x289 (= ?x225 (_ bv0 32))))
 (let (($x311 (=> $x289 $x18)))
 (let (($x287 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x355 (= $x289 $x287)))
 (let (($x101 (and (and (and $x355 $x311) $x182) $x124)))
 (let (($x264 (and $x101 $x189)))
 (let (($x275 (= ?x21 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x17 (=> $x30 $x275)))
 (let (($x110 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x134 (= $x30 $x110)))
 (let (($x86 (= ?x373 (_ bv0 32))))
 (let (($x16 (=> $x86 $x18)))
 (let (($x267 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x304 (= $x86 $x267)))
 (let (($x39 (and (and (and $x304 $x16) $x134) $x17)))
 (let (($x85 (and $x39 $x264)))
 (let ((?x135 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x345 (= ?x135 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x87 (bvuge ?x114 (_ bv1 32))))
 (let (($x195 (=> $x87 $x345)))
 (let (($x165 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x108 (= $x87 $x165)))
 (let (($x59 (=> $x27 $x18)))
 (let (($x153 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x343 (= $x27 $x153)))
 (let (($x212 (and (and (and $x343 $x59) $x108) $x195)))
 (let (($x367 (and $x212 $x85)))
 (let (($x321 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x292 (and $x321 $x367)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x317 (and $x207 $x292)))
 (let (($x138 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x354 (and $x138 $x317)))
 (let (($x136 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x336 (and $x136 $x354)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x26 (and $x35 $x336)))
 (let (($x205 (and $x18 $x26)))
 (let (($x262 (= ?x265 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x53 (and $x262 $x205)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x255 (and $x113 $x53)))
 (let (($x238 (and $x18 $x255)))
 (let (($x141 (= ?x123 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x219 (and $x141 $x238)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x96 (and $x244 $x219)))
 (let (($x49 (and $x18 $x96)))
 (let (($x270 (= ?x21 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x170 (and $x270 $x49)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x196 (and $x234 $x170)))
 (let (($x174 (and $x18 $x196)))
 (let (($x216 (= ?x135 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x313 (and $x216 $x174)))
 (let (($x5 (bvugt ?x156 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x200)))
 (let (($x175 (=> (bvule ?x156 (bvsub (bvadd ?x156 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x5)))))))
 (let (($x150 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x272 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x150)))))))
 (let (($x71 (bvugt ?x181 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x281)))
 (let (($x191 (=> (bvule ?x181 (bvsub (bvadd ?x181 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x71)))))))
 (let (($x245 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x204 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x245)))))))
 (let (($x168 (and $x204 $x191)))
 (let (($x80 (and $x168 $x272)))
 (let (($x64 (and $x80 $x175)))
 (let (($x144 (and $x64 $x313)))
 (let (($x284 (=> $x144 $x307)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 221 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x91 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x64)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x187 (concat ?x51 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x245 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x82 (bvadd ?x245 (_ bv3 32))))
 (let ((?x33 (concat (select input.dst.llvm-mem ?x82) (concat ?x328 ?x187))))
 (let ((?x361 (bvmul (_ bv4294967295 32) ?x33)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x159 (concat ?x179 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x150 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x192 (bvadd ?x150 (_ bv3 32))))
 (let ((?x297 (concat (select input.dst.llvm-mem ?x192) (concat ?x77 ?x159))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x56 (concat ?x29 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x310 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x112 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x241 (bvadd ?x112 (_ bv3 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem ?x241) (concat ?x310 ?x56))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x199)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x340)))
 (let ((?x330 (bvadd (bvadd (bvadd ?x197 ?x307) ?x297) ?x361)))
 (let (($x217 (= ?x330 ?x91)))
 (let (($x202 (= $x217 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x336 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x219 (concat ?x53 (concat ?x336 ?x317)))))
 (let (($x116 (= ?x96 input.dst.llvm-%m)))
 (let (($x333 (= $x116 true)))
 (let (($x49 (= input.dst.llvm-%m ?x96)))
 (let ((?x189 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x264 (= (_ bv0 32) ?x189)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x301 $x121)))
 (let (($x85 (and $x117 $x264)))
 (let (($x201 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x367 (and $x201 $x85)))
 (let (($x177 (forall ((input.ind-%var3495X (_ BitVec 32)) )(let ((?x65 (bvadd (bvmul input.ind-%var3495X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x19))))
 (let ((?x21 (input.spec-%var-m-0.1.1 input.ind-%var3495X)))
 (let (($x18 (input.spec-%var-m-0.0.1 input.ind-%var3495X)))
 (=> $x18 (= ?x21 ?x209))))))))
 ))
 (let (($x28 (forall ((input.ind-%var3494X (_ BitVec 32)) )(let (($x18 (input.spec-%var-m-0.0.1 input.ind-%var3494X)))
 (= $x18 (and (bvule (_ bv0 32) input.ind-%var3494X) (bvult input.ind-%var3494X (_ bv100 32))))))
 ))
 (let (($x104 (and $x28 $x177)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x227 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x36)))))))
 (let (($x353 (= (bvand ?x245 (_ bv4294967292 32)) ?x245)))
 (let (($x180 (= (bvand ?x150 (_ bv4294967292 32)) ?x150)))
 (let (($x211 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x150 (bvsub ?x150 (_ bv4 32))) (bvult ?x150 (bvsub ?x150 (_ bv4 32))))))
 (let (($x83 (and true $x211)))
 (let (($x308 (= (bvand ?x112 (_ bv4294967292 32)) ?x112)))
 (let (($x167 (and $x308 $x83)))
 (let (($x252 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x245 (bvsub ?x245 (_ bv8 32))) (bvult ?x245 (bvsub ?x245 (_ bv8 32))))))
 (let (($x74 (and (and (and true $x252) $x167) $x180)))
 (let (($x92 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x11 (and true $x92)))
 (let (($x169 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x327 (and $x169 $x11)))
 (let (($x142 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x112 (bvsub ?x112 (_ bv12 32))) (bvult ?x112 (bvsub ?x112 (_ bv12 32))))))
 (let (($x40 (and (and (and true $x169) $x142) $x327)))
 (let (($x185 (and (and (and (and (and (and $x40 $x74) $x353) $x227) $x104) $x367) $x49)))
 (let (($x364 (= $x185 true)))
 (let (($x279 (= $x40 true)))
 (let (($x365 (and $x74 $x353)))
 (let (($x37 (= $x365 true)))
 (let (($x139 (and $x37 $x279)))
 (let (($x106 (and $x139 $x364)))
 (let (($x348 (and $x106 $x333)))
 (let (($x16 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x155 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x155 (_ bv0 32))))
 (let (($x343 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x149 (ite $x343 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x149 (_ bv1 32))))
 (let (($x331 (and $x345 $x30)))
 (let (($x311 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x314 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x314 (_ bv1 32))))
 (let (($x60 (and $x67 $x331)))
 (let (($x342 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x318 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x318 (_ bv1 32))))
 (let (($x213 (and $x131 $x60)))
 (let (($x296 (and $x213 $x348)))
 (let ((?x258 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x151 (= ?x258 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x358 (=> $x131 $x151)))
 (let (($x298 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x309 (= $x131 $x298)))
 (let (($x5 (= false false)))
 (let (($x248 (= ?x318 (_ bv0 32))))
 (let (($x370 (=> $x248 $x5)))
 (let (($x351 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x166 (= $x248 $x351)))
 (let (($x288 (and (and (and $x166 $x370) $x309) $x358)))
 (let (($x176 (and $x288 $x296)))
 (let ((?x265 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x20 (= ?x265 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x303 (=> $x67 $x20)))
 (let (($x124 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x101 (= $x67 $x124)))
 (let (($x368 (= ?x314 (_ bv0 32))))
 (let (($x24 (=> $x368 $x5)))
 (let (($x182 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x247 (= $x368 $x182)))
 (let (($x305 (and (and (and $x247 $x24) $x101) $x303)))
 (let (($x126 (and $x305 $x176)))
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x225 (= ?x123 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x275 (bvuge ?x155 (_ bv1 32))))
 (let (($x289 (=> $x275 $x225)))
 (let (($x17 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x39 (= $x275 $x17)))
 (let (($x287 (and (and (= $x30 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x30 $x5)) $x39)))
 (let (($x355 (and $x287 $x289)))
 (let (($x286 (and $x355 $x126)))
 (let (($x373 (= ?x64 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x86 (=> $x345 $x373)))
 (let (($x195 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x212 (= $x345 $x195)))
 (let (($x87 (= ?x149 (_ bv0 32))))
 (let (($x290 (=> $x87 $x5)))
 (let (($x108 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x371 (= $x87 $x108)))
 (let (($x304 (and (and (and $x371 $x290) $x212) $x86)))
 (let (($x81 (and $x304 $x286)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x250 (and $x153 $x81)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x363 (and $x27 $x250)))
 (let (($x320 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x164 (and $x320 $x363)))
 (let (($x230 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x190 (and $x230 $x164)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x338 (and $x13 $x190)))
 (let (($x372 (and $x5 $x338)))
 (let (($x257 (= ?x258 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x294 (and $x257 $x372)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x332 (and $x35 $x294)))
 (let (($x31 (and $x5 $x332)))
 (let (($x262 (= ?x265 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x98 (and $x262 $x31)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x146 (and $x113 $x98)))
 (let (($x273 (and $x5 $x146)))
 (let (($x141 (= ?x123 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x132 (and $x141 $x273)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x79 (and $x239 $x132)))
 (let (($x42 (and $x5 $x79)))
 (let (($x200 (= ?x64 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x268 (and $x200 $x42)))
 (let (($x208 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x192)))
 (let (($x152 (=> (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x242 $x208)))))))
 (let (($x161 (bvugt ?x245 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x246 (=> (bvule ?x245 (bvsub (bvadd ?x245 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x161)))))))
 (let (($x76 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x266 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x76)))))))
 (let (($x254 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x181 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x191 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x226 $x254)))))))
 (let (($x168 (and $x191 $x266)))
 (let (($x46 (and $x168 $x246)))
 (let (($x272 (and $x46 $x152)))
 (let (($x277 (and $x272 $x268)))
 (let (($x235 (=> $x277 $x202)))
 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x91 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x64)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x187 (concat ?x51 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x245 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x82 (bvadd ?x245 (_ bv3 32))))
 (let ((?x33 (concat (select input.dst.llvm-mem ?x82) (concat ?x328 ?x187))))
 (let ((?x361 (bvmul (_ bv4294967295 32) ?x33)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x159 (concat ?x179 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x150 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x192 (bvadd ?x150 (_ bv3 32))))
 (let ((?x297 (concat (select input.dst.llvm-mem ?x192) (concat ?x77 ?x159))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x56 (concat ?x29 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x310 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x112 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x241 (bvadd ?x112 (_ bv3 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem ?x241) (concat ?x310 ?x56))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x199)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x340)))
 (let ((?x330 (bvadd (bvadd (bvadd ?x197 ?x307) ?x297) ?x361)))
 (let (($x217 (= ?x330 ?x91)))
 (let (($x202 (= $x217 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x336 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x219 (concat ?x53 (concat ?x336 ?x317)))))
 (let (($x116 (= ?x96 input.dst.llvm-%m)))
 (let (($x333 (= $x116 true)))
 (let (($x49 (= input.dst.llvm-%m ?x96)))
 (let ((?x189 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x264 (= (_ bv0 32) ?x189)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x301 $x121)))
 (let (($x85 (and $x117 $x264)))
 (let (($x201 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x367 (and $x201 $x85)))
 (let (($x177 (forall ((input.ind-%var3495X (_ BitVec 32)) )(let ((?x65 (bvadd (bvmul input.ind-%var3495X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x19))))
 (let ((?x21 (input.spec-%var-m-0.1.1 input.ind-%var3495X)))
 (let (($x18 (input.spec-%var-m-0.0.1 input.ind-%var3495X)))
 (=> $x18 (= ?x21 ?x209))))))))
 ))
 (let (($x28 (forall ((input.ind-%var3494X (_ BitVec 32)) )(let (($x18 (input.spec-%var-m-0.0.1 input.ind-%var3494X)))
 (= $x18 (and (bvule (_ bv0 32) input.ind-%var3494X) (bvult input.ind-%var3494X (_ bv100 32))))))
 ))
 (let (($x104 (and $x28 $x177)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x227 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x36)))))))
 (let (($x353 (= (bvand ?x245 (_ bv4294967292 32)) ?x245)))
 (let (($x180 (= (bvand ?x150 (_ bv4294967292 32)) ?x150)))
 (let (($x211 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x150 (bvsub ?x150 (_ bv4 32))) (bvult ?x150 (bvsub ?x150 (_ bv4 32))))))
 (let (($x83 (and true $x211)))
 (let (($x308 (= (bvand ?x112 (_ bv4294967292 32)) ?x112)))
 (let (($x167 (and $x308 $x83)))
 (let (($x252 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x245 (bvsub ?x245 (_ bv8 32))) (bvult ?x245 (bvsub ?x245 (_ bv8 32))))))
 (let (($x74 (and (and (and true $x252) $x167) $x180)))
 (let (($x92 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x11 (and true $x92)))
 (let (($x169 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x327 (and $x169 $x11)))
 (let (($x142 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x112 (bvsub ?x112 (_ bv12 32))) (bvult ?x112 (bvsub ?x112 (_ bv12 32))))))
 (let (($x40 (and (and (and true $x169) $x142) $x327)))
 (let (($x185 (and (and (and (and (and (and $x40 $x74) $x353) $x227) $x104) $x367) $x49)))
 (let (($x364 (= $x185 true)))
 (let (($x279 (= $x40 true)))
 (let (($x365 (and $x74 $x353)))
 (let (($x37 (= $x365 true)))
 (let (($x139 (and $x37 $x279)))
 (let (($x106 (and $x139 $x364)))
 (let (($x348 (and $x106 $x333)))
 (let (($x16 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x155 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x155 (_ bv0 32))))
 (let (($x343 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x149 (ite $x343 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x149 (_ bv1 32))))
 (let (($x331 (and $x345 $x30)))
 (let (($x311 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x314 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x314 (_ bv1 32))))
 (let (($x60 (and $x67 $x331)))
 (let (($x342 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x318 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x318 (_ bv1 32))))
 (let (($x213 (and $x131 $x60)))
 (let (($x296 (and $x213 $x348)))
 (let ((?x258 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x151 (= ?x258 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x358 (=> $x131 $x151)))
 (let (($x298 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x309 (= $x131 $x298)))
 (let (($x5 (= false false)))
 (let (($x248 (= ?x318 (_ bv0 32))))
 (let (($x370 (=> $x248 $x5)))
 (let (($x351 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x166 (= $x248 $x351)))
 (let (($x288 (and (and (and $x166 $x370) $x309) $x358)))
 (let (($x176 (and $x288 $x296)))
 (let ((?x265 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x20 (= ?x265 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x303 (=> $x67 $x20)))
 (let (($x124 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x101 (= $x67 $x124)))
 (let (($x368 (= ?x314 (_ bv0 32))))
 (let (($x24 (=> $x368 $x5)))
 (let (($x182 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x247 (= $x368 $x182)))
 (let (($x305 (and (and (and $x247 $x24) $x101) $x303)))
 (let (($x126 (and $x305 $x176)))
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x225 (= ?x123 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x275 (bvuge ?x155 (_ bv1 32))))
 (let (($x289 (=> $x275 $x225)))
 (let (($x17 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x39 (= $x275 $x17)))
 (let (($x287 (and (and (= $x30 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x30 $x5)) $x39)))
 (let (($x355 (and $x287 $x289)))
 (let (($x286 (and $x355 $x126)))
 (let (($x373 (= ?x64 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x86 (=> $x345 $x373)))
 (let (($x195 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x212 (= $x345 $x195)))
 (let (($x87 (= ?x149 (_ bv0 32))))
 (let (($x290 (=> $x87 $x5)))
 (let (($x108 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x371 (= $x87 $x108)))
 (let (($x304 (and (and (and $x371 $x290) $x212) $x86)))
 (let (($x81 (and $x304 $x286)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x250 (and $x153 $x81)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x363 (and $x27 $x250)))
 (let (($x320 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x164 (and $x320 $x363)))
 (let (($x230 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x190 (and $x230 $x164)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x338 (and $x13 $x190)))
 (let (($x372 (and $x5 $x338)))
 (let (($x257 (= ?x258 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x294 (and $x257 $x372)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x332 (and $x35 $x294)))
 (let (($x31 (and $x5 $x332)))
 (let (($x262 (= ?x265 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x98 (and $x262 $x31)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x146 (and $x113 $x98)))
 (let (($x273 (and $x5 $x146)))
 (let (($x141 (= ?x123 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x132 (and $x141 $x273)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x79 (and $x239 $x132)))
 (let (($x42 (and $x5 $x79)))
 (let (($x200 (= ?x64 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x268 (and $x200 $x42)))
 (let (($x208 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x192)))
 (let (($x152 (=> (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x242 $x208)))))))
 (let (($x161 (bvugt ?x245 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x246 (=> (bvule ?x245 (bvsub (bvadd ?x245 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x161)))))))
 (let (($x76 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x266 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x76)))))))
 (let (($x254 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x181 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x191 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x226 $x254)))))))
 (let (($x168 (and $x191 $x266)))
 (let (($x46 (and $x168 $x246)))
 (let (($x272 (and $x46 $x152)))
 (let (($x277 (and $x272 $x268)))
 (let (($x235 (=> $x277 $x202)))
 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 218 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x258 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x207 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x70 (bvadd ?x207 ?x258)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x133 (concat ?x148 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x254 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x100 (bvadd ?x254 (_ bv3 32))))
 (let ((?x184 (concat (select input.dst.llvm-mem ?x100) (concat ?x66 ?x133))))
 (let ((?x218 (bvmul (_ bv4294967295 32) ?x184)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x292 (concat ?x61 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x161 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x158 (bvadd ?x161 (_ bv3 32))))
 (let ((?x243 (concat (select input.dst.llvm-mem ?x158) (concat ?x73 ?x292))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x330 (concat ?x361 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x105 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x52 (bvadd ?x105 (_ bv3 32))))
 (let ((?x235 (concat (select input.dst.llvm-mem ?x52) (concat ?x91 ?x330))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x97)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x51)))
 (let ((?x221 (bvadd (bvadd (bvadd ?x187 ?x235) ?x243) ?x218)))
 (let (($x38 (= ?x221 ?x70)))
 (let (($x203 (= $x38 true)))
 (let ((?x363 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x98 (concat ?x294 (concat ?x190 ?x363)))))
 (let (($x125 (= ?x146 input.dst.llvm-%m)))
 (let (($x171 (= $x125 true)))
 (let (($x273 (= input.dst.llvm-%m ?x146)))
 (let ((?x176 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x126 (= (_ bv0 32) ?x176)))
 (let ((?x333 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x333)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x116 $x348)))
 (let (($x286 (and $x296 $x126)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x106 $x286)))
 (let (($x49 (forall ((input.ind-%var3539X (_ BitVec 32)) )(let ((?x85 (bvadd (bvmul input.ind-%var3539X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x219))))
 (let ((?x123 (input.spec-%var-m-0.1.1 input.ind-%var3539X)))
 (let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var3539X)))
 (=> $x5 (= ?x123 ?x26))))))))
 ))
 (let (($x256 (forall ((input.ind-%var3538X (_ BitVec 32)) )(let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var3538X)))
 (= $x5 (and (bvule (_ bv0 32) input.ind-%var3538X) (bvult input.ind-%var3538X (_ bv100 32))))))
 ))
 (let (($x185 (and $x256 $x49)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x325 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x227 $x174)))))))
 (let (($x362 (= (bvand ?x254 (_ bv4294967292 32)) ?x254)))
 (let (($x365 (= (bvand ?x161 (_ bv4294967292 32)) ?x161)))
 (let (($x180 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x161 (bvsub ?x161 (_ bv4 32))) (bvult ?x161 (bvsub ?x161 (_ bv4 32))))))
 (let (($x74 (and true $x180)))
 (let (($x211 (= (bvand ?x105 (_ bv4294967292 32)) ?x105)))
 (let (($x157 (and $x211 $x74)))
 (let (($x293 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x254 (bvsub ?x254 (_ bv8 32))) (bvult ?x254 (bvsub ?x254 (_ bv8 32))))))
 (let (($x169 (and (and (and true $x293) $x157) $x365)))
 (let (($x279 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x139 (and true $x279)))
 (let (($x142 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x170 (and $x142 $x139)))
 (let (($x366 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x105 (bvsub ?x105 (_ bv12 32))) (bvult ?x105 (bvsub ?x105 (_ bv12 32))))))
 (let (($x89 (and (and (and true $x142) $x366) $x170)))
 (let (($x154 (and (and (and (and (and (and $x89 $x169) $x362) $x325) $x185) $x81) $x273)))
 (let (($x302 (= $x154 true)))
 (let (($x344 (= $x89 true)))
 (let (($x163 (and $x169 $x362)))
 (let (($x352 (= $x163 true)))
 (let (($x295 (and $x352 $x344)))
 (let (($x299 (and $x295 $x302)))
 (let (($x282 (and $x299 $x171)))
 (let (($x162 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x341 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x341 (_ bv0 32))))
 (let (($x371 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x10 (ite $x371 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x10 (_ bv0 32))))
 (let (($x271 (and $x345 $x275)))
 (let (($x24 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x210 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x210 (_ bv1 32))))
 (let (($x252 (and $x20 $x271)))
 (let (($x370 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x143 (ite $x370 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x143 (_ bv1 32))))
 (let (($x337 (and $x151 $x252)))
 (let (($x199 (and $x337 $x282)))
 (let (($x60 (= ?x207 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x213 (=> $x151 $x60)))
 (let (($x358 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x288 (= $x151 $x358)))
 (let (($x208 (= false false)))
 (let (($x131 (= ?x143 (_ bv0 32))))
 (let (($x260 (=> $x131 $x208)))
 (let (($x309 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x316 (= $x131 $x309)))
 (let (($x172 (and (and (and $x316 $x260) $x288) $x213)))
 (let (($x340 (and $x172 $x199)))
 (let (($x318 (= ?x258 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x248 (=> $x20 $x318)))
 (let (($x303 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x305 (= $x20 $x303)))
 (let (($x67 (= ?x210 (_ bv0 32))))
 (let (($x334 (=> $x67 $x208)))
 (let (($x101 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x335 (= $x67 $x101)))
 (let (($x166 (and (and (and $x335 $x334) $x305) $x248)))
 (let (($x197 (and $x166 $x340)))
 (let ((?x265 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x314 (= ?x265 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x225 (bvuge ?x341 (_ bv1 32))))
 (let (($x368 (=> $x225 $x314)))
 (let (($x289 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x355 (= $x225 $x289)))
 (let (($x182 (and (and (= $x275 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x275 $x208)) $x355)))
 (let (($x247 (and $x182 $x368)))
 (let (($x261 (and $x247 $x197)))
 (let ((?x272 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x155 (= ?x272 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x373 (bvuge ?x10 (_ bv1 32))))
 (let (($x30 (=> $x373 $x155)))
 (let (($x86 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x304 (= $x373 $x86)))
 (let (($x306 (=> $x345 $x208)))
 (let (($x212 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x267 (= $x345 $x212)))
 (let (($x120 (and (and (and $x267 $x306) $x304) $x30)))
 (let (($x173 (and $x120 $x261)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x310 (and $x108 $x173)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x127 (and $x87 $x310)))
 (let (($x343 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x29 (and $x343 $x127)))
 (let (($x236 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x206 (and $x236 $x29)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x56 (and $x114 $x206)))
 (let (($x346 (and $x208 $x56)))
 (let (($x321 (= ?x207 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x307 (and $x321 $x346)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x88 (and $x13 $x307)))
 (let (($x349 (and $x208 $x88)))
 (let (($x257 (= ?x258 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x15 (and $x257 $x349)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x77 (and $x35 $x15)))
 (let (($x147 (and $x208 $x77)))
 (let (($x262 (= ?x265 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x179 (and $x262 $x147)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x284 (and $x129 $x179)))
 (let (($x159 (and $x208 $x284)))
 (let (($x192 (= ?x272 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x12 (and $x192 $x159)))
 (let (($x63 (bvugt ?x161 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x214 (=> (bvule ?x161 (bvsub (bvadd ?x161 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x63)))))))
 (let (($x128 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x137 (=> (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x128)))))))
 (let (($x82 (bvugt ?x105 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x181 (=> (bvule ?x105 (bvsub (bvadd ?x105 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x269 $x82)))))))
 (let (($x263 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x266 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x263)))))))
 (let (($x168 (and $x266 $x181)))
 (let (($x276 (and $x168 $x137)))
 (let (($x246 (and $x276 $x214)))
 (let (($x297 (and $x246 $x12)))
 (let (($x118 (=> $x297 $x203)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x258 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x207 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x70 (bvadd ?x207 ?x258)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x133 (concat ?x148 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x254 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x100 (bvadd ?x254 (_ bv3 32))))
 (let ((?x184 (concat (select input.dst.llvm-mem ?x100) (concat ?x66 ?x133))))
 (let ((?x218 (bvmul (_ bv4294967295 32) ?x184)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x292 (concat ?x61 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x161 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x158 (bvadd ?x161 (_ bv3 32))))
 (let ((?x243 (concat (select input.dst.llvm-mem ?x158) (concat ?x73 ?x292))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x330 (concat ?x361 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x105 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x52 (bvadd ?x105 (_ bv3 32))))
 (let ((?x235 (concat (select input.dst.llvm-mem ?x52) (concat ?x91 ?x330))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x97)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x51)))
 (let ((?x221 (bvadd (bvadd (bvadd ?x187 ?x235) ?x243) ?x218)))
 (let (($x38 (= ?x221 ?x70)))
 (let (($x203 (= $x38 true)))
 (let ((?x363 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x98 (concat ?x294 (concat ?x190 ?x363)))))
 (let (($x125 (= ?x146 input.dst.llvm-%m)))
 (let (($x171 (= $x125 true)))
 (let (($x273 (= input.dst.llvm-%m ?x146)))
 (let ((?x176 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x126 (= (_ bv0 32) ?x176)))
 (let ((?x333 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x333)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x116 $x348)))
 (let (($x286 (and $x296 $x126)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x106 $x286)))
 (let (($x49 (forall ((input.ind-%var3539X (_ BitVec 32)) )(let ((?x85 (bvadd (bvmul input.ind-%var3539X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x219))))
 (let ((?x123 (input.spec-%var-m-0.1.1 input.ind-%var3539X)))
 (let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var3539X)))
 (=> $x5 (= ?x123 ?x26))))))))
 ))
 (let (($x256 (forall ((input.ind-%var3538X (_ BitVec 32)) )(let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var3538X)))
 (= $x5 (and (bvule (_ bv0 32) input.ind-%var3538X) (bvult input.ind-%var3538X (_ bv100 32))))))
 ))
 (let (($x185 (and $x256 $x49)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x325 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x227 $x174)))))))
 (let (($x362 (= (bvand ?x254 (_ bv4294967292 32)) ?x254)))
 (let (($x365 (= (bvand ?x161 (_ bv4294967292 32)) ?x161)))
 (let (($x180 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x161 (bvsub ?x161 (_ bv4 32))) (bvult ?x161 (bvsub ?x161 (_ bv4 32))))))
 (let (($x74 (and true $x180)))
 (let (($x211 (= (bvand ?x105 (_ bv4294967292 32)) ?x105)))
 (let (($x157 (and $x211 $x74)))
 (let (($x293 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x254 (bvsub ?x254 (_ bv8 32))) (bvult ?x254 (bvsub ?x254 (_ bv8 32))))))
 (let (($x169 (and (and (and true $x293) $x157) $x365)))
 (let (($x279 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x139 (and true $x279)))
 (let (($x142 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x170 (and $x142 $x139)))
 (let (($x366 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x105 (bvsub ?x105 (_ bv12 32))) (bvult ?x105 (bvsub ?x105 (_ bv12 32))))))
 (let (($x89 (and (and (and true $x142) $x366) $x170)))
 (let (($x154 (and (and (and (and (and (and $x89 $x169) $x362) $x325) $x185) $x81) $x273)))
 (let (($x302 (= $x154 true)))
 (let (($x344 (= $x89 true)))
 (let (($x163 (and $x169 $x362)))
 (let (($x352 (= $x163 true)))
 (let (($x295 (and $x352 $x344)))
 (let (($x299 (and $x295 $x302)))
 (let (($x282 (and $x299 $x171)))
 (let (($x162 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x341 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x341 (_ bv0 32))))
 (let (($x371 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x10 (ite $x371 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x10 (_ bv0 32))))
 (let (($x271 (and $x345 $x275)))
 (let (($x24 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x210 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x210 (_ bv1 32))))
 (let (($x252 (and $x20 $x271)))
 (let (($x370 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x143 (ite $x370 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x143 (_ bv1 32))))
 (let (($x337 (and $x151 $x252)))
 (let (($x199 (and $x337 $x282)))
 (let (($x60 (= ?x207 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x213 (=> $x151 $x60)))
 (let (($x358 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x288 (= $x151 $x358)))
 (let (($x208 (= false false)))
 (let (($x131 (= ?x143 (_ bv0 32))))
 (let (($x260 (=> $x131 $x208)))
 (let (($x309 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x316 (= $x131 $x309)))
 (let (($x172 (and (and (and $x316 $x260) $x288) $x213)))
 (let (($x340 (and $x172 $x199)))
 (let (($x318 (= ?x258 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x248 (=> $x20 $x318)))
 (let (($x303 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x305 (= $x20 $x303)))
 (let (($x67 (= ?x210 (_ bv0 32))))
 (let (($x334 (=> $x67 $x208)))
 (let (($x101 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x335 (= $x67 $x101)))
 (let (($x166 (and (and (and $x335 $x334) $x305) $x248)))
 (let (($x197 (and $x166 $x340)))
 (let ((?x265 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x314 (= ?x265 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x225 (bvuge ?x341 (_ bv1 32))))
 (let (($x368 (=> $x225 $x314)))
 (let (($x289 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x355 (= $x225 $x289)))
 (let (($x182 (and (and (= $x275 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x275 $x208)) $x355)))
 (let (($x247 (and $x182 $x368)))
 (let (($x261 (and $x247 $x197)))
 (let ((?x272 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x155 (= ?x272 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x373 (bvuge ?x10 (_ bv1 32))))
 (let (($x30 (=> $x373 $x155)))
 (let (($x86 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x304 (= $x373 $x86)))
 (let (($x306 (=> $x345 $x208)))
 (let (($x212 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x267 (= $x345 $x212)))
 (let (($x120 (and (and (and $x267 $x306) $x304) $x30)))
 (let (($x173 (and $x120 $x261)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x310 (and $x108 $x173)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x127 (and $x87 $x310)))
 (let (($x343 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x29 (and $x343 $x127)))
 (let (($x236 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x206 (and $x236 $x29)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x56 (and $x114 $x206)))
 (let (($x346 (and $x208 $x56)))
 (let (($x321 (= ?x207 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x307 (and $x321 $x346)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x88 (and $x13 $x307)))
 (let (($x349 (and $x208 $x88)))
 (let (($x257 (= ?x258 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x15 (and $x257 $x349)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x77 (and $x35 $x15)))
 (let (($x147 (and $x208 $x77)))
 (let (($x262 (= ?x265 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x179 (and $x262 $x147)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x284 (and $x129 $x179)))
 (let (($x159 (and $x208 $x284)))
 (let (($x192 (= ?x272 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x12 (and $x192 $x159)))
 (let (($x63 (bvugt ?x161 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x214 (=> (bvule ?x161 (bvsub (bvadd ?x161 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x63)))))))
 (let (($x128 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x137 (=> (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x128)))))))
 (let (($x82 (bvugt ?x105 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x181 (=> (bvule ?x105 (bvsub (bvadd ?x105 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x269 $x82)))))))
 (let (($x263 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x266 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x263)))))))
 (let (($x168 (and $x266 $x181)))
 (let (($x276 (and $x168 $x137)))
 (let (($x246 (and $x276 $x214)))
 (let (($x297 (and $x246 $x12)))
 (let (($x118 (=> $x297 $x203)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 218 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x258 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x339 (bvmul (_ bv4294967295 32) ?x258)))
 (let ((?x41 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x339)))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x313 (concat ?x329 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x263 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x269 (bvadd ?x263 (_ bv3 32))))
 (let ((?x104 (concat (select input.dst.llvm-mem ?x269) (concat ?x69 ?x313))))
 (let ((?x201 (bvmul (_ bv4294967295 32) ?x104)))
 (let ((?x250 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x290 (concat ?x250 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x156 (bvadd ?x128 (_ bv3 32))))
 (let ((?x21 (concat (select input.dst.llvm-mem ?x156) (concat ?x84 ?x290))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x221 (concat ?x218 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x278 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x215 (bvadd ?x278 (_ bv3 32))))
 (let ((?x359 (concat (select input.dst.llvm-mem ?x215) (concat ?x38 ?x221))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x285)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x148)))
 (let ((?x140 (bvadd (bvadd (bvadd ?x133 ?x359) ?x21) ?x201)))
 (let (($x189 (= ?x140 ?x41)))
 (let (($x224 (= $x189 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x15 (concat ?x307 (concat ?x206 ?x127)))))
 (let (($x319 (= ?x77 input.dst.llvm-%m)))
 (let (($x122 (= $x319 true)))
 (let (($x147 (= input.dst.llvm-%m ?x77)))
 (let ((?x340 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x197 (= (_ bv0 32) ?x340)))
 (let ((?x171 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (and $x125 $x282)))
 (let (($x261 (and $x199 $x197)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x299 $x261)))
 (let (($x273 (forall ((input.ind-%var3583X (_ BitVec 32)) )(let ((?x286 (bvadd (bvmul input.ind-%var3583X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv1 32))) (select input.dst.llvm-mem ?x286))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv2 32))) ?x98))))
 (let ((?x265 (input.spec-%var-m-0.1.1 input.ind-%var3583X)))
 (let (($x208 (input.spec-%var-m-0.0.1 input.ind-%var3583X)))
 (=> $x208 (= ?x265 ?x338))))))))
 ))
 (let (($x53 (forall ((input.ind-%var3582X (_ BitVec 32)) )(let (($x208 (input.spec-%var-m-0.0.1 input.ind-%var3582X)))
 (= $x208 (and (bvule (_ bv0 32) input.ind-%var3582X) (bvult input.ind-%var3582X (_ bv100 32))))))
 ))
 (let (($x154 (and $x53 $x273)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x325 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x357 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x325 $x42)))))))
 (let (($x237 (= (bvand ?x263 (_ bv4294967292 32)) ?x263)))
 (let (($x163 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x365 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x169 (and true $x365)))
 (let (($x180 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x312 (and $x180 $x169)))
 (let (($x83 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x263 (bvsub ?x263 (_ bv8 32))) (bvult ?x263 (bvsub ?x263 (_ bv8 32))))))
 (let (($x142 (and (and (and true $x83) $x312) $x163)))
 (let (($x344 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x295 (and true $x344)))
 (let (($x366 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x132 (and $x366 $x295)))
 (let (($x40 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x278 (bvsub ?x278 (_ bv12 32))) (bvult ?x278 (bvsub ?x278 (_ bv12 32))))))
 (let (($x322 (and (and (and true $x366) $x40) $x132)))
 (let (($x78 (and (and (and (and (and (and $x322 $x142) $x237) $x357) $x154) $x173) $x147)))
 (let (($x328 (= $x78 true)))
 (let (($x232 (= $x322 true)))
 (let (($x62 (and $x142 $x237)))
 (let (($x347 (= $x62 true)))
 (let (($x45 (and $x347 $x232)))
 (let (($x99 (and $x45 $x328)))
 (let (($x72 (and $x99 $x122)))
 (let (($x107 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x369 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x369 (_ bv1 32))))
 (let (($x267 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x110 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x110 (_ bv1 32))))
 (let (($x350 (and $x155 $x314)))
 (let (($x334 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x103 (ite $x334 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x103 (_ bv0 32))))
 (let (($x293 (and $x20 $x350)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x50 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x50 (_ bv1 32))))
 (let (($x37 (and $x60 $x293)))
 (let (($x97 (and $x37 $x72)))
 (let ((?x27 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x252 (= ?x27 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x337 (=> $x60 $x252)))
 (let (($x213 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x172 (= $x60 $x213)))
 (let (($x63 (= false false)))
 (let (($x151 (= ?x50 (_ bv0 32))))
 (let (($x331 (=> $x151 $x63)))
 (let (($x288 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x57 (= $x151 $x288)))
 (let (($x308 (and (and (and $x57 $x331) $x172) $x337)))
 (let (($x51 (and $x308 $x97)))
 (let ((?x207 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x143 (= ?x207 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x318 (bvuge ?x103 (_ bv1 32))))
 (let (($x131 (=> $x318 $x143)))
 (let (($x248 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x166 (= $x318 $x248)))
 (let (($x309 (and (and (= $x20 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x20 $x63)) $x166)))
 (let (($x316 (and $x309 $x131)))
 (let (($x187 (and $x316 $x51)))
 (let (($x210 (= ?x258 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x67 (=> $x314 $x210)))
 (let (($x368 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x247 (= $x314 $x368)))
 (let (($x225 (= ?x369 (_ bv0 32))))
 (let (($x311 (=> $x225 $x63)))
 (let (($x355 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x182 (= $x225 $x355)))
 (let (($x335 (and (and (and $x182 $x311) $x247) $x67)))
 (let (($x202 (and $x335 $x187)))
 (let ((?x246 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x341 (= ?x246 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x275 (=> $x155 $x341)))
 (let (($x30 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x120 (= $x155 $x30)))
 (let (($x373 (= ?x110 (_ bv0 32))))
 (let (($x16 (=> $x373 $x63)))
 (let (($x304 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x134 (= $x373 $x304)))
 (let (($x287 (and (and (and $x134 $x16) $x120) $x275)))
 (let (($x58 (and $x287 $x202)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x91 (and $x212 $x58)))
 (let (($x345 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x33 (and $x345 $x91)))
 (let (($x371 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x361 (and $x371 $x33)))
 (let (($x165 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x43 (and $x165 $x361)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x330 (and $x149 $x43)))
 (let (($x217 (and $x63 $x330)))
 (let (($x153 (= ?x27 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x235 (and $x153 $x217)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x95 (and $x114 $x235)))
 (let (($x231 (and $x63 $x95)))
 (let (($x321 (= ?x207 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x59 (and $x321 $x231)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x73 (and $x13 $x59)))
 (let (($x222 (and $x63 $x73)))
 (let (($x257 (= ?x258 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x61 (and $x257 $x222)))
 (let (($x242 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x300 (and $x242 $x61)))
 (let (($x292 (and $x63 $x300)))
 (let (($x158 (= ?x246 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x193 (and $x158 $x292)))
 (let (($x80 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x135 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x80)))))))
 (let (($x160 (bvugt ?x263 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x269)))
 (let (($x183 (=> (bvule ?x263 (bvsub (bvadd ?x263 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x160)))))))
 (let (($x100 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x112 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x100)))))))
 (let (($x119 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x181 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x119)))))))
 (let (($x168 (and $x181 $x112)))
 (let (($x233 (and $x168 $x183)))
 (let (($x137 (and $x233 $x135)))
 (let (($x243 (and $x137 $x193)))
 (let (($x291 (=> $x243 $x224)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x258 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x339 (bvmul (_ bv4294967295 32) ?x258)))
 (let ((?x41 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x339)))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x313 (concat ?x329 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x263 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x269 (bvadd ?x263 (_ bv3 32))))
 (let ((?x104 (concat (select input.dst.llvm-mem ?x269) (concat ?x69 ?x313))))
 (let ((?x201 (bvmul (_ bv4294967295 32) ?x104)))
 (let ((?x250 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x290 (concat ?x250 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x156 (bvadd ?x128 (_ bv3 32))))
 (let ((?x21 (concat (select input.dst.llvm-mem ?x156) (concat ?x84 ?x290))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x221 (concat ?x218 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x278 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x215 (bvadd ?x278 (_ bv3 32))))
 (let ((?x359 (concat (select input.dst.llvm-mem ?x215) (concat ?x38 ?x221))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x285)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x148)))
 (let ((?x140 (bvadd (bvadd (bvadd ?x133 ?x359) ?x21) ?x201)))
 (let (($x189 (= ?x140 ?x41)))
 (let (($x224 (= $x189 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x15 (concat ?x307 (concat ?x206 ?x127)))))
 (let (($x319 (= ?x77 input.dst.llvm-%m)))
 (let (($x122 (= $x319 true)))
 (let (($x147 (= input.dst.llvm-%m ?x77)))
 (let ((?x340 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x197 (= (_ bv0 32) ?x340)))
 (let ((?x171 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (and $x125 $x282)))
 (let (($x261 (and $x199 $x197)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x299 $x261)))
 (let (($x273 (forall ((input.ind-%var3583X (_ BitVec 32)) )(let ((?x286 (bvadd (bvmul input.ind-%var3583X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv1 32))) (select input.dst.llvm-mem ?x286))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv2 32))) ?x98))))
 (let ((?x265 (input.spec-%var-m-0.1.1 input.ind-%var3583X)))
 (let (($x208 (input.spec-%var-m-0.0.1 input.ind-%var3583X)))
 (=> $x208 (= ?x265 ?x338))))))))
 ))
 (let (($x53 (forall ((input.ind-%var3582X (_ BitVec 32)) )(let (($x208 (input.spec-%var-m-0.0.1 input.ind-%var3582X)))
 (= $x208 (and (bvule (_ bv0 32) input.ind-%var3582X) (bvult input.ind-%var3582X (_ bv100 32))))))
 ))
 (let (($x154 (and $x53 $x273)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x325 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x357 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x325 $x42)))))))
 (let (($x237 (= (bvand ?x263 (_ bv4294967292 32)) ?x263)))
 (let (($x163 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x365 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x169 (and true $x365)))
 (let (($x180 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x312 (and $x180 $x169)))
 (let (($x83 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x263 (bvsub ?x263 (_ bv8 32))) (bvult ?x263 (bvsub ?x263 (_ bv8 32))))))
 (let (($x142 (and (and (and true $x83) $x312) $x163)))
 (let (($x344 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x295 (and true $x344)))
 (let (($x366 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x132 (and $x366 $x295)))
 (let (($x40 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x278 (bvsub ?x278 (_ bv12 32))) (bvult ?x278 (bvsub ?x278 (_ bv12 32))))))
 (let (($x322 (and (and (and true $x366) $x40) $x132)))
 (let (($x78 (and (and (and (and (and (and $x322 $x142) $x237) $x357) $x154) $x173) $x147)))
 (let (($x328 (= $x78 true)))
 (let (($x232 (= $x322 true)))
 (let (($x62 (and $x142 $x237)))
 (let (($x347 (= $x62 true)))
 (let (($x45 (and $x347 $x232)))
 (let (($x99 (and $x45 $x328)))
 (let (($x72 (and $x99 $x122)))
 (let (($x107 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x369 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x369 (_ bv1 32))))
 (let (($x267 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x110 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x110 (_ bv1 32))))
 (let (($x350 (and $x155 $x314)))
 (let (($x334 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x103 (ite $x334 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x103 (_ bv0 32))))
 (let (($x293 (and $x20 $x350)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x50 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x50 (_ bv1 32))))
 (let (($x37 (and $x60 $x293)))
 (let (($x97 (and $x37 $x72)))
 (let ((?x27 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x252 (= ?x27 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x337 (=> $x60 $x252)))
 (let (($x213 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x172 (= $x60 $x213)))
 (let (($x63 (= false false)))
 (let (($x151 (= ?x50 (_ bv0 32))))
 (let (($x331 (=> $x151 $x63)))
 (let (($x288 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x57 (= $x151 $x288)))
 (let (($x308 (and (and (and $x57 $x331) $x172) $x337)))
 (let (($x51 (and $x308 $x97)))
 (let ((?x207 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x143 (= ?x207 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x318 (bvuge ?x103 (_ bv1 32))))
 (let (($x131 (=> $x318 $x143)))
 (let (($x248 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x166 (= $x318 $x248)))
 (let (($x309 (and (and (= $x20 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x20 $x63)) $x166)))
 (let (($x316 (and $x309 $x131)))
 (let (($x187 (and $x316 $x51)))
 (let (($x210 (= ?x258 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x67 (=> $x314 $x210)))
 (let (($x368 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x247 (= $x314 $x368)))
 (let (($x225 (= ?x369 (_ bv0 32))))
 (let (($x311 (=> $x225 $x63)))
 (let (($x355 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x182 (= $x225 $x355)))
 (let (($x335 (and (and (and $x182 $x311) $x247) $x67)))
 (let (($x202 (and $x335 $x187)))
 (let ((?x246 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x341 (= ?x246 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x275 (=> $x155 $x341)))
 (let (($x30 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x120 (= $x155 $x30)))
 (let (($x373 (= ?x110 (_ bv0 32))))
 (let (($x16 (=> $x373 $x63)))
 (let (($x304 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x134 (= $x373 $x304)))
 (let (($x287 (and (and (and $x134 $x16) $x120) $x275)))
 (let (($x58 (and $x287 $x202)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x91 (and $x212 $x58)))
 (let (($x345 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x33 (and $x345 $x91)))
 (let (($x371 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x361 (and $x371 $x33)))
 (let (($x165 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x43 (and $x165 $x361)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x330 (and $x149 $x43)))
 (let (($x217 (and $x63 $x330)))
 (let (($x153 (= ?x27 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x235 (and $x153 $x217)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x95 (and $x114 $x235)))
 (let (($x231 (and $x63 $x95)))
 (let (($x321 (= ?x207 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x59 (and $x321 $x231)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x73 (and $x13 $x59)))
 (let (($x222 (and $x63 $x73)))
 (let (($x257 (= ?x258 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x61 (and $x257 $x222)))
 (let (($x242 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x300 (and $x242 $x61)))
 (let (($x292 (and $x63 $x300)))
 (let (($x158 (= ?x246 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x193 (and $x158 $x292)))
 (let (($x80 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x135 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x80)))))))
 (let (($x160 (bvugt ?x263 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x269)))
 (let (($x183 (=> (bvule ?x263 (bvsub (bvadd ?x263 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x160)))))))
 (let (($x100 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x112 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x100)))))))
 (let (($x119 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x181 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x119)))))))
 (let (($x168 (and $x181 $x112)))
 (let (($x233 (and $x168 $x183)))
 (let (($x137 (and $x233 $x135)))
 (let (($x243 (and $x137 $x193)))
 (let (($x291 (=> $x243 $x224)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 219 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x14 (bvmul (_ bv4294967295 32) ?x207)))
 (let ((?x87 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x19 (bvadd ?x87 ?x14)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x116 (concat ?x26 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x119 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x102 (bvadd ?x119 (_ bv3 32))))
 (let ((?x49 (concat (select input.dst.llvm-mem ?x102) (concat ?x268 ?x116))))
 (let ((?x255 (bvmul (_ bv4294967295 32) ?x49)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x227 (concat ?x9 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x306 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x160 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x150 (bvadd ?x160 (_ bv3 32))))
 (let ((?x174 (concat (select input.dst.llvm-mem ?x150) (concat ?x306 ?x227))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x140 (concat ?x201 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x339 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x253 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x138 (bvadd ?x253 (_ bv3 32))))
 (let ((?x224 (concat (select input.dst.llvm-mem ?x138) (concat ?x339 ?x140))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x145)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x329)))
 (let ((?x348 (bvadd (bvadd (bvadd ?x313 ?x224) ?x174) ?x255)))
 (let (($x264 (= ?x348 ?x19)))
 (let (($x296 (= $x264 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x59 (concat ?x235 (concat ?x43 ?x33)))))
 (let (($x44 (= ?x73 input.dst.llvm-%m)))
 (let (($x22 (= $x44 true)))
 (let (($x222 (= input.dst.llvm-%m ?x73)))
 (let ((?x51 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x187 (= (_ bv0 32) ?x51)))
 (let ((?x122 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x319 $x72)))
 (let (($x202 (and $x97 $x187)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x99 $x202)))
 (let (($x147 (forall ((input.ind-%var3627X (_ BitVec 32)) )(let ((?x261 (bvadd (bvmul input.ind-%var3627X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem ?x261))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv2 32))) ?x15))))
 (let ((?x258 (input.spec-%var-m-0.1.1 input.ind-%var3627X)))
 (let (($x63 (input.spec-%var-m-0.0.1 input.ind-%var3627X)))
 (=> $x63 (= ?x258 ?x56))))))))
 ))
 (let (($x294 (forall ((input.ind-%var3626X (_ BitVec 32)) )(let (($x63 (input.spec-%var-m-0.0.1 input.ind-%var3626X)))
 (= $x63 (and (bvule (_ bv0 32) input.ind-%var3626X) (bvult input.ind-%var3626X (_ bv100 32))))))
 ))
 (let (($x78 (and $x294 $x147)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x357 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x317 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x357 $x159)))))))
 (let (($x11 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x62 (= (bvand ?x160 (_ bv4294967292 32)) ?x160)))
 (let (($x163 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x160 (bvsub ?x160 (_ bv4 32))) (bvult ?x160 (bvsub ?x160 (_ bv4 32))))))
 (let (($x142 (and true $x163)))
 (let (($x365 (= (bvand ?x253 (_ bv4294967292 32)) ?x253)))
 (let (($x196 (and $x365 $x142)))
 (let (($x74 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x119 (bvsub ?x119 (_ bv8 32))) (bvult ?x119 (bvsub ?x119 (_ bv8 32))))))
 (let (($x366 (and (and (and true $x74) $x196) $x62)))
 (let (($x232 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x45 (and true $x232)))
 (let (($x40 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x179 (and $x40 $x45)))
 (let (($x89 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x253 (bvsub ?x253 (_ bv12 32))) (bvult ?x253 (bvsub ?x253 (_ bv12 32))))))
 (let (($x223 (and (and (and true $x40) $x89) $x179)))
 (let (($x23 (and (and (and (and (and (and $x223 $x366) $x11) $x317) $x78) $x58) $x222)))
 (let (($x66 (= $x23 true)))
 (let (($x65 (= $x223 true)))
 (let (($x228 (and $x366 $x11)))
 (let (($x92 (= $x228 true)))
 (let (($x251 (and $x92 $x65)))
 (let (($x326 (and $x251 $x66)))
 (let (($x90 (and $x326 $x22)))
 (let (($x311 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x124 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x124 (_ bv1 32))))
 (let (($x134 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x17 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x17 (_ bv0 32))))
 (let (($x167 (and $x155 $x210)))
 (let (($x342 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x298 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x298 (_ bv0 32))))
 (let (($x83 (and $x318 $x167)))
 (let (($x331 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x75 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x75 (_ bv1 32))))
 (let (($x352 (and $x252 $x83)))
 (let (($x285 (and $x352 $x90)))
 (let (($x293 (= ?x87 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x37 (=> $x252 $x293)))
 (let (($x337 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x308 (= $x252 $x337)))
 (let (($x80 (= false false)))
 (let (($x60 (= ?x75 (_ bv0 32))))
 (let (($x271 (=> $x60 $x80)))
 (let (($x172 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x324 (= $x60 $x172)))
 (let (($x211 (and (and (and $x324 $x271) $x308) $x37)))
 (let (($x148 (and $x211 $x285)))
 (let ((?x27 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x50 (= ?x27 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x143 (bvuge ?x298 (_ bv1 32))))
 (let (($x151 (=> $x143 $x50)))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x316 (= $x143 $x131)))
 (let (($x288 (and (and (= $x318 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x318 $x80)) $x316)))
 (let (($x57 (and $x288 $x151)))
 (let (($x133 (and $x57 $x148)))
 (let (($x103 (= ?x207 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x20 (=> $x210 $x103)))
 (let (($x67 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x335 (= $x210 $x67)))
 (let (($x314 (= ?x124 (_ bv0 32))))
 (let (($x24 (=> $x314 $x80)))
 (let (($x247 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x101 (= $x314 $x247)))
 (let (($x351 (and (and (and $x101 $x24) $x335) $x20)))
 (let (($x118 (and $x351 $x133)))
 (let ((?x137 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x369 (= ?x137 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x341 (bvuge ?x17 (_ bv1 32))))
 (let (($x225 (=> $x341 $x369)))
 (let (($x275 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x287 (= $x341 $x275)))
 (let (($x162 (=> $x155 $x80)))
 (let (($x120 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x39 (= $x155 $x120)))
 (let (($x182 (and (and (and $x39 $x162) $x287) $x225)))
 (let (($x70 (and $x182 $x118)))
 (let (($x304 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x38 (and $x304 $x70)))
 (let (($x373 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x184 (and $x373 $x38)))
 (let (($x267 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x218 (and $x267 $x184)))
 (let (($x195 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x356 (and $x195 $x218)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x221 (and $x10 $x356)))
 (let (($x203 (and $x80 $x221)))
 (let (($x108 (= ?x87 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x359 (and $x108 $x203)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x121 (and $x149 $x359)))
 (let (($x229 (and $x80 $x121)))
 (let (($x153 (= ?x27 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x216 (and $x153 $x229)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x84 (and $x114 $x216)))
 (let (($x25 (and $x80 $x84)))
 (let (($x321 (= ?x207 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x250 (and $x321 $x25)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x283 (and $x175 $x250)))
 (let (($x290 (and $x80 $x283)))
 (let (($x156 (= ?x137 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x36 (and $x156 $x290)))
 (let (($x46 (bvugt ?x160 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x64 (=> (bvule ?x160 (bvsub (bvadd ?x160 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x46)))))))
 (let (($x281 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x68 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x281)))))))
 (let (($x269 (bvugt ?x253 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x105 (=> (bvule ?x253 (bvsub (bvadd ?x253 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x269)))))))
 (let (($x54 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x112 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x54)))))))
 (let (($x168 (and $x112 $x105)))
 (let (($x111 (and $x168 $x68)))
 (let (($x183 (and $x111 $x64)))
 (let (($x21 (and $x183 $x36)))
 (let (($x238 (=> $x21 $x296)))
 (not $x238)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x14 (bvmul (_ bv4294967295 32) ?x207)))
 (let ((?x87 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x19 (bvadd ?x87 ?x14)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x116 (concat ?x26 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x119 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x102 (bvadd ?x119 (_ bv3 32))))
 (let ((?x49 (concat (select input.dst.llvm-mem ?x102) (concat ?x268 ?x116))))
 (let ((?x255 (bvmul (_ bv4294967295 32) ?x49)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x227 (concat ?x9 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x306 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x160 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x150 (bvadd ?x160 (_ bv3 32))))
 (let ((?x174 (concat (select input.dst.llvm-mem ?x150) (concat ?x306 ?x227))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x140 (concat ?x201 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x339 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x253 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x138 (bvadd ?x253 (_ bv3 32))))
 (let ((?x224 (concat (select input.dst.llvm-mem ?x138) (concat ?x339 ?x140))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x145)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x329)))
 (let ((?x348 (bvadd (bvadd (bvadd ?x313 ?x224) ?x174) ?x255)))
 (let (($x264 (= ?x348 ?x19)))
 (let (($x296 (= $x264 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x59 (concat ?x235 (concat ?x43 ?x33)))))
 (let (($x44 (= ?x73 input.dst.llvm-%m)))
 (let (($x22 (= $x44 true)))
 (let (($x222 (= input.dst.llvm-%m ?x73)))
 (let ((?x51 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x187 (= (_ bv0 32) ?x51)))
 (let ((?x122 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x319 $x72)))
 (let (($x202 (and $x97 $x187)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x99 $x202)))
 (let (($x147 (forall ((input.ind-%var3627X (_ BitVec 32)) )(let ((?x261 (bvadd (bvmul input.ind-%var3627X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem ?x261))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv2 32))) ?x15))))
 (let ((?x258 (input.spec-%var-m-0.1.1 input.ind-%var3627X)))
 (let (($x63 (input.spec-%var-m-0.0.1 input.ind-%var3627X)))
 (=> $x63 (= ?x258 ?x56))))))))
 ))
 (let (($x294 (forall ((input.ind-%var3626X (_ BitVec 32)) )(let (($x63 (input.spec-%var-m-0.0.1 input.ind-%var3626X)))
 (= $x63 (and (bvule (_ bv0 32) input.ind-%var3626X) (bvult input.ind-%var3626X (_ bv100 32))))))
 ))
 (let (($x78 (and $x294 $x147)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x357 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x317 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x357 $x159)))))))
 (let (($x11 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x62 (= (bvand ?x160 (_ bv4294967292 32)) ?x160)))
 (let (($x163 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x160 (bvsub ?x160 (_ bv4 32))) (bvult ?x160 (bvsub ?x160 (_ bv4 32))))))
 (let (($x142 (and true $x163)))
 (let (($x365 (= (bvand ?x253 (_ bv4294967292 32)) ?x253)))
 (let (($x196 (and $x365 $x142)))
 (let (($x74 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x119 (bvsub ?x119 (_ bv8 32))) (bvult ?x119 (bvsub ?x119 (_ bv8 32))))))
 (let (($x366 (and (and (and true $x74) $x196) $x62)))
 (let (($x232 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x45 (and true $x232)))
 (let (($x40 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x179 (and $x40 $x45)))
 (let (($x89 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x253 (bvsub ?x253 (_ bv12 32))) (bvult ?x253 (bvsub ?x253 (_ bv12 32))))))
 (let (($x223 (and (and (and true $x40) $x89) $x179)))
 (let (($x23 (and (and (and (and (and (and $x223 $x366) $x11) $x317) $x78) $x58) $x222)))
 (let (($x66 (= $x23 true)))
 (let (($x65 (= $x223 true)))
 (let (($x228 (and $x366 $x11)))
 (let (($x92 (= $x228 true)))
 (let (($x251 (and $x92 $x65)))
 (let (($x326 (and $x251 $x66)))
 (let (($x90 (and $x326 $x22)))
 (let (($x311 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x124 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x124 (_ bv1 32))))
 (let (($x134 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x17 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x17 (_ bv0 32))))
 (let (($x167 (and $x155 $x210)))
 (let (($x342 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x298 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x298 (_ bv0 32))))
 (let (($x83 (and $x318 $x167)))
 (let (($x331 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x75 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x75 (_ bv1 32))))
 (let (($x352 (and $x252 $x83)))
 (let (($x285 (and $x352 $x90)))
 (let (($x293 (= ?x87 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x37 (=> $x252 $x293)))
 (let (($x337 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x308 (= $x252 $x337)))
 (let (($x80 (= false false)))
 (let (($x60 (= ?x75 (_ bv0 32))))
 (let (($x271 (=> $x60 $x80)))
 (let (($x172 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x324 (= $x60 $x172)))
 (let (($x211 (and (and (and $x324 $x271) $x308) $x37)))
 (let (($x148 (and $x211 $x285)))
 (let ((?x27 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x50 (= ?x27 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x143 (bvuge ?x298 (_ bv1 32))))
 (let (($x151 (=> $x143 $x50)))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x316 (= $x143 $x131)))
 (let (($x288 (and (and (= $x318 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x318 $x80)) $x316)))
 (let (($x57 (and $x288 $x151)))
 (let (($x133 (and $x57 $x148)))
 (let (($x103 (= ?x207 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x20 (=> $x210 $x103)))
 (let (($x67 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x335 (= $x210 $x67)))
 (let (($x314 (= ?x124 (_ bv0 32))))
 (let (($x24 (=> $x314 $x80)))
 (let (($x247 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x101 (= $x314 $x247)))
 (let (($x351 (and (and (and $x101 $x24) $x335) $x20)))
 (let (($x118 (and $x351 $x133)))
 (let ((?x137 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x369 (= ?x137 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x341 (bvuge ?x17 (_ bv1 32))))
 (let (($x225 (=> $x341 $x369)))
 (let (($x275 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x287 (= $x341 $x275)))
 (let (($x162 (=> $x155 $x80)))
 (let (($x120 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x39 (= $x155 $x120)))
 (let (($x182 (and (and (and $x39 $x162) $x287) $x225)))
 (let (($x70 (and $x182 $x118)))
 (let (($x304 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x38 (and $x304 $x70)))
 (let (($x373 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x184 (and $x373 $x38)))
 (let (($x267 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x218 (and $x267 $x184)))
 (let (($x195 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x356 (and $x195 $x218)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x221 (and $x10 $x356)))
 (let (($x203 (and $x80 $x221)))
 (let (($x108 (= ?x87 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x359 (and $x108 $x203)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x121 (and $x149 $x359)))
 (let (($x229 (and $x80 $x121)))
 (let (($x153 (= ?x27 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x216 (and $x153 $x229)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x84 (and $x114 $x216)))
 (let (($x25 (and $x80 $x84)))
 (let (($x321 (= ?x207 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x250 (and $x321 $x25)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x283 (and $x175 $x250)))
 (let (($x290 (and $x80 $x283)))
 (let (($x156 (= ?x137 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x36 (and $x156 $x290)))
 (let (($x46 (bvugt ?x160 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x64 (=> (bvule ?x160 (bvsub (bvadd ?x160 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x46)))))))
 (let (($x281 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x68 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x281)))))))
 (let (($x269 (bvugt ?x253 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x105 (=> (bvule ?x253 (bvsub (bvadd ?x253 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x269)))))))
 (let (($x54 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x112 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x54)))))))
 (let (($x168 (and $x112 $x105)))
 (let (($x111 (and $x168 $x68)))
 (let (($x183 (and $x111 $x64)))
 (let (($x21 (and $x183 $x36)))
 (let (($x238 (=> $x21 $x296)))
 (not $x238)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 219 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x345 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x219 (bvadd ?x345 ?x183)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x125 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x54 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x6 (bvadd ?x54 (_ bv3 32))))
 (let ((?x332 (concat (select input.dst.llvm-mem ?x6) (concat ?x302 ?x171))))
 (let ((?x154 (bvmul (_ bv4294967295 32) ?x332)))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x91 (concat ?x325 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x281 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x161 (bvadd ?x281 (_ bv3 32))))
 (let ((?x205 (concat (select input.dst.llvm-mem ?x161) (concat ?x192 ?x91))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x348 (concat ?x255 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x274 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x320 (bvadd ?x274 (_ bv3 32))))
 (let ((?x238 (concat (select input.dst.llvm-mem ?x320) (concat ?x19 ?x348))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x333)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x26)))
 (let ((?x244 (bvadd (bvadd (bvadd ?x116 ?x238) ?x205) ?x154)))
 (let (($x126 (= ?x244 ?x219)))
 (let (($x199 (= $x126 true)))
 (let ((?x184 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x356 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x216 (concat ?x359 (concat ?x356 ?x184)))))
 (let (($x188 (= ?x84 input.dst.llvm-%m)))
 (let (($x115 (= $x188 true)))
 (let (($x25 (= input.dst.llvm-%m ?x84)))
 (let ((?x148 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x133 (= (_ bv0 32) ?x148)))
 (let ((?x22 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (and $x44 $x90)))
 (let (($x118 (and $x285 $x133)))
 (let (($x326 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x326 $x118)))
 (let (($x222 (forall ((input.ind-%var3671X (_ BitVec 32)) )(let ((?x202 (bvadd (bvmul input.ind-%var3671X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x59))))
 (let ((?x207 (input.spec-%var-m-0.1.1 input.ind-%var3671X)))
 (let (($x80 (input.spec-%var-m-0.0.1 input.ind-%var3671X)))
 (=> $x80 (= ?x207 ?x330))))))))
 ))
 (let (($x307 (forall ((input.ind-%var3670X (_ BitVec 32)) )(let (($x80 (input.spec-%var-m-0.0.1 input.ind-%var3670X)))
 (= $x80 (and (bvule (_ bv0 32) input.ind-%var3670X) (bvult input.ind-%var3670X (_ bv100 32))))))
 ))
 (let (($x23 (and $x307 $x222)))
 (let (($x292 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x317 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x363 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x317 $x292)))))))
 (let (($x139 (= (bvand ?x54 (_ bv4294967292 32)) ?x54)))
 (let (($x228 (= (bvand ?x281 (_ bv4294967292 32)) ?x281)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x281 (bvsub ?x281 (_ bv4 32))) (bvult ?x281 (bvsub ?x281 (_ bv4 32))))))
 (let (($x366 (and true $x62)))
 (let (($x163 (= (bvand ?x274 (_ bv4294967292 32)) ?x274)))
 (let (($x79 (and $x163 $x366)))
 (let (($x169 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x54 (bvsub ?x54 (_ bv8 32))) (bvult ?x54 (bvsub ?x54 (_ bv8 32))))))
 (let (($x40 (and (and (and true $x169) $x79) $x228)))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x251 (and true $x65)))
 (let (($x89 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x61 (and $x89 $x251)))
 (let (($x322 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x274 (bvsub ?x274 (_ bv12 32))) (bvult ?x274 (bvsub ?x274 (_ bv12 32))))))
 (let (($x94 (and (and (and true $x89) $x322) $x61)))
 (let (($x209 (and (and (and (and (and (and $x94 $x40) $x139) $x363) $x23) $x70) $x25)))
 (let (($x69 (= $x209 true)))
 (let (($x85 (= $x94 true)))
 (let (($x194 (and $x40 $x139)))
 (let (($x279 (= $x194 true)))
 (let (($x28 (and $x279 $x85)))
 (let (($x301 (and $x28 $x69)))
 (let (($x178 (and $x301 $x115)))
 (let (($x24 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x303 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x303 (_ bv0 32))))
 (let (($x39 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x289 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x289 (_ bv1 32))))
 (let (($x157 (and $x369 $x210)))
 (let (($x370 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x358 (ite $x370 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x358 (_ bv0 32))))
 (let (($x74 (and $x143 $x157)))
 (let (($x271 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x7 (ite $x271 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x7 (_ bv1 32))))
 (let (($x347 (and $x293 $x74)))
 (let (($x145 (and $x347 $x178)))
 (let (($x83 (= ?x345 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x352 (=> $x293 $x83)))
 (let (($x37 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x211 (= $x293 $x37)))
 (let (($x46 (= false false)))
 (let (($x252 (= ?x7 (_ bv0 32))))
 (let (($x350 (=> $x252 $x46)))
 (let (($x308 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x34 (= $x252 $x308)))
 (let (($x180 (and (and (and $x34 $x350) $x211) $x352)))
 (let (($x329 (and $x180 $x145)))
 (let ((?x87 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x75 (= ?x87 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x50 (bvuge ?x358 (_ bv1 32))))
 (let (($x60 (=> $x50 $x75)))
 (let (($x151 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x57 (= $x50 $x151)))
 (let (($x172 (and (and (= $x143 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x143 $x46)) $x57)))
 (let (($x324 (and $x172 $x60)))
 (let (($x313 (and $x324 $x329)))
 (let ((?x27 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x298 (= ?x27 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x103 (bvuge ?x303 (_ bv1 32))))
 (let (($x318 (=> $x103 $x298)))
 (let (($x20 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x351 (= $x103 $x20)))
 (let (($x166 (and (and (= $x210 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x210 $x46)) $x351)))
 (let (($x309 (and $x166 $x318)))
 (let (($x189 (and $x309 $x313)))
 (let (($x124 (= ?x183 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x314 (=> $x369 $x124)))
 (let (($x225 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x182 (= $x369 $x225)))
 (let (($x341 (= ?x289 (_ bv0 32))))
 (let (($x107 (=> $x341 $x46)))
 (let (($x287 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x355 (= $x341 $x287)))
 (let (($x101 (and (and (and $x355 $x107) $x182) $x314)))
 (let (($x117 (and $x101 $x189)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x339 (and $x120 $x117)))
 (let (($x155 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x104 (and $x155 $x339)))
 (let (($x134 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x201 (and $x134 $x104)))
 (let (($x86 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x177 (and $x86 $x201)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x140 (and $x110 $x177)))
 (let (($x41 (and $x46 $x140)))
 (let (($x212 (= ?x345 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x224 (and $x212 $x41)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x185 (and $x10 $x224)))
 (let (($x367 (and $x46 $x185)))
 (let (($x108 (= ?x87 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x310 (and $x108 $x367)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x306 (and $x149 $x310)))
 (let (($x323 (and $x46 $x306)))
 (let (($x153 (= ?x27 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x9 (and $x153 $x323)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x291 (and $x152 $x9)))
 (let (($x227 (and $x46 $x291)))
 (let (($x150 (= ?x183 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x200 (and $x150 $x227)))
 (let (($x276 (bvugt ?x281 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x272 (=> (bvule ?x281 (bvsub (bvadd ?x281 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x276)))))))
 (let (($x241 (bvugt ?x54 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x71 (=> (bvule ?x54 (bvsub (bvadd ?x54 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x269 $x241)))))))
 (let (($x102 (bvugt ?x274 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x320)))
 (let (($x278 (=> (bvule ?x274 (bvsub (bvadd ?x274 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x249 $x102)))))))
 (let (($x48 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x253 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x263 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x253)))
 (let (($x105 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x263 $x48)))))))
 (let (($x168 (and $x105 $x278)))
 (let (($x47 (and $x168 $x71)))
 (let (($x68 (and $x47 $x272)))
 (let (($x174 (and $x68 $x200)))
 (let (($x31 (=> $x174 $x199)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x345 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x219 (bvadd ?x345 ?x183)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x125 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x54 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x6 (bvadd ?x54 (_ bv3 32))))
 (let ((?x332 (concat (select input.dst.llvm-mem ?x6) (concat ?x302 ?x171))))
 (let ((?x154 (bvmul (_ bv4294967295 32) ?x332)))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x91 (concat ?x325 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x281 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x161 (bvadd ?x281 (_ bv3 32))))
 (let ((?x205 (concat (select input.dst.llvm-mem ?x161) (concat ?x192 ?x91))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x348 (concat ?x255 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x274 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x320 (bvadd ?x274 (_ bv3 32))))
 (let ((?x238 (concat (select input.dst.llvm-mem ?x320) (concat ?x19 ?x348))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x333)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x26)))
 (let ((?x244 (bvadd (bvadd (bvadd ?x116 ?x238) ?x205) ?x154)))
 (let (($x126 (= ?x244 ?x219)))
 (let (($x199 (= $x126 true)))
 (let ((?x184 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x356 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x216 (concat ?x359 (concat ?x356 ?x184)))))
 (let (($x188 (= ?x84 input.dst.llvm-%m)))
 (let (($x115 (= $x188 true)))
 (let (($x25 (= input.dst.llvm-%m ?x84)))
 (let ((?x148 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x133 (= (_ bv0 32) ?x148)))
 (let ((?x22 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (and $x44 $x90)))
 (let (($x118 (and $x285 $x133)))
 (let (($x326 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x326 $x118)))
 (let (($x222 (forall ((input.ind-%var3671X (_ BitVec 32)) )(let ((?x202 (bvadd (bvmul input.ind-%var3671X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x59))))
 (let ((?x207 (input.spec-%var-m-0.1.1 input.ind-%var3671X)))
 (let (($x80 (input.spec-%var-m-0.0.1 input.ind-%var3671X)))
 (=> $x80 (= ?x207 ?x330))))))))
 ))
 (let (($x307 (forall ((input.ind-%var3670X (_ BitVec 32)) )(let (($x80 (input.spec-%var-m-0.0.1 input.ind-%var3670X)))
 (= $x80 (and (bvule (_ bv0 32) input.ind-%var3670X) (bvult input.ind-%var3670X (_ bv100 32))))))
 ))
 (let (($x23 (and $x307 $x222)))
 (let (($x292 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x317 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x363 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x317 $x292)))))))
 (let (($x139 (= (bvand ?x54 (_ bv4294967292 32)) ?x54)))
 (let (($x228 (= (bvand ?x281 (_ bv4294967292 32)) ?x281)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x281 (bvsub ?x281 (_ bv4 32))) (bvult ?x281 (bvsub ?x281 (_ bv4 32))))))
 (let (($x366 (and true $x62)))
 (let (($x163 (= (bvand ?x274 (_ bv4294967292 32)) ?x274)))
 (let (($x79 (and $x163 $x366)))
 (let (($x169 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x54 (bvsub ?x54 (_ bv8 32))) (bvult ?x54 (bvsub ?x54 (_ bv8 32))))))
 (let (($x40 (and (and (and true $x169) $x79) $x228)))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x251 (and true $x65)))
 (let (($x89 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x61 (and $x89 $x251)))
 (let (($x322 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x274 (bvsub ?x274 (_ bv12 32))) (bvult ?x274 (bvsub ?x274 (_ bv12 32))))))
 (let (($x94 (and (and (and true $x89) $x322) $x61)))
 (let (($x209 (and (and (and (and (and (and $x94 $x40) $x139) $x363) $x23) $x70) $x25)))
 (let (($x69 (= $x209 true)))
 (let (($x85 (= $x94 true)))
 (let (($x194 (and $x40 $x139)))
 (let (($x279 (= $x194 true)))
 (let (($x28 (and $x279 $x85)))
 (let (($x301 (and $x28 $x69)))
 (let (($x178 (and $x301 $x115)))
 (let (($x24 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x303 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x303 (_ bv0 32))))
 (let (($x39 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x289 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x289 (_ bv1 32))))
 (let (($x157 (and $x369 $x210)))
 (let (($x370 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x358 (ite $x370 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x358 (_ bv0 32))))
 (let (($x74 (and $x143 $x157)))
 (let (($x271 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x7 (ite $x271 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x7 (_ bv1 32))))
 (let (($x347 (and $x293 $x74)))
 (let (($x145 (and $x347 $x178)))
 (let (($x83 (= ?x345 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x352 (=> $x293 $x83)))
 (let (($x37 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x211 (= $x293 $x37)))
 (let (($x46 (= false false)))
 (let (($x252 (= ?x7 (_ bv0 32))))
 (let (($x350 (=> $x252 $x46)))
 (let (($x308 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x34 (= $x252 $x308)))
 (let (($x180 (and (and (and $x34 $x350) $x211) $x352)))
 (let (($x329 (and $x180 $x145)))
 (let ((?x87 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x75 (= ?x87 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x50 (bvuge ?x358 (_ bv1 32))))
 (let (($x60 (=> $x50 $x75)))
 (let (($x151 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x57 (= $x50 $x151)))
 (let (($x172 (and (and (= $x143 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x143 $x46)) $x57)))
 (let (($x324 (and $x172 $x60)))
 (let (($x313 (and $x324 $x329)))
 (let ((?x27 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x298 (= ?x27 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x103 (bvuge ?x303 (_ bv1 32))))
 (let (($x318 (=> $x103 $x298)))
 (let (($x20 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x351 (= $x103 $x20)))
 (let (($x166 (and (and (= $x210 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x210 $x46)) $x351)))
 (let (($x309 (and $x166 $x318)))
 (let (($x189 (and $x309 $x313)))
 (let (($x124 (= ?x183 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x314 (=> $x369 $x124)))
 (let (($x225 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x182 (= $x369 $x225)))
 (let (($x341 (= ?x289 (_ bv0 32))))
 (let (($x107 (=> $x341 $x46)))
 (let (($x287 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x355 (= $x341 $x287)))
 (let (($x101 (and (and (and $x355 $x107) $x182) $x314)))
 (let (($x117 (and $x101 $x189)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x339 (and $x120 $x117)))
 (let (($x155 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x104 (and $x155 $x339)))
 (let (($x134 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x201 (and $x134 $x104)))
 (let (($x86 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x177 (and $x86 $x201)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x140 (and $x110 $x177)))
 (let (($x41 (and $x46 $x140)))
 (let (($x212 (= ?x345 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x224 (and $x212 $x41)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x185 (and $x10 $x224)))
 (let (($x367 (and $x46 $x185)))
 (let (($x108 (= ?x87 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x310 (and $x108 $x367)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x306 (and $x149 $x310)))
 (let (($x323 (and $x46 $x306)))
 (let (($x153 (= ?x27 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x9 (and $x153 $x323)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x291 (and $x152 $x9)))
 (let (($x227 (and $x46 $x291)))
 (let (($x150 (= ?x183 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x200 (and $x150 $x227)))
 (let (($x276 (bvugt ?x281 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x272 (=> (bvule ?x281 (bvsub (bvadd ?x281 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x276)))))))
 (let (($x241 (bvugt ?x54 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x71 (=> (bvule ?x54 (bvsub (bvadd ?x54 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x269 $x241)))))))
 (let (($x102 (bvugt ?x274 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x320)))
 (let (($x278 (=> (bvule ?x274 (bvsub (bvadd ?x274 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x249 $x102)))))))
 (let (($x48 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x253 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x263 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x253)))
 (let (($x105 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x263 $x48)))))))
 (let (($x168 (and $x105 $x278)))
 (let (($x47 (and $x168 $x71)))
 (let (($x68 (and $x47 $x272)))
 (let (($x174 (and $x68 $x200)))
 (let (($x31 (=> $x174 $x199)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 216 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x193 (concat ?x122 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x48 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x249 (bvadd ?x48 (_ bv3 32))))
 (let ((?x78 (concat (select input.dst.llvm-mem ?x249) (concat ?x77 ?x193))))
 (let ((?x99 (bvmul (_ bv4294967295 32) ?x78)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x162 (concat ?x38 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x241 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x128 (bvadd ?x241 (_ bv3 32))))
 (let ((?x258 (concat (select input.dst.llvm-mem ?x128) (concat ?x173 ?x162))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x244 (concat ?x154 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x136 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x343 (bvadd ?x136 (_ bv3 32))))
 (let ((?x340 (concat (select input.dst.llvm-mem ?x343) (concat ?x126 ?x244))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x12)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x125)))
 (let ((?x98 (bvadd (bvadd (bvadd ?x171 ?x340) ?x258) ?x99)))
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x197 (= ?x373 ?x98)))
 (let (($x97 (= $x197 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x310 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x306 (concat ?x310 (concat ?x224 (concat ?x177 ?x104)))))
 (let (($x32 (= ?x306 input.dst.llvm-%m)))
 (let (($x96 (= $x32 true)))
 (let (($x323 (= input.dst.llvm-%m ?x306)))
 (let ((?x329 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x313 (= (_ bv0 32) ?x329)))
 (let ((?x115 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x188 $x178)))
 (let (($x189 (and $x145 $x313)))
 (let (($x301 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x301 $x189)))
 (let (($x25 (forall ((input.ind-%var3715X (_ BitVec 32)) )(let ((?x118 (bvadd (bvmul input.ind-%var3715X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv1 32))) (select input.dst.llvm-mem ?x118))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv2 32))) ?x216))))
 (let ((?x27 (input.spec-%var-m-0.1.1 input.ind-%var3715X)))
 (let (($x46 (input.spec-%var-m-0.0.1 input.ind-%var3715X)))
 (=> $x46 (= ?x27 ?x221))))))))
 ))
 (let (($x235 (forall ((input.ind-%var3714X (_ BitVec 32)) )(let (($x46 (input.spec-%var-m-0.0.1 input.ind-%var3714X)))
 (= $x46 (and (bvule (_ bv0 32) input.ind-%var3714X) (bvult input.ind-%var3714X (_ bv100 32))))))
 ))
 (let (($x209 (and $x235 $x25)))
 (let (($x290 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x363 $x290)))))))
 (let (($x295 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x194 (= (bvand ?x241 (_ bv4294967292 32)) ?x241)))
 (let (($x228 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x241 (bvsub ?x241 (_ bv4 32))) (bvult ?x241 (bvsub ?x241 (_ bv4 32))))))
 (let (($x40 (and true $x228)))
 (let (($x62 (= (bvand ?x136 (_ bv4294967292 32)) ?x136)))
 (let (($x284 (and $x62 $x40)))
 (let (($x142 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv8 32))) (bvult ?x48 (bvsub ?x48 (_ bv8 32))))))
 (let (($x89 (and (and (and true $x142) $x284) $x194)))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x28 (and true $x85)))
 (let (($x322 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x250 (and $x322 $x28)))
 (let (($x223 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x136 (bvsub ?x136 (_ bv12 32))) (bvult ?x136 (bvsub ?x136 (_ bv12 32))))))
 (let (($x336 (and (and (and true $x322) $x223) $x250)))
 (let (($x123 (and (and (and (and (and (and $x336 $x89) $x295) $x127) $x209) $x117) $x323)))
 (let (($x268 (= $x123 true)))
 (let (($x286 (= $x336 true)))
 (let (($x18 (and $x89 $x295)))
 (let (($x344 (= $x18 true)))
 (let (($x256 (and $x344 $x286)))
 (let (($x354 (and $x256 $x268)))
 (let (($x106 (and $x354 $x96)))
 (let (($x334 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x248 (ite $x334 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x248 (_ bv0 32))))
 (let (($x355 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x368 (ite $x355 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x368 (_ bv0 32))))
 (let (($x312 (and $x369 $x103)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x213 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x213 (_ bv0 32))))
 (let (($x169 (and $x50 $x312)))
 (let (($x350 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x55 (ite $x350 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x55 (_ bv1 32))))
 (let (($x92 (and $x83 $x169)))
 (let (($x333 (and $x92 $x106)))
 (let (($x74 (= ?x373 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x347 (=> $x83 $x74)))
 (let (($x352 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x180 (= $x83 $x352)))
 (let (($x276 (= false false)))
 (let (($x293 (= ?x55 (_ bv0 32))))
 (let (($x167 (=> $x293 $x276)))
 (let (($x211 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x220 (= $x293 $x211)))
 (let (($x365 (and (and (and $x220 $x167) $x180) $x347)))
 (let (($x26 (and $x365 $x333)))
 (let ((?x345 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x7 (= ?x345 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x75 (bvuge ?x213 (_ bv1 32))))
 (let (($x252 (=> $x75 $x7)))
 (let (($x60 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x324 (= $x75 $x60)))
 (let (($x308 (and (and (= $x50 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x50 $x276)) $x324)))
 (let (($x34 (and $x308 $x252)))
 (let (($x116 (and $x34 $x26)))
 (let ((?x87 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x358 (= ?x87 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x298 (bvuge ?x248 (_ bv1 32))))
 (let (($x143 (=> $x298 $x358)))
 (let (($x318 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x309 (= $x298 $x318)))
 (let (($x316 (and (and (= $x103 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x103 $x276)) $x309)))
 (let (($x288 (and $x316 $x143)))
 (let (($x296 (and $x288 $x116)))
 (let ((?x68 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x303 (= ?x68 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x124 (bvuge ?x368 (_ bv1 32))))
 (let (($x210 (=> $x124 $x303)))
 (let (($x314 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x101 (= $x124 $x314)))
 (let (($x311 (=> $x369 $x276)))
 (let (($x182 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x247 (= $x369 $x182)))
 (let (($x305 (and (and (and $x247 $x311) $x101) $x210)))
 (let (($x14 (and $x305 $x296)))
 (let (($x287 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x19 (and $x287 $x14)))
 (let (($x341 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x49 (and $x341 $x19)))
 (let (($x39 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x255 (and $x39 $x49)))
 (let (($x30 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x364 (and $x30 $x255)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x348 (and $x17 $x364)))
 (let (($x264 (and $x276 $x348)))
 (let (($x304 (= ?x373 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x238 (and $x304 $x264)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x299 (and $x110 $x238)))
 (let (($x42 (and $x276 $x299)))
 (let (($x212 (= ?x345 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x16 (and $x212 $x42)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x192 (and $x10 $x16)))
 (let (($x234 (and $x276 $x192)))
 (let (($x108 (= ?x87 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x325 (and $x108 $x234)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x176 (and $x214 $x325)))
 (let (($x91 (and $x276 $x176)))
 (let (($x161 (= ?x68 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x81 (and $x161 $x91)))
 (let (($x233 (bvugt ?x241 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x246 (=> (bvule ?x241 (bvsub (bvadd ?x241 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x233)))))))
 (let (($x52 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x249)))
 (let (($x76 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x52)))))))
 (let (($x6 (bvugt ?x136 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x343)))
 (let (($x253 (=> (bvule ?x136 (bvsub (bvadd ?x136 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x6)))))))
 (let (($x259 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x274 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x274)))
 (let (($x278 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x259)))))))
 (let (($x168 (and $x278 $x253)))
 (let (($x270 (and $x168 $x76)))
 (let (($x71 (and $x270 $x246)))
 (let (($x205 (and $x71 $x81)))
 (let (($x349 (=> $x205 $x97)))
 (not $x349)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x193 (concat ?x122 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x48 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x249 (bvadd ?x48 (_ bv3 32))))
 (let ((?x78 (concat (select input.dst.llvm-mem ?x249) (concat ?x77 ?x193))))
 (let ((?x99 (bvmul (_ bv4294967295 32) ?x78)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x162 (concat ?x38 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x241 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x128 (bvadd ?x241 (_ bv3 32))))
 (let ((?x258 (concat (select input.dst.llvm-mem ?x128) (concat ?x173 ?x162))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x244 (concat ?x154 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x136 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x343 (bvadd ?x136 (_ bv3 32))))
 (let ((?x340 (concat (select input.dst.llvm-mem ?x343) (concat ?x126 ?x244))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x12)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x125)))
 (let ((?x98 (bvadd (bvadd (bvadd ?x171 ?x340) ?x258) ?x99)))
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x197 (= ?x373 ?x98)))
 (let (($x97 (= $x197 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x310 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x306 (concat ?x310 (concat ?x224 (concat ?x177 ?x104)))))
 (let (($x32 (= ?x306 input.dst.llvm-%m)))
 (let (($x96 (= $x32 true)))
 (let (($x323 (= input.dst.llvm-%m ?x306)))
 (let ((?x329 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x313 (= (_ bv0 32) ?x329)))
 (let ((?x115 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x188 $x178)))
 (let (($x189 (and $x145 $x313)))
 (let (($x301 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x301 $x189)))
 (let (($x25 (forall ((input.ind-%var3715X (_ BitVec 32)) )(let ((?x118 (bvadd (bvmul input.ind-%var3715X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv1 32))) (select input.dst.llvm-mem ?x118))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv2 32))) ?x216))))
 (let ((?x27 (input.spec-%var-m-0.1.1 input.ind-%var3715X)))
 (let (($x46 (input.spec-%var-m-0.0.1 input.ind-%var3715X)))
 (=> $x46 (= ?x27 ?x221))))))))
 ))
 (let (($x235 (forall ((input.ind-%var3714X (_ BitVec 32)) )(let (($x46 (input.spec-%var-m-0.0.1 input.ind-%var3714X)))
 (= $x46 (and (bvule (_ bv0 32) input.ind-%var3714X) (bvult input.ind-%var3714X (_ bv100 32))))))
 ))
 (let (($x209 (and $x235 $x25)))
 (let (($x290 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x363 $x290)))))))
 (let (($x295 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x194 (= (bvand ?x241 (_ bv4294967292 32)) ?x241)))
 (let (($x228 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x241 (bvsub ?x241 (_ bv4 32))) (bvult ?x241 (bvsub ?x241 (_ bv4 32))))))
 (let (($x40 (and true $x228)))
 (let (($x62 (= (bvand ?x136 (_ bv4294967292 32)) ?x136)))
 (let (($x284 (and $x62 $x40)))
 (let (($x142 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv8 32))) (bvult ?x48 (bvsub ?x48 (_ bv8 32))))))
 (let (($x89 (and (and (and true $x142) $x284) $x194)))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x28 (and true $x85)))
 (let (($x322 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x250 (and $x322 $x28)))
 (let (($x223 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x136 (bvsub ?x136 (_ bv12 32))) (bvult ?x136 (bvsub ?x136 (_ bv12 32))))))
 (let (($x336 (and (and (and true $x322) $x223) $x250)))
 (let (($x123 (and (and (and (and (and (and $x336 $x89) $x295) $x127) $x209) $x117) $x323)))
 (let (($x268 (= $x123 true)))
 (let (($x286 (= $x336 true)))
 (let (($x18 (and $x89 $x295)))
 (let (($x344 (= $x18 true)))
 (let (($x256 (and $x344 $x286)))
 (let (($x354 (and $x256 $x268)))
 (let (($x106 (and $x354 $x96)))
 (let (($x334 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x248 (ite $x334 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x248 (_ bv0 32))))
 (let (($x355 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x368 (ite $x355 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x368 (_ bv0 32))))
 (let (($x312 (and $x369 $x103)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x213 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x213 (_ bv0 32))))
 (let (($x169 (and $x50 $x312)))
 (let (($x350 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x55 (ite $x350 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x55 (_ bv1 32))))
 (let (($x92 (and $x83 $x169)))
 (let (($x333 (and $x92 $x106)))
 (let (($x74 (= ?x373 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x347 (=> $x83 $x74)))
 (let (($x352 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x180 (= $x83 $x352)))
 (let (($x276 (= false false)))
 (let (($x293 (= ?x55 (_ bv0 32))))
 (let (($x167 (=> $x293 $x276)))
 (let (($x211 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x220 (= $x293 $x211)))
 (let (($x365 (and (and (and $x220 $x167) $x180) $x347)))
 (let (($x26 (and $x365 $x333)))
 (let ((?x345 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x7 (= ?x345 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x75 (bvuge ?x213 (_ bv1 32))))
 (let (($x252 (=> $x75 $x7)))
 (let (($x60 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x324 (= $x75 $x60)))
 (let (($x308 (and (and (= $x50 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x50 $x276)) $x324)))
 (let (($x34 (and $x308 $x252)))
 (let (($x116 (and $x34 $x26)))
 (let ((?x87 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x358 (= ?x87 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x298 (bvuge ?x248 (_ bv1 32))))
 (let (($x143 (=> $x298 $x358)))
 (let (($x318 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x309 (= $x298 $x318)))
 (let (($x316 (and (and (= $x103 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x103 $x276)) $x309)))
 (let (($x288 (and $x316 $x143)))
 (let (($x296 (and $x288 $x116)))
 (let ((?x68 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x303 (= ?x68 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x124 (bvuge ?x368 (_ bv1 32))))
 (let (($x210 (=> $x124 $x303)))
 (let (($x314 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x101 (= $x124 $x314)))
 (let (($x311 (=> $x369 $x276)))
 (let (($x182 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x247 (= $x369 $x182)))
 (let (($x305 (and (and (and $x247 $x311) $x101) $x210)))
 (let (($x14 (and $x305 $x296)))
 (let (($x287 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x19 (and $x287 $x14)))
 (let (($x341 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x49 (and $x341 $x19)))
 (let (($x39 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x255 (and $x39 $x49)))
 (let (($x30 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x364 (and $x30 $x255)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x348 (and $x17 $x364)))
 (let (($x264 (and $x276 $x348)))
 (let (($x304 (= ?x373 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x238 (and $x304 $x264)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x299 (and $x110 $x238)))
 (let (($x42 (and $x276 $x299)))
 (let (($x212 (= ?x345 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x16 (and $x212 $x42)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x192 (and $x10 $x16)))
 (let (($x234 (and $x276 $x192)))
 (let (($x108 (= ?x87 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x325 (and $x108 $x234)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x176 (and $x214 $x325)))
 (let (($x91 (and $x276 $x176)))
 (let (($x161 (= ?x68 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x81 (and $x161 $x91)))
 (let (($x233 (bvugt ?x241 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x246 (=> (bvule ?x241 (bvsub (bvadd ?x241 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x233)))))))
 (let (($x52 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x249)))
 (let (($x76 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x52)))))))
 (let (($x6 (bvugt ?x136 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x343)))
 (let (($x253 (=> (bvule ?x136 (bvsub (bvadd ?x136 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x6)))))))
 (let (($x259 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x274 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x274)))
 (let (($x278 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x259)))))))
 (let (($x168 (and $x278 $x253)))
 (let (($x270 (and $x168 $x76)))
 (let (($x71 (and $x270 $x246)))
 (let (($x205 (and $x71 $x81)))
 (let (($x349 (=> $x205 $x97)))
 (not $x349)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 215 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x345 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x285 (bvmul (_ bv4294967295 32) ?x345)))
 (let ((?x148 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x285)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x66 (concat ?x36 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x259 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x204 (bvadd ?x259 (_ bv3 32))))
 (let ((?x326 (concat (select input.dst.llvm-mem ?x204) (concat ?x222 ?x66))))
 (let ((?x90 (bvmul (_ bv4294967295 32) ?x326)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x156 (concat ?x107 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x52 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x160 (bvadd ?x52 (_ bv3 32))))
 (let ((?x361 (concat (select input.dst.llvm-mem ?x160) (concat ?x292 ?x156))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x98 (concat ?x99 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x230 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x371 (bvadd ?x230 (_ bv3 32))))
 (let ((?x129 (concat (select input.dst.llvm-mem ?x371) (concat ?x97 ?x98))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x328)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x122)))
 (let ((?x187 (bvadd (bvadd (bvadd ?x193 ?x129) ?x361) ?x90)))
 (let (($x297 (= ?x187 ?x148)))
 (let (($x277 (= $x297 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x364 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x16 (concat ?x238 (concat ?x364 ?x49)))))
 (let (($x265 (= ?x192 input.dst.llvm-%m)))
 (let (($x273 (= $x265 true)))
 (let (($x234 (= input.dst.llvm-%m ?x192)))
 (let ((?x26 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x116 (= (_ bv0 32) ?x26)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x32 $x106)))
 (let (($x296 (and $x333 $x116)))
 (let (($x354 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x354 $x296)))
 (let (($x323 (forall ((input.ind-%var3759X (_ BitVec 32)) )(let ((?x189 (bvadd (bvmul input.ind-%var3759X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x310))))
 (let ((?x87 (input.spec-%var-m-0.1.1 input.ind-%var3759X)))
 (let (($x276 (input.spec-%var-m-0.0.1 input.ind-%var3759X)))
 (=> $x276 (= ?x87 ?x140))))))))
 ))
 (let (($x359 (forall ((input.ind-%var3758X (_ BitVec 32)) )(let (($x276 (input.spec-%var-m-0.0.1 input.ind-%var3758X)))
 (= $x276 (and (bvule (_ bv0 32) input.ind-%var3758X) (bvult input.ind-%var3758X (_ bv100 32))))))
 ))
 (let (($x123 (and $x359 $x323)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x227)))))))
 (let (($x45 (= (bvand ?x259 (_ bv4294967292 32)) ?x259)))
 (let (($x18 (= (bvand ?x52 (_ bv4294967292 32)) ?x52)))
 (let (($x194 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x52 (bvsub ?x52 (_ bv4 32))) (bvult ?x52 (bvsub ?x52 (_ bv4 32))))))
 (let (($x89 (and true $x194)))
 (let (($x228 (= (bvand ?x230 (_ bv4294967292 32)) ?x230)))
 (let (($x300 (and $x228 $x89)))
 (let (($x366 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x259 (bvsub ?x259 (_ bv8 32))) (bvult ?x259 (bvsub ?x259 (_ bv8 32))))))
 (let (($x322 (and (and (and true $x366) $x300) $x18)))
 (let (($x286 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x256 (and true $x286)))
 (let (($x223 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x9 (and $x223 $x256)))
 (let (($x94 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x230 (bvsub ?x230 (_ bv12 32))) (bvult ?x230 (bvsub ?x230 (_ bv12 32))))))
 (let (($x190 (and (and (and true $x223) $x94) $x9)))
 (let (($x164 (and (and (and (and (and (and $x190 $x322) $x45) $x33) $x123) $x14) $x234)))
 (let (($x302 (= $x164 true)))
 (let (($x261 (= $x190 true)))
 (let (($x5 (and $x322 $x45)))
 (let (($x232 (= $x5 true)))
 (let (($x53 (and $x232 $x261)))
 (let (($x338 (and $x53 $x302)))
 (let (($x282 (and $x338 $x273)))
 (let (($x342 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x131 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x131 (_ bv1 32))))
 (let (($x247 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x67 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x67 (_ bv1 32))))
 (let (($x196 (and $x303 $x358)))
 (let (($x331 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x337 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x337 (_ bv1 32))))
 (let (($x142 (and $x7 $x196)))
 (let (($x167 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x353 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x353 (_ bv0 32))))
 (let (($x279 (and $x83 $x142)))
 (let (($x12 (and $x279 $x282)))
 (let ((?x155 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x169 (= ?x155 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x74 (bvuge ?x353 (_ bv1 32))))
 (let (($x92 (=> $x74 $x169)))
 (let (($x347 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x365 (= $x74 $x347)))
 (let (($x233 (= false false)))
 (let (($x157 (=> $x83 $x233)))
 (let (($x180 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x360 (= $x83 $x180)))
 (let (($x163 (and (and (and $x360 $x157) $x365) $x92)))
 (let (($x125 (and $x163 $x12)))
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x55 (= ?x373 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x293 (=> $x7 $x55)))
 (let (($x252 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x34 (= $x7 $x252)))
 (let (($x75 (= ?x337 (_ bv0 32))))
 (let (($x271 (=> $x75 $x233)))
 (let (($x324 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x308 (= $x75 $x324)))
 (let (($x220 (and (and (and $x308 $x271) $x34) $x293)))
 (let (($x171 (and $x220 $x125)))
 (let (($x213 (= ?x345 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x50 (=> $x358 $x213)))
 (let (($x143 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x288 (= $x358 $x143)))
 (let (($x298 (= ?x131 (_ bv0 32))))
 (let (($x370 (=> $x298 $x233)))
 (let (($x309 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x316 (= $x298 $x309)))
 (let (($x172 (and (and (and $x316 $x370) $x288) $x50)))
 (let (($x31 (and $x172 $x171)))
 (let ((?x71 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x248 (= ?x71 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x103 (=> $x303 $x248)))
 (let (($x210 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x305 (= $x303 $x210)))
 (let (($x124 (= ?x67 (_ bv0 32))))
 (let (($x24 (=> $x124 $x233)))
 (let (($x101 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x335 (= $x124 $x101)))
 (let (($x166 (and (and (and $x335 $x24) $x305) $x103)))
 (let (($x219 (and $x166 $x31)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x126 (and $x182 $x219)))
 (let (($x369 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x332 (and $x369 $x126)))
 (let (($x355 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x154 (and $x355 $x332)))
 (let (($x275 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x146 (and $x275 $x154)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x244 (and $x289 $x146)))
 (let (($x199 (and $x233 $x244)))
 (let (($x120 (= ?x155 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x340 (and $x120 $x199)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x72 (and $x17 $x340)))
 (let (($x372 (and $x233 $x72)))
 (let (($x304 (= ?x373 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x158 (and $x304 $x372)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x173 (and $x110 $x158)))
 (let (($x357 (and $x233 $x173)))
 (let (($x212 (= ?x345 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x38 (and $x212 $x357)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x239 (and $x135 $x38)))
 (let (($x162 (and $x233 $x239)))
 (let (($x128 (= ?x71 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x159 (and $x128 $x162)))
 (let (($x111 (bvugt ?x52 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x137 (=> (bvule ?x52 (bvsub (bvadd ?x52 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x272 $x111)))))))
 (let (($x215 (bvugt ?x259 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x82 (=> (bvule ?x259 (bvsub (bvadd ?x259 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x215)))))))
 (let (($x249 (bvugt ?x230 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x371)))
 (let (($x274 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x249)))))))
 (let (($x186 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x253 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x186)))))))
 (let (($x168 (and $x253 $x274)))
 (let (($x141 (and $x168 $x82)))
 (let (($x76 (and $x141 $x137)))
 (let (($x258 (and $x76 $x159)))
 (let (($x144 (=> $x258 $x277)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x345 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x285 (bvmul (_ bv4294967295 32) ?x345)))
 (let ((?x148 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x285)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x66 (concat ?x36 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x259 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x204 (bvadd ?x259 (_ bv3 32))))
 (let ((?x326 (concat (select input.dst.llvm-mem ?x204) (concat ?x222 ?x66))))
 (let ((?x90 (bvmul (_ bv4294967295 32) ?x326)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x156 (concat ?x107 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x52 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x160 (bvadd ?x52 (_ bv3 32))))
 (let ((?x361 (concat (select input.dst.llvm-mem ?x160) (concat ?x292 ?x156))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x98 (concat ?x99 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x230 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x371 (bvadd ?x230 (_ bv3 32))))
 (let ((?x129 (concat (select input.dst.llvm-mem ?x371) (concat ?x97 ?x98))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x328)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x122)))
 (let ((?x187 (bvadd (bvadd (bvadd ?x193 ?x129) ?x361) ?x90)))
 (let (($x297 (= ?x187 ?x148)))
 (let (($x277 (= $x297 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x364 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x16 (concat ?x238 (concat ?x364 ?x49)))))
 (let (($x265 (= ?x192 input.dst.llvm-%m)))
 (let (($x273 (= $x265 true)))
 (let (($x234 (= input.dst.llvm-%m ?x192)))
 (let ((?x26 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x116 (= (_ bv0 32) ?x26)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x32 $x106)))
 (let (($x296 (and $x333 $x116)))
 (let (($x354 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x354 $x296)))
 (let (($x323 (forall ((input.ind-%var3759X (_ BitVec 32)) )(let ((?x189 (bvadd (bvmul input.ind-%var3759X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x310))))
 (let ((?x87 (input.spec-%var-m-0.1.1 input.ind-%var3759X)))
 (let (($x276 (input.spec-%var-m-0.0.1 input.ind-%var3759X)))
 (=> $x276 (= ?x87 ?x140))))))))
 ))
 (let (($x359 (forall ((input.ind-%var3758X (_ BitVec 32)) )(let (($x276 (input.spec-%var-m-0.0.1 input.ind-%var3758X)))
 (= $x276 (and (bvule (_ bv0 32) input.ind-%var3758X) (bvult input.ind-%var3758X (_ bv100 32))))))
 ))
 (let (($x123 (and $x359 $x323)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x227)))))))
 (let (($x45 (= (bvand ?x259 (_ bv4294967292 32)) ?x259)))
 (let (($x18 (= (bvand ?x52 (_ bv4294967292 32)) ?x52)))
 (let (($x194 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x52 (bvsub ?x52 (_ bv4 32))) (bvult ?x52 (bvsub ?x52 (_ bv4 32))))))
 (let (($x89 (and true $x194)))
 (let (($x228 (= (bvand ?x230 (_ bv4294967292 32)) ?x230)))
 (let (($x300 (and $x228 $x89)))
 (let (($x366 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x259 (bvsub ?x259 (_ bv8 32))) (bvult ?x259 (bvsub ?x259 (_ bv8 32))))))
 (let (($x322 (and (and (and true $x366) $x300) $x18)))
 (let (($x286 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x256 (and true $x286)))
 (let (($x223 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x9 (and $x223 $x256)))
 (let (($x94 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x230 (bvsub ?x230 (_ bv12 32))) (bvult ?x230 (bvsub ?x230 (_ bv12 32))))))
 (let (($x190 (and (and (and true $x223) $x94) $x9)))
 (let (($x164 (and (and (and (and (and (and $x190 $x322) $x45) $x33) $x123) $x14) $x234)))
 (let (($x302 (= $x164 true)))
 (let (($x261 (= $x190 true)))
 (let (($x5 (and $x322 $x45)))
 (let (($x232 (= $x5 true)))
 (let (($x53 (and $x232 $x261)))
 (let (($x338 (and $x53 $x302)))
 (let (($x282 (and $x338 $x273)))
 (let (($x342 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x131 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x131 (_ bv1 32))))
 (let (($x247 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x67 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x67 (_ bv1 32))))
 (let (($x196 (and $x303 $x358)))
 (let (($x331 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x337 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x337 (_ bv1 32))))
 (let (($x142 (and $x7 $x196)))
 (let (($x167 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x353 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x353 (_ bv0 32))))
 (let (($x279 (and $x83 $x142)))
 (let (($x12 (and $x279 $x282)))
 (let ((?x155 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x169 (= ?x155 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x74 (bvuge ?x353 (_ bv1 32))))
 (let (($x92 (=> $x74 $x169)))
 (let (($x347 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x365 (= $x74 $x347)))
 (let (($x233 (= false false)))
 (let (($x157 (=> $x83 $x233)))
 (let (($x180 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x360 (= $x83 $x180)))
 (let (($x163 (and (and (and $x360 $x157) $x365) $x92)))
 (let (($x125 (and $x163 $x12)))
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x55 (= ?x373 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x293 (=> $x7 $x55)))
 (let (($x252 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x34 (= $x7 $x252)))
 (let (($x75 (= ?x337 (_ bv0 32))))
 (let (($x271 (=> $x75 $x233)))
 (let (($x324 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x308 (= $x75 $x324)))
 (let (($x220 (and (and (and $x308 $x271) $x34) $x293)))
 (let (($x171 (and $x220 $x125)))
 (let (($x213 (= ?x345 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x50 (=> $x358 $x213)))
 (let (($x143 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x288 (= $x358 $x143)))
 (let (($x298 (= ?x131 (_ bv0 32))))
 (let (($x370 (=> $x298 $x233)))
 (let (($x309 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x316 (= $x298 $x309)))
 (let (($x172 (and (and (and $x316 $x370) $x288) $x50)))
 (let (($x31 (and $x172 $x171)))
 (let ((?x71 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x248 (= ?x71 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x103 (=> $x303 $x248)))
 (let (($x210 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x305 (= $x303 $x210)))
 (let (($x124 (= ?x67 (_ bv0 32))))
 (let (($x24 (=> $x124 $x233)))
 (let (($x101 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x335 (= $x124 $x101)))
 (let (($x166 (and (and (and $x335 $x24) $x305) $x103)))
 (let (($x219 (and $x166 $x31)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x126 (and $x182 $x219)))
 (let (($x369 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x332 (and $x369 $x126)))
 (let (($x355 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x154 (and $x355 $x332)))
 (let (($x275 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x146 (and $x275 $x154)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x244 (and $x289 $x146)))
 (let (($x199 (and $x233 $x244)))
 (let (($x120 (= ?x155 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x340 (and $x120 $x199)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x72 (and $x17 $x340)))
 (let (($x372 (and $x233 $x72)))
 (let (($x304 (= ?x373 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x158 (and $x304 $x372)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x173 (and $x110 $x158)))
 (let (($x357 (and $x233 $x173)))
 (let (($x212 (= ?x345 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x38 (and $x212 $x357)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x239 (and $x135 $x38)))
 (let (($x162 (and $x233 $x239)))
 (let (($x128 (= ?x71 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x159 (and $x128 $x162)))
 (let (($x111 (bvugt ?x52 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x137 (=> (bvule ?x52 (bvsub (bvadd ?x52 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x272 $x111)))))))
 (let (($x215 (bvugt ?x259 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x82 (=> (bvule ?x259 (bvsub (bvadd ?x259 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x215)))))))
 (let (($x249 (bvugt ?x230 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x371)))
 (let (($x274 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x249)))))))
 (let (($x186 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x253 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x186)))))))
 (let (($x168 (and $x253 $x274)))
 (let (($x141 (and $x168 $x82)))
 (let (($x76 (and $x141 $x137)))
 (let (($x258 (and $x76 $x159)))
 (let (($x144 (=> $x258 $x277)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 221 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x13 (bvmul (_ bv4294967295 32) ?x373)))
 (let ((?x155 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x59 (bvadd ?x155 ?x13)))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x188 (concat ?x221 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x186 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x191 (bvadd ?x186 (_ bv3 32))))
 (let ((?x25 (concat (select input.dst.llvm-mem ?x191) (concat ?x200 ?x188))))
 (let ((?x121 (bvmul (_ bv4294967295 32) ?x25)))
 (let ((?x242 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x363 (concat ?x242 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x215 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x281 (bvadd ?x215 (_ bv3 32))))
 (let ((?x290 (concat (select input.dst.llvm-mem ?x281) (concat ?x311 ?x363))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x187 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x236 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x267 (bvadd ?x236 (_ bv3 32))))
 (let ((?x277 (concat (select input.dst.llvm-mem ?x267) (concat ?x285 ?x187))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x73)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x36)))
 (let ((?x178 (bvadd (bvadd (bvadd ?x66 ?x277) ?x290) ?x121)))
 (let (($x133 (= ?x178 ?x59)))
 (let (($x145 (= $x133 true)))
 (let ((?x332 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x340 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x158 (concat ?x340 (concat ?x146 ?x332)))))
 (let (($x29 (= ?x173 input.dst.llvm-%m)))
 (let (($x88 (= $x29 true)))
 (let (($x357 (= input.dst.llvm-%m ?x173)))
 (let ((?x125 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x171 (= (_ bv0 32) ?x125)))
 (let ((?x273 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x273)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x265 $x282)))
 (let (($x31 (and $x12 $x171)))
 (let (($x338 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x338 $x31)))
 (let (($x234 (forall ((input.ind-%var3803X (_ BitVec 32)) )(let ((?x296 (bvadd (bvmul input.ind-%var3803X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x16))))
 (let ((?x345 (input.spec-%var-m-0.1.1 input.ind-%var3803X)))
 (let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var3803X)))
 (=> $x233 (= ?x345 ?x348))))))))
 ))
 (let (($x224 (forall ((input.ind-%var3802X (_ BitVec 32)) )(let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var3802X)))
 (= $x233 (and (bvule (_ bv0 32) input.ind-%var3802X) (bvult input.ind-%var3802X (_ bv100 32))))))
 ))
 (let (($x164 (and $x224 $x234)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x91)))))))
 (let (($x251 (= (bvand ?x186 (_ bv4294967292 32)) ?x186)))
 (let (($x5 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x18 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x215 (bvsub ?x215 (_ bv4 32))) (bvult ?x215 (bvsub ?x215 (_ bv4 32))))))
 (let (($x322 (and true $x18)))
 (let (($x194 (= (bvand ?x236 (_ bv4294967292 32)) ?x236)))
 (let (($x283 (and $x194 $x322)))
 (let (($x40 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x186 (bvsub ?x186 (_ bv8 32))) (bvult ?x186 (bvsub ?x186 (_ bv8 32))))))
 (let (($x223 (and (and (and true $x40) $x283) $x5)))
 (let (($x261 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x53 (and true $x261)))
 (let (($x94 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x325 (and $x94 $x53)))
 (let (($x336 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x236 (bvsub ?x236 (_ bv12 32))) (bvult ?x236 (bvsub ?x236 (_ bv12 32))))))
 (let (($x206 (and (and (and true $x94) $x336) $x325)))
 (let (($x56 (and (and (and (and (and (and $x206 $x223) $x251) $x184) $x164) $x219) $x357)))
 (let (($x77 (= $x56 true)))
 (let (($x202 (= $x206 true)))
 (let (($x208 (and $x223 $x251)))
 (let (($x65 (= $x208 true)))
 (let (($x294 (and $x65 $x202)))
 (let (($x319 (and $x294 $x77)))
 (let (($x113 (and $x319 $x88)))
 (let (($x370 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x151 (ite $x370 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x151 (_ bv1 32))))
 (let (($x335 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x20 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x20 (_ bv0 32))))
 (let (($x79 (and $x303 $x213)))
 (let (($x271 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x37 (ite $x271 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x37 (_ bv1 32))))
 (let (($x366 (and $x55 $x79)))
 (let (($x157 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x362 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x362 (_ bv0 32))))
 (let (($x344 (and $x74 $x366)))
 (let (($x328 (and $x344 $x113)))
 (let ((?x341 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x142 (= ?x341 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x169 (bvuge ?x362 (_ bv1 32))))
 (let (($x279 (=> $x169 $x142)))
 (let (($x92 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x163 (= $x169 $x92)))
 (let (($x111 (= false false)))
 (let (($x312 (=> $x74 $x111)))
 (let (($x365 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x240 (= $x74 $x365)))
 (let (($x62 (and (and (and $x240 $x312) $x163) $x279)))
 (let (($x122 (and $x62 $x328)))
 (let (($x353 (= ?x155 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x83 (=> $x55 $x353)))
 (let (($x293 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x220 (= $x55 $x293)))
 (let (($x7 (= ?x37 (_ bv0 32))))
 (let (($x350 (=> $x7 $x111)))
 (let (($x34 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x211 (= $x7 $x34)))
 (let (($x360 (and (and (and $x211 $x350) $x220) $x83)))
 (let (($x193 (and $x360 $x122)))
 (let (($x337 (= ?x373 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x75 (=> $x213 $x337)))
 (let (($x50 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x172 (= $x213 $x50)))
 (let (($x358 (= ?x151 (_ bv0 32))))
 (let (($x260 (=> $x358 $x111)))
 (let (($x288 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x57 (= $x358 $x288)))
 (let (($x308 (and (and (and $x57 $x260) $x172) $x75)))
 (let (($x51 (and $x308 $x193)))
 (let ((?x76 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x131 (= ?x76 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x248 (bvuge ?x20 (_ bv1 32))))
 (let (($x298 (=> $x248 $x131)))
 (let (($x103 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x166 (= $x248 $x103)))
 (let (($x334 (=> $x303 $x111)))
 (let (($x305 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x351 (= $x303 $x305)))
 (let (($x316 (and (and (and $x351 $x334) $x166) $x298)))
 (let (($x197 (and $x316 $x51)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x97 (and $x101 $x197)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x78 (and $x124 $x97)))
 (let (($x247 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x99 (and $x247 $x78)))
 (let (($x225 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x147 (and $x225 $x99)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x98 (and $x368 $x147)))
 (let (($x349 (and $x111 $x98)))
 (let (($x287 (= ?x341 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x129 (and $x287 $x349)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x35 (and $x289 $x129)))
 (let (($x207 (and $x111 $x35)))
 (let (($x120 (= ?x155 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x58 (and $x120 $x207)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x292 (and $x17 $x58)))
 (let (($x339 (and $x111 $x292)))
 (let (($x304 (= ?x373 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x107 (and $x304 $x339)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x317 (and $x64 $x107)))
 (let (($x156 (and $x111 $x317)))
 (let (($x160 (= ?x76 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x346 (and $x160 $x156)))
 (let (($x47 (bvugt ?x215 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x281)))
 (let (($x183 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x246 $x47)))))))
 (let (($x138 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x100 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x249 $x138)))))))
 (let (($x204 (bvugt ?x236 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x136 (=> (bvule ?x236 (bvsub (bvadd ?x236 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x266 $x204)))))))
 (let (($x8 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x274 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x8)))))))
 (let (($x168 (and $x274 $x136)))
 (let (($x262 (and $x168 $x100)))
 (let (($x82 (and $x262 $x183)))
 (let (($x361 (and $x82 $x346)))
 (let (($x229 (=> $x361 $x145)))
 (not $x229)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x13 (bvmul (_ bv4294967295 32) ?x373)))
 (let ((?x155 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x59 (bvadd ?x155 ?x13)))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x188 (concat ?x221 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x186 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x191 (bvadd ?x186 (_ bv3 32))))
 (let ((?x25 (concat (select input.dst.llvm-mem ?x191) (concat ?x200 ?x188))))
 (let ((?x121 (bvmul (_ bv4294967295 32) ?x25)))
 (let ((?x242 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x363 (concat ?x242 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x215 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x281 (bvadd ?x215 (_ bv3 32))))
 (let ((?x290 (concat (select input.dst.llvm-mem ?x281) (concat ?x311 ?x363))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x187 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x236 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x267 (bvadd ?x236 (_ bv3 32))))
 (let ((?x277 (concat (select input.dst.llvm-mem ?x267) (concat ?x285 ?x187))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x73)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x36)))
 (let ((?x178 (bvadd (bvadd (bvadd ?x66 ?x277) ?x290) ?x121)))
 (let (($x133 (= ?x178 ?x59)))
 (let (($x145 (= $x133 true)))
 (let ((?x332 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x340 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x158 (concat ?x340 (concat ?x146 ?x332)))))
 (let (($x29 (= ?x173 input.dst.llvm-%m)))
 (let (($x88 (= $x29 true)))
 (let (($x357 (= input.dst.llvm-%m ?x173)))
 (let ((?x125 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x171 (= (_ bv0 32) ?x125)))
 (let ((?x273 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x273)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x265 $x282)))
 (let (($x31 (and $x12 $x171)))
 (let (($x338 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x338 $x31)))
 (let (($x234 (forall ((input.ind-%var3803X (_ BitVec 32)) )(let ((?x296 (bvadd (bvmul input.ind-%var3803X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x16))))
 (let ((?x345 (input.spec-%var-m-0.1.1 input.ind-%var3803X)))
 (let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var3803X)))
 (=> $x233 (= ?x345 ?x348))))))))
 ))
 (let (($x224 (forall ((input.ind-%var3802X (_ BitVec 32)) )(let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var3802X)))
 (= $x233 (and (bvule (_ bv0 32) input.ind-%var3802X) (bvult input.ind-%var3802X (_ bv100 32))))))
 ))
 (let (($x164 (and $x224 $x234)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x91)))))))
 (let (($x251 (= (bvand ?x186 (_ bv4294967292 32)) ?x186)))
 (let (($x5 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x18 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x215 (bvsub ?x215 (_ bv4 32))) (bvult ?x215 (bvsub ?x215 (_ bv4 32))))))
 (let (($x322 (and true $x18)))
 (let (($x194 (= (bvand ?x236 (_ bv4294967292 32)) ?x236)))
 (let (($x283 (and $x194 $x322)))
 (let (($x40 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x186 (bvsub ?x186 (_ bv8 32))) (bvult ?x186 (bvsub ?x186 (_ bv8 32))))))
 (let (($x223 (and (and (and true $x40) $x283) $x5)))
 (let (($x261 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x53 (and true $x261)))
 (let (($x94 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x325 (and $x94 $x53)))
 (let (($x336 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x236 (bvsub ?x236 (_ bv12 32))) (bvult ?x236 (bvsub ?x236 (_ bv12 32))))))
 (let (($x206 (and (and (and true $x94) $x336) $x325)))
 (let (($x56 (and (and (and (and (and (and $x206 $x223) $x251) $x184) $x164) $x219) $x357)))
 (let (($x77 (= $x56 true)))
 (let (($x202 (= $x206 true)))
 (let (($x208 (and $x223 $x251)))
 (let (($x65 (= $x208 true)))
 (let (($x294 (and $x65 $x202)))
 (let (($x319 (and $x294 $x77)))
 (let (($x113 (and $x319 $x88)))
 (let (($x370 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x151 (ite $x370 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x151 (_ bv1 32))))
 (let (($x335 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x20 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x20 (_ bv0 32))))
 (let (($x79 (and $x303 $x213)))
 (let (($x271 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x37 (ite $x271 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x37 (_ bv1 32))))
 (let (($x366 (and $x55 $x79)))
 (let (($x157 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x362 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x362 (_ bv0 32))))
 (let (($x344 (and $x74 $x366)))
 (let (($x328 (and $x344 $x113)))
 (let ((?x341 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x142 (= ?x341 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x169 (bvuge ?x362 (_ bv1 32))))
 (let (($x279 (=> $x169 $x142)))
 (let (($x92 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x163 (= $x169 $x92)))
 (let (($x111 (= false false)))
 (let (($x312 (=> $x74 $x111)))
 (let (($x365 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x240 (= $x74 $x365)))
 (let (($x62 (and (and (and $x240 $x312) $x163) $x279)))
 (let (($x122 (and $x62 $x328)))
 (let (($x353 (= ?x155 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x83 (=> $x55 $x353)))
 (let (($x293 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x220 (= $x55 $x293)))
 (let (($x7 (= ?x37 (_ bv0 32))))
 (let (($x350 (=> $x7 $x111)))
 (let (($x34 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x211 (= $x7 $x34)))
 (let (($x360 (and (and (and $x211 $x350) $x220) $x83)))
 (let (($x193 (and $x360 $x122)))
 (let (($x337 (= ?x373 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x75 (=> $x213 $x337)))
 (let (($x50 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x172 (= $x213 $x50)))
 (let (($x358 (= ?x151 (_ bv0 32))))
 (let (($x260 (=> $x358 $x111)))
 (let (($x288 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x57 (= $x358 $x288)))
 (let (($x308 (and (and (and $x57 $x260) $x172) $x75)))
 (let (($x51 (and $x308 $x193)))
 (let ((?x76 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x131 (= ?x76 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x248 (bvuge ?x20 (_ bv1 32))))
 (let (($x298 (=> $x248 $x131)))
 (let (($x103 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x166 (= $x248 $x103)))
 (let (($x334 (=> $x303 $x111)))
 (let (($x305 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x351 (= $x303 $x305)))
 (let (($x316 (and (and (and $x351 $x334) $x166) $x298)))
 (let (($x197 (and $x316 $x51)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x97 (and $x101 $x197)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x78 (and $x124 $x97)))
 (let (($x247 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x99 (and $x247 $x78)))
 (let (($x225 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x147 (and $x225 $x99)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x98 (and $x368 $x147)))
 (let (($x349 (and $x111 $x98)))
 (let (($x287 (= ?x341 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x129 (and $x287 $x349)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x35 (and $x289 $x129)))
 (let (($x207 (and $x111 $x35)))
 (let (($x120 (= ?x155 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x58 (and $x120 $x207)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x292 (and $x17 $x58)))
 (let (($x339 (and $x111 $x292)))
 (let (($x304 (= ?x373 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x107 (and $x304 $x339)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x317 (and $x64 $x107)))
 (let (($x156 (and $x111 $x317)))
 (let (($x160 (= ?x76 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x346 (and $x160 $x156)))
 (let (($x47 (bvugt ?x215 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x281)))
 (let (($x183 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x246 $x47)))))))
 (let (($x138 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x100 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x249 $x138)))))))
 (let (($x204 (bvugt ?x236 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x136 (=> (bvule ?x236 (bvsub (bvadd ?x236 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x266 $x204)))))))
 (let (($x8 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x274 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x8)))))))
 (let (($x168 (and $x274 $x136)))
 (let (($x262 (and $x168 $x100)))
 (let (($x82 (and $x262 $x183)))
 (let (($x361 (and $x82 $x346)))
 (let (($x229 (=> $x361 $x145)))
 (not $x229)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 221 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x82 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x341 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x216 (bvadd ?x341 ?x82)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x96 (concat ?x32 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x8 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x266 (bvadd ?x8 (_ bv3 32))))
 (let ((?x185 (concat (select input.dst.llvm-mem ?x266) (concat ?x268 ?x96))))
 (let ((?x123 (bvmul (_ bv4294967295 32) ?x185)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x126 (concat ?x127 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x241 (bvadd ?x138 (_ bv3 32))))
 (let ((?x203 (concat (select input.dst.llvm-mem ?x241) (concat ?x161 ?x126))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x178 (concat ?x121 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x165 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x134 (bvadd ?x165 (_ bv3 32))))
 (let ((?x229 (concat (select input.dst.llvm-mem ?x134) (concat ?x59 ?x178))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x115)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x221)))
 (let ((?x114 (bvadd (bvadd (bvadd ?x188 ?x229) ?x203) ?x123)))
 (let (($x313 (= ?x114 ?x216)))
 (let (($x333 (= $x313 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x292 (concat ?x58 (concat ?x129 (concat ?x147 ?x78)))))
 (let (($x330 (= ?x292 input.dst.llvm-%m)))
 (let (($x23 (= $x330 true)))
 (let (($x339 (= input.dst.llvm-%m ?x292)))
 (let ((?x122 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x193 (= (_ bv0 32) ?x122)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x328 (and $x29 $x113)))
 (let (($x51 (and $x328 $x193)))
 (let (($x319 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (and $x319 $x51)))
 (let (($x357 (forall ((input.ind-%var3847X (_ BitVec 32)) )(let ((?x31 (bvadd (bvmul input.ind-%var3847X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x158))))
 (let ((?x373 (input.spec-%var-m-0.1.1 input.ind-%var3847X)))
 (let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3847X)))
 (=> $x111 (= ?x373 ?x244))))))))
 ))
 (let (($x238 (forall ((input.ind-%var3846X (_ BitVec 32)) )(let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3846X)))
 (= $x111 (and (bvule (_ bv0 32) input.ind-%var3846X) (bvult input.ind-%var3846X (_ bv100 32))))))
 ))
 (let (($x56 (and $x238 $x357)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x184 $x162)))))))
 (let (($x28 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x208 (= (bvand ?x138 (_ bv4294967292 32)) ?x138)))
 (let (($x5 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x138 (bvsub ?x138 (_ bv4 32))) (bvult ?x138 (bvsub ?x138 (_ bv4 32))))))
 (let (($x223 (and true $x5)))
 (let (($x18 (= (bvand ?x165 (_ bv4294967292 32)) ?x165)))
 (let (($x291 (and $x18 $x223)))
 (let (($x89 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv8 32))) (bvult ?x8 (bvsub ?x8 (_ bv8 32))))))
 (let (($x94 (and (and (and true $x89) $x291) $x208)))
 (let (($x202 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x294 (and true $x202)))
 (let (($x336 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x38 (and $x336 $x294)))
 (let (($x190 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x165 (bvsub ?x165 (_ bv12 32))) (bvult ?x165 (bvsub ?x165 (_ bv12 32))))))
 (let (($x43 (and (and (and true $x336) $x190) $x38)))
 (let (($x44 (and (and (and (and (and (and $x43 $x94) $x28) $x104) $x56) $x197) $x339)))
 (let (($x222 (= $x44 true)))
 (let (($x118 (= $x43 true)))
 (let (($x63 (and $x94 $x28)))
 (let (($x85 (= $x63 true)))
 (let (($x307 (and $x85 $x118)))
 (let (($x22 (and $x307 $x222)))
 (let (($x15 (and $x22 $x23)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x60 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x60 (_ bv0 32))))
 (let (($x351 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x318 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x318 (_ bv1 32))))
 (let (($x284 (and $x131 $x213)))
 (let (($x350 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x352 (ite $x350 (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x352 (_ bv1 32))))
 (let (($x40 (and $x353 $x284)))
 (let (($x312 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x237 (ite $x312 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x237 (_ bv0 32))))
 (let (($x232 (and $x169 $x40)))
 (let (($x73 (and $x232 $x15)))
 (let ((?x369 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x366 (= ?x369 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x142 (bvuge ?x237 (_ bv1 32))))
 (let (($x344 (=> $x142 $x366)))
 (let (($x279 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x62 (= $x142 $x279)))
 (let (($x47 (= false false)))
 (let (($x196 (=> $x169 $x47)))
 (let (($x163 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x280 (= $x169 $x163)))
 (let (($x228 (and (and (and $x280 $x196) $x62) $x344)))
 (let (($x36 (and $x228 $x73)))
 (let (($x362 (= ?x341 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x74 (=> $x353 $x362)))
 (let (($x83 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x360 (= $x353 $x83)))
 (let (($x55 (= ?x352 (_ bv0 32))))
 (let (($x167 (=> $x55 $x47)))
 (let (($x220 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x180 (= $x55 $x220)))
 (let (($x240 (and (and (and $x180 $x167) $x360) $x74)))
 (let (($x66 (and $x240 $x36)))
 (let ((?x155 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x37 (= ?x155 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x337 (bvuge ?x60 (_ bv1 32))))
 (let (($x7 (=> $x337 $x37)))
 (let (($x75 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x308 (= $x337 $x75)))
 (let (($x34 (and (and (= $x213 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x213 $x47)) $x308)))
 (let (($x211 (and $x34 $x7)))
 (let (($x297 (and $x211 $x66)))
 (let (($x151 (= ?x82 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x358 (=> $x131 $x151)))
 (let (($x298 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x316 (= $x131 $x298)))
 (let (($x248 (= ?x318 (_ bv0 32))))
 (let (($x342 (=> $x248 $x47)))
 (let (($x166 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x309 (= $x248 $x166)))
 (let (($x57 (and (and (and $x309 $x342) $x316) $x358)))
 (let (($x231 (and $x57 $x297)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x285 (and $x305 $x231)))
 (let (($x303 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x326 (and $x303 $x285)))
 (let (($x335 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x90 (and $x335 $x326)))
 (let (($x314 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x95 (and $x314 $x90)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x187 (and $x67 $x95)))
 (let (($x148 (and $x47 $x187)))
 (let (($x182 (= ?x369 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x277 (and $x182 $x148)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x209 (and $x368 $x277)))
 (let (($x70 (and $x47 $x209)))
 (let (($x287 (= ?x341 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x19 (and $x287 $x70)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x311 (and $x289 $x19)))
 (let (($x130 (and $x47 $x311)))
 (let (($x120 (= ?x155 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x242 (and $x120 $x130)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x144 (and $x272 $x242)))
 (let (($x363 (and $x47 $x144)))
 (let (($x281 (= ?x82 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x150 (and $x281 $x363)))
 (let (($x270 (bvugt ?x138 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x68 (=> (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x270)))))))
 (let (($x320 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x269 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x320)))))))
 (let (($x191 (bvugt ?x165 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x230 (=> (bvule ?x165 (bvsub (bvadd ?x165 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x191)))))))
 (let (($x109 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x236 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x259 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x236)))
 (let (($x136 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x259 $x109)))))))
 (let (($x168 (and $x136 $x230)))
 (let (($x257 (and $x168 $x269)))
 (let (($x100 (and $x257 $x68)))
 (let (($x290 (and $x100 $x150)))
 (let (($x367 (=> $x290 $x333)))
 (not $x367))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x82 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x341 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x216 (bvadd ?x341 ?x82)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x96 (concat ?x32 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x8 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x266 (bvadd ?x8 (_ bv3 32))))
 (let ((?x185 (concat (select input.dst.llvm-mem ?x266) (concat ?x268 ?x96))))
 (let ((?x123 (bvmul (_ bv4294967295 32) ?x185)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x126 (concat ?x127 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x241 (bvadd ?x138 (_ bv3 32))))
 (let ((?x203 (concat (select input.dst.llvm-mem ?x241) (concat ?x161 ?x126))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x178 (concat ?x121 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x165 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x134 (bvadd ?x165 (_ bv3 32))))
 (let ((?x229 (concat (select input.dst.llvm-mem ?x134) (concat ?x59 ?x178))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x115)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x221)))
 (let ((?x114 (bvadd (bvadd (bvadd ?x188 ?x229) ?x203) ?x123)))
 (let (($x313 (= ?x114 ?x216)))
 (let (($x333 (= $x313 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x292 (concat ?x58 (concat ?x129 (concat ?x147 ?x78)))))
 (let (($x330 (= ?x292 input.dst.llvm-%m)))
 (let (($x23 (= $x330 true)))
 (let (($x339 (= input.dst.llvm-%m ?x292)))
 (let ((?x122 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x193 (= (_ bv0 32) ?x122)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x328 (and $x29 $x113)))
 (let (($x51 (and $x328 $x193)))
 (let (($x319 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (and $x319 $x51)))
 (let (($x357 (forall ((input.ind-%var3847X (_ BitVec 32)) )(let ((?x31 (bvadd (bvmul input.ind-%var3847X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x158))))
 (let ((?x373 (input.spec-%var-m-0.1.1 input.ind-%var3847X)))
 (let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3847X)))
 (=> $x111 (= ?x373 ?x244))))))))
 ))
 (let (($x238 (forall ((input.ind-%var3846X (_ BitVec 32)) )(let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3846X)))
 (= $x111 (and (bvule (_ bv0 32) input.ind-%var3846X) (bvult input.ind-%var3846X (_ bv100 32))))))
 ))
 (let (($x56 (and $x238 $x357)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x184 $x162)))))))
 (let (($x28 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x208 (= (bvand ?x138 (_ bv4294967292 32)) ?x138)))
 (let (($x5 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x138 (bvsub ?x138 (_ bv4 32))) (bvult ?x138 (bvsub ?x138 (_ bv4 32))))))
 (let (($x223 (and true $x5)))
 (let (($x18 (= (bvand ?x165 (_ bv4294967292 32)) ?x165)))
 (let (($x291 (and $x18 $x223)))
 (let (($x89 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv8 32))) (bvult ?x8 (bvsub ?x8 (_ bv8 32))))))
 (let (($x94 (and (and (and true $x89) $x291) $x208)))
 (let (($x202 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x294 (and true $x202)))
 (let (($x336 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x38 (and $x336 $x294)))
 (let (($x190 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x165 (bvsub ?x165 (_ bv12 32))) (bvult ?x165 (bvsub ?x165 (_ bv12 32))))))
 (let (($x43 (and (and (and true $x336) $x190) $x38)))
 (let (($x44 (and (and (and (and (and (and $x43 $x94) $x28) $x104) $x56) $x197) $x339)))
 (let (($x222 (= $x44 true)))
 (let (($x118 (= $x43 true)))
 (let (($x63 (and $x94 $x28)))
 (let (($x85 (= $x63 true)))
 (let (($x307 (and $x85 $x118)))
 (let (($x22 (and $x307 $x222)))
 (let (($x15 (and $x22 $x23)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x60 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x60 (_ bv0 32))))
 (let (($x351 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x318 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x318 (_ bv1 32))))
 (let (($x284 (and $x131 $x213)))
 (let (($x350 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x352 (ite $x350 (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x352 (_ bv1 32))))
 (let (($x40 (and $x353 $x284)))
 (let (($x312 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x237 (ite $x312 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x237 (_ bv0 32))))
 (let (($x232 (and $x169 $x40)))
 (let (($x73 (and $x232 $x15)))
 (let ((?x369 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x366 (= ?x369 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x142 (bvuge ?x237 (_ bv1 32))))
 (let (($x344 (=> $x142 $x366)))
 (let (($x279 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x62 (= $x142 $x279)))
 (let (($x47 (= false false)))
 (let (($x196 (=> $x169 $x47)))
 (let (($x163 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x280 (= $x169 $x163)))
 (let (($x228 (and (and (and $x280 $x196) $x62) $x344)))
 (let (($x36 (and $x228 $x73)))
 (let (($x362 (= ?x341 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x74 (=> $x353 $x362)))
 (let (($x83 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x360 (= $x353 $x83)))
 (let (($x55 (= ?x352 (_ bv0 32))))
 (let (($x167 (=> $x55 $x47)))
 (let (($x220 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x180 (= $x55 $x220)))
 (let (($x240 (and (and (and $x180 $x167) $x360) $x74)))
 (let (($x66 (and $x240 $x36)))
 (let ((?x155 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x37 (= ?x155 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x337 (bvuge ?x60 (_ bv1 32))))
 (let (($x7 (=> $x337 $x37)))
 (let (($x75 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x308 (= $x337 $x75)))
 (let (($x34 (and (and (= $x213 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x213 $x47)) $x308)))
 (let (($x211 (and $x34 $x7)))
 (let (($x297 (and $x211 $x66)))
 (let (($x151 (= ?x82 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x358 (=> $x131 $x151)))
 (let (($x298 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x316 (= $x131 $x298)))
 (let (($x248 (= ?x318 (_ bv0 32))))
 (let (($x342 (=> $x248 $x47)))
 (let (($x166 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x309 (= $x248 $x166)))
 (let (($x57 (and (and (and $x309 $x342) $x316) $x358)))
 (let (($x231 (and $x57 $x297)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x285 (and $x305 $x231)))
 (let (($x303 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x326 (and $x303 $x285)))
 (let (($x335 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x90 (and $x335 $x326)))
 (let (($x314 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x95 (and $x314 $x90)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x187 (and $x67 $x95)))
 (let (($x148 (and $x47 $x187)))
 (let (($x182 (= ?x369 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x277 (and $x182 $x148)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x209 (and $x368 $x277)))
 (let (($x70 (and $x47 $x209)))
 (let (($x287 (= ?x341 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x19 (and $x287 $x70)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x311 (and $x289 $x19)))
 (let (($x130 (and $x47 $x311)))
 (let (($x120 (= ?x155 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x242 (and $x120 $x130)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x144 (and $x272 $x242)))
 (let (($x363 (and $x47 $x144)))
 (let (($x281 (= ?x82 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x150 (and $x281 $x363)))
 (let (($x270 (bvugt ?x138 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x68 (=> (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x270)))))))
 (let (($x320 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x269 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x320)))))))
 (let (($x191 (bvugt ?x165 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x230 (=> (bvule ?x165 (bvsub (bvadd ?x165 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x191)))))))
 (let (($x109 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x236 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x259 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x236)))
 (let (($x136 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x259 $x109)))))))
 (let (($x168 (and $x136 $x230)))
 (let (($x257 (and $x168 $x269)))
 (let (($x100 (and $x257 $x68)))
 (let (($x290 (and $x100 $x150)))
 (let (($x367 (=> $x290 $x333)))
 (not $x367))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 218 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x159 (concat ?x273 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x109 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x181 (bvadd ?x109 (_ bv3 32))))
 (let ((?x164 (concat (select input.dst.llvm-mem ?x181) (concat ?x192 ?x159))))
 (let ((?x338 (bvmul (_ bv4294967295 32) ?x164)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x334 (concat ?x97 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x320 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x52 (bvadd ?x320 (_ bv3 32))))
 (let ((?x345 (concat (select input.dst.llvm-mem ?x52) (concat ?x14 ?x334))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x114 (concat ?x123 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x195 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x39 (bvadd ?x195 (_ bv3 32))))
 (let ((?x26 (concat (select input.dst.llvm-mem ?x39) (concat ?x313 ?x114))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x81)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x32)))
 (let ((?x310 (bvadd (bvadd (bvadd ?x96 ?x26) ?x345) ?x338)))
 (let ((?x369 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x116 (= ?x369 ?x310)))
 (let (($x12 (= $x116 true)))
 (let ((?x326 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x311 (concat ?x19 (concat ?x277 (concat ?x95 ?x326)))))
 (let (($x217 (= ?x311 input.dst.llvm-%m)))
 (let (($x84 (= $x217 true)))
 (let (($x130 (= input.dst.llvm-%m ?x311)))
 (let ((?x36 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x66 (= (_ bv0 32) ?x36)))
 (let ((?x23 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x330 $x15)))
 (let (($x297 (and $x73 $x66)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x22 $x297)))
 (let (($x339 (forall ((input.ind-%var3891X (_ BitVec 32)) )(let ((?x51 (bvadd (bvmul input.ind-%var3891X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x58))))
 (let ((?x155 (input.spec-%var-m-0.1.1 input.ind-%var3891X)))
 (let (($x47 (input.spec-%var-m-0.0.1 input.ind-%var3891X)))
 (=> $x47 (= ?x155 ?x98))))))))
 ))
 (let (($x340 (forall ((input.ind-%var3890X (_ BitVec 32)) )(let (($x47 (input.spec-%var-m-0.0.1 input.ind-%var3890X)))
 (= $x47 (and (bvule (_ bv0 32) input.ind-%var3890X) (bvult input.ind-%var3890X (_ bv100 32))))))
 ))
 (let (($x44 (and $x340 $x339)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x156)))))))
 (let (($x256 (= (bvand ?x109 (_ bv4294967292 32)) ?x109)))
 (let (($x63 (= (bvand ?x320 (_ bv4294967292 32)) ?x320)))
 (let (($x208 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x320 (bvsub ?x320 (_ bv4 32))) (bvult ?x320 (bvsub ?x320 (_ bv4 32))))))
 (let (($x94 (and true $x208)))
 (let (($x5 (= (bvand ?x195 (_ bv4294967292 32)) ?x195)))
 (let (($x176 (and $x5 $x94)))
 (let (($x322 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x109 (bvsub ?x109 (_ bv8 32))) (bvult ?x109 (bvsub ?x109 (_ bv8 32))))))
 (let (($x336 (and (and (and true $x322) $x176) $x63)))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x307 (and true $x118)))
 (let (($x190 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x107 (and $x190 $x307)))
 (let (($x206 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x195 (bvsub ?x195 (_ bv12 32))) (bvult ?x195 (bvsub ?x195 (_ bv12 32))))))
 (let (($x356 (and (and (and true $x190) $x206) $x107)))
 (let (($x27 (and (and (and (and (and (and $x356 $x336) $x256) $x49) $x44) $x231) $x130)))
 (let (($x200 (= $x27 true)))
 (let (($x189 (= $x356 true)))
 (let (($x80 (and $x336 $x256)))
 (let (($x286 (= $x80 true)))
 (let (($x235 (and $x286 $x189)))
 (let (($x218 (and $x235 $x200)))
 (let (($x301 (and $x218 $x84)))
 (let (($x331 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x252 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x252 (_ bv0 32))))
 (let (($x309 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x143 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x143 (_ bv0 32))))
 (let (($x300 (and $x131 $x337)))
 (let (($x167 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x347 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x347 (_ bv1 32))))
 (let (($x89 (and $x362 $x300)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x11 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x11 (_ bv0 32))))
 (let (($x65 (and $x142 $x89)))
 (let (($x115 (and $x65 $x301)))
 (let ((?x124 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x40 (= ?x124 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x366 (bvuge ?x11 (_ bv1 32))))
 (let (($x232 (=> $x366 $x40)))
 (let (($x344 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x228 (= $x366 $x344)))
 (let (($x270 (= false false)))
 (let (($x79 (=> $x142 $x270)))
 (let (($x62 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x327 (= $x142 $x62)))
 (let (($x194 (and (and (and $x327 $x79) $x228) $x232)))
 (let (($x221 (and $x194 $x115)))
 (let (($x237 (= ?x369 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x169 (=> $x362 $x237)))
 (let (($x74 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x240 (= $x362 $x74)))
 (let (($x353 (= ?x347 (_ bv0 32))))
 (let (($x157 (=> $x353 $x270)))
 (let (($x360 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x365 (= $x353 $x360)))
 (let (($x280 (and (and (and $x365 $x157) $x240) $x169)))
 (let (($x188 (and $x280 $x221)))
 (let ((?x341 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x352 (= ?x341 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x37 (bvuge ?x252 (_ bv1 32))))
 (let (($x55 (=> $x37 $x352)))
 (let (($x7 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x211 (= $x37 $x7)))
 (let (($x220 (and (and (= $x337 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x337 $x270)) $x211)))
 (let (($x180 (and $x220 $x55)))
 (let (($x145 (and $x180 $x188)))
 (let ((?x100 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x60 (= ?x100 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x151 (bvuge ?x143 (_ bv1 32))))
 (let (($x213 (=> $x151 $x60)))
 (let (($x358 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x57 (= $x151 $x358)))
 (let (($x370 (=> $x131 $x270)))
 (let (($x316 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x288 (= $x131 $x316)))
 (let (($x324 (and (and (and $x288 $x370) $x57) $x213)))
 (let (($x13 (and $x324 $x145)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x59 (and $x166 $x13)))
 (let (($x248 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x25 (and $x248 $x59)))
 (let (($x351 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x121 (and $x351 $x25)))
 (let (($x210 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x69 (and $x210 $x121)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x178 (and $x20 $x69)))
 (let (($x133 (and $x270 $x178)))
 (let (($x101 (= ?x124 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x229 (and $x101 $x133)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x354 (and $x67 $x229)))
 (let (($x227 (and $x270 $x354)))
 (let (($x182 (= ?x369 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x24 (and $x182 $x227)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x161 (and $x368 $x24)))
 (let (($x175 (and $x270 $x161)))
 (let (($x287 (= ?x341 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x127 (and $x287 $x175)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x329 (and $x246 $x127)))
 (let (($x126 (and $x270 $x329)))
 (let (($x241 (= ?x100 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x117 (and $x241 $x126)))
 (let (($x141 (bvugt ?x320 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x71 (=> (bvule ?x320 (bvsub (bvadd ?x320 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x141)))))))
 (let (($x343 (bvugt ?x109 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x102 (=> (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x343)))))))
 (let (($x266 (bvugt ?x195 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x236 (=> (bvule ?x195 (bvsub (bvadd ?x195 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x266)))))))
 (let (($x226 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x230 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x186 $x226)))))))
 (let (($x168 (and $x230 $x236)))
 (let (($x321 (and $x168 $x102)))
 (let (($x269 (and $x321 $x71)))
 (let (($x203 (and $x269 $x117)))
 (let (($x42 (=> $x203 $x12)))
 (not $x42)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x159 (concat ?x273 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x109 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x181 (bvadd ?x109 (_ bv3 32))))
 (let ((?x164 (concat (select input.dst.llvm-mem ?x181) (concat ?x192 ?x159))))
 (let ((?x338 (bvmul (_ bv4294967295 32) ?x164)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x334 (concat ?x97 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x320 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x52 (bvadd ?x320 (_ bv3 32))))
 (let ((?x345 (concat (select input.dst.llvm-mem ?x52) (concat ?x14 ?x334))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x114 (concat ?x123 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x195 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x39 (bvadd ?x195 (_ bv3 32))))
 (let ((?x26 (concat (select input.dst.llvm-mem ?x39) (concat ?x313 ?x114))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x81)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x32)))
 (let ((?x310 (bvadd (bvadd (bvadd ?x96 ?x26) ?x345) ?x338)))
 (let ((?x369 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x116 (= ?x369 ?x310)))
 (let (($x12 (= $x116 true)))
 (let ((?x326 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x311 (concat ?x19 (concat ?x277 (concat ?x95 ?x326)))))
 (let (($x217 (= ?x311 input.dst.llvm-%m)))
 (let (($x84 (= $x217 true)))
 (let (($x130 (= input.dst.llvm-%m ?x311)))
 (let ((?x36 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x66 (= (_ bv0 32) ?x36)))
 (let ((?x23 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x330 $x15)))
 (let (($x297 (and $x73 $x66)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x22 $x297)))
 (let (($x339 (forall ((input.ind-%var3891X (_ BitVec 32)) )(let ((?x51 (bvadd (bvmul input.ind-%var3891X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x58))))
 (let ((?x155 (input.spec-%var-m-0.1.1 input.ind-%var3891X)))
 (let (($x47 (input.spec-%var-m-0.0.1 input.ind-%var3891X)))
 (=> $x47 (= ?x155 ?x98))))))))
 ))
 (let (($x340 (forall ((input.ind-%var3890X (_ BitVec 32)) )(let (($x47 (input.spec-%var-m-0.0.1 input.ind-%var3890X)))
 (= $x47 (and (bvule (_ bv0 32) input.ind-%var3890X) (bvult input.ind-%var3890X (_ bv100 32))))))
 ))
 (let (($x44 (and $x340 $x339)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x156)))))))
 (let (($x256 (= (bvand ?x109 (_ bv4294967292 32)) ?x109)))
 (let (($x63 (= (bvand ?x320 (_ bv4294967292 32)) ?x320)))
 (let (($x208 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x320 (bvsub ?x320 (_ bv4 32))) (bvult ?x320 (bvsub ?x320 (_ bv4 32))))))
 (let (($x94 (and true $x208)))
 (let (($x5 (= (bvand ?x195 (_ bv4294967292 32)) ?x195)))
 (let (($x176 (and $x5 $x94)))
 (let (($x322 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x109 (bvsub ?x109 (_ bv8 32))) (bvult ?x109 (bvsub ?x109 (_ bv8 32))))))
 (let (($x336 (and (and (and true $x322) $x176) $x63)))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x307 (and true $x118)))
 (let (($x190 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x107 (and $x190 $x307)))
 (let (($x206 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x195 (bvsub ?x195 (_ bv12 32))) (bvult ?x195 (bvsub ?x195 (_ bv12 32))))))
 (let (($x356 (and (and (and true $x190) $x206) $x107)))
 (let (($x27 (and (and (and (and (and (and $x356 $x336) $x256) $x49) $x44) $x231) $x130)))
 (let (($x200 (= $x27 true)))
 (let (($x189 (= $x356 true)))
 (let (($x80 (and $x336 $x256)))
 (let (($x286 (= $x80 true)))
 (let (($x235 (and $x286 $x189)))
 (let (($x218 (and $x235 $x200)))
 (let (($x301 (and $x218 $x84)))
 (let (($x331 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x252 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x252 (_ bv0 32))))
 (let (($x309 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x143 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x143 (_ bv0 32))))
 (let (($x300 (and $x131 $x337)))
 (let (($x167 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x347 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x347 (_ bv1 32))))
 (let (($x89 (and $x362 $x300)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x11 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x11 (_ bv0 32))))
 (let (($x65 (and $x142 $x89)))
 (let (($x115 (and $x65 $x301)))
 (let ((?x124 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x40 (= ?x124 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x366 (bvuge ?x11 (_ bv1 32))))
 (let (($x232 (=> $x366 $x40)))
 (let (($x344 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x228 (= $x366 $x344)))
 (let (($x270 (= false false)))
 (let (($x79 (=> $x142 $x270)))
 (let (($x62 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x327 (= $x142 $x62)))
 (let (($x194 (and (and (and $x327 $x79) $x228) $x232)))
 (let (($x221 (and $x194 $x115)))
 (let (($x237 (= ?x369 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x169 (=> $x362 $x237)))
 (let (($x74 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x240 (= $x362 $x74)))
 (let (($x353 (= ?x347 (_ bv0 32))))
 (let (($x157 (=> $x353 $x270)))
 (let (($x360 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x365 (= $x353 $x360)))
 (let (($x280 (and (and (and $x365 $x157) $x240) $x169)))
 (let (($x188 (and $x280 $x221)))
 (let ((?x341 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x352 (= ?x341 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x37 (bvuge ?x252 (_ bv1 32))))
 (let (($x55 (=> $x37 $x352)))
 (let (($x7 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x211 (= $x37 $x7)))
 (let (($x220 (and (and (= $x337 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x337 $x270)) $x211)))
 (let (($x180 (and $x220 $x55)))
 (let (($x145 (and $x180 $x188)))
 (let ((?x100 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x60 (= ?x100 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x151 (bvuge ?x143 (_ bv1 32))))
 (let (($x213 (=> $x151 $x60)))
 (let (($x358 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x57 (= $x151 $x358)))
 (let (($x370 (=> $x131 $x270)))
 (let (($x316 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x288 (= $x131 $x316)))
 (let (($x324 (and (and (and $x288 $x370) $x57) $x213)))
 (let (($x13 (and $x324 $x145)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x59 (and $x166 $x13)))
 (let (($x248 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x25 (and $x248 $x59)))
 (let (($x351 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x121 (and $x351 $x25)))
 (let (($x210 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x69 (and $x210 $x121)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x178 (and $x20 $x69)))
 (let (($x133 (and $x270 $x178)))
 (let (($x101 (= ?x124 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x229 (and $x101 $x133)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x354 (and $x67 $x229)))
 (let (($x227 (and $x270 $x354)))
 (let (($x182 (= ?x369 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x24 (and $x182 $x227)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x161 (and $x368 $x24)))
 (let (($x175 (and $x270 $x161)))
 (let (($x287 (= ?x341 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x127 (and $x287 $x175)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x329 (and $x246 $x127)))
 (let (($x126 (and $x270 $x329)))
 (let (($x241 (= ?x100 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x117 (and $x241 $x126)))
 (let (($x141 (bvugt ?x320 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x71 (=> (bvule ?x320 (bvsub (bvadd ?x320 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x141)))))))
 (let (($x343 (bvugt ?x109 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x102 (=> (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x343)))))))
 (let (($x266 (bvugt ?x195 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x236 (=> (bvule ?x195 (bvsub (bvadd ?x195 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x266)))))))
 (let (($x226 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x230 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x186 $x226)))))))
 (let (($x168 (and $x230 $x236)))
 (let (($x321 (and $x168 $x102)))
 (let (($x269 (and $x321 $x71)))
 (let (($x203 (and $x269 $x117)))
 (let (($x42 (=> $x203 $x12)))
 (not $x42)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 217 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x369 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x328 (bvmul (_ bv4294967295 32) ?x369)))
 (let ((?x269 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x372 (bvadd ?x269 ?x328)))
 (let ((?x346 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x77 (concat ?x346 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x226 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x112 (bvadd ?x226 (_ bv3 32))))
 (let ((?x319 (concat (select input.dst.llvm-mem ?x112) (concat ?x357 ?x77))))
 (let ((?x113 (bvmul (_ bv4294967295 32) ?x319)))
 (let ((?x342 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x160 (concat ?x342 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x343 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x215 (bvadd ?x343 (_ bv3 32))))
 (let ((?x154 (concat (select input.dst.llvm-mem ?x215) (concat ?x162 ?x160))))
 (let ((?x338 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x310 (concat ?x338 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x86 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x355 (bvadd ?x86 (_ bv3 32))))
 (let ((?x214 (concat (select input.dst.llvm-mem ?x355) (concat ?x12 ?x310))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x302)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x273)))
 (let ((?x171 (bvadd (bvadd (bvadd ?x159 ?x214) ?x154) ?x113)))
 (let (($x122 (= ?x171 ?x372)))
 (let (($x205 (= $x122 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x24 (concat ?x229 (concat ?x69 ?x25)))))
 (let (($x87 (= ?x161 input.dst.llvm-%m)))
 (let (($x323 (= $x87 true)))
 (let (($x175 (= input.dst.llvm-%m ?x161)))
 (let ((?x221 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x188 (= (_ bv0 32) ?x221)))
 (let ((?x84 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x217 $x301)))
 (let (($x145 (and $x115 $x188)))
 (let (($x218 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x218 $x145)))
 (let (($x130 (forall ((input.ind-%var3935X (_ BitVec 32)) )(let ((?x297 (bvadd (bvmul input.ind-%var3935X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv1 32))) (select input.dst.llvm-mem ?x297))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv2 32))) ?x19))))
 (let ((?x341 (input.spec-%var-m-0.1.1 input.ind-%var3935X)))
 (let (($x270 (input.spec-%var-m-0.0.1 input.ind-%var3935X)))
 (=> $x270 (= ?x341 ?x187))))))))
 ))
 (let (($x129 (forall ((input.ind-%var3934X (_ BitVec 32)) )(let (($x270 (input.spec-%var-m-0.0.1 input.ind-%var3934X)))
 (= $x270 (and (bvule (_ bv0 32) input.ind-%var3934X) (bvult input.ind-%var3934X (_ bv100 32))))))
 ))
 (let (($x27 (and $x129 $x130)))
 (let (($x363 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x332 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x363)))))))
 (let (($x53 (= (bvand ?x226 (_ bv4294967292 32)) ?x226)))
 (let (($x80 (= (bvand ?x343 (_ bv4294967292 32)) ?x343)))
 (let (($x63 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x343 (bvsub ?x343 (_ bv4 32))) (bvult ?x343 (bvsub ?x343 (_ bv4 32))))))
 (let (($x336 (and true $x63)))
 (let (($x208 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x239 (and $x208 $x336)))
 (let (($x223 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x226 (bvsub ?x226 (_ bv8 32))) (bvult ?x226 (bvsub ?x226 (_ bv8 32))))))
 (let (($x190 (and (and (and true $x223) $x239) $x80)))
 (let (($x189 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x235 (and true $x189)))
 (let (($x206 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x242 (and $x206 $x235)))
 (let (($x43 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x86 (bvsub ?x86 (_ bv12 32))) (bvult ?x86 (bvsub ?x86 (_ bv12 32))))))
 (let (($x177 (and (and (and true $x206) $x43) $x242)))
 (let (($x201 (and (and (and (and (and (and $x177 $x190) $x53) $x332) $x27) $x13) $x175)))
 (let (($x268 (= $x201 true)))
 (let (($x296 (= $x177 true)))
 (let (($x46 (and $x190 $x53)))
 (let (($x261 (= $x46 true)))
 (let (($x359 (and $x261 $x296)))
 (let (($x140 (and $x359 $x268)))
 (let (($x106 (and $x140 $x323)))
 (let (($x271 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x293 (ite $x271 (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x293 (_ bv1 32))))
 (let (($x288 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x50 (ite $x288 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x50 (_ bv1 32))))
 (let (($x283 (and $x60 $x352)))
 (let (($x157 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x92 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let (($x362 (= ?x92 (_ bv0 32))))
 (let (($x322 (and $x362 $x283)))
 (let (($x79 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x139 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x366 (= ?x139 (_ bv0 32))))
 (let (($x85 (and $x366 $x322)))
 (let (($x81 (and $x85 $x106)))
 (let ((?x303 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x89 (= ?x303 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x40 (bvuge ?x139 (_ bv1 32))))
 (let (($x65 (=> $x40 $x89)))
 (let (($x232 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x194 (= $x40 $x232)))
 (let (($x141 (= false false)))
 (let (($x284 (=> $x366 $x141)))
 (let (($x228 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x170 (= $x366 $x228)))
 (let (($x18 (and (and (and $x170 $x284) $x194) $x65)))
 (let (($x32 (and $x18 $x81)))
 (let ((?x124 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x11 (= ?x124 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x237 (bvuge ?x92 (_ bv1 32))))
 (let (($x142 (=> $x237 $x11)))
 (let (($x169 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x280 (= $x237 $x169)))
 (let (($x62 (and (and (= $x362 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x362 $x141)) $x280)))
 (let (($x327 (and $x62 $x142)))
 (let (($x96 (and $x327 $x32)))
 (let (($x347 (= ?x369 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x353 (=> $x352 $x347)))
 (let (($x55 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x180 (= $x352 $x55)))
 (let (($x37 (= ?x293 (_ bv0 32))))
 (let (($x350 (=> $x37 $x141)))
 (let (($x211 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x220 (= $x37 $x211)))
 (let (($x365 (and (and (and $x220 $x350) $x180) $x353)))
 (let (($x367 (and $x365 $x96)))
 (let (($x252 (= ?x269 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x337 (=> $x60 $x252)))
 (let (($x213 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x324 (= $x60 $x213)))
 (let (($x151 (= ?x50 (_ bv0 32))))
 (let (($x260 (=> $x151 $x141)))
 (let (($x57 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x172 (= $x151 $x57)))
 (let (($x34 (and (and (and $x172 $x260) $x324) $x337)))
 (let (($x216 (and $x34 $x367)))
 (let (($x316 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x313 (and $x316 $x216)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x185 (and $x131 $x313)))
 (let (($x309 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x123 (and $x309 $x185)))
 (let (($x103 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x306 (and $x103 $x123)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x114 (and $x318 $x306)))
 (let (($x333 (and $x141 $x114)))
 (let (($x305 (= ?x303 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x26 (and $x305 $x333)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x282 (and $x20 $x26)))
 (let (($x41 (and $x141 $x282)))
 (let (($x101 (= ?x124 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x128 (and $x101 $x41)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x14 (and $x67 $x128)))
 (let (($x33 (and $x141 $x14)))
 (let (($x182 (= ?x369 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x97 (and $x182 $x33)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x152 (and $x137 $x97)))
 (let (($x334 (and $x141 $x152)))
 (let (($x52 (= ?x269 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x91 (and $x52 $x334)))
 (let (($x262 (bvugt ?x343 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x76 (=> (bvule ?x343 (bvsub (bvadd ?x343 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x262)))))))
 (let (($x371 (bvugt ?x226 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x6 (=> (bvule ?x226 (bvsub (bvadd ?x226 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x266 $x371)))))))
 (let (($x181 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x355)))
 (let (($x165 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x181)))))))
 (let (($x198 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x236 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x198)))))))
 (let (($x168 (and $x236 $x165)))
 (let (($x153 (and $x168 $x6)))
 (let (($x102 (and $x153 $x76)))
 (let (($x345 (and $x102 $x91)))
 (let (($x174 (=> $x345 $x205)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x369 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x328 (bvmul (_ bv4294967295 32) ?x369)))
 (let ((?x269 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x372 (bvadd ?x269 ?x328)))
 (let ((?x346 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x77 (concat ?x346 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x226 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x112 (bvadd ?x226 (_ bv3 32))))
 (let ((?x319 (concat (select input.dst.llvm-mem ?x112) (concat ?x357 ?x77))))
 (let ((?x113 (bvmul (_ bv4294967295 32) ?x319)))
 (let ((?x342 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x160 (concat ?x342 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x343 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x215 (bvadd ?x343 (_ bv3 32))))
 (let ((?x154 (concat (select input.dst.llvm-mem ?x215) (concat ?x162 ?x160))))
 (let ((?x338 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x310 (concat ?x338 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x86 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x355 (bvadd ?x86 (_ bv3 32))))
 (let ((?x214 (concat (select input.dst.llvm-mem ?x355) (concat ?x12 ?x310))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x302)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x273)))
 (let ((?x171 (bvadd (bvadd (bvadd ?x159 ?x214) ?x154) ?x113)))
 (let (($x122 (= ?x171 ?x372)))
 (let (($x205 (= $x122 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x24 (concat ?x229 (concat ?x69 ?x25)))))
 (let (($x87 (= ?x161 input.dst.llvm-%m)))
 (let (($x323 (= $x87 true)))
 (let (($x175 (= input.dst.llvm-%m ?x161)))
 (let ((?x221 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x188 (= (_ bv0 32) ?x221)))
 (let ((?x84 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x217 $x301)))
 (let (($x145 (and $x115 $x188)))
 (let (($x218 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x218 $x145)))
 (let (($x130 (forall ((input.ind-%var3935X (_ BitVec 32)) )(let ((?x297 (bvadd (bvmul input.ind-%var3935X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv1 32))) (select input.dst.llvm-mem ?x297))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv2 32))) ?x19))))
 (let ((?x341 (input.spec-%var-m-0.1.1 input.ind-%var3935X)))
 (let (($x270 (input.spec-%var-m-0.0.1 input.ind-%var3935X)))
 (=> $x270 (= ?x341 ?x187))))))))
 ))
 (let (($x129 (forall ((input.ind-%var3934X (_ BitVec 32)) )(let (($x270 (input.spec-%var-m-0.0.1 input.ind-%var3934X)))
 (= $x270 (and (bvule (_ bv0 32) input.ind-%var3934X) (bvult input.ind-%var3934X (_ bv100 32))))))
 ))
 (let (($x27 (and $x129 $x130)))
 (let (($x363 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x332 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x363)))))))
 (let (($x53 (= (bvand ?x226 (_ bv4294967292 32)) ?x226)))
 (let (($x80 (= (bvand ?x343 (_ bv4294967292 32)) ?x343)))
 (let (($x63 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x343 (bvsub ?x343 (_ bv4 32))) (bvult ?x343 (bvsub ?x343 (_ bv4 32))))))
 (let (($x336 (and true $x63)))
 (let (($x208 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x239 (and $x208 $x336)))
 (let (($x223 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x226 (bvsub ?x226 (_ bv8 32))) (bvult ?x226 (bvsub ?x226 (_ bv8 32))))))
 (let (($x190 (and (and (and true $x223) $x239) $x80)))
 (let (($x189 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x235 (and true $x189)))
 (let (($x206 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x242 (and $x206 $x235)))
 (let (($x43 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x86 (bvsub ?x86 (_ bv12 32))) (bvult ?x86 (bvsub ?x86 (_ bv12 32))))))
 (let (($x177 (and (and (and true $x206) $x43) $x242)))
 (let (($x201 (and (and (and (and (and (and $x177 $x190) $x53) $x332) $x27) $x13) $x175)))
 (let (($x268 (= $x201 true)))
 (let (($x296 (= $x177 true)))
 (let (($x46 (and $x190 $x53)))
 (let (($x261 (= $x46 true)))
 (let (($x359 (and $x261 $x296)))
 (let (($x140 (and $x359 $x268)))
 (let (($x106 (and $x140 $x323)))
 (let (($x271 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x293 (ite $x271 (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x293 (_ bv1 32))))
 (let (($x288 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x50 (ite $x288 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x50 (_ bv1 32))))
 (let (($x283 (and $x60 $x352)))
 (let (($x157 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x92 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let (($x362 (= ?x92 (_ bv0 32))))
 (let (($x322 (and $x362 $x283)))
 (let (($x79 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x139 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x366 (= ?x139 (_ bv0 32))))
 (let (($x85 (and $x366 $x322)))
 (let (($x81 (and $x85 $x106)))
 (let ((?x303 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x89 (= ?x303 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x40 (bvuge ?x139 (_ bv1 32))))
 (let (($x65 (=> $x40 $x89)))
 (let (($x232 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x194 (= $x40 $x232)))
 (let (($x141 (= false false)))
 (let (($x284 (=> $x366 $x141)))
 (let (($x228 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x170 (= $x366 $x228)))
 (let (($x18 (and (and (and $x170 $x284) $x194) $x65)))
 (let (($x32 (and $x18 $x81)))
 (let ((?x124 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x11 (= ?x124 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x237 (bvuge ?x92 (_ bv1 32))))
 (let (($x142 (=> $x237 $x11)))
 (let (($x169 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x280 (= $x237 $x169)))
 (let (($x62 (and (and (= $x362 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x362 $x141)) $x280)))
 (let (($x327 (and $x62 $x142)))
 (let (($x96 (and $x327 $x32)))
 (let (($x347 (= ?x369 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x353 (=> $x352 $x347)))
 (let (($x55 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x180 (= $x352 $x55)))
 (let (($x37 (= ?x293 (_ bv0 32))))
 (let (($x350 (=> $x37 $x141)))
 (let (($x211 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x220 (= $x37 $x211)))
 (let (($x365 (and (and (and $x220 $x350) $x180) $x353)))
 (let (($x367 (and $x365 $x96)))
 (let (($x252 (= ?x269 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x337 (=> $x60 $x252)))
 (let (($x213 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x324 (= $x60 $x213)))
 (let (($x151 (= ?x50 (_ bv0 32))))
 (let (($x260 (=> $x151 $x141)))
 (let (($x57 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x172 (= $x151 $x57)))
 (let (($x34 (and (and (and $x172 $x260) $x324) $x337)))
 (let (($x216 (and $x34 $x367)))
 (let (($x316 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x313 (and $x316 $x216)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x185 (and $x131 $x313)))
 (let (($x309 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x123 (and $x309 $x185)))
 (let (($x103 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x306 (and $x103 $x123)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x114 (and $x318 $x306)))
 (let (($x333 (and $x141 $x114)))
 (let (($x305 (= ?x303 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x26 (and $x305 $x333)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x282 (and $x20 $x26)))
 (let (($x41 (and $x141 $x282)))
 (let (($x101 (= ?x124 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x128 (and $x101 $x41)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x14 (and $x67 $x128)))
 (let (($x33 (and $x141 $x14)))
 (let (($x182 (= ?x369 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x97 (and $x182 $x33)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x152 (and $x137 $x97)))
 (let (($x334 (and $x141 $x152)))
 (let (($x52 (= ?x269 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x91 (and $x52 $x334)))
 (let (($x262 (bvugt ?x343 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x76 (=> (bvule ?x343 (bvsub (bvadd ?x343 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x262)))))))
 (let (($x371 (bvugt ?x226 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x6 (=> (bvule ?x226 (bvsub (bvadd ?x226 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x266 $x371)))))))
 (let (($x181 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x355)))
 (let (($x165 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x181)))))))
 (let (($x198 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x236 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x198)))))))
 (let (($x168 (and $x236 $x165)))
 (let (($x153 (and $x168 $x6)))
 (let (($x102 (and $x153 $x76)))
 (let (($x345 (and $x102 $x91)))
 (let (($x174 (=> $x345 $x205)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 219 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x124 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x158 (bvmul (_ bv4294967295 32) ?x124)))
 (let ((?x330 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x23 (concat ?x330 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x198 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x105 (bvadd ?x198 (_ bv3 32))))
 (let ((?x35 (concat (select input.dst.llvm-mem ?x105) (concat ?x222 ?x23))))
 (let ((?x44 (bvmul (_ bv4294967295 32) ?x35)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x59 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x371 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x138 (bvadd ?x371 (_ bv3 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem ?x138) (concat ?x281 ?x59))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x113 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x372 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x30 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x247 (bvadd ?x30 (_ bv3 32))))
 (let ((?x174 (concat (select input.dst.llvm-mem ?x247) (concat ?x372 ?x171))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x173)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x346)))
 (let ((?x110 (bvadd (bvadd (bvadd ?x77 ?x174) ?x199) ?x44)))
 (let (($x193 (= ?x110 ?x158)))
 (let (($x73 (= $x193 true)))
 (let ((?x185 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x306 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x128 (concat ?x26 (concat ?x306 ?x185)))))
 (let (($x255 (= ?x14 input.dst.llvm-%m)))
 (let (($x299 (= $x255 true)))
 (let (($x33 (= input.dst.llvm-%m ?x14)))
 (let ((?x32 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x96 (= (_ bv0 32) ?x32)))
 (let ((?x323 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x323)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x87 $x106)))
 (let (($x367 (and $x81 $x96)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (and $x140 $x367)))
 (let (($x175 (forall ((input.ind-%var3979X (_ BitVec 32)) )(let ((?x145 (bvadd (bvmul input.ind-%var3979X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv1 32))) (select input.dst.llvm-mem ?x145))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv2 32))) ?x24))))
 (let ((?x369 (input.spec-%var-m-0.1.1 input.ind-%var3979X)))
 (let (($x141 (input.spec-%var-m-0.0.1 input.ind-%var3979X)))
 (=> $x141 (= ?x369 ?x178))))))))
 ))
 (let (($x277 (forall ((input.ind-%var3978X (_ BitVec 32)) )(let (($x141 (input.spec-%var-m-0.0.1 input.ind-%var3978X)))
 (= $x141 (and (bvule (_ bv0 32) input.ind-%var3978X) (bvult input.ind-%var3978X (_ bv100 32))))))
 ))
 (let (($x201 (and $x277 $x175)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x332 $x126)))))))
 (let (($x294 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x46 (= (bvand ?x371 (_ bv4294967292 32)) ?x371)))
 (let (($x80 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x371 (bvsub ?x371 (_ bv4 32))) (bvult ?x371 (bvsub ?x371 (_ bv4 32))))))
 (let (($x190 (and true $x80)))
 (let (($x63 (= (bvand ?x30 (_ bv4294967292 32)) ?x30)))
 (let (($x317 (and $x63 $x190)))
 (let (($x94 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x198 (bvsub ?x198 (_ bv8 32))) (bvult ?x198 (bvsub ?x198 (_ bv8 32))))))
 (let (($x206 (and (and (and true $x94) $x317) $x46)))
 (let (($x296 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x359 (and true $x296)))
 (let (($x43 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x127 (and $x43 $x359)))
 (let (($x356 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x30 (bvsub ?x30 (_ bv12 32))) (bvult ?x30 (bvsub ?x30 (_ bv12 32))))))
 (let (($x364 (and (and (and true $x43) $x356) $x127)))
 (let (($x348 (and (and (and (and (and (and $x364 $x206) $x294) $x78) $x201) $x216) $x33)))
 (let (($x192 (= $x348 true)))
 (let (($x31 (= $x364 true)))
 (let (($x276 (and $x206 $x294)))
 (let (($x202 (= $x276 true)))
 (let (($x224 (and $x202 $x31)))
 (let (($x265 (and $x224 $x192)))
 (let (($x149 (and $x265 $x299)))
 (let (($x350 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x83 (ite $x350 (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x83 (_ bv1 32))))
 (let (($x172 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x75 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x75 (_ bv0 32))))
 (let (($x291 (and $x60 $x347)))
 (let (($x312 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x279 (ite $x312 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x279 (_ bv0 32))))
 (let (($x223 (and $x237 $x291)))
 (let (($x284 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x295 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x295 (_ bv0 32))))
 (let (($x286 (and $x40 $x223)))
 (let (($x302 (and $x286 $x149)))
 (let ((?x248 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x322 (= ?x248 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x89 (bvuge ?x295 (_ bv1 32))))
 (let (($x85 (=> $x89 $x322)))
 (let (($x65 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x18 (= $x89 $x65)))
 (let (($x262 (= false false)))
 (let (($x300 (=> $x40 $x262)))
 (let (($x194 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x132 (= $x40 $x194)))
 (let (($x5 (and (and (and $x132 $x300) $x18) $x85)))
 (let (($x273 (and $x5 $x302)))
 (let ((?x303 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x139 (= ?x303 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x11 (bvuge ?x279 (_ bv1 32))))
 (let (($x366 (=> $x11 $x139)))
 (let (($x142 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x327 (= $x11 $x142)))
 (let (($x228 (and (and (= $x237 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x237 $x262)) $x327)))
 (let (($x170 (and $x228 $x366)))
 (let (($x159 (and $x170 $x273)))
 (let (($x92 (= ?x124 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x362 (=> $x347 $x92)))
 (let (($x353 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x365 (= $x347 $x353)))
 (let (($x352 (= ?x83 (_ bv0 32))))
 (let (($x167 (=> $x352 $x262)))
 (let (($x180 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x360 (= $x352 $x180)))
 (let (($x163 (and (and (and $x360 $x167) $x365) $x362)))
 (let (($x125 (and $x163 $x159)))
 (let ((?x102 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x293 (= ?x102 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x252 (bvuge ?x75 (_ bv1 32))))
 (let (($x37 (=> $x252 $x293)))
 (let (($x337 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x34 (= $x252 $x337)))
 (let (($x331 (=> $x60 $x262)))
 (let (($x324 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x308 (= $x60 $x324)))
 (let (($x220 (and (and (and $x308 $x331) $x34) $x37)))
 (let (($x116 (and $x220 $x125)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x12 (and $x57 $x116)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x164 (and $x151 $x12)))
 (let (($x288 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x338 (and $x288 $x164)))
 (let (($x298 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x234 (and $x298 $x338)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x310 (and $x143 $x234)))
 (let (($x42 (and $x262 $x310)))
 (let (($x166 (= ?x248 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x214 (and $x166 $x42)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x10 (and $x318 $x214)))
 (let (($x373 (and $x262 $x10)))
 (let (($x305 (= ?x303 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x219 (and $x305 $x373)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x162 (and $x20 $x219)))
 (let (($x285 (and $x262 $x162)))
 (let (($x101 (= ?x124 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x342 (and $x101 $x285)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x184 (and $x183 $x342)))
 (let (($x160 (and $x262 $x184)))
 (let (($x215 (= ?x102 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x264 (and $x215 $x160)))
 (let (($x257 (bvugt ?x371 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x82 (=> (bvule ?x371 (bvsub (bvadd ?x371 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x257)))))))
 (let (($x267 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x249 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x267)))))))
 (let (($x112 (bvugt ?x30 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x247)))
 (let (($x195 (=> (bvule ?x30 (bvsub (bvadd ?x30 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x278 $x112)))))))
 (let (($x245 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x165 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x245)))))))
 (let (($x168 (and $x165 $x195)))
 (let (($x108 (and $x168 $x249)))
 (let (($x6 (and $x108 $x82)))
 (let (($x154 (and $x6 $x264)))
 (let (($x207 (=> $x154 $x73)))
 (not $x207))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x124 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x158 (bvmul (_ bv4294967295 32) ?x124)))
 (let ((?x330 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x23 (concat ?x330 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x198 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x105 (bvadd ?x198 (_ bv3 32))))
 (let ((?x35 (concat (select input.dst.llvm-mem ?x105) (concat ?x222 ?x23))))
 (let ((?x44 (bvmul (_ bv4294967295 32) ?x35)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x59 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x371 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x138 (bvadd ?x371 (_ bv3 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem ?x138) (concat ?x281 ?x59))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x113 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x372 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x30 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x247 (bvadd ?x30 (_ bv3 32))))
 (let ((?x174 (concat (select input.dst.llvm-mem ?x247) (concat ?x372 ?x171))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x173)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x346)))
 (let ((?x110 (bvadd (bvadd (bvadd ?x77 ?x174) ?x199) ?x44)))
 (let (($x193 (= ?x110 ?x158)))
 (let (($x73 (= $x193 true)))
 (let ((?x185 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x306 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x128 (concat ?x26 (concat ?x306 ?x185)))))
 (let (($x255 (= ?x14 input.dst.llvm-%m)))
 (let (($x299 (= $x255 true)))
 (let (($x33 (= input.dst.llvm-%m ?x14)))
 (let ((?x32 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x96 (= (_ bv0 32) ?x32)))
 (let ((?x323 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x323)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x87 $x106)))
 (let (($x367 (and $x81 $x96)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (and $x140 $x367)))
 (let (($x175 (forall ((input.ind-%var3979X (_ BitVec 32)) )(let ((?x145 (bvadd (bvmul input.ind-%var3979X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv1 32))) (select input.dst.llvm-mem ?x145))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv2 32))) ?x24))))
 (let ((?x369 (input.spec-%var-m-0.1.1 input.ind-%var3979X)))
 (let (($x141 (input.spec-%var-m-0.0.1 input.ind-%var3979X)))
 (=> $x141 (= ?x369 ?x178))))))))
 ))
 (let (($x277 (forall ((input.ind-%var3978X (_ BitVec 32)) )(let (($x141 (input.spec-%var-m-0.0.1 input.ind-%var3978X)))
 (= $x141 (and (bvule (_ bv0 32) input.ind-%var3978X) (bvult input.ind-%var3978X (_ bv100 32))))))
 ))
 (let (($x201 (and $x277 $x175)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x332 $x126)))))))
 (let (($x294 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x46 (= (bvand ?x371 (_ bv4294967292 32)) ?x371)))
 (let (($x80 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x371 (bvsub ?x371 (_ bv4 32))) (bvult ?x371 (bvsub ?x371 (_ bv4 32))))))
 (let (($x190 (and true $x80)))
 (let (($x63 (= (bvand ?x30 (_ bv4294967292 32)) ?x30)))
 (let (($x317 (and $x63 $x190)))
 (let (($x94 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x198 (bvsub ?x198 (_ bv8 32))) (bvult ?x198 (bvsub ?x198 (_ bv8 32))))))
 (let (($x206 (and (and (and true $x94) $x317) $x46)))
 (let (($x296 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x359 (and true $x296)))
 (let (($x43 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x127 (and $x43 $x359)))
 (let (($x356 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x30 (bvsub ?x30 (_ bv12 32))) (bvult ?x30 (bvsub ?x30 (_ bv12 32))))))
 (let (($x364 (and (and (and true $x43) $x356) $x127)))
 (let (($x348 (and (and (and (and (and (and $x364 $x206) $x294) $x78) $x201) $x216) $x33)))
 (let (($x192 (= $x348 true)))
 (let (($x31 (= $x364 true)))
 (let (($x276 (and $x206 $x294)))
 (let (($x202 (= $x276 true)))
 (let (($x224 (and $x202 $x31)))
 (let (($x265 (and $x224 $x192)))
 (let (($x149 (and $x265 $x299)))
 (let (($x350 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x83 (ite $x350 (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x83 (_ bv1 32))))
 (let (($x172 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x75 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x75 (_ bv0 32))))
 (let (($x291 (and $x60 $x347)))
 (let (($x312 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x279 (ite $x312 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x279 (_ bv0 32))))
 (let (($x223 (and $x237 $x291)))
 (let (($x284 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x295 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x295 (_ bv0 32))))
 (let (($x286 (and $x40 $x223)))
 (let (($x302 (and $x286 $x149)))
 (let ((?x248 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x322 (= ?x248 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x89 (bvuge ?x295 (_ bv1 32))))
 (let (($x85 (=> $x89 $x322)))
 (let (($x65 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x18 (= $x89 $x65)))
 (let (($x262 (= false false)))
 (let (($x300 (=> $x40 $x262)))
 (let (($x194 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x132 (= $x40 $x194)))
 (let (($x5 (and (and (and $x132 $x300) $x18) $x85)))
 (let (($x273 (and $x5 $x302)))
 (let ((?x303 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x139 (= ?x303 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x11 (bvuge ?x279 (_ bv1 32))))
 (let (($x366 (=> $x11 $x139)))
 (let (($x142 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x327 (= $x11 $x142)))
 (let (($x228 (and (and (= $x237 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x237 $x262)) $x327)))
 (let (($x170 (and $x228 $x366)))
 (let (($x159 (and $x170 $x273)))
 (let (($x92 (= ?x124 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x362 (=> $x347 $x92)))
 (let (($x353 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x365 (= $x347 $x353)))
 (let (($x352 (= ?x83 (_ bv0 32))))
 (let (($x167 (=> $x352 $x262)))
 (let (($x180 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x360 (= $x352 $x180)))
 (let (($x163 (and (and (and $x360 $x167) $x365) $x362)))
 (let (($x125 (and $x163 $x159)))
 (let ((?x102 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x293 (= ?x102 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x252 (bvuge ?x75 (_ bv1 32))))
 (let (($x37 (=> $x252 $x293)))
 (let (($x337 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x34 (= $x252 $x337)))
 (let (($x331 (=> $x60 $x262)))
 (let (($x324 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x308 (= $x60 $x324)))
 (let (($x220 (and (and (and $x308 $x331) $x34) $x37)))
 (let (($x116 (and $x220 $x125)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x12 (and $x57 $x116)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x164 (and $x151 $x12)))
 (let (($x288 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x338 (and $x288 $x164)))
 (let (($x298 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x234 (and $x298 $x338)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x310 (and $x143 $x234)))
 (let (($x42 (and $x262 $x310)))
 (let (($x166 (= ?x248 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x214 (and $x166 $x42)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x10 (and $x318 $x214)))
 (let (($x373 (and $x262 $x10)))
 (let (($x305 (= ?x303 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x219 (and $x305 $x373)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x162 (and $x20 $x219)))
 (let (($x285 (and $x262 $x162)))
 (let (($x101 (= ?x124 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x342 (and $x101 $x285)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x184 (and $x183 $x342)))
 (let (($x160 (and $x262 $x184)))
 (let (($x215 (= ?x102 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x264 (and $x215 $x160)))
 (let (($x257 (bvugt ?x371 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x82 (=> (bvule ?x371 (bvsub (bvadd ?x371 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x257)))))))
 (let (($x267 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x249 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x267)))))))
 (let (($x112 (bvugt ?x30 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x247)))
 (let (($x195 (=> (bvule ?x30 (bvsub (bvadd ?x30 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x278 $x112)))))))
 (let (($x245 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x165 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x245)))))))
 (let (($x168 (and $x165 $x195)))
 (let (($x108 (and $x168 $x249)))
 (let (($x6 (and $x108 $x82)))
 (let (($x154 (and $x6 $x264)))
 (let (($x207 (=> $x154 $x73)))
 (not $x207))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 218 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x117 (concat ?x84 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x245 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x278 (bvadd ?x245 (_ bv3 32))))
 (let ((?x27 (concat (select input.dst.llvm-mem ?x278) (concat ?x311 ?x117))))
 (let ((?x218 (bvmul (_ bv4294967295 32) ?x27)))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x260 (concat ?x313 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x267 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x320 (bvadd ?x267 (_ bv3 32))))
 (let ((?x341 (concat (select input.dst.llvm-mem ?x320) (concat ?x231 ?x260))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x110 (concat ?x44 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x275 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x335 (bvadd ?x275 (_ bv3 32))))
 (let ((?x36 (concat (select input.dst.llvm-mem ?x335) (concat ?x193 ?x110))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x150)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x330)))
 (let ((?x58 (bvadd (bvadd (bvadd ?x23 ?x36) ?x341) ?x218)))
 (let ((?x6 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x66 (= ?x6 ?x58)))
 (let (($x115 (= $x66 true)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x219 (concat ?x214 (concat ?x234 ?x164)))))
 (let (($x244 (= ?x162 input.dst.llvm-%m)))
 (let (($x56 (= $x244 true)))
 (let (($x285 (= input.dst.llvm-%m ?x162)))
 (let ((?x273 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x159 (= (_ bv0 32) ?x273)))
 (let ((?x299 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x302 (and $x255 $x149)))
 (let (($x125 (and $x302 $x159)))
 (let (($x265 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x265 $x125)))
 (let (($x33 (forall ((input.ind-%var4023X (_ BitVec 32)) )(let ((?x367 (bvadd (bvmul input.ind-%var4023X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv1 32))) (select input.dst.llvm-mem ?x367))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv2 32))) ?x128))))
 (let ((?x124 (input.spec-%var-m-0.1.1 input.ind-%var4023X)))
 (let (($x262 (input.spec-%var-m-0.0.1 input.ind-%var4023X)))
 (=> $x262 (= ?x124 ?x114))))))))
 ))
 (let (($x229 (forall ((input.ind-%var4022X (_ BitVec 32)) )(let (($x262 (input.spec-%var-m-0.0.1 input.ind-%var4022X)))
 (= $x262 (and (bvule (_ bv0 32) input.ind-%var4022X) (bvult input.ind-%var4022X (_ bv100 32))))))
 ))
 (let (($x348 (and $x229 $x33)))
 (let (($x334 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x326 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x334)))))))
 (let (($x307 (= (bvand ?x245 (_ bv4294967292 32)) ?x245)))
 (let (($x276 (= (bvand ?x267 (_ bv4294967292 32)) ?x267)))
 (let (($x46 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x267 (bvsub ?x267 (_ bv4 32))) (bvult ?x267 (bvsub ?x267 (_ bv4 32))))))
 (let (($x206 (and true $x46)))
 (let (($x80 (= (bvand ?x275 (_ bv4294967292 32)) ?x275)))
 (let (($x144 (and $x80 $x206)))
 (let (($x336 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x245 (bvsub ?x245 (_ bv8 32))) (bvult ?x245 (bvsub ?x245 (_ bv8 32))))))
 (let (($x43 (and (and (and true $x336) $x144) $x276)))
 (let (($x31 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x224 (and true $x31)))
 (let (($x356 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x97 (and $x356 $x224)))
 (let (($x177 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x275 (bvsub ?x275 (_ bv12 32))) (bvult ?x275 (bvsub ?x275 (_ bv12 32))))))
 (let (($x146 (and (and (and true $x356) $x177) $x97)))
 (let (($x29 (and (and (and (and (and (and $x146 $x43) $x307) $x326) $x348) $x116) $x285)))
 (let (($x357 (= $x29 true)))
 (let (($x51 (= $x146 true)))
 (let (($x233 (and $x43 $x307)))
 (let (($x118 (= $x233 true)))
 (let (($x238 (and $x118 $x51)))
 (let (($x88 (and $x238 $x357)))
 (let (($x16 (and $x88 $x56)))
 (let (($x167 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x74 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x74 (_ bv0 32))))
 (let (($x308 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x7 (ite $x308 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x7 (_ bv1 32))))
 (let (($x176 (and $x293 $x347)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x344 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x344 (_ bv0 32))))
 (let (($x94 (and $x11 $x176)))
 (let (($x300 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x45 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x45 (_ bv0 32))))
 (let (($x261 (and $x89 $x94)))
 (let (($x173 (and $x261 $x16)))
 (let ((?x131 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x223 (= ?x131 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x322 (bvuge ?x45 (_ bv1 32))))
 (let (($x286 (=> $x322 $x223)))
 (let (($x85 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x5 (= $x322 $x85)))
 (let (($x257 (= false false)))
 (let (($x283 (=> $x89 $x257)))
 (let (($x18 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x179 (= $x89 $x18)))
 (let (($x208 (and (and (and $x179 $x283) $x5) $x286)))
 (let (($x346 (and $x208 $x173)))
 (let ((?x248 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x295 (= ?x248 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x139 (bvuge ?x344 (_ bv1 32))))
 (let (($x40 (=> $x139 $x295)))
 (let (($x366 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x170 (= $x139 $x366)))
 (let (($x194 (and (and (= $x11 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x11 $x257)) $x170)))
 (let (($x132 (and $x194 $x40)))
 (let (($x77 (and $x132 $x346)))
 (let ((?x303 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x279 (= ?x303 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x92 (bvuge ?x74 (_ bv1 32))))
 (let (($x237 (=> $x92 $x279)))
 (let (($x362 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x163 (= $x92 $x362)))
 (let (($x280 (and (and (= $x347 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x347 $x257)) $x163)))
 (let (($x62 (and $x280 $x237)))
 (let (($x205 (and $x62 $x77)))
 (let (($x83 (= ?x6 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x352 (=> $x293 $x83)))
 (let (($x37 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x220 (= $x293 $x37)))
 (let (($x252 (= ?x7 (_ bv0 32))))
 (let (($x271 (=> $x252 $x257)))
 (let (($x34 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x211 (= $x252 $x34)))
 (let (($x360 (and (and (and $x211 $x271) $x220) $x352)))
 (let (($x328 (and $x360 $x205)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x372 (and $x324 $x328)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x319 (and $x60 $x372)))
 (let (($x172 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x113 (and $x172 $x319)))
 (let (($x358 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x72 (and $x358 $x113)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x171 (and $x50 $x72)))
 (let (($x122 (and $x257 $x171)))
 (let (($x316 (= ?x131 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x174 (and $x316 $x122)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x22 (and $x143 $x174)))
 (let (($x156 (and $x257 $x22)))
 (let (($x166 (= ?x248 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x370 (and $x166 $x156)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x281 (and $x318 $x370)))
 (let (($x135 (and $x257 $x281)))
 (let (($x305 (= ?x303 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x104 (and $x305 $x135)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x21 (and $x68 $x104)))
 (let (($x59 (and $x257 $x21)))
 (let (($x138 (= ?x6 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x197 (and $x138 $x59)))
 (let (($x321 (bvugt ?x267 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x320)))
 (let (($x100 (=> (bvule ?x267 (bvsub (bvadd ?x267 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x321)))))))
 (let (($x134 (bvugt ?x245 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x204 (=> (bvule ?x245 (bvsub (bvadd ?x245 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x134)))))))
 (let (($x105 (bvugt ?x275 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x335)))
 (let (($x86 (=> (bvule ?x275 (bvsub (bvadd ?x275 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x253 $x105)))))))
 (let (($x254 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x195 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x226 $x254)))))))
 (let (($x168 (and $x195 $x86)))
 (let (($x212 (and $x168 $x204)))
 (let (($x249 (and $x212 $x100)))
 (let (($x199 (and $x249 $x197)))
 (let (($x70 (=> $x199 $x115)))
 (not $x70)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x117 (concat ?x84 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x245 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x278 (bvadd ?x245 (_ bv3 32))))
 (let ((?x27 (concat (select input.dst.llvm-mem ?x278) (concat ?x311 ?x117))))
 (let ((?x218 (bvmul (_ bv4294967295 32) ?x27)))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x260 (concat ?x313 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x267 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x320 (bvadd ?x267 (_ bv3 32))))
 (let ((?x341 (concat (select input.dst.llvm-mem ?x320) (concat ?x231 ?x260))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x110 (concat ?x44 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x275 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x335 (bvadd ?x275 (_ bv3 32))))
 (let ((?x36 (concat (select input.dst.llvm-mem ?x335) (concat ?x193 ?x110))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x150)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x330)))
 (let ((?x58 (bvadd (bvadd (bvadd ?x23 ?x36) ?x341) ?x218)))
 (let ((?x6 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x66 (= ?x6 ?x58)))
 (let (($x115 (= $x66 true)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x219 (concat ?x214 (concat ?x234 ?x164)))))
 (let (($x244 (= ?x162 input.dst.llvm-%m)))
 (let (($x56 (= $x244 true)))
 (let (($x285 (= input.dst.llvm-%m ?x162)))
 (let ((?x273 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x159 (= (_ bv0 32) ?x273)))
 (let ((?x299 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x302 (and $x255 $x149)))
 (let (($x125 (and $x302 $x159)))
 (let (($x265 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x265 $x125)))
 (let (($x33 (forall ((input.ind-%var4023X (_ BitVec 32)) )(let ((?x367 (bvadd (bvmul input.ind-%var4023X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv1 32))) (select input.dst.llvm-mem ?x367))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv2 32))) ?x128))))
 (let ((?x124 (input.spec-%var-m-0.1.1 input.ind-%var4023X)))
 (let (($x262 (input.spec-%var-m-0.0.1 input.ind-%var4023X)))
 (=> $x262 (= ?x124 ?x114))))))))
 ))
 (let (($x229 (forall ((input.ind-%var4022X (_ BitVec 32)) )(let (($x262 (input.spec-%var-m-0.0.1 input.ind-%var4022X)))
 (= $x262 (and (bvule (_ bv0 32) input.ind-%var4022X) (bvult input.ind-%var4022X (_ bv100 32))))))
 ))
 (let (($x348 (and $x229 $x33)))
 (let (($x334 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x326 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x334)))))))
 (let (($x307 (= (bvand ?x245 (_ bv4294967292 32)) ?x245)))
 (let (($x276 (= (bvand ?x267 (_ bv4294967292 32)) ?x267)))
 (let (($x46 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x267 (bvsub ?x267 (_ bv4 32))) (bvult ?x267 (bvsub ?x267 (_ bv4 32))))))
 (let (($x206 (and true $x46)))
 (let (($x80 (= (bvand ?x275 (_ bv4294967292 32)) ?x275)))
 (let (($x144 (and $x80 $x206)))
 (let (($x336 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x245 (bvsub ?x245 (_ bv8 32))) (bvult ?x245 (bvsub ?x245 (_ bv8 32))))))
 (let (($x43 (and (and (and true $x336) $x144) $x276)))
 (let (($x31 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x224 (and true $x31)))
 (let (($x356 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x97 (and $x356 $x224)))
 (let (($x177 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x275 (bvsub ?x275 (_ bv12 32))) (bvult ?x275 (bvsub ?x275 (_ bv12 32))))))
 (let (($x146 (and (and (and true $x356) $x177) $x97)))
 (let (($x29 (and (and (and (and (and (and $x146 $x43) $x307) $x326) $x348) $x116) $x285)))
 (let (($x357 (= $x29 true)))
 (let (($x51 (= $x146 true)))
 (let (($x233 (and $x43 $x307)))
 (let (($x118 (= $x233 true)))
 (let (($x238 (and $x118 $x51)))
 (let (($x88 (and $x238 $x357)))
 (let (($x16 (and $x88 $x56)))
 (let (($x167 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x74 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x74 (_ bv0 32))))
 (let (($x308 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x7 (ite $x308 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x7 (_ bv1 32))))
 (let (($x176 (and $x293 $x347)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x344 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x344 (_ bv0 32))))
 (let (($x94 (and $x11 $x176)))
 (let (($x300 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x45 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x45 (_ bv0 32))))
 (let (($x261 (and $x89 $x94)))
 (let (($x173 (and $x261 $x16)))
 (let ((?x131 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x223 (= ?x131 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x322 (bvuge ?x45 (_ bv1 32))))
 (let (($x286 (=> $x322 $x223)))
 (let (($x85 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x5 (= $x322 $x85)))
 (let (($x257 (= false false)))
 (let (($x283 (=> $x89 $x257)))
 (let (($x18 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x179 (= $x89 $x18)))
 (let (($x208 (and (and (and $x179 $x283) $x5) $x286)))
 (let (($x346 (and $x208 $x173)))
 (let ((?x248 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x295 (= ?x248 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x139 (bvuge ?x344 (_ bv1 32))))
 (let (($x40 (=> $x139 $x295)))
 (let (($x366 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x170 (= $x139 $x366)))
 (let (($x194 (and (and (= $x11 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x11 $x257)) $x170)))
 (let (($x132 (and $x194 $x40)))
 (let (($x77 (and $x132 $x346)))
 (let ((?x303 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x279 (= ?x303 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x92 (bvuge ?x74 (_ bv1 32))))
 (let (($x237 (=> $x92 $x279)))
 (let (($x362 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x163 (= $x92 $x362)))
 (let (($x280 (and (and (= $x347 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x347 $x257)) $x163)))
 (let (($x62 (and $x280 $x237)))
 (let (($x205 (and $x62 $x77)))
 (let (($x83 (= ?x6 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x352 (=> $x293 $x83)))
 (let (($x37 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x220 (= $x293 $x37)))
 (let (($x252 (= ?x7 (_ bv0 32))))
 (let (($x271 (=> $x252 $x257)))
 (let (($x34 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x211 (= $x252 $x34)))
 (let (($x360 (and (and (and $x211 $x271) $x220) $x352)))
 (let (($x328 (and $x360 $x205)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x372 (and $x324 $x328)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x319 (and $x60 $x372)))
 (let (($x172 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x113 (and $x172 $x319)))
 (let (($x358 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x72 (and $x358 $x113)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x171 (and $x50 $x72)))
 (let (($x122 (and $x257 $x171)))
 (let (($x316 (= ?x131 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x174 (and $x316 $x122)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x22 (and $x143 $x174)))
 (let (($x156 (and $x257 $x22)))
 (let (($x166 (= ?x248 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x370 (and $x166 $x156)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x281 (and $x318 $x370)))
 (let (($x135 (and $x257 $x281)))
 (let (($x305 (= ?x303 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x104 (and $x305 $x135)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x21 (and $x68 $x104)))
 (let (($x59 (and $x257 $x21)))
 (let (($x138 (= ?x6 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x197 (and $x138 $x59)))
 (let (($x321 (bvugt ?x267 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x320)))
 (let (($x100 (=> (bvule ?x267 (bvsub (bvadd ?x267 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x321)))))))
 (let (($x134 (bvugt ?x245 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x204 (=> (bvule ?x245 (bvsub (bvadd ?x245 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x134)))))))
 (let (($x105 (bvugt ?x275 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x335)))
 (let (($x86 (=> (bvule ?x275 (bvsub (bvadd ?x275 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x253 $x105)))))))
 (let (($x254 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x195 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x226 $x254)))))))
 (let (($x168 (and $x195 $x86)))
 (let (($x212 (and $x168 $x204)))
 (let (($x249 (and $x212 $x100)))
 (let (($x199 (and $x249 $x197)))
 (let (($x70 (=> $x199 $x115)))
 (not $x70)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 215 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x268 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x254 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x253 (bvadd ?x254 (_ bv3 32))))
 (let ((?x140 (concat (select input.dst.llvm-mem ?x253) (concat ?x175 ?x268))))
 (let ((?x106 (bvmul (_ bv4294967295 32) ?x140)))
 (let ((?x331 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x52 (concat ?x331 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x134 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x343 (bvadd ?x134 (_ bv3 32))))
 (let ((?x121 (concat (select input.dst.llvm-mem ?x343) (concat ?x126 ?x52))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x58 (concat ?x218 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x225 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x351 (bvadd ?x225 (_ bv3 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem ?x351) (concat ?x115 ?x58))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x200)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x84)))
 (let ((?x188 (bvadd (bvadd (bvadd ?x117 ?x272) ?x121) ?x106)))
 (let (($x81 (= (_ bv0 32) ?x188)))
 (let (($x227 (= $x81 true)))
 (let ((?x319 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x281 (concat ?x370 (concat ?x174 (concat ?x72 ?x319)))))
 (let (($x155 (= ?x281 input.dst.llvm-%m)))
 (let (($x339 (= $x155 true)))
 (let (($x135 (= input.dst.llvm-%m ?x281)))
 (let ((?x346 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x77 (= (_ bv0 32) ?x346)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x244 $x16)))
 (let (($x205 (and $x173 $x77)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (and $x88 $x205)))
 (let (($x285 (forall ((input.ind-%var4067X (_ BitVec 32)) )(let ((?x125 (bvadd (bvmul input.ind-%var4067X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x219))))
 (let ((?x303 (input.spec-%var-m-0.1.1 input.ind-%var4067X)))
 (let (($x257 (input.spec-%var-m-0.0.1 input.ind-%var4067X)))
 (=> $x257 (= ?x303 ?x310))))))))
 ))
 (let (($x26 (forall ((input.ind-%var4066X (_ BitVec 32)) )(let (($x257 (input.spec-%var-m-0.0.1 input.ind-%var4066X)))
 (= $x257 (and (bvule (_ bv0 32) input.ind-%var4066X) (bvult input.ind-%var4066X (_ bv100 32))))))
 ))
 (let (($x29 (and $x26 $x285)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x326 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x326 $x160)))))))
 (let (($x235 (= (bvand ?x254 (_ bv4294967292 32)) ?x254)))
 (let (($x233 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x276 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv4 32))) (bvult ?x134 (bvsub ?x134 (_ bv4 32))))))
 (let (($x43 (and true $x276)))
 (let (($x46 (= (bvand ?x225 (_ bv4294967292 32)) ?x225)))
 (let (($x329 (and $x46 $x43)))
 (let (($x190 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x254 (bvsub ?x254 (_ bv8 32))) (bvult ?x254 (bvsub ?x254 (_ bv8 32))))))
 (let (($x356 (and (and (and true $x190) $x329) $x233)))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x238 (and true $x51)))
 (let (($x177 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x342 (and $x177 $x238)))
 (let (($x364 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x225 (bvsub ?x225 (_ bv12 32))) (bvult ?x225 (bvsub ?x225 (_ bv12 32))))))
 (let (($x147 (and (and (and true $x177) $x364) $x342)))
 (let (($x99 (and (and (and (and (and (and $x147 $x356) $x235) $x25) $x29) $x328) $x135)))
 (let (($x222 (= $x99 true)))
 (let (($x297 (= $x147 true)))
 (let (($x111 (and $x356 $x235)))
 (let (($x189 (= $x111 true)))
 (let (($x340 (and $x189 $x297)))
 (let (($x98 (and $x340 $x222)))
 (let (($x15 (and $x98 $x339)))
 (let (($x157 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x169 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x169 (_ bv0 32))))
 (let (($x211 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x55 (ite $x211 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x55 (_ bv0 32))))
 (let (($x239 (and $x293 $x92)))
 (let (($x79 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x232 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x232 (_ bv0 32))))
 (let (($x336 (and $x139 $x239)))
 (let (($x283 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x251 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x322 (= ?x251 (_ bv0 32))))
 (let (($x202 (and $x322 $x336)))
 (let (($x150 (and $x202 $x15)))
 (let ((?x151 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x94 (= ?x151 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x223 (bvuge ?x251 (_ bv1 32))))
 (let (($x261 (=> $x223 $x94)))
 (let (($x286 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x208 (= $x223 $x286)))
 (let (($x321 (= false false)))
 (let (($x291 (=> $x322 $x321)))
 (let (($x5 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x61 (= $x322 $x5)))
 (let (($x63 (and (and (and $x61 $x291) $x208) $x261)))
 (let (($x330 (and $x63 $x150)))
 (let ((?x131 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x45 (= ?x131 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x295 (bvuge ?x232 (_ bv1 32))))
 (let (($x89 (=> $x295 $x45)))
 (let (($x40 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x132 (= $x295 $x40)))
 (let (($x18 (and (and (= $x139 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x139 $x321)) $x132)))
 (let (($x179 (and $x18 $x89)))
 (let (($x23 (and $x179 $x330)))
 (let ((?x248 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x344 (= ?x248 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x279 (bvuge ?x169 (_ bv1 32))))
 (let (($x11 (=> $x279 $x344)))
 (let (($x237 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x62 (= $x279 $x237)))
 (let (($x327 (and (and (= $x92 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x92 $x321)) $x62)))
 (let (($x228 (and $x327 $x11)))
 (let (($x207 (and $x228 $x23)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x74 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x83 (bvuge ?x55 (_ bv1 32))))
 (let (($x347 (=> $x83 $x74)))
 (let (($x352 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x360 (= $x83 $x352)))
 (let (($x350 (=> $x293 $x321)))
 (let (($x220 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x180 (= $x293 $x220)))
 (let (($x240 (and (and (and $x180 $x350) $x360) $x347)))
 (let (($x158 (and $x240 $x207)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x193 (and $x34 $x158)))
 (let (($x252 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x35 (and $x252 $x193)))
 (let (($x308 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x44 (and $x308 $x35)))
 (let (($x213 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x292 (and $x213 $x44)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x110 (and $x75 $x292)))
 (let (($x73 (and $x321 $x110)))
 (let (($x57 (= ?x151 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x36 (and $x57 $x73)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x301 (and $x50 $x36)))
 (let (($x349 (and $x321 $x301)))
 (let (($x316 (= ?x131 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x241 (and $x316 $x349)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x231 (and $x143 $x241)))
 (let (($x49 (and $x321 $x231)))
 (let (($x166 (= ?x248 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x313 (and $x166 $x49)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x64 (and $x71 $x313)))
 (let (($x260 (and $x321 $x64)))
 (let (($x320 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x363 (and $x320 $x260)))
 (let (($x153 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x343)))
 (let (($x269 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x153)))))))
 (let (($x39 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x253)))
 (let (($x191 (=> (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x39)))))))
 (let (($x278 (bvugt ?x225 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x351)))
 (let (($x30 (=> (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x274 $x278)))))))
 (let (($x263 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x275 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x275)))
 (let (($x86 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x263)))))))
 (let (($x168 (and $x86 $x30)))
 (let (($x304 (and $x168 $x191)))
 (let (($x204 (and $x304 $x269)))
 (let (($x341 (and $x204 $x363)))
 (let (($x32 (=> $x341 $x227)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x268 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x254 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x253 (bvadd ?x254 (_ bv3 32))))
 (let ((?x140 (concat (select input.dst.llvm-mem ?x253) (concat ?x175 ?x268))))
 (let ((?x106 (bvmul (_ bv4294967295 32) ?x140)))
 (let ((?x331 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x52 (concat ?x331 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x134 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x343 (bvadd ?x134 (_ bv3 32))))
 (let ((?x121 (concat (select input.dst.llvm-mem ?x343) (concat ?x126 ?x52))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x58 (concat ?x218 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x225 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x351 (bvadd ?x225 (_ bv3 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem ?x351) (concat ?x115 ?x58))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x200)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x84)))
 (let ((?x188 (bvadd (bvadd (bvadd ?x117 ?x272) ?x121) ?x106)))
 (let (($x81 (= (_ bv0 32) ?x188)))
 (let (($x227 (= $x81 true)))
 (let ((?x319 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x281 (concat ?x370 (concat ?x174 (concat ?x72 ?x319)))))
 (let (($x155 (= ?x281 input.dst.llvm-%m)))
 (let (($x339 (= $x155 true)))
 (let (($x135 (= input.dst.llvm-%m ?x281)))
 (let ((?x346 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x77 (= (_ bv0 32) ?x346)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x244 $x16)))
 (let (($x205 (and $x173 $x77)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (and $x88 $x205)))
 (let (($x285 (forall ((input.ind-%var4067X (_ BitVec 32)) )(let ((?x125 (bvadd (bvmul input.ind-%var4067X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x219))))
 (let ((?x303 (input.spec-%var-m-0.1.1 input.ind-%var4067X)))
 (let (($x257 (input.spec-%var-m-0.0.1 input.ind-%var4067X)))
 (=> $x257 (= ?x303 ?x310))))))))
 ))
 (let (($x26 (forall ((input.ind-%var4066X (_ BitVec 32)) )(let (($x257 (input.spec-%var-m-0.0.1 input.ind-%var4066X)))
 (= $x257 (and (bvule (_ bv0 32) input.ind-%var4066X) (bvult input.ind-%var4066X (_ bv100 32))))))
 ))
 (let (($x29 (and $x26 $x285)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x326 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x326 $x160)))))))
 (let (($x235 (= (bvand ?x254 (_ bv4294967292 32)) ?x254)))
 (let (($x233 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x276 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv4 32))) (bvult ?x134 (bvsub ?x134 (_ bv4 32))))))
 (let (($x43 (and true $x276)))
 (let (($x46 (= (bvand ?x225 (_ bv4294967292 32)) ?x225)))
 (let (($x329 (and $x46 $x43)))
 (let (($x190 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x254 (bvsub ?x254 (_ bv8 32))) (bvult ?x254 (bvsub ?x254 (_ bv8 32))))))
 (let (($x356 (and (and (and true $x190) $x329) $x233)))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x238 (and true $x51)))
 (let (($x177 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x342 (and $x177 $x238)))
 (let (($x364 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x225 (bvsub ?x225 (_ bv12 32))) (bvult ?x225 (bvsub ?x225 (_ bv12 32))))))
 (let (($x147 (and (and (and true $x177) $x364) $x342)))
 (let (($x99 (and (and (and (and (and (and $x147 $x356) $x235) $x25) $x29) $x328) $x135)))
 (let (($x222 (= $x99 true)))
 (let (($x297 (= $x147 true)))
 (let (($x111 (and $x356 $x235)))
 (let (($x189 (= $x111 true)))
 (let (($x340 (and $x189 $x297)))
 (let (($x98 (and $x340 $x222)))
 (let (($x15 (and $x98 $x339)))
 (let (($x157 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x169 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x169 (_ bv0 32))))
 (let (($x211 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x55 (ite $x211 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x55 (_ bv0 32))))
 (let (($x239 (and $x293 $x92)))
 (let (($x79 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x232 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x232 (_ bv0 32))))
 (let (($x336 (and $x139 $x239)))
 (let (($x283 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x251 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x322 (= ?x251 (_ bv0 32))))
 (let (($x202 (and $x322 $x336)))
 (let (($x150 (and $x202 $x15)))
 (let ((?x151 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x94 (= ?x151 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x223 (bvuge ?x251 (_ bv1 32))))
 (let (($x261 (=> $x223 $x94)))
 (let (($x286 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x208 (= $x223 $x286)))
 (let (($x321 (= false false)))
 (let (($x291 (=> $x322 $x321)))
 (let (($x5 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x61 (= $x322 $x5)))
 (let (($x63 (and (and (and $x61 $x291) $x208) $x261)))
 (let (($x330 (and $x63 $x150)))
 (let ((?x131 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x45 (= ?x131 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x295 (bvuge ?x232 (_ bv1 32))))
 (let (($x89 (=> $x295 $x45)))
 (let (($x40 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x132 (= $x295 $x40)))
 (let (($x18 (and (and (= $x139 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x139 $x321)) $x132)))
 (let (($x179 (and $x18 $x89)))
 (let (($x23 (and $x179 $x330)))
 (let ((?x248 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x344 (= ?x248 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x279 (bvuge ?x169 (_ bv1 32))))
 (let (($x11 (=> $x279 $x344)))
 (let (($x237 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x62 (= $x279 $x237)))
 (let (($x327 (and (and (= $x92 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x92 $x321)) $x62)))
 (let (($x228 (and $x327 $x11)))
 (let (($x207 (and $x228 $x23)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x74 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x83 (bvuge ?x55 (_ bv1 32))))
 (let (($x347 (=> $x83 $x74)))
 (let (($x352 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x360 (= $x83 $x352)))
 (let (($x350 (=> $x293 $x321)))
 (let (($x220 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x180 (= $x293 $x220)))
 (let (($x240 (and (and (and $x180 $x350) $x360) $x347)))
 (let (($x158 (and $x240 $x207)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x193 (and $x34 $x158)))
 (let (($x252 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x35 (and $x252 $x193)))
 (let (($x308 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x44 (and $x308 $x35)))
 (let (($x213 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x292 (and $x213 $x44)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x110 (and $x75 $x292)))
 (let (($x73 (and $x321 $x110)))
 (let (($x57 (= ?x151 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x36 (and $x57 $x73)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x301 (and $x50 $x36)))
 (let (($x349 (and $x321 $x301)))
 (let (($x316 (= ?x131 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x241 (and $x316 $x349)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x231 (and $x143 $x241)))
 (let (($x49 (and $x321 $x231)))
 (let (($x166 (= ?x248 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x313 (and $x166 $x49)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x64 (and $x71 $x313)))
 (let (($x260 (and $x321 $x64)))
 (let (($x320 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x363 (and $x320 $x260)))
 (let (($x153 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x343)))
 (let (($x269 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x153)))))))
 (let (($x39 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x253)))
 (let (($x191 (=> (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x39)))))))
 (let (($x278 (bvugt ?x225 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x351)))
 (let (($x30 (=> (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x274 $x278)))))))
 (let (($x263 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x275 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x275)))
 (let (($x86 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x263)))))))
 (let (($x168 (and $x86 $x30)))
 (let (($x304 (and $x168 $x191)))
 (let (($x204 (and $x304 $x269)))
 (let (($x341 (and $x204 $x363)))
 (let (($x32 (=> $x341 $x227)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 215 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791975/query
