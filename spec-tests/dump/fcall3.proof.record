==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x6 $x12)))
 (let (($x17 (and $x11 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x6 $x12)))
 (let (($x17 (and $x11 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv1661363587 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3191897543 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x467 (= true false)))
 (let (($x468 (= $x467 true)))
 (let ((?x451 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x453 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x456 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x459 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x460 (concat ?x459 (concat ?x456 (concat ?x453 ?x451)))))
 (let (($x461 (= ?x460 input.dst.llvm-%m2)))
 (let (($x462 (= $x461 true)))
 (let (($x463 (= $x462 true)))
 (let ((?x436 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x438 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x444 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x445 (concat ?x444 (concat ?x441 (concat ?x438 ?x436)))))
 (let (($x446 (= ?x445 input.dst.llvm-%m1)))
 (let (($x447 (= $x446 true)))
 (let (($x448 (= $x447 true)))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x314 input.dst.llvm-%m2)))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem ?x416))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv2 32))) ?x420))))
 (let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 ?x426))))))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 $x295))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (=> $x22 $x66)))))
 ))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 $x283))))))
 ))
 (let (($x390 (and $x389 $x56)))
 (let (($x400 (and $x390 $x399)))
 (let (($x430 (and $x400 $x429)))
 (let (($x431 (= $x430 true)))
 (let (($x432 (= $x431 true)))
 (let (($x433 (= $x432 true)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x315 (bvadd ?x314 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x319))))
 (let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 ?x325))))))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 $x295))))))
 ))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (=> $x123 $x66)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 $x283))))))
 ))
 (let (($x286 (and $x285 $x128)))
 (let (($x298 (and $x286 $x297)))
 (let (($x329 (and $x298 $x328)))
 (let (($x330 (= $x329 true)))
 (let (($x331 (= $x330 true)))
 (let (($x332 (= $x331 true)))
 (let ((?x197 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x198 (= (_ bv0 32) ?x197)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x196 (= (_ bv0 32) ?x195)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x189 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x189)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (and $x187 $x190)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x186 $x191)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x176 $x177)))
 (let (($x179 (not $x178)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x173 $x174)))
 (let (($x181 (and (not $x175) $x179)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x167 $x168)))
 (let (($x170 (not $x169)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x162 $x164)))
 (let (($x172 (and (not $x165) $x170)))
 (let (($x204 (and (and (and (and (and (and $x172 $x181) $x183) $x185) $x192) $x194) $x196)))
 (let (($x205 (and $x204 $x198)))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x333 (and $x208 $x332)))
 (let (($x434 (and $x333 $x433)))
 (let (($x449 (and $x434 $x448)))
 (let (($x464 (and $x449 $x463)))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x144 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 (bvuge ?x119 (_ bv1 32)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 (= ?x119 (_ bv0 32)))))))
 ))
 (let (($x129 (and $x125 $x128)))
 (let (($x145 (and $x129 $x144)))
 (let (($x159 (and $x145 $x158)))
 (let (($x465 (and $x159 $x464)))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 (bvuge ?x73 (_ bv1 32)))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 (= ?x73 (_ bv0 32)))))))
 ))
 (let (($x47 (and $x34 $x56)))
 (let (($x42 (and $x47 $x28)))
 (let (($x84 (and $x42 $x83)))
 (let (($x466 (and $x84 $x465)))
 (let (($x469 (=> $x466 $x468)))
 (not $x469))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x467 (= true false)))
 (let (($x468 (= $x467 true)))
 (let ((?x451 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x453 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x456 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x459 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x460 (concat ?x459 (concat ?x456 (concat ?x453 ?x451)))))
 (let (($x461 (= ?x460 input.dst.llvm-%m2)))
 (let (($x462 (= $x461 true)))
 (let (($x463 (= $x462 true)))
 (let ((?x436 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x438 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x444 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x445 (concat ?x444 (concat ?x441 (concat ?x438 ?x436)))))
 (let (($x446 (= ?x445 input.dst.llvm-%m1)))
 (let (($x447 (= $x446 true)))
 (let (($x448 (= $x447 true)))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x314 input.dst.llvm-%m2)))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem ?x416))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv2 32))) ?x420))))
 (let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 ?x426))))))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 $x295))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (=> $x22 $x66)))))
 ))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 $x283))))))
 ))
 (let (($x390 (and $x389 $x56)))
 (let (($x400 (and $x390 $x399)))
 (let (($x430 (and $x400 $x429)))
 (let (($x431 (= $x430 true)))
 (let (($x432 (= $x431 true)))
 (let (($x433 (= $x432 true)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x315 (bvadd ?x314 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x319))))
 (let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 ?x325))))))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 $x295))))))
 ))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (=> $x123 $x66)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 $x283))))))
 ))
 (let (($x286 (and $x285 $x128)))
 (let (($x298 (and $x286 $x297)))
 (let (($x329 (and $x298 $x328)))
 (let (($x330 (= $x329 true)))
 (let (($x331 (= $x330 true)))
 (let (($x332 (= $x331 true)))
 (let ((?x197 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x198 (= (_ bv0 32) ?x197)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x196 (= (_ bv0 32) ?x195)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x189 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x189)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (and $x187 $x190)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x186 $x191)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x176 $x177)))
 (let (($x179 (not $x178)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x173 $x174)))
 (let (($x181 (and (not $x175) $x179)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x167 $x168)))
 (let (($x170 (not $x169)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x162 $x164)))
 (let (($x172 (and (not $x165) $x170)))
 (let (($x204 (and (and (and (and (and (and $x172 $x181) $x183) $x185) $x192) $x194) $x196)))
 (let (($x205 (and $x204 $x198)))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x333 (and $x208 $x332)))
 (let (($x434 (and $x333 $x433)))
 (let (($x449 (and $x434 $x448)))
 (let (($x464 (and $x449 $x463)))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x144 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 (bvuge ?x119 (_ bv1 32)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 (= ?x119 (_ bv0 32)))))))
 ))
 (let (($x129 (and $x125 $x128)))
 (let (($x145 (and $x129 $x144)))
 (let (($x159 (and $x145 $x158)))
 (let (($x465 (and $x159 $x464)))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 (bvuge ?x73 (_ bv1 32)))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 (= ?x73 (_ bv0 32)))))))
 ))
 (let (($x47 (and $x34 $x56)))
 (let (($x42 (and $x47 $x28)))
 (let (($x84 (and $x42 $x83)))
 (let (($x466 (and $x84 $x465)))
 (let (($x469 (=> $x466 $x468)))
 (not $x469))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x2c9dffed)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x98008000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00080003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00080001) #x80
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #x00000006) #x9d
    (ite (= x!0 #x00080003) #x98
    (ite (= x!0 #x00000007) #x2c
    (ite (= x!0 #x00000004) #xed
      #x00)))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8117e448)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdaddd4a4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x3fbf7f98)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfffdfbfc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdaddd4a7)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8117e44b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdaddd4a4)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8117e448)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdaddd4a7) #xff
    (ite (= x!0 #xdaddd4a4) #xfc
    (ite (= x!0 #x8117e449) #x7f
    (ite (= x!0 #x8117e44b) #x3f
    (ite (= x!0 #xdaddd4a6) #xfd
    (ite (= x!0 #xdaddd4a5) #xfb
    (ite (= x!0 #x8117e44a) #xbf
    (ite (= x!0 #x8117e448) #x98
      #x00)))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x131 (= (_ bv0 32) ?x130)))
 (let ((?x278 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x126 (= (_ bv0 32) ?x278)))
 (let ((?x276 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x276)))
 (let ((?x113 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x273 (and $x112 $x274)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x111 $x273)))
 (let (($x464 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x462 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x453 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x452 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x451 (and $x452 $x453)))
 (let (($x454 (not $x451)))
 (let (($x455 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x459 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x456 (and $x459 $x455)))
 (let (($x460 (and (not $x456) $x454)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x445 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x447 (and $x445 $x446)))
 (let (($x448 (not $x447)))
 (let (($x436 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x437 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x439 (and $x437 $x436)))
 (let (($x458 (and (not $x439) $x448)))
 (let (($x57 (and (and (and (and (and (and $x458 $x460) $x462) $x464) $x275) $x277) $x126)))
 (let (($x29 (and $x57 $x131)))
 (let (($x471 (= $x29 true)))
 (let (($x472 (= $x471 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x149 (concat ?x139 (concat ?x135 ?x117)))))
 (let (($x152 (= input.dst.llvm-%m2 ?x151)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x110 (concat ?x107 (concat ?x103 ?x105)))))
 (let (($x115 (= input.dst.llvm-%m1 ?x114)))
 (let (($x153 (and $x115 $x152)))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x401 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x412))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 ?x407))))))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 $x245))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (=> $x123 $x175)))))
 ))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 $x235))))))
 ))
 (let (($x380 (and $x377 $x174)))
 (let (($x387 (and $x380 $x12)))
 (let (($x414 (and $x387 $x60)))
 (let (($x15 (and $x414 $x153)))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x265 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x259))))
 (let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 ?x269))))))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 $x245))))))
 ))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (=> $x320 $x175)))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 $x235))))))
 ))
 (let (($x238 (and $x237 $x319)))
 (let (($x89 (and $x238 $x92)))
 (let (($x272 (and $x89 $x271)))
 (let (($x444 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x433 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x11 (and (and (and (and (and (and $x433 $x444) $x458) $x460) $x462) $x464) $x272)))
 (let (($x77 (and (and (and (and (and $x11 $x275) $x277) $x126) $x131) $x15)))
 (let (($x18 (= $x77 true)))
 (let (($x23 (= $x18 true)))
 (let (($x74 (= $x23 true)))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x400 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 (bvuge ?x315 (_ bv1 32)))))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 (= ?x315 (_ bv0 32)))))))
 ))
 (let (($x322 (and $x317 $x319)))
 (let (($x334 (and $x322 $x400)))
 (let (($x429 (and $x334 $x428)))
 (let (($x8 (and $x429 $x74)))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 (bvuge ?x282 (_ bv1 32)))))))
 ))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 (= ?x282 (_ bv0 32)))))))
 ))
 (let (($x178 (and $x80 $x174)))
 (let (($x155 (and $x178 $x124)))
 (let (($x183 (and $x155 $x202)))
 (let (($x41 (and $x183 $x8)))
 (let (($x473 (=> $x41 $x472)))
 (not $x473))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x131 (= (_ bv0 32) ?x130)))
 (let ((?x278 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x126 (= (_ bv0 32) ?x278)))
 (let ((?x276 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x276)))
 (let ((?x113 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x273 (and $x112 $x274)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x111 $x273)))
 (let (($x464 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x462 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x453 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x452 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x451 (and $x452 $x453)))
 (let (($x454 (not $x451)))
 (let (($x455 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x459 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x456 (and $x459 $x455)))
 (let (($x460 (and (not $x456) $x454)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x445 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x447 (and $x445 $x446)))
 (let (($x448 (not $x447)))
 (let (($x436 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x437 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x439 (and $x437 $x436)))
 (let (($x458 (and (not $x439) $x448)))
 (let (($x57 (and (and (and (and (and (and $x458 $x460) $x462) $x464) $x275) $x277) $x126)))
 (let (($x29 (and $x57 $x131)))
 (let (($x471 (= $x29 true)))
 (let (($x472 (= $x471 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x149 (concat ?x139 (concat ?x135 ?x117)))))
 (let (($x152 (= input.dst.llvm-%m2 ?x151)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x110 (concat ?x107 (concat ?x103 ?x105)))))
 (let (($x115 (= input.dst.llvm-%m1 ?x114)))
 (let (($x153 (and $x115 $x152)))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x401 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x412))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 ?x407))))))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 $x245))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (=> $x123 $x175)))))
 ))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 $x235))))))
 ))
 (let (($x380 (and $x377 $x174)))
 (let (($x387 (and $x380 $x12)))
 (let (($x414 (and $x387 $x60)))
 (let (($x15 (and $x414 $x153)))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x265 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x259))))
 (let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 ?x269))))))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 $x245))))))
 ))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (=> $x320 $x175)))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 $x235))))))
 ))
 (let (($x238 (and $x237 $x319)))
 (let (($x89 (and $x238 $x92)))
 (let (($x272 (and $x89 $x271)))
 (let (($x444 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x433 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x11 (and (and (and (and (and (and $x433 $x444) $x458) $x460) $x462) $x464) $x272)))
 (let (($x77 (and (and (and (and (and $x11 $x275) $x277) $x126) $x131) $x15)))
 (let (($x18 (= $x77 true)))
 (let (($x23 (= $x18 true)))
 (let (($x74 (= $x23 true)))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x400 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 (bvuge ?x315 (_ bv1 32)))))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 (= ?x315 (_ bv0 32)))))))
 ))
 (let (($x322 (and $x317 $x319)))
 (let (($x334 (and $x322 $x400)))
 (let (($x429 (and $x334 $x428)))
 (let (($x8 (and $x429 $x74)))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 (bvuge ?x282 (_ bv1 32)))))))
 ))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 (= ?x282 (_ bv0 32)))))))
 ))
 (let (($x178 (and $x80 $x174)))
 (let (($x155 (and $x178 $x124)))
 (let (($x183 (and $x155 $x202)))
 (let (($x41 (and $x183 $x8)))
 (let (($x473 (=> $x41 $x472)))
 (not $x473))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x144 (= (_ bv1069514648 32) input.dst.llvm-%m2)))
 (let (($x154 (= $x144 true)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x388 (concat ?x332 (concat ?x329 (concat ?x214 ?x286)))))
 (let (($x389 (= input.dst.llvm-%m2 ?x388)))
 (let ((?x397 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x283 (concat ?x207 (concat ?x206 (concat ?x20 ?x397)))))
 (let (($x284 (= input.dst.llvm-%m1 ?x283)))
 (let (($x425 (and $x284 $x389)))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x346 input.dst.llvm-%m2)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x59))))
 (let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 ?x394))))))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 $x216))))))
 ))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (=> $x423 $x427)))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 $x7))))))
 ))
 (let (($x368 (and $x71 $x430)))
 (let (($x373 (and $x368 $x372)))
 (let (($x393 (and $x373 $x69)))
 (let (($x421 (and $x393 $x425)))
 (let ((?x221 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x224 (= (_ bv0 32) ?x221)))
 (let ((?x227 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x223 (= (_ bv0 32) ?x227)))
 (let ((?x297 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x297)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (and $x229 $x226)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x362 $x295)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd ?x346 input.dst.llvm-%m1)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x353))))
 (let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 ?x361))))))))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 $x216))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (=> $x272 $x427)))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 $x7))))))
 ))
 (let (($x210 (and $x212 $x274)))
 (let (($x343 (and $x210 $x435)))
 (let (($x220 (and $x343 $x359)))
 (let (($x43 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x152 $x153)))
 (let (($x77 (not $x15)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x136 $x140)))
 (let (($x23 (and (not $x151) $x77)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x149 $x137)))
 (let (($x134 (not $x139)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x104 $x114)))
 (let (($x117 (and (not $x115) $x134)))
 (let (($x102 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x110 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x159 (and (and (and (and (and (and $x110 $x102) $x117) $x23) $x8) $x43) $x220)))
 (let (($x279 (and (and (and (and (and $x159 $x296) $x222) $x223) $x224) $x421)))
 (let (($x161 (= $x279 true)))
 (let (($x79 (= $x161 true)))
 (let (($x81 (= $x79 true)))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 (bvuge ?x269 (_ bv1 32)))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 (= ?x269 (_ bv0 32)))))))
 ))
 (let (($x273 (and $x111 $x274)))
 (let (($x12 (and $x273 $x6)))
 (let (($x413 (and $x12 $x410)))
 (let (($x82 (and $x413 $x81)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x431 (and $x426 $x430)))
 (let (($x446 (and $x431 $x445)))
 (let (($x78 (and $x446 $x460)))
 (let (($x166 (and $x78 $x82)))
 (let (($x160 (=> $x166 $x154)))
 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x144 (= (_ bv1069514648 32) input.dst.llvm-%m2)))
 (let (($x154 (= $x144 true)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x388 (concat ?x332 (concat ?x329 (concat ?x214 ?x286)))))
 (let (($x389 (= input.dst.llvm-%m2 ?x388)))
 (let ((?x397 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x283 (concat ?x207 (concat ?x206 (concat ?x20 ?x397)))))
 (let (($x284 (= input.dst.llvm-%m1 ?x283)))
 (let (($x425 (and $x284 $x389)))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x346 input.dst.llvm-%m2)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x59))))
 (let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 ?x394))))))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 $x216))))))
 ))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (=> $x423 $x427)))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 $x7))))))
 ))
 (let (($x368 (and $x71 $x430)))
 (let (($x373 (and $x368 $x372)))
 (let (($x393 (and $x373 $x69)))
 (let (($x421 (and $x393 $x425)))
 (let ((?x221 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x224 (= (_ bv0 32) ?x221)))
 (let ((?x227 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x223 (= (_ bv0 32) ?x227)))
 (let ((?x297 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x297)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (and $x229 $x226)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x362 $x295)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd ?x346 input.dst.llvm-%m1)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x353))))
 (let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 ?x361))))))))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 $x216))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (=> $x272 $x427)))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 $x7))))))
 ))
 (let (($x210 (and $x212 $x274)))
 (let (($x343 (and $x210 $x435)))
 (let (($x220 (and $x343 $x359)))
 (let (($x43 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x152 $x153)))
 (let (($x77 (not $x15)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x136 $x140)))
 (let (($x23 (and (not $x151) $x77)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x149 $x137)))
 (let (($x134 (not $x139)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x104 $x114)))
 (let (($x117 (and (not $x115) $x134)))
 (let (($x102 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x110 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x159 (and (and (and (and (and (and $x110 $x102) $x117) $x23) $x8) $x43) $x220)))
 (let (($x279 (and (and (and (and (and $x159 $x296) $x222) $x223) $x224) $x421)))
 (let (($x161 (= $x279 true)))
 (let (($x79 (= $x161 true)))
 (let (($x81 (= $x79 true)))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 (bvuge ?x269 (_ bv1 32)))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 (= ?x269 (_ bv0 32)))))))
 ))
 (let (($x273 (and $x111 $x274)))
 (let (($x12 (and $x273 $x6)))
 (let (($x413 (and $x12 $x410)))
 (let (($x82 (and $x413 $x81)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x431 (and $x426 $x430)))
 (let (($x446 (and $x431 $x445)))
 (let (($x78 (and $x446 $x460)))
 (let (($x166 (and $x78 $x82)))
 (let (($x160 (=> $x166 $x154)))
 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4af602fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x46fa3af8)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfd5ef300)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x46fa3afb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4af602ff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x46fa3af8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4af602fc)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x46fa3afb) #xfd
    (ite (= x!0 #x4af602ff) #x04
    (ite (= x!0 #x46fa3afa) #x5e
    (ite (= x!0 #x46fa3af9) #xf3
      #x00)))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x88015508)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00412944)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x880b6c00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00412947)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8801550b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00412944)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x88015508)
  (define-fun input.spec-%var-m2-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x00412944 x!0) #x00412944 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!29 (k!28 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00412944) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00412946) #x0b
    (ite (= x!0 #x00412945) #x6c
    (ite (= x!0 #x00412947) #x88
      #x00))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x00412944 x!0) #x00412944 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!30 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!30 (k!27 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00412944) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x456 ((_ extract 8 0) input.dst.llvm-%m2)))
 (let ((?x458 ((_ extract 8 0) input.dst.llvm-%m1)))
 (let ((?x455 (bvmul ?x458 (_ bv26 9))))
 (let (($x457 (= ?x455 ?x456)))
 (let (($x38 (= $x457 true)))
 (let ((?x278 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x411 (concat ?x403 (concat ?x406 (concat ?x70 ?x278)))))
 (let (($x186 (= input.dst.llvm-%m2 ?x411)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x258 (concat ?x266 (concat ?x264 ?x89)))))
 (let (($x259 (= input.dst.llvm-%m1 ?x261)))
 (let (($x205 (and $x259 $x186)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x281 (bvadd ?x309 input.dst.llvm-%m2)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x120))))
 (let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 ?x384))))))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 $x467))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (=> $x412 $x407)))))
 ))
 (let (($x35 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 $x466))))))
 ))
 (let (($x9 (and $x35 $x60)))
 (let (($x432 (and $x9 $x428)))
 (let (($x86 (and $x432 $x386)))
 (let (($x201 (and $x86 $x205)))
 (let ((?x276 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x277 (= (_ bv0 32) ?x276)))
 (let ((?x275 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x30 (= (_ bv0 32) ?x275)))
 (let ((?x44 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x37 $x76)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x260 $x99)))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x309 input.dst.llvm-%m1)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x301))))
 (let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 ?x304))))))))))
 ))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 $x467))))))
 ))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (=> $x220 $x407)))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 $x466))))))
 ))
 (let (($x293 (and $x138 $x226)))
 (let (($x232 (and $x293 $x62)))
 (let (($x257 (and $x232 $x98)))
 (let (($x129 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x389 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x421 (and $x389 $x425)))
 (let (($x279 (not $x421)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x388 (and $x217 $x330)))
 (let (($x79 (and (not $x388) $x279)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x332 $x314)))
 (let (($x298 (not $x329)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x75 $x283)))
 (let (($x286 (and (not $x284) $x298)))
 (let (($x204 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x207 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x320 (and (and (and (and (and (and $x207 $x204) $x286) $x79) $x82) $x129) $x257)))
 (let (($x444 (and (and (and (and (and $x320 $x100) $x112) $x30) $x277) $x201)))
 (let (($x67 (= $x444 true)))
 (let (($x440 (= $x67 true)))
 (let (($x441 (= $x440 true)))
 (let (($x26 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 (bvuge ?x361 (_ bv1 32)))))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 (= ?x361 (_ bv0 32)))))))
 ))
 (let (($x295 (and $x362 $x226)))
 (let (($x372 (and $x295 $x376)))
 (let (($x391 (and $x372 $x26)))
 (let (($x438 (and $x391 $x441)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 (bvuge ?x374 (_ bv1 32)))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 (= ?x374 (_ bv0 32)))))))
 ))
 (let (($x414 (and $x405 $x60)))
 (let (($x137 (and $x414 $x149)))
 (let (($x417 (and $x137 $x23)))
 (let (($x436 (and $x417 $x438)))
 (let (($x176 (=> $x436 $x38)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x456 ((_ extract 8 0) input.dst.llvm-%m2)))
 (let ((?x458 ((_ extract 8 0) input.dst.llvm-%m1)))
 (let ((?x455 (bvmul ?x458 (_ bv26 9))))
 (let (($x457 (= ?x455 ?x456)))
 (let (($x38 (= $x457 true)))
 (let ((?x278 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x411 (concat ?x403 (concat ?x406 (concat ?x70 ?x278)))))
 (let (($x186 (= input.dst.llvm-%m2 ?x411)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x258 (concat ?x266 (concat ?x264 ?x89)))))
 (let (($x259 (= input.dst.llvm-%m1 ?x261)))
 (let (($x205 (and $x259 $x186)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x281 (bvadd ?x309 input.dst.llvm-%m2)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x120))))
 (let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 ?x384))))))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 $x467))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (=> $x412 $x407)))))
 ))
 (let (($x35 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 $x466))))))
 ))
 (let (($x9 (and $x35 $x60)))
 (let (($x432 (and $x9 $x428)))
 (let (($x86 (and $x432 $x386)))
 (let (($x201 (and $x86 $x205)))
 (let ((?x276 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x277 (= (_ bv0 32) ?x276)))
 (let ((?x275 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x30 (= (_ bv0 32) ?x275)))
 (let ((?x44 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x37 $x76)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x260 $x99)))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x309 input.dst.llvm-%m1)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x301))))
 (let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 ?x304))))))))))
 ))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 $x467))))))
 ))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (=> $x220 $x407)))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 $x466))))))
 ))
 (let (($x293 (and $x138 $x226)))
 (let (($x232 (and $x293 $x62)))
 (let (($x257 (and $x232 $x98)))
 (let (($x129 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x389 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x421 (and $x389 $x425)))
 (let (($x279 (not $x421)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x388 (and $x217 $x330)))
 (let (($x79 (and (not $x388) $x279)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x332 $x314)))
 (let (($x298 (not $x329)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x75 $x283)))
 (let (($x286 (and (not $x284) $x298)))
 (let (($x204 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x207 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x320 (and (and (and (and (and (and $x207 $x204) $x286) $x79) $x82) $x129) $x257)))
 (let (($x444 (and (and (and (and (and $x320 $x100) $x112) $x30) $x277) $x201)))
 (let (($x67 (= $x444 true)))
 (let (($x440 (= $x67 true)))
 (let (($x441 (= $x440 true)))
 (let (($x26 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 (bvuge ?x361 (_ bv1 32)))))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 (= ?x361 (_ bv0 32)))))))
 ))
 (let (($x295 (and $x362 $x226)))
 (let (($x372 (and $x295 $x376)))
 (let (($x391 (and $x372 $x26)))
 (let (($x438 (and $x391 $x441)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 (bvuge ?x374 (_ bv1 32)))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 (= ?x374 (_ bv0 32)))))))
 ))
 (let (($x414 (and $x405 $x60)))
 (let (($x137 (and $x414 $x149)))
 (let (($x417 (and $x137 $x23)))
 (let (($x436 (and $x417 $x438)))
 (let (($x176 (=> $x436 $x38)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffdfffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffdfaf8)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xd3ef0080)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x63750000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffdfafb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffdffff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffdfaf8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffdfffc)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffdfafb) #x63
    (ite (= x!0 #xfffdffff) #xd3
    (ite (= x!0 #xfffdfffc) #x80
    (ite (= x!0 #xfffdfafa) #x75
    (ite (= x!0 #xfffdfffe) #xef
      #x00))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x800b0004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00084040)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x7fe10000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x02de0014)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00084043)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x800b0007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00084040)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x800b0004)
  (define-fun input.spec-%var-m2-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x800b0004 x!0) #x800b0004 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!29 (k!28 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x800b0004) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00084042) #xde
    (ite (= x!0 #x00084040) #x14
    (ite (= x!0 #x800b0006) #xe1
    (ite (= x!0 #x00084043) #x02
    (ite (= x!0 #x800b0007) #x7f
      #x00))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x800b0004 x!0) #x800b0004 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!30 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!30 (k!27 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x800b0004) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x108 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x114 (= (_ bv0 3) ?x108)))
 (let (($x117 (= $x114 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x392 (concat ?x51 (concat ?x141 (concat ?x127 ?x349)))))
 (let (($x27 (= input.dst.llvm-%m2 ?x392)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x435 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x360 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x351 (concat ?x360 (concat ?x346 (concat ?x435 ?x164)))))
 (let (($x350 (= input.dst.llvm-%m1 ?x351)))
 (let (($x156 (and $x350 $x27)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x134 (bvadd ?x90 input.dst.llvm-%m2)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x379))))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 ?x45))))))))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 $x328))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (=> $x59 $x394)))))
 ))
 (let (($x253 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 $x57))))))
 ))
 (let (($x73 (and $x253 $x69)))
 (let (($x268 (and $x73 $x269)))
 (let (($x136 (and $x268 $x448)))
 (let (($x195 (and $x136 $x156)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x296 (= (_ bv0 32) ?x229)))
 (let ((?x172 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x190 (= (_ bv0 32) ?x172)))
 (let ((?x165 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x357 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x357)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x63 $x358)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x194 $x177)))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x252 (bvadd ?x90 input.dst.llvm-%m1)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x94))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 ?x25))))))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 $x328))))))
 ))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (=> $x257 $x394)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 $x57))))))
 ))
 (let (($x395 (and $x285 $x76)))
 (let (($x10 (and $x395 $x243)))
 (let (($x22 (and $x10 $x54)))
 (let (($x458 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x438 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x186 $x205)))
 (let (($x444 (not $x201)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (and $x131 $x404)))
 (let (($x440 (and (not $x411) $x444)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (and $x403 $x52)))
 (let (($x126 (not $x406)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x265 $x261)))
 (let (($x278 (and (not $x259) $x126)))
 (let (($x470 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x258 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x78 (and (and (and (and (and (and $x258 $x470) $x278) $x440) $x438) $x458) $x22)))
 (let (($x111 (and (and (and (and (and $x78 $x203) $x68) $x190) $x296) $x195)))
 (let (($x113 (= $x111 true)))
 (let (($x274 (= $x113 true)))
 (let (($x102 (= $x274 true)))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 (bvuge ?x304 (_ bv1 32)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 (= ?x304 (_ bv0 32)))))))
 ))
 (let (($x99 (and $x260 $x76)))
 (let (($x428 (and $x99 $x365)))
 (let (($x385 (and $x428 $x459)))
 (let (($x418 (and $x385 $x102)))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 (bvuge ?x364 (_ bv1 32)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 (= ?x364 (_ bv0 32)))))))
 ))
 (let (($x393 (and $x396 $x69)))
 (let (($x314 (and $x393 $x332)))
 (let (($x183 (and $x314 $x79)))
 (let (($x103 (and $x183 $x418)))
 (let (($x419 (=> $x103 $x117)))
 (not $x419)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x108 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x114 (= (_ bv0 3) ?x108)))
 (let (($x117 (= $x114 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x392 (concat ?x51 (concat ?x141 (concat ?x127 ?x349)))))
 (let (($x27 (= input.dst.llvm-%m2 ?x392)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x435 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x360 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x351 (concat ?x360 (concat ?x346 (concat ?x435 ?x164)))))
 (let (($x350 (= input.dst.llvm-%m1 ?x351)))
 (let (($x156 (and $x350 $x27)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x134 (bvadd ?x90 input.dst.llvm-%m2)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x379))))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 ?x45))))))))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 $x328))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (=> $x59 $x394)))))
 ))
 (let (($x253 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 $x57))))))
 ))
 (let (($x73 (and $x253 $x69)))
 (let (($x268 (and $x73 $x269)))
 (let (($x136 (and $x268 $x448)))
 (let (($x195 (and $x136 $x156)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x296 (= (_ bv0 32) ?x229)))
 (let ((?x172 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x190 (= (_ bv0 32) ?x172)))
 (let ((?x165 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x357 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x357)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x63 $x358)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x194 $x177)))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x252 (bvadd ?x90 input.dst.llvm-%m1)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x94))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 ?x25))))))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 $x328))))))
 ))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (=> $x257 $x394)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 $x57))))))
 ))
 (let (($x395 (and $x285 $x76)))
 (let (($x10 (and $x395 $x243)))
 (let (($x22 (and $x10 $x54)))
 (let (($x458 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x438 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x186 $x205)))
 (let (($x444 (not $x201)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (and $x131 $x404)))
 (let (($x440 (and (not $x411) $x444)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (and $x403 $x52)))
 (let (($x126 (not $x406)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x265 $x261)))
 (let (($x278 (and (not $x259) $x126)))
 (let (($x470 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x258 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x78 (and (and (and (and (and (and $x258 $x470) $x278) $x440) $x438) $x458) $x22)))
 (let (($x111 (and (and (and (and (and $x78 $x203) $x68) $x190) $x296) $x195)))
 (let (($x113 (= $x111 true)))
 (let (($x274 (= $x113 true)))
 (let (($x102 (= $x274 true)))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 (bvuge ?x304 (_ bv1 32)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 (= ?x304 (_ bv0 32)))))))
 ))
 (let (($x99 (and $x260 $x76)))
 (let (($x428 (and $x99 $x365)))
 (let (($x385 (and $x428 $x459)))
 (let (($x418 (and $x385 $x102)))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 (bvuge ?x364 (_ bv1 32)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 (= ?x364 (_ bv0 32)))))))
 ))
 (let (($x393 (and $x396 $x69)))
 (let (($x314 (and $x393 $x332)))
 (let (($x183 (and $x314 $x79)))
 (let (($x103 (and $x183 $x418)))
 (let (($x419 (=> $x103 $x117)))
 (not $x419)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xbcade630)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0991b34)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xb5fddf04)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xebbb7b00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0991b37)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xbcade633)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0991b34)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xbcade630)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0991b37) #xeb
    (ite (= x!0 #xbcade631) #xdf
    (ite (= x!0 #xbcade633) #xb5
    (ite (= x!0 #xbcade630) #x04
    (ite (= x!0 #xc0991b36) #xbb
    (ite (= x!0 #xc0991b35) #x7b
    (ite (= x!0 #xbcade632) #xfd
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08145504)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00240000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000006) #x24
    (ite (= x!0 #x00000001) #x55
    (ite (= x!0 #x00000000) #x04
    (ite (= x!0 #x00000003) #x08
    (ite (= x!0 #x00000002) #x14
      #x00))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x286 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x286)))
 (let (($x330 (= $x202 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x383 (concat ?x280 (concat ?x319 (concat ?x30 ?x317)))))
 (let (($x118 (= input.dst.llvm-%m2 ?x383)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x299 (concat ?x300 (concat ?x124 (concat ?x461 ?x62)))))
 (let (($x147 (= input.dst.llvm-%m1 ?x299)))
 (let (($x77 (and $x147 $x118)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x410 (bvadd ?x171 input.dst.llvm-%m2)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv1 32))) (select input.dst.llvm-mem ?x410))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv2 32))) ?x367))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 ?x369))))))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 $x450))))))
 ))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (=> $x120 $x384)))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 $x83))))))
 ))
 (let (($x84 (and $x178 $x386)))
 (let (($x26 (and $x84 $x422)))
 (let (($x139 (and $x26 $x323)))
 (let (($x153 (and $x139 $x77)))
 (let ((?x321 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x321)))
 (let ((?x37 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x100 (= (_ bv0 32) ?x37)))
 (let ((?x32 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x42 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x211 (and $x305 $x248)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x311 $x211)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x342 (bvadd ?x171 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x347))))
 (let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 ?x408))))))))))
 ))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 $x450))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (=> $x22 $x384)))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 $x83))))))
 ))
 (let (($x130 (and $x462 $x358)))
 (let (($x225 (and $x130 $x129)))
 (let (($x245 (and $x225 $x40)))
 (let (($x105 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x27 $x156)))
 (let (($x111 (not $x195)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x392 (and $x227 $x224)))
 (let (($x274 (and (not $x392) $x111)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x51 $x223)))
 (let (($x353 (not $x141)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (and $x343 $x351)))
 (let (($x349 (and (not $x350) $x353)))
 (let (($x473 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x360 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x360 $x473) $x349) $x274) $x418) $x105) $x245)))
 (let (($x226 (and (and (and (and (and $x359 $x237) $x238) $x100) $x44) $x153)))
 (let (($x204 (= $x226 true)))
 (let (($x198 (= $x204 true)))
 (let (($x20 (= $x198 true)))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 (bvuge ?x25 (_ bv1 32)))))))
 ))
 (let (($x194 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 (= ?x25 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x194 $x358)))
 (let (($x269 (and $x177 $x263)))
 (let (($x437 (and $x269 $x370)))
 (let (($x397 (and $x437 $x20)))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 (bvuge ?x21 (_ bv1 32)))))))
 ))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 (= ?x21 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x371 $x386)))
 (let (($x52 (and $x86 $x403)))
 (let (($x452 (and $x52 $x440)))
 (let (($x193 (and $x452 $x397)))
 (let (($x388 (=> $x193 $x330)))
 (not $x388)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x286 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x286)))
 (let (($x330 (= $x202 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x383 (concat ?x280 (concat ?x319 (concat ?x30 ?x317)))))
 (let (($x118 (= input.dst.llvm-%m2 ?x383)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x299 (concat ?x300 (concat ?x124 (concat ?x461 ?x62)))))
 (let (($x147 (= input.dst.llvm-%m1 ?x299)))
 (let (($x77 (and $x147 $x118)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x410 (bvadd ?x171 input.dst.llvm-%m2)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv1 32))) (select input.dst.llvm-mem ?x410))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv2 32))) ?x367))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 ?x369))))))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 $x450))))))
 ))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (=> $x120 $x384)))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 $x83))))))
 ))
 (let (($x84 (and $x178 $x386)))
 (let (($x26 (and $x84 $x422)))
 (let (($x139 (and $x26 $x323)))
 (let (($x153 (and $x139 $x77)))
 (let ((?x321 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x321)))
 (let ((?x37 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x100 (= (_ bv0 32) ?x37)))
 (let ((?x32 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x42 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x211 (and $x305 $x248)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x311 $x211)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x342 (bvadd ?x171 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x347))))
 (let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 ?x408))))))))))
 ))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 $x450))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (=> $x22 $x384)))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 $x83))))))
 ))
 (let (($x130 (and $x462 $x358)))
 (let (($x225 (and $x130 $x129)))
 (let (($x245 (and $x225 $x40)))
 (let (($x105 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x27 $x156)))
 (let (($x111 (not $x195)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x392 (and $x227 $x224)))
 (let (($x274 (and (not $x392) $x111)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x51 $x223)))
 (let (($x353 (not $x141)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (and $x343 $x351)))
 (let (($x349 (and (not $x350) $x353)))
 (let (($x473 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x360 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x360 $x473) $x349) $x274) $x418) $x105) $x245)))
 (let (($x226 (and (and (and (and (and $x359 $x237) $x238) $x100) $x44) $x153)))
 (let (($x204 (= $x226 true)))
 (let (($x198 (= $x204 true)))
 (let (($x20 (= $x198 true)))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 (bvuge ?x25 (_ bv1 32)))))))
 ))
 (let (($x194 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 (= ?x25 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x194 $x358)))
 (let (($x269 (and $x177 $x263)))
 (let (($x437 (and $x269 $x370)))
 (let (($x397 (and $x437 $x20)))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 (bvuge ?x21 (_ bv1 32)))))))
 ))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 (= ?x21 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x371 $x386)))
 (let (($x52 (and $x86 $x403)))
 (let (($x452 (and $x52 $x440)))
 (let (($x193 (and $x452 $x397)))
 (let (($x388 (=> $x193 $x330)))
 (not $x388)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x278 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x453 (= (_ bv0 2) ?x278)))
 (let (($x404 (= $x453 true)))
 (let ((?x271 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x434 (concat ?x378 (concat ?x11 (concat ?x190 ?x271)))))
 (let (($x443 (= input.dst.llvm-%m2 ?x434)))
 (let ((?x243 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x93 (concat ?x335 (concat ?x176 ?x243)))))
 (let (($x95 (= input.dst.llvm-%m1 ?x250)))
 (let (($x279 (and $x95 $x443)))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x207 (bvadd ?x236 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x47))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 ?x66))))))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 $x87))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (=> $x379 $x45)))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 $x64))))))
 ))
 (let (($x119 (and $x175 $x448)))
 (let (($x459 (and $x119 $x174)))
 (let (($x16 (and $x459 $x298)))
 (let (($x425 (and $x16 $x279)))
 (let ((?x270 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x165 (= (_ bv0 32) ?x270)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x203 (= (_ bv0 32) ?x63)))
 (let ((?x216 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x423 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x322 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x423)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x96 $x322)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x399 (and $x254 $x41)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x235 (bvadd ?x236 input.dst.llvm-%m1)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x288))))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 ?x208))))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 $x87))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (=> $x245 $x45)))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 $x64))))))
 ))
 (let (($x415 (and $x162 $x248)))
 (let (($x460 (and $x415 $x458)))
 (let (($x282 (and $x460 $x210)))
 (let (($x283 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x397 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x118 $x77)))
 (let (($x226 (not $x153)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x383 (and $x316 $x125)))
 (let (($x198 (and (not $x383) $x226)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x280 $x277)))
 (let (($x275 (not $x319)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x309 $x299)))
 (let (($x317 (and (not $x147) $x275)))
 (let (($x232 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x300 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x300 $x232) $x317) $x198) $x397) $x283) $x282)))
 (let (($x76 (and (and (and (and (and $x98 $x399) $x445) $x203) $x165) $x425)))
 (let (($x470 (= $x76 true)))
 (let (($x454 (= $x470 true)))
 (let (($x264 (= $x454 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 (bvuge ?x408 (_ bv1 32)))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 (= ?x408 (_ bv0 32)))))))
 ))
 (let (($x211 (and $x311 $x248)))
 (let (($x422 (and $x211 $x354)))
 (let (($x217 (and $x422 $x104)))
 (let (($x89 (and $x217 $x264)))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 (bvuge ?x72 (_ bv1 32)))))))
 ))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 (= ?x72 (_ bv0 32)))))))
 ))
 (let (($x136 (and $x375 $x448)))
 (let (($x223 (and $x136 $x51)))
 (let (($x23 (and $x223 $x274)))
 (let (($x267 (and $x23 $x89)))
 (let (($x411 (=> $x267 $x404)))
 (not $x411)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x278 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x453 (= (_ bv0 2) ?x278)))
 (let (($x404 (= $x453 true)))
 (let ((?x271 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x434 (concat ?x378 (concat ?x11 (concat ?x190 ?x271)))))
 (let (($x443 (= input.dst.llvm-%m2 ?x434)))
 (let ((?x243 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x93 (concat ?x335 (concat ?x176 ?x243)))))
 (let (($x95 (= input.dst.llvm-%m1 ?x250)))
 (let (($x279 (and $x95 $x443)))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x207 (bvadd ?x236 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x47))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 ?x66))))))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 $x87))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (=> $x379 $x45)))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 $x64))))))
 ))
 (let (($x119 (and $x175 $x448)))
 (let (($x459 (and $x119 $x174)))
 (let (($x16 (and $x459 $x298)))
 (let (($x425 (and $x16 $x279)))
 (let ((?x270 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x165 (= (_ bv0 32) ?x270)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x203 (= (_ bv0 32) ?x63)))
 (let ((?x216 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x423 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x322 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x423)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x96 $x322)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x399 (and $x254 $x41)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x235 (bvadd ?x236 input.dst.llvm-%m1)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x288))))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 ?x208))))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 $x87))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (=> $x245 $x45)))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 $x64))))))
 ))
 (let (($x415 (and $x162 $x248)))
 (let (($x460 (and $x415 $x458)))
 (let (($x282 (and $x460 $x210)))
 (let (($x283 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x397 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x118 $x77)))
 (let (($x226 (not $x153)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x383 (and $x316 $x125)))
 (let (($x198 (and (not $x383) $x226)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x280 $x277)))
 (let (($x275 (not $x319)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x309 $x299)))
 (let (($x317 (and (not $x147) $x275)))
 (let (($x232 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x300 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x300 $x232) $x317) $x198) $x397) $x283) $x282)))
 (let (($x76 (and (and (and (and (and $x98 $x399) $x445) $x203) $x165) $x425)))
 (let (($x470 (= $x76 true)))
 (let (($x454 (= $x470 true)))
 (let (($x264 (= $x454 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 (bvuge ?x408 (_ bv1 32)))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 (= ?x408 (_ bv0 32)))))))
 ))
 (let (($x211 (and $x311 $x248)))
 (let (($x422 (and $x211 $x354)))
 (let (($x217 (and $x422 $x104)))
 (let (($x89 (and $x217 $x264)))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 (bvuge ?x72 (_ bv1 32)))))))
 ))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 (= ?x72 (_ bv0 32)))))))
 ))
 (let (($x136 (and $x375 $x448)))
 (let (($x223 (and $x136 $x51)))
 (let (($x23 (and $x223 $x274)))
 (let (($x267 (and $x23 $x89)))
 (let (($x411 (=> $x267 $x404)))
 (not $x411)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 175 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x19 input.dst.llvm-%m1)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x209))))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 ?x6))))))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 $x246))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (=> $x282 $x369)))))
 ))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 $x81))))))
 ))
 (let (($x318 (and $x463 $x322)))
 (let (($x356 (and $x318 $x105)))
 (let (($x293 (and $x356 $x464)))
 (let (($x351 (= $x293 true)))
 (let (($x349 (= $x351 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x106 (concat ?x230 (concat ?x100 ?x159)))))
 (let (($x315 (= input.dst.llvm-%m2 ?x219)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x157 (concat ?x148 (concat ?x273 ?x129)))))
 (let (($x189 (= input.dst.llvm-%m1 ?x170)))
 (let (($x444 (and $x189 $x315)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x258 (bvadd ?x19 input.dst.llvm-%m2)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x256))))
 (let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 ?x352))))))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 $x246))))))
 ))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (=> $x367 $x369)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 $x81))))))
 ))
 (let (($x429 (and $x427 $x323)))
 (let (($x370 (and $x429 $x426)))
 (let (($x181 (and $x370 $x126)))
 (let (($x205 (and $x181 $x444)))
 (let ((?x220 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x32 (= (_ bv0 32) ?x220)))
 (let ((?x305 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x237 (= (_ bv0 32) ?x305)))
 (let ((?x115 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x12 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x398 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x334 (and $x339 $x398)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x345 $x334)))
 (let (($x261 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x443 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (and $x443 $x279)))
 (let (($x76 (not $x425)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x434 (and $x272 $x366)))
 (let (($x454 (and (not $x434) $x76)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x378 $x296)))
 (let (($x172 (not $x11)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x90 $x250)))
 (let (($x271 (and (not $x95) $x172)))
 (let (($x10 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x93 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x54 (and (and (and (and (and (and $x93 $x10) $x271) $x454) $x89) $x261) $x293)))
 (let (($x358 (and (and (and (and (and $x54 $x138) $x50) $x237) $x32) $x205)))
 (let (($x473 (= $x358 true)))
 (let (($x152 (= $x473 true)))
 (let (($x435 (= $x152 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 (bvuge ?x208 (_ bv1 32)))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 (= ?x208 (_ bv0 32)))))))
 ))
 (let (($x41 (and $x254 $x322)))
 (let (($x174 (and $x41 $x308)))
 (let (($x131 (and $x174 $x329)))
 (let (($x164 (and $x131 $x435)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 (bvuge ?x28 (_ bv1 32)))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 (= ?x28 (_ bv0 32)))))))
 ))
 (let (($x139 (and $x107 $x323)))
 (let (($x277 (and $x139 $x280)))
 (let (($x79 (and $x277 $x198)))
 (let (($x348 (and $x79 $x164)))
 (let (($x15 (=> $x348 $x349)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x19 input.dst.llvm-%m1)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x209))))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 ?x6))))))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 $x246))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (=> $x282 $x369)))))
 ))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 $x81))))))
 ))
 (let (($x318 (and $x463 $x322)))
 (let (($x356 (and $x318 $x105)))
 (let (($x293 (and $x356 $x464)))
 (let (($x351 (= $x293 true)))
 (let (($x349 (= $x351 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x106 (concat ?x230 (concat ?x100 ?x159)))))
 (let (($x315 (= input.dst.llvm-%m2 ?x219)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x157 (concat ?x148 (concat ?x273 ?x129)))))
 (let (($x189 (= input.dst.llvm-%m1 ?x170)))
 (let (($x444 (and $x189 $x315)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x258 (bvadd ?x19 input.dst.llvm-%m2)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x256))))
 (let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 ?x352))))))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 $x246))))))
 ))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (=> $x367 $x369)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 $x81))))))
 ))
 (let (($x429 (and $x427 $x323)))
 (let (($x370 (and $x429 $x426)))
 (let (($x181 (and $x370 $x126)))
 (let (($x205 (and $x181 $x444)))
 (let ((?x220 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x32 (= (_ bv0 32) ?x220)))
 (let ((?x305 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x237 (= (_ bv0 32) ?x305)))
 (let ((?x115 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x12 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x398 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x334 (and $x339 $x398)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x345 $x334)))
 (let (($x261 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x443 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (and $x443 $x279)))
 (let (($x76 (not $x425)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x434 (and $x272 $x366)))
 (let (($x454 (and (not $x434) $x76)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x378 $x296)))
 (let (($x172 (not $x11)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x90 $x250)))
 (let (($x271 (and (not $x95) $x172)))
 (let (($x10 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x93 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x54 (and (and (and (and (and (and $x93 $x10) $x271) $x454) $x89) $x261) $x293)))
 (let (($x358 (and (and (and (and (and $x54 $x138) $x50) $x237) $x32) $x205)))
 (let (($x473 (= $x358 true)))
 (let (($x152 (= $x473 true)))
 (let (($x435 (= $x152 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 (bvuge ?x208 (_ bv1 32)))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 (= ?x208 (_ bv0 32)))))))
 ))
 (let (($x41 (and $x254 $x322)))
 (let (($x174 (and $x41 $x308)))
 (let (($x131 (and $x174 $x329)))
 (let (($x164 (and $x131 $x435)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 (bvuge ?x28 (_ bv1 32)))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 (= ?x28 (_ bv0 32)))))))
 ))
 (let (($x139 (and $x107 $x323)))
 (let (($x277 (and $x139 $x280)))
 (let (($x79 (and $x277 $x198)))
 (let (($x348 (and $x79 $x164)))
 (let (($x15 (=> $x348 $x349)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x466 input.dst.llvm-%m2)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x121))))
 (let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 ?x316))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 $x283))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (=> $x47 $x66)))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 $x74))))))
 ))
 (let (($x412 (and $x402 $x298)))
 (let (($x300 (and $x412 $x303)))
 (let (($x458 (and $x300 $x451)))
 (let (($x421 (= $x458 true)))
 (let (($x125 (= $x421 true)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x58 (concat ?x56 (concat ?x165 ?x203)))))
 (let (($x156 (= input.dst.llvm-%m2 ?x111)))
 (let ((?x295 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x288 (concat ?x289 (concat ?x439 (concat ?x235 ?x295)))))
 (let (($x320 (= input.dst.llvm-%m1 ?x288)))
 (let (($x27 (and $x320 $x156)))
 (let (($x195 (and $x458 $x27)))
 (let ((?x445 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x472 (= (_ bv0 32) ?x445)))
 (let ((?x257 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x216 (= (_ bv0 32) ?x257)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x399 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x380 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x380)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x284 (and $x374 $x285)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x372 $x284)))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x447 (bvadd ?x466 input.dst.llvm-%m1)))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x468))))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 ?x328))))))))))
 ))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 $x283))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (=> $x293 $x66)))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 $x74))))))
 ))
 (let (($x55 (and $x218 $x398)))
 (let (($x455 (and $x55 $x38)))
 (let (($x287 (and $x455 $x292)))
 (let (($x351 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x444 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x315 $x444)))
 (let (($x358 (not $x205)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x362 $x110)))
 (let (($x152 (and (not $x219) $x358)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x106 $x44)))
 (let (($x37 (not $x230)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x171 $x170)))
 (let (($x159 (and (not $x189) $x37)))
 (let (($x225 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x157 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x157 $x225) $x159) $x152) $x164) $x351) $x287)))
 (let (($x389 (and (and (and (and (and $x359 $x108) $x399) $x216) $x472) $x195)))
 (let (($x461 (= $x389 true)))
 (let (($x62 (= $x461 true)))
 (let (($x306 (= $x62 true)))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 (bvuge ?x6 (_ bv1 32)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 (= ?x6 (_ bv0 32)))))))
 ))
 (let (($x334 (and $x345 $x398)))
 (let (($x426 (and $x334 $x142)))
 (let (($x227 (and $x426 $x406)))
 (let (($x299 (and $x227 $x306)))
 (let (($x454 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x16 (and $x36 $x298)))
 (let (($x296 (and $x16 $x378)))
 (let (($x440 (and $x296 $x454)))
 (let (($x317 (and $x440 $x299)))
 (let (($x383 (=> $x317 $x125)))
 (not $x383))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x466 input.dst.llvm-%m2)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x121))))
 (let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 ?x316))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 $x283))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (=> $x47 $x66)))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 $x74))))))
 ))
 (let (($x412 (and $x402 $x298)))
 (let (($x300 (and $x412 $x303)))
 (let (($x458 (and $x300 $x451)))
 (let (($x421 (= $x458 true)))
 (let (($x125 (= $x421 true)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x58 (concat ?x56 (concat ?x165 ?x203)))))
 (let (($x156 (= input.dst.llvm-%m2 ?x111)))
 (let ((?x295 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x288 (concat ?x289 (concat ?x439 (concat ?x235 ?x295)))))
 (let (($x320 (= input.dst.llvm-%m1 ?x288)))
 (let (($x27 (and $x320 $x156)))
 (let (($x195 (and $x458 $x27)))
 (let ((?x445 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x472 (= (_ bv0 32) ?x445)))
 (let ((?x257 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x216 (= (_ bv0 32) ?x257)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x399 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x380 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x380)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x284 (and $x374 $x285)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x372 $x284)))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x447 (bvadd ?x466 input.dst.llvm-%m1)))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x468))))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 ?x328))))))))))
 ))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 $x283))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (=> $x293 $x66)))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 $x74))))))
 ))
 (let (($x55 (and $x218 $x398)))
 (let (($x455 (and $x55 $x38)))
 (let (($x287 (and $x455 $x292)))
 (let (($x351 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x444 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x315 $x444)))
 (let (($x358 (not $x205)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x362 $x110)))
 (let (($x152 (and (not $x219) $x358)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x106 $x44)))
 (let (($x37 (not $x230)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x171 $x170)))
 (let (($x159 (and (not $x189) $x37)))
 (let (($x225 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x157 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x157 $x225) $x159) $x152) $x164) $x351) $x287)))
 (let (($x389 (and (and (and (and (and $x359 $x108) $x399) $x216) $x472) $x195)))
 (let (($x461 (= $x389 true)))
 (let (($x62 (= $x461 true)))
 (let (($x306 (= $x62 true)))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 (bvuge ?x6 (_ bv1 32)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 (= ?x6 (_ bv0 32)))))))
 ))
 (let (($x334 (and $x345 $x398)))
 (let (($x426 (and $x334 $x142)))
 (let (($x227 (and $x426 $x406)))
 (let (($x299 (and $x227 $x306)))
 (let (($x454 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x16 (and $x36 $x298)))
 (let (($x296 (and $x16 $x378)))
 (let (($x440 (and $x296 $x454)))
 (let (($x317 (and $x440 $x299)))
 (let (($x383 (=> $x317 $x125)))
 (not $x383))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x201 (= false true)))
 (let (($x366 (= $x201 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x361 (concat ?x48 (concat ?x32 ?x237)))))
 (let (($x77 (= input.dst.llvm-%m2 ?x226)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x209 (concat ?x53 (concat ?x149 (concat ?x240 ?x99)))))
 (let (($x78 (= input.dst.llvm-%m1 ?x209)))
 (let (($x118 (and $x78 $x77)))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x319 (bvadd ?x290 input.dst.llvm-%m2)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x302))))
 (let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 ?x272))))))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 $x261))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (=> $x256 $x352)))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 $x238))))))
 ))
 (let (($x391 (and $x396 $x126)))
 (let (($x93 (and $x391 $x97)))
 (let (($x105 (and $x93 $x417)))
 (let (($x153 (and $x105 $x118)))
 (let ((?x50 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x50)))
 (let ((?x22 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x115 (= (_ bv0 32) ?x22)))
 (let ((?x339 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x339)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x259)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x368 $x286)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x462 $x202)))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x290 input.dst.llvm-%m1)))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x474))))
 (let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 ?x364))))))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 $x261))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (=> $x287 $x352)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 $x238))))))
 ))
 (let (($x14 (and $x321 $x285)))
 (let (($x114 (and $x14 $x140)))
 (let (($x101 (and $x114 $x7)))
 (let (($x421 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x156 $x27)))
 (let (($x389 (not $x195)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x88 $x31)))
 (let (($x62 (and (not $x111) $x389)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x58 $x206)))
 (let (($x260 (not $x56)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (and $x331 $x288)))
 (let (($x203 (and (not $x320) $x260)))
 (let (($x236 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x289 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x289 $x236) $x203) $x62) $x299) $x421) $x101)))
 (let (($x186 (and (and (and (and (and $x98 $x161) $x138) $x115) $x46) $x153)))
 (let (($x176 (= $x186 true)))
 (let (($x243 (= $x176 true)))
 (let (($x91 (= $x243 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 (bvuge ?x328 (_ bv1 32)))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 (= ?x328 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x372 $x285)))
 (let (($x303 (and $x284 $x104)))
 (let (($x262 (and $x303 $x353)))
 (let (($x250 (and $x262 $x91)))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 (bvuge ?x407 (_ bv1 32)))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 (= ?x407 (_ bv0 32)))))))
 ))
 (let (($x181 (and $x255 $x126)))
 (let (($x44 (and $x181 $x106)))
 (let (($x155 (and $x44 $x152)))
 (let (($x271 (and $x155 $x250)))
 (let (($x434 (=> $x271 $x366)))
 (not $x434))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x201 (= false true)))
 (let (($x366 (= $x201 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x361 (concat ?x48 (concat ?x32 ?x237)))))
 (let (($x77 (= input.dst.llvm-%m2 ?x226)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x209 (concat ?x53 (concat ?x149 (concat ?x240 ?x99)))))
 (let (($x78 (= input.dst.llvm-%m1 ?x209)))
 (let (($x118 (and $x78 $x77)))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x319 (bvadd ?x290 input.dst.llvm-%m2)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x302))))
 (let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 ?x272))))))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 $x261))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (=> $x256 $x352)))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 $x238))))))
 ))
 (let (($x391 (and $x396 $x126)))
 (let (($x93 (and $x391 $x97)))
 (let (($x105 (and $x93 $x417)))
 (let (($x153 (and $x105 $x118)))
 (let ((?x50 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x50)))
 (let ((?x22 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x115 (= (_ bv0 32) ?x22)))
 (let ((?x339 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x339)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x259)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x368 $x286)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x462 $x202)))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x290 input.dst.llvm-%m1)))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x474))))
 (let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 ?x364))))))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 $x261))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (=> $x287 $x352)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 $x238))))))
 ))
 (let (($x14 (and $x321 $x285)))
 (let (($x114 (and $x14 $x140)))
 (let (($x101 (and $x114 $x7)))
 (let (($x421 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x156 $x27)))
 (let (($x389 (not $x195)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x88 $x31)))
 (let (($x62 (and (not $x111) $x389)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x58 $x206)))
 (let (($x260 (not $x56)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (and $x331 $x288)))
 (let (($x203 (and (not $x320) $x260)))
 (let (($x236 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x289 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x289 $x236) $x203) $x62) $x299) $x421) $x101)))
 (let (($x186 (and (and (and (and (and $x98 $x161) $x138) $x115) $x46) $x153)))
 (let (($x176 (= $x186 true)))
 (let (($x243 (= $x176 true)))
 (let (($x91 (= $x243 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 (bvuge ?x328 (_ bv1 32)))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 (= ?x328 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x372 $x285)))
 (let (($x303 (and $x284 $x104)))
 (let (($x262 (and $x303 $x353)))
 (let (($x250 (and $x262 $x91)))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 (bvuge ?x407 (_ bv1 32)))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 (= ?x407 (_ bv0 32)))))))
 ))
 (let (($x181 (and $x255 $x126)))
 (let (($x44 (and $x181 $x106)))
 (let (($x155 (and $x44 $x152)))
 (let (($x271 (and $x155 $x250)))
 (let (($x434 (=> $x271 $x366)))
 (not $x434))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2b722c14)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x13587418)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x6df53b00)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xeffef800)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1358741b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2b722c17)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x13587418)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2b722c14)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1358741b) #xef
    (ite (= x!0 #x2b722c15) #x3b
    (ite (= x!0 #x2b722c17) #x6d
    (ite (= x!0 #x1358741a) #xfe
    (ite (= x!0 #x13587419) #xf8
    (ite (= x!0 #x2b722c16) #xf5
      #x00)))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x18362800)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xdb28c100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000a) #x28
    (ite (= x!0 #x00000009) #xc1
    (ite (= x!0 #x00000001) #x28
    (ite (= x!0 #x0000000b) #xdb
    (ite (= x!0 #x00000003) #x18
    (ite (= x!0 #x00000002) #x36
      #x00)))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x454 (= true false)))
 (let (($x440 (= $x454 true)))
 (let ((?x42 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x257 (= (_ bv0 32) ?x42)))
 (let ((?x185 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x468 (= (_ bv0 32) ?x185)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x447 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x447)))
 (let (($x466 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x376 (and $x466 $x223)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (and $x397 $x376)))
 (let (($x455 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x377 (and $x214 $x408)))
 (let (($x310 (not $x377)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x90 $x405)))
 (let (($x124 (and (not $x168) $x310)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x413 (and $x252 $x335)))
 (let (($x11 (not $x413)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x442 $x60)))
 (let (($x34 (and (not $x230) $x11)))
 (let (($x141 (and (and (and (and (and (and $x34 $x124) $x263) $x455) $x314) $x200) $x468)))
 (let (($x346 (and $x141 $x257)))
 (let (($x449 (= $x346 true)))
 (let (($x430 (= $x449 true)))
 (let (($x76 (= $x430 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x384 (bvadd ?x193 input.dst.llvm-%m2)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x371))))
 (let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 ?x59))))))))))
 ))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 $x169))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (=> $x104 $x304)))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 $x64))))))
 ))
 (let (($x36 (and $x471 $x353)))
 (let (($x178 (and $x36 $x139)))
 (let (($x342 (and $x178 $x157)))
 (let (($x148 (= $x342 true)))
 (let (($x70 (= $x148 true)))
 (let (($x394 (= $x70 true)))
 (let ((?x276 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x83 (= (_ bv0 2) ?x276)))
 (let (($x416 (= $x83 true)))
 (let (($x241 (= $x416 true)))
 (let ((?x340 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x281 (= (_ bv0 2) ?x340)))
 (let (($x446 (= $x281 true)))
 (let (($x144 (= $x446 true)))
 (let (($x245 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x247 (bvadd ?x193 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x244))))
 (let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 ?x154))))))))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 $x169))))))
 ))
 (let (($x368 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (=> $x130 $x304)))))
 ))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 $x64))))))
 ))
 (let (($x173 (and $x268 $x368)))
 (let (($x72 (and $x173 $x367)))
 (let (($x436 (and $x72 $x245)))
 (let (($x388 (= $x436 true)))
 (let (($x441 (= $x388 true)))
 (let (($x94 (= $x441 true)))
 (let (($x158 (and $x94 $x144)))
 (let (($x379 (and $x158 $x241)))
 (let (($x71 (and $x379 $x394)))
 (let (($x279 (and $x71 $x76)))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 (bvuge ?x474 (_ bv1 32)))))))
 ))
 (let (($x101 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 (= ?x474 (_ bv0 32)))))))
 ))
 (let (($x259 (and $x101 $x368)))
 (let (($x391 (and $x259 $x396)))
 (let (($x272 (and $x391 $x135)))
 (let (($x443 (and $x272 $x279)))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 (bvuge ?x284 (_ bv1 32)))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 (= ?x284 (_ bv0 32)))))))
 ))
 (let (($x262 (and $x121 $x353)))
 (let (($x75 (and $x262 $x165)))
 (let (($x389 (and $x75 $x195)))
 (let (($x425 (and $x389 $x443)))
 (let (($x467 (=> $x425 $x440)))
 (not $x467))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x454 (= true false)))
 (let (($x440 (= $x454 true)))
 (let ((?x42 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x257 (= (_ bv0 32) ?x42)))
 (let ((?x185 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x468 (= (_ bv0 32) ?x185)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x447 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x447)))
 (let (($x466 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x376 (and $x466 $x223)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (and $x397 $x376)))
 (let (($x455 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x377 (and $x214 $x408)))
 (let (($x310 (not $x377)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x90 $x405)))
 (let (($x124 (and (not $x168) $x310)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x413 (and $x252 $x335)))
 (let (($x11 (not $x413)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x442 $x60)))
 (let (($x34 (and (not $x230) $x11)))
 (let (($x141 (and (and (and (and (and (and $x34 $x124) $x263) $x455) $x314) $x200) $x468)))
 (let (($x346 (and $x141 $x257)))
 (let (($x449 (= $x346 true)))
 (let (($x430 (= $x449 true)))
 (let (($x76 (= $x430 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x384 (bvadd ?x193 input.dst.llvm-%m2)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x371))))
 (let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 ?x59))))))))))
 ))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 $x169))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (=> $x104 $x304)))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 $x64))))))
 ))
 (let (($x36 (and $x471 $x353)))
 (let (($x178 (and $x36 $x139)))
 (let (($x342 (and $x178 $x157)))
 (let (($x148 (= $x342 true)))
 (let (($x70 (= $x148 true)))
 (let (($x394 (= $x70 true)))
 (let ((?x276 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x83 (= (_ bv0 2) ?x276)))
 (let (($x416 (= $x83 true)))
 (let (($x241 (= $x416 true)))
 (let ((?x340 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x281 (= (_ bv0 2) ?x340)))
 (let (($x446 (= $x281 true)))
 (let (($x144 (= $x446 true)))
 (let (($x245 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x247 (bvadd ?x193 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x244))))
 (let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 ?x154))))))))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 $x169))))))
 ))
 (let (($x368 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (=> $x130 $x304)))))
 ))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 $x64))))))
 ))
 (let (($x173 (and $x268 $x368)))
 (let (($x72 (and $x173 $x367)))
 (let (($x436 (and $x72 $x245)))
 (let (($x388 (= $x436 true)))
 (let (($x441 (= $x388 true)))
 (let (($x94 (= $x441 true)))
 (let (($x158 (and $x94 $x144)))
 (let (($x379 (and $x158 $x241)))
 (let (($x71 (and $x379 $x394)))
 (let (($x279 (and $x71 $x76)))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 (bvuge ?x474 (_ bv1 32)))))))
 ))
 (let (($x101 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 (= ?x474 (_ bv0 32)))))))
 ))
 (let (($x259 (and $x101 $x368)))
 (let (($x391 (and $x259 $x396)))
 (let (($x272 (and $x391 $x135)))
 (let (($x443 (and $x272 $x279)))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 (bvuge ?x284 (_ bv1 32)))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 (= ?x284 (_ bv0 32)))))))
 ))
 (let (($x262 (and $x121 $x353)))
 (let (($x75 (and $x262 $x165)))
 (let (($x389 (and $x75 $x195)))
 (let (($x425 (and $x389 $x443)))
 (let (($x467 (=> $x425 $x440)))
 (not $x467))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0a72c79c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd1026788)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd102678b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0a72c79f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd1026788)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0a72c79c)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000010))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000010))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000010) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000010))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000010))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000010) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x205 (bvadd ?x177 input.dst.llvm-%m2)))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x395))))
 (let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 ?x439))))))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 $x344))))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (=> $x148 $x302)))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 $x438))))))
 ))
 (let (($x387 (and $x68 $x208)))
 (let (($x115 (and $x387 $x355)))
 (let (($x159 (and $x115 $x170)))
 (let (($x23 (= $x159 true)))
 (let (($x110 (= $x23 true)))
 (let ((?x31 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x293 (= (_ bv0 2) ?x31)))
 (let (($x54 (= $x293 true)))
 (let (($x345 (= $x54 true)))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x205 (bvadd ?x177 input.dst.llvm-%m2)))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x395))))
 (let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 ?x439))))))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 $x344))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (=> $x309 $x302)))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 $x438))))))
 ))
 (let (($x187 (and $x261 $x457)))
 (let (($x57 (and $x187 $x233)))
 (let (($x331 (and $x57 $x295)))
 (let (($x56 (= $x331 true)))
 (let (($x260 (= $x56 true)))
 (let (($x79 (= $x260 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x9 (bvadd ?x177 input.dst.llvm-%m1)))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x429))))
 (let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 ?x352))))))))))
 ))
 (let (($x85 (and $x115 $x297)))
 (let (($x222 (= $x85 true)))
 (let (($x116 (= $x222 true)))
 (let (($x221 (= $x116 true)))
 (let (($x336 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x415 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x179 (and $x415 $x336)))
 (let (($x87 (= $x179 true)))
 (let (($x311 (= $x87 true)))
 (let (($x96 (= $x311 true)))
 (let ((?x240 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x424 (= (_ bv0 32) ?x240)))
 (let ((?x242 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x41 (= (_ bv0 32) ?x242)))
 (let ((?x29 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x14 $x189)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x360 (and $x321 $x13)))
 (let (($x192 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (and $x62 $x212)))
 (let (($x299 (not $x306)))
 (let (($x467 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x440 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x464 (and $x440 $x467)))
 (let (($x435 (and (not $x464) $x299)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x430 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x430 $x76)))
 (let (($x443 (not $x279)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and $x141 $x257)))
 (let (($x454 (and (not $x346) $x443)))
 (let (($x432 (and (and (and (and (and (and $x454 $x435) $x119) $x192) $x360) $x105) $x41)))
 (let (($x239 (and $x432 $x424)))
 (let (($x5 (= $x239 true)))
 (let (($x196 (= $x5 true)))
 (let (($x375 (= $x196 true)))
 (let ((?x232 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x215 (= (_ bv0 2) ?x232)))
 (let (($x200 (= $x215 true)))
 (let (($x307 (= $x200 true)))
 (let (($x21 (and $x307 $x375)))
 (let (($x102 (and $x21 $x96)))
 (let (($x191 (and $x102 $x221)))
 (let (($x88 (and $x191 $x79)))
 (let (($x12 (and $x88 $x345)))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 (bvuge ?x406 (_ bv1 32)))))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 (= ?x406 (_ bv0 32)))))))
 ))
 (let (($x442 (and $x394 $x208)))
 (let (($x408 (and $x442 $x214)))
 (let (($x223 (and $x408 $x447)))
 (let (($x398 (and $x223 $x12)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 (bvuge ?x46 (_ bv1 32)))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 (= ?x46 (_ bv0 32)))))))
 ))
 (let (($x417 (and $x275 $x457)))
 (let (($x247 (and $x417 $x99)))
 (let (($x351 (and $x247 $x224)))
 (let (($x225 (and $x351 $x398)))
 (let (($x219 (=> $x225 $x110)))
 (not $x219)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x205 (bvadd ?x177 input.dst.llvm-%m2)))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x395))))
 (let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 ?x439))))))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 $x344))))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (=> $x148 $x302)))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 $x438))))))
 ))
 (let (($x387 (and $x68 $x208)))
 (let (($x115 (and $x387 $x355)))
 (let (($x159 (and $x115 $x170)))
 (let (($x23 (= $x159 true)))
 (let (($x110 (= $x23 true)))
 (let ((?x31 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x293 (= (_ bv0 2) ?x31)))
 (let (($x54 (= $x293 true)))
 (let (($x345 (= $x54 true)))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x205 (bvadd ?x177 input.dst.llvm-%m2)))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x395))))
 (let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 ?x439))))))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 $x344))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (=> $x309 $x302)))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 $x438))))))
 ))
 (let (($x187 (and $x261 $x457)))
 (let (($x57 (and $x187 $x233)))
 (let (($x331 (and $x57 $x295)))
 (let (($x56 (= $x331 true)))
 (let (($x260 (= $x56 true)))
 (let (($x79 (= $x260 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x9 (bvadd ?x177 input.dst.llvm-%m1)))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x429))))
 (let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 ?x352))))))))))
 ))
 (let (($x85 (and $x115 $x297)))
 (let (($x222 (= $x85 true)))
 (let (($x116 (= $x222 true)))
 (let (($x221 (= $x116 true)))
 (let (($x336 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x415 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x179 (and $x415 $x336)))
 (let (($x87 (= $x179 true)))
 (let (($x311 (= $x87 true)))
 (let (($x96 (= $x311 true)))
 (let ((?x240 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x424 (= (_ bv0 32) ?x240)))
 (let ((?x242 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x41 (= (_ bv0 32) ?x242)))
 (let ((?x29 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x14 $x189)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x360 (and $x321 $x13)))
 (let (($x192 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (and $x62 $x212)))
 (let (($x299 (not $x306)))
 (let (($x467 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x440 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x464 (and $x440 $x467)))
 (let (($x435 (and (not $x464) $x299)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x430 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x430 $x76)))
 (let (($x443 (not $x279)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and $x141 $x257)))
 (let (($x454 (and (not $x346) $x443)))
 (let (($x432 (and (and (and (and (and (and $x454 $x435) $x119) $x192) $x360) $x105) $x41)))
 (let (($x239 (and $x432 $x424)))
 (let (($x5 (= $x239 true)))
 (let (($x196 (= $x5 true)))
 (let (($x375 (= $x196 true)))
 (let ((?x232 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x215 (= (_ bv0 2) ?x232)))
 (let (($x200 (= $x215 true)))
 (let (($x307 (= $x200 true)))
 (let (($x21 (and $x307 $x375)))
 (let (($x102 (and $x21 $x96)))
 (let (($x191 (and $x102 $x221)))
 (let (($x88 (and $x191 $x79)))
 (let (($x12 (and $x88 $x345)))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 (bvuge ?x406 (_ bv1 32)))))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 (= ?x406 (_ bv0 32)))))))
 ))
 (let (($x442 (and $x394 $x208)))
 (let (($x408 (and $x442 $x214)))
 (let (($x223 (and $x408 $x447)))
 (let (($x398 (and $x223 $x12)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 (bvuge ?x46 (_ bv1 32)))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 (= ?x46 (_ bv0 32)))))))
 ))
 (let (($x417 (and $x275 $x457)))
 (let (($x247 (and $x417 $x99)))
 (let (($x351 (and $x247 $x224)))
 (let (($x225 (and $x351 $x398)))
 (let (($x219 (=> $x225 $x110)))
 (not $x219)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xed27f784)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xafb8460c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0f492010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0f492013)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xafb8460f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0f492010)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xafb8460c)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xed27f784) #x01
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!19 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!19 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!18 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000001
      (concat (k!15 (bvadd #xed27f787 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xed27f786 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xed27f785 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xed27f784 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000001
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x10314d08)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0956d684)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000030)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04cbcc90)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04cbcc93)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0956d687)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04cbcc90)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0956d684)
  (define-fun input.spec-%var-m2-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!18 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000030 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000030)
         #x00000000))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000c3) #x20
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!19 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000030)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x10314d0b (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x10314d0a (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x10314d09 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x10314d08 (bvmul #x00000004 x!0)))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x20000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!19 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x20000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000030) true
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_0 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x337 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x557 (bvadd ?x337 ?x327)))
 (let ((?x561 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv1 32))) (select input.dst.llvm-mem ?x557))))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv2 32))) ?x561))))
 (let ((?x435 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x430 (bvuge ?x408 (_ bv1 32))))
 (=> $x430 (= ?x435 ?x567)))))))))))
 ))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x84 (_ bv1 32))))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x430 (bvuge ?x408 (_ bv1 32))))
 (= $x430 $x356))))))
 ))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x466 (= false false)))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x408 (_ bv0 32))))
 (=> $x472 $x466)))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x84 (_ bv0 32))))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x408 (_ bv0 32))))
 (= $x472 $x283))))))
 ))
 (let (($x315 (and $x420 $x376)))
 (let (($x44 (and $x315 $x207)))
 (let (($x571 (and $x44 $x570)))
 (let (($x572 (= $x571 true)))
 (let (($x573 (= $x572 true)))
 (let ((?x7 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x101 (= (_ bv0 2) ?x7)))
 (let (($x462 (= $x101 true)))
 (let (($x368 (= $x462 true)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x337 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x252 (bvadd ?x337 input.dst.llvm-%m2)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x90))))
 (let ((?x435 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x430 (bvuge ?x408 (_ bv1 32))))
 (=> $x430 (= ?x435 ?x27))))))))))
 ))
 (let (($x195 (and $x44 $x156)))
 (let (($x389 (= $x195 true)))
 (let (($x364 (= $x389 true)))
 (let (($x428 (= $x364 true)))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x337 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x377 (bvadd ?x337 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x329))))
 (let ((?x191 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x160 (_ bv1 32))))
 (=> $x63 (= ?x191 ?x15))))))))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x84 (_ bv1 32))))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x160 (_ bv1 32))))
 (= $x63 $x356))))))
 ))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x466 (= false false)))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x160 (_ bv0 32))))
 (=> $x92 $x466)))))
 ))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x84 (_ bv0 32))))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x160 (_ bv0 32))))
 (= $x92 $x283))))))
 ))
 (let (($x378 (and $x363 $x387)))
 (let (($x370 (and $x378 $x213)))
 (let (($x318 (and $x370 $x246)))
 (let (($x400 (= $x318 true)))
 (let (($x381 (= $x400 true)))
 (let (($x422 (= $x381 true)))
 (let (($x404 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x409 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x419 (and $x409 $x404)))
 (let (($x81 (= $x419 true)))
 (let (($x300 (= $x81 true)))
 (let (($x49 (= $x300 true)))
 (let ((?x316 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x133 (= (_ bv0 32) ?x316)))
 (let ((?x380 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x320 (= (_ bv0 32) ?x380)))
 (let ((?x388 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x441 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x388)))
 (let ((?x473 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x473)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x245 (and $x110 $x284)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x436 (and $x23 $x245)))
 (let (($x159 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x345 (and $x293 $x54)))
 (let (($x12 (not $x345)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x79 $x88)))
 (let (($x225 (and (not $x31) $x12)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x236 $x198)))
 (let (($x331 (not $x295)))
 (let (($x395 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x359 (and $x155 $x395)))
 (let (($x260 (and (not $x359) $x331)))
 (let (($x256 (and (and (and (and (and (and $x260 $x225) $x180) $x159) $x436) $x441) $x320)))
 (let (($x303 (and $x256 $x133)))
 (let (($x285 (= $x303 true)))
 (let (($x374 (= $x285 true)))
 (let (($x51 (= $x374 true)))
 (let ((?x205 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x372 (= (_ bv0 2) ?x205)))
 (let (($x61 (= $x372 true)))
 (let (($x328 (= $x61 true)))
 (let (($x269 (and $x328 $x51)))
 (let (($x167 (and $x269 $x49)))
 (let (($x165 (and $x167 $x422)))
 (let (($x130 (and $x165 $x428)))
 (let (($x341 (and $x130 $x368)))
 (let (($x187 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x191 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x160 (_ bv1 32))))
 (=> $x63 (= ?x191 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x102 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x160 (_ bv1 32))))
 (= $x63 (bvuge ?x102 (_ bv1 32)))))))
 ))
 (let (($x438 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x102 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x160 (_ bv0 32))))
 (= $x92 (= ?x102 (_ bv0 32)))))))
 ))
 (let (($x344 (and $x438 $x387)))
 (let (($x429 (and $x344 $x25)))
 (let (($x403 (and $x429 $x187)))
 (let (($x268 (and $x403 $x341)))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x430 (bvuge ?x408 (_ bv1 32))))
 (=> $x430 (= ?x435 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x279 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x430 (bvuge ?x408 (_ bv1 32))))
 (= $x430 (bvuge ?x405 (_ bv1 32)))))))
 ))
 (let (($x397 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x408 (_ bv0 32))))
 (= $x472 (= ?x405 (_ bv0 32)))))))
 ))
 (let (($x314 (and $x397 $x376)))
 (let (($x443 (and $x314 $x279)))
 (let (($x17 (and $x443 $x119)))
 (let (($x173 (and $x17 $x268)))
 (let (($x574 (=> $x173 $x573)))
 (let (($x575 (not $x574)))
 (let (($x501 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x485 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x486 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x487 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x486)))
 (let (($x489 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x490 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x486)))
 (let (($x495 (or false (or false (and (and true (or $x490 $x489)) (or $x487 $x485))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x495) (= (select solver-mem_0 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_0 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x501) $x575)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_0 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x337 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x557 (bvadd ?x337 ?x327)))
 (let ((?x561 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv1 32))) (select input.dst.llvm-mem ?x557))))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv2 32))) ?x561))))
 (let ((?x435 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x430 (bvuge ?x408 (_ bv1 32))))
 (=> $x430 (= ?x435 ?x567)))))))))))
 ))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x84 (_ bv1 32))))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x430 (bvuge ?x408 (_ bv1 32))))
 (= $x430 $x356))))))
 ))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x466 (= false false)))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x408 (_ bv0 32))))
 (=> $x472 $x466)))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x84 (_ bv0 32))))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x408 (_ bv0 32))))
 (= $x472 $x283))))))
 ))
 (let (($x315 (and $x420 $x376)))
 (let (($x44 (and $x315 $x207)))
 (let (($x571 (and $x44 $x570)))
 (let (($x572 (= $x571 true)))
 (let (($x573 (= $x572 true)))
 (let ((?x7 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x101 (= (_ bv0 2) ?x7)))
 (let (($x462 (= $x101 true)))
 (let (($x368 (= $x462 true)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x337 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x252 (bvadd ?x337 input.dst.llvm-%m2)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x90))))
 (let ((?x435 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x430 (bvuge ?x408 (_ bv1 32))))
 (=> $x430 (= ?x435 ?x27))))))))))
 ))
 (let (($x195 (and $x44 $x156)))
 (let (($x389 (= $x195 true)))
 (let (($x364 (= $x389 true)))
 (let (($x428 (= $x364 true)))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x337 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x377 (bvadd ?x337 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x329))))
 (let ((?x191 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x160 (_ bv1 32))))
 (=> $x63 (= ?x191 ?x15))))))))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x84 (_ bv1 32))))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x160 (_ bv1 32))))
 (= $x63 $x356))))))
 ))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x466 (= false false)))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x160 (_ bv0 32))))
 (=> $x92 $x466)))))
 ))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x84 (_ bv0 32))))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x160 (_ bv0 32))))
 (= $x92 $x283))))))
 ))
 (let (($x378 (and $x363 $x387)))
 (let (($x370 (and $x378 $x213)))
 (let (($x318 (and $x370 $x246)))
 (let (($x400 (= $x318 true)))
 (let (($x381 (= $x400 true)))
 (let (($x422 (= $x381 true)))
 (let (($x404 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x409 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x419 (and $x409 $x404)))
 (let (($x81 (= $x419 true)))
 (let (($x300 (= $x81 true)))
 (let (($x49 (= $x300 true)))
 (let ((?x316 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x133 (= (_ bv0 32) ?x316)))
 (let ((?x380 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x320 (= (_ bv0 32) ?x380)))
 (let ((?x388 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x441 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x388)))
 (let ((?x473 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x473)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x245 (and $x110 $x284)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x436 (and $x23 $x245)))
 (let (($x159 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x345 (and $x293 $x54)))
 (let (($x12 (not $x345)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x79 $x88)))
 (let (($x225 (and (not $x31) $x12)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x236 $x198)))
 (let (($x331 (not $x295)))
 (let (($x395 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x359 (and $x155 $x395)))
 (let (($x260 (and (not $x359) $x331)))
 (let (($x256 (and (and (and (and (and (and $x260 $x225) $x180) $x159) $x436) $x441) $x320)))
 (let (($x303 (and $x256 $x133)))
 (let (($x285 (= $x303 true)))
 (let (($x374 (= $x285 true)))
 (let (($x51 (= $x374 true)))
 (let ((?x205 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x372 (= (_ bv0 2) ?x205)))
 (let (($x61 (= $x372 true)))
 (let (($x328 (= $x61 true)))
 (let (($x269 (and $x328 $x51)))
 (let (($x167 (and $x269 $x49)))
 (let (($x165 (and $x167 $x422)))
 (let (($x130 (and $x165 $x428)))
 (let (($x341 (and $x130 $x368)))
 (let (($x187 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x191 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x160 (_ bv1 32))))
 (=> $x63 (= ?x191 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x102 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x160 (_ bv1 32))))
 (= $x63 (bvuge ?x102 (_ bv1 32)))))))
 ))
 (let (($x438 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x102 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x160 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x160 (_ bv0 32))))
 (= $x92 (= ?x102 (_ bv0 32)))))))
 ))
 (let (($x344 (and $x438 $x387)))
 (let (($x429 (and $x344 $x25)))
 (let (($x403 (and $x429 $x187)))
 (let (($x268 (and $x403 $x341)))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x430 (bvuge ?x408 (_ bv1 32))))
 (=> $x430 (= ?x435 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x279 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x430 (bvuge ?x408 (_ bv1 32))))
 (= $x430 (bvuge ?x405 (_ bv1 32)))))))
 ))
 (let (($x397 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x408 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x408 (_ bv0 32))))
 (= $x472 (= ?x405 (_ bv0 32)))))))
 ))
 (let (($x314 (and $x397 $x376)))
 (let (($x443 (and $x314 $x279)))
 (let (($x17 (and $x443 $x119)))
 (let (($x173 (and $x17 $x268)))
 (let (($x574 (=> $x173 $x573)))
 (let (($x575 (not $x574)))
 (let (($x501 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x485 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x486 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x487 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x486)))
 (let (($x489 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x490 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x486)))
 (let (($x495 (or false (or false (and (and true (or $x490 $x489)) (or $x487 $x485))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x495) (= (select solver-mem_0 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_0 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x501) $x575)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!59))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x411c2454)
  (define-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!59))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x83101500)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!60))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x83101503)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x411c2457)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x83101500)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x411c2454)
  (define-fun k!63 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!65 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!65 (k!63 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!59!66 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x01000003) #x00
    (ite (= x!0 #x01000001) #x00
    (ite (= x!0 #x411c2454) #x00
    (ite (= x!0 #x83101501) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x83101500) #x00
    (ite (= x!0 #x411c2455) #x00
    (ite (= x!0 #x01000000) #x00
    (ite (= x!0 #x83101503) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x01000002) #x00
    (ite (= x!0 #x411c2457) #x00
    (ite (= x!0 #x00000c22) #x40
    (ite (= x!0 #x00000000) #x10
    (ite (= x!0 #x00000002) #x00
      #x02))))))))))))))))
  (define-fun k!61 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x83101501 x!0)
                    (ite (bvule #x83101503 x!0)
                         (ite (bvule #x83101504 x!0) #x83101504 #x83101503)
                         #x83101501)
                    #x83101500)))
    (let ((a!2 (ite (bvule #x411c2457 x!0)
                    (ite (bvule #x411c2458 x!0)
                         (ite (bvule #x83101500 x!0) a!1 #x411c2458)
                         #x411c2457)
                    #x411c2455)))
    (let ((a!3 (ite (bvule #x01000003 x!0)
                    (ite (bvule #x411c2454 x!0)
                         (ite (bvule #x411c2455 x!0) a!2 #x411c2454)
                         #x01000003)
                    #x01000002)))
    (let ((a!4 (ite (bvule #x01000000 x!0)
                    (ite (bvule #x01000001 x!0)
                         (ite (bvule #x01000002 x!0) a!3 #x01000001)
                         #x01000000)
                    #x00000c22)))
    (let ((a!5 (ite (bvule #x00000002 x!0)
                    (ite (bvule #x00000003 x!0)
                         (ite (bvule #x00000c22 x!0) a!4 #x00000003)
                         #x00000002)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!5 #x00000000)))))))
  (define-fun k!59 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!59!66 (k!61 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (concat (k!59 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!59 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!64 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!62 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!59))
              (= x!3 (_ as-array k!60))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x01000000
      #x83101501))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!64 (k!62 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (concat (k!59 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!59 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun k!60 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_1 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x536 (bvadd ?x201 ?x453)))
 (let ((?x540 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv1 32))) (select input.dst.llvm-mem ?x536))))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv2 32))) ?x540))))
 (let ((?x267 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x441 (_ bv1 32))))
 (=> $x300 (= ?x267 ?x553)))))))))))
 ))
 (let (($x434 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x194 (_ bv1 32))))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x441 (_ bv1 32))))
 (= $x300 $x186))))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x449 (= false false)))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x441 (_ bv0 32))))
 (=> $x262 $x449)))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x194 (_ bv0 32))))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x441 (_ bv0 32))))
 (= $x262 $x77))))))
 ))
 (let (($x78 (and $x209 $x133)))
 (let (($x189 (and $x78 $x434)))
 (let (($x547 (and $x189 $x546)))
 (let (($x545 (= $x547 true)))
 (let (($x548 (= $x545 true)))
 (let ((?x178 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x137 (= (_ bv0 2) ?x178)))
 (let (($x371 (= $x137 true)))
 (let (($x334 (= $x371 true)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x322 (bvadd ?x201 input.dst.llvm-%m2)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x322 (_ bv1 32))) (select input.dst.llvm-mem ?x322))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x322 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x322 (_ bv2 32))) ?x93))))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x223 (_ bv1 32))))
 (=> $x438 (= ?x187 ?x190))))))))))
 ))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x194 (_ bv1 32))))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x223 (_ bv1 32))))
 (= $x438 $x186))))))
 ))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x449 (= false false)))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x223 (_ bv0 32))))
 (=> $x376 $x449)))))
 ))
 (let (($x385 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x194 (_ bv0 32))))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x223 (_ bv0 32))))
 (= $x376 $x77))))))
 ))
 (let (($x89 (and $x385 $x443)))
 (let (($x277 (and $x89 $x231)))
 (let (($x384 (and $x277 $x386)))
 (let (($x6 (= $x384 true)))
 (let (($x36 (= $x6 true)))
 (let (($x139 (= $x36 true)))
 (let (($x103 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x144 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x421))))
 (let ((?x267 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x441 (_ bv1 32))))
 (=> $x300 (= ?x267 ?x276))))))))))
 ))
 (let (($x204 (and $x189 $x103)))
 (let (($x324 (= $x204 true)))
 (let (($x415 (= $x324 true)))
 (let (($x162 (= $x415 true)))
 (let (($x563 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x566 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x559 (and $x566 $x563)))
 (let (($x560 (= $x559 true)))
 (let (($x558 (= $x560 true)))
 (let (($x561 (= $x558 true)))
 (let ((?x428 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x130 (= (_ bv0 32) ?x428)))
 (let ((?x389 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x364 (= (_ bv0 32) ?x389)))
 (let ((?x156 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x156)))
 (let ((?x263 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x263)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x461 (and $x335 $x27)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x34 $x461)))
 (let (($x413 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x315 $x106)))
 (let (($x44 (not $x207)))
 (let (($x423 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x420 (and $x165 $x423)))
 (let (($x248 (and (not $x420) $x44)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x147 $x246)))
 (let (($x400 (not $x318)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x310 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x310 $x20)))
 (let (($x422 (and (not $x15) $x400)))
 (let (($x268 (and (and (and (and (and (and $x422 $x248) $x124) $x413) $x111) $x195) $x364)))
 (let (($x173 (and $x268 $x130)))
 (let (($x169 (= $x173 true)))
 (let (($x373 (= $x169 true)))
 (let (($x72 (= $x373 true)))
 (let ((?x349 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x287 (= (_ bv0 2) ?x349)))
 (let (($x280 (= $x287 true)))
 (let (($x463 (= $x280 true)))
 (let (($x270 (and $x463 $x72)))
 (let (($x564 (and $x270 $x561)))
 (let (($x456 (and $x564 $x162)))
 (let (($x471 (and $x456 $x139)))
 (let (($x333 (and $x471 $x334)))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x441 (_ bv1 32))))
 (=> $x300 (= ?x267 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x441 (_ bv1 32))))
 (= $x300 (bvuge ?x436 (_ bv1 32)))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x441 (_ bv0 32))))
 (= $x262 (= ?x436 (_ bv0 32)))))))
 ))
 (let (($x303 (and $x320 $x133)))
 (let (($x174 (and $x303 $x167)))
 (let (($x337 (and $x174 $x24)))
 (let (($x37 (and $x337 $x333)))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x223 (_ bv1 32))))
 (=> $x438 (= ?x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x455 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x223 (_ bv1 32))))
 (= $x438 (bvuge ?x455 (_ bv1 32)))))))
 ))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x455 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x223 (_ bv0 32))))
 (= $x376 (= ?x455 (_ bv0 32)))))))
 ))
 (let (($x435 (and $x430 $x443)))
 (let (($x344 (and $x435 $x387)))
 (let (($x205 (and $x344 $x57)))
 (let (($x5 (and $x205 $x37)))
 (let (($x551 (=> $x5 $x548)))
 (let (($x554 (not $x551)))
 (let (($x464 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x224 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x351 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x351)))
 (let (($x148 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x351)))
 (let (($x468 (or false (or false (and (and true (or $x70 $x148)) (or $x157 $x224))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x468) (= (select solver-mem_1 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_1 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x464) $x554)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_1 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x536 (bvadd ?x201 ?x453)))
 (let ((?x540 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv1 32))) (select input.dst.llvm-mem ?x536))))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv2 32))) ?x540))))
 (let ((?x267 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x441 (_ bv1 32))))
 (=> $x300 (= ?x267 ?x553)))))))))))
 ))
 (let (($x434 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x194 (_ bv1 32))))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x441 (_ bv1 32))))
 (= $x300 $x186))))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x449 (= false false)))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x441 (_ bv0 32))))
 (=> $x262 $x449)))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x194 (_ bv0 32))))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x441 (_ bv0 32))))
 (= $x262 $x77))))))
 ))
 (let (($x78 (and $x209 $x133)))
 (let (($x189 (and $x78 $x434)))
 (let (($x547 (and $x189 $x546)))
 (let (($x545 (= $x547 true)))
 (let (($x548 (= $x545 true)))
 (let ((?x178 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x137 (= (_ bv0 2) ?x178)))
 (let (($x371 (= $x137 true)))
 (let (($x334 (= $x371 true)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x322 (bvadd ?x201 input.dst.llvm-%m2)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x322 (_ bv1 32))) (select input.dst.llvm-mem ?x322))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x322 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x322 (_ bv2 32))) ?x93))))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x223 (_ bv1 32))))
 (=> $x438 (= ?x187 ?x190))))))))))
 ))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x194 (_ bv1 32))))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x223 (_ bv1 32))))
 (= $x438 $x186))))))
 ))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x449 (= false false)))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x223 (_ bv0 32))))
 (=> $x376 $x449)))))
 ))
 (let (($x385 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x194 (_ bv0 32))))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x223 (_ bv0 32))))
 (= $x376 $x77))))))
 ))
 (let (($x89 (and $x385 $x443)))
 (let (($x277 (and $x89 $x231)))
 (let (($x384 (and $x277 $x386)))
 (let (($x6 (= $x384 true)))
 (let (($x36 (= $x6 true)))
 (let (($x139 (= $x36 true)))
 (let (($x103 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x144 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x421))))
 (let ((?x267 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x441 (_ bv1 32))))
 (=> $x300 (= ?x267 ?x276))))))))))
 ))
 (let (($x204 (and $x189 $x103)))
 (let (($x324 (= $x204 true)))
 (let (($x415 (= $x324 true)))
 (let (($x162 (= $x415 true)))
 (let (($x563 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x566 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x559 (and $x566 $x563)))
 (let (($x560 (= $x559 true)))
 (let (($x558 (= $x560 true)))
 (let (($x561 (= $x558 true)))
 (let ((?x428 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x130 (= (_ bv0 32) ?x428)))
 (let ((?x389 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x364 (= (_ bv0 32) ?x389)))
 (let ((?x156 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x156)))
 (let ((?x263 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x263)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x461 (and $x335 $x27)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x34 $x461)))
 (let (($x413 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x315 $x106)))
 (let (($x44 (not $x207)))
 (let (($x423 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x420 (and $x165 $x423)))
 (let (($x248 (and (not $x420) $x44)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x147 $x246)))
 (let (($x400 (not $x318)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x310 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x310 $x20)))
 (let (($x422 (and (not $x15) $x400)))
 (let (($x268 (and (and (and (and (and (and $x422 $x248) $x124) $x413) $x111) $x195) $x364)))
 (let (($x173 (and $x268 $x130)))
 (let (($x169 (= $x173 true)))
 (let (($x373 (= $x169 true)))
 (let (($x72 (= $x373 true)))
 (let ((?x349 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x287 (= (_ bv0 2) ?x349)))
 (let (($x280 (= $x287 true)))
 (let (($x463 (= $x280 true)))
 (let (($x270 (and $x463 $x72)))
 (let (($x564 (and $x270 $x561)))
 (let (($x456 (and $x564 $x162)))
 (let (($x471 (and $x456 $x139)))
 (let (($x333 (and $x471 $x334)))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x441 (_ bv1 32))))
 (=> $x300 (= ?x267 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x441 (_ bv1 32))))
 (= $x300 (bvuge ?x436 (_ bv1 32)))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x441 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x441 (_ bv0 32))))
 (= $x262 (= ?x436 (_ bv0 32)))))))
 ))
 (let (($x303 (and $x320 $x133)))
 (let (($x174 (and $x303 $x167)))
 (let (($x337 (and $x174 $x24)))
 (let (($x37 (and $x337 $x333)))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x223 (_ bv1 32))))
 (=> $x438 (= ?x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x455 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x223 (_ bv1 32))))
 (= $x438 (bvuge ?x455 (_ bv1 32)))))))
 ))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x455 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x223 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x223 (_ bv0 32))))
 (= $x376 (= ?x455 (_ bv0 32)))))))
 ))
 (let (($x435 (and $x430 $x443)))
 (let (($x344 (and $x435 $x387)))
 (let (($x205 (and $x344 $x57)))
 (let (($x5 (and $x205 $x37)))
 (let (($x551 (=> $x5 $x548)))
 (let (($x554 (not $x551)))
 (let (($x464 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x224 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x351 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x351)))
 (let (($x148 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x351)))
 (let (($x468 (or false (or false (and (and true (or $x70 $x148)) (or $x157 $x224))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x468) (= (select solver-mem_1 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_1 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x464) $x554)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!80))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x21000400)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d0b1a14)
  (define-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!80))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!81))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d0b1a17)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x21000403)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d0b1a14)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x21000400)
  (define-fun k!82 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x21000401 x!0)
                    (ite (bvule #x21000403 x!0)
                         (ite (bvule #x21000404 x!0) #x21000404 #x21000403)
                         #x21000401)
                    #x21000400)))
    (let ((a!2 (ite (bvule #x0d0b1a18 x!0)
                    (ite (bvule #x10040004 x!0)
                         (ite (bvule #x21000400 x!0) a!1 #x10040004)
                         #x0d0b1a18)
                    #x0d0b1a17)))
    (let ((a!3 (ite (bvule #x0d0b1a14 x!0)
                    (ite (bvule #x0d0b1a15 x!0)
                         (ite (bvule #x0d0b1a17 x!0) a!2 #x0d0b1a15)
                         #x0d0b1a14)
                    #x04000003)))
    (let ((a!4 (ite (bvule #x04000001 x!0)
                    (ite (bvule #x04000002 x!0)
                         (ite (bvule #x04000003 x!0) a!3 #x04000002)
                         #x04000001)
                    #x04000000)))
    (let ((a!5 (ite (bvule #x00000002 x!0)
                    (ite (bvule #x00000003 x!0)
                         (ite (bvule #x04000000 x!0) a!4 #x00000003)
                         #x00000002)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!5 #x00000000)))))))
  (define-fun k!80!85 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000000) #x00
    (ite (= x!0 #x21000400) #x00
    (ite (= x!0 #x0d0b1a15) #x00
    (ite (= x!0 #x21000404) #x40
    (ite (= x!0 #x00000001) #x40
    (ite (= x!0 #x0d0b1a14) #x00
    (ite (= x!0 #x21000401) #x00
    (ite (= x!0 #x0d093452) #x10
    (ite (= x!0 #x04000002) #x00
    (ite (= x!0 #x0d0b1a18) #x10
    (ite (= x!0 #x0d0b1a17) #x00
    (ite (= x!0 #x10040004) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x04000001) #x00
    (ite (= x!0 #x04000003) #x00
    (ite (= x!0 #x21000403) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000002) #x04
      #x02)))))))))))))))))))
  (define-fun k!80 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!80!85 (k!82 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!86 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!84 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!86 (k!84 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (concat (k!80 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!80 (bvmul #x00000004 x!0)))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!80))
              (= x!3 (_ as-array k!81))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x04000000
      #x00000010))
  (define-fun k!83 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!87 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!87 (k!83 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (concat (k!80 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!80 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun k!81 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x14)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x54 (= false true)))
 (let (($x345 (= $x54 true)))
 (let ((?x32 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x232 (= (_ bv0 32) ?x32)))
 (let ((?x365 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x465 (= (_ bv0 32) ?x365)))
 (let ((?x63 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x426 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x8 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x330 $x135)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x401 (and $x64 $x96)))
 (let (($x140 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x576 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x501 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x501 $x576)))
 (let (($x76 (not $x132)))
 (let (($x437 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x500 (and $x253 $x437)))
 (let (($x149 (and (not $x500) $x76)))
 (let (($x417 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x302 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x302 $x417)))
 (let (($x69 (not $x19)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x249 $x275)))
 (let (($x203 (and (not $x11) $x69)))
 (let (($x228 (and (and (and (and (and (and $x203 $x149) $x119) $x140) $x401) $x426) $x465)))
 (let (($x406 (and $x228 $x232)))
 (let (($x447 (= $x406 true)))
 (let (($x200 (= $x447 true)))
 (let (($x429 (= $x200 true)))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x250 (bvadd ?x418 input.dst.llvm-%m2)))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x439))))
 (let ((?x24 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x279 (_ bv1 32))))
 (=> $x320 (= ?x24 ?x286))))))))))
 ))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x551 (_ bv1 32))))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x279 (_ bv1 32))))
 (= $x320 $x31))))))
 ))
 (let (($x344 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x220 (= false false)))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (=> $x443 $x220)))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (= $x443 $x554))))))
 ))
 (let (($x48 (and $x269 $x344)))
 (let (($x264 (and $x48 $x343)))
 (let (($x171 (and $x264 $x60)))
 (let (($x172 (= $x171 true)))
 (let (($x128 (= $x172 true)))
 (let (($x297 (= $x128 true)))
 (let ((?x247 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x26 (= (_ bv0 2) ?x247)))
 (let (($x166 (= $x26 true)))
 (let (($x427 (= $x166 true)))
 (let (($x10 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x278 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x41 (and $x278 $x10)))
 (let (($x432 (= $x41 true)))
 (let (($x193 (= $x432 true)))
 (let (($x53 (= $x193 true)))
 (let ((?x98 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x396 (= (_ bv0 2) ?x98)))
 (let (($x163 (= $x396 true)))
 (let (($x242 (= $x163 true)))
 (let (($x52 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x383 (bvadd ?x418 input.dst.llvm-%m1)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem ?x383))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv2 32))) ?x95))))
 (let ((?x164 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x195 (_ bv1 32))))
 (=> $x558 (= ?x164 ?x161))))))))))
 ))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x551 (_ bv1 32))))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x195 (_ bv1 32))))
 (= $x558 $x31))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x220 (= false false)))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (= ?x195 (_ bv0 32))))
 (=> $x341 $x220)))))
 ))
 (let (($x442 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (= ?x195 (_ bv0 32))))
 (= $x341 $x554))))))
 ))
 (let (($x372 (and $x442 $x130)))
 (let (($x485 (and $x372 $x293)))
 (let (($x120 (and $x485 $x52)))
 (let (($x407 (= $x120 true)))
 (let (($x86 (= $x407 true)))
 (let (($x352 (= $x86 true)))
 (let (($x309 (and $x352 $x242)))
 (let (($x99 (and $x309 $x53)))
 (let (($x104 (and $x99 $x427)))
 (let (($x272 (and $x104 $x297)))
 (let (($x307 (and $x272 $x429)))
 (let (($x575 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x164 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x195 (_ bv1 32))))
 (=> $x558 (= ?x164 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x111 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x195 (_ bv1 32))))
 (= $x558 (bvuge ?x111 (_ bv1 32)))))))
 ))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x111 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (= ?x195 (_ bv0 32))))
 (= $x341 (= ?x111 (_ bv0 32)))))))
 ))
 (let (($x173 (and $x364 $x130)))
 (let (($x266 (and $x173 $x564)))
 (let (($x201 (and $x266 $x575)))
 (let (($x319 (and $x201 $x307)))
 (let (($x183 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x279 (_ bv1 32))))
 (=> $x320 (= ?x24 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x279 (_ bv1 32))))
 (= $x320 (bvuge ?x314 (_ bv1 32)))))))
 ))
 (let (($x438 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (= $x443 (= ?x314 (_ bv0 32)))))))
 ))
 (let (($x187 (and $x438 $x344)))
 (let (($x303 (and $x187 $x133)))
 (let (($x349 (and $x303 $x183)))
 (let (($x225 (and $x349 $x319)))
 (let (($x12 (=> $x225 $x345)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x54 (= false true)))
 (let (($x345 (= $x54 true)))
 (let ((?x32 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x232 (= (_ bv0 32) ?x32)))
 (let ((?x365 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x465 (= (_ bv0 32) ?x365)))
 (let ((?x63 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x426 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x8 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x330 $x135)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x401 (and $x64 $x96)))
 (let (($x140 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x576 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x501 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x501 $x576)))
 (let (($x76 (not $x132)))
 (let (($x437 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x500 (and $x253 $x437)))
 (let (($x149 (and (not $x500) $x76)))
 (let (($x417 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x302 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x302 $x417)))
 (let (($x69 (not $x19)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x249 $x275)))
 (let (($x203 (and (not $x11) $x69)))
 (let (($x228 (and (and (and (and (and (and $x203 $x149) $x119) $x140) $x401) $x426) $x465)))
 (let (($x406 (and $x228 $x232)))
 (let (($x447 (= $x406 true)))
 (let (($x200 (= $x447 true)))
 (let (($x429 (= $x200 true)))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x250 (bvadd ?x418 input.dst.llvm-%m2)))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x439))))
 (let ((?x24 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x279 (_ bv1 32))))
 (=> $x320 (= ?x24 ?x286))))))))))
 ))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x551 (_ bv1 32))))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x279 (_ bv1 32))))
 (= $x320 $x31))))))
 ))
 (let (($x344 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x220 (= false false)))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (=> $x443 $x220)))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (= $x443 $x554))))))
 ))
 (let (($x48 (and $x269 $x344)))
 (let (($x264 (and $x48 $x343)))
 (let (($x171 (and $x264 $x60)))
 (let (($x172 (= $x171 true)))
 (let (($x128 (= $x172 true)))
 (let (($x297 (= $x128 true)))
 (let ((?x247 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x26 (= (_ bv0 2) ?x247)))
 (let (($x166 (= $x26 true)))
 (let (($x427 (= $x166 true)))
 (let (($x10 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x278 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x41 (and $x278 $x10)))
 (let (($x432 (= $x41 true)))
 (let (($x193 (= $x432 true)))
 (let (($x53 (= $x193 true)))
 (let ((?x98 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x396 (= (_ bv0 2) ?x98)))
 (let (($x163 (= $x396 true)))
 (let (($x242 (= $x163 true)))
 (let (($x52 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x383 (bvadd ?x418 input.dst.llvm-%m1)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem ?x383))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv2 32))) ?x95))))
 (let ((?x164 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x195 (_ bv1 32))))
 (=> $x558 (= ?x164 ?x161))))))))))
 ))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x551 (_ bv1 32))))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x195 (_ bv1 32))))
 (= $x558 $x31))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x220 (= false false)))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (= ?x195 (_ bv0 32))))
 (=> $x341 $x220)))))
 ))
 (let (($x442 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (= ?x195 (_ bv0 32))))
 (= $x341 $x554))))))
 ))
 (let (($x372 (and $x442 $x130)))
 (let (($x485 (and $x372 $x293)))
 (let (($x120 (and $x485 $x52)))
 (let (($x407 (= $x120 true)))
 (let (($x86 (= $x407 true)))
 (let (($x352 (= $x86 true)))
 (let (($x309 (and $x352 $x242)))
 (let (($x99 (and $x309 $x53)))
 (let (($x104 (and $x99 $x427)))
 (let (($x272 (and $x104 $x297)))
 (let (($x307 (and $x272 $x429)))
 (let (($x575 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x164 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x195 (_ bv1 32))))
 (=> $x558 (= ?x164 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x111 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x195 (_ bv1 32))))
 (= $x558 (bvuge ?x111 (_ bv1 32)))))))
 ))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x111 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x195 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (= ?x195 (_ bv0 32))))
 (= $x341 (= ?x111 (_ bv0 32)))))))
 ))
 (let (($x173 (and $x364 $x130)))
 (let (($x266 (and $x173 $x564)))
 (let (($x201 (and $x266 $x575)))
 (let (($x319 (and $x201 $x307)))
 (let (($x183 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x279 (_ bv1 32))))
 (=> $x320 (= ?x24 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x279 (_ bv1 32))))
 (= $x320 (bvuge ?x314 (_ bv1 32)))))))
 ))
 (let (($x438 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (= $x443 (= ?x314 (_ bv0 32)))))))
 ))
 (let (($x187 (and $x438 $x344)))
 (let (($x303 (and $x187 $x133)))
 (let (($x349 (and $x303 $x183)))
 (let (($x225 (and $x349 $x319)))
 (let (($x12 (=> $x225 $x345)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd5061dc4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbc572dd0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbc572dd3)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd5061dc7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbc572dd0)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd5061dc4)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00018080)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xef028004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xef028007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00018083)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xef028004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00018080)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x643 (= true false)))
 (let (($x644 (= $x643 true)))
 (let ((?x628 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x629 (= (_ bv0 32) ?x628)))
 (let ((?x626 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x627 (= (_ bv0 32) ?x626)))
 (let ((?x624 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x625 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x624)))
 (let ((?x620 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x621 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x620)))
 (let (($x619 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (and $x619 $x621)))
 (let (($x618 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x623 (and $x618 $x622)))
 (let (($x617 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x615 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x609 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x608 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x610 (and $x608 $x609)))
 (let (($x611 (not $x610)))
 (let (($x606 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x605 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x607 (and $x605 $x606)))
 (let (($x613 (and (not $x607) $x611)))
 (let (($x600 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x601 (and $x599 $x600)))
 (let (($x602 (not $x601)))
 (let (($x596 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x594 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x597 (and $x594 $x596)))
 (let (($x604 (and (not $x597) $x602)))
 (let (($x635 (and (and (and (and (and (and $x604 $x613) $x615) $x617) $x623) $x625) $x627)))
 (let (($x636 (and $x635 $x629)))
 (let (($x637 (= $x636 true)))
 (let (($x638 (= $x637 true)))
 (let (($x639 (= $x638 true)))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x436 (bvadd ?x93 input.dst.llvm-%m2)))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x436 (_ bv1 32))) (select input.dst.llvm-mem ?x436))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x436 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x436 (_ bv2 32))) ?x579))))
 (let ((?x95 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x266 (_ bv1 32))))
 (=> $x158 (= ?x95 ?x583))))))))))
 ))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x433 (_ bv1 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x266 (_ bv1 32))))
 (= $x158 $x103))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x189 (= false false)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x266 (_ bv0 32))))
 (=> $x164 $x189)))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x433 (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x266 (_ bv0 32))))
 (= $x164 $x369))))))
 ))
 (let (($x565 (and $x557 $x545)))
 (let (($x468 (and $x565 $x154)))
 (let (($x587 (and $x468 $x586)))
 (let (($x588 (= $x587 true)))
 (let (($x589 (= $x588 true)))
 (let (($x590 (= $x589 true)))
 (let ((?x221 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x114 (= (_ bv0 2) ?x221)))
 (let (($x227 (= $x114 true)))
 (let (($x9 (= $x227 true)))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x93 input.dst.llvm-%m1)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x136))))
 (let ((?x576 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x492 (_ bv1 32))))
 (=> $x11 (= ?x576 ?x292))))))))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x433 (_ bv1 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x492 (_ bv1 32))))
 (= $x11 $x103))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x189 (= false false)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x326 (= ?x492 (_ bv0 32))))
 (=> $x326 $x189)))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x433 (_ bv0 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x326 (= ?x492 (_ bv0 32))))
 (= $x326 $x369))))))
 ))
 (let (($x84 (and $x218 $x286)))
 (let (($x481 (and $x84 $x378)))
 (let (($x92 (and $x481 $x160)))
 (let (($x102 (= $x92 true)))
 (let (($x117 (= $x102 true)))
 (let (($x460 (= $x117 true)))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x93 input.dst.llvm-%m1)))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x294))))
 (let ((?x318 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv2 32))) ?x15)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv3 32))) ?x318)))
 (let ((?x576 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x492 (_ bv1 32))))
 (=> $x11 (= ?x576 ?x165)))))))))))
 ))
 (let (($x484 (and $x481 $x483)))
 (let (($x410 (= $x484 true)))
 (let (($x482 (= $x410 true)))
 (let (($x214 (= $x482 true)))
 (let (($x473 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x436 (bvadd ?x93 input.dst.llvm-%m2)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x436 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x436))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x436 (_ bv2 32))) ?x267)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x436 (_ bv3 32))) ?x129)))
 (let ((?x95 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x266 (_ bv1 32))))
 (=> $x158 (= ?x95 ?x170)))))))))))
 ))
 (let (($x284 (and $x468 $x473)))
 (let (($x67 (= $x284 true)))
 (let (($x357 (= $x67 true)))
 (let (($x399 (= $x357 true)))
 (let (($x393 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x93 input.dst.llvm-%m1)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x136))))
 (let ((?x501 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x487 (_ bv1 32))))
 (=> $x275 (= ?x501 ?x292))))))))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x433 (_ bv1 32))))
 (let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x487 (_ bv1 32))))
 (= $x275 $x103))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x189 (= false false)))
 (let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (= ?x487 (_ bv0 32))))
 (=> $x358 $x189)))))
 ))
 (let (($x131 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x433 (_ bv0 32))))
 (let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (= ?x487 (_ bv0 32))))
 (= $x358 $x369))))))
 ))
 (let (($x66 (and $x131 $x121)))
 (let (($x456 (and $x66 $x204)))
 (let (($x234 (and $x456 $x393)))
 (let (($x127 (= $x234 true)))
 (let (($x458 (= $x127 true)))
 (let (($x241 (= $x458 true)))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x93 input.dst.llvm-%m1)))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x294))))
 (let ((?x318 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv2 32))) ?x15)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv3 32))) ?x318)))
 (let ((?x501 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x487 (_ bv1 32))))
 (=> $x275 (= ?x501 ?x165)))))))))))
 ))
 (let (($x36 (and $x456 $x139)))
 (let (($x471 (= $x36 true)))
 (let (($x178 (= $x471 true)))
 (let (($x371 (= $x178 true)))
 (let (($x332 (and $x371 $x241)))
 (let (($x409 (and $x332 $x399)))
 (let (($x408 (and $x409 $x214)))
 (let (($x25 (and $x408 $x460)))
 (let (($x33 (and $x25 $x9)))
 (let (($x591 (and $x33 $x590)))
 (let (($x640 (and $x591 $x639)))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x501 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x576 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x492 (_ bv1 32))))
 (=> $x11 (= ?x576 ?x501)))))))
 ))
 (let (($x412 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x487 (_ bv1 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x492 (_ bv1 32))))
 (= $x11 $x275))))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (= ?x487 (_ bv0 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x326 (= ?x492 (_ bv0 32))))
 (= $x326 $x358))))))
 ))
 (let (($x202 (and $x489 $x286)))
 (let (($x302 (and $x202 $x412)))
 (let (($x215 (and $x302 $x149)))
 (let (($x641 (and $x215 $x640)))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x95 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x266 (_ bv1 32))))
 (=> $x158 (= ?x95 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x266 (_ bv1 32))))
 (= $x158 (bvuge ?x560 (_ bv1 32)))))))
 ))
 (let (($x434 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x266 (_ bv0 32))))
 (= $x164 (= ?x560 (_ bv0 32)))))))
 ))
 (let (($x43 (and $x434 $x545)))
 (let (($x383 (and $x43 $x94)))
 (let (($x258 (and $x383 $x254)))
 (let (($x642 (and $x258 $x641)))
 (let (($x645 (=> $x642 $x644)))
 (not $x645))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x643 (= true false)))
 (let (($x644 (= $x643 true)))
 (let ((?x628 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x629 (= (_ bv0 32) ?x628)))
 (let ((?x626 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x627 (= (_ bv0 32) ?x626)))
 (let ((?x624 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x625 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x624)))
 (let ((?x620 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x621 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x620)))
 (let (($x619 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (and $x619 $x621)))
 (let (($x618 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x623 (and $x618 $x622)))
 (let (($x617 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x615 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x609 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x608 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x610 (and $x608 $x609)))
 (let (($x611 (not $x610)))
 (let (($x606 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x605 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x607 (and $x605 $x606)))
 (let (($x613 (and (not $x607) $x611)))
 (let (($x600 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x601 (and $x599 $x600)))
 (let (($x602 (not $x601)))
 (let (($x596 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x594 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x597 (and $x594 $x596)))
 (let (($x604 (and (not $x597) $x602)))
 (let (($x635 (and (and (and (and (and (and $x604 $x613) $x615) $x617) $x623) $x625) $x627)))
 (let (($x636 (and $x635 $x629)))
 (let (($x637 (= $x636 true)))
 (let (($x638 (= $x637 true)))
 (let (($x639 (= $x638 true)))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x436 (bvadd ?x93 input.dst.llvm-%m2)))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x436 (_ bv1 32))) (select input.dst.llvm-mem ?x436))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x436 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x436 (_ bv2 32))) ?x579))))
 (let ((?x95 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x266 (_ bv1 32))))
 (=> $x158 (= ?x95 ?x583))))))))))
 ))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x433 (_ bv1 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x266 (_ bv1 32))))
 (= $x158 $x103))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x189 (= false false)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x266 (_ bv0 32))))
 (=> $x164 $x189)))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x433 (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x266 (_ bv0 32))))
 (= $x164 $x369))))))
 ))
 (let (($x565 (and $x557 $x545)))
 (let (($x468 (and $x565 $x154)))
 (let (($x587 (and $x468 $x586)))
 (let (($x588 (= $x587 true)))
 (let (($x589 (= $x588 true)))
 (let (($x590 (= $x589 true)))
 (let ((?x221 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x114 (= (_ bv0 2) ?x221)))
 (let (($x227 (= $x114 true)))
 (let (($x9 (= $x227 true)))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x93 input.dst.llvm-%m1)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x136))))
 (let ((?x576 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x492 (_ bv1 32))))
 (=> $x11 (= ?x576 ?x292))))))))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x433 (_ bv1 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x492 (_ bv1 32))))
 (= $x11 $x103))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x189 (= false false)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x326 (= ?x492 (_ bv0 32))))
 (=> $x326 $x189)))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x433 (_ bv0 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x326 (= ?x492 (_ bv0 32))))
 (= $x326 $x369))))))
 ))
 (let (($x84 (and $x218 $x286)))
 (let (($x481 (and $x84 $x378)))
 (let (($x92 (and $x481 $x160)))
 (let (($x102 (= $x92 true)))
 (let (($x117 (= $x102 true)))
 (let (($x460 (= $x117 true)))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x93 input.dst.llvm-%m1)))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x294))))
 (let ((?x318 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv2 32))) ?x15)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv3 32))) ?x318)))
 (let ((?x576 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x492 (_ bv1 32))))
 (=> $x11 (= ?x576 ?x165)))))))))))
 ))
 (let (($x484 (and $x481 $x483)))
 (let (($x410 (= $x484 true)))
 (let (($x482 (= $x410 true)))
 (let (($x214 (= $x482 true)))
 (let (($x473 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x436 (bvadd ?x93 input.dst.llvm-%m2)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x436 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x436))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x436 (_ bv2 32))) ?x267)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x436 (_ bv3 32))) ?x129)))
 (let ((?x95 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x266 (_ bv1 32))))
 (=> $x158 (= ?x95 ?x170)))))))))))
 ))
 (let (($x284 (and $x468 $x473)))
 (let (($x67 (= $x284 true)))
 (let (($x357 (= $x67 true)))
 (let (($x399 (= $x357 true)))
 (let (($x393 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x93 input.dst.llvm-%m1)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x136))))
 (let ((?x501 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x487 (_ bv1 32))))
 (=> $x275 (= ?x501 ?x292))))))))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x433 (_ bv1 32))))
 (let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x487 (_ bv1 32))))
 (= $x275 $x103))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x189 (= false false)))
 (let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (= ?x487 (_ bv0 32))))
 (=> $x358 $x189)))))
 ))
 (let (($x131 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x433 (_ bv0 32))))
 (let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (= ?x487 (_ bv0 32))))
 (= $x358 $x369))))))
 ))
 (let (($x66 (and $x131 $x121)))
 (let (($x456 (and $x66 $x204)))
 (let (($x234 (and $x456 $x393)))
 (let (($x127 (= $x234 true)))
 (let (($x458 (= $x127 true)))
 (let (($x241 (= $x458 true)))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x93 input.dst.llvm-%m1)))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x294))))
 (let ((?x318 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv2 32))) ?x15)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv3 32))) ?x318)))
 (let ((?x501 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x487 (_ bv1 32))))
 (=> $x275 (= ?x501 ?x165)))))))))))
 ))
 (let (($x36 (and $x456 $x139)))
 (let (($x471 (= $x36 true)))
 (let (($x178 (= $x471 true)))
 (let (($x371 (= $x178 true)))
 (let (($x332 (and $x371 $x241)))
 (let (($x409 (and $x332 $x399)))
 (let (($x408 (and $x409 $x214)))
 (let (($x25 (and $x408 $x460)))
 (let (($x33 (and $x25 $x9)))
 (let (($x591 (and $x33 $x590)))
 (let (($x640 (and $x591 $x639)))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x501 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x576 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x492 (_ bv1 32))))
 (=> $x11 (= ?x576 ?x501)))))))
 ))
 (let (($x412 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x487 (_ bv1 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x492 (_ bv1 32))))
 (= $x11 $x275))))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x487 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (= ?x487 (_ bv0 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x326 (= ?x492 (_ bv0 32))))
 (= $x326 $x358))))))
 ))
 (let (($x202 (and $x489 $x286)))
 (let (($x302 (and $x202 $x412)))
 (let (($x215 (and $x302 $x149)))
 (let (($x641 (and $x215 $x640)))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x95 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x266 (_ bv1 32))))
 (=> $x158 (= ?x95 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x266 (_ bv1 32))))
 (= $x158 (bvuge ?x560 (_ bv1 32)))))))
 ))
 (let (($x434 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x266 (_ bv0 32))))
 (= $x164 (= ?x560 (_ bv0 32)))))))
 ))
 (let (($x43 (and $x434 $x545)))
 (let (($x383 (and $x43 $x94)))
 (let (($x258 (and $x383 $x254)))
 (let (($x642 (and $x258 $x641)))
 (let (($x645 (=> $x642 $x644)))
 (not $x645))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!38))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000003c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x8115107e)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!39))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40040103)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000003f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000003c)
  (define-fun input.spec-%var-m1-1.0.1!44 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun k!41 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m2-1.0.1!43 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!43 (k!41 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x40040100) false
    (ite (= x!0 #x0000003c) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!39 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!38 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!39 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!39 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!40 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!44 (k!40 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x81151081 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x81151080 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x8115107f (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x8115107e (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!39 (bvadd #x81151081 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x81151080 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x8115107f (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x8115107e (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!42 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!42 (k!40 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x81151081 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x81151080 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x8115107f (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x8115107e (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x93d62328)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x96ee4ffe)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x44b4264b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x93d6232b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x93d62328)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x96ee5001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee5000 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee4fff (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee4ffe (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x96ee5001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x96ee5000 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x96ee4fff (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x96ee4ffe (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x96ee5001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee5000 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee4fff (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee4ffe (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x653 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x660 (=> $x653 true)))
 (let (($x661 (= $x660 true)))
 (let (($x662 (= $x661 true)))
 (let (($x654 (= $x653 true)))
 (let (($x655 (= $x654 true)))
 (let (($x656 (= $x655 true)))
 (let ((?x574 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x82 (= (_ bv0 32) ?x574)))
 (let ((?x223 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x459 (= (_ bv0 32) ?x223)))
 (let ((?x205 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x466 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x205)))
 (let ((?x425 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x424 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x425)))
 (let (($x313 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x572 (and $x313 $x424)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x362 (and $x194 $x572)))
 (let (($x118 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x559 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x124 $x216)))
 (let (($x335 (not $x101)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (and $x271 $x207)))
 (let (($x263 (and (not $x38) $x335)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x7 $x248)))
 (let (($x174 (not $x106)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x317 $x91)))
 (let (($x348 (and (not $x13) $x174)))
 (let (($x495 (and (and (and (and (and (and $x348 $x263) $x559) $x118) $x362) $x466) $x459)))
 (let (($x499 (and $x495 $x82)))
 (let (($x647 (= $x499 true)))
 (let (($x648 (= $x647 true)))
 (let (($x649 (= $x648 true)))
 (let (($x184 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x41 (bvadd ?x390 input.dst.llvm-%m2)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x35))))
 (let ((?x20 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x302 (_ bv1 32))))
 (=> $x456 (= ?x20 ?x257))))))))))
 ))
 (let (($x527 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x407 (_ bv1 32))))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x302 (_ bv1 32))))
 (= $x456 $x290))))))
 ))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x76 (= false false)))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (= ?x302 (_ bv0 32))))
 (=> $x576 $x76)))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x407 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (= ?x302 (_ bv0 32))))
 (= $x576 $x86))))))
 ))
 (let (($x516 (and $x514 $x79)))
 (let (($x528 (and $x516 $x527)))
 (let (($x50 (and $x528 $x184)))
 (let (($x206 (= $x50 true)))
 (let (($x30 (= $x206 true)))
 (let (($x470 (= $x30 true)))
 (let ((?x243 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x40 (= (_ bv0 2) ?x243)))
 (let (($x176 (= $x40 true)))
 (let (($x181 (= $x176 true)))
 (let (($x285 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x256 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x555 (and $x256 $x285)))
 (let (($x261 (= $x555 true)))
 (let (($x403 (= $x261 true)))
 (let (($x57 (= $x403 true)))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x126 (bvadd ?x390 input.dst.llvm-%m1)))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x567))))
 (let ((?x25 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x379 (_ bv1 32))))
 (=> $x483 (= ?x25 ?x338))))))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x407 (_ bv1 32))))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x379 (_ bv1 32))))
 (= $x483 $x290))))))
 ))
 (let (($x473 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x76 (= false false)))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x379 (_ bv0 32))))
 (=> $x267 $x76)))))
 ))
 (let (($x500 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x407 (_ bv0 32))))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x379 (_ bv0 32))))
 (= $x267 $x86))))))
 ))
 (let (($x299 (and $x500 $x473)))
 (let (($x337 (and $x299 $x370)))
 (let (($x255 (and $x337 $x485)))
 (let (($x324 (= $x255 true)))
 (let (($x452 (= $x324 true)))
 (let (($x108 (= $x452 true)))
 (let (($x341 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x126 (bvadd ?x390 input.dst.llvm-%m1)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x126))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv2 32))) ?x62)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv3 32))) ?x212)))
 (let ((?x25 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x379 (_ bv1 32))))
 (=> $x483 (= ?x25 ?x116)))))))))))
 ))
 (let (($x389 (and $x337 $x341)))
 (let (($x364 (= $x389 true)))
 (let (($x428 (= $x364 true)))
 (let (($x130 (= $x428 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x41 (bvadd ?x390 input.dst.llvm-%m2)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x41))))
 (let ((?x427 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv2 32))) ?x247)))
 (let ((?x343 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv3 32))) ?x427)))
 (let ((?x20 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x302 (_ bv1 32))))
 (=> $x456 (= ?x20 ?x343)))))))))))
 ))
 (let (($x272 (and $x528 $x297)))
 (let (($x457 (= $x272 true)))
 (let (($x249 (= $x457 true)))
 (let (($x107 (= $x249 true)))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x126 (bvadd ?x390 input.dst.llvm-%m1)))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x567))))
 (let ((?x460 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x213 (_ bv1 32))))
 (=> $x301 (= ?x460 ?x338))))))))))
 ))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x407 (_ bv1 32))))
 (let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x213 (_ bv1 32))))
 (= $x301 $x290))))))
 ))
 (let (($x278 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x76 (= false false)))
 (let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x213 (_ bv0 32))))
 (=> $x49 $x76)))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x407 (_ bv0 32))))
 (let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x213 (_ bv0 32))))
 (= $x49 $x86))))))
 ))
 (let (($x238 (and $x435 $x278)))
 (let (($x135 (and $x238 $x455)))
 (let (($x417 (and $x135 $x73)))
 (let (($x19 (= $x417 true)))
 (let (($x77 (= $x19 true)))
 (let (($x28 (= $x77 true)))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x126 (bvadd ?x390 input.dst.llvm-%m1)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x126))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv2 32))) ?x62)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv3 32))) ?x212)))
 (let ((?x460 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x213 (_ bv1 32))))
 (=> $x301 (= ?x460 ?x116)))))))))))
 ))
 (let (($x401 (and $x135 $x113)))
 (let (($x406 (= $x401 true)))
 (let (($x5 (= $x406 true)))
 (let (($x465 (= $x5 true)))
 (let (($x125 (and $x465 $x28)))
 (let (($x69 (and $x125 $x107)))
 (let (($x556 (and $x69 $x130)))
 (let (($x296 (and $x556 $x108)))
 (let (($x233 (and $x296 $x57)))
 (let (($x100 (and $x233 $x181)))
 (let (($x210 (and $x100 $x470)))
 (let (($x650 (and $x210 $x649)))
 (let (($x657 (and $x650 $x656)))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x460 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x25 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x379 (_ bv1 32))))
 (=> $x483 (= ?x25 ?x460)))))))
 ))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x213 (_ bv1 32))))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x379 (_ bv1 32))))
 (= $x483 $x301))))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x213 (_ bv0 32))))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x379 (_ bv0 32))))
 (= $x267 $x49))))))
 ))
 (let (($x284 (and $x170 $x473)))
 (let (($x482 (and $x284 $x410)))
 (let (($x227 (and $x482 $x114)))
 (let (($x658 (and $x227 $x657)))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x20 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x302 (_ bv1 32))))
 (=> $x456 (= ?x20 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x302 (_ bv1 32))))
 (= $x456 (bvuge ?x275 (_ bv1 32)))))))
 ))
 (let (($x132 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (= ?x302 (_ bv0 32))))
 (= $x576 (= ?x275 (_ bv0 32)))))))
 ))
 (let (($x80 (and $x132 $x79)))
 (let (($x93 (and $x80 $x8)))
 (let (($x165 (and $x93 $x318)))
 (let (($x659 (and $x165 $x658)))
 (let (($x663 (=> $x659 $x662)))
 (not $x663)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x653 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x660 (=> $x653 true)))
 (let (($x661 (= $x660 true)))
 (let (($x662 (= $x661 true)))
 (let (($x654 (= $x653 true)))
 (let (($x655 (= $x654 true)))
 (let (($x656 (= $x655 true)))
 (let ((?x574 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x82 (= (_ bv0 32) ?x574)))
 (let ((?x223 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x459 (= (_ bv0 32) ?x223)))
 (let ((?x205 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x466 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x205)))
 (let ((?x425 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x424 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x425)))
 (let (($x313 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x572 (and $x313 $x424)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x362 (and $x194 $x572)))
 (let (($x118 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x559 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x124 $x216)))
 (let (($x335 (not $x101)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (and $x271 $x207)))
 (let (($x263 (and (not $x38) $x335)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x7 $x248)))
 (let (($x174 (not $x106)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x317 $x91)))
 (let (($x348 (and (not $x13) $x174)))
 (let (($x495 (and (and (and (and (and (and $x348 $x263) $x559) $x118) $x362) $x466) $x459)))
 (let (($x499 (and $x495 $x82)))
 (let (($x647 (= $x499 true)))
 (let (($x648 (= $x647 true)))
 (let (($x649 (= $x648 true)))
 (let (($x184 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x41 (bvadd ?x390 input.dst.llvm-%m2)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x35))))
 (let ((?x20 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x302 (_ bv1 32))))
 (=> $x456 (= ?x20 ?x257))))))))))
 ))
 (let (($x527 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x407 (_ bv1 32))))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x302 (_ bv1 32))))
 (= $x456 $x290))))))
 ))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x76 (= false false)))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (= ?x302 (_ bv0 32))))
 (=> $x576 $x76)))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x407 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (= ?x302 (_ bv0 32))))
 (= $x576 $x86))))))
 ))
 (let (($x516 (and $x514 $x79)))
 (let (($x528 (and $x516 $x527)))
 (let (($x50 (and $x528 $x184)))
 (let (($x206 (= $x50 true)))
 (let (($x30 (= $x206 true)))
 (let (($x470 (= $x30 true)))
 (let ((?x243 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x40 (= (_ bv0 2) ?x243)))
 (let (($x176 (= $x40 true)))
 (let (($x181 (= $x176 true)))
 (let (($x285 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x256 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x555 (and $x256 $x285)))
 (let (($x261 (= $x555 true)))
 (let (($x403 (= $x261 true)))
 (let (($x57 (= $x403 true)))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x126 (bvadd ?x390 input.dst.llvm-%m1)))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x567))))
 (let ((?x25 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x379 (_ bv1 32))))
 (=> $x483 (= ?x25 ?x338))))))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x407 (_ bv1 32))))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x379 (_ bv1 32))))
 (= $x483 $x290))))))
 ))
 (let (($x473 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x76 (= false false)))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x379 (_ bv0 32))))
 (=> $x267 $x76)))))
 ))
 (let (($x500 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x407 (_ bv0 32))))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x379 (_ bv0 32))))
 (= $x267 $x86))))))
 ))
 (let (($x299 (and $x500 $x473)))
 (let (($x337 (and $x299 $x370)))
 (let (($x255 (and $x337 $x485)))
 (let (($x324 (= $x255 true)))
 (let (($x452 (= $x324 true)))
 (let (($x108 (= $x452 true)))
 (let (($x341 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x126 (bvadd ?x390 input.dst.llvm-%m1)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x126))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv2 32))) ?x62)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv3 32))) ?x212)))
 (let ((?x25 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x379 (_ bv1 32))))
 (=> $x483 (= ?x25 ?x116)))))))))))
 ))
 (let (($x389 (and $x337 $x341)))
 (let (($x364 (= $x389 true)))
 (let (($x428 (= $x364 true)))
 (let (($x130 (= $x428 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x41 (bvadd ?x390 input.dst.llvm-%m2)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x41))))
 (let ((?x427 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv2 32))) ?x247)))
 (let ((?x343 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv3 32))) ?x427)))
 (let ((?x20 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x302 (_ bv1 32))))
 (=> $x456 (= ?x20 ?x343)))))))))))
 ))
 (let (($x272 (and $x528 $x297)))
 (let (($x457 (= $x272 true)))
 (let (($x249 (= $x457 true)))
 (let (($x107 (= $x249 true)))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x126 (bvadd ?x390 input.dst.llvm-%m1)))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x567))))
 (let ((?x460 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x213 (_ bv1 32))))
 (=> $x301 (= ?x460 ?x338))))))))))
 ))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x407 (_ bv1 32))))
 (let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x213 (_ bv1 32))))
 (= $x301 $x290))))))
 ))
 (let (($x278 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x76 (= false false)))
 (let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x213 (_ bv0 32))))
 (=> $x49 $x76)))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x407 (_ bv0 32))))
 (let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x213 (_ bv0 32))))
 (= $x49 $x86))))))
 ))
 (let (($x238 (and $x435 $x278)))
 (let (($x135 (and $x238 $x455)))
 (let (($x417 (and $x135 $x73)))
 (let (($x19 (= $x417 true)))
 (let (($x77 (= $x19 true)))
 (let (($x28 (= $x77 true)))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x126 (bvadd ?x390 input.dst.llvm-%m1)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x126))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv2 32))) ?x62)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x126 (_ bv3 32))) ?x212)))
 (let ((?x460 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x213 (_ bv1 32))))
 (=> $x301 (= ?x460 ?x116)))))))))))
 ))
 (let (($x401 (and $x135 $x113)))
 (let (($x406 (= $x401 true)))
 (let (($x5 (= $x406 true)))
 (let (($x465 (= $x5 true)))
 (let (($x125 (and $x465 $x28)))
 (let (($x69 (and $x125 $x107)))
 (let (($x556 (and $x69 $x130)))
 (let (($x296 (and $x556 $x108)))
 (let (($x233 (and $x296 $x57)))
 (let (($x100 (and $x233 $x181)))
 (let (($x210 (and $x100 $x470)))
 (let (($x650 (and $x210 $x649)))
 (let (($x657 (and $x650 $x656)))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x460 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x25 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x379 (_ bv1 32))))
 (=> $x483 (= ?x25 ?x460)))))))
 ))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x213 (_ bv1 32))))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x379 (_ bv1 32))))
 (= $x483 $x301))))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x213 (_ bv0 32))))
 (let ((?x379 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x379 (_ bv0 32))))
 (= $x267 $x49))))))
 ))
 (let (($x284 (and $x170 $x473)))
 (let (($x482 (and $x284 $x410)))
 (let (($x227 (and $x482 $x114)))
 (let (($x658 (and $x227 $x657)))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x20 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x302 (_ bv1 32))))
 (=> $x456 (= ?x20 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x302 (_ bv1 32))))
 (= $x456 (bvuge ?x275 (_ bv1 32)))))))
 ))
 (let (($x132 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (= ?x302 (_ bv0 32))))
 (= $x576 (= ?x275 (_ bv0 32)))))))
 ))
 (let (($x80 (and $x132 $x79)))
 (let (($x93 (and $x80 $x8)))
 (let (($x165 (and $x93 $x318)))
 (let (($x659 (and $x165 $x658)))
 (let (($x663 (=> $x659 $x662)))
 (not $x663)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x529 (= false true)))
 (let (($x531 (= $x529 true)))
 (let ((?x513 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x518 (= (_ bv0 32) ?x513)))
 (let ((?x547 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x548 (= (_ bv0 32) ?x547)))
 (let ((?x368 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x368)))
 (let ((?x508 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x461 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x508)))
 (let (($x502 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x502 $x461)))
 (let (($x510 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x510 $x111)))
 (let (($x507 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x505 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x479 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x506 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x504 (and $x506 $x479)))
 (let (($x361 (not $x504)))
 (let (($x509 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x477 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x478 (and $x477 $x509)))
 (let (($x512 (and (not $x478) $x361)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x177 $x265)))
 (let (($x60 (not $x196)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x87 $x374)))
 (let (($x503 (and (not $x179) $x60)))
 (let (($x521 (and (and (and (and (and (and $x503 $x512) $x505) $x507) $x27) $x575) $x548)))
 (let (($x523 (and $x521 $x518)))
 (let (($x530 (= $x523 true)))
 (let (($x211 (= $x530 true)))
 (let (($x525 (= $x211 true)))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x578 input.dst.llvm-%m2)))
 (let ((?x397 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x397))))
 (let ((?x222 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x482 (_ bv1 32))))
 (=> $x135 (= ?x222 ?x316))))))))))
 ))
 (let (($x487 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x649 (_ bv1 32))))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x482 (_ bv1 32))))
 (= $x135 $x137))))))
 ))
 (let (($x52 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x221 (= false false)))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x482 (_ bv0 32))))
 (=> $x25 $x221)))))
 ))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x482 (_ bv0 32))))
 (= $x25 $x650))))))
 ))
 (let (($x185 (and $x252 $x52)))
 (let (($x358 (and $x185 $x487)))
 (let (($x64 (and $x358 $x119)))
 (let (($x330 (= $x64 true)))
 (let (($x146 (= $x330 true)))
 (let (($x336 (= $x146 true)))
 (let ((?x365 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x381 (= (_ bv0 2) ?x365)))
 (let (($x246 (= $x381 true)))
 (let (($x253 (= $x246 true)))
 (let (($x131 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x489 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x326 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x152 (and $x326 $x489)))
 (let (($x75 (and $x152 $x131)))
 (let (($x121 (= $x75 true)))
 (let (($x103 (= $x121 true)))
 (let (($x347 (= $x103 true)))
 (let (($x161 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x173 (bvadd ?x578 input.dst.llvm-%m1)))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x496))))
 (let ((?x296 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x432 (_ bv1 32))))
 (=> $x341 (= ?x296 ?x154))))))))))
 ))
 (let (($x565 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x649 (_ bv1 32))))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x432 (_ bv1 32))))
 (= $x341 $x137))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x221 (= false false)))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x432 (_ bv0 32))))
 (=> $x247 $x221)))))
 ))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x432 (_ bv0 32))))
 (= $x247 $x650))))))
 ))
 (let (($x332 (and $x241 $x297)))
 (let (($x289 (and $x332 $x565)))
 (let (($x95 (and $x289 $x161)))
 (let (($x251 (= $x95 true)))
 (let (($x305 (= $x251 true)))
 (let (($x254 (= $x305 true)))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x173 (bvadd ?x578 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x173))))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv2 32))) ?x329)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv3 32))) ?x148)))
 (let ((?x296 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x432 (_ bv1 32))))
 (=> $x341 (= ?x296 ?x81)))))))))))
 ))
 (let (($x84 (and $x289 $x218)))
 (let (($x363 (= $x84 true)))
 (let (($x481 (= $x363 true)))
 (let (($x367 (= $x481 true)))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x578 input.dst.llvm-%m2)))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x294))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv2 32))) ?x55)))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv3 32))) ?x89)))
 (let ((?x222 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x482 (_ bv1 32))))
 (=> $x135 (= ?x222 ?x288)))))))))))
 ))
 (let (($x422 (and $x358 $x231)))
 (let (($x322 (= $x422 true)))
 (let (($x454 (= $x322 true)))
 (let (($x458 (= $x454 true)))
 (let (($x640 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x173 (bvadd ?x578 input.dst.llvm-%m1)))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x496))))
 (let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x166 (_ bv1 32))))
 (=> $x195 (= ?x108 ?x154))))))))))
 ))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x649 (_ bv1 32))))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x166 (_ bv1 32))))
 (= $x195 $x137))))))
 ))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x221 (= false false)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x166 (_ bv0 32))))
 (=> $x193 $x221)))))
 ))
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x166 (_ bv0 32))))
 (= $x193 $x650))))))
 ))
 (let (($x656 (and $x652 $x655)))
 (let (($x36 (and $x656 $x139)))
 (let (($x642 (and $x36 $x640)))
 (let (($x643 (= $x642 true)))
 (let (($x644 (= $x643 true)))
 (let (($x203 (= $x644 true)))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x173 (bvadd ?x578 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x173))))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv2 32))) ?x329)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv3 32))) ?x148)))
 (let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x166 (_ bv1 32))))
 (=> $x195 (= ?x108 ?x81)))))))))))
 ))
 (let (($x14 (and $x36 $x226)))
 (let (($x29 (= $x14 true)))
 (let (($x228 (= $x29 true)))
 (let (($x447 (= $x228 true)))
 (let (($x110 (and $x447 $x203)))
 (let (($x393 (and $x110 $x458)))
 (let (($x17 (and $x393 $x367)))
 (let (($x258 (and $x17 $x254)))
 (let (($x232 (and $x258 $x347)))
 (let (($x97 (and $x232 $x253)))
 (let (($x145 (and $x97 $x336)))
 (let (($x526 (and $x145 $x525)))
 (let (($x256 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x296 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x432 (_ bv1 32))))
 (=> $x341 (= ?x296 ?x108)))))))
 ))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x166 (_ bv1 32))))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x432 (_ bv1 32))))
 (= $x341 $x195))))))
 ))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x166 (_ bv0 32))))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x432 (_ bv0 32))))
 (= $x247 $x193))))))
 ))
 (let (($x272 (and $x343 $x297)))
 (let (($x428 (and $x272 $x364)))
 (let (($x123 (and $x428 $x256)))
 (let (($x522 (and $x123 $x526)))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x222 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x482 (_ bv1 32))))
 (=> $x135 (= ?x222 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x583 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x482 (_ bv1 32))))
 (= $x135 (bvuge ?x301 (_ bv1 32)))))))
 ))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x482 (_ bv0 32))))
 (= $x25 (= ?x301 (_ bv0 32)))))))
 ))
 (let (($x582 (and $x191 $x52)))
 (let (($x390 (and $x582 $x583)))
 (let (($x116 (and $x390 $x212)))
 (let (($x532 (and $x116 $x522)))
 (let (($x520 (=> $x532 $x531)))
 (not $x520)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x529 (= false true)))
 (let (($x531 (= $x529 true)))
 (let ((?x513 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x518 (= (_ bv0 32) ?x513)))
 (let ((?x547 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x548 (= (_ bv0 32) ?x547)))
 (let ((?x368 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x368)))
 (let ((?x508 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x461 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x508)))
 (let (($x502 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x502 $x461)))
 (let (($x510 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x510 $x111)))
 (let (($x507 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x505 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x479 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x506 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x504 (and $x506 $x479)))
 (let (($x361 (not $x504)))
 (let (($x509 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x477 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x478 (and $x477 $x509)))
 (let (($x512 (and (not $x478) $x361)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x177 $x265)))
 (let (($x60 (not $x196)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x87 $x374)))
 (let (($x503 (and (not $x179) $x60)))
 (let (($x521 (and (and (and (and (and (and $x503 $x512) $x505) $x507) $x27) $x575) $x548)))
 (let (($x523 (and $x521 $x518)))
 (let (($x530 (= $x523 true)))
 (let (($x211 (= $x530 true)))
 (let (($x525 (= $x211 true)))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x578 input.dst.llvm-%m2)))
 (let ((?x397 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x397))))
 (let ((?x222 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x482 (_ bv1 32))))
 (=> $x135 (= ?x222 ?x316))))))))))
 ))
 (let (($x487 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x649 (_ bv1 32))))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x482 (_ bv1 32))))
 (= $x135 $x137))))))
 ))
 (let (($x52 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x221 (= false false)))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x482 (_ bv0 32))))
 (=> $x25 $x221)))))
 ))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x482 (_ bv0 32))))
 (= $x25 $x650))))))
 ))
 (let (($x185 (and $x252 $x52)))
 (let (($x358 (and $x185 $x487)))
 (let (($x64 (and $x358 $x119)))
 (let (($x330 (= $x64 true)))
 (let (($x146 (= $x330 true)))
 (let (($x336 (= $x146 true)))
 (let ((?x365 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x381 (= (_ bv0 2) ?x365)))
 (let (($x246 (= $x381 true)))
 (let (($x253 (= $x246 true)))
 (let (($x131 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x489 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x326 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x152 (and $x326 $x489)))
 (let (($x75 (and $x152 $x131)))
 (let (($x121 (= $x75 true)))
 (let (($x103 (= $x121 true)))
 (let (($x347 (= $x103 true)))
 (let (($x161 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x173 (bvadd ?x578 input.dst.llvm-%m1)))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x496))))
 (let ((?x296 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x432 (_ bv1 32))))
 (=> $x341 (= ?x296 ?x154))))))))))
 ))
 (let (($x565 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x649 (_ bv1 32))))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x432 (_ bv1 32))))
 (= $x341 $x137))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x221 (= false false)))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x432 (_ bv0 32))))
 (=> $x247 $x221)))))
 ))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x432 (_ bv0 32))))
 (= $x247 $x650))))))
 ))
 (let (($x332 (and $x241 $x297)))
 (let (($x289 (and $x332 $x565)))
 (let (($x95 (and $x289 $x161)))
 (let (($x251 (= $x95 true)))
 (let (($x305 (= $x251 true)))
 (let (($x254 (= $x305 true)))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x173 (bvadd ?x578 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x173))))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv2 32))) ?x329)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv3 32))) ?x148)))
 (let ((?x296 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x432 (_ bv1 32))))
 (=> $x341 (= ?x296 ?x81)))))))))))
 ))
 (let (($x84 (and $x289 $x218)))
 (let (($x363 (= $x84 true)))
 (let (($x481 (= $x363 true)))
 (let (($x367 (= $x481 true)))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x294 (bvadd ?x578 input.dst.llvm-%m2)))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x294))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv2 32))) ?x55)))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x294 (_ bv3 32))) ?x89)))
 (let ((?x222 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x482 (_ bv1 32))))
 (=> $x135 (= ?x222 ?x288)))))))))))
 ))
 (let (($x422 (and $x358 $x231)))
 (let (($x322 (= $x422 true)))
 (let (($x454 (= $x322 true)))
 (let (($x458 (= $x454 true)))
 (let (($x640 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x173 (bvadd ?x578 input.dst.llvm-%m1)))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x496))))
 (let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x166 (_ bv1 32))))
 (=> $x195 (= ?x108 ?x154))))))))))
 ))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x649 (_ bv1 32))))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x166 (_ bv1 32))))
 (= $x195 $x137))))))
 ))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x221 (= false false)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x166 (_ bv0 32))))
 (=> $x193 $x221)))))
 ))
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x166 (_ bv0 32))))
 (= $x193 $x650))))))
 ))
 (let (($x656 (and $x652 $x655)))
 (let (($x36 (and $x656 $x139)))
 (let (($x642 (and $x36 $x640)))
 (let (($x643 (= $x642 true)))
 (let (($x644 (= $x643 true)))
 (let (($x203 (= $x644 true)))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x173 (bvadd ?x578 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x173))))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv2 32))) ?x329)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x173 (_ bv3 32))) ?x148)))
 (let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x166 (_ bv1 32))))
 (=> $x195 (= ?x108 ?x81)))))))))))
 ))
 (let (($x14 (and $x36 $x226)))
 (let (($x29 (= $x14 true)))
 (let (($x228 (= $x29 true)))
 (let (($x447 (= $x228 true)))
 (let (($x110 (and $x447 $x203)))
 (let (($x393 (and $x110 $x458)))
 (let (($x17 (and $x393 $x367)))
 (let (($x258 (and $x17 $x254)))
 (let (($x232 (and $x258 $x347)))
 (let (($x97 (and $x232 $x253)))
 (let (($x145 (and $x97 $x336)))
 (let (($x526 (and $x145 $x525)))
 (let (($x256 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x296 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x432 (_ bv1 32))))
 (=> $x341 (= ?x296 ?x108)))))))
 ))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x166 (_ bv1 32))))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x432 (_ bv1 32))))
 (= $x341 $x195))))))
 ))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x166 (_ bv0 32))))
 (let ((?x432 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x432 (_ bv0 32))))
 (= $x247 $x193))))))
 ))
 (let (($x272 (and $x343 $x297)))
 (let (($x428 (and $x272 $x364)))
 (let (($x123 (and $x428 $x256)))
 (let (($x522 (and $x123 $x526)))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x222 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x482 (_ bv1 32))))
 (=> $x135 (= ?x222 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x583 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x482 (_ bv1 32))))
 (= $x135 (bvuge ?x301 (_ bv1 32)))))))
 ))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x482 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x482 (_ bv0 32))))
 (= $x25 (= ?x301 (_ bv0 32)))))))
 ))
 (let (($x582 (and $x191 $x52)))
 (let (($x390 (and $x582 $x583)))
 (let (($x116 (and $x390 $x212)))
 (let (($x532 (and $x116 $x522)))
 (let (($x520 (=> $x532 $x531)))
 (not $x520)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x44d84144)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1e574863)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x44d84147)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x44d84144)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x450 (= (_ bv0 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x96 (= $x450 true)))
 (let (($x304 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x149 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x446 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x260 (and $x446 $x149)))
 (let (($x395 (and $x260 $x304)))
 (let (($x433 (= $x395 true)))
 (let (($x369 (= $x433 true)))
 (let (($x298 (= $x369 true)))
 (let ((?x545 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x463 (= (_ bv0 32) ?x545)))
 (let ((?x43 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x158 (= (_ bv0 32) ?x43)))
 (let ((?x310 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x310)))
 (let ((?x189 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x189)))
 (let (($x558 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x280 (and $x558 $x201)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x164 $x280)))
 (let (($x372 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x442 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x418 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x418 $x9)))
 (let (($x580 (not $x33)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x292 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x292 $x266)))
 (let (($x562 (and (not $x47) $x580)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (and $x314 $x94)))
 (let (($x159 (not $x383)))
 (let (($x664 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x661 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x564 (and $x661 $x664)))
 (let (($x109 (and (not $x564) $x159)))
 (let (($x224 (and (and (and (and (and (and $x109 $x562) $x442) $x372) $x83) $x287) $x158)))
 (let (($x342 (and $x224 $x463)))
 (let (($x420 (= $x342 true)))
 (let (($x236 (= $x420 true)))
 (let (($x259 (= $x236 true)))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x628 (bvadd ?x243 input.dst.llvm-%m2)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x628 (_ bv1 32))) (select input.dst.llvm-mem ?x628))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x628 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x628 (_ bv2 32))) ?x376))))
 (let ((?x581 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x428 (_ bv1 32))))
 (=> $x36 (= ?x581 ?x362))))))))))
 ))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x518 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x428 (_ bv1 32))))
 (= $x36 $x412))))))
 ))
 (let (($x647 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x464 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x428 (_ bv0 32))))
 (=> $x296 $x464)))))
 ))
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x523 (= ?x518 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x428 (_ bv0 32))))
 (= $x296 $x523))))))
 ))
 (let (($x608 (and $x611 $x647)))
 (let (($x120 (and $x608 $x646)))
 (let (($x466 (and $x120 $x205)))
 (let (($x82 (= $x466 true)))
 (let (($x653 (= $x82 true)))
 (let (($x657 (= $x653 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x473 (= (_ bv0 2) ?x219)))
 (let (($x449 (= $x473 true)))
 (let (($x435 (= $x449 true)))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x357 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x527))))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x182 (_ bv1 32))))
 (=> $x218 (= ?x258 ?x459))))))))))
 ))
 (let (($x122 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x518 (_ bv1 32))))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x182 (_ bv1 32))))
 (= $x218 $x412))))))
 ))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x464 (= false false)))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x182 (_ bv0 32))))
 (=> $x55 $x464)))))
 ))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x523 (= ?x518 (_ bv0 32))))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x182 (_ bv0 32))))
 (= $x55 $x523))))))
 ))
 (let (($x157 (and $x516 $x231)))
 (let (($x437 (and $x157 $x122)))
 (let (($x165 (and $x437 $x318)))
 (let (($x167 (= $x165 true)))
 (let (($x379 (= $x167 true)))
 (let (($x267 (= $x379 true)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x357 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x357))))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv2 32))) ?x229)))
 (let ((?x430 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv3 32))) ?x134)))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x182 (_ bv1 32))))
 (=> $x218 (= ?x258 ?x430)))))))))))
 ))
 (let (($x31 (and $x437 $x156)))
 (let (($x293 (= $x31 true)))
 (let (($x255 (= $x293 true)))
 (let (($x324 (= $x255 true)))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x628 (bvadd ?x243 input.dst.llvm-%m2)))
 (let ((?x622 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x628 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x628))))
 (let ((?x621 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x628 (_ bv2 32))) ?x622)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x628 (_ bv3 32))) ?x621)))
 (let ((?x581 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x428 (_ bv1 32))))
 (=> $x36 (= ?x581 ?x274)))))))))))
 ))
 (let (($x73 (and $x120 $x77)))
 (let (($x417 (= $x73 true)))
 (let (($x19 (= $x417 true)))
 (let (($x28 (= $x19 true)))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x357 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x527))))
 (let ((?x254 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x385 (_ bv1 32))))
 (=> $x419 (= ?x254 ?x459))))))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x518 (_ bv1 32))))
 (let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x385 (_ bv1 32))))
 (= $x419 $x412))))))
 ))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x464 (= false false)))
 (let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x385 (_ bv0 32))))
 (=> $x469 $x464)))))
 ))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x523 (= ?x518 (_ bv0 32))))
 (let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x385 (_ bv0 32))))
 (= $x469 $x523))))))
 ))
 (let (($x532 (and $x211 $x522)))
 (let (($x474 (and $x532 $x275)))
 (let (($x264 (and $x474 $x234)))
 (let (($x457 (= $x264 true)))
 (let (($x249 (= $x457 true)))
 (let (($x107 (= $x249 true)))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x357 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x357))))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv2 32))) ?x229)))
 (let ((?x430 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv3 32))) ?x134)))
 (let ((?x254 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x385 (_ bv1 32))))
 (=> $x419 (= ?x254 ?x430)))))))))))
 ))
 (let (($x220 (and $x474 $x443)))
 (let (($x387 (= $x220 true)))
 (let (($x18 (= $x387 true)))
 (let (($x392 (= $x18 true)))
 (let (($x69 (and $x392 $x107)))
 (let (($x125 (and $x69 $x28)))
 (let (($x452 (and $x125 $x324)))
 (let (($x129 (and $x452 $x267)))
 (let (($x70 (and $x129 $x435)))
 (let (($x659 (and $x70 $x657)))
 (let (($x421 (and $x659 $x259)))
 (let (($x340 (and $x421 $x298)))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x254 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x182 (_ bv1 32))))
 (=> $x218 (= ?x258 ?x254)))))))
 ))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x385 (_ bv1 32))))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x182 (_ bv1 32))))
 (= $x218 $x419))))))
 ))
 (let (($x288 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x385 (_ bv0 32))))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x182 (_ bv0 32))))
 (= $x55 $x469))))))
 ))
 (let (($x422 (and $x288 $x231)))
 (let (($x481 (and $x422 $x363)))
 (let (($x46 (and $x481 $x326)))
 (let (($x65 (and $x46 $x340)))
 (let (($x148 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x581 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x428 (_ bv1 32))))
 (=> $x36 (= ?x581 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x195 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x428 (_ bv1 32))))
 (= $x36 (bvuge ?x195 (_ bv1 32)))))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x195 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x428 (_ bv0 32))))
 (= $x296 (= ?x195 (_ bv0 32)))))))
 ))
 (let (($x261 (and $x68 $x647)))
 (let (($x578 (and $x261 $x40)))
 (let (($x81 (and $x578 $x148)))
 (let (($x66 (and $x81 $x65)))
 (let (($x436 (=> $x66 $x96)))
 (not $x436)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x450 (= (_ bv0 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x96 (= $x450 true)))
 (let (($x304 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x149 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x446 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x260 (and $x446 $x149)))
 (let (($x395 (and $x260 $x304)))
 (let (($x433 (= $x395 true)))
 (let (($x369 (= $x433 true)))
 (let (($x298 (= $x369 true)))
 (let ((?x545 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x463 (= (_ bv0 32) ?x545)))
 (let ((?x43 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x158 (= (_ bv0 32) ?x43)))
 (let ((?x310 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x310)))
 (let ((?x189 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x189)))
 (let (($x558 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x280 (and $x558 $x201)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x164 $x280)))
 (let (($x372 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x442 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x418 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x418 $x9)))
 (let (($x580 (not $x33)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x292 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x292 $x266)))
 (let (($x562 (and (not $x47) $x580)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (and $x314 $x94)))
 (let (($x159 (not $x383)))
 (let (($x664 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x661 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x564 (and $x661 $x664)))
 (let (($x109 (and (not $x564) $x159)))
 (let (($x224 (and (and (and (and (and (and $x109 $x562) $x442) $x372) $x83) $x287) $x158)))
 (let (($x342 (and $x224 $x463)))
 (let (($x420 (= $x342 true)))
 (let (($x236 (= $x420 true)))
 (let (($x259 (= $x236 true)))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x628 (bvadd ?x243 input.dst.llvm-%m2)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x628 (_ bv1 32))) (select input.dst.llvm-mem ?x628))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x628 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x628 (_ bv2 32))) ?x376))))
 (let ((?x581 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x428 (_ bv1 32))))
 (=> $x36 (= ?x581 ?x362))))))))))
 ))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x518 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x428 (_ bv1 32))))
 (= $x36 $x412))))))
 ))
 (let (($x647 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x464 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x428 (_ bv0 32))))
 (=> $x296 $x464)))))
 ))
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x523 (= ?x518 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x428 (_ bv0 32))))
 (= $x296 $x523))))))
 ))
 (let (($x608 (and $x611 $x647)))
 (let (($x120 (and $x608 $x646)))
 (let (($x466 (and $x120 $x205)))
 (let (($x82 (= $x466 true)))
 (let (($x653 (= $x82 true)))
 (let (($x657 (= $x653 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x473 (= (_ bv0 2) ?x219)))
 (let (($x449 (= $x473 true)))
 (let (($x435 (= $x449 true)))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x357 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x527))))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x182 (_ bv1 32))))
 (=> $x218 (= ?x258 ?x459))))))))))
 ))
 (let (($x122 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x518 (_ bv1 32))))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x182 (_ bv1 32))))
 (= $x218 $x412))))))
 ))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x464 (= false false)))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x182 (_ bv0 32))))
 (=> $x55 $x464)))))
 ))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x523 (= ?x518 (_ bv0 32))))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x182 (_ bv0 32))))
 (= $x55 $x523))))))
 ))
 (let (($x157 (and $x516 $x231)))
 (let (($x437 (and $x157 $x122)))
 (let (($x165 (and $x437 $x318)))
 (let (($x167 (= $x165 true)))
 (let (($x379 (= $x167 true)))
 (let (($x267 (= $x379 true)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x357 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x357))))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv2 32))) ?x229)))
 (let ((?x430 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv3 32))) ?x134)))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x182 (_ bv1 32))))
 (=> $x218 (= ?x258 ?x430)))))))))))
 ))
 (let (($x31 (and $x437 $x156)))
 (let (($x293 (= $x31 true)))
 (let (($x255 (= $x293 true)))
 (let (($x324 (= $x255 true)))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x628 (bvadd ?x243 input.dst.llvm-%m2)))
 (let ((?x622 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x628 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x628))))
 (let ((?x621 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x628 (_ bv2 32))) ?x622)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x628 (_ bv3 32))) ?x621)))
 (let ((?x581 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x428 (_ bv1 32))))
 (=> $x36 (= ?x581 ?x274)))))))))))
 ))
 (let (($x73 (and $x120 $x77)))
 (let (($x417 (= $x73 true)))
 (let (($x19 (= $x417 true)))
 (let (($x28 (= $x19 true)))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x357 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x527))))
 (let ((?x254 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x385 (_ bv1 32))))
 (=> $x419 (= ?x254 ?x459))))))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x518 (_ bv1 32))))
 (let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x385 (_ bv1 32))))
 (= $x419 $x412))))))
 ))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x464 (= false false)))
 (let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x385 (_ bv0 32))))
 (=> $x469 $x464)))))
 ))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x523 (= ?x518 (_ bv0 32))))
 (let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x385 (_ bv0 32))))
 (= $x469 $x523))))))
 ))
 (let (($x532 (and $x211 $x522)))
 (let (($x474 (and $x532 $x275)))
 (let (($x264 (and $x474 $x234)))
 (let (($x457 (= $x264 true)))
 (let (($x249 (= $x457 true)))
 (let (($x107 (= $x249 true)))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x357 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x357))))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv2 32))) ?x229)))
 (let ((?x430 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv3 32))) ?x134)))
 (let ((?x254 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x385 (_ bv1 32))))
 (=> $x419 (= ?x254 ?x430)))))))))))
 ))
 (let (($x220 (and $x474 $x443)))
 (let (($x387 (= $x220 true)))
 (let (($x18 (= $x387 true)))
 (let (($x392 (= $x18 true)))
 (let (($x69 (and $x392 $x107)))
 (let (($x125 (and $x69 $x28)))
 (let (($x452 (and $x125 $x324)))
 (let (($x129 (and $x452 $x267)))
 (let (($x70 (and $x129 $x435)))
 (let (($x659 (and $x70 $x657)))
 (let (($x421 (and $x659 $x259)))
 (let (($x340 (and $x421 $x298)))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x254 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x182 (_ bv1 32))))
 (=> $x218 (= ?x258 ?x254)))))))
 ))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x385 (_ bv1 32))))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x182 (_ bv1 32))))
 (= $x218 $x419))))))
 ))
 (let (($x288 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x385 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x385 (_ bv0 32))))
 (let ((?x182 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x182 (_ bv0 32))))
 (= $x55 $x469))))))
 ))
 (let (($x422 (and $x288 $x231)))
 (let (($x481 (and $x422 $x363)))
 (let (($x46 (and $x481 $x326)))
 (let (($x65 (and $x46 $x340)))
 (let (($x148 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x581 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x428 (_ bv1 32))))
 (=> $x36 (= ?x581 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x195 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x428 (_ bv1 32))))
 (= $x36 (bvuge ?x195 (_ bv1 32)))))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x195 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x428 (_ bv0 32))))
 (= $x296 (= ?x195 (_ bv0 32)))))))
 ))
 (let (($x261 (and $x68 $x647)))
 (let (($x578 (and $x261 $x40)))
 (let (($x81 (and $x578 $x148)))
 (let (($x66 (and $x81 $x65)))
 (let (($x436 (=> $x66 $x96)))
 (not $x436)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1e7c3aa4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xaf0e7910)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!21))
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xaf0e7913)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1e7c3aa7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xaf0e7910)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1e7c3aa4)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!23 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!27 (k!23 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!25 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!21))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!27 (k!23 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!25 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!25 (k!23 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x624 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x500 (bvneg ?x624)))
 (let (($x299 (= ?x500 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x534 (= $x299 true)))
 (let (($x620 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x86 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x49 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x616 (and $x49 $x86)))
 (let (($x238 (and $x616 $x620)))
 (let (($x631 (= $x238 true)))
 (let (($x632 (= $x631 true)))
 (let (($x617 (= $x632 true)))
 (let ((?x589 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x594 (= (_ bv0 32) ?x589)))
 (let ((?x590 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x587 (= (_ bv0 32) ?x590)))
 (let ((?x603 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x600 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x603)))
 (let ((?x456 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x598 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x456)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x610 (and $x79 $x598)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x607 (and $x215 $x610)))
 (let (($x11 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x555 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x555 $x202)))
 (let (($x366 (not $x176)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x138 $x162)))
 (let (($x45 (and (not $x8) $x366)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x391 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x391 $x403)))
 (let (($x93 (not $x57)))
 (let (($x401 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x571 (and $x188 $x401)))
 (let (($x204 (and (not $x571) $x93)))
 (let (($x601 (and (and (and (and (and (and $x204 $x45) $x302) $x11) $x607) $x600) $x587)))
 (let (($x605 (and $x601 $x594)))
 (let (($x609 (= $x605 true)))
 (let (($x614 (= $x609 true)))
 (let (($x615 (= $x614 true)))
 (let (($x461 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x103 input.dst.llvm-%m2)))
 (let ((?x512 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x502 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x512))))
 (let ((?x488 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x481 (_ bv1 32))))
 (=> $x474 (= ?x488 ?x502))))))))))
 ))
 (let (($x499 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x304 (_ bv1 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x481 (_ bv1 32))))
 (= $x474 $x410))))))
 ))
 (let (($x521 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x481 (_ bv0 32))))
 (=> $x258 $x492)))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (= ?x304 (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x481 (_ bv0 32))))
 (= $x258 $x395))))))
 ))
 (let (($x360 (and $x317 $x521)))
 (let (($x648 (and $x360 $x499)))
 (let (($x111 (and $x648 $x461)))
 (let (($x547 (= $x111 true)))
 (let (($x525 (= $x547 true)))
 (let (($x529 (= $x525 true)))
 (let ((?x128 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x297 (= (_ bv0 2) ?x128)))
 (let (($x651 (= $x297 true)))
 (let (($x652 (= $x651 true)))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x103 input.dst.llvm-%m1)))
 (let ((?x487 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x487))))
 (let ((?x129 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x636 (_ bv1 32))))
 (=> $x156 (= ?x129 ?x368))))))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x304 (_ bv1 32))))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x636 (_ bv1 32))))
 (= $x156 $x410))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x636 (_ bv0 32))))
 (=> $x622 $x492)))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (= ?x304 (_ bv0 32))))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x636 (_ bv0 32))))
 (= $x622 $x395))))))
 ))
 (let (($x67 (and $x185 $x77)))
 (let (($x127 (and $x67 $x276)))
 (let (($x116 (and $x127 $x212)))
 (let (($x99 (= $x116 true)))
 (let (($x432 (= $x99 true)))
 (let (($x247 (= $x432 true)))
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x103 input.dst.llvm-%m1)))
 (let ((?x595 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x309))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv2 32))) ?x595)))
 (let ((?x476 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv3 32))) ?x278)))
 (let ((?x129 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x636 (_ bv1 32))))
 (=> $x156 (= ?x129 ?x476)))))))))))
 ))
 (let (($x102 (and $x127 $x416)))
 (let (($x117 (= $x102 true)))
 (let (($x95 (= $x117 true)))
 (let (($x251 (= $x95 true)))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x103 input.dst.llvm-%m2)))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x194))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv2 32))) ?x90)))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv3 32))) ?x124)))
 (let ((?x488 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x481 (_ bv1 32))))
 (=> $x474 (= ?x488 ?x291)))))))))))
 ))
 (let (($x640 (and $x648 $x644)))
 (let (($x642 (= $x640 true)))
 (let (($x643 (= $x642 true)))
 (let (($x203 (= $x643 true)))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x103 input.dst.llvm-%m1)))
 (let ((?x487 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x487))))
 (let ((?x267 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x625 (_ bv1 32))))
 (=> $x337 (= ?x267 ?x368))))))))))
 ))
 (let (($x560 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x304 (_ bv1 32))))
 (let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x625 (_ bv1 32))))
 (= $x337 $x410))))))
 ))
 (let (($x65 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x625 (_ bv0 32))))
 (=> $x633 $x492)))))
 ))
 (let (($x369 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (= ?x304 (_ bv0 32))))
 (let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x625 (_ bv0 32))))
 (= $x633 $x395))))))
 ))
 (let (($x66 (and $x369 $x65)))
 (let (($x482 (and $x66 $x560)))
 (let (($x323 (and $x482 $x554)))
 (let (($x322 (= $x323 true)))
 (let (($x454 (= $x322 true)))
 (let (($x458 (= $x454 true)))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x103 input.dst.llvm-%m1)))
 (let ((?x595 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x309))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv2 32))) ?x595)))
 (let ((?x476 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv3 32))) ?x278)))
 (let ((?x267 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x625 (_ bv1 32))))
 (=> $x337 (= ?x267 ?x476)))))))))))
 ))
 (let (($x88 (and $x482 $x378)))
 (let (($x399 (= $x88 true)))
 (let (($x493 (= $x399 true)))
 (let (($x494 (= $x493 true)))
 (let (($x393 (and $x494 $x458)))
 (let (($x110 (and $x393 $x203)))
 (let (($x305 (and $x110 $x251)))
 (let (($x427 (and $x305 $x247)))
 (let (($x654 (and $x427 $x652)))
 (let (($x520 (and $x654 $x529)))
 (let (($x618 (and $x520 $x615)))
 (let (($x619 (and $x618 $x617)))
 (let (($x473 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x129 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x636 (_ bv1 32))))
 (=> $x156 (= ?x129 ?x267)))))))
 ))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x625 (_ bv1 32))))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x636 (_ bv1 32))))
 (= $x156 $x337))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x625 (_ bv0 32))))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x636 (_ bv0 32))))
 (= $x622 $x633))))))
 ))
 (let (($x73 (and $x274 $x77)))
 (let (($x255 (and $x73 $x293)))
 (let (($x449 (and $x255 $x473)))
 (let (($x405 (and $x449 $x619)))
 (let (($x134 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x488 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x481 (_ bv1 32))))
 (=> $x474 (= ?x488 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x419 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x481 (_ bv1 32))))
 (= $x474 (bvuge ?x419 (_ bv1 32)))))))
 ))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x419 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x481 (_ bv0 32))))
 (= $x258 (= ?x419 (_ bv0 32)))))))
 ))
 (let (($x286 (and $x491 $x521)))
 (let (($x243 (and $x286 $x347)))
 (let (($x430 (and $x243 $x134)))
 (let (($x626 (and $x430 $x405)))
 (let (($x53 (=> $x626 $x534)))
 (not $x53)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x624 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x500 (bvneg ?x624)))
 (let (($x299 (= ?x500 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x534 (= $x299 true)))
 (let (($x620 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x86 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x49 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x616 (and $x49 $x86)))
 (let (($x238 (and $x616 $x620)))
 (let (($x631 (= $x238 true)))
 (let (($x632 (= $x631 true)))
 (let (($x617 (= $x632 true)))
 (let ((?x589 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x594 (= (_ bv0 32) ?x589)))
 (let ((?x590 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x587 (= (_ bv0 32) ?x590)))
 (let ((?x603 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x600 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x603)))
 (let ((?x456 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x598 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x456)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x610 (and $x79 $x598)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x607 (and $x215 $x610)))
 (let (($x11 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x555 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x555 $x202)))
 (let (($x366 (not $x176)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x138 $x162)))
 (let (($x45 (and (not $x8) $x366)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x391 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x391 $x403)))
 (let (($x93 (not $x57)))
 (let (($x401 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x571 (and $x188 $x401)))
 (let (($x204 (and (not $x571) $x93)))
 (let (($x601 (and (and (and (and (and (and $x204 $x45) $x302) $x11) $x607) $x600) $x587)))
 (let (($x605 (and $x601 $x594)))
 (let (($x609 (= $x605 true)))
 (let (($x614 (= $x609 true)))
 (let (($x615 (= $x614 true)))
 (let (($x461 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x103 input.dst.llvm-%m2)))
 (let ((?x512 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x502 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x512))))
 (let ((?x488 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x481 (_ bv1 32))))
 (=> $x474 (= ?x488 ?x502))))))))))
 ))
 (let (($x499 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x304 (_ bv1 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x481 (_ bv1 32))))
 (= $x474 $x410))))))
 ))
 (let (($x521 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x481 (_ bv0 32))))
 (=> $x258 $x492)))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (= ?x304 (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x481 (_ bv0 32))))
 (= $x258 $x395))))))
 ))
 (let (($x360 (and $x317 $x521)))
 (let (($x648 (and $x360 $x499)))
 (let (($x111 (and $x648 $x461)))
 (let (($x547 (= $x111 true)))
 (let (($x525 (= $x547 true)))
 (let (($x529 (= $x525 true)))
 (let ((?x128 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x297 (= (_ bv0 2) ?x128)))
 (let (($x651 (= $x297 true)))
 (let (($x652 (= $x651 true)))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x103 input.dst.llvm-%m1)))
 (let ((?x487 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x487))))
 (let ((?x129 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x636 (_ bv1 32))))
 (=> $x156 (= ?x129 ?x368))))))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x304 (_ bv1 32))))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x636 (_ bv1 32))))
 (= $x156 $x410))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x636 (_ bv0 32))))
 (=> $x622 $x492)))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (= ?x304 (_ bv0 32))))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x636 (_ bv0 32))))
 (= $x622 $x395))))))
 ))
 (let (($x67 (and $x185 $x77)))
 (let (($x127 (and $x67 $x276)))
 (let (($x116 (and $x127 $x212)))
 (let (($x99 (= $x116 true)))
 (let (($x432 (= $x99 true)))
 (let (($x247 (= $x432 true)))
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x103 input.dst.llvm-%m1)))
 (let ((?x595 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x309))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv2 32))) ?x595)))
 (let ((?x476 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv3 32))) ?x278)))
 (let ((?x129 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x636 (_ bv1 32))))
 (=> $x156 (= ?x129 ?x476)))))))))))
 ))
 (let (($x102 (and $x127 $x416)))
 (let (($x117 (= $x102 true)))
 (let (($x95 (= $x117 true)))
 (let (($x251 (= $x95 true)))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x103 input.dst.llvm-%m2)))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x194))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv2 32))) ?x90)))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv3 32))) ?x124)))
 (let ((?x488 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x481 (_ bv1 32))))
 (=> $x474 (= ?x488 ?x291)))))))))))
 ))
 (let (($x640 (and $x648 $x644)))
 (let (($x642 (= $x640 true)))
 (let (($x643 (= $x642 true)))
 (let (($x203 (= $x643 true)))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x103 input.dst.llvm-%m1)))
 (let ((?x487 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x487))))
 (let ((?x267 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x625 (_ bv1 32))))
 (=> $x337 (= ?x267 ?x368))))))))))
 ))
 (let (($x560 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x304 (_ bv1 32))))
 (let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x625 (_ bv1 32))))
 (= $x337 $x410))))))
 ))
 (let (($x65 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x625 (_ bv0 32))))
 (=> $x633 $x492)))))
 ))
 (let (($x369 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (= ?x304 (_ bv0 32))))
 (let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x625 (_ bv0 32))))
 (= $x633 $x395))))))
 ))
 (let (($x66 (and $x369 $x65)))
 (let (($x482 (and $x66 $x560)))
 (let (($x323 (and $x482 $x554)))
 (let (($x322 (= $x323 true)))
 (let (($x454 (= $x322 true)))
 (let (($x458 (= $x454 true)))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x103 input.dst.llvm-%m1)))
 (let ((?x595 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x309))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv2 32))) ?x595)))
 (let ((?x476 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv3 32))) ?x278)))
 (let ((?x267 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x625 (_ bv1 32))))
 (=> $x337 (= ?x267 ?x476)))))))))))
 ))
 (let (($x88 (and $x482 $x378)))
 (let (($x399 (= $x88 true)))
 (let (($x493 (= $x399 true)))
 (let (($x494 (= $x493 true)))
 (let (($x393 (and $x494 $x458)))
 (let (($x110 (and $x393 $x203)))
 (let (($x305 (and $x110 $x251)))
 (let (($x427 (and $x305 $x247)))
 (let (($x654 (and $x427 $x652)))
 (let (($x520 (and $x654 $x529)))
 (let (($x618 (and $x520 $x615)))
 (let (($x619 (and $x618 $x617)))
 (let (($x473 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x129 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x636 (_ bv1 32))))
 (=> $x156 (= ?x129 ?x267)))))))
 ))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x625 (_ bv1 32))))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x636 (_ bv1 32))))
 (= $x156 $x337))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x625 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x625 (_ bv0 32))))
 (let ((?x636 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x636 (_ bv0 32))))
 (= $x622 $x633))))))
 ))
 (let (($x73 (and $x274 $x77)))
 (let (($x255 (and $x73 $x293)))
 (let (($x449 (and $x255 $x473)))
 (let (($x405 (and $x449 $x619)))
 (let (($x134 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x488 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x481 (_ bv1 32))))
 (=> $x474 (= ?x488 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x419 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x481 (_ bv1 32))))
 (= $x474 (bvuge ?x419 (_ bv1 32)))))))
 ))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x419 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x481 (_ bv0 32))))
 (= $x258 (= ?x419 (_ bv0 32)))))))
 ))
 (let (($x286 (and $x491 $x521)))
 (let (($x243 (and $x286 $x347)))
 (let (($x430 (and $x243 $x134)))
 (let (($x626 (and $x430 $x405)))
 (let (($x53 (=> $x626 $x534)))
 (not $x53)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x315 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x106 (bvneg ?x315)))
 (let (($x271 (= ?x106 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x101 (= $x271 true)))
 (let (($x7 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x166 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x174 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x193 (and $x174 $x166)))
 (let (($x181 (and $x193 $x7)))
 (let (($x173 (= $x181 true)))
 (let (($x44 (= $x173 true)))
 (let (($x656 (= $x44 true)))
 (let ((?x353 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x56 (= (_ bv0 32) ?x353)))
 (let ((?x210 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x439 (= (_ bv0 32) ?x210)))
 (let ((?x269 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x269)))
 (let ((?x460 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x460)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x52 (and $x221 $x227)))
 (let (($x483 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x483 $x52)))
 (let (($x582 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x567 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x641 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x535 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x583 (and $x535 $x641)))
 (let (($x152 (not $x583)))
 (let (($x489 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x390 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x455 (and $x390 $x489)))
 (let (($x232 (and (not $x455) $x152)))
 (let (($x497 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x14 $x497)))
 (let (($x468 (not $x154)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x436 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x436 $x180)))
 (let (($x131 (and (not $x300) $x468)))
 (let (($x386 (and (and (and (and (and (and $x131 $x232) $x567) $x582) $x135) $x30) $x439)))
 (let (($x150 (and $x386 $x56)))
 (let (($x257 (= $x150 true)))
 (let (($x50 (= $x257 true)))
 (let (($x277 (= $x50 true)))
 (let (($x342 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x171 (bvadd ?x364 input.dst.llvm-%m2)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x280))))
 (let ((?x370 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x255 (_ bv1 32))))
 (=> $x482 (= ?x370 ?x144))))))))))
 ))
 (let (($x469 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x620 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x255 (_ bv1 32))))
 (= $x482 $x351))))))
 ))
 (let (($x414 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x219 (= false false)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x255 (_ bv0 32))))
 (=> $x129 $x219)))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x620 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x255 (_ bv0 32))))
 (= $x129 $x238))))))
 ))
 (let (($x119 (and $x133 $x414)))
 (let (($x470 (and $x119 $x469)))
 (let (($x463 (and $x470 $x342)))
 (let (($x420 (= $x463 true)))
 (let (($x236 (= $x420 true)))
 (let (($x259 (= $x236 true)))
 (let ((?x55 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x89 (= (_ bv0 2) ?x55)))
 (let (($x288 (= $x89 true)))
 (let (($x415 (= $x288 true)))
 (let (($x581 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x572 (bvadd ?x364 input.dst.llvm-%m1)))
 (let ((?x588 (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv1 32))) (select input.dst.llvm-mem ?x572))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv2 32))) ?x588))))
 (let ((?x427 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x313 (_ bv1 32))))
 (=> $x416 (= ?x427 ?x120))))))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x620 (_ bv1 32))))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x313 (_ bv1 32))))
 (= $x416 $x351))))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x219 (= false false)))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x313 (_ bv0 32))))
 (=> $x90 $x219)))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x620 (_ bv0 32))))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x313 (_ bv0 32))))
 (= $x90 $x238))))))
 ))
 (let (($x606 (and $x69 $x644)))
 (let (($x628 (and $x606 $x448)))
 (let (($x579 (and $x628 $x581)))
 (let (($x584 (= $x579 true)))
 (let (($x148 (= $x584 true)))
 (let (($x81 (= $x148 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x572 (bvadd ?x364 input.dst.llvm-%m1)))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x572))))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv2 32))) ?x367)))
 (let ((?x655 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv3 32))) ?x22)))
 (let ((?x427 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x313 (_ bv1 32))))
 (=> $x416 (= ?x427 ?x655)))))))))))
 ))
 (let (($x48 (and $x628 $x157)))
 (let (($x437 (= $x48 true)))
 (let (($x24 (= $x437 true)))
 (let (($x147 (= $x24 true)))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x171 (bvadd ?x364 input.dst.llvm-%m2)))
 (let ((?x480 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x171))))
 (let ((?x503 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv2 32))) ?x480)))
 (let ((?x477 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv3 32))) ?x503)))
 (let ((?x370 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x255 (_ bv1 32))))
 (=> $x482 (= ?x370 ?x477)))))))))))
 ))
 (let (($x511 (and $x470 $x472)))
 (let (($x504 (= $x511 true)))
 (let (($x249 (= $x504 true)))
 (let (($x234 (= $x249 true)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x572 (bvadd ?x364 input.dst.llvm-%m1)))
 (let ((?x588 (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv1 32))) (select input.dst.llvm-mem ?x572))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv2 32))) ?x588))))
 (let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x207 (_ bv1 32))))
 (=> $x289 (= ?x247 ?x120))))))))))
 ))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x620 (_ bv1 32))))
 (let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x207 (_ bv1 32))))
 (= $x289 $x351))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x219 (= false false)))
 (let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x207 (_ bv0 32))))
 (=> $x216 $x219)))))
 ))
 (let (($x632 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x620 (_ bv0 32))))
 (let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x207 (_ bv0 32))))
 (= $x216 $x238))))))
 ))
 (let (($x626 (and $x632 $x405)))
 (let (($x272 (and $x626 $x220)))
 (let (($x446 (and $x272 $x281)))
 (let (($x551 (= $x446 true)))
 (let (($x208 (= $x551 true)))
 (let (($x637 (= $x208 true)))
 (let (($x217 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x572 (bvadd ?x364 input.dst.llvm-%m1)))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x572))))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv2 32))) ?x367)))
 (let ((?x655 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv3 32))) ?x22)))
 (let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x207 (_ bv1 32))))
 (=> $x289 (= ?x247 ?x655)))))))))))
 ))
 (let (($x153 (and $x272 $x217)))
 (let (($x663 (= $x153 true)))
 (let (($x556 (= $x663 true)))
 (let (($x98 (= $x556 true)))
 (let (($x417 (and $x98 $x637)))
 (let (($x264 (and $x417 $x234)))
 (let (($x384 (and $x264 $x147)))
 (let (($x331 (and $x384 $x81)))
 (let (($x231 (and $x331 $x415)))
 (let (($x149 (and $x231 $x259)))
 (let (($x206 (and $x149 $x277)))
 (let (($x248 (and $x206 $x656)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x427 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x313 (_ bv1 32))))
 (=> $x416 (= ?x427 ?x247)))))))
 ))
 (let (($x117 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x207 (_ bv1 32))))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x313 (_ bv1 32))))
 (= $x416 $x289))))))
 ))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x207 (_ bv0 32))))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x313 (_ bv0 32))))
 (= $x90 $x216))))))
 ))
 (let (($x640 (and $x291 $x644)))
 (let (($x95 (and $x640 $x117)))
 (let (($x651 (and $x95 $x297)))
 (let (($x283 (and $x651 $x248)))
 (let (($x278 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x370 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x255 (_ bv1 32))))
 (=> $x482 (= ?x370 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x337 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x255 (_ bv1 32))))
 (= $x482 (bvuge ?x337 (_ bv1 32)))))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x337 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x255 (_ bv0 32))))
 (= $x129 (= ?x337 (_ bv0 32)))))))
 ))
 (let (($x424 (and $x170 $x414)))
 (let (($x103 (and $x424 $x362)))
 (let (($x476 (and $x103 $x278)))
 (let (($x13 (and $x476 $x283)))
 (let (($x241 (=> $x13 $x101)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x315 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x106 (bvneg ?x315)))
 (let (($x271 (= ?x106 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x101 (= $x271 true)))
 (let (($x7 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x166 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x174 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x193 (and $x174 $x166)))
 (let (($x181 (and $x193 $x7)))
 (let (($x173 (= $x181 true)))
 (let (($x44 (= $x173 true)))
 (let (($x656 (= $x44 true)))
 (let ((?x353 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x56 (= (_ bv0 32) ?x353)))
 (let ((?x210 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x439 (= (_ bv0 32) ?x210)))
 (let ((?x269 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x269)))
 (let ((?x460 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x460)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x52 (and $x221 $x227)))
 (let (($x483 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x483 $x52)))
 (let (($x582 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x567 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x641 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x535 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x583 (and $x535 $x641)))
 (let (($x152 (not $x583)))
 (let (($x489 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x390 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x455 (and $x390 $x489)))
 (let (($x232 (and (not $x455) $x152)))
 (let (($x497 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x14 $x497)))
 (let (($x468 (not $x154)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x436 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x436 $x180)))
 (let (($x131 (and (not $x300) $x468)))
 (let (($x386 (and (and (and (and (and (and $x131 $x232) $x567) $x582) $x135) $x30) $x439)))
 (let (($x150 (and $x386 $x56)))
 (let (($x257 (= $x150 true)))
 (let (($x50 (= $x257 true)))
 (let (($x277 (= $x50 true)))
 (let (($x342 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x171 (bvadd ?x364 input.dst.llvm-%m2)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x280))))
 (let ((?x370 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x255 (_ bv1 32))))
 (=> $x482 (= ?x370 ?x144))))))))))
 ))
 (let (($x469 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x620 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x255 (_ bv1 32))))
 (= $x482 $x351))))))
 ))
 (let (($x414 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x219 (= false false)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x255 (_ bv0 32))))
 (=> $x129 $x219)))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x620 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x255 (_ bv0 32))))
 (= $x129 $x238))))))
 ))
 (let (($x119 (and $x133 $x414)))
 (let (($x470 (and $x119 $x469)))
 (let (($x463 (and $x470 $x342)))
 (let (($x420 (= $x463 true)))
 (let (($x236 (= $x420 true)))
 (let (($x259 (= $x236 true)))
 (let ((?x55 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x89 (= (_ bv0 2) ?x55)))
 (let (($x288 (= $x89 true)))
 (let (($x415 (= $x288 true)))
 (let (($x581 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x572 (bvadd ?x364 input.dst.llvm-%m1)))
 (let ((?x588 (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv1 32))) (select input.dst.llvm-mem ?x572))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv2 32))) ?x588))))
 (let ((?x427 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x313 (_ bv1 32))))
 (=> $x416 (= ?x427 ?x120))))))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x620 (_ bv1 32))))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x313 (_ bv1 32))))
 (= $x416 $x351))))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x219 (= false false)))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x313 (_ bv0 32))))
 (=> $x90 $x219)))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x620 (_ bv0 32))))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x313 (_ bv0 32))))
 (= $x90 $x238))))))
 ))
 (let (($x606 (and $x69 $x644)))
 (let (($x628 (and $x606 $x448)))
 (let (($x579 (and $x628 $x581)))
 (let (($x584 (= $x579 true)))
 (let (($x148 (= $x584 true)))
 (let (($x81 (= $x148 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x572 (bvadd ?x364 input.dst.llvm-%m1)))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x572))))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv2 32))) ?x367)))
 (let ((?x655 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv3 32))) ?x22)))
 (let ((?x427 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x313 (_ bv1 32))))
 (=> $x416 (= ?x427 ?x655)))))))))))
 ))
 (let (($x48 (and $x628 $x157)))
 (let (($x437 (= $x48 true)))
 (let (($x24 (= $x437 true)))
 (let (($x147 (= $x24 true)))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x171 (bvadd ?x364 input.dst.llvm-%m2)))
 (let ((?x480 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x171))))
 (let ((?x503 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv2 32))) ?x480)))
 (let ((?x477 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv3 32))) ?x503)))
 (let ((?x370 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x255 (_ bv1 32))))
 (=> $x482 (= ?x370 ?x477)))))))))))
 ))
 (let (($x511 (and $x470 $x472)))
 (let (($x504 (= $x511 true)))
 (let (($x249 (= $x504 true)))
 (let (($x234 (= $x249 true)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x572 (bvadd ?x364 input.dst.llvm-%m1)))
 (let ((?x588 (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv1 32))) (select input.dst.llvm-mem ?x572))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x572 (_ bv2 32))) ?x588))))
 (let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x207 (_ bv1 32))))
 (=> $x289 (= ?x247 ?x120))))))))))
 ))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x620 (_ bv1 32))))
 (let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x207 (_ bv1 32))))
 (= $x289 $x351))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x219 (= false false)))
 (let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x207 (_ bv0 32))))
 (=> $x216 $x219)))))
 ))
 (let (($x632 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x620 (_ bv0 32))))
 (let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x207 (_ bv0 32))))
 (= $x216 $x238))))))
 ))
 (let (($x626 (and $x632 $x405)))
 (let (($x272 (and $x626 $x220)))
 (let (($x446 (and $x272 $x281)))
 (let (($x551 (= $x446 true)))
 (let (($x208 (= $x551 true)))
 (let (($x637 (= $x208 true)))
 (let (($x217 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x572 (bvadd ?x364 input.dst.llvm-%m1)))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x572))))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv2 32))) ?x367)))
 (let ((?x655 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x572 (_ bv3 32))) ?x22)))
 (let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x207 (_ bv1 32))))
 (=> $x289 (= ?x247 ?x655)))))))))))
 ))
 (let (($x153 (and $x272 $x217)))
 (let (($x663 (= $x153 true)))
 (let (($x556 (= $x663 true)))
 (let (($x98 (= $x556 true)))
 (let (($x417 (and $x98 $x637)))
 (let (($x264 (and $x417 $x234)))
 (let (($x384 (and $x264 $x147)))
 (let (($x331 (and $x384 $x81)))
 (let (($x231 (and $x331 $x415)))
 (let (($x149 (and $x231 $x259)))
 (let (($x206 (and $x149 $x277)))
 (let (($x248 (and $x206 $x656)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x427 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x313 (_ bv1 32))))
 (=> $x416 (= ?x427 ?x247)))))))
 ))
 (let (($x117 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x207 (_ bv1 32))))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x313 (_ bv1 32))))
 (= $x416 $x289))))))
 ))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x207 (_ bv0 32))))
 (let ((?x313 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x313 (_ bv0 32))))
 (= $x90 $x216))))))
 ))
 (let (($x640 (and $x291 $x644)))
 (let (($x95 (and $x640 $x117)))
 (let (($x651 (and $x95 $x297)))
 (let (($x283 (and $x651 $x248)))
 (let (($x278 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x370 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x255 (_ bv1 32))))
 (=> $x482 (= ?x370 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x337 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x255 (_ bv1 32))))
 (= $x482 (bvuge ?x337 (_ bv1 32)))))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x337 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x255 (_ bv0 32))))
 (= $x129 (= ?x337 (_ bv0 32)))))))
 ))
 (let (($x424 (and $x170 $x414)))
 (let (($x103 (and $x424 $x362)))
 (let (($x476 (and $x103 $x278)))
 (let (($x13 (and $x476 $x283)))
 (let (($x241 (=> $x13 $x101)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x237 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x451 (= $x237 true)))
 (let ((?x467 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x532 (= (_ bv0 2) ?x467)))
 (let (($x179 (= $x532 true)))
 (let (($x87 (= $x179 true)))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x111 (bvadd ?x422 input.dst.llvm-%m2)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x97))))
 (let ((?x542 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x95 (_ bv1 32))))
 (=> $x272 (= ?x542 ?x253))))))))))
 ))
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x7 (_ bv1 32))))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x95 (_ bv1 32))))
 (= $x272 $x115))))))
 ))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x128 (= false false)))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x95 (_ bv0 32))))
 (=> $x427 $x128)))))
 ))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x7 (_ bv0 32))))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x95 (_ bv0 32))))
 (= $x427 $x181))))))
 ))
 (let (($x536 (and $x226 $x585)))
 (let (($x240 (and $x536 $x465)))
 (let (($x145 (and $x240 $x336)))
 (let (($x311 (= $x145 true)))
 (let (($x177 (= $x311 true)))
 (let (($x326 (= $x177 true)))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x111 (bvadd ?x422 input.dst.llvm-%m2)))
 (let ((?x338 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x111))))
 (let ((?x57 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv2 32))) ?x338)))
 (let ((?x138 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv3 32))) ?x57)))
 (let ((?x542 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x95 (_ bv1 32))))
 (=> $x272 (= ?x542 ?x138)))))))))))
 ))
 (let (($x176 (and $x240 $x202)))
 (let (($x8 (= $x176 true)))
 (let (($x23 (= $x8 true)))
 (let (($x162 (= $x23 true)))
 (let (($x558 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x431 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x354 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x266 (and $x354 $x431)))
 (let (($x434 (and $x266 $x558)))
 (let (($x141 (= $x434 true)))
 (let (($x186 (= $x141 true)))
 (let (($x164 (= $x186 true)))
 (let ((?x625 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x633 (= (_ bv0 32) ?x625)))
 (let ((?x109 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x623 (= (_ bv0 32) ?x109)))
 (let ((?x383 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x383)))
 (let ((?x282 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x282)))
 (let (($x466 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x314 (and $x466 $x279)))
 (let (($x564 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x564 $x314)))
 (let (($x334 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x550 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x539 (and $x161 $x550)))
 (let (($x657 (not $x539)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x191 $x20)))
 (let (($x660 (and (not $x178) $x657)))
 (let (($x521 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x46 $x521)))
 (let (($x474 (not $x286)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x491 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x491 $x218)))
 (let (($x413 (and (not $x254) $x474)))
 (let (($x395 (and (and (and (and (and (and $x413 $x660) $x15) $x334) $x94) $x159) $x623)))
 (let (($x292 (and $x395 $x633)))
 (let (($x490 (= $x292 true)))
 (let (($x562 (= $x490 true)))
 (let (($x9 (= $x562 true)))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x510 (bvadd ?x422 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv1 32))) (select input.dst.llvm-mem ?x510))))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv2 32))) ?x382))))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x265 (_ bv1 32))))
 (=> $x157 (= ?x331 ?x648))))))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x7 (_ bv1 32))))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x265 (_ bv1 32))))
 (= $x157 $x115))))))
 ))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x128 (= false false)))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x480 (= ?x265 (_ bv0 32))))
 (=> $x480 $x128)))))
 ))
 (let (($x110 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x7 (_ bv0 32))))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x480 (= ?x265 (_ bv0 32))))
 (= $x480 $x181))))))
 ))
 (let (($x527 (and $x110 $x472)))
 (let (($x444 (and $x527 $x12)))
 (let (($x228 (and $x444 $x307)))
 (let (($x426 (= $x228 true)))
 (let (($x339 (= $x426 true)))
 (let (($x78 (= $x339 true)))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x510 (bvadd ?x422 input.dst.llvm-%m1)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x510))))
 (let ((?x522 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv2 32))) ?x122)))
 (let ((?x530 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv3 32))) ?x522)))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x265 (_ bv1 32))))
 (=> $x157 (= ?x331 ?x530)))))))))))
 ))
 (let (($x305 (and $x444 $x251)))
 (let (($x319 (= $x305 true)))
 (let (($x54 (= $x319 true)))
 (let (($x59 (= $x54 true)))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x510 (bvadd ?x422 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv1 32))) (select input.dst.llvm-mem ?x510))))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv2 32))) ?x382))))
 (let ((?x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x517 (_ bv1 32))))
 (=> $x516 (= ?x81 ?x648))))))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x7 (_ bv1 32))))
 (let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x517 (_ bv1 32))))
 (= $x516 $x115))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x128 (= false false)))
 (let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x517 (_ bv0 32))))
 (=> $x478 $x128)))))
 ))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x7 (_ bv0 32))))
 (let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x517 (_ bv0 32))))
 (= $x478 $x181))))))
 ))
 (let (($x13 (and $x44 $x283)))
 (let (($x363 (and $x13 $x88)))
 (let (($x49 (and $x363 $x213)))
 (let (($x407 (= $x49 true)))
 (let (($x457 (= $x407 true)))
 (let (($x118 (= $x457 true)))
 (let (($x397 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x510 (bvadd ?x422 input.dst.llvm-%m1)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x510))))
 (let ((?x522 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv2 32))) ?x122)))
 (let ((?x530 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv3 32))) ?x522)))
 (let ((?x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x517 (_ bv1 32))))
 (=> $x516 (= ?x81 ?x530)))))))))))
 ))
 (let (($x486 (and $x363 $x397)))
 (let (($x409 (= $x486 true)))
 (let (($x10 (= $x409 true)))
 (let (($x394 (= $x10 true)))
 (let (($x642 (and $x394 $x118)))
 (let (($x429 (and $x642 $x59)))
 (let (($x212 (and $x429 $x78)))
 (let (($x33 (and $x212 $x9)))
 (let (($x580 (and $x33 $x164)))
 (let (($x555 (and $x580 $x162)))
 (let (($x548 (and $x555 $x326)))
 (let (($x523 (and $x548 $x87)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x265 (_ bv1 32))))
 (=> $x157 (= ?x331 ?x81)))))))
 ))
 (let (($x437 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x517 (_ bv1 32))))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x265 (_ bv1 32))))
 (= $x157 $x516))))))
 ))
 (let (($x477 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x517 (_ bv0 32))))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x480 (= ?x265 (_ bv0 32))))
 (= $x480 $x478))))))
 ))
 (let (($x511 (and $x477 $x472)))
 (let (($x24 (and $x511 $x437)))
 (let (($x288 (and $x24 $x89)))
 (let (($x374 (and $x288 $x523)))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x542 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x95 (_ bv1 32))))
 (=> $x272 (= ?x542 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x502 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x289 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x95 (_ bv1 32))))
 (= $x272 (bvuge ?x289 (_ bv1 32)))))))
 ))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x289 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x95 (_ bv0 32))))
 (= $x427 (= ?x289 (_ bv0 32)))))))
 ))
 (let (($x398 (and $x343 $x585)))
 (let (($x364 (and $x398 $x502)))
 (let (($x655 (and $x364 $x22)))
 (let (($x518 (and $x655 $x374)))
 (let (($x612 (=> $x518 $x451)))
 (not $x612)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x237 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x451 (= $x237 true)))
 (let ((?x467 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x532 (= (_ bv0 2) ?x467)))
 (let (($x179 (= $x532 true)))
 (let (($x87 (= $x179 true)))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x111 (bvadd ?x422 input.dst.llvm-%m2)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x97))))
 (let ((?x542 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x95 (_ bv1 32))))
 (=> $x272 (= ?x542 ?x253))))))))))
 ))
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x7 (_ bv1 32))))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x95 (_ bv1 32))))
 (= $x272 $x115))))))
 ))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x128 (= false false)))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x95 (_ bv0 32))))
 (=> $x427 $x128)))))
 ))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x7 (_ bv0 32))))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x95 (_ bv0 32))))
 (= $x427 $x181))))))
 ))
 (let (($x536 (and $x226 $x585)))
 (let (($x240 (and $x536 $x465)))
 (let (($x145 (and $x240 $x336)))
 (let (($x311 (= $x145 true)))
 (let (($x177 (= $x311 true)))
 (let (($x326 (= $x177 true)))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x111 (bvadd ?x422 input.dst.llvm-%m2)))
 (let ((?x338 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x111))))
 (let ((?x57 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv2 32))) ?x338)))
 (let ((?x138 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv3 32))) ?x57)))
 (let ((?x542 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x95 (_ bv1 32))))
 (=> $x272 (= ?x542 ?x138)))))))))))
 ))
 (let (($x176 (and $x240 $x202)))
 (let (($x8 (= $x176 true)))
 (let (($x23 (= $x8 true)))
 (let (($x162 (= $x23 true)))
 (let (($x558 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x431 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x354 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x266 (and $x354 $x431)))
 (let (($x434 (and $x266 $x558)))
 (let (($x141 (= $x434 true)))
 (let (($x186 (= $x141 true)))
 (let (($x164 (= $x186 true)))
 (let ((?x625 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x633 (= (_ bv0 32) ?x625)))
 (let ((?x109 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x623 (= (_ bv0 32) ?x109)))
 (let ((?x383 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x383)))
 (let ((?x282 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x282)))
 (let (($x466 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x314 (and $x466 $x279)))
 (let (($x564 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x564 $x314)))
 (let (($x334 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x550 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x539 (and $x161 $x550)))
 (let (($x657 (not $x539)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x191 $x20)))
 (let (($x660 (and (not $x178) $x657)))
 (let (($x521 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x46 $x521)))
 (let (($x474 (not $x286)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x491 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x491 $x218)))
 (let (($x413 (and (not $x254) $x474)))
 (let (($x395 (and (and (and (and (and (and $x413 $x660) $x15) $x334) $x94) $x159) $x623)))
 (let (($x292 (and $x395 $x633)))
 (let (($x490 (= $x292 true)))
 (let (($x562 (= $x490 true)))
 (let (($x9 (= $x562 true)))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x510 (bvadd ?x422 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv1 32))) (select input.dst.llvm-mem ?x510))))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv2 32))) ?x382))))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x265 (_ bv1 32))))
 (=> $x157 (= ?x331 ?x648))))))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x7 (_ bv1 32))))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x265 (_ bv1 32))))
 (= $x157 $x115))))))
 ))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x128 (= false false)))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x480 (= ?x265 (_ bv0 32))))
 (=> $x480 $x128)))))
 ))
 (let (($x110 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x7 (_ bv0 32))))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x480 (= ?x265 (_ bv0 32))))
 (= $x480 $x181))))))
 ))
 (let (($x527 (and $x110 $x472)))
 (let (($x444 (and $x527 $x12)))
 (let (($x228 (and $x444 $x307)))
 (let (($x426 (= $x228 true)))
 (let (($x339 (= $x426 true)))
 (let (($x78 (= $x339 true)))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x510 (bvadd ?x422 input.dst.llvm-%m1)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x510))))
 (let ((?x522 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv2 32))) ?x122)))
 (let ((?x530 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv3 32))) ?x522)))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x265 (_ bv1 32))))
 (=> $x157 (= ?x331 ?x530)))))))))))
 ))
 (let (($x305 (and $x444 $x251)))
 (let (($x319 (= $x305 true)))
 (let (($x54 (= $x319 true)))
 (let (($x59 (= $x54 true)))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x510 (bvadd ?x422 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv1 32))) (select input.dst.llvm-mem ?x510))))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv2 32))) ?x382))))
 (let ((?x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x517 (_ bv1 32))))
 (=> $x516 (= ?x81 ?x648))))))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x7 (_ bv1 32))))
 (let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x517 (_ bv1 32))))
 (= $x516 $x115))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x128 (= false false)))
 (let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x517 (_ bv0 32))))
 (=> $x478 $x128)))))
 ))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x7 (_ bv0 32))))
 (let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x517 (_ bv0 32))))
 (= $x478 $x181))))))
 ))
 (let (($x13 (and $x44 $x283)))
 (let (($x363 (and $x13 $x88)))
 (let (($x49 (and $x363 $x213)))
 (let (($x407 (= $x49 true)))
 (let (($x457 (= $x407 true)))
 (let (($x118 (= $x457 true)))
 (let (($x397 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x510 (bvadd ?x422 input.dst.llvm-%m1)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x510))))
 (let ((?x522 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv2 32))) ?x122)))
 (let ((?x530 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x510 (_ bv3 32))) ?x522)))
 (let ((?x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x517 (_ bv1 32))))
 (=> $x516 (= ?x81 ?x530)))))))))))
 ))
 (let (($x486 (and $x363 $x397)))
 (let (($x409 (= $x486 true)))
 (let (($x10 (= $x409 true)))
 (let (($x394 (= $x10 true)))
 (let (($x642 (and $x394 $x118)))
 (let (($x429 (and $x642 $x59)))
 (let (($x212 (and $x429 $x78)))
 (let (($x33 (and $x212 $x9)))
 (let (($x580 (and $x33 $x164)))
 (let (($x555 (and $x580 $x162)))
 (let (($x548 (and $x555 $x326)))
 (let (($x523 (and $x548 $x87)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x265 (_ bv1 32))))
 (=> $x157 (= ?x331 ?x81)))))))
 ))
 (let (($x437 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x517 (_ bv1 32))))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x265 (_ bv1 32))))
 (= $x157 $x516))))))
 ))
 (let (($x477 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x517 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x517 (_ bv0 32))))
 (let ((?x265 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x480 (= ?x265 (_ bv0 32))))
 (= $x480 $x478))))))
 ))
 (let (($x511 (and $x477 $x472)))
 (let (($x24 (and $x511 $x437)))
 (let (($x288 (and $x24 $x89)))
 (let (($x374 (and $x288 $x523)))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x542 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x95 (_ bv1 32))))
 (=> $x272 (= ?x542 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x502 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x289 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x95 (_ bv1 32))))
 (= $x272 (bvuge ?x289 (_ bv1 32)))))))
 ))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x289 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x95 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x95 (_ bv0 32))))
 (= $x427 (= ?x289 (_ bv0 32)))))))
 ))
 (let (($x398 (and $x343 $x585)))
 (let (($x364 (and $x398 $x502)))
 (let (($x655 (and $x364 $x22)))
 (let (($x518 (and $x655 $x374)))
 (let (($x612 (=> $x518 $x451)))
 (not $x612)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x20000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x40000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x40000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x95f8f7a4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd9ebdcb0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd9ebdcb3)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x95f8f7a7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd9ebdcb0)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x95f8f7a4)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00010003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00010002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00010001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00010000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x00010003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00010002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00010001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00010000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x525 ((_ extract 15 0) input.dst.llvm-%m2)))
 (let (($x200 (= (_ bv0 16) ?x525)))
 (let (($x276 (= $x200 true)))
 (let ((?x63 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x239 (= (_ bv0 2) ?x63)))
 (let (($x592 (= $x239 true)))
 (let (($x318 (= $x592 true)))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x175 (bvadd ?x201 input.dst.llvm-%m2)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x140))))
 (let ((?x28 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x24 (_ bv1 32))))
 (=> $x363 (= ?x28 ?x125))))))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x513 (_ bv1 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x24 (_ bv1 32))))
 (= $x363 $x153))))))
 ))
 (let (($x649 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (= ?x24 (_ bv0 32))))
 (=> $x331 $x55)))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (= ?x513 (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (= ?x24 (_ bv0 32))))
 (= $x331 $x467))))))
 ))
 (let (($x43 (and $x372 $x649)))
 (let (($x85 (and $x43 $x263)))
 (let (($x570 (and $x85 $x324)))
 (let (($x172 (= $x570 true)))
 (let (($x568 (= $x172 true)))
 (let (($x355 (= $x568 true)))
 (let (($x284 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x175 (bvadd ?x201 input.dst.llvm-%m2)))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x175))))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv2 32))) ?x154)))
 (let ((?x641 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv3 32))) ?x390)))
 (let ((?x28 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x24 (_ bv1 32))))
 (=> $x363 (= ?x28 ?x641)))))))))))
 ))
 (let (($x489 (and $x85 $x284)))
 (let (($x535 (= $x489 true)))
 (let (($x152 (= $x535 true)))
 (let (($x121 (= $x152 true)))
 (let (($x123 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x36 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x296 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x169 (and $x296 $x36)))
 (let (($x647 (and $x169 $x123)))
 (let (($x108 (= $x647 true)))
 (let (($x569 (= $x108 true)))
 (let (($x485 (= $x569 true)))
 (let ((?x297 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x616 (= (_ bv0 32) ?x297)))
 (let ((?x216 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x352 (= (_ bv0 32) ?x216)))
 (let ((?x38 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x495 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x574 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x495)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x40 (and $x223 $x574)))
 (let (($x459 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x459 $x40)))
 (let (($x233 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x435 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x484 (and $x435 $x139)))
 (let (($x428 (not $x484)))
 (let (($x624 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x627 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x299 (and $x627 $x624)))
 (let (($x438 (and (not $x299) $x428)))
 (let (($x500 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x482 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x614 (and $x482 $x500)))
 (let (($x86 (not $x614)))
 (let (($x449 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (and $x267 $x449)))
 (let (($x617 (and (not $x414) $x86)))
 (let (($x244 (and (and (and (and (and (and $x617 $x438) $x301) $x233) $x70) $x207) $x352)))
 (let (($x39 (and $x244 $x616)))
 (let (($x464 (= $x39 true)))
 (let (($x222 (= $x464 true)))
 (let (($x626 (= $x222 true)))
 (let (($x187 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x442 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv1 32))) (select input.dst.llvm-mem ?x442))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv2 32))) ?x469))))
 (let ((?x473 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x32 (_ bv1 32))))
 (=> $x413 (= ?x473 ?x348))))))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x513 (_ bv1 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x32 (_ bv1 32))))
 (= $x413 $x153))))))
 ))
 (let (($x78 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (= ?x32 (_ bv0 32))))
 (=> $x447 $x55)))))
 ))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (= ?x513 (_ bv0 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (= ?x32 (_ bv0 32))))
 (= $x447 $x467))))))
 ))
 (let (($x380 (and $x112 $x78)))
 (let (($x332 (and $x380 $x448)))
 (let (($x387 (and $x332 $x187)))
 (let (($x581 (= $x387 true)))
 (let (($x29 (= $x581 true)))
 (let (($x440 (= $x29 true)))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x442 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x442))))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv2 32))) ?x302)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv3 32))) ?x366)))
 (let ((?x473 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x32 (_ bv1 32))))
 (=> $x413 (= ?x473 ?x11)))))))))))
 ))
 (let (($x593 (and $x332 $x100)))
 (let (($x597 (= $x593 true)))
 (let (($x325 (= $x597 true)))
 (let (($x320 (= $x325 true)))
 (let (($x643 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x442 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv1 32))) (select input.dst.llvm-mem ?x442))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv2 32))) ?x469))))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x54 (_ bv1 32))))
 (=> $x474 (= ?x15 ?x348))))))))))
 ))
 (let (($x84 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x513 (_ bv1 32))))
 (let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x54 (_ bv1 32))))
 (= $x474 $x153))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x54 (_ bv0 32))))
 (=> $x59 $x55)))))
 ))
 (let (($x179 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (= ?x513 (_ bv0 32))))
 (let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x54 (_ bv0 32))))
 (= $x59 $x467))))))
 ))
 (let (($x518 (and $x179 $x374)))
 (let (($x419 (and $x518 $x84)))
 (let (($x506 (and $x419 $x643)))
 (let (($x504 (= $x506 true)))
 (let (($x249 (= $x504 true)))
 (let (($x234 (= $x249 true)))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x442 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x442))))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv2 32))) ?x302)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv3 32))) ?x366)))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x54 (_ bv1 32))))
 (=> $x474 (= ?x15 ?x11)))))))))))
 ))
 (let (($x590 (and $x419 $x79)))
 (let (($x587 (= $x590 true)))
 (let (($x603 (= $x587 true)))
 (let (($x600 (= $x603 true)))
 (let (($x264 (and $x600 $x234)))
 (let (($x344 (and $x264 $x320)))
 (let (($x170 (and $x344 $x440)))
 (let (($x5 (and $x170 $x626)))
 (let (($x261 (and $x5 $x485)))
 (let (($x483 (and $x261 $x121)))
 (let (($x62 (and $x483 $x355)))
 (let (($x406 (and $x62 $x318)))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x473 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x32 (_ bv1 32))))
 (=> $x413 (= ?x473 ?x15)))))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x54 (_ bv1 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x32 (_ bv1 32))))
 (= $x413 $x474))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x54 (_ bv0 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (= ?x32 (_ bv0 32))))
 (= $x447 $x59))))))
 ))
 (let (($x212 (and $x228 $x78)))
 (let (($x178 (and $x212 $x20)))
 (let (($x564 (and $x178 $x260)))
 (let (($x573 (and $x564 $x406)))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x24 (_ bv1 32))))
 (=> $x363 (= ?x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x144 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x24 (_ bv1 32))))
 (= $x363 (bvuge ?x516 (_ bv1 32)))))))
 ))
 (let (($x182 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (= ?x24 (_ bv0 32))))
 (= $x331 (= ?x516 (_ bv0 32)))))))
 ))
 (let (($x235 (and $x182 $x649)))
 (let (($x422 (and $x235 $x144)))
 (let (($x530 (and $x422 $x522)))
 (let (($x571 (and $x530 $x573)))
 (let (($x357 (=> $x571 $x276)))
 (not $x357))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x525 ((_ extract 15 0) input.dst.llvm-%m2)))
 (let (($x200 (= (_ bv0 16) ?x525)))
 (let (($x276 (= $x200 true)))
 (let ((?x63 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x239 (= (_ bv0 2) ?x63)))
 (let (($x592 (= $x239 true)))
 (let (($x318 (= $x592 true)))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x175 (bvadd ?x201 input.dst.llvm-%m2)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x140))))
 (let ((?x28 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x24 (_ bv1 32))))
 (=> $x363 (= ?x28 ?x125))))))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x513 (_ bv1 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x24 (_ bv1 32))))
 (= $x363 $x153))))))
 ))
 (let (($x649 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (= ?x24 (_ bv0 32))))
 (=> $x331 $x55)))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (= ?x513 (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (= ?x24 (_ bv0 32))))
 (= $x331 $x467))))))
 ))
 (let (($x43 (and $x372 $x649)))
 (let (($x85 (and $x43 $x263)))
 (let (($x570 (and $x85 $x324)))
 (let (($x172 (= $x570 true)))
 (let (($x568 (= $x172 true)))
 (let (($x355 (= $x568 true)))
 (let (($x284 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x175 (bvadd ?x201 input.dst.llvm-%m2)))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x175))))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv2 32))) ?x154)))
 (let ((?x641 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv3 32))) ?x390)))
 (let ((?x28 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x24 (_ bv1 32))))
 (=> $x363 (= ?x28 ?x641)))))))))))
 ))
 (let (($x489 (and $x85 $x284)))
 (let (($x535 (= $x489 true)))
 (let (($x152 (= $x535 true)))
 (let (($x121 (= $x152 true)))
 (let (($x123 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x36 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x296 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x169 (and $x296 $x36)))
 (let (($x647 (and $x169 $x123)))
 (let (($x108 (= $x647 true)))
 (let (($x569 (= $x108 true)))
 (let (($x485 (= $x569 true)))
 (let ((?x297 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x616 (= (_ bv0 32) ?x297)))
 (let ((?x216 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x352 (= (_ bv0 32) ?x216)))
 (let ((?x38 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x495 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x574 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x495)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x40 (and $x223 $x574)))
 (let (($x459 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x459 $x40)))
 (let (($x233 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x435 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x484 (and $x435 $x139)))
 (let (($x428 (not $x484)))
 (let (($x624 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x627 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x299 (and $x627 $x624)))
 (let (($x438 (and (not $x299) $x428)))
 (let (($x500 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x482 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x614 (and $x482 $x500)))
 (let (($x86 (not $x614)))
 (let (($x449 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (and $x267 $x449)))
 (let (($x617 (and (not $x414) $x86)))
 (let (($x244 (and (and (and (and (and (and $x617 $x438) $x301) $x233) $x70) $x207) $x352)))
 (let (($x39 (and $x244 $x616)))
 (let (($x464 (= $x39 true)))
 (let (($x222 (= $x464 true)))
 (let (($x626 (= $x222 true)))
 (let (($x187 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x442 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv1 32))) (select input.dst.llvm-mem ?x442))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv2 32))) ?x469))))
 (let ((?x473 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x32 (_ bv1 32))))
 (=> $x413 (= ?x473 ?x348))))))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x513 (_ bv1 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x32 (_ bv1 32))))
 (= $x413 $x153))))))
 ))
 (let (($x78 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (= ?x32 (_ bv0 32))))
 (=> $x447 $x55)))))
 ))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (= ?x513 (_ bv0 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (= ?x32 (_ bv0 32))))
 (= $x447 $x467))))))
 ))
 (let (($x380 (and $x112 $x78)))
 (let (($x332 (and $x380 $x448)))
 (let (($x387 (and $x332 $x187)))
 (let (($x581 (= $x387 true)))
 (let (($x29 (= $x581 true)))
 (let (($x440 (= $x29 true)))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x442 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x442))))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv2 32))) ?x302)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv3 32))) ?x366)))
 (let ((?x473 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x32 (_ bv1 32))))
 (=> $x413 (= ?x473 ?x11)))))))))))
 ))
 (let (($x593 (and $x332 $x100)))
 (let (($x597 (= $x593 true)))
 (let (($x325 (= $x597 true)))
 (let (($x320 (= $x325 true)))
 (let (($x643 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x442 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv1 32))) (select input.dst.llvm-mem ?x442))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x442 (_ bv2 32))) ?x469))))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x54 (_ bv1 32))))
 (=> $x474 (= ?x15 ?x348))))))))))
 ))
 (let (($x84 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x513 (_ bv1 32))))
 (let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x54 (_ bv1 32))))
 (= $x474 $x153))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x54 (_ bv0 32))))
 (=> $x59 $x55)))))
 ))
 (let (($x179 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (= ?x513 (_ bv0 32))))
 (let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x54 (_ bv0 32))))
 (= $x59 $x467))))))
 ))
 (let (($x518 (and $x179 $x374)))
 (let (($x419 (and $x518 $x84)))
 (let (($x506 (and $x419 $x643)))
 (let (($x504 (= $x506 true)))
 (let (($x249 (= $x504 true)))
 (let (($x234 (= $x249 true)))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x442 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x442))))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv2 32))) ?x302)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x442 (_ bv3 32))) ?x366)))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x54 (_ bv1 32))))
 (=> $x474 (= ?x15 ?x11)))))))))))
 ))
 (let (($x590 (and $x419 $x79)))
 (let (($x587 (= $x590 true)))
 (let (($x603 (= $x587 true)))
 (let (($x600 (= $x603 true)))
 (let (($x264 (and $x600 $x234)))
 (let (($x344 (and $x264 $x320)))
 (let (($x170 (and $x344 $x440)))
 (let (($x5 (and $x170 $x626)))
 (let (($x261 (and $x5 $x485)))
 (let (($x483 (and $x261 $x121)))
 (let (($x62 (and $x483 $x355)))
 (let (($x406 (and $x62 $x318)))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x473 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x32 (_ bv1 32))))
 (=> $x413 (= ?x473 ?x15)))))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x54 (_ bv1 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x32 (_ bv1 32))))
 (= $x413 $x474))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x54 (_ bv0 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (= ?x32 (_ bv0 32))))
 (= $x447 $x59))))))
 ))
 (let (($x212 (and $x228 $x78)))
 (let (($x178 (and $x212 $x20)))
 (let (($x564 (and $x178 $x260)))
 (let (($x573 (and $x564 $x406)))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x24 (_ bv1 32))))
 (=> $x363 (= ?x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x144 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x24 (_ bv1 32))))
 (= $x363 (bvuge ?x516 (_ bv1 32)))))))
 ))
 (let (($x182 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (= ?x24 (_ bv0 32))))
 (= $x331 (= ?x516 (_ bv0 32)))))))
 ))
 (let (($x235 (and $x182 $x649)))
 (let (($x422 (and $x235 $x144)))
 (let (($x530 (and $x422 $x522)))
 (let (($x571 (and $x530 $x573)))
 (let (($x357 (=> $x571 $x276)))
 (not $x357))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb5190850)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x73b34d68)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x73b34d6b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb5190853)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x73b34d68)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb5190850)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00004003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00004002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00004001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00004000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x00004003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00004002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00004001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00004000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0000010)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000807)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0000013)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0000010)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000043 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000042 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000041 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000040 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x00000043 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000042 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000041 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000040 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x463 ((_ extract 5 0) input.dst.llvm-%m2)))
 (let (($x259 (= (_ bv0 6) ?x463)))
 (let (($x436 (= $x259 true)))
 (let ((?x236 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x557 (= (_ bv0 2) ?x236)))
 (let (($x116 (= $x557 true)))
 (let (($x185 (= $x116 true)))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x490 (bvadd ?x109 input.dst.llvm-%m2)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv1 32))) (select input.dst.llvm-mem ?x490))))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv2 32))) ?x541))))
 (let ((?x158 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x178 (_ bv1 32))))
 (=> $x419 (= ?x158 ?x554))))))))))
 ))
 (let (($x196 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x596 (_ bv1 32))))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x178 (_ bv1 32))))
 (= $x419 $x412))))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x334 (= false false)))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x473 (= ?x178 (_ bv0 32))))
 (=> $x473 $x334)))))
 ))
 (let (($x551 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x596 (_ bv0 32))))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x473 (= ?x178 (_ bv0 32))))
 (= $x473 $x63))))))
 ))
 (let (($x208 (and $x551 $x326)))
 (let (($x107 (and $x208 $x196)))
 (let (($x350 (and $x107 $x317)))
 (let (($x360 (= $x350 true)))
 (let (($x375 (= $x360 true)))
 (let (($x16 (= $x375 true)))
 (let (($x536 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x490 (bvadd ?x109 input.dst.llvm-%m2)))
 (let ((?x418 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x490 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x490))))
 (let ((?x558 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x490 (_ bv2 32))) ?x418)))
 (let ((?x465 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x490 (_ bv3 32))) ?x558)))
 (let ((?x158 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x178 (_ bv1 32))))
 (=> $x419 (= ?x158 ?x465)))))))))))
 ))
 (let (($x164 (and $x107 $x536)))
 (let (($x580 (= $x164 true)))
 (let (($x186 (= $x580 true)))
 (let (($x290 (= $x186 true)))
 (let (($x636 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x134 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x545 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x430 (and $x545 $x134)))
 (let (($x622 (and $x430 $x636)))
 (let (($x369 (= $x622 true)))
 (let (($x274 (= $x369 true)))
 (let (($x433 (= $x274 true)))
 (let ((?x478 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x454 (= (_ bv0 32) ?x478)))
 (let ((?x509 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x517 (= (_ bv0 32) ?x509)))
 (let ((?x479 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x479)))
 (let ((?x524 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x654 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x524)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x347 (and $x209 $x654)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x505 (and $x75 $x347)))
 (let (($x243 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x481 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x368 (and $x241 $x197)))
 (let (($x575 (not $x368)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (and $x91 $x315)))
 (let (($x275 (and (not $x271) $x575)))
 (let (($x398 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x585 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x585 $x398)))
 (let (($x101 (not $x272)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x427 $x247)))
 (let (($x106 (and (not $x128) $x101)))
 (let (($x262 (and (and (and (and (and (and $x106 $x275) $x481) $x243) $x505) $x18) $x517)))
 (let (($x99 (and $x262 $x454)))
 (let (($x312 (= $x99 true)))
 (let (($x229 (= $x312 true)))
 (let (($x432 (= $x229 true)))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x383 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem ?x383))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv2 32))) ?x402))))
 (let ((?x620 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x184 (_ bv1 32))))
 (=> $x617 (= ?x620 ?x330))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x596 (_ bv1 32))))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x184 (_ bv1 32))))
 (= $x617 $x412))))))
 ))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x334 (= false false)))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x184 (_ bv0 32))))
 (=> $x199 $x334)))))
 ))
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x596 (_ bv0 32))))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x184 (_ bv0 32))))
 (= $x199 $x63))))))
 ))
 (let (($x132 (and $x546 $x440)))
 (let (($x214 (and $x132 $x408)))
 (let (($x577 (and $x214 $x82)))
 (let (($x399 (= $x577 true)))
 (let (($x494 (= $x399 true)))
 (let (($x657 (= $x494 true)))
 (let (($x161 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x383 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x383))))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv2 32))) ?x221)))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv3 32))) ?x373)))
 (let ((?x620 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x184 (_ bv1 32))))
 (=> $x617 (= ?x620 ?x359)))))))))))
 ))
 (let (($x104 (and $x214 $x161)))
 (let (($x404 (= $x104 true)))
 (let (($x142 (= $x404 true)))
 (let (($x493 (= $x142 true)))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x383 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem ?x383))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv2 32))) ?x402))))
 (let ((?x301 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x325 (_ bv1 32))))
 (=> $x86 (= ?x301 ?x330))))))))))
 ))
 (let (($x486 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x596 (_ bv1 32))))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x325 (_ bv1 32))))
 (= $x86 $x412))))))
 ))
 (let (($x573 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x334 (= false false)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x325 (_ bv0 32))))
 (=> $x320 $x334)))))
 ))
 (let (($x592 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x596 (_ bv0 32))))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x325 (_ bv0 32))))
 (= $x320 $x63))))))
 ))
 (let (($x571 (and $x592 $x573)))
 (let (($x117 (and $x571 $x486)))
 (let (($x145 (and $x117 $x336)))
 (let (($x487 (= $x145 true)))
 (let (($x426 (= $x487 true)))
 (let (($x165 (= $x426 true)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x383 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x383))))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv2 32))) ?x221)))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv3 32))) ?x373)))
 (let ((?x301 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x325 (_ bv1 32))))
 (=> $x86 (= ?x301 ?x359)))))))))))
 ))
 (let (($x269 (and $x117 $x210)))
 (let (($x439 (= $x269 true)))
 (let (($x30 (= $x439 true)))
 (let (($x52 (= $x30 true)))
 (let (($x167 (and $x52 $x165)))
 (let (($x27 (and $x167 $x493)))
 (let (($x475 (and $x27 $x657)))
 (let (($x488 (and $x475 $x432)))
 (let (($x638 (and $x488 $x433)))
 (let (($x452 (and $x638 $x290)))
 (let (($x127 (and $x452 $x16)))
 (let (($x563 (and $x127 $x185)))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x301 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x620 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x184 (_ bv1 32))))
 (=> $x617 (= ?x620 ?x301)))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x325 (_ bv1 32))))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x184 (_ bv1 32))))
 (= $x617 $x86))))))
 ))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x325 (_ bv0 32))))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x184 (_ bv0 32))))
 (= $x199 $x320))))))
 ))
 (let (($x170 (and $x387 $x440)))
 (let (($x299 (and $x170 $x624)))
 (let (($x459 (and $x299 $x238)))
 (let (($x252 (and $x459 $x563)))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x158 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x178 (_ bv1 32))))
 (=> $x419 (= ?x158 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x304 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x178 (_ bv1 32))))
 (= $x419 (bvuge ?x474 (_ bv1 32)))))))
 ))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x473 (= ?x178 (_ bv0 32))))
 (= $x473 (= ?x474 (_ bv0 32)))))))
 ))
 (let (($x279 (and $x25 $x326)))
 (let (($x201 (and $x279 $x304)))
 (let (($x11 (and $x201 $x366)))
 (let (($x67 (and $x11 $x252)))
 (let (($x225 (=> $x67 $x436)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x463 ((_ extract 5 0) input.dst.llvm-%m2)))
 (let (($x259 (= (_ bv0 6) ?x463)))
 (let (($x436 (= $x259 true)))
 (let ((?x236 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x557 (= (_ bv0 2) ?x236)))
 (let (($x116 (= $x557 true)))
 (let (($x185 (= $x116 true)))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x490 (bvadd ?x109 input.dst.llvm-%m2)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv1 32))) (select input.dst.llvm-mem ?x490))))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv2 32))) ?x541))))
 (let ((?x158 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x178 (_ bv1 32))))
 (=> $x419 (= ?x158 ?x554))))))))))
 ))
 (let (($x196 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x596 (_ bv1 32))))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x178 (_ bv1 32))))
 (= $x419 $x412))))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x334 (= false false)))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x473 (= ?x178 (_ bv0 32))))
 (=> $x473 $x334)))))
 ))
 (let (($x551 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x596 (_ bv0 32))))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x473 (= ?x178 (_ bv0 32))))
 (= $x473 $x63))))))
 ))
 (let (($x208 (and $x551 $x326)))
 (let (($x107 (and $x208 $x196)))
 (let (($x350 (and $x107 $x317)))
 (let (($x360 (= $x350 true)))
 (let (($x375 (= $x360 true)))
 (let (($x16 (= $x375 true)))
 (let (($x536 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x490 (bvadd ?x109 input.dst.llvm-%m2)))
 (let ((?x418 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x490 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x490))))
 (let ((?x558 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x490 (_ bv2 32))) ?x418)))
 (let ((?x465 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x490 (_ bv3 32))) ?x558)))
 (let ((?x158 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x178 (_ bv1 32))))
 (=> $x419 (= ?x158 ?x465)))))))))))
 ))
 (let (($x164 (and $x107 $x536)))
 (let (($x580 (= $x164 true)))
 (let (($x186 (= $x580 true)))
 (let (($x290 (= $x186 true)))
 (let (($x636 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x134 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x545 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x430 (and $x545 $x134)))
 (let (($x622 (and $x430 $x636)))
 (let (($x369 (= $x622 true)))
 (let (($x274 (= $x369 true)))
 (let (($x433 (= $x274 true)))
 (let ((?x478 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x454 (= (_ bv0 32) ?x478)))
 (let ((?x509 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x517 (= (_ bv0 32) ?x509)))
 (let ((?x479 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x479)))
 (let ((?x524 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x654 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x524)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x347 (and $x209 $x654)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x505 (and $x75 $x347)))
 (let (($x243 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x481 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x368 (and $x241 $x197)))
 (let (($x575 (not $x368)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (and $x91 $x315)))
 (let (($x275 (and (not $x271) $x575)))
 (let (($x398 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x585 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x585 $x398)))
 (let (($x101 (not $x272)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x427 $x247)))
 (let (($x106 (and (not $x128) $x101)))
 (let (($x262 (and (and (and (and (and (and $x106 $x275) $x481) $x243) $x505) $x18) $x517)))
 (let (($x99 (and $x262 $x454)))
 (let (($x312 (= $x99 true)))
 (let (($x229 (= $x312 true)))
 (let (($x432 (= $x229 true)))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x383 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem ?x383))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv2 32))) ?x402))))
 (let ((?x620 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x184 (_ bv1 32))))
 (=> $x617 (= ?x620 ?x330))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x596 (_ bv1 32))))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x184 (_ bv1 32))))
 (= $x617 $x412))))))
 ))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x334 (= false false)))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x184 (_ bv0 32))))
 (=> $x199 $x334)))))
 ))
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x596 (_ bv0 32))))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x184 (_ bv0 32))))
 (= $x199 $x63))))))
 ))
 (let (($x132 (and $x546 $x440)))
 (let (($x214 (and $x132 $x408)))
 (let (($x577 (and $x214 $x82)))
 (let (($x399 (= $x577 true)))
 (let (($x494 (= $x399 true)))
 (let (($x657 (= $x494 true)))
 (let (($x161 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x383 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x383))))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv2 32))) ?x221)))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv3 32))) ?x373)))
 (let ((?x620 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x184 (_ bv1 32))))
 (=> $x617 (= ?x620 ?x359)))))))))))
 ))
 (let (($x104 (and $x214 $x161)))
 (let (($x404 (= $x104 true)))
 (let (($x142 (= $x404 true)))
 (let (($x493 (= $x142 true)))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x383 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem ?x383))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x383 (_ bv2 32))) ?x402))))
 (let ((?x301 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x325 (_ bv1 32))))
 (=> $x86 (= ?x301 ?x330))))))))))
 ))
 (let (($x486 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x596 (_ bv1 32))))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x325 (_ bv1 32))))
 (= $x86 $x412))))))
 ))
 (let (($x573 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x334 (= false false)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x325 (_ bv0 32))))
 (=> $x320 $x334)))))
 ))
 (let (($x592 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x596 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x596 (_ bv0 32))))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x325 (_ bv0 32))))
 (= $x320 $x63))))))
 ))
 (let (($x571 (and $x592 $x573)))
 (let (($x117 (and $x571 $x486)))
 (let (($x145 (and $x117 $x336)))
 (let (($x487 (= $x145 true)))
 (let (($x426 (= $x487 true)))
 (let (($x165 (= $x426 true)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x383 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x383))))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv2 32))) ?x221)))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x383 (_ bv3 32))) ?x373)))
 (let ((?x301 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x325 (_ bv1 32))))
 (=> $x86 (= ?x301 ?x359)))))))))))
 ))
 (let (($x269 (and $x117 $x210)))
 (let (($x439 (= $x269 true)))
 (let (($x30 (= $x439 true)))
 (let (($x52 (= $x30 true)))
 (let (($x167 (and $x52 $x165)))
 (let (($x27 (and $x167 $x493)))
 (let (($x475 (and $x27 $x657)))
 (let (($x488 (and $x475 $x432)))
 (let (($x638 (and $x488 $x433)))
 (let (($x452 (and $x638 $x290)))
 (let (($x127 (and $x452 $x16)))
 (let (($x563 (and $x127 $x185)))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x301 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x620 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x184 (_ bv1 32))))
 (=> $x617 (= ?x620 ?x301)))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x325 (_ bv1 32))))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x184 (_ bv1 32))))
 (= $x617 $x86))))))
 ))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x325 (_ bv0 32))))
 (let ((?x184 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x184 (_ bv0 32))))
 (= $x199 $x320))))))
 ))
 (let (($x170 (and $x387 $x440)))
 (let (($x299 (and $x170 $x624)))
 (let (($x459 (and $x299 $x238)))
 (let (($x252 (and $x459 $x563)))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x158 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x178 (_ bv1 32))))
 (=> $x419 (= ?x158 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x304 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x178 (_ bv1 32))))
 (= $x419 (bvuge ?x474 (_ bv1 32)))))))
 ))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x178 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x473 (= ?x178 (_ bv0 32))))
 (= $x473 (= ?x474 (_ bv0 32)))))))
 ))
 (let (($x279 (and $x25 $x326)))
 (let (($x201 (and $x279 $x304)))
 (let (($x11 (and $x201 $x366)))
 (let (($x67 (and $x11 $x252)))
 (let (($x225 (=> $x67 $x436)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0000010)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000807)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0000013)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0000010)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000008 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000008 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb69b0850)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x73336d68)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x73336d6b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb69b0853)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x73336d68)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb69b0850)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000008 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000008 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x33 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x292 (= (_ bv0 3) ?x33)))
 (let (($x625 (= $x292 true)))
 (let ((?x441 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x606 (= (_ bv0 2) ?x441)))
 (let (($x514 (= $x606 true)))
 (let (($x329 (= $x514 true)))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x464 (bvadd ?x216 input.dst.llvm-%m2)))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x464 (_ bv1 32))) (select input.dst.llvm-mem ?x464))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x464 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x464 (_ bv2 32))) ?x378))))
 (let ((?x417 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x299 (_ bv1 32))))
 (=> $x117 (= ?x417 ?x61))))))))))
 ))
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x450 (_ bv1 32))))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x299 (_ bv1 32))))
 (= $x117 $x456))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x233 (= false false)))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (= ?x299 (_ bv0 32))))
 (=> $x620 $x233)))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x450 (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (= ?x299 (_ bv0 32))))
 (= $x620 $x236))))))
 ))
 (let (($x65 (and $x213 $x355)))
 (let (($x251 (and $x65 $x611)))
 (let (($x119 (and $x251 $x133)))
 (let (($x171 (= $x119 true)))
 (let (($x69 (= $x171 true)))
 (let (($x584 (= $x69 true)))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x464 (bvadd ?x216 input.dst.llvm-%m2)))
 (let ((?x411 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x464 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x464))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x464 (_ bv2 32))) ?x411)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x464 (_ bv3 32))) ?x123)))
 (let ((?x417 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x299 (_ bv1 32))))
 (=> $x117 (= ?x417 ?x263)))))))))))
 ))
 (let (($x485 (and $x251 $x43)))
 (let (($x261 (= $x485 true)))
 (let (($x569 (= $x261 true)))
 (let (($x151 (= $x569 true)))
 (let (($x631 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x278 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x623 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x476 (and $x623 $x278)))
 (let (($x632 (and $x476 $x631)))
 (let (($x90 (= $x632 true)))
 (let (($x405 (= $x90 true)))
 (let (($x313 (= $x405 true)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x37 (= (_ bv0 32) ?x59)))
 (let ((?x319 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x54 (= (_ bv0 32) ?x319)))
 (let ((?x287 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x287)))
 (let ((?x560 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x559 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x560)))
 (let (($x421 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x421 $x559)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x415 (and $x83 $x74)))
 (let (($x114 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x400 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x362 (and $x400 $x73)))
 (let (($x103 (not $x362)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x311 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x612 (and $x311 $x237)))
 (let (($x231 (and (not $x612) $x103)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x649 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x363 (and $x649 $x235)))
 (let (($x451 (not $x363)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x331 $x81)))
 (let (($x87 (and (not $x55) $x451)))
 (let (($x280 (and (and (and (and (and (and $x87 $x231) $x255) $x114) $x415) $x224) $x54)))
 (let (($x250 (and $x280 $x37)))
 (let (($x358 (= $x250 true)))
 (let (($x335 (= $x358 true)))
 (let (($x370 (= $x335 true)))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x38 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x382))))
 (let ((?x193 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x198 (_ bv1 32))))
 (=> $x106 (= ?x193 ?x333))))))))))
 ))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x450 (_ bv1 32))))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x198 (_ bv1 32))))
 (= $x106 $x456))))))
 ))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x233 (= false false)))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (= ?x198 (_ bv0 32))))
 (=> $x658 $x233)))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x450 (_ bv0 32))))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (= ?x198 (_ bv0 32))))
 (= $x658 $x236))))))
 ))
 (let (($x401 (and $x327 $x657)))
 (let (($x242 (and $x401 $x268)))
 (let (($x72 (and $x242 $x98)))
 (let (($x155 (= $x72 true)))
 (let (($x345 (= $x155 true)))
 (let (($x428 (= $x345 true)))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x38 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x391 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x38))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv2 32))) ?x391)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv3 32))) ?x211)))
 (let ((?x193 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x198 (_ bv1 32))))
 (=> $x106 (= ?x193 ?x93)))))))))))
 ))
 (let (($x71 (and $x242 $x435)))
 (let (($x531 (= $x71 true)))
 (let (($x556 (= $x531 true)))
 (let (($x663 (= $x556 true)))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x38 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x382))))
 (let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x142 (_ bv1 32))))
 (=> $x101 (= ?x481 ?x333))))))))))
 ))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x450 (_ bv1 32))))
 (let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x142 (_ bv1 32))))
 (= $x101 $x456))))))
 ))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x233 (= false false)))
 (let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x493 (= ?x142 (_ bv0 32))))
 (=> $x493 $x233)))))
 ))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x450 (_ bv0 32))))
 (let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x493 (= ?x142 (_ bv0 32))))
 (= $x493 $x236))))))
 ))
 (let (($x67 (and $x116 $x252)))
 (let (($x437 (and $x67 $x590)))
 (let (($x570 (and $x437 $x324)))
 (let (($x491 (= $x570 true)))
 (let (($x581 (= $x491 true)))
 (let (($x129 (= $x581 true)))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x38 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x391 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x38))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv2 32))) ?x391)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv3 32))) ?x211)))
 (let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x142 (_ bv1 32))))
 (=> $x101 (= ?x481 ?x93)))))))))))
 ))
 (let (($x23 (and $x437 $x529)))
 (let (($x338 (= $x23 true)))
 (let (($x162 (= $x338 true)))
 (let (($x202 (= $x162 true)))
 (let (($x156 (and $x202 $x129)))
 (let (($x646 (and $x156 $x663)))
 (let (($x377 (and $x646 $x428)))
 (let (($x130 (and $x377 $x370)))
 (let (($x351 (and $x130 $x313)))
 (let (($x194 (and $x351 $x151)))
 (let (($x148 (and $x194 $x584)))
 (let (($x608 (and $x148 $x329)))
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x193 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x198 (_ bv1 32))))
 (=> $x106 (= ?x193 ?x481)))))))
 ))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x142 (_ bv1 32))))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x198 (_ bv1 32))))
 (= $x106 $x101))))))
 ))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x493 (= ?x142 (_ bv0 32))))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (= ?x198 (_ bv0 32))))
 (= $x658 $x493))))))
 ))
 (let (($x475 (and $x577 $x657)))
 (let (($x271 (and $x475 $x315)))
 (let (($x75 (and $x271 $x650)))
 (let (($x379 (and $x75 $x608)))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x417 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x299 (_ bv1 32))))
 (=> $x117 (= ?x417 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x299 (_ bv1 32))))
 (= $x117 (bvuge ?x86 (_ bv1 32)))))))
 ))
 (let (($x578 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (= ?x299 (_ bv0 32))))
 (= $x620 (= ?x86 (_ bv0 32)))))))
 ))
 (let (($x574 (and $x578 $x355)))
 (let (($x109 (and $x574 $x328)))
 (let (($x359 (and $x109 $x373)))
 (let (($x628 (and $x359 $x379)))
 (let (($x46 (=> $x628 $x625)))
 (not $x46))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x33 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x292 (= (_ bv0 3) ?x33)))
 (let (($x625 (= $x292 true)))
 (let ((?x441 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x606 (= (_ bv0 2) ?x441)))
 (let (($x514 (= $x606 true)))
 (let (($x329 (= $x514 true)))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x464 (bvadd ?x216 input.dst.llvm-%m2)))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x464 (_ bv1 32))) (select input.dst.llvm-mem ?x464))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x464 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x464 (_ bv2 32))) ?x378))))
 (let ((?x417 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x299 (_ bv1 32))))
 (=> $x117 (= ?x417 ?x61))))))))))
 ))
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x450 (_ bv1 32))))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x299 (_ bv1 32))))
 (= $x117 $x456))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x233 (= false false)))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (= ?x299 (_ bv0 32))))
 (=> $x620 $x233)))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x450 (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (= ?x299 (_ bv0 32))))
 (= $x620 $x236))))))
 ))
 (let (($x65 (and $x213 $x355)))
 (let (($x251 (and $x65 $x611)))
 (let (($x119 (and $x251 $x133)))
 (let (($x171 (= $x119 true)))
 (let (($x69 (= $x171 true)))
 (let (($x584 (= $x69 true)))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x464 (bvadd ?x216 input.dst.llvm-%m2)))
 (let ((?x411 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x464 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x464))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x464 (_ bv2 32))) ?x411)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x464 (_ bv3 32))) ?x123)))
 (let ((?x417 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x299 (_ bv1 32))))
 (=> $x117 (= ?x417 ?x263)))))))))))
 ))
 (let (($x485 (and $x251 $x43)))
 (let (($x261 (= $x485 true)))
 (let (($x569 (= $x261 true)))
 (let (($x151 (= $x569 true)))
 (let (($x631 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x278 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x623 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x476 (and $x623 $x278)))
 (let (($x632 (and $x476 $x631)))
 (let (($x90 (= $x632 true)))
 (let (($x405 (= $x90 true)))
 (let (($x313 (= $x405 true)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x37 (= (_ bv0 32) ?x59)))
 (let ((?x319 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x54 (= (_ bv0 32) ?x319)))
 (let ((?x287 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x287)))
 (let ((?x560 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x559 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x560)))
 (let (($x421 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x421 $x559)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x415 (and $x83 $x74)))
 (let (($x114 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x400 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x362 (and $x400 $x73)))
 (let (($x103 (not $x362)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x311 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x612 (and $x311 $x237)))
 (let (($x231 (and (not $x612) $x103)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x649 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x363 (and $x649 $x235)))
 (let (($x451 (not $x363)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x331 $x81)))
 (let (($x87 (and (not $x55) $x451)))
 (let (($x280 (and (and (and (and (and (and $x87 $x231) $x255) $x114) $x415) $x224) $x54)))
 (let (($x250 (and $x280 $x37)))
 (let (($x358 (= $x250 true)))
 (let (($x335 (= $x358 true)))
 (let (($x370 (= $x335 true)))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x38 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x382))))
 (let ((?x193 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x198 (_ bv1 32))))
 (=> $x106 (= ?x193 ?x333))))))))))
 ))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x450 (_ bv1 32))))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x198 (_ bv1 32))))
 (= $x106 $x456))))))
 ))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x233 (= false false)))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (= ?x198 (_ bv0 32))))
 (=> $x658 $x233)))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x450 (_ bv0 32))))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (= ?x198 (_ bv0 32))))
 (= $x658 $x236))))))
 ))
 (let (($x401 (and $x327 $x657)))
 (let (($x242 (and $x401 $x268)))
 (let (($x72 (and $x242 $x98)))
 (let (($x155 (= $x72 true)))
 (let (($x345 (= $x155 true)))
 (let (($x428 (= $x345 true)))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x38 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x391 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x38))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv2 32))) ?x391)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv3 32))) ?x211)))
 (let ((?x193 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x198 (_ bv1 32))))
 (=> $x106 (= ?x193 ?x93)))))))))))
 ))
 (let (($x71 (and $x242 $x435)))
 (let (($x531 (= $x71 true)))
 (let (($x556 (= $x531 true)))
 (let (($x663 (= $x556 true)))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x38 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x382))))
 (let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x142 (_ bv1 32))))
 (=> $x101 (= ?x481 ?x333))))))))))
 ))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x450 (_ bv1 32))))
 (let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x142 (_ bv1 32))))
 (= $x101 $x456))))))
 ))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x233 (= false false)))
 (let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x493 (= ?x142 (_ bv0 32))))
 (=> $x493 $x233)))))
 ))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x450 (_ bv0 32))))
 (let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x493 (= ?x142 (_ bv0 32))))
 (= $x493 $x236))))))
 ))
 (let (($x67 (and $x116 $x252)))
 (let (($x437 (and $x67 $x590)))
 (let (($x570 (and $x437 $x324)))
 (let (($x491 (= $x570 true)))
 (let (($x581 (= $x491 true)))
 (let (($x129 (= $x581 true)))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x38 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x391 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x38))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv2 32))) ?x391)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x38 (_ bv3 32))) ?x211)))
 (let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x142 (_ bv1 32))))
 (=> $x101 (= ?x481 ?x93)))))))))))
 ))
 (let (($x23 (and $x437 $x529)))
 (let (($x338 (= $x23 true)))
 (let (($x162 (= $x338 true)))
 (let (($x202 (= $x162 true)))
 (let (($x156 (and $x202 $x129)))
 (let (($x646 (and $x156 $x663)))
 (let (($x377 (and $x646 $x428)))
 (let (($x130 (and $x377 $x370)))
 (let (($x351 (and $x130 $x313)))
 (let (($x194 (and $x351 $x151)))
 (let (($x148 (and $x194 $x584)))
 (let (($x608 (and $x148 $x329)))
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x193 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x198 (_ bv1 32))))
 (=> $x106 (= ?x193 ?x481)))))))
 ))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x142 (_ bv1 32))))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x198 (_ bv1 32))))
 (= $x106 $x101))))))
 ))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x493 (= ?x142 (_ bv0 32))))
 (let ((?x198 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (= ?x198 (_ bv0 32))))
 (= $x658 $x493))))))
 ))
 (let (($x475 (and $x577 $x657)))
 (let (($x271 (and $x475 $x315)))
 (let (($x75 (and $x271 $x650)))
 (let (($x379 (and $x75 $x608)))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x417 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x299 (_ bv1 32))))
 (=> $x117 (= ?x417 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x299 (_ bv1 32))))
 (= $x117 (bvuge ?x86 (_ bv1 32)))))))
 ))
 (let (($x578 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (= ?x299 (_ bv0 32))))
 (= $x620 (= ?x86 (_ bv0 32)))))))
 ))
 (let (($x574 (and $x578 $x355)))
 (let (($x109 (and $x574 $x328)))
 (let (($x359 (and $x109 $x373)))
 (let (($x628 (and $x359 $x379)))
 (let (($x46 (=> $x628 $x625)))
 (not $x46))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe6b18c74)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x53d230e8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x53d230eb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe6b18c77)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x53d230e8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe6b18c74)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000004 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000004 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x626)))
 (let ((?x734 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x730))))
 (let ((?x737 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x734)))
 (let ((?x740 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x737)))
 (let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x556 (_ bv1 32))))
 (=> $x451 (= ?x255 ?x740)))))))))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (bvuge ?x641 (_ bv1 32))))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x556 (_ bv1 32))))
 (= $x451 $x454))))))
 ))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x243 (= false false)))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x663 (= ?x556 (_ bv0 32))))
 (=> $x663 $x243)))))
 ))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x641 (_ bv0 32))))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x663 (= ?x556 (_ bv0 32))))
 (= $x663 $x659))))))
 ))
 (let (($x583 (and $x483 $x455)))
 (let (($x501 (and $x583 $x138)))
 (let (($x744 (and $x501 $x743)))
 (let (($x745 (= $x744 true)))
 (let (($x746 (= $x745 true)))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x573 (bvadd ?x626 input.dst.llvm-%m2)))
 (let ((?x561 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem ?x573))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv2 32))) ?x561))))
 (let ((?x407 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x271 (_ bv1 32))))
 (=> $x437 (= ?x407 ?x305))))))))))
 ))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (bvuge ?x641 (_ bv1 32))))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x271 (_ bv1 32))))
 (= $x437 $x454))))))
 ))
 (let (($x16 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x243 (= false false)))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x271 (_ bv0 32))))
 (=> $x193 $x243)))))
 ))
 (let (($x247 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x641 (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x271 (_ bv0 32))))
 (= $x193 $x659))))))
 ))
 (let (($x128 (and $x247 $x16)))
 (let (($x302 (and $x128 $x195)))
 (let (($x68 (and $x302 $x316)))
 (let (($x218 (= $x68 true)))
 (let (($x492 (= $x218 true)))
 (let (($x286 (= $x492 true)))
 (let (($x490 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x638 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x208 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x274 (and $x208 $x638)))
 (let (($x431 (and $x274 $x490)))
 (let (($x434 (= $x431 true)))
 (let (($x266 (= $x434 true)))
 (let (($x141 (= $x266 true)))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x200))))
 (let ((?x177 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x270 (_ bv1 32))))
 (=> $x87 (= ?x177 ?x361))))))))))
 ))
 (let (($x614 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (bvuge ?x641 (_ bv1 32))))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x270 (_ bv1 32))))
 (= $x87 $x454))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x243 (= false false)))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x270 (_ bv0 32))))
 (=> $x136 $x243)))))
 ))
 (let (($x593 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x641 (_ bv0 32))))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x270 (_ bv0 32))))
 (= $x136 $x659))))))
 ))
 (let (($x484 (and $x593 $x428)))
 (let (($x414 (and $x484 $x614)))
 (let (($x77 (and $x414 $x430)))
 (let (($x636 (= $x77 true)))
 (let (($x622 (= $x636 true)))
 (let (($x369 (= $x622 true)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x439 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x50))))
 (let ((?x444 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv2 32))) ?x439)))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv3 32))) ?x444)))
 (let ((?x177 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x270 (_ bv1 32))))
 (=> $x87 (= ?x177 ?x588)))))))))))
 ))
 (let (($x510 (and $x414 $x126)))
 (let (($x488 (= $x510 true)))
 (let (($x99 (= $x488 true)))
 (let (($x478 (= $x99 true)))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x573 (bvadd ?x626 input.dst.llvm-%m2)))
 (let ((?x537 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x573))))
 (let ((?x582 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv2 32))) ?x537)))
 (let ((?x619 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv3 32))) ?x582)))
 (let ((?x407 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x271 (_ bv1 32))))
 (=> $x437 (= ?x407 ?x619)))))))))))
 ))
 (let (($x264 (and $x302 $x506)))
 (let (($x365 (= $x264 true)))
 (let (($x380 (= $x365 true)))
 (let (($x112 (= $x380 true)))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x200))))
 (let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x556 (_ bv1 32))))
 (=> $x451 (= ?x255 ?x361))))))))))
 ))
 (let (($x31 (and $x501 $x526)))
 (let (($x635 (= $x31 true)))
 (let (($x337 (= $x635 true)))
 (let (($x466 (= $x337 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x439 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x50))))
 (let ((?x444 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv2 32))) ?x439)))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv3 32))) ?x444)))
 (let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x556 (_ bv1 32))))
 (=> $x451 (= ?x255 ?x588)))))))))))
 ))
 (let (($x395 (and $x501 $x353)))
 (let (($x166 (= $x395 true)))
 (let (($x354 (= $x166 true)))
 (let (($x610 (= $x354 true)))
 (let ((?x169 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x192 (= (_ bv0 32) ?x169)))
 (let ((?x647 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x108 (= (_ bv0 32) ?x647)))
 (let ((?x251 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x464 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x213 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x213)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x183 (and $x351 $x65)))
 (let (($x313 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x611 (and $x313 $x183)))
 (let (($x405 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x632 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x591 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x442 $x591)))
 (let (($x476 (not $x278)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x518 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x623 (and $x518 $x19)))
 (let (($x124 (and (not $x623) $x476)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x358 (and $x37 $x250)))
 (let (($x335 (not $x358)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x467 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (and $x467 $x54)))
 (let (($x130 (and (not $x280) $x335)))
 (let (($x263 (and (and (and (and (and (and $x130 $x124) $x632) $x405) $x611) $x464) $x108)))
 (let (($x85 (and $x263 $x192)))
 (let (($x372 (= $x85 true)))
 (let (($x43 (= $x372 true)))
 (let (($x485 (= $x43 true)))
 (let ((?x559 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x74 (= (_ bv0 2) ?x559)))
 (let (($x415 (= $x74 true)))
 (let (($x513 (= $x415 true)))
 (let (($x261 (and $x513 $x485)))
 (let (($x589 (and $x261 $x610)))
 (let (($x648 (and $x589 $x466)))
 (let (($x384 (and $x648 $x112)))
 (let (($x312 (and $x384 $x478)))
 (let (($x196 (and $x312 $x369)))
 (let (($x423 (and $x196 $x141)))
 (let (($x254 (and $x423 $x286)))
 (let (($x548 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x177 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x270 (_ bv1 32))))
 (=> $x87 (= ?x177 ?x255)))))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x556 (_ bv1 32))))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x270 (_ bv1 32))))
 (= $x87 $x451))))))
 ))
 (let (($x72 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x663 (= ?x556 (_ bv0 32))))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x270 (_ bv0 32))))
 (= $x136 $x663))))))
 ))
 (let (($x377 (and $x72 $x428)))
 (let (($x612 (and $x377 $x237)))
 (let (($x83 (and $x612 $x548)))
 (let (($x521 (and $x83 $x254)))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x271 (_ bv1 32))))
 (=> $x437 (= ?x407 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x181 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x271 (_ bv1 32))))
 (= $x437 (bvuge ?x101 (_ bv1 32)))))))
 ))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x271 (_ bv0 32))))
 (= $x193 (= ?x101 (_ bv0 32)))))))
 ))
 (let (($x654 (and $x389 $x16)))
 (let (($x216 (and $x654 $x181)))
 (let (($x93 (and $x216 $x211)))
 (let (($x549 (and $x93 $x521)))
 (let (($x747 (=> $x549 $x746)))
 (not $x747)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x626)))
 (let ((?x734 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x730))))
 (let ((?x737 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x734)))
 (let ((?x740 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x737)))
 (let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x556 (_ bv1 32))))
 (=> $x451 (= ?x255 ?x740)))))))))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (bvuge ?x641 (_ bv1 32))))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x556 (_ bv1 32))))
 (= $x451 $x454))))))
 ))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x243 (= false false)))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x663 (= ?x556 (_ bv0 32))))
 (=> $x663 $x243)))))
 ))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x641 (_ bv0 32))))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x663 (= ?x556 (_ bv0 32))))
 (= $x663 $x659))))))
 ))
 (let (($x583 (and $x483 $x455)))
 (let (($x501 (and $x583 $x138)))
 (let (($x744 (and $x501 $x743)))
 (let (($x745 (= $x744 true)))
 (let (($x746 (= $x745 true)))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x573 (bvadd ?x626 input.dst.llvm-%m2)))
 (let ((?x561 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem ?x573))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv2 32))) ?x561))))
 (let ((?x407 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x271 (_ bv1 32))))
 (=> $x437 (= ?x407 ?x305))))))))))
 ))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (bvuge ?x641 (_ bv1 32))))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x271 (_ bv1 32))))
 (= $x437 $x454))))))
 ))
 (let (($x16 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x243 (= false false)))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x271 (_ bv0 32))))
 (=> $x193 $x243)))))
 ))
 (let (($x247 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x641 (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x271 (_ bv0 32))))
 (= $x193 $x659))))))
 ))
 (let (($x128 (and $x247 $x16)))
 (let (($x302 (and $x128 $x195)))
 (let (($x68 (and $x302 $x316)))
 (let (($x218 (= $x68 true)))
 (let (($x492 (= $x218 true)))
 (let (($x286 (= $x492 true)))
 (let (($x490 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x638 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x208 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x274 (and $x208 $x638)))
 (let (($x431 (and $x274 $x490)))
 (let (($x434 (= $x431 true)))
 (let (($x266 (= $x434 true)))
 (let (($x141 (= $x266 true)))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x200))))
 (let ((?x177 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x270 (_ bv1 32))))
 (=> $x87 (= ?x177 ?x361))))))))))
 ))
 (let (($x614 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (bvuge ?x641 (_ bv1 32))))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x270 (_ bv1 32))))
 (= $x87 $x454))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x243 (= false false)))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x270 (_ bv0 32))))
 (=> $x136 $x243)))))
 ))
 (let (($x593 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x641 (_ bv0 32))))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x270 (_ bv0 32))))
 (= $x136 $x659))))))
 ))
 (let (($x484 (and $x593 $x428)))
 (let (($x414 (and $x484 $x614)))
 (let (($x77 (and $x414 $x430)))
 (let (($x636 (= $x77 true)))
 (let (($x622 (= $x636 true)))
 (let (($x369 (= $x622 true)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x439 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x50))))
 (let ((?x444 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv2 32))) ?x439)))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv3 32))) ?x444)))
 (let ((?x177 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x270 (_ bv1 32))))
 (=> $x87 (= ?x177 ?x588)))))))))))
 ))
 (let (($x510 (and $x414 $x126)))
 (let (($x488 (= $x510 true)))
 (let (($x99 (= $x488 true)))
 (let (($x478 (= $x99 true)))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x573 (bvadd ?x626 input.dst.llvm-%m2)))
 (let ((?x537 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x573))))
 (let ((?x582 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv2 32))) ?x537)))
 (let ((?x619 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv3 32))) ?x582)))
 (let ((?x407 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x271 (_ bv1 32))))
 (=> $x437 (= ?x407 ?x619)))))))))))
 ))
 (let (($x264 (and $x302 $x506)))
 (let (($x365 (= $x264 true)))
 (let (($x380 (= $x365 true)))
 (let (($x112 (= $x380 true)))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x200))))
 (let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x556 (_ bv1 32))))
 (=> $x451 (= ?x255 ?x361))))))))))
 ))
 (let (($x31 (and $x501 $x526)))
 (let (($x635 (= $x31 true)))
 (let (($x337 (= $x635 true)))
 (let (($x466 (= $x337 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x439 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x50))))
 (let ((?x444 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv2 32))) ?x439)))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv3 32))) ?x444)))
 (let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x556 (_ bv1 32))))
 (=> $x451 (= ?x255 ?x588)))))))))))
 ))
 (let (($x395 (and $x501 $x353)))
 (let (($x166 (= $x395 true)))
 (let (($x354 (= $x166 true)))
 (let (($x610 (= $x354 true)))
 (let ((?x169 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x192 (= (_ bv0 32) ?x169)))
 (let ((?x647 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x108 (= (_ bv0 32) ?x647)))
 (let ((?x251 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x464 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x213 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x213)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x183 (and $x351 $x65)))
 (let (($x313 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x611 (and $x313 $x183)))
 (let (($x405 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x632 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x591 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x442 $x591)))
 (let (($x476 (not $x278)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x518 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x623 (and $x518 $x19)))
 (let (($x124 (and (not $x623) $x476)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x358 (and $x37 $x250)))
 (let (($x335 (not $x358)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x467 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (and $x467 $x54)))
 (let (($x130 (and (not $x280) $x335)))
 (let (($x263 (and (and (and (and (and (and $x130 $x124) $x632) $x405) $x611) $x464) $x108)))
 (let (($x85 (and $x263 $x192)))
 (let (($x372 (= $x85 true)))
 (let (($x43 (= $x372 true)))
 (let (($x485 (= $x43 true)))
 (let ((?x559 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x74 (= (_ bv0 2) ?x559)))
 (let (($x415 (= $x74 true)))
 (let (($x513 (= $x415 true)))
 (let (($x261 (and $x513 $x485)))
 (let (($x589 (and $x261 $x610)))
 (let (($x648 (and $x589 $x466)))
 (let (($x384 (and $x648 $x112)))
 (let (($x312 (and $x384 $x478)))
 (let (($x196 (and $x312 $x369)))
 (let (($x423 (and $x196 $x141)))
 (let (($x254 (and $x423 $x286)))
 (let (($x548 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x177 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x270 (_ bv1 32))))
 (=> $x87 (= ?x177 ?x255)))))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x556 (_ bv1 32))))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x270 (_ bv1 32))))
 (= $x87 $x451))))))
 ))
 (let (($x72 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x556 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x663 (= ?x556 (_ bv0 32))))
 (let ((?x270 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x270 (_ bv0 32))))
 (= $x136 $x663))))))
 ))
 (let (($x377 (and $x72 $x428)))
 (let (($x612 (and $x377 $x237)))
 (let (($x83 (and $x612 $x548)))
 (let (($x521 (and $x83 $x254)))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x271 (_ bv1 32))))
 (=> $x437 (= ?x407 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x181 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x271 (_ bv1 32))))
 (= $x437 (bvuge ?x101 (_ bv1 32)))))))
 ))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x271 (_ bv0 32))))
 (= $x193 (= ?x101 (_ bv0 32)))))))
 ))
 (let (($x654 (and $x389 $x16)))
 (let (($x216 (and $x654 $x181)))
 (let (($x93 (and $x216 $x211)))
 (let (($x549 (and $x93 $x521)))
 (let (($x747 (=> $x549 $x746)))
 (not $x747)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ff73597)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf6fa4b73)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7c400005) #x04
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!1 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc55086d4)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x24500373)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc55086d7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc55086d4)
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x598 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x231))))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x417)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x373)))
 (let ((?x361 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (=> $x353 (= ?x361 ?x198)))))))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x61 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (= $x353 $x240))))))
 ))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x501 (= ?x138 (_ bv0 32))))
 (=> $x501 $x114)))))
 ))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x61 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x501 (= ?x138 (_ bv0 32))))
 (= $x501 $x115))))))
 ))
 (let (($x21 (and $x79 $x50)))
 (let (($x403 (and $x21 $x457)))
 (let (($x29 (and $x403 $x323)))
 (let (($x440 (= $x29 true)))
 (let (($x199 (= $x440 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x230 (= (_ bv0 2) ?x132)))
 (let (($x661 (= $x230 true)))
 (let (($x656 (= $x661 true)))
 (let (($x480 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x598 input.dst.llvm-%m2)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x248))))
 (let ((?x124 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x612 (_ bv1 32))))
 (=> $x37 (= ?x124 ?x426))))))))))
 ))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x61 (_ bv1 32))))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x612 (_ bv1 32))))
 (= $x37 $x240))))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x612 (_ bv0 32))))
 (=> $x177 $x114)))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x61 (_ bv0 32))))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x612 (_ bv0 32))))
 (= $x177 $x115))))))
 ))
 (let (($x153 (and $x228 $x421)))
 (let (($x156 (and $x153 $x129)))
 (let (($x173 (and $x156 $x480)))
 (let (($x336 (= $x173 true)))
 (let (($x165 (= $x336 true)))
 (let (($x167 (= $x165 true)))
 (let (($x69 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x514 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x383 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x595 (and $x383 $x514)))
 (let (($x441 (and $x595 $x69)))
 (let (($x329 (= $x441 true)))
 (let (($x608 (= $x329 true)))
 (let (($x628 (= $x608 true)))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x15))))
 (let ((?x361 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (=> $x353 (= ?x361 ?x13))))))))))
 ))
 (let (($x425 (and $x403 $x367)))
 (let (($x110 (= $x425 true)))
 (let (($x352 (= $x110 true)))
 (let (($x653 (= $x352 true)))
 (let (($x282 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x607 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x119))))
 (let ((?x603 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv2 32))) ?x607)))
 (let ((?x470 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv3 32))) ?x603)))
 (let ((?x361 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (=> $x353 (= ?x361 ?x470)))))))))))
 ))
 (let (($x325 (and $x403 $x282)))
 (let (($x238 (= $x325 true)))
 (let (($x568 (= $x238 true)))
 (let (($x596 (= $x568 true)))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x598 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x231))))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x417)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x373)))
 (let ((?x124 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x612 (_ bv1 32))))
 (=> $x37 (= ?x124 ?x198)))))))))))
 ))
 (let (($x494 (and $x156 $x577)))
 (let (($x657 (= $x494 true)))
 (let (($x557 (= $x657 true)))
 (let (($x116 (= $x557 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x15))))
 (let ((?x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x583 (_ bv1 32))))
 (=> $x604 (= ?x357 ?x13))))))))))
 ))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x61 (_ bv1 32))))
 (let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x583 (_ bv1 32))))
 (= $x604 $x240))))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x583 (_ bv0 32))))
 (=> $x454 $x114)))))
 ))
 (let (($x356 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x61 (_ bv0 32))))
 (let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x583 (_ bv0 32))))
 (= $x454 $x115))))))
 ))
 (let (($x186 (and $x356 $x314)))
 (let (($x452 (and $x186 $x580)))
 (let (($x299 (and $x452 $x474)))
 (let (($x301 (= $x299 true)))
 (let (($x233 (= $x301 true)))
 (let (($x459 (= $x233 true)))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x607 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x119))))
 (let ((?x603 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv2 32))) ?x607)))
 (let ((?x470 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv3 32))) ?x603)))
 (let ((?x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x583 (_ bv1 32))))
 (=> $x604 (= ?x357 ?x470)))))))))))
 ))
 (let (($x317 (and $x452 $x458)))
 (let (($x214 (= $x317 true)))
 (let (($x393 (= $x214 true)))
 (let (($x469 (= $x393 true)))
 (let ((?x126 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x510 (= (_ bv0 32) ?x126)))
 (let ((?x424 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x139 (= (_ bv0 32) ?x424)))
 (let ((?x614 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x614)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x593 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x484 (and $x112 $x593)))
 (let (($x380 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x500 (and $x380 $x484)))
 (let (($x365 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x506 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x412 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x572 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x537 (and $x572 $x412)))
 (let (($x582 (not $x537)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x397 (and $x222 $x446)))
 (let (($x644 (and (not $x397) $x582)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x89 $x195)))
 (let (($x573 (not $x302)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x466 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x466 $x104)))
 (let (($x643 (and (not $x247) $x573)))
 (let (($x621 (and (and (and (and (and (and $x643 $x644) $x506) $x365) $x500) $x414) $x139)))
 (let (($x430 (and $x621 $x510)))
 (let (($x77 (= $x430 true)))
 (let (($x636 (= $x77 true)))
 (let (($x622 (= $x636 true)))
 (let (($x205 (and $x622 $x469)))
 (let (($x355 (and $x205 $x459)))
 (let (($x563 (and $x355 $x116)))
 (let (($x62 (and $x563 $x596)))
 (let (($x542 (and $x62 $x653)))
 (let (($x379 (and $x542 $x628)))
 (let (($x546 (and $x379 $x167)))
 (let (($x398 (and $x546 $x656)))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x361 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (=> $x353 (= ?x361 ?x357)))))))
 ))
 (let (($x166 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x583 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (= $x353 $x604))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x583 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x501 (= ?x138 (_ bv0 32))))
 (= $x501 $x454))))))
 ))
 (let (($x42 (and $x149 $x50)))
 (let (($x354 (and $x42 $x166)))
 (let (($x31 (and $x354 $x526)))
 (let (($x651 (and $x31 $x398)))
 (let (($x632 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x124 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x612 (_ bv1 32))))
 (=> $x37 (= ?x124 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x451 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x612 (_ bv1 32))))
 (= $x37 (bvuge ?x451 (_ bv1 32)))))))
 ))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x451 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x612 (_ bv0 32))))
 (= $x177 (= ?x451 (_ bv0 32)))))))
 ))
 (let (($x560 (and $x6 $x421)))
 (let (($x335 (and $x560 $x358)))
 (let (($x36 (and $x335 $x632)))
 (let (($x272 (and $x36 $x651)))
 (let (($x187 (=> $x272 $x199)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x598 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x231))))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x417)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x373)))
 (let ((?x361 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (=> $x353 (= ?x361 ?x198)))))))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x61 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (= $x353 $x240))))))
 ))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x501 (= ?x138 (_ bv0 32))))
 (=> $x501 $x114)))))
 ))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x61 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x501 (= ?x138 (_ bv0 32))))
 (= $x501 $x115))))))
 ))
 (let (($x21 (and $x79 $x50)))
 (let (($x403 (and $x21 $x457)))
 (let (($x29 (and $x403 $x323)))
 (let (($x440 (= $x29 true)))
 (let (($x199 (= $x440 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x230 (= (_ bv0 2) ?x132)))
 (let (($x661 (= $x230 true)))
 (let (($x656 (= $x661 true)))
 (let (($x480 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x598 input.dst.llvm-%m2)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x248))))
 (let ((?x124 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x612 (_ bv1 32))))
 (=> $x37 (= ?x124 ?x426))))))))))
 ))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x61 (_ bv1 32))))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x612 (_ bv1 32))))
 (= $x37 $x240))))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x612 (_ bv0 32))))
 (=> $x177 $x114)))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x61 (_ bv0 32))))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x612 (_ bv0 32))))
 (= $x177 $x115))))))
 ))
 (let (($x153 (and $x228 $x421)))
 (let (($x156 (and $x153 $x129)))
 (let (($x173 (and $x156 $x480)))
 (let (($x336 (= $x173 true)))
 (let (($x165 (= $x336 true)))
 (let (($x167 (= $x165 true)))
 (let (($x69 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x514 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x383 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x595 (and $x383 $x514)))
 (let (($x441 (and $x595 $x69)))
 (let (($x329 (= $x441 true)))
 (let (($x608 (= $x329 true)))
 (let (($x628 (= $x608 true)))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x15))))
 (let ((?x361 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (=> $x353 (= ?x361 ?x13))))))))))
 ))
 (let (($x425 (and $x403 $x367)))
 (let (($x110 (= $x425 true)))
 (let (($x352 (= $x110 true)))
 (let (($x653 (= $x352 true)))
 (let (($x282 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x607 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x119))))
 (let ((?x603 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv2 32))) ?x607)))
 (let ((?x470 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv3 32))) ?x603)))
 (let ((?x361 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (=> $x353 (= ?x361 ?x470)))))))))))
 ))
 (let (($x325 (and $x403 $x282)))
 (let (($x238 (= $x325 true)))
 (let (($x568 (= $x238 true)))
 (let (($x596 (= $x568 true)))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x598 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x231))))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x417)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x373)))
 (let ((?x124 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x612 (_ bv1 32))))
 (=> $x37 (= ?x124 ?x198)))))))))))
 ))
 (let (($x494 (and $x156 $x577)))
 (let (($x657 (= $x494 true)))
 (let (($x557 (= $x657 true)))
 (let (($x116 (= $x557 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x15))))
 (let ((?x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x583 (_ bv1 32))))
 (=> $x604 (= ?x357 ?x13))))))))))
 ))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x61 (_ bv1 32))))
 (let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x583 (_ bv1 32))))
 (= $x604 $x240))))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x583 (_ bv0 32))))
 (=> $x454 $x114)))))
 ))
 (let (($x356 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x61 (_ bv0 32))))
 (let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x583 (_ bv0 32))))
 (= $x454 $x115))))))
 ))
 (let (($x186 (and $x356 $x314)))
 (let (($x452 (and $x186 $x580)))
 (let (($x299 (and $x452 $x474)))
 (let (($x301 (= $x299 true)))
 (let (($x233 (= $x301 true)))
 (let (($x459 (= $x233 true)))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x607 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x119))))
 (let ((?x603 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv2 32))) ?x607)))
 (let ((?x470 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv3 32))) ?x603)))
 (let ((?x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x583 (_ bv1 32))))
 (=> $x604 (= ?x357 ?x470)))))))))))
 ))
 (let (($x317 (and $x452 $x458)))
 (let (($x214 (= $x317 true)))
 (let (($x393 (= $x214 true)))
 (let (($x469 (= $x393 true)))
 (let ((?x126 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x510 (= (_ bv0 32) ?x126)))
 (let ((?x424 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x139 (= (_ bv0 32) ?x424)))
 (let ((?x614 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x614)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x593 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x484 (and $x112 $x593)))
 (let (($x380 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x500 (and $x380 $x484)))
 (let (($x365 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x506 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x412 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x572 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x537 (and $x572 $x412)))
 (let (($x582 (not $x537)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x397 (and $x222 $x446)))
 (let (($x644 (and (not $x397) $x582)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x89 $x195)))
 (let (($x573 (not $x302)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x466 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x466 $x104)))
 (let (($x643 (and (not $x247) $x573)))
 (let (($x621 (and (and (and (and (and (and $x643 $x644) $x506) $x365) $x500) $x414) $x139)))
 (let (($x430 (and $x621 $x510)))
 (let (($x77 (= $x430 true)))
 (let (($x636 (= $x77 true)))
 (let (($x622 (= $x636 true)))
 (let (($x205 (and $x622 $x469)))
 (let (($x355 (and $x205 $x459)))
 (let (($x563 (and $x355 $x116)))
 (let (($x62 (and $x563 $x596)))
 (let (($x542 (and $x62 $x653)))
 (let (($x379 (and $x542 $x628)))
 (let (($x546 (and $x379 $x167)))
 (let (($x398 (and $x546 $x656)))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x361 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (=> $x353 (= ?x361 ?x357)))))))
 ))
 (let (($x166 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x583 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x138 (_ bv1 32))))
 (= $x353 $x604))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x583 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x501 (= ?x138 (_ bv0 32))))
 (= $x501 $x454))))))
 ))
 (let (($x42 (and $x149 $x50)))
 (let (($x354 (and $x42 $x166)))
 (let (($x31 (and $x354 $x526)))
 (let (($x651 (and $x31 $x398)))
 (let (($x632 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x124 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x612 (_ bv1 32))))
 (=> $x37 (= ?x124 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x451 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x612 (_ bv1 32))))
 (= $x37 (bvuge ?x451 (_ bv1 32)))))))
 ))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x451 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x612 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x612 (_ bv0 32))))
 (= $x177 (= ?x451 (_ bv0 32)))))))
 ))
 (let (($x560 (and $x6 $x421)))
 (let (($x335 (and $x560 $x358)))
 (let (($x36 (and $x335 $x632)))
 (let (($x272 (and $x36 $x651)))
 (let (($x187 (=> $x272 $x199)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x020a0040)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00840084)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x076b5000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00840087)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x020a0043)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00840084)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x020a0040)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x80
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x80
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x076b5003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x076b5002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x076b5001 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x076b5000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!23 (bvadd #x076b5003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x076b5002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x076b5001 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x076b5000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000080
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000080
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8e19a684)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0b18e143)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8e19a687)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8e19a684)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff0 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!1 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x382 input.dst.llvm-%m2)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x78))))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (=> $x103 (= ?x459 ?x374))))))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x292 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (= $x103 $x84))))))
 ))
 (let (($x602 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x364 (= false false)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (= ?x342 (_ bv0 32))))
 (=> $x600 $x364)))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x292 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (= ?x342 (_ bv0 32))))
 (= $x600 $x20))))))
 ))
 (let (($x495 (and $x24 $x602)))
 (let (($x310 (and $x495 $x105)))
 (let (($x362 (and $x310 $x73)))
 (let (($x80 (= $x362 true)))
 (let (($x597 (= $x80 true)))
 (let ((?x401 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x288 (= (_ bv0 2) ?x401)))
 (let (($x235 (= $x288 true)))
 (let (($x81 (= $x235 true)))
 (let (($x562 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x382 input.dst.llvm-%m2)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x78))))
 (let ((?x365 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x354 (_ bv1 32))))
 (=> $x446 (= ?x365 ?x374))))))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x292 (_ bv1 32))))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x354 (_ bv1 32))))
 (= $x446 $x84))))))
 ))
 (let (($x635 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x364 (= false false)))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (= ?x354 (_ bv0 32))))
 (=> $x361 $x364)))))
 ))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x292 (_ bv0 32))))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (= ?x354 (_ bv0 32))))
 (= $x361 $x20))))))
 ))
 (let (($x261 (and $x485 $x635)))
 (let (($x439 (and $x261 $x56)))
 (let (($x111 (and $x439 $x562)))
 (let (($x189 (= $x111 true)))
 (let (($x581 (= $x189 true)))
 (let (($x324 (= $x581 true)))
 (let (($x732 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x218 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x660 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x492 (and $x660 $x218)))
 (let (($x738 (and $x492 $x732)))
 (let (($x739 (= $x738 true)))
 (let (($x521 (= $x739 true)))
 (let (($x549 (= $x521 true)))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x382 input.dst.llvm-%m1)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem ?x416))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv2 32))) ?x75))))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (=> $x103 (= ?x459 ?x347))))))))))
 ))
 (let (($x141 (and $x310 $x49)))
 (let (($x434 (= $x141 true)))
 (let (($x423 (= $x434 true)))
 (let (($x340 (= $x423 true)))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x382 input.dst.llvm-%m1)))
 (let ((?x462 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x416))))
 (let ((?x343 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv2 32))) ?x462)))
 (let ((?x652 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv3 32))) ?x343)))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (=> $x103 (= ?x459 ?x652)))))))))))
 ))
 (let (($x522 (and $x310 $x142)))
 (let (($x534 (= $x522 true)))
 (let (($x70 (= $x534 true)))
 (let (($x499 (= $x70 true)))
 (let (($x442 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x382 input.dst.llvm-%m2)))
 (let ((?x428 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x136))))
 (let ((?x467 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv2 32))) ?x428)))
 (let ((?x370 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv3 32))) ?x467)))
 (let ((?x365 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x354 (_ bv1 32))))
 (=> $x446 (= ?x365 ?x370)))))))))))
 ))
 (let (($x591 (and $x439 $x442)))
 (let (($x278 (= $x591 true)))
 (let (($x144 (= $x278 true)))
 (let (($x102 (= $x144 true)))
 (let (($x509 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x382 input.dst.llvm-%m1)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem ?x416))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv2 32))) ?x75))))
 (let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x598 (_ bv1 32))))
 (=> $x544 (= ?x233 ?x347))))))))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x292 (_ bv1 32))))
 (let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x598 (_ bv1 32))))
 (= $x544 $x84))))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x364 (= false false)))
 (let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x598 (_ bv0 32))))
 (=> $x490 $x364)))))
 ))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x292 (_ bv0 32))))
 (let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x598 (_ bv0 32))))
 (= $x490 $x20))))))
 ))
 (let (($x295 (and $x210 $x46)))
 (let (($x291 (and $x295 $x143)))
 (let (($x524 (and $x291 $x509)))
 (let (($x201 (= $x524 true)))
 (let (($x479 (= $x201 true)))
 (let (($x504 (= $x479 true)))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x382 input.dst.llvm-%m1)))
 (let ((?x462 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x416))))
 (let ((?x343 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv2 32))) ?x462)))
 (let ((?x652 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv3 32))) ?x343)))
 (let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x598 (_ bv1 32))))
 (=> $x544 (= ?x233 ?x652)))))))))))
 ))
 (let (($x118 (and $x291 $x351)))
 (let (($x213 (= $x118 true)))
 (let (($x183 (= $x213 true)))
 (let (($x611 (= $x183 true)))
 (let ((?x496 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x498 (= (_ bv0 32) ?x496)))
 (let ((?x596 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x62 (= (_ bv0 32) ?x596)))
 (let ((?x238 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x568 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x502 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x618 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x502)))
 (let (($x457 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x282 (and $x457 $x618)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x325 (and $x229 $x282)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x456 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x577 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x494 (and $x82 $x577)))
 (let (($x657 (not $x494)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x373 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x658 (and $x373 $x198)))
 (let (($x116 (and (not $x658) $x657)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x137 $x159)))
 (let (($x221 (not $x217)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x359 (and $x156 $x231)))
 (let (($x417 (and (not $x359) $x221)))
 (let (($x542 (and (and (and (and (and (and $x417 $x116) $x456) $x21) $x325) $x568) $x62)))
 (let (($x22 (and $x542 $x498)))
 (let (($x571 (= $x22 true)))
 (let (($x383 (= $x571 true)))
 (let (($x376 (= $x383 true)))
 (let (($x411 (and $x376 $x611)))
 (let (($x346 (and $x411 $x504)))
 (let (($x147 (and $x346 $x102)))
 (let (($x40 (and $x147 $x499)))
 (let (($x305 (and $x40 $x340)))
 (let (($x254 (and $x305 $x549)))
 (let (($x219 (and $x254 $x324)))
 (let (($x55 (and $x219 $x81)))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (=> $x103 (= ?x459 ?x233)))))))
 ))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x598 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (= $x103 $x544))))))
 ))
 (let (($x601 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x598 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (= ?x342 (_ bv0 32))))
 (= $x600 $x490))))))
 ))
 (let (($x587 (and $x601 $x602)))
 (let (($x413 (and $x587 $x25)))
 (let (($x153 (and $x413 $x228)))
 (let (($x53 (and $x153 $x55)))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x365 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x354 (_ bv1 32))))
 (=> $x446 (= ?x365 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x604 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x354 (_ bv1 32))))
 (= $x446 (bvuge ?x604 (_ bv1 32)))))))
 ))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x604 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (= ?x354 (_ bv0 32))))
 (= $x361 (= ?x604 (_ bv0 32)))))))
 ))
 (let (($x337 (and $x95 $x635)))
 (let (($x572 (and $x337 $x619)))
 (let (($x384 (and $x572 $x112)))
 (let (($x435 (and $x384 $x53)))
 (let (($x197 (=> $x435 $x597)))
 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x382 input.dst.llvm-%m2)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x78))))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (=> $x103 (= ?x459 ?x374))))))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x292 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (= $x103 $x84))))))
 ))
 (let (($x602 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x364 (= false false)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (= ?x342 (_ bv0 32))))
 (=> $x600 $x364)))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x292 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (= ?x342 (_ bv0 32))))
 (= $x600 $x20))))))
 ))
 (let (($x495 (and $x24 $x602)))
 (let (($x310 (and $x495 $x105)))
 (let (($x362 (and $x310 $x73)))
 (let (($x80 (= $x362 true)))
 (let (($x597 (= $x80 true)))
 (let ((?x401 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x288 (= (_ bv0 2) ?x401)))
 (let (($x235 (= $x288 true)))
 (let (($x81 (= $x235 true)))
 (let (($x562 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x382 input.dst.llvm-%m2)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x78))))
 (let ((?x365 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x354 (_ bv1 32))))
 (=> $x446 (= ?x365 ?x374))))))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x292 (_ bv1 32))))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x354 (_ bv1 32))))
 (= $x446 $x84))))))
 ))
 (let (($x635 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x364 (= false false)))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (= ?x354 (_ bv0 32))))
 (=> $x361 $x364)))))
 ))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x292 (_ bv0 32))))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (= ?x354 (_ bv0 32))))
 (= $x361 $x20))))))
 ))
 (let (($x261 (and $x485 $x635)))
 (let (($x439 (and $x261 $x56)))
 (let (($x111 (and $x439 $x562)))
 (let (($x189 (= $x111 true)))
 (let (($x581 (= $x189 true)))
 (let (($x324 (= $x581 true)))
 (let (($x732 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x218 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x660 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x492 (and $x660 $x218)))
 (let (($x738 (and $x492 $x732)))
 (let (($x739 (= $x738 true)))
 (let (($x521 (= $x739 true)))
 (let (($x549 (= $x521 true)))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x382 input.dst.llvm-%m1)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem ?x416))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv2 32))) ?x75))))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (=> $x103 (= ?x459 ?x347))))))))))
 ))
 (let (($x141 (and $x310 $x49)))
 (let (($x434 (= $x141 true)))
 (let (($x423 (= $x434 true)))
 (let (($x340 (= $x423 true)))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x382 input.dst.llvm-%m1)))
 (let ((?x462 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x416))))
 (let ((?x343 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv2 32))) ?x462)))
 (let ((?x652 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv3 32))) ?x343)))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (=> $x103 (= ?x459 ?x652)))))))))))
 ))
 (let (($x522 (and $x310 $x142)))
 (let (($x534 (= $x522 true)))
 (let (($x70 (= $x534 true)))
 (let (($x499 (= $x70 true)))
 (let (($x442 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x382 input.dst.llvm-%m2)))
 (let ((?x428 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x136))))
 (let ((?x467 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv2 32))) ?x428)))
 (let ((?x370 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv3 32))) ?x467)))
 (let ((?x365 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x354 (_ bv1 32))))
 (=> $x446 (= ?x365 ?x370)))))))))))
 ))
 (let (($x591 (and $x439 $x442)))
 (let (($x278 (= $x591 true)))
 (let (($x144 (= $x278 true)))
 (let (($x102 (= $x144 true)))
 (let (($x509 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x382 input.dst.llvm-%m1)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem ?x416))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv2 32))) ?x75))))
 (let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x598 (_ bv1 32))))
 (=> $x544 (= ?x233 ?x347))))))))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x292 (_ bv1 32))))
 (let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x598 (_ bv1 32))))
 (= $x544 $x84))))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x364 (= false false)))
 (let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x598 (_ bv0 32))))
 (=> $x490 $x364)))))
 ))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x292 (_ bv0 32))))
 (let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x598 (_ bv0 32))))
 (= $x490 $x20))))))
 ))
 (let (($x295 (and $x210 $x46)))
 (let (($x291 (and $x295 $x143)))
 (let (($x524 (and $x291 $x509)))
 (let (($x201 (= $x524 true)))
 (let (($x479 (= $x201 true)))
 (let (($x504 (= $x479 true)))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x382 input.dst.llvm-%m1)))
 (let ((?x462 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x416))))
 (let ((?x343 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv2 32))) ?x462)))
 (let ((?x652 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x416 (_ bv3 32))) ?x343)))
 (let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x598 (_ bv1 32))))
 (=> $x544 (= ?x233 ?x652)))))))))))
 ))
 (let (($x118 (and $x291 $x351)))
 (let (($x213 (= $x118 true)))
 (let (($x183 (= $x213 true)))
 (let (($x611 (= $x183 true)))
 (let ((?x496 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x498 (= (_ bv0 32) ?x496)))
 (let ((?x596 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x62 (= (_ bv0 32) ?x596)))
 (let ((?x238 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x568 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x502 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x618 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x502)))
 (let (($x457 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x282 (and $x457 $x618)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x325 (and $x229 $x282)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x456 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x577 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x494 (and $x82 $x577)))
 (let (($x657 (not $x494)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x373 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x658 (and $x373 $x198)))
 (let (($x116 (and (not $x658) $x657)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x137 $x159)))
 (let (($x221 (not $x217)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x359 (and $x156 $x231)))
 (let (($x417 (and (not $x359) $x221)))
 (let (($x542 (and (and (and (and (and (and $x417 $x116) $x456) $x21) $x325) $x568) $x62)))
 (let (($x22 (and $x542 $x498)))
 (let (($x571 (= $x22 true)))
 (let (($x383 (= $x571 true)))
 (let (($x376 (= $x383 true)))
 (let (($x411 (and $x376 $x611)))
 (let (($x346 (and $x411 $x504)))
 (let (($x147 (and $x346 $x102)))
 (let (($x40 (and $x147 $x499)))
 (let (($x305 (and $x40 $x340)))
 (let (($x254 (and $x305 $x549)))
 (let (($x219 (and $x254 $x324)))
 (let (($x55 (and $x219 $x81)))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (=> $x103 (= ?x459 ?x233)))))))
 ))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x598 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x342 (_ bv1 32))))
 (= $x103 $x544))))))
 ))
 (let (($x601 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x598 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (= ?x342 (_ bv0 32))))
 (= $x600 $x490))))))
 ))
 (let (($x587 (and $x601 $x602)))
 (let (($x413 (and $x587 $x25)))
 (let (($x153 (and $x413 $x228)))
 (let (($x53 (and $x153 $x55)))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x365 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x354 (_ bv1 32))))
 (=> $x446 (= ?x365 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x604 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x354 (_ bv1 32))))
 (= $x446 (bvuge ?x604 (_ bv1 32)))))))
 ))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x604 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x354 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (= ?x354 (_ bv0 32))))
 (= $x361 (= ?x604 (_ bv0 32)))))))
 ))
 (let (($x337 (and $x95 $x635)))
 (let (($x572 (and $x337 $x619)))
 (let (($x384 (and $x572 $x112)))
 (let (($x435 (and $x384 $x53)))
 (let (($x197 (=> $x435 $x597)))
 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8e19a684)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0b18e143)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8e19a687)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8e19a684)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff0 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!2 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xa0004004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xce800000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x0009c160)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xce800003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xa0004007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xce800000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xa0004004)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0009c160) #x80
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0009c160) #x80
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000080
      (let ((a!1 (concat (k!23 (bvadd #x0009c163 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x0009c162 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x0009c161 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x0009c160 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!24 (bvadd #x0009c163 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x0009c162 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x0009c161 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x0009c160 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000080
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x634 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x501 (bvadd ?x461 input.dst.llvm-%m2)))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x501))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv2 32))) ?x50)))
 (let ((?x643 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv3 32))) ?x89)))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (bvuge ?x382 (_ bv1 32))))
 (=> $x251 (= ?x479 ?x643)))))))))))
 ))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x733 (_ bv1 32))))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (bvuge ?x382 (_ bv1 32))))
 (= $x251 $x204))))))
 ))
 (let (($x744 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x447 (= false false)))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x382 (_ bv0 32))))
 (=> $x283 $x447)))))
 ))
 (let (($x740 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x731 (= ?x733 (_ bv0 32))))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x382 (_ bv0 32))))
 (= $x283 $x731))))))
 ))
 (let (($x529 (and $x740 $x744)))
 (let (($x620 (and $x529 $x191)))
 (let (($x93 (and $x620 $x634)))
 (let (($x646 (= $x93 true)))
 (let (($x270 (= $x646 true)))
 (let ((?x588 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x402 (= (_ bv0 2) ?x588)))
 (let (($x594 (= $x402 true)))
 (let (($x207 (= $x594 true)))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x501 (bvadd ?x461 input.dst.llvm-%m2)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x501 (_ bv1 32))) (select input.dst.llvm-mem ?x501))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x501 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x501 (_ bv2 32))) ?x244))))
 (let ((?x21 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x413 (_ bv1 32))))
 (=> $x198 (= ?x21 ?x265))))))))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x733 (_ bv1 32))))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x413 (_ bv1 32))))
 (= $x198 $x204))))))
 ))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x447 (= false false)))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x413 (_ bv0 32))))
 (=> $x459 $x447)))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x731 (= ?x733 (_ bv0 32))))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x413 (_ bv0 32))))
 (= $x459 $x731))))))
 ))
 (let (($x378 (and $x115 $x491)))
 (let (($x214 (and $x378 $x317)))
 (let (($x284 (and $x214 $x192)))
 (let (($x659 (= $x284 true)))
 (let (($x194 (= $x659 true)))
 (let (($x410 (= $x194 true)))
 (let (($x199 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x230 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x546 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x661 (and $x546 $x230)))
 (let (($x613 (and $x661 $x199)))
 (let (($x323 (= $x613 true)))
 (let (($x651 (= $x323 true)))
 (let (($x272 (= $x651 true)))
 (let (($x567 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x268 (bvadd ?x461 input.dst.llvm-%m1)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x83))))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x246 (_ bv1 32))))
 (=> $x437 (= ?x504 ?x256))))))))))
 ))
 (let (($x555 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x733 (_ bv1 32))))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x246 (_ bv1 32))))
 (= $x437 $x204))))))
 ))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x447 (= false false)))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x246 (_ bv0 32))))
 (=> $x427 $x447)))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x731 (= ?x733 (_ bv0 32))))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x246 (_ bv0 32))))
 (= $x427 $x731))))))
 ))
 (let (($x262 (and $x140 $x585)))
 (let (($x531 (and $x262 $x555)))
 (let (($x248 (and $x531 $x567)))
 (let (($x655 (= $x248 true)))
 (let (($x487 (= $x655 true)))
 (let (($x480 (= $x487 true)))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x268 (bvadd ?x461 input.dst.llvm-%m1)))
 (let ((?x497 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x268))))
 (let ((?x540 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv2 32))) ?x497)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv3 32))) ?x540)))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x246 (_ bv1 32))))
 (=> $x437 (= ?x504 ?x321)))))))))))
 ))
 (let (($x513 (and $x531 $x227)))
 (let (($x599 (= $x513 true)))
 (let (($x559 (= $x599 true)))
 (let (($x74 (= $x559 true)))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x501 (bvadd ?x461 input.dst.llvm-%m2)))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x501))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv2 32))) ?x50)))
 (let ((?x643 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv3 32))) ?x89)))
 (let ((?x21 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x413 (_ bv1 32))))
 (=> $x198 (= ?x21 ?x643)))))))))))
 ))
 (let (($x506 (and $x214 $x443)))
 (let (($x99 (= $x506 true)))
 (let (($x545 (= $x99 true)))
 (let (($x154 (= $x545 true)))
 (let (($x333 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x268 (bvadd ?x461 input.dst.llvm-%m1)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x83))))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (bvuge ?x382 (_ bv1 32))))
 (=> $x251 (= ?x479 ?x256))))))))))
 ))
 (let (($x569 (and $x620 $x333)))
 (let (($x320 (= $x569 true)))
 (let (($x309 (= $x320 true)))
 (let (($x47 (= $x309 true)))
 (let (($x312 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x268 (bvadd ?x461 input.dst.llvm-%m1)))
 (let ((?x497 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x268))))
 (let ((?x540 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv2 32))) ?x497)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv3 32))) ?x540)))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (bvuge ?x382 (_ bv1 32))))
 (=> $x251 (= ?x479 ?x321)))))))))))
 ))
 (let (($x614 (and $x620 $x312)))
 (let (($x414 (= $x614 true)))
 (let (($x424 (= $x414 true)))
 (let (($x139 (= $x424 true)))
 (let ((?x493 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x203 (= (_ bv0 32) ?x493)))
 (let ((?x499 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x40 (= (_ bv0 32) ?x499)))
 (let ((?x534 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x534)))
 (let ((?x26 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x404 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x142 (and $x105 $x404)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x522 (and $x88 $x142)))
 (let (($x495 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x442 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x623 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x591 (and $x623 $x442)))
 (let (($x278 (not $x591)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x467 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x467 $x370)))
 (let (($x102 (and (not $x19) $x278)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x287 $x224)))
 (let (($x345 (not $x72)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x439 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x439 $x136)))
 (let (($x428 (and (not $x319) $x345)))
 (let (($x305 (and (and (and (and (and (and $x428 $x102) $x225) $x495) $x522) $x70) $x40)))
 (let (($x539 (and $x305 $x203)))
 (let (($x316 (= $x539 true)))
 (let (($x660 (= $x316 true)))
 (let (($x68 (= $x660 true)))
 (let (($x621 (and $x68 $x139)))
 (let (($x463 (and $x621 $x47)))
 (let (($x249 (and $x463 $x154)))
 (let (($x548 (and $x249 $x74)))
 (let (($x165 (and $x548 $x480)))
 (let (($x398 (and $x165 $x272)))
 (let (($x483 (and $x398 $x410)))
 (let (($x211 (and $x483 $x207)))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x246 (_ bv1 32))))
 (=> $x437 (= ?x504 ?x479)))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (bvuge ?x382 (_ bv1 32))))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x246 (_ bv1 32))))
 (= $x437 $x251))))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x382 (_ bv0 32))))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x246 (_ bv0 32))))
 (= $x427 $x283))))))
 ))
 (let (($x267 (and $x471 $x585)))
 (let (($x481 (and $x267 $x243)))
 (let (($x261 (and $x481 $x485)))
 (let (($x391 (and $x261 $x211)))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x413 (_ bv1 32))))
 (=> $x198 (= ?x21 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x544 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x413 (_ bv1 32))))
 (= $x198 (bvuge ?x544 (_ bv1 32)))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x544 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x413 (_ bv0 32))))
 (= $x459 (= ?x544 (_ bv0 32)))))))
 ))
 (let (($x129 (and $x355 $x491)))
 (let (($x82 (and $x129 $x557)))
 (let (($x403 (and $x82 $x457)))
 (let (($x407 (and $x403 $x391)))
 (let (($x223 (=> $x407 $x270)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x634 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x501 (bvadd ?x461 input.dst.llvm-%m2)))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x501))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv2 32))) ?x50)))
 (let ((?x643 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv3 32))) ?x89)))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (bvuge ?x382 (_ bv1 32))))
 (=> $x251 (= ?x479 ?x643)))))))))))
 ))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x733 (_ bv1 32))))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (bvuge ?x382 (_ bv1 32))))
 (= $x251 $x204))))))
 ))
 (let (($x744 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x447 (= false false)))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x382 (_ bv0 32))))
 (=> $x283 $x447)))))
 ))
 (let (($x740 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x731 (= ?x733 (_ bv0 32))))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x382 (_ bv0 32))))
 (= $x283 $x731))))))
 ))
 (let (($x529 (and $x740 $x744)))
 (let (($x620 (and $x529 $x191)))
 (let (($x93 (and $x620 $x634)))
 (let (($x646 (= $x93 true)))
 (let (($x270 (= $x646 true)))
 (let ((?x588 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x402 (= (_ bv0 2) ?x588)))
 (let (($x594 (= $x402 true)))
 (let (($x207 (= $x594 true)))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x501 (bvadd ?x461 input.dst.llvm-%m2)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x501 (_ bv1 32))) (select input.dst.llvm-mem ?x501))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x501 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x501 (_ bv2 32))) ?x244))))
 (let ((?x21 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x413 (_ bv1 32))))
 (=> $x198 (= ?x21 ?x265))))))))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x733 (_ bv1 32))))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x413 (_ bv1 32))))
 (= $x198 $x204))))))
 ))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x447 (= false false)))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x413 (_ bv0 32))))
 (=> $x459 $x447)))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x731 (= ?x733 (_ bv0 32))))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x413 (_ bv0 32))))
 (= $x459 $x731))))))
 ))
 (let (($x378 (and $x115 $x491)))
 (let (($x214 (and $x378 $x317)))
 (let (($x284 (and $x214 $x192)))
 (let (($x659 (= $x284 true)))
 (let (($x194 (= $x659 true)))
 (let (($x410 (= $x194 true)))
 (let (($x199 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x230 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x546 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x661 (and $x546 $x230)))
 (let (($x613 (and $x661 $x199)))
 (let (($x323 (= $x613 true)))
 (let (($x651 (= $x323 true)))
 (let (($x272 (= $x651 true)))
 (let (($x567 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x268 (bvadd ?x461 input.dst.llvm-%m1)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x83))))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x246 (_ bv1 32))))
 (=> $x437 (= ?x504 ?x256))))))))))
 ))
 (let (($x555 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x733 (_ bv1 32))))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x246 (_ bv1 32))))
 (= $x437 $x204))))))
 ))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x447 (= false false)))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x246 (_ bv0 32))))
 (=> $x427 $x447)))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x733 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x731 (= ?x733 (_ bv0 32))))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x246 (_ bv0 32))))
 (= $x427 $x731))))))
 ))
 (let (($x262 (and $x140 $x585)))
 (let (($x531 (and $x262 $x555)))
 (let (($x248 (and $x531 $x567)))
 (let (($x655 (= $x248 true)))
 (let (($x487 (= $x655 true)))
 (let (($x480 (= $x487 true)))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x268 (bvadd ?x461 input.dst.llvm-%m1)))
 (let ((?x497 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x268))))
 (let ((?x540 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv2 32))) ?x497)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv3 32))) ?x540)))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x246 (_ bv1 32))))
 (=> $x437 (= ?x504 ?x321)))))))))))
 ))
 (let (($x513 (and $x531 $x227)))
 (let (($x599 (= $x513 true)))
 (let (($x559 (= $x599 true)))
 (let (($x74 (= $x559 true)))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x501 (bvadd ?x461 input.dst.llvm-%m2)))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x501))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv2 32))) ?x50)))
 (let ((?x643 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x501 (_ bv3 32))) ?x89)))
 (let ((?x21 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x413 (_ bv1 32))))
 (=> $x198 (= ?x21 ?x643)))))))))))
 ))
 (let (($x506 (and $x214 $x443)))
 (let (($x99 (= $x506 true)))
 (let (($x545 (= $x99 true)))
 (let (($x154 (= $x545 true)))
 (let (($x333 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x268 (bvadd ?x461 input.dst.llvm-%m1)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x83))))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (bvuge ?x382 (_ bv1 32))))
 (=> $x251 (= ?x479 ?x256))))))))))
 ))
 (let (($x569 (and $x620 $x333)))
 (let (($x320 (= $x569 true)))
 (let (($x309 (= $x320 true)))
 (let (($x47 (= $x309 true)))
 (let (($x312 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x268 (bvadd ?x461 input.dst.llvm-%m1)))
 (let ((?x497 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x268))))
 (let ((?x540 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv2 32))) ?x497)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x268 (_ bv3 32))) ?x540)))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (bvuge ?x382 (_ bv1 32))))
 (=> $x251 (= ?x479 ?x321)))))))))))
 ))
 (let (($x614 (and $x620 $x312)))
 (let (($x414 (= $x614 true)))
 (let (($x424 (= $x414 true)))
 (let (($x139 (= $x424 true)))
 (let ((?x493 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x203 (= (_ bv0 32) ?x493)))
 (let ((?x499 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x40 (= (_ bv0 32) ?x499)))
 (let ((?x534 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x534)))
 (let ((?x26 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x404 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x142 (and $x105 $x404)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x522 (and $x88 $x142)))
 (let (($x495 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x442 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x623 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x591 (and $x623 $x442)))
 (let (($x278 (not $x591)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x467 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x467 $x370)))
 (let (($x102 (and (not $x19) $x278)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x287 $x224)))
 (let (($x345 (not $x72)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x439 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x439 $x136)))
 (let (($x428 (and (not $x319) $x345)))
 (let (($x305 (and (and (and (and (and (and $x428 $x102) $x225) $x495) $x522) $x70) $x40)))
 (let (($x539 (and $x305 $x203)))
 (let (($x316 (= $x539 true)))
 (let (($x660 (= $x316 true)))
 (let (($x68 (= $x660 true)))
 (let (($x621 (and $x68 $x139)))
 (let (($x463 (and $x621 $x47)))
 (let (($x249 (and $x463 $x154)))
 (let (($x548 (and $x249 $x74)))
 (let (($x165 (and $x548 $x480)))
 (let (($x398 (and $x165 $x272)))
 (let (($x483 (and $x398 $x410)))
 (let (($x211 (and $x483 $x207)))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x246 (_ bv1 32))))
 (=> $x437 (= ?x504 ?x479)))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (bvuge ?x382 (_ bv1 32))))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x246 (_ bv1 32))))
 (= $x437 $x251))))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x382 (_ bv0 32))))
 (let ((?x246 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x246 (_ bv0 32))))
 (= $x427 $x283))))))
 ))
 (let (($x267 (and $x471 $x585)))
 (let (($x481 (and $x267 $x243)))
 (let (($x261 (and $x481 $x485)))
 (let (($x391 (and $x261 $x211)))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x413 (_ bv1 32))))
 (=> $x198 (= ?x21 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x544 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x413 (_ bv1 32))))
 (= $x198 (bvuge ?x544 (_ bv1 32)))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x544 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x413 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x413 (_ bv0 32))))
 (= $x459 (= ?x544 (_ bv0 32)))))))
 ))
 (let (($x129 (and $x355 $x491)))
 (let (($x82 (and $x129 $x557)))
 (let (($x403 (and $x82 $x457)))
 (let (($x407 (and $x403 $x391)))
 (let (($x223 (=> $x407 $x270)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xe8be4148)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x90ebb404)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x266d7c03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x90ebb407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x90ebb404)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4148 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!1 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4148 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xa0085888)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x18083424)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40000008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x18083427)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xa008588b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x18083424)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xa0085888)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x02
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x02
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x4000000b (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x4000000a (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x40000009 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x40000008 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!23 (bvadd #x4000000b (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x4000000a (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x40000009 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x40000008 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x02000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x02000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x718 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x710 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x109)))
 (let ((?x715 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x710))))
 (let ((?x725 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv2 32))) ?x715)))
 (let ((?x723 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv3 32))) ?x725)))
 (let ((?x495 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (=> $x370 (= ?x495 ?x723)))))))))))
 ))
 (let (($x509 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x315 (_ bv1 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (= $x370 $x307))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x43 (= false false)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x481 (_ bv0 32))))
 (=> $x504 $x43)))))
 ))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x627 (= ?x315 (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x481 (_ bv0 32))))
 (= $x504 $x627))))))
 ))
 (let (($x441 (and $x291 $x135)))
 (let (($x524 (and $x441 $x509)))
 (let (($x721 (and $x524 $x718)))
 (let (($x724 (= $x721 true)))
 (let (($x727 (= $x724 true)))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x27 (bvadd ?x109 input.dst.llvm-%m2)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x452 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x356))))
 (let ((?x495 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (=> $x370 (= ?x495 ?x452))))))))))
 ))
 (let (($x13 (and $x524 $x205)))
 (let (($x341 (= $x13 true)))
 (let (($x632 (= $x341 true)))
 (let (($x631 (= $x632 true)))
 (let (($x639 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x73 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x597 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x53 (and $x597 $x73)))
 (let (($x362 (and $x53 $x639)))
 (let (($x197 (= $x362 true)))
 (let (($x500 (= $x197 true)))
 (let (($x368 (= $x500 true)))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x664 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv1 32))) (select input.dst.llvm-mem ?x664))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv2 32))) ?x196))))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x113 (_ bv1 32))))
 (=> $x37 (= ?x47 ?x269))))))))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x315 (_ bv1 32))))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x113 (_ bv1 32))))
 (= $x37 $x307))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x43 (= false false)))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x113 (_ bv0 32))))
 (=> $x242 $x43)))))
 ))
 (let (($x583 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x627 (= ?x315 (_ bv0 32))))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x113 (_ bv0 32))))
 (= $x242 $x627))))))
 ))
 (let (($x454 (and $x583 $x155)))
 (let (($x247 (and $x454 $x564)))
 (let (($x327 (and $x247 $x324)))
 (let (($x219 (= $x327 true)))
 (let (($x401 (= $x219 true)))
 (let (($x288 (= $x401 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x664 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x465 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x664))))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv2 32))) ?x465)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv3 32))) ?x238)))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x113 (_ bv1 32))))
 (=> $x37 (= ?x47 ?x62)))))))))))
 ))
 (let (($x148 (and $x247 $x104)))
 (let (($x473 (= $x148 true)))
 (let (($x189 (= $x473 true)))
 (let (($x215 (= $x189 true)))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x27 (bvadd ?x109 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x27))))
 (let ((?x563 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv2 32))) ?x417)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv3 32))) ?x563)))
 (let ((?x495 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (=> $x370 (= ?x495 ?x35)))))))))))
 ))
 (let (($x418 (and $x524 $x300)))
 (let (($x520 (= $x418 true)))
 (let (($x360 (= $x520 true)))
 (let (($x565 (= $x360 true)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x664 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv1 32))) (select input.dst.llvm-mem ?x664))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv2 32))) ?x196))))
 (let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x461 (_ bv1 32))))
 (=> $x126 (= ?x309 ?x269))))))))))
 ))
 (let (($x517 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x315 (_ bv1 32))))
 (let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x461 (_ bv1 32))))
 (= $x126 $x307))))))
 ))
 (let (($x86 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x43 (= false false)))
 (let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x532 (= ?x461 (_ bv0 32))))
 (=> $x532 $x43)))))
 ))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x627 (= ?x315 (_ bv0 32))))
 (let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x532 (= ?x461 (_ bv0 32))))
 (= $x532 $x627))))))
 ))
 (let (($x108 (and $x590 $x86)))
 (let (($x294 (and $x108 $x517)))
 (let (($x330 (and $x294 $x146)))
 (let (($x516 (= $x330 true)))
 (let (($x18 (= $x516 true)))
 (let (($x304 (= $x18 true)))
 (let (($x498 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x664 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x465 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x664))))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv2 32))) ?x465)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv3 32))) ?x238)))
 (let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x461 (_ bv1 32))))
 (=> $x126 (= ?x309 ?x62)))))))))))
 ))
 (let (($x274 (and $x294 $x498)))
 (let (($x285 (= $x274 true)))
 (let (($x186 (= $x285 true)))
 (let (($x314 (= $x186 true)))
 (let ((?x480 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x165 (= (_ bv0 32) ?x480)))
 (let ((?x655 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x487 (= (_ bv0 32) ?x655)))
 (let ((?x567 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x567)))
 (let ((?x74 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x548 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x599 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x296 (and $x599 $x548)))
 (let (($x513 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x336 (and $x513 $x296)))
 (let (($x227 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x249 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (and $x249 $x131)))
 (let (($x262 (not $x140)))
 (let (($x545 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x99 $x545)))
 (let (($x555 (and (not $x154) $x262)))
 (let (($x643 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x582 (and $x89 $x643)))
 (let (($x644 (not $x582)))
 (let (($x637 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x128 $x637)))
 (let (($x506 (and (not $x96) $x644)))
 (let (($x661 (and (and (and (and (and (and $x506 $x555) $x32) $x227) $x336) $x248) $x487)))
 (let (($x656 (and $x661 $x165)))
 (let (($x440 (= $x656 true)))
 (let (($x199 (= $x440 true)))
 (let (($x613 (= $x199 true)))
 (let ((?x214 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x281 (= (_ bv0 2) ?x214)))
 (let (($x501 (= $x281 true)))
 (let (($x195 (= $x501 true)))
 (let (($x323 (and $x195 $x613)))
 (let (($x240 (and $x323 $x314)))
 (let (($x253 (and $x240 $x304)))
 (let (($x185 (and $x253 $x565)))
 (let (($x78 (and $x185 $x215)))
 (let (($x235 (and $x78 $x288)))
 (let (($x100 (and $x235 $x368)))
 (let (($x124 (and $x100 $x631)))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x113 (_ bv1 32))))
 (=> $x37 (= ?x47 ?x309)))))))
 ))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x461 (_ bv1 32))))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x113 (_ bv1 32))))
 (= $x37 $x126))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x532 (= ?x461 (_ bv0 32))))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x113 (_ bv0 32))))
 (= $x242 $x532))))))
 ))
 (let (($x10 (and $x445 $x155)))
 (let (($x255 (and $x10 $x114)))
 (let (($x378 (and $x255 $x115)))
 (let (($x474 (and $x378 $x124)))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x495 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (=> $x370 (= ?x495 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x144 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (= $x370 (bvuge ?x251 (_ bv1 32)))))))
 ))
 (let (($x346 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x481 (_ bv0 32))))
 (= $x504 (= ?x251 (_ bv0 32)))))))
 ))
 (let (($x56 (and $x346 $x135)))
 (let (($x623 (and $x56 $x144)))
 (let (($x310 (and $x623 $x105)))
 (let (($x299 (and $x310 $x474)))
 (let (($x728 (=> $x299 $x727)))
 (not $x728)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x718 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x710 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x109)))
 (let ((?x715 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x710))))
 (let ((?x725 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv2 32))) ?x715)))
 (let ((?x723 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv3 32))) ?x725)))
 (let ((?x495 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (=> $x370 (= ?x495 ?x723)))))))))))
 ))
 (let (($x509 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x315 (_ bv1 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (= $x370 $x307))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x43 (= false false)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x481 (_ bv0 32))))
 (=> $x504 $x43)))))
 ))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x627 (= ?x315 (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x481 (_ bv0 32))))
 (= $x504 $x627))))))
 ))
 (let (($x441 (and $x291 $x135)))
 (let (($x524 (and $x441 $x509)))
 (let (($x721 (and $x524 $x718)))
 (let (($x724 (= $x721 true)))
 (let (($x727 (= $x724 true)))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x27 (bvadd ?x109 input.dst.llvm-%m2)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x452 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x356))))
 (let ((?x495 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (=> $x370 (= ?x495 ?x452))))))))))
 ))
 (let (($x13 (and $x524 $x205)))
 (let (($x341 (= $x13 true)))
 (let (($x632 (= $x341 true)))
 (let (($x631 (= $x632 true)))
 (let (($x639 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x73 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x597 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x53 (and $x597 $x73)))
 (let (($x362 (and $x53 $x639)))
 (let (($x197 (= $x362 true)))
 (let (($x500 (= $x197 true)))
 (let (($x368 (= $x500 true)))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x664 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv1 32))) (select input.dst.llvm-mem ?x664))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv2 32))) ?x196))))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x113 (_ bv1 32))))
 (=> $x37 (= ?x47 ?x269))))))))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x315 (_ bv1 32))))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x113 (_ bv1 32))))
 (= $x37 $x307))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x43 (= false false)))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x113 (_ bv0 32))))
 (=> $x242 $x43)))))
 ))
 (let (($x583 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x627 (= ?x315 (_ bv0 32))))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x113 (_ bv0 32))))
 (= $x242 $x627))))))
 ))
 (let (($x454 (and $x583 $x155)))
 (let (($x247 (and $x454 $x564)))
 (let (($x327 (and $x247 $x324)))
 (let (($x219 (= $x327 true)))
 (let (($x401 (= $x219 true)))
 (let (($x288 (= $x401 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x664 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x465 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x664))))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv2 32))) ?x465)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv3 32))) ?x238)))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x113 (_ bv1 32))))
 (=> $x37 (= ?x47 ?x62)))))))))))
 ))
 (let (($x148 (and $x247 $x104)))
 (let (($x473 (= $x148 true)))
 (let (($x189 (= $x473 true)))
 (let (($x215 (= $x189 true)))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x27 (bvadd ?x109 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x27))))
 (let ((?x563 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv2 32))) ?x417)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv3 32))) ?x563)))
 (let ((?x495 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (=> $x370 (= ?x495 ?x35)))))))))))
 ))
 (let (($x418 (and $x524 $x300)))
 (let (($x520 (= $x418 true)))
 (let (($x360 (= $x520 true)))
 (let (($x565 (= $x360 true)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x664 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv1 32))) (select input.dst.llvm-mem ?x664))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x664 (_ bv2 32))) ?x196))))
 (let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x461 (_ bv1 32))))
 (=> $x126 (= ?x309 ?x269))))))))))
 ))
 (let (($x517 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x315 (_ bv1 32))))
 (let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x461 (_ bv1 32))))
 (= $x126 $x307))))))
 ))
 (let (($x86 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x43 (= false false)))
 (let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x532 (= ?x461 (_ bv0 32))))
 (=> $x532 $x43)))))
 ))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x627 (= ?x315 (_ bv0 32))))
 (let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x532 (= ?x461 (_ bv0 32))))
 (= $x532 $x627))))))
 ))
 (let (($x108 (and $x590 $x86)))
 (let (($x294 (and $x108 $x517)))
 (let (($x330 (and $x294 $x146)))
 (let (($x516 (= $x330 true)))
 (let (($x18 (= $x516 true)))
 (let (($x304 (= $x18 true)))
 (let (($x498 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x664 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x465 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x664))))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv2 32))) ?x465)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x664 (_ bv3 32))) ?x238)))
 (let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x461 (_ bv1 32))))
 (=> $x126 (= ?x309 ?x62)))))))))))
 ))
 (let (($x274 (and $x294 $x498)))
 (let (($x285 (= $x274 true)))
 (let (($x186 (= $x285 true)))
 (let (($x314 (= $x186 true)))
 (let ((?x480 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x165 (= (_ bv0 32) ?x480)))
 (let ((?x655 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x487 (= (_ bv0 32) ?x655)))
 (let ((?x567 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x567)))
 (let ((?x74 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x548 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x599 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x296 (and $x599 $x548)))
 (let (($x513 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x336 (and $x513 $x296)))
 (let (($x227 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x249 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (and $x249 $x131)))
 (let (($x262 (not $x140)))
 (let (($x545 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x99 $x545)))
 (let (($x555 (and (not $x154) $x262)))
 (let (($x643 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x582 (and $x89 $x643)))
 (let (($x644 (not $x582)))
 (let (($x637 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x128 $x637)))
 (let (($x506 (and (not $x96) $x644)))
 (let (($x661 (and (and (and (and (and (and $x506 $x555) $x32) $x227) $x336) $x248) $x487)))
 (let (($x656 (and $x661 $x165)))
 (let (($x440 (= $x656 true)))
 (let (($x199 (= $x440 true)))
 (let (($x613 (= $x199 true)))
 (let ((?x214 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x281 (= (_ bv0 2) ?x214)))
 (let (($x501 (= $x281 true)))
 (let (($x195 (= $x501 true)))
 (let (($x323 (and $x195 $x613)))
 (let (($x240 (and $x323 $x314)))
 (let (($x253 (and $x240 $x304)))
 (let (($x185 (and $x253 $x565)))
 (let (($x78 (and $x185 $x215)))
 (let (($x235 (and $x78 $x288)))
 (let (($x100 (and $x235 $x368)))
 (let (($x124 (and $x100 $x631)))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x113 (_ bv1 32))))
 (=> $x37 (= ?x47 ?x309)))))))
 ))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x461 (_ bv1 32))))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x113 (_ bv1 32))))
 (= $x37 $x126))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x532 (= ?x461 (_ bv0 32))))
 (let ((?x113 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x113 (_ bv0 32))))
 (= $x242 $x532))))))
 ))
 (let (($x10 (and $x445 $x155)))
 (let (($x255 (and $x10 $x114)))
 (let (($x378 (and $x255 $x115)))
 (let (($x474 (and $x378 $x124)))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x495 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (=> $x370 (= ?x495 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x144 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x481 (_ bv1 32))))
 (= $x370 (bvuge ?x251 (_ bv1 32)))))))
 ))
 (let (($x346 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x481 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x481 (_ bv0 32))))
 (= $x504 (= ?x251 (_ bv0 32)))))))
 ))
 (let (($x56 (and $x346 $x135)))
 (let (($x623 (and $x56 $x144)))
 (let (($x310 (and $x623 $x105)))
 (let (($x299 (and $x310 $x474)))
 (let (($x728 (=> $x299 $x727)))
 (not $x728)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2800199c)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60005238)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6000523b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2800199f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60005238)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2800199c)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x40
      #x00))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x40
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!24 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x36615e04)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!43))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!44))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ed01600)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00002004)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00002004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ed01603)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x36615e07)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ed01600)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x36615e04)
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x00400000 x!0) #x00400000 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!48 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x00400000 x!0) #x00400000 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!48 (k!45 x!0)))
  (define-fun k!43 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00400001) #x40
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!44 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!44 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!43 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!43 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!49 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!49 (k!45 x!0)))
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00400001) #x40
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!44 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!44 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!47 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!47 (k!46 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00400000) false
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
      (let ((a!1 (concat (k!44 (bvadd #x00400003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00400002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00400001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00400000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!43 (bvadd #x00400003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00400002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00400001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00400000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x693 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x9)))
 (let ((?x698 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x705 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x698))))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (=> $x498 (= ?x269 ?x705))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x237 (_ bv1 32))))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (= $x498 $x69))))))
 ))
 (let (($x664 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x61 (= false false)))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x517 (_ bv0 32))))
 (=> $x294 $x61)))))
 ))
 (let (($x598 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x237 (_ bv0 32))))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x517 (_ bv0 32))))
 (= $x294 $x332))))))
 ))
 (let (($x266 (and $x598 $x664)))
 (let (($x642 (and $x266 $x408)))
 (let (($x702 (and $x642 $x693)))
 (let (($x704 (= $x702 true)))
 (let (($x708 (= $x704 true)))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x110 (bvadd ?x9 input.dst.llvm-%m2)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x150))))
 (let ((?x555 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x255 (_ bv1 32))))
 (=> $x89 (= ?x555 ?x171))))))))))
 ))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x237 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x255 (_ bv1 32))))
 (= $x89 $x69))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x61 (= false false)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x255 (_ bv0 32))))
 (=> $x47 $x61)))))
 ))
 (let (($x730 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x237 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x255 (_ bv0 32))))
 (= $x47 $x332))))))
 ))
 (let (($x735 (and $x730 $x458)))
 (let (($x620 (and $x735 $x191)))
 (let (($x460 (and $x620 $x292)))
 (let (($x210 (= $x460 true)))
 (let (($x245 (= $x210 true)))
 (let (($x65 (= $x245 true)))
 (let (($x220 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x207 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x194 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x211 (and $x194 $x207)))
 (let (($x200 (and $x211 $x220)))
 (let (($x634 (= $x200 true)))
 (let (($x93 (= $x634 true)))
 (let (($x282 (= $x93 true)))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x607 (bvadd ?x9 input.dst.llvm-%m1)))
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem ?x607))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv2 32))) ?x459))))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (=> $x498 (= ?x269 ?x153))))))))))
 ))
 (let (($x528 (and $x642 $x392)))
 (let (($x385 (= $x528 true)))
 (let (($x106 (= $x385 true)))
 (let (($x594 (= $x106 true)))
 (let (($x574 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x607 (bvadd ?x9 input.dst.llvm-%m1)))
 (let ((?x394 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x607))))
 (let ((?x608 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv2 32))) ?x394)))
 (let ((?x393 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv3 32))) ?x608)))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (=> $x498 (= ?x269 ?x393)))))))))))
 ))
 (let (($x231 (and $x642 $x574)))
 (let (($x359 (= $x231 true)))
 (let (($x554 (= $x359 true)))
 (let (($x577 (= $x554 true)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x110 (bvadd ?x9 input.dst.llvm-%m2)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x110))))
 (let ((?x471 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x110 (_ bv2 32))) ?x246)))
 (let ((?x98 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x110 (_ bv3 32))) ?x471)))
 (let ((?x555 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x255 (_ bv1 32))))
 (=> $x89 (= ?x555 ?x98)))))))))))
 ))
 (let (($x345 (and $x620 $x224)))
 (let (($x428 (= $x345 true)))
 (let (($x278 (= $x428 true)))
 (let (($x102 (= $x278 true)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x607 (bvadd ?x9 input.dst.llvm-%m1)))
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem ?x607))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv2 32))) ?x459))))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (bvuge ?x108 (_ bv1 32))))
 (=> $x496 (= ?x638 ?x153))))))))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x237 (_ bv1 32))))
 (let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (bvuge ?x108 (_ bv1 32))))
 (= $x496 $x69))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x61 (= false false)))
 (let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x108 (_ bv0 32))))
 (=> $x307 $x61)))))
 ))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x237 (_ bv0 32))))
 (let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x108 (_ bv0 32))))
 (= $x307 $x332))))))
 ))
 (let (($x636 (and $x377 $x358)))
 (let (($x133 (and $x636 $x514)))
 (let (($x747 (and $x133 $x198)))
 (let (($x624 (= $x747 true)))
 (let (($x617 (= $x624 true)))
 (let (($x170 (= $x617 true)))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x607 (bvadd ?x9 input.dst.llvm-%m1)))
 (let ((?x394 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x607))))
 (let ((?x608 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv2 32))) ?x394)))
 (let ((?x393 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv3 32))) ?x608)))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (bvuge ?x108 (_ bv1 32))))
 (=> $x496 (= ?x638 ?x393)))))))))))
 ))
 (let (($x84 (and $x133 $x174)))
 (let (($x662 (= $x84 true)))
 (let (($x340 (= $x662 true)))
 (let (($x423 (= $x340 true)))
 (let ((?x562 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x581 (= (_ bv0 32) ?x562)))
 (let ((?x215 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x78 (= (_ bv0 32) ?x215)))
 (let ((?x473 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x473)))
 (let ((?x648 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x526 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x648)))
 (let (($x564 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x564 $x526)))
 (let (($x633 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x633 $x104)))
 (let (($x454 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x455 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x418 (and $x164 $x300)))
 (let (($x520 (not $x418)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x563 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x563 $x35)))
 (let (($x565 (and (not $x259) $x520)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x657 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x657 $x116)))
 (let (($x221 (not $x159)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x509 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x456 (and $x509 $x27)))
 (let (($x417 (and (not $x456) $x221)))
 (let (($x235 (and (and (and (and (and (and $x417 $x565) $x455) $x454) $x148) $x189) $x78)))
 (let (($x81 (and $x235 $x581)))
 (let (($x80 (= $x81 true)))
 (let (($x597 (= $x80 true)))
 (let (($x363 (= $x597 true)))
 (let ((?x304 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x253 (= (_ bv0 2) ?x304)))
 (let (($x143 (= $x253 true)))
 (let (($x291 (= $x143 true)))
 (let (($x73 (and $x291 $x363)))
 (let (($x534 (and $x73 $x423)))
 (let (($x748 (and $x534 $x170)))
 (let (($x147 (and $x748 $x102)))
 (let (($x494 (and $x147 $x577)))
 (let (($x390 (and $x494 $x594)))
 (let (($x325 (and $x390 $x282)))
 (let (($x118 (and $x325 $x65)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (=> $x498 (= ?x269 ?x638)))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (bvuge ?x108 (_ bv1 32))))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (= $x498 $x496))))))
 ))
 (let (($x566 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x108 (_ bv0 32))))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x517 (_ bv0 32))))
 (= $x294 $x307))))))
 ))
 (let (($x568 (and $x566 $x664)))
 (let (($x186 (and $x568 $x285)))
 (let (($x330 (and $x186 $x146)))
 (let (($x351 (and $x330 $x118)))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x555 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x255 (_ bv1 32))))
 (=> $x89 (= ?x555 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x582 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x126 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x255 (_ bv1 32))))
 (= $x89 (bvuge ?x126 (_ bv1 32)))))))
 ))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x126 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x255 (_ bv0 32))))
 (= $x47 (= ?x126 (_ bv0 32)))))))
 ))
 (let (($x317 (and $x463 $x458)))
 (let (($x644 (and $x317 $x582)))
 (let (($x258 (and $x644 $x32)))
 (let (($x213 (and $x258 $x351)))
 (let (($x709 (=> $x213 $x708)))
 (not $x709)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x693 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x9)))
 (let ((?x698 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x705 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x698))))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (=> $x498 (= ?x269 ?x705))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x237 (_ bv1 32))))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (= $x498 $x69))))))
 ))
 (let (($x664 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x61 (= false false)))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x517 (_ bv0 32))))
 (=> $x294 $x61)))))
 ))
 (let (($x598 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x237 (_ bv0 32))))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x517 (_ bv0 32))))
 (= $x294 $x332))))))
 ))
 (let (($x266 (and $x598 $x664)))
 (let (($x642 (and $x266 $x408)))
 (let (($x702 (and $x642 $x693)))
 (let (($x704 (= $x702 true)))
 (let (($x708 (= $x704 true)))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x110 (bvadd ?x9 input.dst.llvm-%m2)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x150))))
 (let ((?x555 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x255 (_ bv1 32))))
 (=> $x89 (= ?x555 ?x171))))))))))
 ))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x237 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x255 (_ bv1 32))))
 (= $x89 $x69))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x61 (= false false)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x255 (_ bv0 32))))
 (=> $x47 $x61)))))
 ))
 (let (($x730 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x237 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x255 (_ bv0 32))))
 (= $x47 $x332))))))
 ))
 (let (($x735 (and $x730 $x458)))
 (let (($x620 (and $x735 $x191)))
 (let (($x460 (and $x620 $x292)))
 (let (($x210 (= $x460 true)))
 (let (($x245 (= $x210 true)))
 (let (($x65 (= $x245 true)))
 (let (($x220 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x207 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x194 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x211 (and $x194 $x207)))
 (let (($x200 (and $x211 $x220)))
 (let (($x634 (= $x200 true)))
 (let (($x93 (= $x634 true)))
 (let (($x282 (= $x93 true)))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x607 (bvadd ?x9 input.dst.llvm-%m1)))
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem ?x607))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv2 32))) ?x459))))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (=> $x498 (= ?x269 ?x153))))))))))
 ))
 (let (($x528 (and $x642 $x392)))
 (let (($x385 (= $x528 true)))
 (let (($x106 (= $x385 true)))
 (let (($x594 (= $x106 true)))
 (let (($x574 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x607 (bvadd ?x9 input.dst.llvm-%m1)))
 (let ((?x394 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x607))))
 (let ((?x608 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv2 32))) ?x394)))
 (let ((?x393 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv3 32))) ?x608)))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (=> $x498 (= ?x269 ?x393)))))))))))
 ))
 (let (($x231 (and $x642 $x574)))
 (let (($x359 (= $x231 true)))
 (let (($x554 (= $x359 true)))
 (let (($x577 (= $x554 true)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x110 (bvadd ?x9 input.dst.llvm-%m2)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x110))))
 (let ((?x471 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x110 (_ bv2 32))) ?x246)))
 (let ((?x98 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x110 (_ bv3 32))) ?x471)))
 (let ((?x555 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x255 (_ bv1 32))))
 (=> $x89 (= ?x555 ?x98)))))))))))
 ))
 (let (($x345 (and $x620 $x224)))
 (let (($x428 (= $x345 true)))
 (let (($x278 (= $x428 true)))
 (let (($x102 (= $x278 true)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x607 (bvadd ?x9 input.dst.llvm-%m1)))
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem ?x607))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv2 32))) ?x459))))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (bvuge ?x108 (_ bv1 32))))
 (=> $x496 (= ?x638 ?x153))))))))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x237 (_ bv1 32))))
 (let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (bvuge ?x108 (_ bv1 32))))
 (= $x496 $x69))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x61 (= false false)))
 (let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x108 (_ bv0 32))))
 (=> $x307 $x61)))))
 ))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x237 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x237 (_ bv0 32))))
 (let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x108 (_ bv0 32))))
 (= $x307 $x332))))))
 ))
 (let (($x636 (and $x377 $x358)))
 (let (($x133 (and $x636 $x514)))
 (let (($x747 (and $x133 $x198)))
 (let (($x624 (= $x747 true)))
 (let (($x617 (= $x624 true)))
 (let (($x170 (= $x617 true)))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x607 (bvadd ?x9 input.dst.llvm-%m1)))
 (let ((?x394 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x607))))
 (let ((?x608 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv2 32))) ?x394)))
 (let ((?x393 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x607 (_ bv3 32))) ?x608)))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (bvuge ?x108 (_ bv1 32))))
 (=> $x496 (= ?x638 ?x393)))))))))))
 ))
 (let (($x84 (and $x133 $x174)))
 (let (($x662 (= $x84 true)))
 (let (($x340 (= $x662 true)))
 (let (($x423 (= $x340 true)))
 (let ((?x562 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x581 (= (_ bv0 32) ?x562)))
 (let ((?x215 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x78 (= (_ bv0 32) ?x215)))
 (let ((?x473 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x473)))
 (let ((?x648 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x526 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x648)))
 (let (($x564 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x564 $x526)))
 (let (($x633 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x633 $x104)))
 (let (($x454 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x455 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x418 (and $x164 $x300)))
 (let (($x520 (not $x418)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x563 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x563 $x35)))
 (let (($x565 (and (not $x259) $x520)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x657 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x657 $x116)))
 (let (($x221 (not $x159)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x509 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x456 (and $x509 $x27)))
 (let (($x417 (and (not $x456) $x221)))
 (let (($x235 (and (and (and (and (and (and $x417 $x565) $x455) $x454) $x148) $x189) $x78)))
 (let (($x81 (and $x235 $x581)))
 (let (($x80 (= $x81 true)))
 (let (($x597 (= $x80 true)))
 (let (($x363 (= $x597 true)))
 (let ((?x304 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x253 (= (_ bv0 2) ?x304)))
 (let (($x143 (= $x253 true)))
 (let (($x291 (= $x143 true)))
 (let (($x73 (and $x291 $x363)))
 (let (($x534 (and $x73 $x423)))
 (let (($x748 (and $x534 $x170)))
 (let (($x147 (and $x748 $x102)))
 (let (($x494 (and $x147 $x577)))
 (let (($x390 (and $x494 $x594)))
 (let (($x325 (and $x390 $x282)))
 (let (($x118 (and $x325 $x65)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (=> $x498 (= ?x269 ?x638)))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (bvuge ?x108 (_ bv1 32))))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x517 (_ bv1 32))))
 (= $x498 $x496))))))
 ))
 (let (($x566 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x108 (_ bv0 32))))
 (let ((?x517 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x517 (_ bv0 32))))
 (= $x294 $x307))))))
 ))
 (let (($x568 (and $x566 $x664)))
 (let (($x186 (and $x568 $x285)))
 (let (($x330 (and $x186 $x146)))
 (let (($x351 (and $x330 $x118)))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x555 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x255 (_ bv1 32))))
 (=> $x89 (= ?x555 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x582 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x126 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x255 (_ bv1 32))))
 (= $x89 (bvuge ?x126 (_ bv1 32)))))))
 ))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x126 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x255 (_ bv0 32))))
 (= $x47 (= ?x126 (_ bv0 32)))))))
 ))
 (let (($x317 (and $x463 $x458)))
 (let (($x644 (and $x317 $x582)))
 (let (($x258 (and $x644 $x32)))
 (let (($x213 (and $x258 $x351)))
 (let (($x709 (=> $x213 $x708)))
 (not $x709)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0801c100)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x86000704)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x069f8b40)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x0801c100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x069f8b43)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x86000707)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x069f8b40)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x86000704)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000062)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x01
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00010000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000062 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000062)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000062)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000062) #x00000000
    (ite (= x!0 #x00000000) #x00010000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000062) #x00000000
    (ite (= x!0 #x00000000) #x00010000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00010000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xbfdfae88)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf7dedec0)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xbd254ef4)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000050)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xbd254ef4)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf7dedec3)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xbfdfae8b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf7dedec0)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xbfdfae88)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000140) #x10
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000050) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000050 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000050)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000010
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000050) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000140) #x10
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000010
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000010
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000010
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x672 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x175)))
 (let ((?x676 (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv1 32))) (select input.dst.llvm-mem ?x672))))
 (let ((?x685 (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv2 32))) ?x676))))
 (let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (bvuge ?x636 (_ bv1 32))))
 (=> $x649 (= ?x233 ?x685))))))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (bvuge ?x223 (_ bv1 32))))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (bvuge ?x636 (_ bv1 32))))
 (= $x649 $x492))))))
 ))
 (let (($x618 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x162 (= false false)))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x636 (_ bv0 32))))
 (=> $x69 $x162)))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x223 (_ bv0 32))))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x636 (_ bv0 32))))
 (= $x69 $x173))))))
 ))
 (let (($x166 (and $x42 $x618)))
 (let (($x254 (and $x166 $x222)))
 (let (($x681 (and $x254 $x674)))
 (let (($x690 (= $x681 true)))
 (let (($x688 (= $x690 true)))
 (let (($x450 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x434 (bvadd ?x175 input.dst.llvm-%m2)))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv1 32))) (select input.dst.llvm-mem ?x434))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv2 32))) ?x650))))
 (let ((?x565 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x186 (_ bv1 32))))
 (=> $x657 (= ?x565 ?x122))))))))))
 ))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (bvuge ?x223 (_ bv1 32))))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x186 (_ bv1 32))))
 (= $x657 $x492))))))
 ))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x162 (= false false)))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x186 (_ bv0 32))))
 (=> $x269 $x162)))))
 ))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x223 (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x186 (_ bv0 32))))
 (= $x269 $x173))))))
 ))
 (let (($x480 (and $x440 $x516)))
 (let (($x590 (and $x480 $x7)))
 (let (($x127 (and $x590 $x450)))
 (let (($x179 (= $x127 true)))
 (let (($x49 (= $x179 true)))
 (let (($x286 (= $x49 true)))
 (let (($x710 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x631 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x452 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x124 (and $x452 $x631)))
 (let (($x726 (and $x124 $x710)))
 (let (($x722 (= $x726 true)))
 (let (($x716 (= $x722 true)))
 (let (($x719 (= $x716 true)))
 (let (($x161 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x399 (bvadd ?x175 input.dst.llvm-%m1)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem ?x399))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv2 32))) ?x504))))
 (let ((?x153 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x514 (_ bv1 32))))
 (=> $x174 (= ?x153 ?x261))))))))))
 ))
 (let (($x552 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (bvuge ?x223 (_ bv1 32))))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x514 (_ bv1 32))))
 (= $x174 $x492))))))
 ))
 (let (($x607 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x162 (= false false)))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x514 (_ bv0 32))))
 (=> $x133 $x162)))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x223 (_ bv0 32))))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x514 (_ bv0 32))))
 (= $x133 $x173))))))
 ))
 (let (($x609 (and $x34 $x607)))
 (let (($x538 (and $x609 $x552)))
 (let (($x283 (and $x538 $x161)))
 (let (($x439 (= $x283 true)))
 (let (($x319 (= $x439 true)))
 (let (($x632 (= $x319 true)))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x399 (bvadd ?x175 input.dst.llvm-%m1)))
 (let ((?x511 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x399))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv2 32))) ?x511)))
 (let ((?x547 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv3 32))) ?x75)))
 (let ((?x153 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x514 (_ bv1 32))))
 (=> $x174 (= ?x153 ?x547)))))))))))
 ))
 (let (($x543 (and $x538 $x232)))
 (let (($x177 (= $x543 true)))
 (let (($x87 (= $x177 true)))
 (let (($x535 (= $x87 true)))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x434 (bvadd ?x175 input.dst.llvm-%m2)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x434 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x434))))
 (let ((?x445 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x434 (_ bv2 32))) ?x113)))
 (let ((?x573 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x434 (_ bv3 32))) ?x445)))
 (let ((?x565 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x186 (_ bv1 32))))
 (=> $x657 (= ?x565 ?x573)))))))))))
 ))
 (let (($x96 (and $x590 $x149)))
 (let (($x443 (= $x96 true)))
 (let (($x545 (= $x443 true)))
 (let (($x154 (= $x545 true)))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x399 (bvadd ?x175 input.dst.llvm-%m1)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem ?x399))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv2 32))) ?x504))))
 (let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (bvuge ?x636 (_ bv1 32))))
 (=> $x649 (= ?x233 ?x261))))))))))
 ))
 (let (($x558 (and $x254 $x370)))
 (let (($x732 (= $x558 true)))
 (let (($x322 (= $x732 true)))
 (let (($x521 (= $x322 true)))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x399 (bvadd ?x175 input.dst.llvm-%m1)))
 (let ((?x511 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x399))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv2 32))) ?x511)))
 (let ((?x547 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv3 32))) ?x75)))
 (let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (bvuge ?x636 (_ bv1 32))))
 (=> $x649 (= ?x233 ?x547)))))))))))
 ))
 (let (($x575 (and $x254 $x419)))
 (let (($x654 (= $x575 true)))
 (let (($x548 (= $x654 true)))
 (let (($x599 (= $x548 true)))
 (let ((?x338 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x273 (= (_ bv0 32) ?x338)))
 (let ((?x577 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x494 (= (_ bv0 32) ?x577)))
 (let ((?x359 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x359)))
 (let ((?x156 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x156)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x574 (and $x408 $x228)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x202 $x574)))
 (let (($x266 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x345 (and $x287 $x224)))
 (let (($x428 (not $x345)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x471 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (and $x471 $x98)))
 (let (($x102 (and (not $x280) $x428)))
 (let (($x426 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x403 (and $x427 $x426)))
 (let (($x416 (not $x403)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x191 $x110)))
 (let (($x246 (and (not $x241) $x416)))
 (let (($x390 (and (and (and (and (and (and $x246 $x102) $x141) $x266) $x231) $x554) $x494)))
 (let (($x659 (and $x390 $x273)))
 (let (($x192 (= $x659 true)))
 (let (($x194 (= $x192 true)))
 (let (($x588 (= $x194 true)))
 (let ((?x170 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x748 (= (_ bv0 2) ?x170)))
 (let (($x586 (= $x748 true)))
 (let (($x730 (= $x586 true)))
 (let (($x207 (and $x730 $x588)))
 (let (($x559 (and $x207 $x599)))
 (let (($x313 (and $x559 $x521)))
 (let (($x249 (and $x313 $x154)))
 (let (($x136 (and $x249 $x535)))
 (let (($x205 (and $x136 $x632)))
 (let (($x720 (and $x205 $x719)))
 (let (($x733 (and $x720 $x286)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x153 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x514 (_ bv1 32))))
 (=> $x174 (= ?x153 ?x233)))))))
 ))
 (let (($x662 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (bvuge ?x636 (_ bv1 32))))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x514 (_ bv1 32))))
 (= $x174 $x649))))))
 ))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x636 (_ bv0 32))))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x514 (_ bv0 32))))
 (= $x133 $x69))))))
 ))
 (let (($x46 (and $x100 $x607)))
 (let (($x340 (and $x46 $x662)))
 (let (($x747 (and $x340 $x198)))
 (let (($x468 (and $x747 $x733)))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x565 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x186 (_ bv1 32))))
 (=> $x657 (= ?x565 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x159 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x186 (_ bv1 32))))
 (= $x657 (bvuge ?x496 (_ bv1 32)))))))
 ))
 (let (($x561 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x186 (_ bv0 32))))
 (= $x269 (= ?x496 (_ bv0 32)))))))
 ))
 (let (($x18 (and $x561 $x516)))
 (let (($x221 (and $x18 $x159)))
 (let (($x327 (and $x221 $x455)))
 (let (($x731 (and $x327 $x468)))
 (let (($x689 (=> $x731 $x688)))
 (not $x689)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x672 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x175)))
 (let ((?x676 (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv1 32))) (select input.dst.llvm-mem ?x672))))
 (let ((?x685 (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv2 32))) ?x676))))
 (let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (bvuge ?x636 (_ bv1 32))))
 (=> $x649 (= ?x233 ?x685))))))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (bvuge ?x223 (_ bv1 32))))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (bvuge ?x636 (_ bv1 32))))
 (= $x649 $x492))))))
 ))
 (let (($x618 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x162 (= false false)))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x636 (_ bv0 32))))
 (=> $x69 $x162)))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x223 (_ bv0 32))))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x636 (_ bv0 32))))
 (= $x69 $x173))))))
 ))
 (let (($x166 (and $x42 $x618)))
 (let (($x254 (and $x166 $x222)))
 (let (($x681 (and $x254 $x674)))
 (let (($x690 (= $x681 true)))
 (let (($x688 (= $x690 true)))
 (let (($x450 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x434 (bvadd ?x175 input.dst.llvm-%m2)))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv1 32))) (select input.dst.llvm-mem ?x434))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv2 32))) ?x650))))
 (let ((?x565 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x186 (_ bv1 32))))
 (=> $x657 (= ?x565 ?x122))))))))))
 ))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (bvuge ?x223 (_ bv1 32))))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x186 (_ bv1 32))))
 (= $x657 $x492))))))
 ))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x162 (= false false)))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x186 (_ bv0 32))))
 (=> $x269 $x162)))))
 ))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x223 (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x186 (_ bv0 32))))
 (= $x269 $x173))))))
 ))
 (let (($x480 (and $x440 $x516)))
 (let (($x590 (and $x480 $x7)))
 (let (($x127 (and $x590 $x450)))
 (let (($x179 (= $x127 true)))
 (let (($x49 (= $x179 true)))
 (let (($x286 (= $x49 true)))
 (let (($x710 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x631 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x452 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x124 (and $x452 $x631)))
 (let (($x726 (and $x124 $x710)))
 (let (($x722 (= $x726 true)))
 (let (($x716 (= $x722 true)))
 (let (($x719 (= $x716 true)))
 (let (($x161 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x399 (bvadd ?x175 input.dst.llvm-%m1)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem ?x399))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv2 32))) ?x504))))
 (let ((?x153 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x514 (_ bv1 32))))
 (=> $x174 (= ?x153 ?x261))))))))))
 ))
 (let (($x552 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (bvuge ?x223 (_ bv1 32))))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x514 (_ bv1 32))))
 (= $x174 $x492))))))
 ))
 (let (($x607 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x162 (= false false)))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x514 (_ bv0 32))))
 (=> $x133 $x162)))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x223 (_ bv0 32))))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x514 (_ bv0 32))))
 (= $x133 $x173))))))
 ))
 (let (($x609 (and $x34 $x607)))
 (let (($x538 (and $x609 $x552)))
 (let (($x283 (and $x538 $x161)))
 (let (($x439 (= $x283 true)))
 (let (($x319 (= $x439 true)))
 (let (($x632 (= $x319 true)))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x399 (bvadd ?x175 input.dst.llvm-%m1)))
 (let ((?x511 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x399))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv2 32))) ?x511)))
 (let ((?x547 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv3 32))) ?x75)))
 (let ((?x153 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x514 (_ bv1 32))))
 (=> $x174 (= ?x153 ?x547)))))))))))
 ))
 (let (($x543 (and $x538 $x232)))
 (let (($x177 (= $x543 true)))
 (let (($x87 (= $x177 true)))
 (let (($x535 (= $x87 true)))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x434 (bvadd ?x175 input.dst.llvm-%m2)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x434 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x434))))
 (let ((?x445 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x434 (_ bv2 32))) ?x113)))
 (let ((?x573 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x434 (_ bv3 32))) ?x445)))
 (let ((?x565 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x186 (_ bv1 32))))
 (=> $x657 (= ?x565 ?x573)))))))))))
 ))
 (let (($x96 (and $x590 $x149)))
 (let (($x443 (= $x96 true)))
 (let (($x545 (= $x443 true)))
 (let (($x154 (= $x545 true)))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x399 (bvadd ?x175 input.dst.llvm-%m1)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem ?x399))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv2 32))) ?x504))))
 (let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (bvuge ?x636 (_ bv1 32))))
 (=> $x649 (= ?x233 ?x261))))))))))
 ))
 (let (($x558 (and $x254 $x370)))
 (let (($x732 (= $x558 true)))
 (let (($x322 (= $x732 true)))
 (let (($x521 (= $x322 true)))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x399 (bvadd ?x175 input.dst.llvm-%m1)))
 (let ((?x511 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x399))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv2 32))) ?x511)))
 (let ((?x547 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x399 (_ bv3 32))) ?x75)))
 (let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (bvuge ?x636 (_ bv1 32))))
 (=> $x649 (= ?x233 ?x547)))))))))))
 ))
 (let (($x575 (and $x254 $x419)))
 (let (($x654 (= $x575 true)))
 (let (($x548 (= $x654 true)))
 (let (($x599 (= $x548 true)))
 (let ((?x338 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x273 (= (_ bv0 32) ?x338)))
 (let ((?x577 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x494 (= (_ bv0 32) ?x577)))
 (let ((?x359 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x359)))
 (let ((?x156 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x156)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x574 (and $x408 $x228)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x202 $x574)))
 (let (($x266 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x345 (and $x287 $x224)))
 (let (($x428 (not $x345)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x471 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (and $x471 $x98)))
 (let (($x102 (and (not $x280) $x428)))
 (let (($x426 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x403 (and $x427 $x426)))
 (let (($x416 (not $x403)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x191 $x110)))
 (let (($x246 (and (not $x241) $x416)))
 (let (($x390 (and (and (and (and (and (and $x246 $x102) $x141) $x266) $x231) $x554) $x494)))
 (let (($x659 (and $x390 $x273)))
 (let (($x192 (= $x659 true)))
 (let (($x194 (= $x192 true)))
 (let (($x588 (= $x194 true)))
 (let ((?x170 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x748 (= (_ bv0 2) ?x170)))
 (let (($x586 (= $x748 true)))
 (let (($x730 (= $x586 true)))
 (let (($x207 (and $x730 $x588)))
 (let (($x559 (and $x207 $x599)))
 (let (($x313 (and $x559 $x521)))
 (let (($x249 (and $x313 $x154)))
 (let (($x136 (and $x249 $x535)))
 (let (($x205 (and $x136 $x632)))
 (let (($x720 (and $x205 $x719)))
 (let (($x733 (and $x720 $x286)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x153 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x514 (_ bv1 32))))
 (=> $x174 (= ?x153 ?x233)))))))
 ))
 (let (($x662 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (bvuge ?x636 (_ bv1 32))))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x514 (_ bv1 32))))
 (= $x174 $x649))))))
 ))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x636 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x636 (_ bv0 32))))
 (let ((?x514 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x514 (_ bv0 32))))
 (= $x133 $x69))))))
 ))
 (let (($x46 (and $x100 $x607)))
 (let (($x340 (and $x46 $x662)))
 (let (($x747 (and $x340 $x198)))
 (let (($x468 (and $x747 $x733)))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x565 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x186 (_ bv1 32))))
 (=> $x657 (= ?x565 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x159 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x186 (_ bv1 32))))
 (= $x657 (bvuge ?x496 (_ bv1 32)))))))
 ))
 (let (($x561 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x186 (_ bv0 32))))
 (= $x269 (= ?x496 (_ bv0 32)))))))
 ))
 (let (($x18 (and $x561 $x516)))
 (let (($x221 (and $x18 $x159)))
 (let (($x327 (and $x221 $x455)))
 (let (($x731 (and $x327 $x468)))
 (let (($x689 (=> $x731 $x688)))
 (not $x689)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ff73597)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf6fa4b73)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7c400005) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!2 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc55086d4)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x24500373)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc55086d7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc55086d4)
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x615 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x592 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x334)))
 (let ((?x550 (concat (select input.dst.llvm-mem (bvadd ?x592 (_ bv1 32))) (select input.dst.llvm-mem ?x592))))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd ?x592 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x592 (_ bv2 32))) ?x550))))
 (let ((?x102 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (=> $x427 (= ?x102 ?x349))))))))))
 ))
 (let (($x593 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x714 (_ bv1 32))))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (= $x427 $x604))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x129 (= false false)))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x340 (_ bv0 32))))
 (=> $x153 $x129)))))
 ))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x714 (_ bv0 32))))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x340 (_ bv0 32))))
 (= $x153 $x290))))))
 ))
 (let (($x562 (and $x80 $x624)))
 (let (($x377 (and $x562 $x593)))
 (let (($x39 (and $x377 $x615)))
 (let (($x671 (= $x39 true)))
 (let (($x670 (= $x671 true)))
 (let (($x625 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x167 (bvadd ?x334 input.dst.llvm-%m2)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x157))))
 (let ((?x102 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (=> $x427 (= ?x102 ?x303))))))))))
 ))
 (let (($x97 (and $x377 $x625)))
 (let (($x579 (= $x97 true)))
 (let (($x645 (= $x579 true)))
 (let (($x165 (= $x645 true)))
 (let (($x691 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x171 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x118 (and $x171 $x65)))
 (let (($x707 (and $x118 $x691)))
 (let (($x703 (= $x707 true)))
 (let (($x694 (= $x703 true)))
 (let (($x696 (= $x694 true)))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x58 (bvadd ?x334 input.dst.llvm-%m1)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x47))))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x222 (_ bv1 32))))
 (=> $x419 (= ?x261 ?x378))))))))))
 ))
 (let (($x641 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x714 (_ bv1 32))))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x222 (_ bv1 32))))
 (= $x419 $x604))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x129 (= false false)))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (= ?x222 (_ bv0 32))))
 (=> $x254 $x129)))))
 ))
 (let (($x90 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x714 (_ bv0 32))))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (= ?x222 (_ bv0 32))))
 (= $x254 $x290))))))
 ))
 (let (($x647 (and $x90 $x399)))
 (let (($x216 (and $x647 $x641)))
 (let (($x532 (and $x216 $x584)))
 (let (($x214 (= $x532 true)))
 (let (($x195 (= $x214 true)))
 (let (($x245 (= $x195 true)))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x58 (bvadd ?x334 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x58))))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv2 32))) ?x204)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv3 32))) ?x321)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x222 (_ bv1 32))))
 (=> $x419 (= ?x261 ?x11)))))))))))
 ))
 (let (($x121 (and $x216 $x252)))
 (let (($x41 (= $x121 true)))
 (let (($x371 (= $x41 true)))
 (let (($x281 (= $x371 true)))
 (let (($x524 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x167 (bvadd ?x334 input.dst.llvm-%m2)))
 (let ((?x517 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x167))))
 (let ((?x566 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv2 32))) ?x517)))
 (let ((?x441 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv3 32))) ?x566)))
 (let ((?x102 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (=> $x427 (= ?x102 ?x441)))))))))))
 ))
 (let (($x456 (and $x377 $x524)))
 (let (($x137 (= $x456 true)))
 (let (($x35 (= $x137 true)))
 (let (($x259 (= $x35 true)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x58 (bvadd ?x334 input.dst.llvm-%m1)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x47))))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x166 (_ bv1 32))))
 (=> $x57 (= ?x479 ?x378))))))))))
 ))
 (let (($x404 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x714 (_ bv1 32))))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x166 (_ bv1 32))))
 (= $x57 $x604))))))
 ))
 (let (($x723 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x129 (= false false)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (= ?x166 (_ bv0 32))))
 (=> $x492 $x129)))))
 ))
 (let (($x715 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x714 (_ bv0 32))))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (= ?x166 (_ bv0 32))))
 (= $x492 $x290))))))
 ))
 (let (($x718 (and $x715 $x723)))
 (let (($x316 (and $x718 $x404)))
 (let (($x82 (and $x316 $x89)))
 (let (($x539 (= $x82 true)))
 (let (($x373 (= $x539 true)))
 (let (($x68 (= $x373 true)))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x58 (bvadd ?x334 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x58))))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv2 32))) ?x204)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv3 32))) ?x321)))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x166 (_ bv1 32))))
 (=> $x57 (= ?x479 ?x11)))))))))))
 ))
 (let (($x71 (and $x316 $x29)))
 (let (($x308 (= $x71 true)))
 (let (($x526 (= $x308 true)))
 (let (($x564 (= $x526 true)))
 (let ((?x628 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x382 (= (_ bv0 32) ?x628)))
 (let ((?x535 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x136 (= (_ bv0 32) ?x535)))
 (let ((?x177 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x51 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x552 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x552 $x298)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x543 (and $x145 $x232)))
 (let (($x609 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x128 $x149)))
 (let (($x443 (not $x96)))
 (let (($x573 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x445 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x445 $x573)))
 (let (($x154 (and (not $x234) $x443)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x242 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x242 $x374)))
 (let (($x268 (not $x310)))
 (let (($x434 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x7 $x434)))
 (let (($x113 (and (not $x152) $x268)))
 (let (($x205 (and (and (and (and (and (and $x113 $x154) $x140) $x609) $x543) $x87) $x136)))
 (let (($x536 (and $x205 $x382)))
 (let (($x576 (= $x536 true)))
 (let (($x452 (= $x576 true)))
 (let (($x13 (= $x452 true)))
 (let ((?x521 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x313 (= (_ bv0 2) ?x521)))
 (let (($x367 (= $x313 true)))
 (let (($x440 (= $x367 true)))
 (let (($x631 (and $x440 $x13)))
 (let (($x247 (and $x631 $x564)))
 (let (($x557 (and $x247 $x68)))
 (let (($x164 (and $x557 $x259)))
 (let (($x501 (and $x164 $x281)))
 (let (($x292 (and $x501 $x245)))
 (let (($x699 (and $x292 $x696)))
 (let (($x199 (and $x699 $x165)))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x222 (_ bv1 32))))
 (=> $x419 (= ?x261 ?x479)))))))
 ))
 (let (($x654 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x166 (_ bv1 32))))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x222 (_ bv1 32))))
 (= $x419 $x57))))))
 ))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (= ?x166 (_ bv0 32))))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (= ?x222 (_ bv0 32))))
 (= $x254 $x492))))))
 ))
 (let (($x525 (and $x325 $x399)))
 (let (($x548 (and $x525 $x654)))
 (let (($x558 (and $x548 $x370)))
 (let (($x656 (and $x558 $x199)))
 (let (($x141 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x102 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (=> $x427 (= ?x102 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (= $x427 (bvuge ?x649 (_ bv1 32)))))))
 ))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x340 (_ bv0 32))))
 (= $x153 (= ?x649 (_ bv0 32)))))))
 ))
 (let (($x617 (and $x491 $x624)))
 (let (($x416 (and $x617 $x403)))
 (let (($x528 (and $x416 $x141)))
 (let (($x613 (and $x528 $x656)))
 (let (($x669 (=> $x613 $x670)))
 (not $x669)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x615 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x592 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x334)))
 (let ((?x550 (concat (select input.dst.llvm-mem (bvadd ?x592 (_ bv1 32))) (select input.dst.llvm-mem ?x592))))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd ?x592 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x592 (_ bv2 32))) ?x550))))
 (let ((?x102 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (=> $x427 (= ?x102 ?x349))))))))))
 ))
 (let (($x593 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x714 (_ bv1 32))))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (= $x427 $x604))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x129 (= false false)))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x340 (_ bv0 32))))
 (=> $x153 $x129)))))
 ))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x714 (_ bv0 32))))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x340 (_ bv0 32))))
 (= $x153 $x290))))))
 ))
 (let (($x562 (and $x80 $x624)))
 (let (($x377 (and $x562 $x593)))
 (let (($x39 (and $x377 $x615)))
 (let (($x671 (= $x39 true)))
 (let (($x670 (= $x671 true)))
 (let (($x625 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x167 (bvadd ?x334 input.dst.llvm-%m2)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x157))))
 (let ((?x102 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (=> $x427 (= ?x102 ?x303))))))))))
 ))
 (let (($x97 (and $x377 $x625)))
 (let (($x579 (= $x97 true)))
 (let (($x645 (= $x579 true)))
 (let (($x165 (= $x645 true)))
 (let (($x691 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x171 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x118 (and $x171 $x65)))
 (let (($x707 (and $x118 $x691)))
 (let (($x703 (= $x707 true)))
 (let (($x694 (= $x703 true)))
 (let (($x696 (= $x694 true)))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x58 (bvadd ?x334 input.dst.llvm-%m1)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x47))))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x222 (_ bv1 32))))
 (=> $x419 (= ?x261 ?x378))))))))))
 ))
 (let (($x641 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x714 (_ bv1 32))))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x222 (_ bv1 32))))
 (= $x419 $x604))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x129 (= false false)))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (= ?x222 (_ bv0 32))))
 (=> $x254 $x129)))))
 ))
 (let (($x90 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x714 (_ bv0 32))))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (= ?x222 (_ bv0 32))))
 (= $x254 $x290))))))
 ))
 (let (($x647 (and $x90 $x399)))
 (let (($x216 (and $x647 $x641)))
 (let (($x532 (and $x216 $x584)))
 (let (($x214 (= $x532 true)))
 (let (($x195 (= $x214 true)))
 (let (($x245 (= $x195 true)))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x58 (bvadd ?x334 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x58))))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv2 32))) ?x204)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv3 32))) ?x321)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x222 (_ bv1 32))))
 (=> $x419 (= ?x261 ?x11)))))))))))
 ))
 (let (($x121 (and $x216 $x252)))
 (let (($x41 (= $x121 true)))
 (let (($x371 (= $x41 true)))
 (let (($x281 (= $x371 true)))
 (let (($x524 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x167 (bvadd ?x334 input.dst.llvm-%m2)))
 (let ((?x517 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x167))))
 (let ((?x566 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv2 32))) ?x517)))
 (let ((?x441 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv3 32))) ?x566)))
 (let ((?x102 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (=> $x427 (= ?x102 ?x441)))))))))))
 ))
 (let (($x456 (and $x377 $x524)))
 (let (($x137 (= $x456 true)))
 (let (($x35 (= $x137 true)))
 (let (($x259 (= $x35 true)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x58 (bvadd ?x334 input.dst.llvm-%m1)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x47))))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x166 (_ bv1 32))))
 (=> $x57 (= ?x479 ?x378))))))))))
 ))
 (let (($x404 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x714 (_ bv1 32))))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x166 (_ bv1 32))))
 (= $x57 $x604))))))
 ))
 (let (($x723 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x129 (= false false)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (= ?x166 (_ bv0 32))))
 (=> $x492 $x129)))))
 ))
 (let (($x715 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x714 (_ bv0 32))))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (= ?x166 (_ bv0 32))))
 (= $x492 $x290))))))
 ))
 (let (($x718 (and $x715 $x723)))
 (let (($x316 (and $x718 $x404)))
 (let (($x82 (and $x316 $x89)))
 (let (($x539 (= $x82 true)))
 (let (($x373 (= $x539 true)))
 (let (($x68 (= $x373 true)))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x58 (bvadd ?x334 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x58))))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv2 32))) ?x204)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv3 32))) ?x321)))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x166 (_ bv1 32))))
 (=> $x57 (= ?x479 ?x11)))))))))))
 ))
 (let (($x71 (and $x316 $x29)))
 (let (($x308 (= $x71 true)))
 (let (($x526 (= $x308 true)))
 (let (($x564 (= $x526 true)))
 (let ((?x628 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x382 (= (_ bv0 32) ?x628)))
 (let ((?x535 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x136 (= (_ bv0 32) ?x535)))
 (let ((?x177 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x51 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x552 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x552 $x298)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x543 (and $x145 $x232)))
 (let (($x609 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x128 $x149)))
 (let (($x443 (not $x96)))
 (let (($x573 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x445 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x445 $x573)))
 (let (($x154 (and (not $x234) $x443)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x242 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x242 $x374)))
 (let (($x268 (not $x310)))
 (let (($x434 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x7 $x434)))
 (let (($x113 (and (not $x152) $x268)))
 (let (($x205 (and (and (and (and (and (and $x113 $x154) $x140) $x609) $x543) $x87) $x136)))
 (let (($x536 (and $x205 $x382)))
 (let (($x576 (= $x536 true)))
 (let (($x452 (= $x576 true)))
 (let (($x13 (= $x452 true)))
 (let ((?x521 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x313 (= (_ bv0 2) ?x521)))
 (let (($x367 (= $x313 true)))
 (let (($x440 (= $x367 true)))
 (let (($x631 (and $x440 $x13)))
 (let (($x247 (and $x631 $x564)))
 (let (($x557 (and $x247 $x68)))
 (let (($x164 (and $x557 $x259)))
 (let (($x501 (and $x164 $x281)))
 (let (($x292 (and $x501 $x245)))
 (let (($x699 (and $x292 $x696)))
 (let (($x199 (and $x699 $x165)))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x222 (_ bv1 32))))
 (=> $x419 (= ?x261 ?x479)))))))
 ))
 (let (($x654 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x166 (_ bv1 32))))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x222 (_ bv1 32))))
 (= $x419 $x57))))))
 ))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x492 (= ?x166 (_ bv0 32))))
 (let ((?x222 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (= ?x222 (_ bv0 32))))
 (= $x254 $x492))))))
 ))
 (let (($x525 (and $x325 $x399)))
 (let (($x548 (and $x525 $x654)))
 (let (($x558 (and $x548 $x370)))
 (let (($x656 (and $x558 $x199)))
 (let (($x141 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x102 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (=> $x427 (= ?x102 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x340 (_ bv1 32))))
 (= $x427 (bvuge ?x649 (_ bv1 32)))))))
 ))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x340 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x340 (_ bv0 32))))
 (= $x153 (= ?x649 (_ bv0 32)))))))
 ))
 (let (($x617 (and $x491 $x624)))
 (let (($x416 (and $x617 $x403)))
 (let (($x528 (and $x416 $x141)))
 (let (($x613 (and $x528 $x656)))
 (let (($x669 (=> $x613 $x670)))
 (not $x669)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2800199c)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60005238)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6000523b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2800199f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60005238)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2800199c)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x40
      #x00))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x40
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!24 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!43))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x36615e04)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!44))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ed01600)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00002004)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00002004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ed01603)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x36615e07)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ed01600)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x36615e04)
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x00400000 x!0) #x00400000 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00400001) #x40
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!48 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x00400000 x!0) #x00400000 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!48 (k!45 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!43 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!43 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!44 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!44 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!49 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!49 (k!45 x!0)))
  (define-fun k!43 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00400001) #x40
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!43 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!43 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!47 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!47 (k!46 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00400000) false
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
      (let ((a!1 (concat (k!43 (bvadd #x00400003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00400002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00400001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00400000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!44 (bvadd #x00400003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00400002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00400001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00400000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x606 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x602 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x389)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x602 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x602))))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x602 (_ bv2 32))) ?x168)))
 (let ((?x663 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x602 (_ bv3 32))) ?x366)))
 (let ((?x378 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (=> $x29 (= ?x378 ?x663)))))))))))
 ))
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x697 (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (= $x29 $x544))))))
 ))
 (let (($x58 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x56 (= false false)))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x404 (_ bv0 32))))
 (=> $x316 $x56)))))
 ))
 (let (($x431 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x697 (_ bv0 32))))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x404 (_ bv0 32))))
 (= $x316 $x272))))))
 ))
 (let (($x101 (and $x431 $x58)))
 (let (($x484 (and $x101 $x743)))
 (let (($x476 (and $x484 $x606)))
 (let (($x239 (= $x476 true)))
 (let (($x387 (= $x239 true)))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x389 input.dst.llvm-%m2)))
 (let ((?x603 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x603))))
 (let ((?x154 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x548 (_ bv1 32))))
 (=> $x242 (= ?x154 ?x375))))))))))
 ))
 (let (($x502 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x697 (_ bv1 32))))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x548 (_ bv1 32))))
 (= $x242 $x544))))))
 ))
 (let (($x732 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x56 (= false false)))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x548 (_ bv0 32))))
 (=> $x261 $x56)))))
 ))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x697 (_ bv0 32))))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x548 (_ bv0 32))))
 (= $x261 $x272))))))
 ))
 (let (($x338 (and $x192 $x732)))
 (let (($x42 (and $x338 $x502)))
 (let (($x537 (and $x42 $x339)))
 (let (($x275 (= $x537 true)))
 (let (($x360 (= $x275 true)))
 (let (($x581 (= $x360 true)))
 (let (($x672 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x286 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x122 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x733 (and $x122 $x286)))
 (let (($x686 (and $x733 $x672)))
 (let (($x684 (= $x686 true)))
 (let (($x682 (= $x684 true)))
 (let (($x679 (= $x682 true)))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x438 (bvadd ?x389 input.dst.llvm-%m1)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv1 32))) (select input.dst.llvm-mem ?x438))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv2 32))) ?x269))))
 (let ((?x378 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (=> $x29 (= ?x378 ?x330))))))))))
 ))
 (let (($x307 (and $x484 $x420)))
 (let (($x304 (= $x307 true)))
 (let (($x291 (= $x304 true)))
 (let (($x49 (= $x291 true)))
 (let (($x48 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x438 (bvadd ?x389 input.dst.llvm-%m1)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x438))))
 (let ((?x653 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv2 32))) ?x315)))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv3 32))) ?x653)))
 (let ((?x378 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (=> $x29 (= ?x378 ?x244)))))))))))
 ))
 (let (($x329 (and $x484 $x48)))
 (let (($x422 (= $x329 true)))
 (let (($x483 (= $x422 true)))
 (let (($x253 (= $x483 true)))
 (let (($x620 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x389 input.dst.llvm-%m2)))
 (let ((?x514 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x324))))
 (let ((?x100 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv2 32))) ?x514)))
 (let ((?x735 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv3 32))) ?x100)))
 (let ((?x154 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x548 (_ bv1 32))))
 (=> $x242 (= ?x154 ?x735)))))))))))
 ))
 (let (($x241 (and $x42 $x620)))
 (let (($x457 (= $x241 true)))
 (let (($x98 (= $x457 true)))
 (let (($x280 (= $x98 true)))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x438 (bvadd ?x389 input.dst.llvm-%m1)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv1 32))) (select input.dst.llvm-mem ?x438))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv2 32))) ?x269))))
 (let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x718 (_ bv1 32))))
 (=> $x540 (= ?x309 ?x330))))))))))
 ))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x697 (_ bv1 32))))
 (let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x718 (_ bv1 32))))
 (= $x540 $x544))))))
 ))
 (let (($x705 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x56 (= false false)))
 (let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x718 (_ bv0 32))))
 (=> $x604 $x56)))))
 ))
 (let (($x698 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x697 (_ bv0 32))))
 (let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x718 (_ bv0 32))))
 (= $x604 $x272))))))
 ))
 (let (($x693 (and $x698 $x705)))
 (let (($x655 (and $x693 $x227)))
 (let (($x623 (and $x655 $x657)))
 (let (($x230 (= $x623 true)))
 (let (($x467 (= $x230 true)))
 (let (($x661 (= $x467 true)))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x438 (bvadd ?x389 input.dst.llvm-%m1)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x438))))
 (let ((?x653 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv2 32))) ?x315)))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv3 32))) ?x653)))
 (let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x718 (_ bv1 32))))
 (=> $x540 (= ?x309 ?x244)))))))))))
 ))
 (let (($x44 (and $x655 $x472)))
 (let (($x352 (= $x44 true)))
 (let (($x228 (= $x352 true)))
 (let (($x408 (= $x228 true)))
 (let ((?x549 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x461 (= (_ bv0 32) ?x549)))
 (let ((?x281 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x501 (= (_ bv0 32) ?x281)))
 (let ((?x41 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x371 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x182 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x510 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x182)))
 (let (($x641 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x252 (and $x641 $x510)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x163 $x252)))
 (let (($x647 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x524 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x509 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x456 (and $x509 $x524)))
 (let (($x137 (not $x456)))
 (let (($x441 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x566 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x505 (and $x566 $x441)))
 (let (($x259 (and (not $x505) $x137)))
 (let (($x453 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x294 $x453)))
 (let (($x489 (not $x258)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x593 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x372 (and $x593 $x167)))
 (let (($x517 (and (not $x372) $x489)))
 (let (($x292 (and (and (and (and (and (and $x517 $x259) $x418) $x647) $x121) $x371) $x501)))
 (let (($x277 (and $x292 $x461)))
 (let (($x503 (= $x277 true)))
 (let (($x171 (= $x503 true)))
 (let (($x460 (= $x171 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x557 (= (_ bv0 2) ?x68)))
 (let (($x67 (= $x557 true)))
 (let (($x80 (= $x67 true)))
 (let (($x65 (and $x80 $x460)))
 (let (($x642 (and $x65 $x408)))
 (let (($x144 (and $x642 $x661)))
 (let (($x287 (and $x144 $x280)))
 (let (($x143 (and $x287 $x253)))
 (let (($x450 (and $x143 $x49)))
 (let (($x677 (and $x450 $x679)))
 (let (($x597 (and $x677 $x581)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x378 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (=> $x29 (= ?x378 ?x309)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x718 (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (= $x29 $x540))))))
 ))
 (let (($x720 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x718 (_ bv0 32))))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x404 (_ bv0 32))))
 (= $x316 $x604))))))
 ))
 (let (($x187 (and $x720 $x58)))
 (let (($x526 (and $x187 $x308)))
 (let (($x82 (and $x526 $x89)))
 (let (($x81 (and $x82 $x597)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x154 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x548 (_ bv1 32))))
 (=> $x242 (= ?x154 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x57 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x548 (_ bv1 32))))
 (= $x242 (bvuge ?x57 (_ bv1 32)))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x57 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x548 (_ bv0 32))))
 (= $x261 (= ?x57 (_ bv0 32)))))))
 ))
 (let (($x322 (and $x135 $x732)))
 (let (($x268 (and $x322 $x310)))
 (let (($x283 (and $x268 $x140)))
 (let (($x363 (and $x283 $x81)))
 (let (($x184 (=> $x363 $x387)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x606 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x602 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x389)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x602 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x602))))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x602 (_ bv2 32))) ?x168)))
 (let ((?x663 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x602 (_ bv3 32))) ?x366)))
 (let ((?x378 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (=> $x29 (= ?x378 ?x663)))))))))))
 ))
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x697 (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (= $x29 $x544))))))
 ))
 (let (($x58 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x56 (= false false)))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x404 (_ bv0 32))))
 (=> $x316 $x56)))))
 ))
 (let (($x431 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x697 (_ bv0 32))))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x404 (_ bv0 32))))
 (= $x316 $x272))))))
 ))
 (let (($x101 (and $x431 $x58)))
 (let (($x484 (and $x101 $x743)))
 (let (($x476 (and $x484 $x606)))
 (let (($x239 (= $x476 true)))
 (let (($x387 (= $x239 true)))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x389 input.dst.llvm-%m2)))
 (let ((?x603 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x603))))
 (let ((?x154 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x548 (_ bv1 32))))
 (=> $x242 (= ?x154 ?x375))))))))))
 ))
 (let (($x502 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x697 (_ bv1 32))))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x548 (_ bv1 32))))
 (= $x242 $x544))))))
 ))
 (let (($x732 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x56 (= false false)))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x548 (_ bv0 32))))
 (=> $x261 $x56)))))
 ))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x697 (_ bv0 32))))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x548 (_ bv0 32))))
 (= $x261 $x272))))))
 ))
 (let (($x338 (and $x192 $x732)))
 (let (($x42 (and $x338 $x502)))
 (let (($x537 (and $x42 $x339)))
 (let (($x275 (= $x537 true)))
 (let (($x360 (= $x275 true)))
 (let (($x581 (= $x360 true)))
 (let (($x672 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x286 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x122 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x733 (and $x122 $x286)))
 (let (($x686 (and $x733 $x672)))
 (let (($x684 (= $x686 true)))
 (let (($x682 (= $x684 true)))
 (let (($x679 (= $x682 true)))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x438 (bvadd ?x389 input.dst.llvm-%m1)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv1 32))) (select input.dst.llvm-mem ?x438))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv2 32))) ?x269))))
 (let ((?x378 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (=> $x29 (= ?x378 ?x330))))))))))
 ))
 (let (($x307 (and $x484 $x420)))
 (let (($x304 (= $x307 true)))
 (let (($x291 (= $x304 true)))
 (let (($x49 (= $x291 true)))
 (let (($x48 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x438 (bvadd ?x389 input.dst.llvm-%m1)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x438))))
 (let ((?x653 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv2 32))) ?x315)))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv3 32))) ?x653)))
 (let ((?x378 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (=> $x29 (= ?x378 ?x244)))))))))))
 ))
 (let (($x329 (and $x484 $x48)))
 (let (($x422 (= $x329 true)))
 (let (($x483 (= $x422 true)))
 (let (($x253 (= $x483 true)))
 (let (($x620 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x389 input.dst.llvm-%m2)))
 (let ((?x514 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x324))))
 (let ((?x100 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv2 32))) ?x514)))
 (let ((?x735 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv3 32))) ?x100)))
 (let ((?x154 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x548 (_ bv1 32))))
 (=> $x242 (= ?x154 ?x735)))))))))))
 ))
 (let (($x241 (and $x42 $x620)))
 (let (($x457 (= $x241 true)))
 (let (($x98 (= $x457 true)))
 (let (($x280 (= $x98 true)))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x438 (bvadd ?x389 input.dst.llvm-%m1)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv1 32))) (select input.dst.llvm-mem ?x438))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x438 (_ bv2 32))) ?x269))))
 (let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x718 (_ bv1 32))))
 (=> $x540 (= ?x309 ?x330))))))))))
 ))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x697 (_ bv1 32))))
 (let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x718 (_ bv1 32))))
 (= $x540 $x544))))))
 ))
 (let (($x705 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x56 (= false false)))
 (let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x718 (_ bv0 32))))
 (=> $x604 $x56)))))
 ))
 (let (($x698 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x697 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x697 (_ bv0 32))))
 (let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x718 (_ bv0 32))))
 (= $x604 $x272))))))
 ))
 (let (($x693 (and $x698 $x705)))
 (let (($x655 (and $x693 $x227)))
 (let (($x623 (and $x655 $x657)))
 (let (($x230 (= $x623 true)))
 (let (($x467 (= $x230 true)))
 (let (($x661 (= $x467 true)))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x438 (bvadd ?x389 input.dst.llvm-%m1)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x438))))
 (let ((?x653 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv2 32))) ?x315)))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x438 (_ bv3 32))) ?x653)))
 (let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x718 (_ bv1 32))))
 (=> $x540 (= ?x309 ?x244)))))))))))
 ))
 (let (($x44 (and $x655 $x472)))
 (let (($x352 (= $x44 true)))
 (let (($x228 (= $x352 true)))
 (let (($x408 (= $x228 true)))
 (let ((?x549 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x461 (= (_ bv0 32) ?x549)))
 (let ((?x281 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x501 (= (_ bv0 32) ?x281)))
 (let ((?x41 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x371 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x182 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x510 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x182)))
 (let (($x641 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x252 (and $x641 $x510)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x163 $x252)))
 (let (($x647 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x524 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x509 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x456 (and $x509 $x524)))
 (let (($x137 (not $x456)))
 (let (($x441 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x566 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x505 (and $x566 $x441)))
 (let (($x259 (and (not $x505) $x137)))
 (let (($x453 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x294 $x453)))
 (let (($x489 (not $x258)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x593 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x372 (and $x593 $x167)))
 (let (($x517 (and (not $x372) $x489)))
 (let (($x292 (and (and (and (and (and (and $x517 $x259) $x418) $x647) $x121) $x371) $x501)))
 (let (($x277 (and $x292 $x461)))
 (let (($x503 (= $x277 true)))
 (let (($x171 (= $x503 true)))
 (let (($x460 (= $x171 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x557 (= (_ bv0 2) ?x68)))
 (let (($x67 (= $x557 true)))
 (let (($x80 (= $x67 true)))
 (let (($x65 (and $x80 $x460)))
 (let (($x642 (and $x65 $x408)))
 (let (($x144 (and $x642 $x661)))
 (let (($x287 (and $x144 $x280)))
 (let (($x143 (and $x287 $x253)))
 (let (($x450 (and $x143 $x49)))
 (let (($x677 (and $x450 $x679)))
 (let (($x597 (and $x677 $x581)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x378 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (=> $x29 (= ?x378 ?x309)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x718 (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x404 (_ bv1 32))))
 (= $x29 $x540))))))
 ))
 (let (($x720 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x718 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x718 (_ bv0 32))))
 (let ((?x404 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x404 (_ bv0 32))))
 (= $x316 $x604))))))
 ))
 (let (($x187 (and $x720 $x58)))
 (let (($x526 (and $x187 $x308)))
 (let (($x82 (and $x526 $x89)))
 (let (($x81 (and $x82 $x597)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x154 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x548 (_ bv1 32))))
 (=> $x242 (= ?x154 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x57 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x548 (_ bv1 32))))
 (= $x242 (bvuge ?x57 (_ bv1 32)))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x57 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x548 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x548 (_ bv0 32))))
 (= $x261 (= ?x57 (_ bv0 32)))))))
 ))
 (let (($x322 (and $x135 $x732)))
 (let (($x268 (and $x322 $x310)))
 (let (($x283 (and $x268 $x140)))
 (let (($x363 (and $x283 $x81)))
 (let (($x184 (=> $x363 $x387)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000050)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xbfdfae88)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf7dedec0)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xbd254ef4)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xbd254ef4)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf7dedec3)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xbfdfae8b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf7dedec0)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xbfdfae88)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000050) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000050 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000050)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!25 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000140) #x10
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000010
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000050) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000140) #x10
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000010
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000010
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000010
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0801c100)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x86000704)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x069f8b40)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x0801c100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x069f8b43)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x86000707)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x069f8b40)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x86000704)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000062)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x01
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00010000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000062 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000062)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000062)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000062) #x00000000
    (ite (= x!0 #x00000000) #x00010000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000062) #x00000000
    (ite (= x!0 #x00000000) #x00010000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00010000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x463 (bvadd ?x359 input.dst.llvm-%m2)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv1 32))) (select input.dst.llvm-mem ?x463))))
 (let ((?x637 (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv2 32))) ?x55))))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x693 (_ bv1 32))))
 (=> $x410 (= ?x638 ?x637))))))))))
 ))
 (let (($x690 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x130 (_ bv1 32))))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x693 (_ bv1 32))))
 (= $x410 $x10))))))
 ))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x317 (= false false)))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (= ?x693 (_ bv0 32))))
 (=> $x544 $x317)))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x130 (_ bv0 32))))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (= ?x693 (_ bv0 32))))
 (= $x544 $x694))))))
 ))
 (let (($x680 (and $x19 $x383)))
 (let (($x689 (and $x680 $x690)))
 (let (($x217 (and $x689 $x652)))
 (let (($x504 (= $x217 true)))
 (let (($x74 (= $x504 true)))
 (let ((?x30 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x190 (= (_ bv0 2) ?x30)))
 (let (($x278 (= $x190 true)))
 (let (($x273 (= $x278 true)))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x463 (bvadd ?x359 input.dst.llvm-%m2)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv1 32))) (select input.dst.llvm-mem ?x463))))
 (let ((?x637 (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv2 32))) ?x55))))
 (let ((?x259 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x526 (_ bv1 32))))
 (=> $x294 (= ?x259 ?x637))))))))))
 ))
 (let (($x452 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x130 (_ bv1 32))))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x526 (_ bv1 32))))
 (= $x294 $x10))))))
 ))
 (let (($x539 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x317 (= false false)))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x526 (_ bv0 32))))
 (=> $x378 $x317)))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x130 (_ bv0 32))))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x526 (_ bv0 32))))
 (= $x378 $x694))))))
 ))
 (let (($x284 (and $x402 $x539)))
 (let (($x13 (and $x284 $x452)))
 (let (($x737 (and $x13 $x246)))
 (let (($x741 (= $x737 true)))
 (let (($x444 (= $x741 true)))
 (let (($x388 (= $x444 true)))
 (let (($x303 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x645 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x170 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x625 (and $x170 $x645)))
 (let (($x97 (and $x625 $x303)))
 (let (($x165 (= $x97 true)))
 (let (($x199 (= $x165 true)))
 (let (($x613 (= $x199 true)))
 (let (($x748 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x157 (bvadd ?x359 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x160))))
 (let ((?x330 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x227 (_ bv1 32))))
 (=> $x472 (= ?x330 ?x33))))))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x130 (_ bv1 32))))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x227 (_ bv1 32))))
 (= $x472 $x10))))))
 ))
 (let (($x438 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x317 (= false false)))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x227 (_ bv0 32))))
 (=> $x655 $x317)))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x130 (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x227 (_ bv0 32))))
 (= $x655 $x694))))))
 ))
 (let (($x573 (and $x105 $x438)))
 (let (($x96 (and $x573 $x149)))
 (let (($x586 (and $x96 $x748)))
 (let (($x523 (= $x586 true)))
 (let (($x198 (= $x523 true)))
 (let (($x358 (= $x198 true)))
 (let (($x397 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x157 (bvadd ?x359 input.dst.llvm-%m1)))
 (let ((?x554 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x157))))
 (let ((?x85 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv2 32))) ?x554)))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv3 32))) ?x85)))
 (let ((?x330 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x227 (_ bv1 32))))
 (=> $x472 (= ?x330 ?x176)))))))))))
 ))
 (let (($x270 (and $x96 $x397)))
 (let (($x354 (= $x270 true)))
 (let (($x22 (= $x354 true)))
 (let (($x739 (= $x22 true)))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x463 (bvadd ?x359 input.dst.llvm-%m2)))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x463 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x463))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x463 (_ bv2 32))) ?x102)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x463 (_ bv3 32))) ?x141)))
 (let ((?x259 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x526 (_ bv1 32))))
 (=> $x294 (= ?x259 ?x222)))))))))))
 ))
 (let (($x570 (and $x13 $x325)))
 (let (($x399 (= $x570 true)))
 (let (($x480 (= $x399 true)))
 (let (($x627 (= $x480 true)))
 (let (($x153 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x157 (bvadd ?x359 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x160))))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x693 (_ bv1 32))))
 (=> $x410 (= ?x638 ?x33))))))))))
 ))
 (let (($x174 (and $x689 $x153)))
 (let (($x233 (= $x174 true)))
 (let (($x129 (= $x233 true)))
 (let (($x747 (= $x129 true)))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x157 (bvadd ?x359 input.dst.llvm-%m1)))
 (let ((?x554 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x157))))
 (let ((?x85 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv2 32))) ?x554)))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv3 32))) ?x85)))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x693 (_ bv1 32))))
 (=> $x410 (= ?x638 ?x176)))))))))))
 ))
 (let (($x279 (and $x689 $x9)))
 (let (($x580 (= $x279 true)))
 (let (($x362 (= $x580 true)))
 (let (($x368 (= $x362 true)))
 (let ((?x48 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x329 (= (_ bv0 32) ?x48)))
 (let ((?x595 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x335 (= (_ bv0 32) ?x595)))
 (let ((?x743 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x484 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x743)))
 (let ((?x345 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x431 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x345)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x101 (and $x280 $x431)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x651 (and $x98 $x101)))
 (let (($x457 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x620 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x455 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x379 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x514 (and $x379 $x455)))
 (let (($x100 (not $x514)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x327 (and $x133 $x197)))
 (let (($x745 (and (not $x327) $x100)))
 (let (($x502 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x173 $x502)))
 (let (($x324 (not $x42)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x661 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x661 $x446)))
 (let (($x607 (and (not $x192) $x324)))
 (let (($x108 (and (and (and (and (and (and $x607 $x745) $x620) $x457) $x651) $x484) $x335)))
 (let (($x420 (and $x108 $x329)))
 (let (($x307 (= $x420 true)))
 (let (($x304 (= $x307 true)))
 (let (($x291 (= $x304 true)))
 (let (($x131 (and $x291 $x368)))
 (let (($x624 (and $x131 $x747)))
 (let (($x7 (and $x624 $x627)))
 (let (($x376 (and $x7 $x739)))
 (let (($x636 (and $x376 $x358)))
 (let (($x656 (and $x636 $x613)))
 (let (($x331 (and $x656 $x388)))
 (let (($x194 (and $x331 $x273)))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x330 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x227 (_ bv1 32))))
 (=> $x472 (= ?x330 ?x638)))))))
 ))
 (let (($x352 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x693 (_ bv1 32))))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x227 (_ bv1 32))))
 (= $x472 $x410))))))
 ))
 (let (($x699 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (= ?x693 (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x227 (_ bv0 32))))
 (= $x655 $x544))))))
 ))
 (let (($x265 (and $x699 $x438)))
 (let (($x228 (and $x265 $x352)))
 (let (($x623 (and $x228 $x657)))
 (let (($x659 (and $x623 $x194)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x259 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x526 (_ bv1 32))))
 (=> $x294 (= ?x259 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x258 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x540 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x526 (_ bv1 32))))
 (= $x294 (bvuge ?x540 (_ bv1 32)))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x540 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x526 (_ bv0 32))))
 (= $x378 (= ?x540 (_ bv0 32)))))))
 ))
 (let (($x373 (and $x458 $x539)))
 (let (($x489 (and $x373 $x258)))
 (let (($x532 (and $x489 $x418)))
 (let (($x588 (and $x532 $x659)))
 (let (($x43 (=> $x588 $x74)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x463 (bvadd ?x359 input.dst.llvm-%m2)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv1 32))) (select input.dst.llvm-mem ?x463))))
 (let ((?x637 (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv2 32))) ?x55))))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x693 (_ bv1 32))))
 (=> $x410 (= ?x638 ?x637))))))))))
 ))
 (let (($x690 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x130 (_ bv1 32))))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x693 (_ bv1 32))))
 (= $x410 $x10))))))
 ))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x317 (= false false)))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (= ?x693 (_ bv0 32))))
 (=> $x544 $x317)))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x130 (_ bv0 32))))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (= ?x693 (_ bv0 32))))
 (= $x544 $x694))))))
 ))
 (let (($x680 (and $x19 $x383)))
 (let (($x689 (and $x680 $x690)))
 (let (($x217 (and $x689 $x652)))
 (let (($x504 (= $x217 true)))
 (let (($x74 (= $x504 true)))
 (let ((?x30 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x190 (= (_ bv0 2) ?x30)))
 (let (($x278 (= $x190 true)))
 (let (($x273 (= $x278 true)))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x463 (bvadd ?x359 input.dst.llvm-%m2)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv1 32))) (select input.dst.llvm-mem ?x463))))
 (let ((?x637 (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x463 (_ bv2 32))) ?x55))))
 (let ((?x259 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x526 (_ bv1 32))))
 (=> $x294 (= ?x259 ?x637))))))))))
 ))
 (let (($x452 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x130 (_ bv1 32))))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x526 (_ bv1 32))))
 (= $x294 $x10))))))
 ))
 (let (($x539 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x317 (= false false)))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x526 (_ bv0 32))))
 (=> $x378 $x317)))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x130 (_ bv0 32))))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x526 (_ bv0 32))))
 (= $x378 $x694))))))
 ))
 (let (($x284 (and $x402 $x539)))
 (let (($x13 (and $x284 $x452)))
 (let (($x737 (and $x13 $x246)))
 (let (($x741 (= $x737 true)))
 (let (($x444 (= $x741 true)))
 (let (($x388 (= $x444 true)))
 (let (($x303 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x645 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x170 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x625 (and $x170 $x645)))
 (let (($x97 (and $x625 $x303)))
 (let (($x165 (= $x97 true)))
 (let (($x199 (= $x165 true)))
 (let (($x613 (= $x199 true)))
 (let (($x748 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x157 (bvadd ?x359 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x160))))
 (let ((?x330 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x227 (_ bv1 32))))
 (=> $x472 (= ?x330 ?x33))))))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x130 (_ bv1 32))))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x227 (_ bv1 32))))
 (= $x472 $x10))))))
 ))
 (let (($x438 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x317 (= false false)))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x227 (_ bv0 32))))
 (=> $x655 $x317)))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x130 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x130 (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x227 (_ bv0 32))))
 (= $x655 $x694))))))
 ))
 (let (($x573 (and $x105 $x438)))
 (let (($x96 (and $x573 $x149)))
 (let (($x586 (and $x96 $x748)))
 (let (($x523 (= $x586 true)))
 (let (($x198 (= $x523 true)))
 (let (($x358 (= $x198 true)))
 (let (($x397 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x157 (bvadd ?x359 input.dst.llvm-%m1)))
 (let ((?x554 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x157))))
 (let ((?x85 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv2 32))) ?x554)))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv3 32))) ?x85)))
 (let ((?x330 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x227 (_ bv1 32))))
 (=> $x472 (= ?x330 ?x176)))))))))))
 ))
 (let (($x270 (and $x96 $x397)))
 (let (($x354 (= $x270 true)))
 (let (($x22 (= $x354 true)))
 (let (($x739 (= $x22 true)))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x463 (bvadd ?x359 input.dst.llvm-%m2)))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x463 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x463))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x463 (_ bv2 32))) ?x102)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x463 (_ bv3 32))) ?x141)))
 (let ((?x259 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x526 (_ bv1 32))))
 (=> $x294 (= ?x259 ?x222)))))))))))
 ))
 (let (($x570 (and $x13 $x325)))
 (let (($x399 (= $x570 true)))
 (let (($x480 (= $x399 true)))
 (let (($x627 (= $x480 true)))
 (let (($x153 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x157 (bvadd ?x359 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x160))))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x693 (_ bv1 32))))
 (=> $x410 (= ?x638 ?x33))))))))))
 ))
 (let (($x174 (and $x689 $x153)))
 (let (($x233 (= $x174 true)))
 (let (($x129 (= $x233 true)))
 (let (($x747 (= $x129 true)))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x157 (bvadd ?x359 input.dst.llvm-%m1)))
 (let ((?x554 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x157))))
 (let ((?x85 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv2 32))) ?x554)))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x157 (_ bv3 32))) ?x85)))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x693 (_ bv1 32))))
 (=> $x410 (= ?x638 ?x176)))))))))))
 ))
 (let (($x279 (and $x689 $x9)))
 (let (($x580 (= $x279 true)))
 (let (($x362 (= $x580 true)))
 (let (($x368 (= $x362 true)))
 (let ((?x48 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x329 (= (_ bv0 32) ?x48)))
 (let ((?x595 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x335 (= (_ bv0 32) ?x595)))
 (let ((?x743 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x484 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x743)))
 (let ((?x345 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x431 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x345)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x101 (and $x280 $x431)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x651 (and $x98 $x101)))
 (let (($x457 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x620 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x455 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x379 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x514 (and $x379 $x455)))
 (let (($x100 (not $x514)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x327 (and $x133 $x197)))
 (let (($x745 (and (not $x327) $x100)))
 (let (($x502 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x173 $x502)))
 (let (($x324 (not $x42)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x661 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x661 $x446)))
 (let (($x607 (and (not $x192) $x324)))
 (let (($x108 (and (and (and (and (and (and $x607 $x745) $x620) $x457) $x651) $x484) $x335)))
 (let (($x420 (and $x108 $x329)))
 (let (($x307 (= $x420 true)))
 (let (($x304 (= $x307 true)))
 (let (($x291 (= $x304 true)))
 (let (($x131 (and $x291 $x368)))
 (let (($x624 (and $x131 $x747)))
 (let (($x7 (and $x624 $x627)))
 (let (($x376 (and $x7 $x739)))
 (let (($x636 (and $x376 $x358)))
 (let (($x656 (and $x636 $x613)))
 (let (($x331 (and $x656 $x388)))
 (let (($x194 (and $x331 $x273)))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x330 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x227 (_ bv1 32))))
 (=> $x472 (= ?x330 ?x638)))))))
 ))
 (let (($x352 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x693 (_ bv1 32))))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x227 (_ bv1 32))))
 (= $x472 $x410))))))
 ))
 (let (($x699 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x693 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (= ?x693 (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x227 (_ bv0 32))))
 (= $x655 $x544))))))
 ))
 (let (($x265 (and $x699 $x438)))
 (let (($x228 (and $x265 $x352)))
 (let (($x623 (and $x228 $x657)))
 (let (($x659 (and $x623 $x194)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x259 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x526 (_ bv1 32))))
 (=> $x294 (= ?x259 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x258 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x540 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x526 (_ bv1 32))))
 (= $x294 (bvuge ?x540 (_ bv1 32)))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x540 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x526 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x526 (_ bv0 32))))
 (= $x378 (= ?x540 (_ bv0 32)))))))
 ))
 (let (($x373 (and $x458 $x539)))
 (let (($x489 (and $x373 $x258)))
 (let (($x532 (and $x489 $x418)))
 (let (($x588 (and $x532 $x659)))
 (let (($x43 (=> $x588 $x74)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xe8be4148)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x90ebb404)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x266d7c03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x90ebb407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x90ebb404)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4148 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!2 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4148 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0a2452a4)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8884c950)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x28009880)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8884c953)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0a2452a7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8884c950)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0a2452a4)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x28009883 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x28009882 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x28009881 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x28009880 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!24 (bvadd #x28009883 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x28009882 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x28009881 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x28009880 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000002
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000002
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x290 (= true false)))
 (let (($x717 (= $x290 true)))
 (let ((?x302 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x412 (= (_ bv0 32) ?x302)))
 (let ((?x470 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x610 (= (_ bv0 32) ?x470)))
 (let ((?x27 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x27)))
 (let ((?x113 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (and $x132 $x92)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x398 (and $x210 $x103)))
 (let (($x150 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x391 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x367 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x313 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x518 (and $x313 $x367)))
 (let (($x395 (not $x518)))
 (let (($x521 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x386 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x370 (and $x386 $x521)))
 (let (($x248 (and (not $x370) $x395)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x579 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x579 $x381)))
 (let (($x635 (not $x318)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x255 $x251)))
 (let (($x440 (and (not $x215) $x635)))
 (let (($x712 (and (and (and (and (and (and $x440 $x248) $x391) $x150) $x398) $x23) $x610)))
 (let (($x474 (and $x712 $x412)))
 (let (($x204 (= $x474 true)))
 (let (($x11 (= $x204 true)))
 (let (($x28 (= $x11 true)))
 (let (($x681 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x482 input.dst.llvm-%m2)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x678 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x311))))
 (let ((?x457 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x228 (_ bv1 32))))
 (=> $x197 (= ?x457 ?x678))))))))))
 ))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x74 (_ bv1 32))))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x228 (_ bv1 32))))
 (= $x197 $x155))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x18 (= false false)))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x228 (_ bv0 32))))
 (=> $x330 $x18)))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x74 (_ bv0 32))))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x228 (_ bv0 32))))
 (= $x330 $x43))))))
 ))
 (let (($x557 (and $x68 $x230)))
 (let (($x382 (and $x557 $x167)))
 (let (($x692 (and $x382 $x681)))
 (let (($x114 (= $x692 true)))
 (let (($x219 (= $x114 true)))
 (let (($x16 (= $x219 true)))
 (let ((?x509 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x524 (= (_ bv0 2) ?x509)))
 (let (($x456 (= $x524 true)))
 (let (($x729 (= $x456 true)))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x640 (bvadd ?x482 input.dst.llvm-%m1)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv1 32))) (select input.dst.llvm-mem ?x640))))
 (let ((?x534 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv2 32))) ?x8))))
 (let ((?x747 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x400 (_ bv1 32))))
 (=> $x37 (= ?x747 ?x534))))))))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x74 (_ bv1 32))))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x400 (_ bv1 32))))
 (= $x37 $x155))))))
 ))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x18 (= false false)))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x400 (_ bv0 32))))
 (=> $x83 $x18)))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x74 (_ bv0 32))))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x400 (_ bv0 32))))
 (= $x83 $x43))))))
 ))
 (let (($x156 (and $x225 $x106)))
 (let (($x269 (and $x156 $x115)))
 (let (($x593 (and $x269 $x332)))
 (let (($x377 (= $x593 true)))
 (let (($x372 (= $x377 true)))
 (let (($x32 (= $x372 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x640 (bvadd ?x482 input.dst.llvm-%m1)))
 (let ((?x666 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x640))))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv2 32))) ?x666)))
 (let ((?x577 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv3 32))) ?x349)))
 (let ((?x747 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x400 (_ bv1 32))))
 (=> $x37 (= ?x747 ?x577)))))))))))
 ))
 (let (($x283 (and $x269 $x140)))
 (let (($x413 (= $x283 true)))
 (let (($x404 (= $x413 true)))
 (let (($x316 (= $x404 true)))
 (let (($x706 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x482 input.dst.llvm-%m2)))
 (let ((?x549 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x35))))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv2 32))) ?x549)))
 (let ((?x700 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv3 32))) ?x171)))
 (let ((?x457 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x228 (_ bv1 32))))
 (=> $x197 (= ?x457 ?x700)))))))))))
 ))
 (let (($x698 (and $x382 $x706)))
 (let (($x695 (= $x698 true)))
 (let (($x120 (= $x695 true)))
 (let (($x508 (= $x120 true)))
 (let (($x75 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x640 (bvadd ?x482 input.dst.llvm-%m1)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv1 32))) (select input.dst.llvm-mem ?x640))))
 (let ((?x534 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv2 32))) ?x8))))
 (let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x359 (_ bv1 32))))
 (=> $x433 (= ?x129 ?x534))))))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x74 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x359 (_ bv1 32))))
 (= $x433 $x155))))))
 ))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x18 (= false false)))
 (let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x359 (_ bv0 32))))
 (=> $x672 $x18)))))
 ))
 (let (($x525 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x74 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x359 (_ bv0 32))))
 (= $x672 $x43))))))
 ))
 (let (($x163 (and $x525 $x214)))
 (let (($x268 (and $x163 $x310)))
 (let (($x293 (and $x268 $x75)))
 (let (($x653 (= $x293 true)))
 (let (($x674 (= $x653 true)))
 (let (($x234 (= $x674 true)))
 (let (($x39 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x640 (bvadd ?x482 input.dst.llvm-%m1)))
 (let ((?x666 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x640))))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv2 32))) ?x666)))
 (let ((?x577 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv3 32))) ?x349)))
 (let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x359 (_ bv1 32))))
 (=> $x433 (= ?x129 ?x577)))))))))))
 ))
 (let (($x670 (and $x268 $x39)))
 (let (($x568 (= $x670 true)))
 (let (($x671 (= $x568 true)))
 (let (($x598 (= $x671 true)))
 (let ((?x13 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x617 (bvneg ?x13)))
 (let (($x47 (= ?x617 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x147 (= $x47 true)))
 (let (($x485 (= $x147 true)))
 (let (($x528 (= ?x617 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x736 (= $x528 true)))
 (let (($x428 (= $x736 true)))
 (let (($x102 (and $x428 $x485)))
 (let (($x494 (and $x102 $x598)))
 (let (($x408 (and $x494 $x234)))
 (let (($x276 (and $x408 $x508)))
 (let (($x722 (and $x276 $x316)))
 (let (($x441 (and $x722 $x32)))
 (let (($x643 (and $x441 $x729)))
 (let (($x99 (and $x643 $x16)))
 (let (($x529 (and $x99 $x28)))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x747 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x400 (_ bv1 32))))
 (=> $x37 (= ?x747 ?x129)))))))
 ))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x359 (_ bv1 32))))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x400 (_ bv1 32))))
 (= $x37 $x433))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x359 (_ bv0 32))))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x400 (_ bv0 32))))
 (= $x83 $x672))))))
 ))
 (let (($x231 (and $x111 $x106)))
 (let (($x364 (and $x231 $x95)))
 (let (($x284 (and $x364 $x402)))
 (let (($x725 (and $x284 $x529)))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x457 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x228 (_ bv1 32))))
 (=> $x197 (= ?x457 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x735 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x410 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x228 (_ bv1 32))))
 (= $x197 (bvuge ?x410 (_ bv1 32)))))))
 ))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x410 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x228 (_ bv0 32))))
 (= $x330 (= ?x410 (_ bv0 32)))))))
 ))
 (let (($x467 (and $x516 $x230)))
 (let (($x379 (and $x467 $x735)))
 (let (($x287 (and $x379 $x280)))
 (let (($x715 (and $x287 $x725)))
 (let (($x94 (=> $x715 $x717)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x290 (= true false)))
 (let (($x717 (= $x290 true)))
 (let ((?x302 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x412 (= (_ bv0 32) ?x302)))
 (let ((?x470 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x610 (= (_ bv0 32) ?x470)))
 (let ((?x27 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x27)))
 (let ((?x113 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (and $x132 $x92)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x398 (and $x210 $x103)))
 (let (($x150 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x391 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x367 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x313 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x518 (and $x313 $x367)))
 (let (($x395 (not $x518)))
 (let (($x521 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x386 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x370 (and $x386 $x521)))
 (let (($x248 (and (not $x370) $x395)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x579 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x579 $x381)))
 (let (($x635 (not $x318)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x255 $x251)))
 (let (($x440 (and (not $x215) $x635)))
 (let (($x712 (and (and (and (and (and (and $x440 $x248) $x391) $x150) $x398) $x23) $x610)))
 (let (($x474 (and $x712 $x412)))
 (let (($x204 (= $x474 true)))
 (let (($x11 (= $x204 true)))
 (let (($x28 (= $x11 true)))
 (let (($x681 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x482 input.dst.llvm-%m2)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x678 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x311))))
 (let ((?x457 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x228 (_ bv1 32))))
 (=> $x197 (= ?x457 ?x678))))))))))
 ))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x74 (_ bv1 32))))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x228 (_ bv1 32))))
 (= $x197 $x155))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x18 (= false false)))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x228 (_ bv0 32))))
 (=> $x330 $x18)))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x74 (_ bv0 32))))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x228 (_ bv0 32))))
 (= $x330 $x43))))))
 ))
 (let (($x557 (and $x68 $x230)))
 (let (($x382 (and $x557 $x167)))
 (let (($x692 (and $x382 $x681)))
 (let (($x114 (= $x692 true)))
 (let (($x219 (= $x114 true)))
 (let (($x16 (= $x219 true)))
 (let ((?x509 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x524 (= (_ bv0 2) ?x509)))
 (let (($x456 (= $x524 true)))
 (let (($x729 (= $x456 true)))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x640 (bvadd ?x482 input.dst.llvm-%m1)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv1 32))) (select input.dst.llvm-mem ?x640))))
 (let ((?x534 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv2 32))) ?x8))))
 (let ((?x747 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x400 (_ bv1 32))))
 (=> $x37 (= ?x747 ?x534))))))))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x74 (_ bv1 32))))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x400 (_ bv1 32))))
 (= $x37 $x155))))))
 ))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x18 (= false false)))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x400 (_ bv0 32))))
 (=> $x83 $x18)))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x74 (_ bv0 32))))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x400 (_ bv0 32))))
 (= $x83 $x43))))))
 ))
 (let (($x156 (and $x225 $x106)))
 (let (($x269 (and $x156 $x115)))
 (let (($x593 (and $x269 $x332)))
 (let (($x377 (= $x593 true)))
 (let (($x372 (= $x377 true)))
 (let (($x32 (= $x372 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x640 (bvadd ?x482 input.dst.llvm-%m1)))
 (let ((?x666 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x640))))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv2 32))) ?x666)))
 (let ((?x577 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv3 32))) ?x349)))
 (let ((?x747 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x400 (_ bv1 32))))
 (=> $x37 (= ?x747 ?x577)))))))))))
 ))
 (let (($x283 (and $x269 $x140)))
 (let (($x413 (= $x283 true)))
 (let (($x404 (= $x413 true)))
 (let (($x316 (= $x404 true)))
 (let (($x706 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x482 input.dst.llvm-%m2)))
 (let ((?x549 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x35))))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv2 32))) ?x549)))
 (let ((?x700 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv3 32))) ?x171)))
 (let ((?x457 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x228 (_ bv1 32))))
 (=> $x197 (= ?x457 ?x700)))))))))))
 ))
 (let (($x698 (and $x382 $x706)))
 (let (($x695 (= $x698 true)))
 (let (($x120 (= $x695 true)))
 (let (($x508 (= $x120 true)))
 (let (($x75 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x640 (bvadd ?x482 input.dst.llvm-%m1)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv1 32))) (select input.dst.llvm-mem ?x640))))
 (let ((?x534 (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x640 (_ bv2 32))) ?x8))))
 (let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x359 (_ bv1 32))))
 (=> $x433 (= ?x129 ?x534))))))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x74 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x359 (_ bv1 32))))
 (= $x433 $x155))))))
 ))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x18 (= false false)))
 (let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x359 (_ bv0 32))))
 (=> $x672 $x18)))))
 ))
 (let (($x525 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x74 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x359 (_ bv0 32))))
 (= $x672 $x43))))))
 ))
 (let (($x163 (and $x525 $x214)))
 (let (($x268 (and $x163 $x310)))
 (let (($x293 (and $x268 $x75)))
 (let (($x653 (= $x293 true)))
 (let (($x674 (= $x653 true)))
 (let (($x234 (= $x674 true)))
 (let (($x39 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x640 (bvadd ?x482 input.dst.llvm-%m1)))
 (let ((?x666 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x640))))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv2 32))) ?x666)))
 (let ((?x577 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x640 (_ bv3 32))) ?x349)))
 (let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x359 (_ bv1 32))))
 (=> $x433 (= ?x129 ?x577)))))))))))
 ))
 (let (($x670 (and $x268 $x39)))
 (let (($x568 (= $x670 true)))
 (let (($x671 (= $x568 true)))
 (let (($x598 (= $x671 true)))
 (let ((?x13 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x617 (bvneg ?x13)))
 (let (($x47 (= ?x617 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x147 (= $x47 true)))
 (let (($x485 (= $x147 true)))
 (let (($x528 (= ?x617 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x736 (= $x528 true)))
 (let (($x428 (= $x736 true)))
 (let (($x102 (and $x428 $x485)))
 (let (($x494 (and $x102 $x598)))
 (let (($x408 (and $x494 $x234)))
 (let (($x276 (and $x408 $x508)))
 (let (($x722 (and $x276 $x316)))
 (let (($x441 (and $x722 $x32)))
 (let (($x643 (and $x441 $x729)))
 (let (($x99 (and $x643 $x16)))
 (let (($x529 (and $x99 $x28)))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x747 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x400 (_ bv1 32))))
 (=> $x37 (= ?x747 ?x129)))))))
 ))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x359 (_ bv1 32))))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x400 (_ bv1 32))))
 (= $x37 $x433))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x359 (_ bv0 32))))
 (let ((?x400 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x400 (_ bv0 32))))
 (= $x83 $x672))))))
 ))
 (let (($x231 (and $x111 $x106)))
 (let (($x364 (and $x231 $x95)))
 (let (($x284 (and $x364 $x402)))
 (let (($x725 (and $x284 $x529)))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x457 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x228 (_ bv1 32))))
 (=> $x197 (= ?x457 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x735 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x410 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x228 (_ bv1 32))))
 (= $x197 (bvuge ?x410 (_ bv1 32)))))))
 ))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x410 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x228 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x228 (_ bv0 32))))
 (= $x330 (= ?x410 (_ bv0 32)))))))
 ))
 (let (($x467 (and $x516 $x230)))
 (let (($x379 (and $x467 $x735)))
 (let (($x287 (and $x379 $x280)))
 (let (($x715 (and $x287 $x725)))
 (let (($x94 (=> $x715 $x717)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x93d62328)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x96ee4ffe)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x44b4264b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x93d6232b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x93d62328)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x96ee5001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee5000 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee4fff (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee4ffe (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x96ee5001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x96ee5000 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x96ee4fff (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x96ee4ffe (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x96ee5001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee5000 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee4fff (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x96ee4ffe (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!38))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000003c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x8115107e)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!39))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40040103)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000003f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000003c)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m1-1.0.1!44 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun k!41 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m2-1.0.1!43 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!43 (k!41 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x40040100) false
    (ite (= x!0 #x0000003c) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!39 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!38 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!39 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!39 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!40 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!44 (k!40 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x81151081 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x81151080 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x8115107f (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x8115107e (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!39 (bvadd #x81151081 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x81151080 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x8115107f (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x8115107e (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!42 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!42 (k!40 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x81151081 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x81151080 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x8115107f (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x8115107e (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x547 (= false true)))
 (let (($x76 (= $x547 true)))
 (let ((?x305 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x179 (= (_ bv0 32) ?x305)))
 (let ((?x437 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x326 (= (_ bv0 32) ?x437)))
 (let ((?x405 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x432 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x405)))
 (let ((?x517 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x566 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x517)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x591 (and $x104 $x566)))
 (let (($x513 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x401 (and $x513 $x591)))
 (let (($x148 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x487 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x711 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x546 (and $x711 $x45)))
 (let (($x723 (not $x546)))
 (let (($x708 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x425 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x704 (and $x425 $x708)))
 (let (($x604 (and (not $x704) $x723)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x709 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x658 (and $x709 $x221)))
 (let (($x159 (not $x658)))
 (let (($x702 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x594 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x594 $x702)))
 (let (($x299 (and (not $x124) $x159)))
 (let (($x249 (and (and (and (and (and (and $x299 $x604) $x487) $x148) $x401) $x432) $x326)))
 (let (($x154 (and $x249 $x179)))
 (let (($x648 (= $x154 true)))
 (let (($x61 (= $x648 true)))
 (let (($x188 (= $x61 true)))
 (let (($x667 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x541 input.dst.llvm-%m2)))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x733 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x407))))
 (let ((?x268 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x364 (_ bv1 32))))
 (=> $x254 (= ?x268 ?x733))))))))))
 ))
 (let (($x439 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x431 (_ bv1 32))))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x364 (_ bv1 32))))
 (= $x254 $x222))))))
 ))
 (let (($x536 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x12 (= false false)))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x747 (= ?x364 (_ bv0 32))))
 (=> $x747 $x12)))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x431 (_ bv0 32))))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x747 (= ?x364 (_ bv0 32))))
 (= $x747 $x101))))))
 ))
 (let (($x663 (and $x366 $x536)))
 (let (($x145 (and $x663 $x439)))
 (let (($x592 (and $x145 $x667)))
 (let (($x416 (= $x592 true)))
 (let (($x590 (= $x416 true)))
 (let (($x701 (= $x590 true)))
 (let ((?x619 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x135 (= (_ bv0 2) ?x619)))
 (let (($x261 (= $x135 true)))
 (let (($x421 (= $x261 true)))
 (let (($x361 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x353 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x59 (and $x353 $x361)))
 (let (($x247 (= $x59 true)))
 (let (($x209 (= $x247 true)))
 (let (($x498 (= $x209 true)))
 (let (($x607 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x721 (bvadd ?x541 input.dst.llvm-%m1)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv1 32))) (select input.dst.llvm-mem ?x721))))
 (let ((?x488 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv2 32))) ?x240))))
 (let ((?x161 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x706 (bvuge ?x89 (_ bv1 32))))
 (=> $x706 (= ?x161 ?x488))))))))))
 ))
 (let (($x137 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x431 (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x706 (bvuge ?x89 (_ bv1 32))))
 (= $x706 $x222))))))
 ))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x12 (= false false)))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x89 (_ bv0 32))))
 (=> $x68 $x12)))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x431 (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x89 (_ bv0 32))))
 (= $x68 $x101))))))
 ))
 (let (($x233 (and $x174 $x642)))
 (let (($x584 (and $x233 $x137)))
 (let (($x100 (and $x584 $x607)))
 (let (($x745 (= $x100 true)))
 (let (($x191 (= $x745 true)))
 (let (($x620 (= $x191 true)))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x721 (bvadd ?x541 input.dst.llvm-%m1)))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x721))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv2 32))) ?x166)))
 (let ((?x660 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv3 32))) ?x26)))
 (let ((?x161 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x706 (bvuge ?x89 (_ bv1 32))))
 (=> $x706 (= ?x161 ?x660)))))))))))
 ))
 (let (($x703 (and $x584 $x655)))
 (let (($x699 (= $x703 true)))
 (let (($x506 (= $x699 true)))
 (let (($x438 (= $x506 true)))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x541 input.dst.llvm-%m2)))
 (let ((?x694 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x691))))
 (let ((?x675 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv2 32))) ?x694)))
 (let ((?x689 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv3 32))) ?x675)))
 (let ((?x268 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x364 (_ bv1 32))))
 (=> $x254 (= ?x268 ?x689)))))))))))
 ))
 (let (($x279 (and $x145 $x9)))
 (let (($x580 (= $x279 true)))
 (let (($x368 (= $x580 true)))
 (let (($x131 (= $x368 true)))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x721 (bvadd ?x541 input.dst.llvm-%m1)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv1 32))) (select input.dst.llvm-mem ?x721))))
 (let ((?x488 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv2 32))) ?x240))))
 (let ((?x443 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x674 (_ bv1 32))))
 (=> $x272 (= ?x443 ?x488))))))))))
 ))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x431 (_ bv1 32))))
 (let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x674 (_ bv1 32))))
 (= $x272 $x222))))))
 ))
 (let (($x540 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x12 (= false false)))
 (let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x674 (_ bv0 32))))
 (=> $x234 $x12)))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x431 (_ bv0 32))))
 (let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x674 (_ bv0 32))))
 (= $x234 $x101))))))
 ))
 (let (($x420 (and $x378 $x540)))
 (let (($x187 (and $x420 $x325)))
 (let (($x160 (and $x187 $x162)))
 (let (($x337 (= $x160 true)))
 (let (($x716 (= $x337 true)))
 (let (($x224 (= $x716 true)))
 (let (($x567 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x721 (bvadd ?x541 input.dst.llvm-%m1)))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x721))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv2 32))) ?x166)))
 (let ((?x660 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv3 32))) ?x26)))
 (let ((?x443 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x674 (_ bv1 32))))
 (=> $x272 (= ?x443 ?x660)))))))))))
 ))
 (let (($x563 (and $x187 $x567)))
 (let (($x105 (= $x563 true)))
 (let (($x22 (= $x105 true)))
 (let (($x500 (= $x22 true)))
 (let ((?x58 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x562 (bvneg ?x58)))
 (let (($x441 (= ?x562 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x505 (= $x441 true)))
 (let (($x509 (= $x505 true)))
 (let (($x593 (= ?x562 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x377 (= $x593 true)))
 (let (($x372 (= $x377 true)))
 (let (($x524 (and $x372 $x509)))
 (let (($x53 (and $x524 $x500)))
 (let (($x719 (and $x53 $x224)))
 (let (($x33 (and $x719 $x131)))
 (let (($x226 (and $x33 $x438)))
 (let (($x483 (and $x226 $x620)))
 (let (($x415 (and $x483 $x498)))
 (let (($x126 (and $x415 $x421)))
 (let (($x186 (and $x126 $x701)))
 (let (($x451 (and $x186 $x188)))
 (let (($x413 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x443 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x161 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x706 (bvuge ?x89 (_ bv1 32))))
 (=> $x706 (= ?x161 ?x443)))))))
 ))
 (let (($x695 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x674 (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x706 (bvuge ?x89 (_ bv1 32))))
 (= $x706 $x272))))))
 ))
 (let (($x473 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x674 (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x89 (_ bv0 32))))
 (= $x68 $x234))))))
 ))
 (let (($x35 (and $x473 $x642)))
 (let (($x120 (and $x35 $x695)))
 (let (($x404 (and $x120 $x413)))
 (let (($x207 (and $x404 $x451)))
 (let (($x482 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x364 (_ bv1 32))))
 (=> $x254 (= ?x268 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x364 (_ bv1 32))))
 (= $x254 (bvuge ?x433 (_ bv1 32)))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x747 (= ?x364 (_ bv0 32))))
 (= $x747 (= ?x433 (_ bv0 32)))))))
 ))
 (let (($x452 (and $x624 $x536)))
 (let (($x74 (and $x452 $x504)))
 (let (($x152 (and $x74 $x482)))
 (let (($x348 (and $x152 $x207)))
 (let (($x63 (=> $x348 $x76)))
 (not $x63)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x547 (= false true)))
 (let (($x76 (= $x547 true)))
 (let ((?x305 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x179 (= (_ bv0 32) ?x305)))
 (let ((?x437 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x326 (= (_ bv0 32) ?x437)))
 (let ((?x405 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x432 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x405)))
 (let ((?x517 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x566 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x517)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x591 (and $x104 $x566)))
 (let (($x513 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x401 (and $x513 $x591)))
 (let (($x148 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x487 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x711 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x546 (and $x711 $x45)))
 (let (($x723 (not $x546)))
 (let (($x708 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x425 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x704 (and $x425 $x708)))
 (let (($x604 (and (not $x704) $x723)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x709 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x658 (and $x709 $x221)))
 (let (($x159 (not $x658)))
 (let (($x702 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x594 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x594 $x702)))
 (let (($x299 (and (not $x124) $x159)))
 (let (($x249 (and (and (and (and (and (and $x299 $x604) $x487) $x148) $x401) $x432) $x326)))
 (let (($x154 (and $x249 $x179)))
 (let (($x648 (= $x154 true)))
 (let (($x61 (= $x648 true)))
 (let (($x188 (= $x61 true)))
 (let (($x667 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x541 input.dst.llvm-%m2)))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x733 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x407))))
 (let ((?x268 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x364 (_ bv1 32))))
 (=> $x254 (= ?x268 ?x733))))))))))
 ))
 (let (($x439 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x431 (_ bv1 32))))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x364 (_ bv1 32))))
 (= $x254 $x222))))))
 ))
 (let (($x536 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x12 (= false false)))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x747 (= ?x364 (_ bv0 32))))
 (=> $x747 $x12)))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x431 (_ bv0 32))))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x747 (= ?x364 (_ bv0 32))))
 (= $x747 $x101))))))
 ))
 (let (($x663 (and $x366 $x536)))
 (let (($x145 (and $x663 $x439)))
 (let (($x592 (and $x145 $x667)))
 (let (($x416 (= $x592 true)))
 (let (($x590 (= $x416 true)))
 (let (($x701 (= $x590 true)))
 (let ((?x619 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x135 (= (_ bv0 2) ?x619)))
 (let (($x261 (= $x135 true)))
 (let (($x421 (= $x261 true)))
 (let (($x361 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x353 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x59 (and $x353 $x361)))
 (let (($x247 (= $x59 true)))
 (let (($x209 (= $x247 true)))
 (let (($x498 (= $x209 true)))
 (let (($x607 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x721 (bvadd ?x541 input.dst.llvm-%m1)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv1 32))) (select input.dst.llvm-mem ?x721))))
 (let ((?x488 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv2 32))) ?x240))))
 (let ((?x161 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x706 (bvuge ?x89 (_ bv1 32))))
 (=> $x706 (= ?x161 ?x488))))))))))
 ))
 (let (($x137 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x431 (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x706 (bvuge ?x89 (_ bv1 32))))
 (= $x706 $x222))))))
 ))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x12 (= false false)))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x89 (_ bv0 32))))
 (=> $x68 $x12)))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x431 (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x89 (_ bv0 32))))
 (= $x68 $x101))))))
 ))
 (let (($x233 (and $x174 $x642)))
 (let (($x584 (and $x233 $x137)))
 (let (($x100 (and $x584 $x607)))
 (let (($x745 (= $x100 true)))
 (let (($x191 (= $x745 true)))
 (let (($x620 (= $x191 true)))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x721 (bvadd ?x541 input.dst.llvm-%m1)))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x721))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv2 32))) ?x166)))
 (let ((?x660 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv3 32))) ?x26)))
 (let ((?x161 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x706 (bvuge ?x89 (_ bv1 32))))
 (=> $x706 (= ?x161 ?x660)))))))))))
 ))
 (let (($x703 (and $x584 $x655)))
 (let (($x699 (= $x703 true)))
 (let (($x506 (= $x699 true)))
 (let (($x438 (= $x506 true)))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x541 input.dst.llvm-%m2)))
 (let ((?x694 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x691))))
 (let ((?x675 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv2 32))) ?x694)))
 (let ((?x689 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv3 32))) ?x675)))
 (let ((?x268 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x364 (_ bv1 32))))
 (=> $x254 (= ?x268 ?x689)))))))))))
 ))
 (let (($x279 (and $x145 $x9)))
 (let (($x580 (= $x279 true)))
 (let (($x368 (= $x580 true)))
 (let (($x131 (= $x368 true)))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x721 (bvadd ?x541 input.dst.llvm-%m1)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv1 32))) (select input.dst.llvm-mem ?x721))))
 (let ((?x488 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv2 32))) ?x240))))
 (let ((?x443 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x674 (_ bv1 32))))
 (=> $x272 (= ?x443 ?x488))))))))))
 ))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x431 (_ bv1 32))))
 (let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x674 (_ bv1 32))))
 (= $x272 $x222))))))
 ))
 (let (($x540 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x12 (= false false)))
 (let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x674 (_ bv0 32))))
 (=> $x234 $x12)))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x431 (_ bv0 32))))
 (let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x674 (_ bv0 32))))
 (= $x234 $x101))))))
 ))
 (let (($x420 (and $x378 $x540)))
 (let (($x187 (and $x420 $x325)))
 (let (($x160 (and $x187 $x162)))
 (let (($x337 (= $x160 true)))
 (let (($x716 (= $x337 true)))
 (let (($x224 (= $x716 true)))
 (let (($x567 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x721 (bvadd ?x541 input.dst.llvm-%m1)))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x721))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv2 32))) ?x166)))
 (let ((?x660 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x721 (_ bv3 32))) ?x26)))
 (let ((?x443 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x674 (_ bv1 32))))
 (=> $x272 (= ?x443 ?x660)))))))))))
 ))
 (let (($x563 (and $x187 $x567)))
 (let (($x105 (= $x563 true)))
 (let (($x22 (= $x105 true)))
 (let (($x500 (= $x22 true)))
 (let ((?x58 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x562 (bvneg ?x58)))
 (let (($x441 (= ?x562 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x505 (= $x441 true)))
 (let (($x509 (= $x505 true)))
 (let (($x593 (= ?x562 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x377 (= $x593 true)))
 (let (($x372 (= $x377 true)))
 (let (($x524 (and $x372 $x509)))
 (let (($x53 (and $x524 $x500)))
 (let (($x719 (and $x53 $x224)))
 (let (($x33 (and $x719 $x131)))
 (let (($x226 (and $x33 $x438)))
 (let (($x483 (and $x226 $x620)))
 (let (($x415 (and $x483 $x498)))
 (let (($x126 (and $x415 $x421)))
 (let (($x186 (and $x126 $x701)))
 (let (($x451 (and $x186 $x188)))
 (let (($x413 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x443 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x161 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x706 (bvuge ?x89 (_ bv1 32))))
 (=> $x706 (= ?x161 ?x443)))))))
 ))
 (let (($x695 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x674 (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x706 (bvuge ?x89 (_ bv1 32))))
 (= $x706 $x272))))))
 ))
 (let (($x473 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x674 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x674 (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x89 (_ bv0 32))))
 (= $x68 $x234))))))
 ))
 (let (($x35 (and $x473 $x642)))
 (let (($x120 (and $x35 $x695)))
 (let (($x404 (and $x120 $x413)))
 (let (($x207 (and $x404 $x451)))
 (let (($x482 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x364 (_ bv1 32))))
 (=> $x254 (= ?x268 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x364 (_ bv1 32))))
 (= $x254 (bvuge ?x433 (_ bv1 32)))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x364 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x747 (= ?x364 (_ bv0 32))))
 (= $x747 (= ?x433 (_ bv0 32)))))))
 ))
 (let (($x452 (and $x624 $x536)))
 (let (($x74 (and $x452 $x504)))
 (let (($x152 (and $x74 $x482)))
 (let (($x348 (and $x152 $x207)))
 (let (($x63 (=> $x348 $x76)))
 (not $x63)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x44d84144)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1e574863)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x44d84147)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x44d84144)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x753 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x349)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x201))))
 (let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x716 (_ bv1 32))))
 (=> $x295 (= ?x481 ?x750))))))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x685 (_ bv1 32))))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x716 (_ bv1 32))))
 (= $x295 $x177))))))
 ))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x716 (_ bv0 32))))
 (=> $x224 $x283)))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x685 (_ bv0 32))))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x716 (_ bv0 32))))
 (= $x224 $x454))))))
 ))
 (let (($x128 (and $x99 $x538)))
 (let (($x238 (and $x128 $x223)))
 (let (($x754 (and $x238 $x753)))
 (let (($x755 (= $x754 true)))
 (let (($x756 (= $x755 true)))
 (let ((?x502 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x324 (bvneg ?x502)))
 (let (($x609 (= ?x324 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x387 (= $x609 true)))
 (let (($x406 (= $x387 true)))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x622 (bvadd ?x349 input.dst.llvm-%m2)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv1 32))) (select input.dst.llvm-mem ?x622))))
 (let ((?x476 (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv2 32))) ?x144))))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (bvuge ?x120 (_ bv1 32))))
 (=> $x643 (= ?x187 ?x476))))))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x685 (_ bv1 32))))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (bvuge ?x120 (_ bv1 32))))
 (= $x643 $x177))))))
 ))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x120 (_ bv0 32))))
 (=> $x161 $x283)))))
 ))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x685 (_ bv0 32))))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x120 (_ bv0 32))))
 (= $x161 $x454))))))
 ))
 (let (($x457 (and $x98 $x316)))
 (let (($x574 (and $x457 $x111)))
 (let (($x274 (and $x574 $x46)))
 (let (($x340 (= $x274 true)))
 (let (($x496 (= $x340 true)))
 (let (($x422 (= $x496 true)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x577 (bvadd ?x349 input.dst.llvm-%m1)))
 (let ((?x486 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv1 32))) (select input.dst.llvm-mem ?x577))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv2 32))) ?x486))))
 (let ((?x227 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x192 (_ bv1 32))))
 (=> $x9 (= ?x227 ?x203))))))))))
 ))
 (let (($x219 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x685 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x192 (_ bv1 32))))
 (= $x9 $x177))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (= ?x192 (_ bv0 32))))
 (=> $x366 $x283)))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x685 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (= ?x192 (_ bv0 32))))
 (= $x366 $x454))))))
 ))
 (let (($x583 (and $x251 $x205)))
 (let (($x78 (and $x583 $x219)))
 (let (($x445 (and $x78 $x386)))
 (let (($x518 (= $x445 true)))
 (let (($x545 (= $x518 true)))
 (let (($x576 (= $x545 true)))
 (let (($x381 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x577 (bvadd ?x349 input.dst.llvm-%m1)))
 (let ((?x743 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x577))))
 (let ((?x48 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv2 32))) ?x743)))
 (let ((?x616 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv3 32))) ?x48)))
 (let ((?x227 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x192 (_ bv1 32))))
 (=> $x9 (= ?x227 ?x616)))))))))))
 ))
 (let (($x318 (and $x78 $x381)))
 (let (($x635 (= $x318 true)))
 (let (($x440 (= $x635 true)))
 (let (($x395 (= $x440 true)))
 (let (($x679 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x622 (bvadd ?x349 input.dst.llvm-%m2)))
 (let ((?x442 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x622 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x622))))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x622 (_ bv2 32))) ?x442)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x622 (_ bv3 32))) ?x308)))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (bvuge ?x120 (_ bv1 32))))
 (=> $x643 (= ?x187 ?x82)))))))))))
 ))
 (let (($x677 (and $x574 $x679)))
 (let (($x373 (= $x677 true)))
 (let (($x294 (= $x373 true)))
 (let (($x539 (= $x294 true)))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x577 (bvadd ?x349 input.dst.llvm-%m1)))
 (let ((?x486 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv1 32))) (select input.dst.llvm-mem ?x577))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv2 32))) ?x486))))
 (let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x716 (_ bv1 32))))
 (=> $x295 (= ?x481 ?x203))))))))))
 ))
 (let (($x731 (and $x238 $x637)))
 (let (($x359 (= $x731 true)))
 (let (($x672 (= $x359 true)))
 (let (($x446 (= $x672 true)))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x577 (bvadd ?x349 input.dst.llvm-%m1)))
 (let ((?x743 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x577))))
 (let ((?x48 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv2 32))) ?x743)))
 (let ((?x616 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv3 32))) ?x48)))
 (let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x716 (_ bv1 32))))
 (=> $x295 (= ?x481 ?x616)))))))))))
 ))
 (let (($x300 (and $x238 $x314)))
 (let (($x216 (= $x300 true)))
 (let (($x15 (= $x216 true)))
 (let (($x182 (= $x15 true)))
 (let ((?x107 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x67 (= (_ bv0 32) ?x107)))
 (let ((?x723 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x604 (= (_ bv0 32) ?x723)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x546 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x708 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x704 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x708)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x718 (and $x299 $x704)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x711 (and $x159 $x718)))
 (let (($x658 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x709 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x594 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x390 (and $x285 $x594)))
 (let (($x702 (not $x390)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x701 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x385 (and $x701 $x186)))
 (let (($x116 (and (not $x385) $x702)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x665 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x667 (and $x665 $x288)))
 (let (($x592 (not $x667)))
 (let (($x407 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x427 $x407)))
 (let (($x590 (and (not $x286) $x592)))
 (let (($x513 (and (and (and (and (and (and $x590 $x116) $x709) $x658) $x711) $x546) $x604)))
 (let (($x104 (and $x513 $x67)))
 (let (($x517 (= $x104 true)))
 (let (($x566 (= $x517 true)))
 (let (($x591 (= $x566 true)))
 (let ((?x619 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x135 (= (_ bv0 2) ?x619)))
 (let (($x261 (= $x135 true)))
 (let (($x421 (= $x261 true)))
 (let (($x361 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x6 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x59 (and $x6 $x361)))
 (let (($x247 (= $x59 true)))
 (let (($x209 (= $x247 true)))
 (let (($x498 (= $x209 true)))
 (let (($x100 (= ?x324 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x745 (= $x100 true)))
 (let (($x191 (= $x745 true)))
 (let (($x415 (and $x191 $x498)))
 (let (($x126 (and $x415 $x421)))
 (let (($x401 (and $x126 $x591)))
 (let (($x93 (and $x401 $x182)))
 (let (($x402 (and $x93 $x446)))
 (let (($x236 (and $x402 $x539)))
 (let (($x248 (and $x236 $x395)))
 (let (($x434 (and $x248 $x576)))
 (let (($x34 (and $x434 $x422)))
 (let (($x184 (and $x34 $x406)))
 (let (($x699 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x227 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x192 (_ bv1 32))))
 (=> $x9 (= ?x227 ?x481)))))))
 ))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x716 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x192 (_ bv1 32))))
 (= $x9 $x295))))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x716 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (= ?x192 (_ bv0 32))))
 (= $x366 $x224))))))
 ))
 (let (($x691 (and $x514 $x205)))
 (let (($x368 (and $x691 $x580)))
 (let (($x506 (and $x368 $x699)))
 (let (($x662 (and $x506 $x184)))
 (let (($x541 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (bvuge ?x120 (_ bv1 32))))
 (=> $x643 (= ?x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x272 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (bvuge ?x120 (_ bv1 32))))
 (= $x643 (bvuge ?x272 (_ bv1 32)))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x272 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x120 (_ bv0 32))))
 (= $x161 (= ?x272 (_ bv0 32)))))))
 ))
 (let (($x722 (and $x140 $x316)))
 (let (($x431 (and $x722 $x345)))
 (let (($x683 (and $x431 $x541)))
 (let (($x632 (and $x683 $x662)))
 (let (($x757 (=> $x632 $x756)))
 (not $x757)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x753 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x349)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x201))))
 (let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x716 (_ bv1 32))))
 (=> $x295 (= ?x481 ?x750))))))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x685 (_ bv1 32))))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x716 (_ bv1 32))))
 (= $x295 $x177))))))
 ))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x716 (_ bv0 32))))
 (=> $x224 $x283)))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x685 (_ bv0 32))))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x716 (_ bv0 32))))
 (= $x224 $x454))))))
 ))
 (let (($x128 (and $x99 $x538)))
 (let (($x238 (and $x128 $x223)))
 (let (($x754 (and $x238 $x753)))
 (let (($x755 (= $x754 true)))
 (let (($x756 (= $x755 true)))
 (let ((?x502 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x324 (bvneg ?x502)))
 (let (($x609 (= ?x324 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x387 (= $x609 true)))
 (let (($x406 (= $x387 true)))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x622 (bvadd ?x349 input.dst.llvm-%m2)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv1 32))) (select input.dst.llvm-mem ?x622))))
 (let ((?x476 (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv2 32))) ?x144))))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (bvuge ?x120 (_ bv1 32))))
 (=> $x643 (= ?x187 ?x476))))))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x685 (_ bv1 32))))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (bvuge ?x120 (_ bv1 32))))
 (= $x643 $x177))))))
 ))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x120 (_ bv0 32))))
 (=> $x161 $x283)))))
 ))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x685 (_ bv0 32))))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x120 (_ bv0 32))))
 (= $x161 $x454))))))
 ))
 (let (($x457 (and $x98 $x316)))
 (let (($x574 (and $x457 $x111)))
 (let (($x274 (and $x574 $x46)))
 (let (($x340 (= $x274 true)))
 (let (($x496 (= $x340 true)))
 (let (($x422 (= $x496 true)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x577 (bvadd ?x349 input.dst.llvm-%m1)))
 (let ((?x486 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv1 32))) (select input.dst.llvm-mem ?x577))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv2 32))) ?x486))))
 (let ((?x227 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x192 (_ bv1 32))))
 (=> $x9 (= ?x227 ?x203))))))))))
 ))
 (let (($x219 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x685 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x192 (_ bv1 32))))
 (= $x9 $x177))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (= ?x192 (_ bv0 32))))
 (=> $x366 $x283)))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x685 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x685 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (= ?x192 (_ bv0 32))))
 (= $x366 $x454))))))
 ))
 (let (($x583 (and $x251 $x205)))
 (let (($x78 (and $x583 $x219)))
 (let (($x445 (and $x78 $x386)))
 (let (($x518 (= $x445 true)))
 (let (($x545 (= $x518 true)))
 (let (($x576 (= $x545 true)))
 (let (($x381 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x577 (bvadd ?x349 input.dst.llvm-%m1)))
 (let ((?x743 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x577))))
 (let ((?x48 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv2 32))) ?x743)))
 (let ((?x616 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv3 32))) ?x48)))
 (let ((?x227 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x192 (_ bv1 32))))
 (=> $x9 (= ?x227 ?x616)))))))))))
 ))
 (let (($x318 (and $x78 $x381)))
 (let (($x635 (= $x318 true)))
 (let (($x440 (= $x635 true)))
 (let (($x395 (= $x440 true)))
 (let (($x679 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x622 (bvadd ?x349 input.dst.llvm-%m2)))
 (let ((?x442 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x622 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x622))))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x622 (_ bv2 32))) ?x442)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x622 (_ bv3 32))) ?x308)))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (bvuge ?x120 (_ bv1 32))))
 (=> $x643 (= ?x187 ?x82)))))))))))
 ))
 (let (($x677 (and $x574 $x679)))
 (let (($x373 (= $x677 true)))
 (let (($x294 (= $x373 true)))
 (let (($x539 (= $x294 true)))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x577 (bvadd ?x349 input.dst.llvm-%m1)))
 (let ((?x486 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv1 32))) (select input.dst.llvm-mem ?x577))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv2 32))) ?x486))))
 (let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x716 (_ bv1 32))))
 (=> $x295 (= ?x481 ?x203))))))))))
 ))
 (let (($x731 (and $x238 $x637)))
 (let (($x359 (= $x731 true)))
 (let (($x672 (= $x359 true)))
 (let (($x446 (= $x672 true)))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x577 (bvadd ?x349 input.dst.llvm-%m1)))
 (let ((?x743 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x577))))
 (let ((?x48 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv2 32))) ?x743)))
 (let ((?x616 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x577 (_ bv3 32))) ?x48)))
 (let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x716 (_ bv1 32))))
 (=> $x295 (= ?x481 ?x616)))))))))))
 ))
 (let (($x300 (and $x238 $x314)))
 (let (($x216 (= $x300 true)))
 (let (($x15 (= $x216 true)))
 (let (($x182 (= $x15 true)))
 (let ((?x107 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x67 (= (_ bv0 32) ?x107)))
 (let ((?x723 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x604 (= (_ bv0 32) ?x723)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x546 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x708 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x704 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x708)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x718 (and $x299 $x704)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x711 (and $x159 $x718)))
 (let (($x658 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x709 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x594 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x390 (and $x285 $x594)))
 (let (($x702 (not $x390)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x701 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x385 (and $x701 $x186)))
 (let (($x116 (and (not $x385) $x702)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x665 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x667 (and $x665 $x288)))
 (let (($x592 (not $x667)))
 (let (($x407 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x427 $x407)))
 (let (($x590 (and (not $x286) $x592)))
 (let (($x513 (and (and (and (and (and (and $x590 $x116) $x709) $x658) $x711) $x546) $x604)))
 (let (($x104 (and $x513 $x67)))
 (let (($x517 (= $x104 true)))
 (let (($x566 (= $x517 true)))
 (let (($x591 (= $x566 true)))
 (let ((?x619 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x135 (= (_ bv0 2) ?x619)))
 (let (($x261 (= $x135 true)))
 (let (($x421 (= $x261 true)))
 (let (($x361 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x6 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x59 (and $x6 $x361)))
 (let (($x247 (= $x59 true)))
 (let (($x209 (= $x247 true)))
 (let (($x498 (= $x209 true)))
 (let (($x100 (= ?x324 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x745 (= $x100 true)))
 (let (($x191 (= $x745 true)))
 (let (($x415 (and $x191 $x498)))
 (let (($x126 (and $x415 $x421)))
 (let (($x401 (and $x126 $x591)))
 (let (($x93 (and $x401 $x182)))
 (let (($x402 (and $x93 $x446)))
 (let (($x236 (and $x402 $x539)))
 (let (($x248 (and $x236 $x395)))
 (let (($x434 (and $x248 $x576)))
 (let (($x34 (and $x434 $x422)))
 (let (($x184 (and $x34 $x406)))
 (let (($x699 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x481 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x227 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x192 (_ bv1 32))))
 (=> $x9 (= ?x227 ?x481)))))))
 ))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x716 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x192 (_ bv1 32))))
 (= $x9 $x295))))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x716 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (= ?x192 (_ bv0 32))))
 (= $x366 $x224))))))
 ))
 (let (($x691 (and $x514 $x205)))
 (let (($x368 (and $x691 $x580)))
 (let (($x506 (and $x368 $x699)))
 (let (($x662 (and $x506 $x184)))
 (let (($x541 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (bvuge ?x120 (_ bv1 32))))
 (=> $x643 (= ?x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x272 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (bvuge ?x120 (_ bv1 32))))
 (= $x643 (bvuge ?x272 (_ bv1 32)))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x272 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x120 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x120 (_ bv0 32))))
 (= $x161 (= ?x272 (_ bv0 32)))))))
 ))
 (let (($x722 (and $x140 $x316)))
 (let (($x431 (and $x722 $x345)))
 (let (($x683 (and $x431 $x541)))
 (let (($x632 (and $x683 $x662)))
 (let (($x757 (=> $x632 $x756)))
 (not $x757)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0642024c)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0486462b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0642024f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0642024c)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!45))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!46))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdfb56944)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdfb56947)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe0db347b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdfb56944)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!50 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!50 (k!47 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0000007) #x20
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!51 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!51 (k!47 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!49 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!49 (k!48 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_2 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x779 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_2 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x766 (bvadd ?x726 ?x374)))
 (let ((?x770 (concat (select input.dst.llvm-mem (bvadd ?x766 (_ bv1 32))) (select input.dst.llvm-mem ?x766))))
 (let ((?x776 (concat (select input.dst.llvm-mem (bvadd ?x766 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x766 (_ bv2 32))) ?x770))))
 (let ((?x108 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (=> $x223 (= ?x108 ?x776)))))))))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (bvuge ?x27 (_ bv1 32))))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (= $x223 $x648))))))
 ))
 (let (($x401 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x703 (= false false)))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x107 (_ bv0 32))))
 (=> $x67 $x703)))))
 ))
 (let (($x511 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x628 (= ?x27 (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x107 (_ bv0 32))))
 (= $x67 $x628))))))
 ))
 (let (($x43 (and $x511 $x401)))
 (let (($x292 (and $x43 $x462)))
 (let (($x780 (and $x292 $x779)))
 (let (($x781 (= $x780 true)))
 (let (($x782 (= $x781 true)))
 (let ((?x244 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x225 (= (_ bv0 2) ?x244)))
 (let (($x561 (= $x225 true)))
 (let (($x241 (= $x561 true)))
 (let (($x596 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x382 (bvadd ?x726 input.dst.llvm-%m2)))
 (let ((?x497 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x497))))
 (let ((?x468 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x368 (_ bv1 32))))
 (=> $x361 (= ?x468 ?x75))))))))))
 ))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (bvuge ?x27 (_ bv1 32))))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x368 (_ bv1 32))))
 (= $x361 $x648))))))
 ))
 (let (($x438 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x703 (= false false)))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x368 (_ bv0 32))))
 (=> $x227 $x703)))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x628 (= ?x27 (_ bv0 32))))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x368 (_ bv0 32))))
 (= $x227 $x628))))))
 ))
 (let (($x362 (and $x237 $x438)))
 (let (($x153 (and $x362 $x127)))
 (let (($x17 (and $x153 $x596)))
 (let (($x293 (= $x17 true)))
 (let (($x218 (= $x293 true)))
 (let (($x549 (= $x218 true)))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x664 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x258))))
 (let ((?x108 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (=> $x223 (= ?x108 ?x664))))))))))
 ))
 (let (($x63 (and $x292 $x207)))
 (let (($x354 (= $x63 true)))
 (let (($x615 (= $x354 true)))
 (let (($x516 (= $x615 true)))
 (let (($x548 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x277))))
 (let ((?x572 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv2 32))) ?x167)))
 (let ((?x492 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv3 32))) ?x572)))
 (let ((?x108 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (=> $x223 (= ?x108 ?x492)))))))))))
 ))
 (let (($x245 (and $x292 $x548)))
 (let (($x49 (= $x245 true)))
 (let (($x654 (= $x49 true)))
 (let (($x84 (= $x654 true)))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x382 (bvadd ?x726 input.dst.llvm-%m2)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x382))))
 (let ((?x524 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv2 32))) ?x32)))
 (let ((?x420 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv3 32))) ?x524)))
 (let ((?x468 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x368 (_ bv1 32))))
 (=> $x361 (= ?x468 ?x420)))))))))))
 ))
 (let (($x444 (and $x153 $x30)))
 (let (($x528 (= $x444 true)))
 (let (($x617 (= $x528 true)))
 (let (($x246 (= $x617 true)))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x664 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x258))))
 (let ((?x484 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x723 (_ bv1 32))))
 (=> $x560 (= ?x484 ?x664))))))))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (bvuge ?x27 (_ bv1 32))))
 (let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x723 (_ bv1 32))))
 (= $x560 $x648))))))
 ))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x703 (= false false)))
 (let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x723 (_ bv0 32))))
 (=> $x604 $x703)))))
 ))
 (let (($x103 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x628 (= ?x27 (_ bv0 32))))
 (let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x723 (_ bv0 32))))
 (= $x604 $x628))))))
 ))
 (let (($x717 (and $x103 $x11)))
 (let (($x547 (and $x717 $x8)))
 (let (($x587 (and $x547 $x7)))
 (let (($x599 (= $x587 true)))
 (let (($x211 (= $x599 true)))
 (let (($x321 (= $x211 true)))
 (let (($x727 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x277))))
 (let ((?x572 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv2 32))) ?x167)))
 (let ((?x492 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv3 32))) ?x572)))
 (let ((?x484 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x723 (_ bv1 32))))
 (=> $x560 (= ?x484 ?x492)))))))))))
 ))
 (let (($x166 (and $x547 $x727)))
 (let (($x26 (= $x166 true)))
 (let (($x660 (= $x26 true)))
 (let (($x276 (= $x660 true)))
 (let (($x434 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x518 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x138 (and $x518 $x434)))
 (let (($x168 (= $x138 true)))
 (let (($x661 (= $x168 true)))
 (let (($x657 (= $x661 true)))
 (let ((?x583 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x681 (= (_ bv0 32) ?x583)))
 (let ((?x339 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x251 (= (_ bv0 32) ?x339)))
 (let ((?x539 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x539)))
 (let ((?x679 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x677 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x679)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x373 (and $x72 $x677)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x82 $x373)))
 (let (($x308 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x530 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (and $x622 $x309)))
 (let (($x575 (not $x317)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x347 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x574 (and $x347 $x111)))
 (let (($x585 (and (not $x574) $x575)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x672 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x402 (and $x672 $x446)))
 (let (($x269 (not $x402)))
 (let (($x637 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x328 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x731 (and $x328 $x637)))
 (let (($x457 (and (not $x731) $x269)))
 (let (($x318 (and (and (and (and (and (and $x457 $x585) $x530) $x308) $x294) $x236) $x251)))
 (let (($x635 (and $x318 $x681)))
 (let (($x440 (= $x635 true)))
 (let (($x395 (= $x440 true)))
 (let (($x248 (= $x395 true)))
 (let ((?x300 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x216 (bvneg ?x300)))
 (let (($x741 (= ?x216 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x165 (= $x741 true)))
 (let (($x60 (= $x165 true)))
 (let (($x182 (= ?x216 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x93 (= $x182 true)))
 (let (($x746 (= $x93 true)))
 (let (($x486 (and $x746 $x60)))
 (let (($x521 (and $x486 $x248)))
 (let (($x144 (and $x521 $x657)))
 (let (($x710 (and $x144 $x276)))
 (let (($x480 (and $x710 $x321)))
 (let (($x193 (and $x480 $x246)))
 (let (($x214 (and $x193 $x84)))
 (let (($x266 (and $x214 $x516)))
 (let (($x351 (and $x266 $x549)))
 (let (($x280 (and $x351 $x241)))
 (let (($x616 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x484 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x108 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (=> $x223 (= ?x108 ?x484)))))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x723 (_ bv1 32))))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (= $x223 $x560))))))
 ))
 (let (($x517 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x723 (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x107 (_ bv0 32))))
 (= $x67 $x604))))))
 ))
 (let (($x198 (and $x517 $x401)))
 (let (($x179 (and $x198 $x326)))
 (let (($x510 (and $x179 $x616)))
 (let (($x253 (and $x510 $x280)))
 (let (($x407 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x468 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x368 (_ bv1 32))))
 (=> $x361 (= ?x468 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x247 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x368 (_ bv1 32))))
 (= $x361 (bvuge ?x295 (_ bv1 32)))))))
 ))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x368 (_ bv0 32))))
 (= $x227 (= ?x295 (_ bv0 32)))))))
 ))
 (let (($x226 (and $x655 $x438)))
 (let (($x209 (and $x226 $x247)))
 (let (($x286 (and $x209 $x407)))
 (let (($x287 (and $x286 $x253)))
 (let (($x783 (=> $x287 $x782)))
 (let (($x784 (not $x783)))
 (let (($x70 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x520 (select solver-mem_2 memmask-bounded-var!)))
 (let (($x185 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x430 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x447 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x430)))
 (let (($x459 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x430)))
 (let (($x262 (or false (or false (and (and true (or $x66 $x459)) (or $x447 $x185))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x262) (= ?x520 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x520 (_ bv0 8)))))))))))
 ))
 (and (and true $x70) $x784)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_2 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x779 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_2 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x766 (bvadd ?x726 ?x374)))
 (let ((?x770 (concat (select input.dst.llvm-mem (bvadd ?x766 (_ bv1 32))) (select input.dst.llvm-mem ?x766))))
 (let ((?x776 (concat (select input.dst.llvm-mem (bvadd ?x766 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x766 (_ bv2 32))) ?x770))))
 (let ((?x108 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (=> $x223 (= ?x108 ?x776)))))))))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (bvuge ?x27 (_ bv1 32))))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (= $x223 $x648))))))
 ))
 (let (($x401 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x703 (= false false)))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x107 (_ bv0 32))))
 (=> $x67 $x703)))))
 ))
 (let (($x511 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x628 (= ?x27 (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x107 (_ bv0 32))))
 (= $x67 $x628))))))
 ))
 (let (($x43 (and $x511 $x401)))
 (let (($x292 (and $x43 $x462)))
 (let (($x780 (and $x292 $x779)))
 (let (($x781 (= $x780 true)))
 (let (($x782 (= $x781 true)))
 (let ((?x244 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x225 (= (_ bv0 2) ?x244)))
 (let (($x561 (= $x225 true)))
 (let (($x241 (= $x561 true)))
 (let (($x596 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x382 (bvadd ?x726 input.dst.llvm-%m2)))
 (let ((?x497 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x497))))
 (let ((?x468 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x368 (_ bv1 32))))
 (=> $x361 (= ?x468 ?x75))))))))))
 ))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (bvuge ?x27 (_ bv1 32))))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x368 (_ bv1 32))))
 (= $x361 $x648))))))
 ))
 (let (($x438 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x703 (= false false)))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x368 (_ bv0 32))))
 (=> $x227 $x703)))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x628 (= ?x27 (_ bv0 32))))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x368 (_ bv0 32))))
 (= $x227 $x628))))))
 ))
 (let (($x362 (and $x237 $x438)))
 (let (($x153 (and $x362 $x127)))
 (let (($x17 (and $x153 $x596)))
 (let (($x293 (= $x17 true)))
 (let (($x218 (= $x293 true)))
 (let (($x549 (= $x218 true)))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x664 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x258))))
 (let ((?x108 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (=> $x223 (= ?x108 ?x664))))))))))
 ))
 (let (($x63 (and $x292 $x207)))
 (let (($x354 (= $x63 true)))
 (let (($x615 (= $x354 true)))
 (let (($x516 (= $x615 true)))
 (let (($x548 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x277))))
 (let ((?x572 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv2 32))) ?x167)))
 (let ((?x492 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv3 32))) ?x572)))
 (let ((?x108 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (=> $x223 (= ?x108 ?x492)))))))))))
 ))
 (let (($x245 (and $x292 $x548)))
 (let (($x49 (= $x245 true)))
 (let (($x654 (= $x49 true)))
 (let (($x84 (= $x654 true)))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x382 (bvadd ?x726 input.dst.llvm-%m2)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x382))))
 (let ((?x524 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv2 32))) ?x32)))
 (let ((?x420 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv3 32))) ?x524)))
 (let ((?x468 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x368 (_ bv1 32))))
 (=> $x361 (= ?x468 ?x420)))))))))))
 ))
 (let (($x444 (and $x153 $x30)))
 (let (($x528 (= $x444 true)))
 (let (($x617 (= $x528 true)))
 (let (($x246 (= $x617 true)))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x664 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x258))))
 (let ((?x484 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x723 (_ bv1 32))))
 (=> $x560 (= ?x484 ?x664))))))))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (bvuge ?x27 (_ bv1 32))))
 (let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x723 (_ bv1 32))))
 (= $x560 $x648))))))
 ))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x703 (= false false)))
 (let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x723 (_ bv0 32))))
 (=> $x604 $x703)))))
 ))
 (let (($x103 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x628 (= ?x27 (_ bv0 32))))
 (let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x723 (_ bv0 32))))
 (= $x604 $x628))))))
 ))
 (let (($x717 (and $x103 $x11)))
 (let (($x547 (and $x717 $x8)))
 (let (($x587 (and $x547 $x7)))
 (let (($x599 (= $x587 true)))
 (let (($x211 (= $x599 true)))
 (let (($x321 (= $x211 true)))
 (let (($x727 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x277))))
 (let ((?x572 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv2 32))) ?x167)))
 (let ((?x492 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv3 32))) ?x572)))
 (let ((?x484 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x723 (_ bv1 32))))
 (=> $x560 (= ?x484 ?x492)))))))))))
 ))
 (let (($x166 (and $x547 $x727)))
 (let (($x26 (= $x166 true)))
 (let (($x660 (= $x26 true)))
 (let (($x276 (= $x660 true)))
 (let (($x434 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x518 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x138 (and $x518 $x434)))
 (let (($x168 (= $x138 true)))
 (let (($x661 (= $x168 true)))
 (let (($x657 (= $x661 true)))
 (let ((?x583 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x681 (= (_ bv0 32) ?x583)))
 (let ((?x339 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x251 (= (_ bv0 32) ?x339)))
 (let ((?x539 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x539)))
 (let ((?x679 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x677 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x679)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x373 (and $x72 $x677)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x82 $x373)))
 (let (($x308 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x530 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (and $x622 $x309)))
 (let (($x575 (not $x317)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x347 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x574 (and $x347 $x111)))
 (let (($x585 (and (not $x574) $x575)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x672 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x402 (and $x672 $x446)))
 (let (($x269 (not $x402)))
 (let (($x637 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x328 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x731 (and $x328 $x637)))
 (let (($x457 (and (not $x731) $x269)))
 (let (($x318 (and (and (and (and (and (and $x457 $x585) $x530) $x308) $x294) $x236) $x251)))
 (let (($x635 (and $x318 $x681)))
 (let (($x440 (= $x635 true)))
 (let (($x395 (= $x440 true)))
 (let (($x248 (= $x395 true)))
 (let ((?x300 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x216 (bvneg ?x300)))
 (let (($x741 (= ?x216 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x165 (= $x741 true)))
 (let (($x60 (= $x165 true)))
 (let (($x182 (= ?x216 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x93 (= $x182 true)))
 (let (($x746 (= $x93 true)))
 (let (($x486 (and $x746 $x60)))
 (let (($x521 (and $x486 $x248)))
 (let (($x144 (and $x521 $x657)))
 (let (($x710 (and $x144 $x276)))
 (let (($x480 (and $x710 $x321)))
 (let (($x193 (and $x480 $x246)))
 (let (($x214 (and $x193 $x84)))
 (let (($x266 (and $x214 $x516)))
 (let (($x351 (and $x266 $x549)))
 (let (($x280 (and $x351 $x241)))
 (let (($x616 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x484 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x108 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (=> $x223 (= ?x108 ?x484)))))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x723 (_ bv1 32))))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x107 (_ bv1 32))))
 (= $x223 $x560))))))
 ))
 (let (($x517 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x723 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (= ?x723 (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x107 (_ bv0 32))))
 (= $x67 $x604))))))
 ))
 (let (($x198 (and $x517 $x401)))
 (let (($x179 (and $x198 $x326)))
 (let (($x510 (and $x179 $x616)))
 (let (($x253 (and $x510 $x280)))
 (let (($x407 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x468 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x368 (_ bv1 32))))
 (=> $x361 (= ?x468 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x247 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x368 (_ bv1 32))))
 (= $x361 (bvuge ?x295 (_ bv1 32)))))))
 ))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x368 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x368 (_ bv0 32))))
 (= $x227 (= ?x295 (_ bv0 32)))))))
 ))
 (let (($x226 (and $x655 $x438)))
 (let (($x209 (and $x226 $x247)))
 (let (($x286 (and $x209 $x407)))
 (let (($x287 (and $x286 $x253)))
 (let (($x783 (=> $x287 $x782)))
 (let (($x784 (not $x783)))
 (let (($x70 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x520 (select solver-mem_2 memmask-bounded-var!)))
 (let (($x185 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x430 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x447 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x430)))
 (let (($x459 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x430)))
 (let (($x262 (or false (or false (and (and true (or $x66 $x459)) (or $x447 $x185))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x262) (= ?x520 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x520 (_ bv0 8)))))))))))
 ))
 (and (and true $x70) $x784)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 3
==result_count: 0
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x705 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_3 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x139 (bvadd ?x242 ?x705)))
 (let ((?x478 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x139))))
 (let ((?x21 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x139 (_ bv2 32))) ?x478)))
 (let ((?x762 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x139 (_ bv3 32))) ?x21)))
 (let ((?x210 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (=> $x386 (= ?x210 ?x762))))))))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x161 (_ bv1 32))))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (= $x386 $x50))))))
 ))
 (let (($x539 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x559 (= false false)))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (= ?x375 (_ bv0 32))))
 (=> $x679 $x559)))))
 ))
 (let (($x541 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (= ?x161 (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (= ?x375 (_ bv0 32))))
 (= $x679 $x433))))))
 ))
 (let (($x683 (and $x541 $x539)))
 (let (($x663 (and $x683 $x366)))
 (let (($x264 (and $x663 $x611)))
 (let (($x151 (= $x264 true)))
 (let (($x112 (= $x151 true)))
 (let ((?x109 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x529 (= (_ bv0 2) ?x109)))
 (let (($x290 (= $x529 true)))
 (let (($x146 (= $x290 true)))
 (let (($x725 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x242 input.dst.llvm-%m2)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x712))))
 (let ((?x616 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x506 (_ bv1 32))))
 (=> $x517 (= ?x616 ?x121))))))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x161 (_ bv1 32))))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x506 (_ bv1 32))))
 (= $x517 $x50))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x559 (= false false)))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x506 (_ bv0 32))))
 (=> $x438 $x559)))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (= ?x161 (_ bv0 32))))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x506 (_ bv0 32))))
 (= $x438 $x433))))))
 ))
 (let (($x694 (and $x243 $x209)))
 (let (($x571 (and $x694 $x97)))
 (let (($x715 (and $x571 $x725)))
 (let (($x534 (= $x715 true)))
 (let (($x28 (= $x534 true)))
 (let (($x41 (= $x28 true)))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x242 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x493 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x190))))
 (let ((?x210 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (=> $x386 (= ?x210 ?x493))))))))))
 ))
 (let (($x713 (and $x663 $x85)))
 (let (($x564 (= $x713 true)))
 (let (($x399 (= $x564 true)))
 (let (($x578 (= $x399 true)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x242 input.dst.llvm-%m1)))
 (let ((?x426 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x136))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv2 32))) ?x426)))
 (let ((?x680 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv3 32))) ?x202)))
 (let ((?x210 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (=> $x386 (= ?x210 ?x680)))))))))))
 ))
 (let (($x620 (and $x663 $x191)))
 (let (($x483 (= $x620 true)))
 (let (($x6 (= $x483 true)))
 (let (($x353 (= $x6 true)))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x242 input.dst.llvm-%m2)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x299))))
 (let ((?x639 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv2 32))) ?x45)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv3 32))) ?x639)))
 (let ((?x616 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x506 (_ bv1 32))))
 (=> $x517 (= ?x616 ?x128)))))))))))
 ))
 (let (($x595 (and $x571 $x252)))
 (let (($x335 (= $x595 true)))
 (let (($x143 (= $x335 true)))
 (let (($x676 (= $x143 true)))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x242 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x493 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x190))))
 (let ((?x42 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x579 (_ bv1 32))))
 (=> $x370 (= ?x42 ?x493))))))))))
 ))
 (let (($x729 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x161 (_ bv1 32))))
 (let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x579 (_ bv1 32))))
 (= $x370 $x50))))))
 ))
 (let (($x487 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x559 (= false false)))
 (let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x579 (_ bv0 32))))
 (=> $x82 $x559)))))
 ))
 (let (($x390 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (= ?x161 (_ bv0 32))))
 (let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x579 (_ bv0 32))))
 (= $x82 $x433))))))
 ))
 (let (($x306 (and $x390 $x487)))
 (let (($x644 (and $x306 $x729)))
 (let (($x367 (and $x644 $x129)))
 (let (($x624 (= $x367 true)))
 (let (($x656 (= $x624 true)))
 (let (($x233 (= $x656 true)))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x242 input.dst.llvm-%m1)))
 (let ((?x426 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x136))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv2 32))) ?x426)))
 (let ((?x680 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv3 32))) ?x202)))
 (let ((?x42 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x579 (_ bv1 32))))
 (=> $x370 (= ?x42 ?x680)))))))))))
 ))
 (let (($x164 (and $x644 $x387)))
 (let (($x171 (= $x164 true)))
 (let (($x508 (= $x171 true)))
 (let (($x181 (= $x508 true)))
 (let (($x246 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x444 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x193 (and $x444 $x246)))
 (let (($x455 (= $x193 true)))
 (let (($x511 (= $x455 true)))
 (let (($x43 (= $x511 true)))
 (let ((?x127 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x153 (= (_ bv0 32) ?x127)))
 (let ((?x362 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x689 (= (_ bv0 32) ?x362)))
 (let ((?x608 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x608)))
 (let ((?x599 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x599)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x321 (and $x7 $x211)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x480 (and $x141 $x321)))
 (let (($x453 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x489 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x710 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x710 $x489)))
 (let (($x307 (not $x291)))
 (let (($x660 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x26 $x660)))
 (let (($x452 (and (not $x276) $x307)))
 (let (($x492 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x572 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (and $x572 $x492)))
 (let (($x618 (not $x289)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x183 $x65)))
 (let (($x166 (and (not $x200) $x618)))
 (let (($x377 (and (and (and (and (and (and $x166 $x452) $x304) $x453) $x480) $x237) $x689)))
 (let (($x372 (and $x377 $x153)))
 (let (($x642 (= $x372 true)))
 (let (($x32 (= $x642 true)))
 (let (($x524 (= $x32 true)))
 (let ((?x11 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x717 (bvneg ?x11)))
 (let (($x726 (= ?x717 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x277 (= $x726 true)))
 (let (($x728 (= $x277 true)))
 (let (($x346 (= ?x717 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x8 (= $x346 true)))
 (let (($x547 (= $x8 true)))
 (let (($x16 (and $x547 $x728)))
 (let (($x420 (and $x16 $x524)))
 (let (($x278 (and $x420 $x43)))
 (let (($x273 (and $x278 $x181)))
 (let (($x110 (and $x273 $x233)))
 (let (($x187 (and $x110 $x676)))
 (let (($x40 (and $x187 $x353)))
 (let (($x142 (and $x40 $x578)))
 (let (($x371 (and $x142 $x41)))
 (let (($x175 (and $x371 $x146)))
 (let (($x628 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x42 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x210 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (=> $x386 (= ?x210 ?x42)))))))
 ))
 (let (($x518 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x579 (_ bv1 32))))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (= $x386 $x370))))))
 ))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x579 (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (= ?x375 (_ bv0 32))))
 (= $x679 $x82))))))
 ))
 (let (($x236 (and $x373 $x539)))
 (let (($x545 (and $x236 $x518)))
 (let (($x92 (and $x545 $x628)))
 (let (($x284 (and $x92 $x175)))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x616 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x506 (_ bv1 32))))
 (=> $x517 (= ?x616 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x401 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x481 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x506 (_ bv1 32))))
 (= $x517 (bvuge ?x481 (_ bv1 32)))))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x481 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x506 (_ bv0 32))))
 (= $x438 (= ?x481 (_ bv0 32)))))))
 ))
 (let (($x468 (and $x361 $x209)))
 (let (($x198 (and $x468 $x401)))
 (let (($x300 (and $x198 $x314)))
 (let (($x536 (and $x300 $x284)))
 (let (($x760 (=> $x536 $x112)))
 (let (($x763 (not $x760)))
 (let (($x557 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x714 (select solver-mem_3 memmask-bounded-var!)))
 (let (($x213 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x512 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x259 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x627 (or false (or false (and (and true (or $x137 $x259)) (or $x512 $x213))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x627) (= ?x714 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x714 (_ bv0 8)))))))))))
 ))
 (and (and true $x557) $x763)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x705 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_3 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x139 (bvadd ?x242 ?x705)))
 (let ((?x478 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x139))))
 (let ((?x21 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x139 (_ bv2 32))) ?x478)))
 (let ((?x762 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x139 (_ bv3 32))) ?x21)))
 (let ((?x210 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (=> $x386 (= ?x210 ?x762))))))))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x161 (_ bv1 32))))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (= $x386 $x50))))))
 ))
 (let (($x539 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x559 (= false false)))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (= ?x375 (_ bv0 32))))
 (=> $x679 $x559)))))
 ))
 (let (($x541 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (= ?x161 (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (= ?x375 (_ bv0 32))))
 (= $x679 $x433))))))
 ))
 (let (($x683 (and $x541 $x539)))
 (let (($x663 (and $x683 $x366)))
 (let (($x264 (and $x663 $x611)))
 (let (($x151 (= $x264 true)))
 (let (($x112 (= $x151 true)))
 (let ((?x109 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x529 (= (_ bv0 2) ?x109)))
 (let (($x290 (= $x529 true)))
 (let (($x146 (= $x290 true)))
 (let (($x725 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x242 input.dst.llvm-%m2)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x712))))
 (let ((?x616 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x506 (_ bv1 32))))
 (=> $x517 (= ?x616 ?x121))))))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x161 (_ bv1 32))))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x506 (_ bv1 32))))
 (= $x517 $x50))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x559 (= false false)))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x506 (_ bv0 32))))
 (=> $x438 $x559)))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (= ?x161 (_ bv0 32))))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x506 (_ bv0 32))))
 (= $x438 $x433))))))
 ))
 (let (($x694 (and $x243 $x209)))
 (let (($x571 (and $x694 $x97)))
 (let (($x715 (and $x571 $x725)))
 (let (($x534 (= $x715 true)))
 (let (($x28 (= $x534 true)))
 (let (($x41 (= $x28 true)))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x242 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x493 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x190))))
 (let ((?x210 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (=> $x386 (= ?x210 ?x493))))))))))
 ))
 (let (($x713 (and $x663 $x85)))
 (let (($x564 (= $x713 true)))
 (let (($x399 (= $x564 true)))
 (let (($x578 (= $x399 true)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x242 input.dst.llvm-%m1)))
 (let ((?x426 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x136))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv2 32))) ?x426)))
 (let ((?x680 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv3 32))) ?x202)))
 (let ((?x210 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (=> $x386 (= ?x210 ?x680)))))))))))
 ))
 (let (($x620 (and $x663 $x191)))
 (let (($x483 (= $x620 true)))
 (let (($x6 (= $x483 true)))
 (let (($x353 (= $x6 true)))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x242 input.dst.llvm-%m2)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x299))))
 (let ((?x639 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv2 32))) ?x45)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv3 32))) ?x639)))
 (let ((?x616 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x506 (_ bv1 32))))
 (=> $x517 (= ?x616 ?x128)))))))))))
 ))
 (let (($x595 (and $x571 $x252)))
 (let (($x335 (= $x595 true)))
 (let (($x143 (= $x335 true)))
 (let (($x676 (= $x143 true)))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x242 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x493 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x190))))
 (let ((?x42 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x579 (_ bv1 32))))
 (=> $x370 (= ?x42 ?x493))))))))))
 ))
 (let (($x729 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x161 (_ bv1 32))))
 (let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x579 (_ bv1 32))))
 (= $x370 $x50))))))
 ))
 (let (($x487 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x559 (= false false)))
 (let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x579 (_ bv0 32))))
 (=> $x82 $x559)))))
 ))
 (let (($x390 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x161 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x433 (= ?x161 (_ bv0 32))))
 (let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x579 (_ bv0 32))))
 (= $x82 $x433))))))
 ))
 (let (($x306 (and $x390 $x487)))
 (let (($x644 (and $x306 $x729)))
 (let (($x367 (and $x644 $x129)))
 (let (($x624 (= $x367 true)))
 (let (($x656 (= $x624 true)))
 (let (($x233 (= $x656 true)))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x136 (bvadd ?x242 input.dst.llvm-%m1)))
 (let ((?x426 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x136))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv2 32))) ?x426)))
 (let ((?x680 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x136 (_ bv3 32))) ?x202)))
 (let ((?x42 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x579 (_ bv1 32))))
 (=> $x370 (= ?x42 ?x680)))))))))))
 ))
 (let (($x164 (and $x644 $x387)))
 (let (($x171 (= $x164 true)))
 (let (($x508 (= $x171 true)))
 (let (($x181 (= $x508 true)))
 (let (($x246 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x444 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x193 (and $x444 $x246)))
 (let (($x455 (= $x193 true)))
 (let (($x511 (= $x455 true)))
 (let (($x43 (= $x511 true)))
 (let ((?x127 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x153 (= (_ bv0 32) ?x127)))
 (let ((?x362 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x689 (= (_ bv0 32) ?x362)))
 (let ((?x608 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x608)))
 (let ((?x599 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x599)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x321 (and $x7 $x211)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x480 (and $x141 $x321)))
 (let (($x453 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x489 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x710 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x710 $x489)))
 (let (($x307 (not $x291)))
 (let (($x660 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x26 $x660)))
 (let (($x452 (and (not $x276) $x307)))
 (let (($x492 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x572 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (and $x572 $x492)))
 (let (($x618 (not $x289)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x183 $x65)))
 (let (($x166 (and (not $x200) $x618)))
 (let (($x377 (and (and (and (and (and (and $x166 $x452) $x304) $x453) $x480) $x237) $x689)))
 (let (($x372 (and $x377 $x153)))
 (let (($x642 (= $x372 true)))
 (let (($x32 (= $x642 true)))
 (let (($x524 (= $x32 true)))
 (let ((?x11 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x717 (bvneg ?x11)))
 (let (($x726 (= ?x717 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x277 (= $x726 true)))
 (let (($x728 (= $x277 true)))
 (let (($x346 (= ?x717 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x8 (= $x346 true)))
 (let (($x547 (= $x8 true)))
 (let (($x16 (and $x547 $x728)))
 (let (($x420 (and $x16 $x524)))
 (let (($x278 (and $x420 $x43)))
 (let (($x273 (and $x278 $x181)))
 (let (($x110 (and $x273 $x233)))
 (let (($x187 (and $x110 $x676)))
 (let (($x40 (and $x187 $x353)))
 (let (($x142 (and $x40 $x578)))
 (let (($x371 (and $x142 $x41)))
 (let (($x175 (and $x371 $x146)))
 (let (($x628 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x42 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x210 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (=> $x386 (= ?x210 ?x42)))))))
 ))
 (let (($x518 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x579 (_ bv1 32))))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x375 (_ bv1 32))))
 (= $x386 $x370))))))
 ))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x579 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x579 (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (= ?x375 (_ bv0 32))))
 (= $x679 $x82))))))
 ))
 (let (($x236 (and $x373 $x539)))
 (let (($x545 (and $x236 $x518)))
 (let (($x92 (and $x545 $x628)))
 (let (($x284 (and $x92 $x175)))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x616 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x506 (_ bv1 32))))
 (=> $x517 (= ?x616 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x401 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x481 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x517 (bvuge ?x506 (_ bv1 32))))
 (= $x517 (bvuge ?x481 (_ bv1 32)))))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x481 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x506 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x506 (_ bv0 32))))
 (= $x438 (= ?x481 (_ bv0 32)))))))
 ))
 (let (($x468 (and $x361 $x209)))
 (let (($x198 (and $x468 $x401)))
 (let (($x300 (and $x198 $x314)))
 (let (($x536 (and $x300 $x284)))
 (let (($x760 (=> $x536 $x112)))
 (let (($x763 (not $x760)))
 (let (($x557 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x714 (select solver-mem_3 memmask-bounded-var!)))
 (let (($x213 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x512 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x259 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x627 (or false (or false (and (and true (or $x137 $x259)) (or $x512 $x213))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x627) (= ?x714 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x714 (_ bv0 8)))))))))))
 ))
 (and (and true $x557) $x763)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!243))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x08000800)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x04000210)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!241))
  (define-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!242))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80071004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!244))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80071007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x08000803)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80071004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x08000800)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!241 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7f1e3abf) #x20
    (ite (= x!0 #x08000800) #x20
    (ite (= x!0 #x00828002) #x01
      #x00))))
  (define-fun k!246 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000064 x!0)
                    (ite (bvule #x00000065 x!0)
                         (ite (bvule #x04000210 x!0) #x04000210 #x00000065)
                         #x00000064)
                    #x00000020)))
      (ite (bvule #x00000020 x!0) a!1 #x00000000)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!249 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000020) true
      false)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!249
      (k!246 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000020) #x00000000
      (let ((a!1 (concat (k!244 (bvadd #x04000213 (bvmul #x00000004 x!0)))
                         (k!244 (bvadd #x04000212 (bvmul #x00000004 x!0)))
                         (k!244 (bvadd #x04000211 (bvmul #x00000004 x!0)))
                         (k!244 (bvadd #x04000210 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!241 (bvadd #x04000213 (bvmul #x00000004 x!0)))
                         (k!241 (bvadd #x04000212 (bvmul #x00000004 x!0)))
                         (k!241 (bvadd #x04000211 (bvmul #x00000004 x!0)))
                         (k!241 (bvadd #x04000210 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!250 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000020) true
      false)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!250 (k!246 x!0)))
  (define-fun k!244 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000020) #x00000000
      (let ((a!1 (concat (k!244 (bvadd #x04000213 (bvmul #x00000004 x!0)))
                         (k!244 (bvadd #x04000212 (bvmul #x00000004 x!0)))
                         (k!244 (bvadd #x04000211 (bvmul #x00000004 x!0)))
                         (k!244 (bvadd #x04000210 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun k!247 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x04000210 x!0) #x04000210 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!248 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!248 (k!247 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x04000210) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!243 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00828002) #xce
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!244 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!244 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!244 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!244 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!241 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!241 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!241 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!241 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!242))
              (= x!3 (_ as-array k!243))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x7f1e3abc
      #x04000213))
  (define-fun k!242 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7f1e3abf) #x20
    (ite (= x!0 #x00828002) #x01
      #x00)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x519 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_4 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x495 (bvadd ?x184 ?x232)))
 (let ((?x553 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x495 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x495))))
 (let ((?x734 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x495 (_ bv2 32))) ?x553)))
 (let ((?x448 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x495 (_ bv3 32))) ?x734)))
 (let ((?x649 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x71 (_ bv1 32))))
 (=> $x222 (= ?x649 ?x448))))))))))))
 ))
 (let (($x413 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x271 (_ bv1 32))))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x71 (_ bv1 32))))
 (= $x222 $x313))))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x104 (= false false)))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x71 (_ bv0 32))))
 (=> $x141 $x104)))))
 ))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x271 (_ bv0 32))))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x71 (_ bv0 32))))
 (= $x141 $x178))))))
 ))
 (let (($x185 (and $x98 $x402)))
 (let (($x76 (and $x185 $x413)))
 (let (($x626 (and $x76 $x519)))
 (let (($x542 (= $x626 true)))
 (let (($x414 (= $x542 true)))
 (let ((?x327 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x39 (= (_ bv0 2) ?x327)))
 (let (($x379 (= $x39 true)))
 (let (($x687 (= $x379 true)))
 (let (($x673 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x184 input.dst.llvm-%m2)))
 (let ((?x606 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x669 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x606))))
 (let ((?x628 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x247 (_ bv1 32))))
 (=> $x373 (= ?x628 ?x669))))))))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x271 (_ bv1 32))))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x247 (_ bv1 32))))
 (= $x373 $x313))))))
 ))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x104 (= false false)))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x247 (_ bv0 32))))
 (=> $x209 $x104)))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x271 (_ bv0 32))))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x247 (_ bv0 32))))
 (= $x209 $x178))))))
 ))
 (let (($x429 (and $x189 $x198)))
 (let (($x507 (and $x429 $x249)))
 (let (($x57 (and $x507 $x673)))
 (let (($x735 (= $x57 true)))
 (let (($x670 (= $x735 true)))
 (let (($x472 (= $x670 true)))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x605 (bvadd ?x184 input.dst.llvm-%m1)))
 (let ((?x719 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x719))))
 (let ((?x665 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x587 (_ bv1 32))))
 (=> $x634 (= ?x665 ?x391))))))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x271 (_ bv1 32))))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x587 (_ bv1 32))))
 (= $x634 $x313))))))
 ))
 (let (($x608 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x104 (= false false)))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x587 (_ bv0 32))))
 (=> $x599 $x104)))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x271 (_ bv0 32))))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x587 (_ bv0 32))))
 (= $x599 $x178))))))
 ))
 (let (($x532 (and $x274 $x608)))
 (let (($x580 (and $x532 $x418)))
 (let (($x140 (and $x580 $x443)))
 (let (($x348 (= $x140 true)))
 (let (($x747 (= $x348 true)))
 (let (($x640 (= $x747 true)))
 (let (($x513 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x605 (bvadd ?x184 input.dst.llvm-%m1)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x605))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv2 32))) ?x332)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv3 32))) ?x260)))
 (let ((?x665 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x587 (_ bv1 32))))
 (=> $x634 (= ?x665 ?x194)))))))))))
 ))
 (let (($x107 (and $x580 $x513)))
 (let (($x67 (= $x107 true)))
 (let (($x723 (= $x67 true)))
 (let (($x604 (= $x723 true)))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x184 input.dst.llvm-%m2)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x309))))
 (let ((?x681 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv2 32))) ?x78)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv3 32))) ?x681)))
 (let ((?x628 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x247 (_ bv1 32))))
 (=> $x373 (= ?x628 ?x248)))))))))))
 ))
 (let (($x657 (and $x507 $x168)))
 (let (($x144 (= $x657 true)))
 (let (($x631 (= $x144 true)))
 (let (($x520 (= $x631 true)))
 (let (($x737 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x605 (bvadd ?x184 input.dst.llvm-%m1)))
 (let ((?x719 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x719))))
 (let ((?x649 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x71 (_ bv1 32))))
 (=> $x222 (= ?x649 ?x391))))))))))
 ))
 (let (($x54 (and $x76 $x737)))
 (let (($x685 (= $x54 true)))
 (let (($x566 (= $x685 true)))
 (let (($x432 (= $x566 true)))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x605 (bvadd ?x184 input.dst.llvm-%m1)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x605))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv2 32))) ?x332)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv3 32))) ?x260)))
 (let ((?x649 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x71 (_ bv1 32))))
 (=> $x222 (= ?x649 ?x194)))))))))))
 ))
 (let (($x10 (and $x76 $x207)))
 (let (($x315 (= $x10 true)))
 (let (($x424 (= $x315 true)))
 (let (($x659 (= $x424 true)))
 (let (($x676 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x595 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x187 (and $x595 $x676)))
 (let (($x118 (= $x187 true)))
 (let (($x541 (= $x118 true)))
 (let (($x683 (= $x541 true)))
 (let ((?x97 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x571 (= (_ bv0 32) ?x97)))
 (let ((?x694 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x666 (= (_ bv0 32) ?x694)))
 (let ((?x668 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x668)))
 (let ((?x624 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x656 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x624)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x233 (and $x129 $x656)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x37 $x233)))
 (let (($x636 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x577 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x588 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x273 $x588)))
 (let (($x349 (not $x69)))
 (let (($x508 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x171 $x508)))
 (let (($x538 (and (not $x181) $x349)))
 (let (($x680 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x632 (and $x202 $x680)))
 (let (($x263 (not $x632)))
 (let (($x678 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (and $x403 $x678)))
 (let (($x164 (and (not $x311) $x263)))
 (let (($x711 (and (and (and (and (and (and $x164 $x538) $x577) $x636) $x110) $x243) $x666)))
 (let (($x148 (and $x711 $x571)))
 (let (($x425 (= $x148 true)))
 (let (($x45 (= $x425 true)))
 (let (($x639 (= $x45 true)))
 (let ((?x487 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x306 (bvneg ?x487)))
 (let (($x242 (= ?x306 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x136 (= $x242 true)))
 (let (($x239 (= $x136 true)))
 (let (($x724 (= ?x306 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x729 (= $x724 true)))
 (let (($x644 (= $x729 true)))
 (let (($x749 (and $x644 $x239)))
 (let (($x128 (and $x749 $x639)))
 (let (($x192 (and $x128 $x683)))
 (let (($x240 (and $x192 $x659)))
 (let (($x147 (and $x240 $x432)))
 (let (($x262 (and $x147 $x520)))
 (let (($x238 (and $x262 $x604)))
 (let (($x357 (and $x238 $x640)))
 (let (($x456 (and $x357 $x472)))
 (let (($x558 (and $x456 $x687)))
 (let (($x433 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x665 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x587 (_ bv1 32))))
 (=> $x634 (= ?x665 ?x649)))))))
 ))
 (let (($x444 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x71 (_ bv1 32))))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x587 (_ bv1 32))))
 (= $x634 $x222))))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x71 (_ bv0 32))))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x587 (_ bv0 32))))
 (= $x599 $x141))))))
 ))
 (let (($x237 (and $x321 $x608)))
 (let (($x528 (and $x237 $x444)))
 (let (($x706 (and $x528 $x433)))
 (let (($x303 (and $x706 $x558)))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x628 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x247 (_ bv1 32))))
 (=> $x373 (= ?x628 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x539 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x247 (_ bv1 32))))
 (= $x373 (bvuge ?x226 (_ bv1 32)))))))
 ))
 (let (($x517 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x247 (_ bv0 32))))
 (= $x209 (= ?x226 (_ bv0 32)))))))
 ))
 (let (($x616 (and $x517 $x198)))
 (let (($x236 (and $x616 $x539)))
 (let (($x11 (and $x236 $x398)))
 (let (($x645 (and $x11 $x303)))
 (let (($x738 (=> $x645 $x414)))
 (let (($x256 (not $x738)))
 (let (($x80 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x449 (select solver-mem_4 memmask-bounded-var!)))
 (let (($x396 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x598 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x436 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x550 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x494 (or false (or false (and (and true (or $x550 $x436)) (or $x598 $x396))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x494) (= ?x449 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x449 (_ bv0 8)))))))))))
 ))
 (and (and true $x80) $x256)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x519 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_4 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x495 (bvadd ?x184 ?x232)))
 (let ((?x553 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x495 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x495))))
 (let ((?x734 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x495 (_ bv2 32))) ?x553)))
 (let ((?x448 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x495 (_ bv3 32))) ?x734)))
 (let ((?x649 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x71 (_ bv1 32))))
 (=> $x222 (= ?x649 ?x448))))))))))))
 ))
 (let (($x413 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x271 (_ bv1 32))))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x71 (_ bv1 32))))
 (= $x222 $x313))))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x104 (= false false)))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x71 (_ bv0 32))))
 (=> $x141 $x104)))))
 ))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x271 (_ bv0 32))))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x71 (_ bv0 32))))
 (= $x141 $x178))))))
 ))
 (let (($x185 (and $x98 $x402)))
 (let (($x76 (and $x185 $x413)))
 (let (($x626 (and $x76 $x519)))
 (let (($x542 (= $x626 true)))
 (let (($x414 (= $x542 true)))
 (let ((?x327 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x39 (= (_ bv0 2) ?x327)))
 (let (($x379 (= $x39 true)))
 (let (($x687 (= $x379 true)))
 (let (($x673 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x184 input.dst.llvm-%m2)))
 (let ((?x606 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x669 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x606))))
 (let ((?x628 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x247 (_ bv1 32))))
 (=> $x373 (= ?x628 ?x669))))))))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x271 (_ bv1 32))))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x247 (_ bv1 32))))
 (= $x373 $x313))))))
 ))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x104 (= false false)))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x247 (_ bv0 32))))
 (=> $x209 $x104)))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x271 (_ bv0 32))))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x247 (_ bv0 32))))
 (= $x209 $x178))))))
 ))
 (let (($x429 (and $x189 $x198)))
 (let (($x507 (and $x429 $x249)))
 (let (($x57 (and $x507 $x673)))
 (let (($x735 (= $x57 true)))
 (let (($x670 (= $x735 true)))
 (let (($x472 (= $x670 true)))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x605 (bvadd ?x184 input.dst.llvm-%m1)))
 (let ((?x719 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x719))))
 (let ((?x665 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x587 (_ bv1 32))))
 (=> $x634 (= ?x665 ?x391))))))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x271 (_ bv1 32))))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x587 (_ bv1 32))))
 (= $x634 $x313))))))
 ))
 (let (($x608 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x104 (= false false)))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x587 (_ bv0 32))))
 (=> $x599 $x104)))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x271 (_ bv0 32))))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x587 (_ bv0 32))))
 (= $x599 $x178))))))
 ))
 (let (($x532 (and $x274 $x608)))
 (let (($x580 (and $x532 $x418)))
 (let (($x140 (and $x580 $x443)))
 (let (($x348 (= $x140 true)))
 (let (($x747 (= $x348 true)))
 (let (($x640 (= $x747 true)))
 (let (($x513 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x605 (bvadd ?x184 input.dst.llvm-%m1)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x605))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv2 32))) ?x332)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv3 32))) ?x260)))
 (let ((?x665 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x587 (_ bv1 32))))
 (=> $x634 (= ?x665 ?x194)))))))))))
 ))
 (let (($x107 (and $x580 $x513)))
 (let (($x67 (= $x107 true)))
 (let (($x723 (= $x67 true)))
 (let (($x604 (= $x723 true)))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x184 input.dst.llvm-%m2)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x309))))
 (let ((?x681 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv2 32))) ?x78)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv3 32))) ?x681)))
 (let ((?x628 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x247 (_ bv1 32))))
 (=> $x373 (= ?x628 ?x248)))))))))))
 ))
 (let (($x657 (and $x507 $x168)))
 (let (($x144 (= $x657 true)))
 (let (($x631 (= $x144 true)))
 (let (($x520 (= $x631 true)))
 (let (($x737 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x605 (bvadd ?x184 input.dst.llvm-%m1)))
 (let ((?x719 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x719))))
 (let ((?x649 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x71 (_ bv1 32))))
 (=> $x222 (= ?x649 ?x391))))))))))
 ))
 (let (($x54 (and $x76 $x737)))
 (let (($x685 (= $x54 true)))
 (let (($x566 (= $x685 true)))
 (let (($x432 (= $x566 true)))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x605 (bvadd ?x184 input.dst.llvm-%m1)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x605))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv2 32))) ?x332)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x605 (_ bv3 32))) ?x260)))
 (let ((?x649 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x71 (_ bv1 32))))
 (=> $x222 (= ?x649 ?x194)))))))))))
 ))
 (let (($x10 (and $x76 $x207)))
 (let (($x315 (= $x10 true)))
 (let (($x424 (= $x315 true)))
 (let (($x659 (= $x424 true)))
 (let (($x676 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x595 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x187 (and $x595 $x676)))
 (let (($x118 (= $x187 true)))
 (let (($x541 (= $x118 true)))
 (let (($x683 (= $x541 true)))
 (let ((?x97 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x571 (= (_ bv0 32) ?x97)))
 (let ((?x694 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x666 (= (_ bv0 32) ?x694)))
 (let ((?x668 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x668)))
 (let ((?x624 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x656 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x624)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x233 (and $x129 $x656)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x37 $x233)))
 (let (($x636 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x577 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x588 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x273 $x588)))
 (let (($x349 (not $x69)))
 (let (($x508 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x171 $x508)))
 (let (($x538 (and (not $x181) $x349)))
 (let (($x680 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x632 (and $x202 $x680)))
 (let (($x263 (not $x632)))
 (let (($x678 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (and $x403 $x678)))
 (let (($x164 (and (not $x311) $x263)))
 (let (($x711 (and (and (and (and (and (and $x164 $x538) $x577) $x636) $x110) $x243) $x666)))
 (let (($x148 (and $x711 $x571)))
 (let (($x425 (= $x148 true)))
 (let (($x45 (= $x425 true)))
 (let (($x639 (= $x45 true)))
 (let ((?x487 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x306 (bvneg ?x487)))
 (let (($x242 (= ?x306 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x136 (= $x242 true)))
 (let (($x239 (= $x136 true)))
 (let (($x724 (= ?x306 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x729 (= $x724 true)))
 (let (($x644 (= $x729 true)))
 (let (($x749 (and $x644 $x239)))
 (let (($x128 (and $x749 $x639)))
 (let (($x192 (and $x128 $x683)))
 (let (($x240 (and $x192 $x659)))
 (let (($x147 (and $x240 $x432)))
 (let (($x262 (and $x147 $x520)))
 (let (($x238 (and $x262 $x604)))
 (let (($x357 (and $x238 $x640)))
 (let (($x456 (and $x357 $x472)))
 (let (($x558 (and $x456 $x687)))
 (let (($x433 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x665 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x587 (_ bv1 32))))
 (=> $x634 (= ?x665 ?x649)))))))
 ))
 (let (($x444 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x71 (_ bv1 32))))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x587 (_ bv1 32))))
 (= $x634 $x222))))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x71 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x71 (_ bv0 32))))
 (let ((?x587 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x587 (_ bv0 32))))
 (= $x599 $x141))))))
 ))
 (let (($x237 (and $x321 $x608)))
 (let (($x528 (and $x237 $x444)))
 (let (($x706 (and $x528 $x433)))
 (let (($x303 (and $x706 $x558)))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x628 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x247 (_ bv1 32))))
 (=> $x373 (= ?x628 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x539 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x247 (_ bv1 32))))
 (= $x373 (bvuge ?x226 (_ bv1 32)))))))
 ))
 (let (($x517 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x247 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x247 (_ bv0 32))))
 (= $x209 (= ?x226 (_ bv0 32)))))))
 ))
 (let (($x616 (and $x517 $x198)))
 (let (($x236 (and $x616 $x539)))
 (let (($x11 (and $x236 $x398)))
 (let (($x645 (and $x11 $x303)))
 (let (($x738 (=> $x645 $x414)))
 (let (($x256 (not $x738)))
 (let (($x80 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x449 (select solver-mem_4 memmask-bounded-var!)))
 (let (($x396 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x598 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x436 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x550 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x494 (or false (or false (and (and true (or $x550 $x436)) (or $x598 $x396))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x494) (= ?x449 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x449 (_ bv0 8)))))))))))
 ))
 (and (and true $x80) $x256)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!3))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x140f2ab8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x510f0dec)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x510f0def)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x140f2abb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x510f0dec)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x140f2ab8)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1b000007) #x40
    (ite (= x!0 #x510f0dee) #x20
      #x00)))
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!9 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!9 (k!6 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!4 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!4 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!10 (k!6 x!0)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!4 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!4 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x704d05f2) #xaf
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!4 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!4 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!2))
              (= x!3 (_ as-array k!3))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x1b000005
      #x510f0def))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1b000007) #x40
      #x00))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x597 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x686)))
 (let ((?x602 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x597))))
 (let ((?x544 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv2 32))) ?x602)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv3 32))) ?x544)))
 (let ((?x205 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x692 (_ bv1 32))))
 (=> $x177 (= ?x205 ?x281)))))))))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x584 (_ bv1 32))))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x692 (_ bv1 32))))
 (= $x177 $x272))))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x677 (= false false)))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x692 (_ bv0 32))))
 (=> $x37 $x677)))))
 ))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x584 (_ bv0 32))))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x692 (_ bv0 32))))
 (= $x37 $x310))))))
 ))
 (let (($x174 (and $x572 $x213)))
 (let (($x316 (and $x174 $x261)))
 (let (($x500 (and $x316 $x491)))
 (let (($x298 (= $x500 true)))
 (let (($x105 (= $x298 true)))
 (let ((?x402 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x185 (bvneg ?x402)))
 (let (($x172 (= ?x185 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x593 (= $x172 true)))
 (let (($x275 (= $x593 true)))
 (let (($x64 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x686 input.dst.llvm-%m2)))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x292))))
 (let ((?x433 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x401 (_ bv1 32))))
 (=> $x321 (= ?x433 ?x12))))))))))
 ))
 (let (($x767 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x584 (_ bv1 32))))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x401 (_ bv1 32))))
 (= $x321 $x272))))))
 ))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x677 (= false false)))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x401 (_ bv0 32))))
 (=> $x198 $x677)))))
 ))
 (let (($x132 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x584 (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x401 (_ bv0 32))))
 (= $x198 $x310))))))
 ))
 (let (($x386 (and $x132 $x236)))
 (let (($x776 (and $x386 $x767)))
 (let (($x562 (and $x776 $x64)))
 (let (($x505 (= $x562 true)))
 (let (($x234 (= $x505 true)))
 (let (($x115 (= $x234 true)))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x266 (bvadd ?x686 input.dst.llvm-%m1)))
 (let ((?x617 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x416 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x617))))
 (let ((?x182 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x367 (_ bv1 32))))
 (=> $x329 (= ?x182 ?x416))))))))))
 ))
 (let (($x703 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x584 (_ bv1 32))))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x367 (_ bv1 32))))
 (= $x329 $x272))))))
 ))
 (let (($x668 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x677 (= false false)))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x367 (_ bv0 32))))
 (=> $x624 $x677)))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x584 (_ bv0 32))))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x367 (_ bv0 32))))
 (= $x624 $x310))))))
 ))
 (let (($x162 (and $x160 $x668)))
 (let (($x506 (and $x162 $x703)))
 (let (($x661 (and $x506 $x459)))
 (let (($x730 (= $x661 true)))
 (let (($x619 (= $x730 true)))
 (let (($x471 (= $x619 true)))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x266 (bvadd ?x686 input.dst.llvm-%m1)))
 (let ((?x573 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x266))))
 (let ((?x421 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv2 32))) ?x573)))
 (let ((?x578 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv3 32))) ?x421)))
 (let ((?x182 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x367 (_ bv1 32))))
 (=> $x329 (= ?x182 ?x578)))))))))))
 ))
 (let (($x679 (and $x506 $x375)))
 (let (($x579 (= $x679 true)))
 (let (($x82 (= $x579 true)))
 (let (($x445 (= $x82 true)))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x686 input.dst.llvm-%m2)))
 (let ((?x664 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x372 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x664)))
 (let ((?x420 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x372)))
 (let ((?x433 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x401 (_ bv1 32))))
 (=> $x321 (= ?x433 ?x420)))))))))))
 ))
 (let (($x278 (and $x776 $x43)))
 (let (($x288 (= $x278 true)))
 (let (($x714 (= $x288 true)))
 (let (($x627 (= $x714 true)))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x266 (bvadd ?x686 input.dst.llvm-%m1)))
 (let ((?x617 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x416 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x617))))
 (let ((?x205 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x692 (_ bv1 32))))
 (=> $x177 (= ?x205 ?x416))))))))))
 ))
 (let (($x318 (and $x316 $x251)))
 (let (($x294 (= $x318 true)))
 (let (($x381 (= $x294 true)))
 (let (($x325 (= $x381 true)))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x266 (bvadd ?x686 input.dst.llvm-%m1)))
 (let ((?x573 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x266))))
 (let ((?x421 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv2 32))) ?x573)))
 (let ((?x578 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv3 32))) ?x421)))
 (let ((?x205 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x692 (_ bv1 32))))
 (=> $x177 (= ?x205 ?x578)))))))))))
 ))
 (let (($x410 (and $x316 $x173)))
 (let (($x554 (= $x410 true)))
 (let (($x646 (= $x554 true)))
 (let (($x385 (= $x646 true)))
 (let ((?x521 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x138 (= (_ bv0 32) ?x521)))
 (let ((?x681 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x248 (= (_ bv0 32) ?x681)))
 (let ((?x317 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x317)))
 (let ((?x442 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x583 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x442)))
 (let (($x635 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x720 (and $x635 $x583)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x530 (and $x309 $x720)))
 (let (($x507 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x566 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x685 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x432 (and $x685 $x566)))
 (let (($x147 (not $x432)))
 (let (($x737 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x613 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x613 $x737)))
 (let (($x189 (and (not $x54) $x147)))
 (let (($x395 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x719 (and $x46 $x395)))
 (let (($x434 (not $x719)))
 (let (($x423 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x659 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x463 (and $x659 $x423)))
 (let (($x125 (and (not $x463) $x434)))
 (let (($x262 (and (and (and (and (and (and $x125 $x189) $x305) $x507) $x530) $x78) $x248)))
 (let (($x400 (and $x262 $x138)))
 (let (($x274 (= $x400 true)))
 (let (($x532 (= $x274 true)))
 (let (($x496 (= $x532 true)))
 (let ((?x194 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x516 (= (_ bv0 2) ?x194)))
 (let (($x383 (= $x516 true)))
 (let (($x207 (= $x383 true)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x451 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x406 (and $x451 $x83)))
 (let (($x81 (= $x406 true)))
 (let (($x301 (= $x81 true)))
 (let (($x119 (= $x301 true)))
 (let (($x120 (= ?x185 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x413 (= $x120 true)))
 (let (($x76 (= $x413 true)))
 (let (($x332 (and $x76 $x119)))
 (let (($x10 (and $x332 $x207)))
 (let (($x418 (and $x10 $x496)))
 (let (($x124 (and $x418 $x385)))
 (let (($x339 (and $x124 $x325)))
 (let (($x152 (and $x339 $x627)))
 (let (($x518 (and $x152 $x445)))
 (let (($x91 (and $x518 $x471)))
 (let (($x176 (and $x91 $x115)))
 (let (($x609 (and $x176 $x275)))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x182 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x367 (_ bv1 32))))
 (=> $x329 (= ?x182 ?x205)))))))
 ))
 (let (($x595 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x692 (_ bv1 32))))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x367 (_ bv1 32))))
 (= $x329 $x177))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x692 (_ bv0 32))))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x367 (_ bv0 32))))
 (= $x624 $x37))))))
 ))
 (let (($x243 (and $x233 $x668)))
 (let (($x335 (and $x243 $x595)))
 (let (($x531 (and $x335 $x178)))
 (let (($x150 (and $x531 $x609)))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x401 (_ bv1 32))))
 (=> $x321 (= ?x433 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x608 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x468 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x401 (_ bv1 32))))
 (= $x321 (bvuge ?x468 (_ bv1 32)))))))
 ))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x468 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x401 (_ bv0 32))))
 (= $x198 (= ?x468 (_ bv0 32)))))))
 ))
 (let (($x628 (and $x373 $x236)))
 (let (($x237 (and $x628 $x608)))
 (let (($x487 (and $x237 $x116)))
 (let (($x388 (and $x487 $x150)))
 (let (($x102 (=> $x388 $x105)))
 (not $x102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x597 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x686)))
 (let ((?x602 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x597))))
 (let ((?x544 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv2 32))) ?x602)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv3 32))) ?x544)))
 (let ((?x205 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x692 (_ bv1 32))))
 (=> $x177 (= ?x205 ?x281)))))))))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x584 (_ bv1 32))))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x692 (_ bv1 32))))
 (= $x177 $x272))))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x677 (= false false)))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x692 (_ bv0 32))))
 (=> $x37 $x677)))))
 ))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x584 (_ bv0 32))))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x692 (_ bv0 32))))
 (= $x37 $x310))))))
 ))
 (let (($x174 (and $x572 $x213)))
 (let (($x316 (and $x174 $x261)))
 (let (($x500 (and $x316 $x491)))
 (let (($x298 (= $x500 true)))
 (let (($x105 (= $x298 true)))
 (let ((?x402 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x185 (bvneg ?x402)))
 (let (($x172 (= ?x185 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x593 (= $x172 true)))
 (let (($x275 (= $x593 true)))
 (let (($x64 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x686 input.dst.llvm-%m2)))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x292))))
 (let ((?x433 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x401 (_ bv1 32))))
 (=> $x321 (= ?x433 ?x12))))))))))
 ))
 (let (($x767 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x584 (_ bv1 32))))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x401 (_ bv1 32))))
 (= $x321 $x272))))))
 ))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x677 (= false false)))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x401 (_ bv0 32))))
 (=> $x198 $x677)))))
 ))
 (let (($x132 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x584 (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x401 (_ bv0 32))))
 (= $x198 $x310))))))
 ))
 (let (($x386 (and $x132 $x236)))
 (let (($x776 (and $x386 $x767)))
 (let (($x562 (and $x776 $x64)))
 (let (($x505 (= $x562 true)))
 (let (($x234 (= $x505 true)))
 (let (($x115 (= $x234 true)))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x266 (bvadd ?x686 input.dst.llvm-%m1)))
 (let ((?x617 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x416 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x617))))
 (let ((?x182 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x367 (_ bv1 32))))
 (=> $x329 (= ?x182 ?x416))))))))))
 ))
 (let (($x703 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x584 (_ bv1 32))))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x367 (_ bv1 32))))
 (= $x329 $x272))))))
 ))
 (let (($x668 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x677 (= false false)))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x367 (_ bv0 32))))
 (=> $x624 $x677)))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x584 (_ bv0 32))))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x367 (_ bv0 32))))
 (= $x624 $x310))))))
 ))
 (let (($x162 (and $x160 $x668)))
 (let (($x506 (and $x162 $x703)))
 (let (($x661 (and $x506 $x459)))
 (let (($x730 (= $x661 true)))
 (let (($x619 (= $x730 true)))
 (let (($x471 (= $x619 true)))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x266 (bvadd ?x686 input.dst.llvm-%m1)))
 (let ((?x573 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x266))))
 (let ((?x421 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv2 32))) ?x573)))
 (let ((?x578 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv3 32))) ?x421)))
 (let ((?x182 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x367 (_ bv1 32))))
 (=> $x329 (= ?x182 ?x578)))))))))))
 ))
 (let (($x679 (and $x506 $x375)))
 (let (($x579 (= $x679 true)))
 (let (($x82 (= $x579 true)))
 (let (($x445 (= $x82 true)))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x686 input.dst.llvm-%m2)))
 (let ((?x664 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x372 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x664)))
 (let ((?x420 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x372)))
 (let ((?x433 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x401 (_ bv1 32))))
 (=> $x321 (= ?x433 ?x420)))))))))))
 ))
 (let (($x278 (and $x776 $x43)))
 (let (($x288 (= $x278 true)))
 (let (($x714 (= $x288 true)))
 (let (($x627 (= $x714 true)))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x266 (bvadd ?x686 input.dst.llvm-%m1)))
 (let ((?x617 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x416 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x617))))
 (let ((?x205 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x692 (_ bv1 32))))
 (=> $x177 (= ?x205 ?x416))))))))))
 ))
 (let (($x318 (and $x316 $x251)))
 (let (($x294 (= $x318 true)))
 (let (($x381 (= $x294 true)))
 (let (($x325 (= $x381 true)))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x686 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x266 (bvadd ?x686 input.dst.llvm-%m1)))
 (let ((?x573 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x266))))
 (let ((?x421 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv2 32))) ?x573)))
 (let ((?x578 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x266 (_ bv3 32))) ?x421)))
 (let ((?x205 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x692 (_ bv1 32))))
 (=> $x177 (= ?x205 ?x578)))))))))))
 ))
 (let (($x410 (and $x316 $x173)))
 (let (($x554 (= $x410 true)))
 (let (($x646 (= $x554 true)))
 (let (($x385 (= $x646 true)))
 (let ((?x521 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x138 (= (_ bv0 32) ?x521)))
 (let ((?x681 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x248 (= (_ bv0 32) ?x681)))
 (let ((?x317 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x317)))
 (let ((?x442 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x583 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x442)))
 (let (($x635 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x720 (and $x635 $x583)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x530 (and $x309 $x720)))
 (let (($x507 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x566 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x685 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x432 (and $x685 $x566)))
 (let (($x147 (not $x432)))
 (let (($x737 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x613 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x613 $x737)))
 (let (($x189 (and (not $x54) $x147)))
 (let (($x395 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x719 (and $x46 $x395)))
 (let (($x434 (not $x719)))
 (let (($x423 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x659 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x463 (and $x659 $x423)))
 (let (($x125 (and (not $x463) $x434)))
 (let (($x262 (and (and (and (and (and (and $x125 $x189) $x305) $x507) $x530) $x78) $x248)))
 (let (($x400 (and $x262 $x138)))
 (let (($x274 (= $x400 true)))
 (let (($x532 (= $x274 true)))
 (let (($x496 (= $x532 true)))
 (let ((?x194 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x516 (= (_ bv0 2) ?x194)))
 (let (($x383 (= $x516 true)))
 (let (($x207 (= $x383 true)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x451 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x406 (and $x451 $x83)))
 (let (($x81 (= $x406 true)))
 (let (($x301 (= $x81 true)))
 (let (($x119 (= $x301 true)))
 (let (($x120 (= ?x185 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x413 (= $x120 true)))
 (let (($x76 (= $x413 true)))
 (let (($x332 (and $x76 $x119)))
 (let (($x10 (and $x332 $x207)))
 (let (($x418 (and $x10 $x496)))
 (let (($x124 (and $x418 $x385)))
 (let (($x339 (and $x124 $x325)))
 (let (($x152 (and $x339 $x627)))
 (let (($x518 (and $x152 $x445)))
 (let (($x91 (and $x518 $x471)))
 (let (($x176 (and $x91 $x115)))
 (let (($x609 (and $x176 $x275)))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x182 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x367 (_ bv1 32))))
 (=> $x329 (= ?x182 ?x205)))))))
 ))
 (let (($x595 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x692 (_ bv1 32))))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x367 (_ bv1 32))))
 (= $x329 $x177))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x692 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x692 (_ bv0 32))))
 (let ((?x367 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x367 (_ bv0 32))))
 (= $x624 $x37))))))
 ))
 (let (($x243 (and $x233 $x668)))
 (let (($x335 (and $x243 $x595)))
 (let (($x531 (and $x335 $x178)))
 (let (($x150 (and $x531 $x609)))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x433 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x401 (_ bv1 32))))
 (=> $x321 (= ?x433 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x608 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x468 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x401 (_ bv1 32))))
 (= $x321 (bvuge ?x468 (_ bv1 32)))))))
 ))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x468 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x401 (_ bv0 32))))
 (= $x198 (= ?x468 (_ bv0 32)))))))
 ))
 (let (($x628 (and $x373 $x236)))
 (let (($x237 (and $x628 $x608)))
 (let (($x487 (and $x237 $x116)))
 (let (($x388 (and $x487 $x150)))
 (let (($x102 (=> $x388 $x105)))
 (not $x102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0642024c)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0486462b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0642024f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0642024c)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!45))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!46))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdfb56944)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdfb56947)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe0db347b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdfb56944)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0000007) #x20
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!50 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!50 (k!47 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!51 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!51 (k!47 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!49 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!49 (k!48 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x502 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x726)))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x502 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x502))))
 (let ((?x466 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x502 (_ bv2 32))) ?x324)))
 (let ((?x540 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x502 (_ bv3 32))) ?x466)))
 (let ((?x424 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (=> $x83 (= ?x424 ?x540)))))))))))
 ))
 (let (($x187 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x754 (_ bv1 32))))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (= $x83 $x345))))))
 ))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x271 (= false false)))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x335 (_ bv0 32))))
 (=> $x182 $x271)))))
 ))
 (let (($x190 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x754 (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x335 (_ bv0 32))))
 (= $x182 $x755))))))
 ))
 (let (($x577 (and $x190 $x98)))
 (let (($x118 (and $x577 $x187)))
 (let (($x282 (and $x118 $x376)))
 (let (($x581 (= $x282 true)))
 (let (($x145 (= $x581 true)))
 (let ((?x410 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x554 (bvneg ?x410)))
 (let (($x773 (= ?x554 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x768 (= $x773 true)))
 (let (($x370 (= $x768 true)))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x726 input.dst.llvm-%m2)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem ?x655))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv2 32))) ?x48))))
 (let ((?x424 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (=> $x83 (= ?x424 ?x106))))))))))
 ))
 (let (($x591 (and $x118 $x557)))
 (let (($x641 (= $x591 true)))
 (let (($x314 (= $x641 true)))
 (let (($x770 (= $x314 true)))
 (let (($x476 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem ?x728))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv2 32))) ?x712))))
 (let ((?x419 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x521 (_ bv1 32))))
 (=> $x261 (= ?x419 ?x220))))))))))
 ))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x754 (_ bv1 32))))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x521 (_ bv1 32))))
 (= $x261 $x345))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x271 (= false false)))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x521 (_ bv0 32))))
 (=> $x138 $x271)))))
 ))
 (let (($x512 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x754 (_ bv0 32))))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x521 (_ bv0 32))))
 (= $x138 $x755))))))
 ))
 (let (($x389 (and $x512 $x418)))
 (let (($x549 (and $x389 $x497)))
 (let (($x606 (and $x549 $x476)))
 (let (($x38 (= $x606 true)))
 (let (($x235 (= $x38 true)))
 (let (($x669 (= $x235 true)))
 (let (($x596 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x422 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x728))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x422)))
 (let ((?x242 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x136)))
 (let ((?x419 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x521 (_ bv1 32))))
 (=> $x261 (= ?x419 ?x242)))))))))))
 ))
 (let (($x503 (and $x549 $x596)))
 (let (($x17 (= $x503 true)))
 (let (($x218 (= $x17 true)))
 (let (($x700 (= $x218 true)))
 (let (($x662 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x726 input.dst.llvm-%m2)))
 (let ((?x599 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x655))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv2 32))) ?x599)))
 (let ((?x649 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv3 32))) ?x30)))
 (let ((?x424 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (=> $x83 (= ?x424 ?x649)))))))))))
 ))
 (let (($x326 (and $x118 $x662)))
 (let (($x718 (= $x326 true)))
 (let (($x108 (= $x718 true)))
 (let (($x430 (= $x108 true)))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem ?x728))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv2 32))) ?x712))))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x681 (_ bv1 32))))
 (=> $x322 (= ?x479 ?x220))))))))))
 ))
 (let (($x357 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x754 (_ bv1 32))))
 (let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x681 (_ bv1 32))))
 (= $x322 $x345))))))
 ))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x271 (= false false)))
 (let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x681 (_ bv0 32))))
 (=> $x248 $x271)))))
 ))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x754 (_ bv0 32))))
 (let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x681 (_ bv0 32))))
 (= $x248 $x755))))))
 ))
 (let (($x142 (and $x201 $x29)))
 (let (($x133 (and $x142 $x357)))
 (let (($x175 (and $x133 $x529)))
 (let (($x41 (= $x175 true)))
 (let (($x534 (= $x41 true)))
 (let (($x195 (= $x534 true)))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x422 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x728))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x422)))
 (let ((?x242 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x136)))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x681 (_ bv1 32))))
 (=> $x322 (= ?x479 ?x242)))))))))))
 ))
 (let (($x678 (and $x133 $x403)))
 (let (($x311 (= $x678 true)))
 (let (($x684 (= $x311 true)))
 (let (($x523 (= $x684 true)))
 (let ((?x359 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x459 (= (_ bv0 32) ?x359)))
 (let ((?x518 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x470 (= (_ bv0 32) ?x518)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x72 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x375 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x506 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x679 (and $x506 $x375)))
 (let (($x703 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x579 (and $x703 $x679)))
 (let (($x501 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x43 $x278)))
 (let (($x714 (not $x288)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x420 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x455 (and $x420 $x193)))
 (let (($x152 (and (not $x455) $x714)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x378 (and $x153 $x304)))
 (let (($x258 (not $x378)))
 (let (($x642 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x776 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x524 (and $x776 $x642)))
 (let (($x372 (and (not $x524) $x258)))
 (let (($x674 (and (and (and (and (and (and $x372 $x152) $x160) $x501) $x579) $x445) $x470)))
 (let (($x90 (and $x674 $x459)))
 (let (($x462 (= $x90 true)))
 (let (($x250 (= $x462 true)))
 (let (($x292 (= $x250 true)))
 (let ((?x325 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x339 (= (_ bv0 2) ?x325)))
 (let (($x308 (= $x339 true)))
 (let (($x132 (= $x308 true)))
 (let (($x416 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x548 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x704 (and $x548 $x416)))
 (let (($x708 (= $x704 true)))
 (let (($x251 (= $x708 true)))
 (let (($x318 (= $x251 true)))
 (let (($x385 (= ?x554 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x124 (= $x385 true)))
 (let (($x590 (= $x124 true)))
 (let (($x294 (and $x590 $x318)))
 (let (($x386 (and $x294 $x132)))
 (let (($x214 (and $x386 $x292)))
 (let (($x594 (and $x214 $x523)))
 (let (($x109 (and $x594 $x195)))
 (let (($x89 (and $x109 $x430)))
 (let (($x431 (and $x89 $x700)))
 (let (($x467 (and $x431 $x669)))
 (let (($x374 (and $x467 $x770)))
 (let (($x771 (and $x374 $x370)))
 (let (($x578 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x419 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x521 (_ bv1 32))))
 (=> $x261 (= ?x419 ?x479)))))))
 ))
 (let (($x67 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x681 (_ bv1 32))))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x521 (_ bv1 32))))
 (= $x261 $x322))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x681 (_ bv0 32))))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x521 (_ bv0 32))))
 (= $x138 $x248))))))
 ))
 (let (($x66 (and $x274 $x418)))
 (let (($x238 (and $x66 $x67)))
 (let (($x338 (and $x238 $x578)))
 (let (($x775 (and $x338 $x771)))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (=> $x83 (= ?x424 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x81 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (= $x83 (bvuge ?x177 (_ bv1 32)))))))
 ))
 (let (($x698 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x335 (_ bv0 32))))
 (= $x182 (= ?x177 (_ bv0 32)))))))
 ))
 (let (($x446 (and $x698 $x98)))
 (let (($x301 (and $x446 $x81)))
 (let (($x463 (and $x301 $x423)))
 (let (($x774 (and $x463 $x775)))
 (let (($x159 (=> $x774 $x145)))
 (not $x159)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x502 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x726)))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x502 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x502))))
 (let ((?x466 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x502 (_ bv2 32))) ?x324)))
 (let ((?x540 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x502 (_ bv3 32))) ?x466)))
 (let ((?x424 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (=> $x83 (= ?x424 ?x540)))))))))))
 ))
 (let (($x187 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x754 (_ bv1 32))))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (= $x83 $x345))))))
 ))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x271 (= false false)))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x335 (_ bv0 32))))
 (=> $x182 $x271)))))
 ))
 (let (($x190 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x754 (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x335 (_ bv0 32))))
 (= $x182 $x755))))))
 ))
 (let (($x577 (and $x190 $x98)))
 (let (($x118 (and $x577 $x187)))
 (let (($x282 (and $x118 $x376)))
 (let (($x581 (= $x282 true)))
 (let (($x145 (= $x581 true)))
 (let ((?x410 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x554 (bvneg ?x410)))
 (let (($x773 (= ?x554 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x768 (= $x773 true)))
 (let (($x370 (= $x768 true)))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x726 input.dst.llvm-%m2)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem ?x655))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv2 32))) ?x48))))
 (let ((?x424 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (=> $x83 (= ?x424 ?x106))))))))))
 ))
 (let (($x591 (and $x118 $x557)))
 (let (($x641 (= $x591 true)))
 (let (($x314 (= $x641 true)))
 (let (($x770 (= $x314 true)))
 (let (($x476 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem ?x728))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv2 32))) ?x712))))
 (let ((?x419 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x521 (_ bv1 32))))
 (=> $x261 (= ?x419 ?x220))))))))))
 ))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x754 (_ bv1 32))))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x521 (_ bv1 32))))
 (= $x261 $x345))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x271 (= false false)))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x521 (_ bv0 32))))
 (=> $x138 $x271)))))
 ))
 (let (($x512 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x754 (_ bv0 32))))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x521 (_ bv0 32))))
 (= $x138 $x755))))))
 ))
 (let (($x389 (and $x512 $x418)))
 (let (($x549 (and $x389 $x497)))
 (let (($x606 (and $x549 $x476)))
 (let (($x38 (= $x606 true)))
 (let (($x235 (= $x38 true)))
 (let (($x669 (= $x235 true)))
 (let (($x596 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x422 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x728))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x422)))
 (let ((?x242 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x136)))
 (let ((?x419 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x521 (_ bv1 32))))
 (=> $x261 (= ?x419 ?x242)))))))))))
 ))
 (let (($x503 (and $x549 $x596)))
 (let (($x17 (= $x503 true)))
 (let (($x218 (= $x17 true)))
 (let (($x700 (= $x218 true)))
 (let (($x662 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x726 input.dst.llvm-%m2)))
 (let ((?x599 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x655))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv2 32))) ?x599)))
 (let ((?x649 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv3 32))) ?x30)))
 (let ((?x424 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (=> $x83 (= ?x424 ?x649)))))))))))
 ))
 (let (($x326 (and $x118 $x662)))
 (let (($x718 (= $x326 true)))
 (let (($x108 (= $x718 true)))
 (let (($x430 (= $x108 true)))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem ?x728))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv2 32))) ?x712))))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x681 (_ bv1 32))))
 (=> $x322 (= ?x479 ?x220))))))))))
 ))
 (let (($x357 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x754 (_ bv1 32))))
 (let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x681 (_ bv1 32))))
 (= $x322 $x345))))))
 ))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x271 (= false false)))
 (let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x681 (_ bv0 32))))
 (=> $x248 $x271)))))
 ))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x754 (_ bv0 32))))
 (let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x681 (_ bv0 32))))
 (= $x248 $x755))))))
 ))
 (let (($x142 (and $x201 $x29)))
 (let (($x133 (and $x142 $x357)))
 (let (($x175 (and $x133 $x529)))
 (let (($x41 (= $x175 true)))
 (let (($x534 (= $x41 true)))
 (let (($x195 (= $x534 true)))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x726 input.dst.llvm-%m1)))
 (let ((?x422 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x728))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x422)))
 (let ((?x242 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x136)))
 (let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x681 (_ bv1 32))))
 (=> $x322 (= ?x479 ?x242)))))))))))
 ))
 (let (($x678 (and $x133 $x403)))
 (let (($x311 (= $x678 true)))
 (let (($x684 (= $x311 true)))
 (let (($x523 (= $x684 true)))
 (let ((?x359 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x459 (= (_ bv0 32) ?x359)))
 (let ((?x518 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x470 (= (_ bv0 32) ?x518)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x72 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x375 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x506 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x679 (and $x506 $x375)))
 (let (($x703 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x579 (and $x703 $x679)))
 (let (($x501 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x43 $x278)))
 (let (($x714 (not $x288)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x420 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x455 (and $x420 $x193)))
 (let (($x152 (and (not $x455) $x714)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x378 (and $x153 $x304)))
 (let (($x258 (not $x378)))
 (let (($x642 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x776 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x524 (and $x776 $x642)))
 (let (($x372 (and (not $x524) $x258)))
 (let (($x674 (and (and (and (and (and (and $x372 $x152) $x160) $x501) $x579) $x445) $x470)))
 (let (($x90 (and $x674 $x459)))
 (let (($x462 (= $x90 true)))
 (let (($x250 (= $x462 true)))
 (let (($x292 (= $x250 true)))
 (let ((?x325 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x339 (= (_ bv0 2) ?x325)))
 (let (($x308 (= $x339 true)))
 (let (($x132 (= $x308 true)))
 (let (($x416 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x548 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x704 (and $x548 $x416)))
 (let (($x708 (= $x704 true)))
 (let (($x251 (= $x708 true)))
 (let (($x318 (= $x251 true)))
 (let (($x385 (= ?x554 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x124 (= $x385 true)))
 (let (($x590 (= $x124 true)))
 (let (($x294 (and $x590 $x318)))
 (let (($x386 (and $x294 $x132)))
 (let (($x214 (and $x386 $x292)))
 (let (($x594 (and $x214 $x523)))
 (let (($x109 (and $x594 $x195)))
 (let (($x89 (and $x109 $x430)))
 (let (($x431 (and $x89 $x700)))
 (let (($x467 (and $x431 $x669)))
 (let (($x374 (and $x467 $x770)))
 (let (($x771 (and $x374 $x370)))
 (let (($x578 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x419 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x521 (_ bv1 32))))
 (=> $x261 (= ?x419 ?x479)))))))
 ))
 (let (($x67 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x681 (_ bv1 32))))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x521 (_ bv1 32))))
 (= $x261 $x322))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x681 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x681 (_ bv0 32))))
 (let ((?x521 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x521 (_ bv0 32))))
 (= $x138 $x248))))))
 ))
 (let (($x66 (and $x274 $x418)))
 (let (($x238 (and $x66 $x67)))
 (let (($x338 (and $x238 $x578)))
 (let (($x775 (and $x338 $x771)))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (=> $x83 (= ?x424 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x81 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x335 (_ bv1 32))))
 (= $x83 (bvuge ?x177 (_ bv1 32)))))))
 ))
 (let (($x698 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x335 (_ bv0 32))))
 (= $x182 (= ?x177 (_ bv0 32)))))))
 ))
 (let (($x446 (and $x698 $x98)))
 (let (($x301 (and $x446 $x81)))
 (let (($x463 (and $x301 $x423)))
 (let (($x774 (and $x463 $x775)))
 (let (($x159 (=> $x774 $x145)))
 (not $x159)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18421404)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x14041413)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18421407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18421404)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09800000) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xedaa0100)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x438c0454)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xdf7dc9a8)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xdf7dc9a8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x438c0457)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xedaa0103)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x438c0454)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xedaa0100)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xdf7dc9a8)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000013) #x02
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!24 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000013) #x02
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x347 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x114)))
 (let ((?x269 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x347 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x347))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x347 (_ bv2 32))) ?x269)))
 (let ((?x552 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x347 (_ bv3 32))) ?x337)))
 (let ((?x277 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (=> $x357 (= ?x277 ?x552)))))))))))
 ))
 (let (($x103 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x456 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (= $x357 $x344))))))
 ))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x421 (= false false)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x359 (_ bv0 32))))
 (=> $x459 $x421)))))
 ))
 (let (($x229 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x456 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x359 (_ bv0 32))))
 (= $x459 $x230))))))
 ))
 (let (($x633 (and $x229 $x214)))
 (let (($x453 (and $x633 $x103)))
 (let (($x368 (and $x453 $x111)))
 (let (($x607 (= $x368 true)))
 (let (($x543 (= $x607 true)))
 (let ((?x678 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x311 (bvneg ?x678)))
 (let (($x204 (= ?x311 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x273 (= $x204 true)))
 (let (($x99 (= $x273 true)))
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x668 (bvadd ?x114 input.dst.llvm-%m2)))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv1 32))) (select input.dst.llvm-mem ?x668))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv2 32))) ?x394))))
 (let ((?x767 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x238 (_ bv1 32))))
 (=> $x416 (= ?x767 ?x365))))))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x456 (_ bv1 32))))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x238 (_ bv1 32))))
 (= $x416 $x344))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x421 (= false false)))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (= ?x238 (_ bv0 32))))
 (=> $x419 $x421)))))
 ))
 (let (($x530 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x456 (_ bv0 32))))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (= ?x238 (_ bv0 32))))
 (= $x419 $x230))))))
 ))
 (let (($x631 (and $x530 $x85)))
 (let (($x156 (and $x631 $x23)))
 (let (($x528 (and $x156 $x611)))
 (let (($x508 (= $x528 true)))
 (let (($x263 (= $x508 true)))
 (let (($x171 (= $x263 true)))
 (let (($x537 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x33 (bvadd ?x114 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x208))))
 (let ((?x277 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (=> $x357 (= ?x277 ?x62))))))))))
 ))
 (let (($x651 (and $x453 $x537)))
 (let (($x363 (= $x651 true)))
 (let (($x602 (= $x363 true)))
 (let (($x169 (= $x602 true)))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x33 (bvadd ?x114 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x33))))
 (let ((?x613 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv2 32))) ?x319)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv3 32))) ?x613)))
 (let ((?x277 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (=> $x357 (= ?x277 ?x125)))))))))))
 ))
 (let (($x398 (and $x453 $x21)))
 (let (($x478 (= $x398 true)))
 (let (($x761 (= $x478 true)))
 (let (($x634 (= $x761 true)))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x668 (bvadd ?x114 input.dst.llvm-%m2)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x668))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv2 32))) ?x184)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv3 32))) ?x260)))
 (let ((?x767 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x238 (_ bv1 32))))
 (=> $x416 (= ?x767 ?x207)))))))))))
 ))
 (let (($x533 (and $x156 $x556)))
 (let (($x28 (= $x533 true)))
 (let (($x284 (= $x28 true)))
 (let (($x49 (= $x284 true)))
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x33 (bvadd ?x114 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x208))))
 (let ((?x637 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x518 (_ bv1 32))))
 (=> $x486 (= ?x637 ?x62))))))))))
 ))
 (let (($x597 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x456 (_ bv1 32))))
 (let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x518 (_ bv1 32))))
 (= $x486 $x344))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x421 (= false false)))
 (let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (= ?x518 (_ bv0 32))))
 (=> $x470 $x421)))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x456 (_ bv0 32))))
 (let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (= ?x518 (_ bv0 32))))
 (= $x470 $x230))))))
 ))
 (let (($x14 (and $x303 $x448)))
 (let (($x748 (and $x14 $x597)))
 (let (($x366 (and $x748 $x570)))
 (let (($x738 (= $x366 true)))
 (let (($x346 (= $x738 true)))
 (let (($x519 (= $x346 true)))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x33 (bvadd ?x114 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x33))))
 (let ((?x613 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv2 32))) ?x319)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv3 32))) ?x613)))
 (let ((?x637 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x518 (_ bv1 32))))
 (=> $x486 (= ?x637 ?x125)))))))))))
 ))
 (let (($x685 (and $x748 $x74)))
 (let (($x566 (= $x685 true)))
 (let (($x110 (= $x566 true)))
 (let (($x256 (= $x110 true)))
 (let ((?x747 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x476 (= (_ bv0 32) ?x747)))
 (let ((?x431 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x443 (= (_ bv0 32) ?x431)))
 (let ((?x218 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x700 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x515 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x596 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x515)))
 (let (($x549 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x503 (and $x549 $x596)))
 (let (($x497 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x497 $x503)))
 (let (($x75 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x512 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x326 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x662 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x718 (and $x662 $x326)))
 (let (($x108 (not $x718)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x649 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x408 (and $x649 $x35)))
 (let (($x89 (and (not $x408) $x108)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x587 (and $x141 $x7)))
 (let (($x11 (not $x587)))
 (let (($x444 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x665 (and $x118 $x444)))
 (let (($x30 (and (not $x665) $x11)))
 (let (($x504 (and (and (and (and (and (and $x30 $x89) $x512) $x75) $x17) $x700) $x443)))
 (let (($x510 (and $x504 $x476)))
 (let (($x287 (= $x510 true)))
 (let (($x253 (= $x287 true)))
 (let (($x48 (= $x253 true)))
 (let ((?x195 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x109 (= (_ bv0 2) ?x195)))
 (let (($x69 (= $x109 true)))
 (let (($x190 (= $x69 true)))
 (let (($x220 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x435 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x715 (and $x435 $x220)))
 (let (($x290 (= $x715 true)))
 (let (($x529 (= $x290 true)))
 (let (($x175 (= $x529 true)))
 (let (($x523 (= ?x311 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x594 (= $x523 true)))
 (let (($x731 (= $x594 true)))
 (let (($x41 (and $x731 $x175)))
 (let (($x577 (and $x41 $x190)))
 (let (($x764 (and $x577 $x48)))
 (let (($x717 (and $x764 $x256)))
 (let (($x542 (and $x717 $x519)))
 (let (($x658 (and $x542 $x49)))
 (let (($x693 (and $x658 $x634)))
 (let (($x544 (and $x693 $x169)))
 (let (($x164 (and $x544 $x171)))
 (let (($x97 (and $x164 $x99)))
 (let (($x242 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x637 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x277 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (=> $x357 (= ?x277 ?x637)))))))
 ))
 (let (($x505 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x518 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (= $x357 $x486))))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (= ?x518 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x359 (_ bv0 32))))
 (= $x459 $x470))))))
 ))
 (let (($x753 (and $x462 $x214)))
 (let (($x176 (and $x753 $x505)))
 (let (($x239 (and $x176 $x242)))
 (let (($x493 (and $x239 $x97)))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x767 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x238 (_ bv1 32))))
 (=> $x416 (= ?x767 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x708 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x322 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x238 (_ bv1 32))))
 (= $x416 (bvuge ?x322 (_ bv1 32)))))))
 ))
 (let (($x573 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x322 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (= ?x238 (_ bv0 32))))
 (= $x419 (= ?x322 (_ bv0 32)))))))
 ))
 (let (($x173 (and $x573 $x85)))
 (let (($x251 (and $x173 $x708)))
 (let (($x524 (and $x251 $x642)))
 (let (($x571 (and $x524 $x493)))
 (let (($x699 (=> $x571 $x543)))
 (not $x699)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x347 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x114)))
 (let ((?x269 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x347 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x347))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x347 (_ bv2 32))) ?x269)))
 (let ((?x552 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x347 (_ bv3 32))) ?x337)))
 (let ((?x277 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (=> $x357 (= ?x277 ?x552)))))))))))
 ))
 (let (($x103 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x456 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (= $x357 $x344))))))
 ))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x421 (= false false)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x359 (_ bv0 32))))
 (=> $x459 $x421)))))
 ))
 (let (($x229 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x456 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x359 (_ bv0 32))))
 (= $x459 $x230))))))
 ))
 (let (($x633 (and $x229 $x214)))
 (let (($x453 (and $x633 $x103)))
 (let (($x368 (and $x453 $x111)))
 (let (($x607 (= $x368 true)))
 (let (($x543 (= $x607 true)))
 (let ((?x678 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x311 (bvneg ?x678)))
 (let (($x204 (= ?x311 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x273 (= $x204 true)))
 (let (($x99 (= $x273 true)))
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x668 (bvadd ?x114 input.dst.llvm-%m2)))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv1 32))) (select input.dst.llvm-mem ?x668))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv2 32))) ?x394))))
 (let ((?x767 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x238 (_ bv1 32))))
 (=> $x416 (= ?x767 ?x365))))))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x456 (_ bv1 32))))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x238 (_ bv1 32))))
 (= $x416 $x344))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x421 (= false false)))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (= ?x238 (_ bv0 32))))
 (=> $x419 $x421)))))
 ))
 (let (($x530 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x456 (_ bv0 32))))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (= ?x238 (_ bv0 32))))
 (= $x419 $x230))))))
 ))
 (let (($x631 (and $x530 $x85)))
 (let (($x156 (and $x631 $x23)))
 (let (($x528 (and $x156 $x611)))
 (let (($x508 (= $x528 true)))
 (let (($x263 (= $x508 true)))
 (let (($x171 (= $x263 true)))
 (let (($x537 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x33 (bvadd ?x114 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x208))))
 (let ((?x277 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (=> $x357 (= ?x277 ?x62))))))))))
 ))
 (let (($x651 (and $x453 $x537)))
 (let (($x363 (= $x651 true)))
 (let (($x602 (= $x363 true)))
 (let (($x169 (= $x602 true)))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x33 (bvadd ?x114 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x33))))
 (let ((?x613 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv2 32))) ?x319)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv3 32))) ?x613)))
 (let ((?x277 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (=> $x357 (= ?x277 ?x125)))))))))))
 ))
 (let (($x398 (and $x453 $x21)))
 (let (($x478 (= $x398 true)))
 (let (($x761 (= $x478 true)))
 (let (($x634 (= $x761 true)))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x668 (bvadd ?x114 input.dst.llvm-%m2)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x668))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv2 32))) ?x184)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv3 32))) ?x260)))
 (let ((?x767 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x238 (_ bv1 32))))
 (=> $x416 (= ?x767 ?x207)))))))))))
 ))
 (let (($x533 (and $x156 $x556)))
 (let (($x28 (= $x533 true)))
 (let (($x284 (= $x28 true)))
 (let (($x49 (= $x284 true)))
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x33 (bvadd ?x114 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x208))))
 (let ((?x637 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x518 (_ bv1 32))))
 (=> $x486 (= ?x637 ?x62))))))))))
 ))
 (let (($x597 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x456 (_ bv1 32))))
 (let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x518 (_ bv1 32))))
 (= $x486 $x344))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x421 (= false false)))
 (let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (= ?x518 (_ bv0 32))))
 (=> $x470 $x421)))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x456 (_ bv0 32))))
 (let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (= ?x518 (_ bv0 32))))
 (= $x470 $x230))))))
 ))
 (let (($x14 (and $x303 $x448)))
 (let (($x748 (and $x14 $x597)))
 (let (($x366 (and $x748 $x570)))
 (let (($x738 (= $x366 true)))
 (let (($x346 (= $x738 true)))
 (let (($x519 (= $x346 true)))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x33 (bvadd ?x114 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x33))))
 (let ((?x613 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv2 32))) ?x319)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x33 (_ bv3 32))) ?x613)))
 (let ((?x637 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x518 (_ bv1 32))))
 (=> $x486 (= ?x637 ?x125)))))))))))
 ))
 (let (($x685 (and $x748 $x74)))
 (let (($x566 (= $x685 true)))
 (let (($x110 (= $x566 true)))
 (let (($x256 (= $x110 true)))
 (let ((?x747 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x476 (= (_ bv0 32) ?x747)))
 (let ((?x431 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x443 (= (_ bv0 32) ?x431)))
 (let ((?x218 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x700 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x515 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x596 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x515)))
 (let (($x549 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x503 (and $x549 $x596)))
 (let (($x497 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x497 $x503)))
 (let (($x75 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x512 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x326 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x662 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x718 (and $x662 $x326)))
 (let (($x108 (not $x718)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x649 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x408 (and $x649 $x35)))
 (let (($x89 (and (not $x408) $x108)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x587 (and $x141 $x7)))
 (let (($x11 (not $x587)))
 (let (($x444 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x665 (and $x118 $x444)))
 (let (($x30 (and (not $x665) $x11)))
 (let (($x504 (and (and (and (and (and (and $x30 $x89) $x512) $x75) $x17) $x700) $x443)))
 (let (($x510 (and $x504 $x476)))
 (let (($x287 (= $x510 true)))
 (let (($x253 (= $x287 true)))
 (let (($x48 (= $x253 true)))
 (let ((?x195 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x109 (= (_ bv0 2) ?x195)))
 (let (($x69 (= $x109 true)))
 (let (($x190 (= $x69 true)))
 (let (($x220 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x435 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x715 (and $x435 $x220)))
 (let (($x290 (= $x715 true)))
 (let (($x529 (= $x290 true)))
 (let (($x175 (= $x529 true)))
 (let (($x523 (= ?x311 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x594 (= $x523 true)))
 (let (($x731 (= $x594 true)))
 (let (($x41 (and $x731 $x175)))
 (let (($x577 (and $x41 $x190)))
 (let (($x764 (and $x577 $x48)))
 (let (($x717 (and $x764 $x256)))
 (let (($x542 (and $x717 $x519)))
 (let (($x658 (and $x542 $x49)))
 (let (($x693 (and $x658 $x634)))
 (let (($x544 (and $x693 $x169)))
 (let (($x164 (and $x544 $x171)))
 (let (($x97 (and $x164 $x99)))
 (let (($x242 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x637 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x277 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (=> $x357 (= ?x277 ?x637)))))))
 ))
 (let (($x505 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x518 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x359 (_ bv1 32))))
 (= $x357 $x486))))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x518 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (= ?x518 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x359 (_ bv0 32))))
 (= $x459 $x470))))))
 ))
 (let (($x753 (and $x462 $x214)))
 (let (($x176 (and $x753 $x505)))
 (let (($x239 (and $x176 $x242)))
 (let (($x493 (and $x239 $x97)))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x767 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x238 (_ bv1 32))))
 (=> $x416 (= ?x767 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x708 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x322 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x238 (_ bv1 32))))
 (= $x416 (bvuge ?x322 (_ bv1 32)))))))
 ))
 (let (($x573 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x322 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x238 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (= ?x238 (_ bv0 32))))
 (= $x419 (= ?x322 (_ bv0 32)))))))
 ))
 (let (($x173 (and $x573 $x85)))
 (let (($x251 (and $x173 $x708)))
 (let (($x524 (and $x251 $x642)))
 (let (($x571 (and $x524 $x493)))
 (let (($x699 (=> $x571 $x543)))
 (not $x699)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x20222904)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x10080640)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40103440)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x10080640)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40103443)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x20222907)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40103440)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x20222904)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x10080640)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000020))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x100806c3) #x01
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000020) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000020))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000020))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000020) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000020) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000020) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000041)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x87c04100)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6c600004)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6c600007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x87c04103)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6c600004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x87c04100)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000041 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000041)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!25 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x565 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x624 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_5 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x720 ?x624)))
 (let ((?x428 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x485))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv2 32))) ?x428)))
 (let ((?x551 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv3 32))) ?x212)))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (=> $x220 (= ?x187 ?x551))))))))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x491 (_ bv1 32))))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (= $x220 $x773))))))
 ))
 (let (($x749 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x136 (= false false)))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x277 (= ?x176 (_ bv0 32))))
 (=> $x277 $x136)))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (= ?x491 (_ bv0 32))))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x277 (= ?x176 (_ bv0 32))))
 (= $x277 $x298))))))
 ))
 (let (($x579 (and $x300 $x749)))
 (let (($x644 (and $x579 $x345)))
 (let (($x77 (and $x644 $x565)))
 (let (($x73 (= $x77 true)))
 (let (($x323 (= $x73 true)))
 (let ((?x507 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x144 (= (_ bv0 2) ?x507)))
 (let (($x309 (= $x144 true)))
 (let (($x317 (= $x309 true)))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x496 (bvadd ?x720 input.dst.llvm-%m2)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv1 32))) (select input.dst.llvm-mem ?x496))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv2 32))) ?x32))))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (=> $x220 (= ?x187 ?x244))))))))))
 ))
 (let (($x354 (and $x644 $x334)))
 (let (($x516 (= $x354 true)))
 (let (($x249 (= $x516 true)))
 (let (($x429 (= $x249 true)))
 (let (($x775 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x216 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x632 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x9))))
 (let ((?x675 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x597 (bvuge ?x747 (_ bv1 32))))
 (=> $x597 (= ?x675 ?x632))))))))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x491 (_ bv1 32))))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x597 (bvuge ?x747 (_ bv1 32))))
 (= $x597 $x773))))))
 ))
 (let (($x764 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x136 (= false false)))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x476 (= ?x747 (_ bv0 32))))
 (=> $x476 $x136)))))
 ))
 (let (($x588 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (= ?x491 (_ bv0 32))))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x476 (= ?x747 (_ bv0 32))))
 (= $x476 $x298))))))
 ))
 (let (($x37 (and $x588 $x764)))
 (let (($x313 (and $x37 $x185)))
 (let (($x36 (and $x313 $x775)))
 (let (($x742 (= $x36 true)))
 (let (($x477 (= $x742 true)))
 (let (($x324 (= $x477 true)))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x216 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x654 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x216))))
 (let ((?x511 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv2 32))) ?x654)))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv3 32))) ?x511)))
 (let ((?x675 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x597 (bvuge ?x747 (_ bv1 32))))
 (=> $x597 (= ?x675 ?x258)))))))))))
 ))
 (let (($x697 (and $x313 $x283)))
 (let (($x120 (= $x697 true)))
 (let (($x417 (= $x120 true)))
 (let (($x643 (= $x417 true)))
 (let (($x404 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x496 (bvadd ?x720 input.dst.llvm-%m2)))
 (let ((?x695 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x496 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x496))))
 (let ((?x617 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x496 (_ bv2 32))) ?x695)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x496 (_ bv3 32))) ?x617)))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (=> $x220 (= ?x187 ?x308)))))))))))
 ))
 (let (($x745 (and $x644 $x404)))
 (let (($x482 (= $x745 true)))
 (let (($x414 (= $x482 true)))
 (let (($x663 (= $x414 true)))
 (let (($x723 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x216 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x632 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x9))))
 (let ((?x18 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x431 (_ bv1 32))))
 (=> $x228 (= ?x18 ?x632))))))))))
 ))
 (let (($x45 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x491 (_ bv1 32))))
 (let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x431 (_ bv1 32))))
 (= $x228 $x773))))))
 ))
 (let (($x513 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x136 (= false false)))
 (let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x431 (_ bv0 32))))
 (=> $x443 $x136)))))
 ))
 (let (($x481 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (= ?x491 (_ bv0 32))))
 (let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x431 (_ bv0 32))))
 (= $x443 $x298))))))
 ))
 (let (($x107 (and $x481 $x513)))
 (let (($x502 (and $x107 $x45)))
 (let (($x713 (and $x502 $x723)))
 (let (($x721 (= $x713 true)))
 (let (($x259 (= $x721 true)))
 (let (($x384 (= $x259 true)))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x216 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x654 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x216))))
 (let ((?x511 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv2 32))) ?x654)))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv3 32))) ?x511)))
 (let ((?x18 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x431 (_ bv1 32))))
 (=> $x228 (= ?x18 ?x258)))))))))))
 ))
 (let (($x627 (and $x502 $x455)))
 (let (($x43 (= $x627 true)))
 (let (($x278 (= $x43 true)))
 (let (($x532 (= $x278 true)))
 (let (($x544 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x363 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x672 (and $x363 $x544)))
 (let (($x589 (= $x672 true)))
 (let (($x264 (= $x589 true)))
 (let (($x759 (= $x264 true)))
 (let ((?x633 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x92 (= (_ bv0 32) ?x633)))
 (let ((?x769 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x229 (= (_ bv0 32) ?x769)))
 (let ((?x49 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x658 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x556 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x533 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x556)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x28 (and $x10 $x533)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x284 (and $x207 $x28)))
 (let (($x260 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x413 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x668 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x383 (and $x668 $x194)))
 (let (($x451 (not $x383)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x272 $x23)))
 (let (($x76 (and (not $x156) $x451)))
 (let (($x519 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x346 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x542 (and $x346 $x519)))
 (let (($x440 (not $x542)))
 (let (($x570 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x366 (and $x134 $x570)))
 (let (($x631 (and (not $x366) $x440)))
 (let (($x398 (and (and (and (and (and (and $x631 $x76) $x413) $x260) $x284) $x658) $x229)))
 (let (($x478 (and $x398 $x92)))
 (let (($x761 (= $x478 true)))
 (let (($x634 (= $x761 true)))
 (let (($x693 (= $x634 true)))
 (let ((?x685 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x566 (bvneg ?x685)))
 (let (($x464 (= ?x566 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x553 (= $x464 true)))
 (let (($x321 (= $x553 true)))
 (let (($x256 (= ?x566 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x717 (= $x256 true)))
 (let (($x295 (= $x717 true)))
 (let (($x208 (and $x295 $x321)))
 (let (($x593 (and $x208 $x693)))
 (let (($x394 (and $x593 $x759)))
 (let (($x356 (and $x394 $x532)))
 (let (($x604 (and $x356 $x384)))
 (let (($x469 (and $x604 $x663)))
 (let (($x119 (and $x469 $x643)))
 (let (($x716 (and $x119 $x324)))
 (let (($x657 (and $x716 $x429)))
 (let (($x310 (and $x657 $x317)))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x18 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x675 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x597 (bvuge ?x747 (_ bv1 32))))
 (=> $x597 (= ?x675 ?x18)))))))
 ))
 (let (($x641 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x431 (_ bv1 32))))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x597 (bvuge ?x747 (_ bv1 32))))
 (= $x597 $x228))))))
 ))
 (let (($x287 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x431 (_ bv0 32))))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x476 (= ?x747 (_ bv0 32))))
 (= $x476 $x443))))))
 ))
 (let (($x472 (and $x287 $x764)))
 (let (($x374 (and $x472 $x641)))
 (let (($x737 (and $x374 $x125)))
 (let (($x78 (and $x737 $x310)))
 (let (($x444 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (=> $x220 (= ?x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x486 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (= $x220 (bvuge ?x486 (_ bv1 32)))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x486 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x277 (= ?x176 (_ bv0 32))))
 (= $x277 (= ?x486 (_ bv0 32)))))))
 ))
 (let (($x403 (and $x422 $x749)))
 (let (($x529 (and $x403 $x290)))
 (let (($x665 (and $x529 $x444)))
 (let (($x727 (and $x665 $x78)))
 (let (($x369 (=> $x727 $x323)))
 (let (($x88 (not $x369)))
 (let (($x351 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x498 (select solver-mem_5 memmask-bounded-var!)))
 (let (($x93 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x620 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x620)))
 (let (($x415 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x620)))
 (let (($x777 (or false (or false (and (and true (or $x149 $x415)) (or $x267 $x93))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x777) (= ?x498 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x498 (_ bv0 8)))))))))))
 ))
 (and (and true $x351) $x88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x565 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x624 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_5 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x720 ?x624)))
 (let ((?x428 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x485))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv2 32))) ?x428)))
 (let ((?x551 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv3 32))) ?x212)))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (=> $x220 (= ?x187 ?x551))))))))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x491 (_ bv1 32))))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (= $x220 $x773))))))
 ))
 (let (($x749 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x136 (= false false)))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x277 (= ?x176 (_ bv0 32))))
 (=> $x277 $x136)))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (= ?x491 (_ bv0 32))))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x277 (= ?x176 (_ bv0 32))))
 (= $x277 $x298))))))
 ))
 (let (($x579 (and $x300 $x749)))
 (let (($x644 (and $x579 $x345)))
 (let (($x77 (and $x644 $x565)))
 (let (($x73 (= $x77 true)))
 (let (($x323 (= $x73 true)))
 (let ((?x507 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x144 (= (_ bv0 2) ?x507)))
 (let (($x309 (= $x144 true)))
 (let (($x317 (= $x309 true)))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x496 (bvadd ?x720 input.dst.llvm-%m2)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv1 32))) (select input.dst.llvm-mem ?x496))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv2 32))) ?x32))))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (=> $x220 (= ?x187 ?x244))))))))))
 ))
 (let (($x354 (and $x644 $x334)))
 (let (($x516 (= $x354 true)))
 (let (($x249 (= $x516 true)))
 (let (($x429 (= $x249 true)))
 (let (($x775 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x216 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x632 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x9))))
 (let ((?x675 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x597 (bvuge ?x747 (_ bv1 32))))
 (=> $x597 (= ?x675 ?x632))))))))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x491 (_ bv1 32))))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x597 (bvuge ?x747 (_ bv1 32))))
 (= $x597 $x773))))))
 ))
 (let (($x764 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x136 (= false false)))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x476 (= ?x747 (_ bv0 32))))
 (=> $x476 $x136)))))
 ))
 (let (($x588 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (= ?x491 (_ bv0 32))))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x476 (= ?x747 (_ bv0 32))))
 (= $x476 $x298))))))
 ))
 (let (($x37 (and $x588 $x764)))
 (let (($x313 (and $x37 $x185)))
 (let (($x36 (and $x313 $x775)))
 (let (($x742 (= $x36 true)))
 (let (($x477 (= $x742 true)))
 (let (($x324 (= $x477 true)))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x216 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x654 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x216))))
 (let ((?x511 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv2 32))) ?x654)))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv3 32))) ?x511)))
 (let ((?x675 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x597 (bvuge ?x747 (_ bv1 32))))
 (=> $x597 (= ?x675 ?x258)))))))))))
 ))
 (let (($x697 (and $x313 $x283)))
 (let (($x120 (= $x697 true)))
 (let (($x417 (= $x120 true)))
 (let (($x643 (= $x417 true)))
 (let (($x404 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x496 (bvadd ?x720 input.dst.llvm-%m2)))
 (let ((?x695 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x496 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x496))))
 (let ((?x617 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x496 (_ bv2 32))) ?x695)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x496 (_ bv3 32))) ?x617)))
 (let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (=> $x220 (= ?x187 ?x308)))))))))))
 ))
 (let (($x745 (and $x644 $x404)))
 (let (($x482 (= $x745 true)))
 (let (($x414 (= $x482 true)))
 (let (($x663 (= $x414 true)))
 (let (($x723 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x216 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x632 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x9))))
 (let ((?x18 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x431 (_ bv1 32))))
 (=> $x228 (= ?x18 ?x632))))))))))
 ))
 (let (($x45 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x491 (_ bv1 32))))
 (let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x431 (_ bv1 32))))
 (= $x228 $x773))))))
 ))
 (let (($x513 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x136 (= false false)))
 (let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x431 (_ bv0 32))))
 (=> $x443 $x136)))))
 ))
 (let (($x481 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x491 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (= ?x491 (_ bv0 32))))
 (let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x431 (_ bv0 32))))
 (= $x443 $x298))))))
 ))
 (let (($x107 (and $x481 $x513)))
 (let (($x502 (and $x107 $x45)))
 (let (($x713 (and $x502 $x723)))
 (let (($x721 (= $x713 true)))
 (let (($x259 (= $x721 true)))
 (let (($x384 (= $x259 true)))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x216 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x654 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x216))))
 (let ((?x511 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv2 32))) ?x654)))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv3 32))) ?x511)))
 (let ((?x18 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x431 (_ bv1 32))))
 (=> $x228 (= ?x18 ?x258)))))))))))
 ))
 (let (($x627 (and $x502 $x455)))
 (let (($x43 (= $x627 true)))
 (let (($x278 (= $x43 true)))
 (let (($x532 (= $x278 true)))
 (let (($x544 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x363 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x672 (and $x363 $x544)))
 (let (($x589 (= $x672 true)))
 (let (($x264 (= $x589 true)))
 (let (($x759 (= $x264 true)))
 (let ((?x633 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x92 (= (_ bv0 32) ?x633)))
 (let ((?x769 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x229 (= (_ bv0 32) ?x769)))
 (let ((?x49 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x658 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x556 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x533 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x556)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x28 (and $x10 $x533)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x284 (and $x207 $x28)))
 (let (($x260 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x413 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x668 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x383 (and $x668 $x194)))
 (let (($x451 (not $x383)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x272 $x23)))
 (let (($x76 (and (not $x156) $x451)))
 (let (($x519 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x346 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x542 (and $x346 $x519)))
 (let (($x440 (not $x542)))
 (let (($x570 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x366 (and $x134 $x570)))
 (let (($x631 (and (not $x366) $x440)))
 (let (($x398 (and (and (and (and (and (and $x631 $x76) $x413) $x260) $x284) $x658) $x229)))
 (let (($x478 (and $x398 $x92)))
 (let (($x761 (= $x478 true)))
 (let (($x634 (= $x761 true)))
 (let (($x693 (= $x634 true)))
 (let ((?x685 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x566 (bvneg ?x685)))
 (let (($x464 (= ?x566 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x553 (= $x464 true)))
 (let (($x321 (= $x553 true)))
 (let (($x256 (= ?x566 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x717 (= $x256 true)))
 (let (($x295 (= $x717 true)))
 (let (($x208 (and $x295 $x321)))
 (let (($x593 (and $x208 $x693)))
 (let (($x394 (and $x593 $x759)))
 (let (($x356 (and $x394 $x532)))
 (let (($x604 (and $x356 $x384)))
 (let (($x469 (and $x604 $x663)))
 (let (($x119 (and $x469 $x643)))
 (let (($x716 (and $x119 $x324)))
 (let (($x657 (and $x716 $x429)))
 (let (($x310 (and $x657 $x317)))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x18 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x675 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x597 (bvuge ?x747 (_ bv1 32))))
 (=> $x597 (= ?x675 ?x18)))))))
 ))
 (let (($x641 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x431 (_ bv1 32))))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x597 (bvuge ?x747 (_ bv1 32))))
 (= $x597 $x228))))))
 ))
 (let (($x287 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x431 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x431 (_ bv0 32))))
 (let ((?x747 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x476 (= ?x747 (_ bv0 32))))
 (= $x476 $x443))))))
 ))
 (let (($x472 (and $x287 $x764)))
 (let (($x374 (and $x472 $x641)))
 (let (($x737 (and $x374 $x125)))
 (let (($x78 (and $x737 $x310)))
 (let (($x444 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (=> $x220 (= ?x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x486 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x176 (_ bv1 32))))
 (= $x220 (bvuge ?x486 (_ bv1 32)))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x486 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x176 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x277 (= ?x176 (_ bv0 32))))
 (= $x277 (= ?x486 (_ bv0 32)))))))
 ))
 (let (($x403 (and $x422 $x749)))
 (let (($x529 (and $x403 $x290)))
 (let (($x665 (and $x529 $x444)))
 (let (($x727 (and $x665 $x78)))
 (let (($x369 (=> $x727 $x323)))
 (let (($x88 (not $x369)))
 (let (($x351 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x498 (select solver-mem_5 memmask-bounded-var!)))
 (let (($x93 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x620 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x620)))
 (let (($x415 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x620)))
 (let (($x777 (or false (or false (and (and true (or $x149 $x415)) (or $x267 $x93))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x777) (= ?x498 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x498 (_ bv0 8)))))))))))
 ))
 (and (and true $x351) $x88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!82))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x02008088)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!80))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2d028000)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!81))
  (define-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!80))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2d028003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0200808b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2d028000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x02008088)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!83 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2d028001 x!0)
                    (ite (bvule #x2d028003 x!0)
                         (ite (bvule #x2d028004 x!0) #x2d028004 #x2d028003)
                         #x2d028001)
                    #x2d028000)))
    (let ((a!2 (ite (bvule #x0200808c x!0)
                    (ite (bvule #x10200004 x!0)
                         (ite (bvule #x2d028000 x!0) a!1 #x10200004)
                         #x0200808c)
                    #x0200808b)))
    (let ((a!3 (ite (bvule #x02008088 x!0)
                    (ite (bvule #x02008089 x!0)
                         (ite (bvule #x0200808b x!0) a!2 #x02008089)
                         #x02008088)
                    #x00004003)))
    (let ((a!4 (ite (bvule #x00004001 x!0)
                    (ite (bvule #x00004002 x!0)
                         (ite (bvule #x00004003 x!0) a!3 #x00004002)
                         #x00004001)
                    #x00004000)))
    (let ((a!5 (ite (bvule #x0000112f x!0)
                    (ite (bvule #x00001130 x!0)
                         (ite (bvule #x00004000 x!0) a!4 #x00001130)
                         #x0000112f)
                    #x0000112e)))
    (let ((a!6 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x0000112d x!0)
                         (ite (bvule #x0000112e x!0) a!5 #x0000112d)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!6 #x00000001)
           #x00000000))))))))
  (define-fun k!80!86 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x0000112d) #x00
    (ite (= x!0 #x00004000) #x00
    (ite (= x!0 #x10200004) #x10
    (ite (= x!0 #x00004001) #x00
    (ite (= x!0 #x2d028001) #x00
    (ite (= x!0 #x02008088) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x2d028000) #x00
    (ite (= x!0 #x02008089) #x00
    (ite (= x!0 #x0000112f) #x00
    (ite (= x!0 #x00004003) #x00
    (ite (= x!0 #x00004002) #x00
    (ite (= x!0 #x2d028003) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0200808b) #x00
    (ite (= x!0 #x0000112e) #x08
    (ite (= x!0 #x00001130) #x00
      #x02))))))))))))))))))))
  (define-fun k!80 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!80!86 (k!83 x!0)))
  (define-fun k!85 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!88 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!88 (k!85 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!89 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!84 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x00004000 x!0) #x00004000 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun k!82 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!82 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!82 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!80 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!80 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!80 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!80 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!80))
              (= x!3 (_ as-array k!81))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x0000112d
      #x00000064))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!89 (k!84 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!82 (bvadd #x00004003 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00004002 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00004001 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00004000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!80 (bvadd #x00004003 (bvmul #x00000004 x!0)))
                         (k!80 (bvadd #x00004002 (bvmul #x00000004 x!0)))
                         (k!80 (bvadd #x00004001 (bvmul #x00000004 x!0)))
                         (k!80 (bvadd #x00004000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!87 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!87 (k!84 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!82 (bvadd #x00004003 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00004002 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00004001 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00004000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun k!81 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x11)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_6 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x621 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_6 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x64 ?x621)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem ?x563))))
 (let ((?x392 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv2 32))) ?x217))))
 (let ((?x125 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (=> $x287 (= ?x125 ?x392)))))))))))
 ))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x252 (_ bv1 32))))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (= $x287 $x167))))))
 ))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x121 (= false false)))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x749 (= ?x239 (_ bv0 32))))
 (=> $x749 $x121)))))
 ))
 (let (($x725 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x252 (_ bv0 32))))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x749 (= ?x239 (_ bv0 32))))
 (= $x749 $x177))))))
 ))
 (let (($x564 (and $x725 $x529)))
 (let (($x688 (and $x564 $x236)))
 (let (($x652 (and $x688 $x457)))
 (let (($x223 (= $x652 true)))
 (let (($x154 (= $x223 true)))
 (let ((?x452 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x711 (= (_ bv0 2) ?x452)))
 (let (($x760 (= $x711 true)))
 (let (($x40 (= $x760 true)))
 (let (($x666 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x549 (bvadd ?x64 input.dst.llvm-%m2)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv1 32))) (select input.dst.llvm-mem ?x549))))
 (let ((?x694 (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv2 32))) ?x137))))
 (let ((?x125 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (=> $x287 (= ?x125 ?x694))))))))))
 ))
 (let (($x382 (and $x688 $x666)))
 (let (($x763 (= $x382 true)))
 (let (($x307 (= $x763 true)))
 (let (($x454 (= $x307 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x64 input.dst.llvm-%m1)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x178))))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x705 (_ bv1 32))))
 (=> $x537 (= ?x50 ?x650))))))))))
 ))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x252 (_ bv1 32))))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x705 (_ bv1 32))))
 (= $x537 $x167))))))
 ))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x121 (= false false)))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x556 (= ?x705 (_ bv0 32))))
 (=> $x556 $x121)))))
 ))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x252 (_ bv0 32))))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x556 (= ?x705 (_ bv0 32))))
 (= $x556 $x177))))))
 ))
 (let (($x524 (and $x642 $x49)))
 (let (($x90 (and $x524 $x459)))
 (let (($x126 (and $x90 $x140)))
 (let (($x342 (= $x126 true)))
 (let (($x170 (= $x342 true)))
 (let (($x758 (= $x170 true)))
 (let (($x731 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x64 input.dst.llvm-%m1)))
 (let ((?x432 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x180))))
 (let ((?x562 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv2 32))) ?x432)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv3 32))) ?x562)))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x705 (_ bv1 32))))
 (=> $x537 (= ?x50 ?x362)))))))))))
 ))
 (let (($x188 (and $x90 $x731)))
 (let (($x412 (= $x188 true)))
 (let (($x435 (= $x412 true)))
 (let (($x712 (= $x435 true)))
 (let (($x434 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x549 (bvadd ?x64 input.dst.llvm-%m2)))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x549))))
 (let ((?x379 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv2 32))) ?x218)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv3 32))) ?x379)))
 (let ((?x125 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (=> $x287 (= ?x125 ?x14)))))))))))
 ))
 (let (($x349 (and $x688 $x434)))
 (let (($x614 (= $x349 true)))
 (let (($x131 (= $x614 true)))
 (let (($x291 (= $x131 true)))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x64 input.dst.llvm-%m1)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x178))))
 (let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x411 (_ bv1 32))))
 (=> $x150 (= ?x380 ?x650))))))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x252 (_ bv1 32))))
 (let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x411 (_ bv1 32))))
 (= $x150 $x167))))))
 ))
 (let (($x606 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x121 (= false false)))
 (let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x411 (_ bv0 32))))
 (=> $x207 $x121)))))
 ))
 (let (($x718 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x252 (_ bv0 32))))
 (let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x411 (_ bv0 32))))
 (= $x207 $x177))))))
 ))
 (let (($x786 (and $x718 $x606)))
 (let (($x750 (and $x786 $x576)))
 (let (($x609 (and $x750 $x205)))
 (let (($x698 (= $x609 true)))
 (let (($x539 (= $x698 true)))
 (let (($x388 (= $x539 true)))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x64 input.dst.llvm-%m1)))
 (let ((?x432 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x180))))
 (let ((?x562 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv2 32))) ?x432)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv3 32))) ?x562)))
 (let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x411 (_ bv1 32))))
 (=> $x150 (= ?x380 ?x362)))))))))))
 ))
 (let (($x203 (and $x750 $x273)))
 (let (($x447 (= $x203 true)))
 (let (($x461 (= $x447 true)))
 (let (($x8 (= $x461 true)))
 (let (($x663 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x745 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x469 (and $x745 $x663)))
 (let (($x692 (= $x469 true)))
 (let (($x588 (= $x692 true)))
 (let (($x37 (= $x588 true)))
 (let ((?x345 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x644 (= (_ bv0 32) ?x345)))
 (let ((?x579 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x142 (= (_ bv0 32) ?x579)))
 (let ((?x506 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x506)))
 (let ((?x721 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x721)))
 (let (($x723 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x384 (and $x723 $x259)))
 (let (($x484 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x604 (and $x484 $x384)))
 (let (($x568 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x629 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x356 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x396 (and $x356 $x206)))
 (let (($x580 (not $x396)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x532 (and $x43 $x278)))
 (let (($x446 (and (not $x532) $x580)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x511 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x372 (and $x511 $x258)))
 (let (($x193 (not $x372)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x393 (and $x442 $x143)))
 (let (($x627 (and (not $x393) $x193)))
 (let (($x124 (and (and (and (and (and (and $x627 $x446) $x629) $x568) $x604) $x300) $x142)))
 (let (($x590 (and $x124 $x644)))
 (let (($x418 (= $x590 true)))
 (let (($x695 (= $x418 true)))
 (let (($x617 (= $x695 true)))
 (let ((?x513 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x107 (bvneg ?x513)))
 (let (($x720 (= ?x107 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x216 (= $x720 true)))
 (let (($x420 (= $x216 true)))
 (let (($x739 (= ?x107 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x45 (= $x739 true)))
 (let (($x502 (= $x45 true)))
 (let (($x378 (and $x502 $x420)))
 (let (($x308 (and $x378 $x617)))
 (let (($x402 (and $x308 $x37)))
 (let (($x213 (and $x402 $x8)))
 (let (($x361 (and $x213 $x388)))
 (let (($x767 (and $x361 $x291)))
 (let (($x534 (and $x767 $x712)))
 (let (($x474 (and $x534 $x758)))
 (let (($x765 (and $x474 $x454)))
 (let (($x583 (and $x765 $x40)))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x705 (_ bv1 32))))
 (=> $x537 (= ?x50 ?x380)))))))
 ))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x411 (_ bv1 32))))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x705 (_ bv1 32))))
 (= $x537 $x150))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x411 (_ bv0 32))))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x556 (= ?x705 (_ bv0 32))))
 (= $x556 $x207))))))
 ))
 (let (($x658 (and $x28 $x49)))
 (let (($x602 (and $x658 $x363)))
 (let (($x105 (and $x602 $x298)))
 (let (($x531 (and $x105 $x583)))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x125 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (=> $x287 (= ?x125 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x764 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x637 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (= $x287 (bvuge ?x637 (_ bv1 32)))))))
 ))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x637 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x749 (= ?x239 (_ bv0 32))))
 (= $x749 (= ?x637 (_ bv0 32)))))))
 ))
 (let (($x187 (and $x220 $x529)))
 (let (($x472 (and $x187 $x764)))
 (let (($x685 (and $x472 $x74)))
 (let (($x98 (and $x685 $x531)))
 (let (($x31 (=> $x98 $x154)))
 (let (($x736 (not $x31)))
 (let (($x400 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x619 (select solver-mem_6 memmask-bounded-var!)))
 (let (($x755 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x490 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x490)))
 (let (($x16 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x490)))
 (let (($x240 (or false (or false (and (and true (or $x200 $x16)) (or $x201 $x755))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x240) (= ?x619 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x619 (_ bv0 8)))))))))))
 ))
 (and (and true $x400) $x736)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_6 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x621 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_6 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x64 ?x621)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem ?x563))))
 (let ((?x392 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv2 32))) ?x217))))
 (let ((?x125 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (=> $x287 (= ?x125 ?x392)))))))))))
 ))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x252 (_ bv1 32))))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (= $x287 $x167))))))
 ))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x121 (= false false)))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x749 (= ?x239 (_ bv0 32))))
 (=> $x749 $x121)))))
 ))
 (let (($x725 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x252 (_ bv0 32))))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x749 (= ?x239 (_ bv0 32))))
 (= $x749 $x177))))))
 ))
 (let (($x564 (and $x725 $x529)))
 (let (($x688 (and $x564 $x236)))
 (let (($x652 (and $x688 $x457)))
 (let (($x223 (= $x652 true)))
 (let (($x154 (= $x223 true)))
 (let ((?x452 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x711 (= (_ bv0 2) ?x452)))
 (let (($x760 (= $x711 true)))
 (let (($x40 (= $x760 true)))
 (let (($x666 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x549 (bvadd ?x64 input.dst.llvm-%m2)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv1 32))) (select input.dst.llvm-mem ?x549))))
 (let ((?x694 (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv2 32))) ?x137))))
 (let ((?x125 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (=> $x287 (= ?x125 ?x694))))))))))
 ))
 (let (($x382 (and $x688 $x666)))
 (let (($x763 (= $x382 true)))
 (let (($x307 (= $x763 true)))
 (let (($x454 (= $x307 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x64 input.dst.llvm-%m1)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x178))))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x705 (_ bv1 32))))
 (=> $x537 (= ?x50 ?x650))))))))))
 ))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x252 (_ bv1 32))))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x705 (_ bv1 32))))
 (= $x537 $x167))))))
 ))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x121 (= false false)))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x556 (= ?x705 (_ bv0 32))))
 (=> $x556 $x121)))))
 ))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x252 (_ bv0 32))))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x556 (= ?x705 (_ bv0 32))))
 (= $x556 $x177))))))
 ))
 (let (($x524 (and $x642 $x49)))
 (let (($x90 (and $x524 $x459)))
 (let (($x126 (and $x90 $x140)))
 (let (($x342 (= $x126 true)))
 (let (($x170 (= $x342 true)))
 (let (($x758 (= $x170 true)))
 (let (($x731 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x64 input.dst.llvm-%m1)))
 (let ((?x432 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x180))))
 (let ((?x562 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv2 32))) ?x432)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv3 32))) ?x562)))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x705 (_ bv1 32))))
 (=> $x537 (= ?x50 ?x362)))))))))))
 ))
 (let (($x188 (and $x90 $x731)))
 (let (($x412 (= $x188 true)))
 (let (($x435 (= $x412 true)))
 (let (($x712 (= $x435 true)))
 (let (($x434 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x549 (bvadd ?x64 input.dst.llvm-%m2)))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x549))))
 (let ((?x379 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv2 32))) ?x218)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv3 32))) ?x379)))
 (let ((?x125 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (=> $x287 (= ?x125 ?x14)))))))))))
 ))
 (let (($x349 (and $x688 $x434)))
 (let (($x614 (= $x349 true)))
 (let (($x131 (= $x614 true)))
 (let (($x291 (= $x131 true)))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x64 input.dst.llvm-%m1)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x178))))
 (let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x411 (_ bv1 32))))
 (=> $x150 (= ?x380 ?x650))))))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x252 (_ bv1 32))))
 (let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x411 (_ bv1 32))))
 (= $x150 $x167))))))
 ))
 (let (($x606 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x121 (= false false)))
 (let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x411 (_ bv0 32))))
 (=> $x207 $x121)))))
 ))
 (let (($x718 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x252 (_ bv0 32))))
 (let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x411 (_ bv0 32))))
 (= $x207 $x177))))))
 ))
 (let (($x786 (and $x718 $x606)))
 (let (($x750 (and $x786 $x576)))
 (let (($x609 (and $x750 $x205)))
 (let (($x698 (= $x609 true)))
 (let (($x539 (= $x698 true)))
 (let (($x388 (= $x539 true)))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x64 input.dst.llvm-%m1)))
 (let ((?x432 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x180))))
 (let ((?x562 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv2 32))) ?x432)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv3 32))) ?x562)))
 (let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x411 (_ bv1 32))))
 (=> $x150 (= ?x380 ?x362)))))))))))
 ))
 (let (($x203 (and $x750 $x273)))
 (let (($x447 (= $x203 true)))
 (let (($x461 (= $x447 true)))
 (let (($x8 (= $x461 true)))
 (let (($x663 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x745 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x469 (and $x745 $x663)))
 (let (($x692 (= $x469 true)))
 (let (($x588 (= $x692 true)))
 (let (($x37 (= $x588 true)))
 (let ((?x345 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x644 (= (_ bv0 32) ?x345)))
 (let ((?x579 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x142 (= (_ bv0 32) ?x579)))
 (let ((?x506 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x506)))
 (let ((?x721 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x721)))
 (let (($x723 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x384 (and $x723 $x259)))
 (let (($x484 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x604 (and $x484 $x384)))
 (let (($x568 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x629 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x356 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x396 (and $x356 $x206)))
 (let (($x580 (not $x396)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x532 (and $x43 $x278)))
 (let (($x446 (and (not $x532) $x580)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x511 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x372 (and $x511 $x258)))
 (let (($x193 (not $x372)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x393 (and $x442 $x143)))
 (let (($x627 (and (not $x393) $x193)))
 (let (($x124 (and (and (and (and (and (and $x627 $x446) $x629) $x568) $x604) $x300) $x142)))
 (let (($x590 (and $x124 $x644)))
 (let (($x418 (= $x590 true)))
 (let (($x695 (= $x418 true)))
 (let (($x617 (= $x695 true)))
 (let ((?x513 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x107 (bvneg ?x513)))
 (let (($x720 (= ?x107 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x216 (= $x720 true)))
 (let (($x420 (= $x216 true)))
 (let (($x739 (= ?x107 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x45 (= $x739 true)))
 (let (($x502 (= $x45 true)))
 (let (($x378 (and $x502 $x420)))
 (let (($x308 (and $x378 $x617)))
 (let (($x402 (and $x308 $x37)))
 (let (($x213 (and $x402 $x8)))
 (let (($x361 (and $x213 $x388)))
 (let (($x767 (and $x361 $x291)))
 (let (($x534 (and $x767 $x712)))
 (let (($x474 (and $x534 $x758)))
 (let (($x765 (and $x474 $x454)))
 (let (($x583 (and $x765 $x40)))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x705 (_ bv1 32))))
 (=> $x537 (= ?x50 ?x380)))))))
 ))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x411 (_ bv1 32))))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x705 (_ bv1 32))))
 (= $x537 $x150))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x411 (_ bv0 32))))
 (let ((?x705 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x556 (= ?x705 (_ bv0 32))))
 (= $x556 $x207))))))
 ))
 (let (($x658 (and $x28 $x49)))
 (let (($x602 (and $x658 $x363)))
 (let (($x105 (and $x602 $x298)))
 (let (($x531 (and $x105 $x583)))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x125 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (=> $x287 (= ?x125 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x764 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x637 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x239 (_ bv1 32))))
 (= $x287 (bvuge ?x637 (_ bv1 32)))))))
 ))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x637 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x239 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x749 (= ?x239 (_ bv0 32))))
 (= $x749 (= ?x637 (_ bv0 32)))))))
 ))
 (let (($x187 (and $x220 $x529)))
 (let (($x472 (and $x187 $x764)))
 (let (($x685 (and $x472 $x74)))
 (let (($x98 (and $x685 $x531)))
 (let (($x31 (=> $x98 $x154)))
 (let (($x736 (not $x31)))
 (let (($x400 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x619 (select solver-mem_6 memmask-bounded-var!)))
 (let (($x755 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x490 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x490)))
 (let (($x16 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x490)))
 (let (($x240 (or false (or false (and (and true (or $x200 $x16)) (or $x201 $x755))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x240) (= ?x619 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x619 (_ bv0 8)))))))))))
 ))
 (and (and true $x400) $x736)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!506))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xff610c00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4031f6c0)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfdfff028)
  (define-fun solver-mem_6 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!507))
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!507))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40400004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!505))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40400007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4031f6c3)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40400004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4031f6c0)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!512 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!509 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000065 x!0)
                    (ite (bvule #x008003f7 x!0)
                         (ite (bvule #xff610c00 x!0) #xff610c00 #x008003f7)
                         #x00000065)
                    #x00000064)))
      (ite (bvule #x00000064 x!0) a!1 #x00000000)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!512
      (k!509 x!0)))
  (define-fun k!507 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xff610c03) #x00
    (ite (= x!0 #xff610c00) #x00
    (ite (= x!0 #xfdfff028) #x20
    (ite (= x!0 #x4031f6c1) #x00
    (ite (= x!0 #xff610c01) #x20
    (ite (= x!0 #xfdfff02a) #x00
    (ite (= x!0 #x40400006) #x00
    (ite (= x!0 #x01611bdd) #x00
    (ite (= x!0 #x40400005) #x00
    (ite (= x!0 #x4031f6c0) #x00
    (ite (= x!0 #x40414046) #x02
    (ite (= x!0 #x86616c46) #x02
    (ite (= x!0 #x4031f6c2) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x81206c4a) #x00
    (ite (= x!0 #x40400004) #x00
    (ite (= x!0 #xfdfff02b) #x08
    (ite (= x!0 #x40400007) #x00
    (ite (= x!0 #x4031f6c3) #x00
    (ite (= x!0 #x48120806) #x02
    (ite (= x!0 #x01611bde) #x00
    (ite (= x!0 #xff610c02) #x00
    (ite (= x!0 #x8802b4c4) #x00
    (ite (= x!0 #x00027c06) #x01
      #x40)))))))))))))))))))))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x08004020
      (let ((a!1 (concat (k!505 (bvadd #xfdfff02b (bvmul #x00000004 x!0)))
                         (k!505 (bvadd #xfdfff02a (bvmul #x00000004 x!0)))
                         (k!505 (bvadd #xfdfff029 (bvmul #x00000004 x!0)))
                         (k!505 (bvadd #xfdfff028 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!507 (bvadd #xfdfff02b (bvmul #x00000004 x!0)))
                         (k!507 (bvadd #xfdfff02a (bvmul #x00000004 x!0)))
                         (k!507 (bvadd #xfdfff029 (bvmul #x00000004 x!0)))
                         (k!507 (bvadd #xfdfff028 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!505 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd7b90816) #x80
    (ite (= x!0 #xd7b90815) #x03
    (ite (= x!0 #xd7b90814) #xf7
    (ite (= x!0 #xff610c03) #x00
    (ite (= x!0 #xff610c02) #x00
    (ite (= x!0 #xff610c00) #x00
    (ite (= x!0 #xfdfff028) #x20
    (ite (= x!0 #xfdfff02b) #x08
    (ite (= x!0 #xff610c01) #x20
    (ite (= x!0 #xfdfff02a) #x00
    (ite (= x!0 #xd7b90817) #x00
      #x40))))))))))))
  (define-fun input.spec-%var-m1-1.0.1!513 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!513 (k!509 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x08004020
      (let ((a!1 (concat (k!505 (bvadd #xfdfff02b (bvmul #x00000004 x!0)))
                         (k!505 (bvadd #xfdfff02a (bvmul #x00000004 x!0)))
                         (k!505 (bvadd #xfdfff029 (bvmul #x00000004 x!0)))
                         (k!505 (bvadd #xfdfff028 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!510 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000065 x!0)
                    (ite (bvule #x008003f7 x!0)
                         (ite (bvule #xff610c00 x!0) #xff610c00 #x008003f7)
                         #x00000065)
                    #x00000064)))
      (ite (bvule #x00000064 x!0) a!1 #x00000000)))
  (define-fun input.spec-%var-m2-1.0.1!511 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!511 (k!510 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #xff610c00) false
    (ite (= x!0 #x008003f7) false
      (input.spec-%var-m2-1.0.1 x!0)))))
  (define-fun k!506 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00027c06) #xec
      #x40))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00002000
      (let ((a!1 (concat (k!505 (bvadd #xff610c03 (bvmul #x00000004 x!0)))
                         (k!505 (bvadd #xff610c02 (bvmul #x00000004 x!0)))
                         (k!505 (bvadd #xff610c01 (bvmul #x00000004 x!0)))
                         (k!505 (bvadd #xff610c00 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!507 (bvadd #xff610c03 (bvmul #x00000004 x!0)))
                         (k!507 (bvadd #xff610c02 (bvmul #x00000004 x!0)))
                         (k!507 (bvadd #xff610c01 (bvmul #x00000004 x!0)))
                         (k!507 (bvadd #xff610c00 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00002000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!507))
              (= x!3 (_ as-array k!506))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #xff610c00))
      #xd7b90814
      #x008003f7))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_7 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x757 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_7 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x279 (bvadd ?x97 ?x96)))
 (let ((?x438 (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv1 32))) (select input.dst.llvm-mem ?x279))))
 (let ((?x630 (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv2 32))) ?x438))))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x325 (_ bv1 32))))
 (=> $x132 (= ?x358 ?x630)))))))))))
 ))
 (let (($x578 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x782 (_ bv1 32))))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x325 (_ bv1 32))))
 (= $x132 $x22))))))
 ))
 (let (($x542 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x510 (= false false)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (= ?x325 (_ bv0 32))))
 (=> $x484 $x510)))))
 ))
 (let (($x530 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x782 (_ bv0 32))))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (= ?x325 (_ bv0 32))))
 (= $x484 $x26))))))
 ))
 (let (($x93 (and $x530 $x542)))
 (let (($x514 (and $x93 $x578)))
 (let (($x255 (and $x514 $x757)))
 (let (($x59 (= $x255 true)))
 (let (($x752 (= $x59 true)))
 (let ((?x159 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x282 (= (_ bv0 2) ?x159)))
 (let (($x226 (= $x282 true)))
 (let (($x46 (= $x226 true)))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x151))))
 (let ((?x298 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x290 (_ bv1 32))))
 (=> $x28 (= ?x298 ?x5))))))))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x782 (_ bv1 32))))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x290 (_ bv1 32))))
 (= $x28 $x22))))))
 ))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x510 (= false false)))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x529 (= ?x290 (_ bv0 32))))
 (=> $x529 $x510)))))
 ))
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x782 (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x529 (= ?x290 (_ bv0 32))))
 (= $x529 $x26))))))
 ))
 (let (($x332 (and $x467 $x472)))
 (let (($x106 (and $x332 $x314)))
 (let (($x145 (and $x106 $x376)))
 (let (($x53 (= $x145 true)))
 (let (($x581 (= $x53 true)))
 (let (($x100 (= $x581 true)))
 (let (($x479 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x744 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x674 (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv1 32))) (select input.dst.llvm-mem ?x744))))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv2 32))) ?x674))))
 (let ((?x141 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x713 (_ bv1 32))))
 (=> $x386 (= ?x141 ?x450))))))))))
 ))
 (let (($x683 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x782 (_ bv1 32))))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x713 (_ bv1 32))))
 (= $x386 $x22))))))
 ))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x510 (= false false)))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x713 (_ bv0 32))))
 (=> $x721 $x510)))))
 ))
 (let (($x528 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x782 (_ bv0 32))))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x713 (_ bv0 32))))
 (= $x721 $x26))))))
 ))
 (let (($x192 (and $x528 $x506)))
 (let (($x505 (and $x192 $x683)))
 (let (($x573 (and $x505 $x479)))
 (let (($x774 (= $x573 true)))
 (let (($x182 (= $x774 true)))
 (let (($x87 (= $x182 true)))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x744 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x646 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x744))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv2 32))) ?x646)))
 (let ((?x509 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv3 32))) ?x224)))
 (let ((?x141 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x713 (_ bv1 32))))
 (=> $x386 (= ?x141 ?x509)))))))))))
 ))
 (let (($x747 (and $x505 $x504)))
 (let (($x476 (= $x747 true)))
 (let (($x431 (= $x476 true)))
 (let (($x443 (= $x431 true)))
 (let (($x589 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x453 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x194))))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv2 32))) ?x453)))
 (let ((?x693 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv3 32))) ?x92)))
 (let ((?x298 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x290 (_ bv1 32))))
 (=> $x28 (= ?x298 ?x693)))))))))))
 ))
 (let (($x759 (and $x106 $x589)))
 (let (($x394 (= $x759 true)))
 (let (($x612 (= $x394 true)))
 (let (($x498 (= $x612 true)))
 (let (($x616 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x744 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x674 (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv1 32))) (select input.dst.llvm-mem ?x744))))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv2 32))) ?x674))))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x325 (_ bv1 32))))
 (=> $x132 (= ?x358 ?x450))))))))))
 ))
 (let (($x670 (and $x514 $x616)))
 (let (($x456 (= $x670 true)))
 (let (($x253 (= $x456 true)))
 (let (($x340 (= $x253 true)))
 (let (($x775 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x744 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x646 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x744))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv2 32))) ?x646)))
 (let ((?x509 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv3 32))) ?x224)))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x325 (_ bv1 32))))
 (=> $x132 (= ?x358 ?x509)))))))))))
 ))
 (let (($x352 (and $x514 $x775)))
 (let (($x584 (= $x352 true)))
 (let (($x575 (= $x584 true)))
 (let (($x377 (= $x575 true)))
 (let (($x291 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x349 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x767 (and $x349 $x291)))
 (let (($x776 (= $x767 true)))
 (let (($x642 (= $x776 true)))
 (let (($x524 (= $x642 true)))
 (let ((?x236 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x688 (= (_ bv0 32) ?x236)))
 (let ((?x564 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x299 (= (_ bv0 32) ?x564)))
 (let ((?x330 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x725 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x330)))
 (let ((?x698 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x539 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x698)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x388 (and $x205 $x539)))
 (let (($x329 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x361 (and $x329 $x388)))
 (let (($x348 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x34 (and $x213 $x219)))
 (let (($x114 (not $x34)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x447 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x447 $x461)))
 (let (($x448 (and (not $x8) $x114)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x562 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x571 (and $x562 $x362)))
 (let (($x286 (not $x571)))
 (let (($x550 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x401 (and $x147 $x550)))
 (let (($x203 (and (not $x401) $x286)))
 (let (($x17 (and (and (and (and (and (and $x203 $x448) $x33) $x348) $x361) $x725) $x299)))
 (let (($x669 (and $x17 $x688)))
 (let (($x225 (= $x669 true)))
 (let (($x218 (= $x225 true)))
 (let (($x379 (= $x218 true)))
 (let ((?x606 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x786 (bvneg ?x606)))
 (let (($x64 (= ?x786 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x180 (= $x64 true)))
 (let (($x181 (= $x180 true)))
 (let (($x743 (= ?x786 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x576 (= $x743 true)))
 (let (($x750 (= $x576 true)))
 (let (($x227 (and $x750 $x181)))
 (let (($x14 (and $x227 $x379)))
 (let (($x359 (and $x14 $x524)))
 (let (($x72 (and $x359 $x377)))
 (let (($x636 (and $x72 $x340)))
 (let (($x777 (and $x636 $x498)))
 (let (($x748 (and $x777 $x443)))
 (let (($x419 (and $x748 $x87)))
 (let (($x391 (and $x419 $x100)))
 (let (($x189 (and $x391 $x46)))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x141 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x713 (_ bv1 32))))
 (=> $x386 (= ?x141 ?x358)))))))
 ))
 (let (($x745 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x325 (_ bv1 32))))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x713 (_ bv1 32))))
 (= $x386 $x132))))))
 ))
 (let (($x384 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (= ?x325 (_ bv0 32))))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x713 (_ bv0 32))))
 (= $x721 $x484))))))
 ))
 (let (($x300 (and $x384 $x506)))
 (let (($x482 (and $x300 $x745)))
 (let (($x238 (and $x482 $x177)))
 (let (($x198 (and $x238 $x189)))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x298 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x290 (_ bv1 32))))
 (=> $x28 (= ?x298 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x403 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x290 (_ bv1 32))))
 (= $x28 (bvuge ?x403 (_ bv1 32)))))))
 ))
 (let (($x287 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x403 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x529 (= ?x290 (_ bv0 32))))
 (= $x529 (= ?x403 (_ bv0 32)))))))
 ))
 (let (($x125 (and $x287 $x472)))
 (let (($x658 (and $x125 $x49)))
 (let (($x513 (and $x658 $x387)))
 (let (($x640 (and $x513 $x198)))
 (let (($x86 (=> $x640 $x752)))
 (let (($x405 (not $x86)))
 (let (($x235 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x439 (select solver-mem_7 memmask-bounded-var!)))
 (let (($x690 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x409 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x409)))
 (let (($x526 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x538 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x409)))
 (let (($x722 (or false (or false (and (and true (or $x538 $x526)) (or $x293 $x690))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x722) (= ?x439 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x439 (_ bv0 8)))))))))))
 ))
 (and (and true $x235) $x405)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_7 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x757 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_7 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x279 (bvadd ?x97 ?x96)))
 (let ((?x438 (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv1 32))) (select input.dst.llvm-mem ?x279))))
 (let ((?x630 (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv2 32))) ?x438))))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x325 (_ bv1 32))))
 (=> $x132 (= ?x358 ?x630)))))))))))
 ))
 (let (($x578 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x782 (_ bv1 32))))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x325 (_ bv1 32))))
 (= $x132 $x22))))))
 ))
 (let (($x542 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x510 (= false false)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (= ?x325 (_ bv0 32))))
 (=> $x484 $x510)))))
 ))
 (let (($x530 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x782 (_ bv0 32))))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (= ?x325 (_ bv0 32))))
 (= $x484 $x26))))))
 ))
 (let (($x93 (and $x530 $x542)))
 (let (($x514 (and $x93 $x578)))
 (let (($x255 (and $x514 $x757)))
 (let (($x59 (= $x255 true)))
 (let (($x752 (= $x59 true)))
 (let ((?x159 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x282 (= (_ bv0 2) ?x159)))
 (let (($x226 (= $x282 true)))
 (let (($x46 (= $x226 true)))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x151))))
 (let ((?x298 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x290 (_ bv1 32))))
 (=> $x28 (= ?x298 ?x5))))))))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x782 (_ bv1 32))))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x290 (_ bv1 32))))
 (= $x28 $x22))))))
 ))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x510 (= false false)))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x529 (= ?x290 (_ bv0 32))))
 (=> $x529 $x510)))))
 ))
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x782 (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x529 (= ?x290 (_ bv0 32))))
 (= $x529 $x26))))))
 ))
 (let (($x332 (and $x467 $x472)))
 (let (($x106 (and $x332 $x314)))
 (let (($x145 (and $x106 $x376)))
 (let (($x53 (= $x145 true)))
 (let (($x581 (= $x53 true)))
 (let (($x100 (= $x581 true)))
 (let (($x479 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x744 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x674 (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv1 32))) (select input.dst.llvm-mem ?x744))))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv2 32))) ?x674))))
 (let ((?x141 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x713 (_ bv1 32))))
 (=> $x386 (= ?x141 ?x450))))))))))
 ))
 (let (($x683 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x782 (_ bv1 32))))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x713 (_ bv1 32))))
 (= $x386 $x22))))))
 ))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x510 (= false false)))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x713 (_ bv0 32))))
 (=> $x721 $x510)))))
 ))
 (let (($x528 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x782 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x782 (_ bv0 32))))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x713 (_ bv0 32))))
 (= $x721 $x26))))))
 ))
 (let (($x192 (and $x528 $x506)))
 (let (($x505 (and $x192 $x683)))
 (let (($x573 (and $x505 $x479)))
 (let (($x774 (= $x573 true)))
 (let (($x182 (= $x774 true)))
 (let (($x87 (= $x182 true)))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x744 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x646 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x744))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv2 32))) ?x646)))
 (let ((?x509 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv3 32))) ?x224)))
 (let ((?x141 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x713 (_ bv1 32))))
 (=> $x386 (= ?x141 ?x509)))))))))))
 ))
 (let (($x747 (and $x505 $x504)))
 (let (($x476 (= $x747 true)))
 (let (($x431 (= $x476 true)))
 (let (($x443 (= $x431 true)))
 (let (($x589 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x453 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x194))))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv2 32))) ?x453)))
 (let ((?x693 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv3 32))) ?x92)))
 (let ((?x298 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x290 (_ bv1 32))))
 (=> $x28 (= ?x298 ?x693)))))))))))
 ))
 (let (($x759 (and $x106 $x589)))
 (let (($x394 (= $x759 true)))
 (let (($x612 (= $x394 true)))
 (let (($x498 (= $x612 true)))
 (let (($x616 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x744 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x674 (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv1 32))) (select input.dst.llvm-mem ?x744))))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x744 (_ bv2 32))) ?x674))))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x325 (_ bv1 32))))
 (=> $x132 (= ?x358 ?x450))))))))))
 ))
 (let (($x670 (and $x514 $x616)))
 (let (($x456 (= $x670 true)))
 (let (($x253 (= $x456 true)))
 (let (($x340 (= $x253 true)))
 (let (($x775 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x744 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x646 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x744))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv2 32))) ?x646)))
 (let ((?x509 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x744 (_ bv3 32))) ?x224)))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x325 (_ bv1 32))))
 (=> $x132 (= ?x358 ?x509)))))))))))
 ))
 (let (($x352 (and $x514 $x775)))
 (let (($x584 (= $x352 true)))
 (let (($x575 (= $x584 true)))
 (let (($x377 (= $x575 true)))
 (let (($x291 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x349 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x767 (and $x349 $x291)))
 (let (($x776 (= $x767 true)))
 (let (($x642 (= $x776 true)))
 (let (($x524 (= $x642 true)))
 (let ((?x236 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x688 (= (_ bv0 32) ?x236)))
 (let ((?x564 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x299 (= (_ bv0 32) ?x564)))
 (let ((?x330 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x725 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x330)))
 (let ((?x698 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x539 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x698)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x388 (and $x205 $x539)))
 (let (($x329 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x361 (and $x329 $x388)))
 (let (($x348 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x34 (and $x213 $x219)))
 (let (($x114 (not $x34)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x447 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x447 $x461)))
 (let (($x448 (and (not $x8) $x114)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x562 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x571 (and $x562 $x362)))
 (let (($x286 (not $x571)))
 (let (($x550 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x401 (and $x147 $x550)))
 (let (($x203 (and (not $x401) $x286)))
 (let (($x17 (and (and (and (and (and (and $x203 $x448) $x33) $x348) $x361) $x725) $x299)))
 (let (($x669 (and $x17 $x688)))
 (let (($x225 (= $x669 true)))
 (let (($x218 (= $x225 true)))
 (let (($x379 (= $x218 true)))
 (let ((?x606 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x786 (bvneg ?x606)))
 (let (($x64 (= ?x786 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x180 (= $x64 true)))
 (let (($x181 (= $x180 true)))
 (let (($x743 (= ?x786 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x576 (= $x743 true)))
 (let (($x750 (= $x576 true)))
 (let (($x227 (and $x750 $x181)))
 (let (($x14 (and $x227 $x379)))
 (let (($x359 (and $x14 $x524)))
 (let (($x72 (and $x359 $x377)))
 (let (($x636 (and $x72 $x340)))
 (let (($x777 (and $x636 $x498)))
 (let (($x748 (and $x777 $x443)))
 (let (($x419 (and $x748 $x87)))
 (let (($x391 (and $x419 $x100)))
 (let (($x189 (and $x391 $x46)))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x141 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x713 (_ bv1 32))))
 (=> $x386 (= ?x141 ?x358)))))))
 ))
 (let (($x745 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x325 (_ bv1 32))))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x713 (_ bv1 32))))
 (= $x386 $x132))))))
 ))
 (let (($x384 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x325 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (= ?x325 (_ bv0 32))))
 (let ((?x713 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x713 (_ bv0 32))))
 (= $x721 $x484))))))
 ))
 (let (($x300 (and $x384 $x506)))
 (let (($x482 (and $x300 $x745)))
 (let (($x238 (and $x482 $x177)))
 (let (($x198 (and $x238 $x189)))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x298 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x290 (_ bv1 32))))
 (=> $x28 (= ?x298 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x403 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x290 (_ bv1 32))))
 (= $x28 (bvuge ?x403 (_ bv1 32)))))))
 ))
 (let (($x287 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x403 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x529 (= ?x290 (_ bv0 32))))
 (= $x529 (= ?x403 (_ bv0 32)))))))
 ))
 (let (($x125 (and $x287 $x472)))
 (let (($x658 (and $x125 $x49)))
 (let (($x513 (and $x658 $x387)))
 (let (($x640 (and $x513 $x198)))
 (let (($x86 (=> $x640 $x752)))
 (let (($x405 (not $x86)))
 (let (($x235 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x439 (select solver-mem_7 memmask-bounded-var!)))
 (let (($x690 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x409 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x409)))
 (let (($x526 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x538 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x409)))
 (let (($x722 (or false (or false (and (and true (or $x538 $x526)) (or $x293 $x690))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x722) (= ?x439 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x439 (_ bv0 8)))))))))))
 ))
 (and (and true $x235) $x405)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!479))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xccccccdc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00022180)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!480))
  (define-fun solver-mem_7 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!478))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!477))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00022183)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00022180)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!479 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00060004) #x1d
      #x10))
  (define-fun k!480 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xcccccce3) #x00
    (ite (= x!0 #xccccccdc) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x25b37126) #x40
    (ite (= x!0 #x00000000) #x08
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #xccccccdf) #x00
    (ite (= x!0 #x00000002) #x04
    (ite (= x!0 #x000000fd) #x00
    (ite (= x!0 #x00000005) #x20
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x00060004) #x40
    (ite (= x!0 #x000000ff) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x000000fe) #x00
    (ite (= x!0 #x4df07426) #x80
    (ite (= x!0 #xccccccde) #x00
    (ite (= x!0 #xcccccce2) #x80
    (ite (= x!0 #xcdf07426) #x08
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #xccccccdd) #x01
    (ite (= x!0 #x000000fc) #x00
    (ite (= x!0 #xcccccce0) #x08
      #x10))))))))))))))))))))))))
  (define-fun k!482 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0000003f x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x0000003f)
         #x00000001))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!484 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x0000003f) true
      false)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!484
      (k!482 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00002000
    (ite (= x!0 #x00000000) #x00040008
    (ite (= x!0 #x0000003f) #x00000000
      (let ((a!1 (concat (k!477 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!477 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!477 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!477 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!480 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!480 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!480 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!480 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))))
  (define-fun k!477 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000fd) #x00
    (ite (= x!0 #xf3c00038) #x00
    (ite (= x!0 #x00000005) #x20
    (ite (= x!0 #xcccccce3) #x00
    (ite (= x!0 #xccccccdc) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000000) #x08
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #xf3c00037) #x00
    (ite (= x!0 #xf3c00035) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x000000ff) #x00
    (ite (= x!0 #x000000fe) #x00
    (ite (= x!0 #xccccccdf) #x00
    (ite (= x!0 #xccccccde) #x00
    (ite (= x!0 #xcccccce2) #x80
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #xf3c00036) #x00
    (ite (= x!0 #xccccccdd) #x01
    (ite (= x!0 #x00000002) #x04
    (ite (= x!0 #xcccccce0) #x08
    (ite (= x!0 #x000000fc) #x00
      #x10))))))))))))))))))))))))
  (define-fun input.spec-%var-m1-1.0.1!486 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x0000003f) true
      false)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!486 (k!482 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00002000
    (ite (= x!0 #x00000000) #x00040008
    (ite (= x!0 #x0000003f) #x00000000
      (let ((a!1 (concat (k!477 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!477 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!477 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!477 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))))
  (define-fun input.spec-%var-m2-1.0.1!485 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!483 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #xccccccdc x!0) #xccccccdc #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!485 (k!483 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #xccccccdc) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00801008
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!477 (bvadd #xccccccdf (bvmul #x00000004 x!0)))
                         (k!477 (bvadd #xccccccde (bvmul #x00000004 x!0)))
                         (k!477 (bvadd #xccccccdd (bvmul #x00000004 x!0)))
                         (k!477 (bvadd #xccccccdc (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!480 (bvadd #xccccccdf (bvmul #x00000004 x!0)))
                         (k!480 (bvadd #xccccccde (bvmul #x00000004 x!0)))
                         (k!480 (bvadd #xccccccdd (bvmul #x00000004 x!0)))
                         (k!480 (bvadd #xccccccdc (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00801008
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun k!478 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xcccccce3) #x00
    (ite (= x!0 #xccccccdc) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x25b37126) #x40
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00022181) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00022180) #x00
    (ite (= x!0 #xccccccdf) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00022182) #x00
    (ite (= x!0 #x000000fd) #x00
    (ite (= x!0 #x00000005) #x20
    (ite (= x!0 #x00060004) #x40
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x000000ff) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x00022183) #x00
    (ite (= x!0 #x000000fe) #x00
    (ite (= x!0 #x4df07426) #x80
    (ite (= x!0 #xccccccde) #x00
    (ite (= x!0 #xcccccce2) #x80
    (ite (= x!0 #xcdf07426) #x08
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #xccccccdd) #x01
    (ite (= x!0 #x000000fc) #x00
    (ite (= x!0 #xcccccce0) #x08
      #x10))))))))))))))))))))))))))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!478))
              (= x!3 (_ as-array k!479))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #xccccccdc))
      #xf3c00031
      #x4df07423))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x15 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x783)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem ?x15))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv2 32))) ?x183))))
 (let ((?x177 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (=> $x384 (= ?x177 ?x605))))))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x547 (_ bv1 32))))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (= $x384 $x322))))))
 ))
 (let (($x658 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x533 (= false false)))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x764 (_ bv0 32))))
 (=> $x472 $x533)))))
 ))
 (let (($x102 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x547 (_ bv0 32))))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x764 (_ bv0 32))))
 (= $x472 $x315))))))
 ))
 (let (($x537 (and $x102 $x658)))
 (let (($x551 (and $x537 $x215)))
 (let (($x730 (and $x551 $x656)))
 (let (($x501 (= $x730 true)))
 (let (($x245 (= $x501 true)))
 (let ((?x542 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x93 (bvneg ?x542)))
 (let (($x667 (= ?x93 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x385 (= $x667 true)))
 (let (($x592 (= $x385 true)))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x396 (bvadd ?x783 input.dst.llvm-%m2)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv1 32))) (select input.dst.llvm-mem ?x396))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv2 32))) ?x313))))
 (let ((?x177 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (=> $x384 (= ?x177 ?x271))))))))))
 ))
 (let (($x554 (and $x551 $x285)))
 (let (($x707 (= $x554 true)))
 (let (($x248 (= $x707 true)))
 (let (($x635 (= $x248 true)))
 (let (($x415 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x716 (bvadd ?x783 input.dst.llvm-%m1)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv1 32))) (select input.dst.llvm-mem ?x716))))
 (let ((?x599 (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv2 32))) ?x414))))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x719 (bvuge ?x609 (_ bv1 32))))
 (=> $x719 (= ?x256 ?x599))))))))))
 ))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x547 (_ bv1 32))))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x719 (bvuge ?x609 (_ bv1 32))))
 (= $x719 $x322))))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x533 (= false false)))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x609 (_ bv0 32))))
 (=> $x698 $x533)))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x547 (_ bv0 32))))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x609 (_ bv0 32))))
 (= $x698 $x315))))))
 ))
 (let (($x82 (and $x445 $x330)))
 (let (($x239 (and $x82 $x136)))
 (let (($x264 (and $x239 $x415)))
 (let (($x130 (= $x264 true)))
 (let (($x195 (= $x130 true)))
 (let (($x740 (= $x195 true)))
 (let (($x705 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x716 (bvadd ?x783 input.dst.llvm-%m1)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x716))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv2 32))) ?x146)))
 (let ((?x758 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv3 32))) ?x190)))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x719 (bvuge ?x609 (_ bv1 32))))
 (=> $x719 (= ?x256 ?x758)))))))))))
 ))
 (let (($x556 (and $x239 $x705)))
 (let (($x411 (= $x556 true)))
 (let (($x207 (= $x411 true)))
 (let (($x651 (= $x207 true)))
 (let (($x37 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x396 (bvadd ?x783 input.dst.llvm-%m2)))
 (let ((?x632 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x396 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x396))))
 (let ((?x590 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x396 (_ bv2 32))) ?x632)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x396 (_ bv3 32))) ?x590)))
 (let ((?x177 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (=> $x384 (= ?x177 ?x308)))))))))))
 ))
 (let (($x402 (and $x551 $x37)))
 (let (($x7 (= $x402 true)))
 (let (($x619 (= $x7 true)))
 (let (($x240 (= $x619 true)))
 (let (($x229 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x716 (bvadd ?x783 input.dst.llvm-%m1)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv1 32))) (select input.dst.llvm-mem ?x716))))
 (let ((?x599 (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv2 32))) ?x414))))
 (let ((?x214 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x734 (_ bv1 32))))
 (=> $x344 (= ?x214 ?x599))))))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x547 (_ bv1 32))))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x734 (_ bv1 32))))
 (= $x344 $x322))))))
 ))
 (let (($x755 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x533 (= false false)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x734 (_ bv0 32))))
 (=> $x329 $x533)))))
 ))
 (let (($x511 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x547 (_ bv0 32))))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x734 (_ bv0 32))))
 (= $x329 $x315))))))
 ))
 (let (($x84 (and $x511 $x755)))
 (let (($x85 (and $x84 $x69)))
 (let (($x398 (and $x85 $x229)))
 (let (($x284 (= $x398 true)))
 (let (($x21 (= $x284 true)))
 (let (($x778 (= $x21 true)))
 (let (($x480 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x716 (bvadd ?x783 input.dst.llvm-%m1)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x716))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv2 32))) ?x146)))
 (let ((?x758 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv3 32))) ?x190)))
 (let ((?x214 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x734 (_ bv1 32))))
 (=> $x344 (= ?x214 ?x758)))))))))))
 ))
 (let (($x689 (and $x85 $x480)))
 (let (($x671 (= $x689 true)))
 (let (($x610 (= $x671 true)))
 (let (($x408 (= $x610 true)))
 (let ((?x593 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x672 (= (_ bv0 32) ?x593)))
 (let ((?x92 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x693 (= (_ bv0 32) ?x92)))
 (let ((?x383 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x453 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x383)))
 (let ((?x184 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x633 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x184)))
 (let (($x478 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x353 (and $x478 $x633)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x413 (and $x194 $x353)))
 (let (($x106 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x770 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x456 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x340 (and $x456 $x253)))
 (let (($x636 (not $x340)))
 (let (($x616 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x677 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x670 (and $x677 $x616)))
 (let (($x467 (and (not $x670) $x636)))
 (let (($x634 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x611 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x674 (and $x611 $x634)))
 (let (($x544 (not $x674)))
 (let (($x375 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x377 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x492 (and $x377 $x375)))
 (let (($x281 (and (not $x492) $x544)))
 (let (($x777 (and (and (and (and (and (and $x281 $x467) $x770) $x106) $x413) $x453) $x693)))
 (let (($x289 (and $x777 $x672)))
 (let (($x528 (= $x289 true)))
 (let (($x192 (= $x528 true)))
 (let (($x263 (= $x192 true)))
 (let ((?x509 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x324 (= (_ bv0 2) ?x509)))
 (let (($x268 (= $x324 true)))
 (let (($x775 (= $x268 true)))
 (let (($x174 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x771 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x99 (and $x771 $x174)))
 (let (($x746 (= $x99 true)))
 (let (($x741 (= $x746 true)))
 (let (($x347 (= $x741 true)))
 (let (($x261 (= ?x93 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x578 (= $x261 true)))
 (let (($x514 (= $x578 true)))
 (let (($x646 (and $x514 $x347)))
 (let (($x352 (and $x646 $x775)))
 (let (($x683 (and $x352 $x263)))
 (let (($x430 (and $x683 $x408)))
 (let (($x769 (and $x430 $x778)))
 (let (($x463 (and $x769 $x240)))
 (let (($x363 (and $x463 $x651)))
 (let (($x559 (and $x363 $x740)))
 (let (($x488 (and $x559 $x635)))
 (let (($x204 (and $x488 $x592)))
 (let (($x26 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x719 (bvuge ?x609 (_ bv1 32))))
 (=> $x719 (= ?x256 ?x214)))))))
 ))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x734 (_ bv1 32))))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x719 (bvuge ?x609 (_ bv1 32))))
 (= $x719 $x344))))))
 ))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x734 (_ bv0 32))))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x609 (_ bv0 32))))
 (= $x698 $x329))))))
 ))
 (let (($x725 (and $x388 $x330)))
 (let (($x614 (and $x725 $x349)))
 (let (($x276 (and $x614 $x26)))
 (let (($x306 (and $x276 $x204)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (=> $x384 (= ?x177 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (= $x384 (bvuge ?x187 (_ bv1 32)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x764 (_ bv0 32))))
 (= $x472 (= ?x187 (_ bv0 32)))))))
 ))
 (let (($x298 (and $x28 $x658)))
 (let (($x300 (and $x298 $x506)))
 (let (($x606 (and $x300 $x89)))
 (let (($x191 (and $x606 $x306)))
 (let (($x706 (=> $x191 $x245)))
 (not $x706)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x15 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x783)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem ?x15))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv2 32))) ?x183))))
 (let ((?x177 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (=> $x384 (= ?x177 ?x605))))))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x547 (_ bv1 32))))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (= $x384 $x322))))))
 ))
 (let (($x658 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x533 (= false false)))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x764 (_ bv0 32))))
 (=> $x472 $x533)))))
 ))
 (let (($x102 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x547 (_ bv0 32))))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x764 (_ bv0 32))))
 (= $x472 $x315))))))
 ))
 (let (($x537 (and $x102 $x658)))
 (let (($x551 (and $x537 $x215)))
 (let (($x730 (and $x551 $x656)))
 (let (($x501 (= $x730 true)))
 (let (($x245 (= $x501 true)))
 (let ((?x542 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x93 (bvneg ?x542)))
 (let (($x667 (= ?x93 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x385 (= $x667 true)))
 (let (($x592 (= $x385 true)))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x396 (bvadd ?x783 input.dst.llvm-%m2)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv1 32))) (select input.dst.llvm-mem ?x396))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv2 32))) ?x313))))
 (let ((?x177 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (=> $x384 (= ?x177 ?x271))))))))))
 ))
 (let (($x554 (and $x551 $x285)))
 (let (($x707 (= $x554 true)))
 (let (($x248 (= $x707 true)))
 (let (($x635 (= $x248 true)))
 (let (($x415 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x716 (bvadd ?x783 input.dst.llvm-%m1)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv1 32))) (select input.dst.llvm-mem ?x716))))
 (let ((?x599 (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv2 32))) ?x414))))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x719 (bvuge ?x609 (_ bv1 32))))
 (=> $x719 (= ?x256 ?x599))))))))))
 ))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x547 (_ bv1 32))))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x719 (bvuge ?x609 (_ bv1 32))))
 (= $x719 $x322))))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x533 (= false false)))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x609 (_ bv0 32))))
 (=> $x698 $x533)))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x547 (_ bv0 32))))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x609 (_ bv0 32))))
 (= $x698 $x315))))))
 ))
 (let (($x82 (and $x445 $x330)))
 (let (($x239 (and $x82 $x136)))
 (let (($x264 (and $x239 $x415)))
 (let (($x130 (= $x264 true)))
 (let (($x195 (= $x130 true)))
 (let (($x740 (= $x195 true)))
 (let (($x705 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x716 (bvadd ?x783 input.dst.llvm-%m1)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x716))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv2 32))) ?x146)))
 (let ((?x758 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv3 32))) ?x190)))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x719 (bvuge ?x609 (_ bv1 32))))
 (=> $x719 (= ?x256 ?x758)))))))))))
 ))
 (let (($x556 (and $x239 $x705)))
 (let (($x411 (= $x556 true)))
 (let (($x207 (= $x411 true)))
 (let (($x651 (= $x207 true)))
 (let (($x37 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x396 (bvadd ?x783 input.dst.llvm-%m2)))
 (let ((?x632 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x396 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x396))))
 (let ((?x590 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x396 (_ bv2 32))) ?x632)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x396 (_ bv3 32))) ?x590)))
 (let ((?x177 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (=> $x384 (= ?x177 ?x308)))))))))))
 ))
 (let (($x402 (and $x551 $x37)))
 (let (($x7 (= $x402 true)))
 (let (($x619 (= $x7 true)))
 (let (($x240 (= $x619 true)))
 (let (($x229 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x716 (bvadd ?x783 input.dst.llvm-%m1)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv1 32))) (select input.dst.llvm-mem ?x716))))
 (let ((?x599 (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x716 (_ bv2 32))) ?x414))))
 (let ((?x214 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x734 (_ bv1 32))))
 (=> $x344 (= ?x214 ?x599))))))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x547 (_ bv1 32))))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x734 (_ bv1 32))))
 (= $x344 $x322))))))
 ))
 (let (($x755 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x533 (= false false)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x734 (_ bv0 32))))
 (=> $x329 $x533)))))
 ))
 (let (($x511 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x547 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x547 (_ bv0 32))))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x734 (_ bv0 32))))
 (= $x329 $x315))))))
 ))
 (let (($x84 (and $x511 $x755)))
 (let (($x85 (and $x84 $x69)))
 (let (($x398 (and $x85 $x229)))
 (let (($x284 (= $x398 true)))
 (let (($x21 (= $x284 true)))
 (let (($x778 (= $x21 true)))
 (let (($x480 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x716 (bvadd ?x783 input.dst.llvm-%m1)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x716))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv2 32))) ?x146)))
 (let ((?x758 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x716 (_ bv3 32))) ?x190)))
 (let ((?x214 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x734 (_ bv1 32))))
 (=> $x344 (= ?x214 ?x758)))))))))))
 ))
 (let (($x689 (and $x85 $x480)))
 (let (($x671 (= $x689 true)))
 (let (($x610 (= $x671 true)))
 (let (($x408 (= $x610 true)))
 (let ((?x593 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x672 (= (_ bv0 32) ?x593)))
 (let ((?x92 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x693 (= (_ bv0 32) ?x92)))
 (let ((?x383 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x453 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x383)))
 (let ((?x184 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x633 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x184)))
 (let (($x478 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x353 (and $x478 $x633)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x413 (and $x194 $x353)))
 (let (($x106 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x770 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x456 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x340 (and $x456 $x253)))
 (let (($x636 (not $x340)))
 (let (($x616 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x677 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x670 (and $x677 $x616)))
 (let (($x467 (and (not $x670) $x636)))
 (let (($x634 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x611 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x674 (and $x611 $x634)))
 (let (($x544 (not $x674)))
 (let (($x375 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x377 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x492 (and $x377 $x375)))
 (let (($x281 (and (not $x492) $x544)))
 (let (($x777 (and (and (and (and (and (and $x281 $x467) $x770) $x106) $x413) $x453) $x693)))
 (let (($x289 (and $x777 $x672)))
 (let (($x528 (= $x289 true)))
 (let (($x192 (= $x528 true)))
 (let (($x263 (= $x192 true)))
 (let ((?x509 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x324 (= (_ bv0 2) ?x509)))
 (let (($x268 (= $x324 true)))
 (let (($x775 (= $x268 true)))
 (let (($x174 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x771 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x99 (and $x771 $x174)))
 (let (($x746 (= $x99 true)))
 (let (($x741 (= $x746 true)))
 (let (($x347 (= $x741 true)))
 (let (($x261 (= ?x93 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x578 (= $x261 true)))
 (let (($x514 (= $x578 true)))
 (let (($x646 (and $x514 $x347)))
 (let (($x352 (and $x646 $x775)))
 (let (($x683 (and $x352 $x263)))
 (let (($x430 (and $x683 $x408)))
 (let (($x769 (and $x430 $x778)))
 (let (($x463 (and $x769 $x240)))
 (let (($x363 (and $x463 $x651)))
 (let (($x559 (and $x363 $x740)))
 (let (($x488 (and $x559 $x635)))
 (let (($x204 (and $x488 $x592)))
 (let (($x26 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x719 (bvuge ?x609 (_ bv1 32))))
 (=> $x719 (= ?x256 ?x214)))))))
 ))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x734 (_ bv1 32))))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x719 (bvuge ?x609 (_ bv1 32))))
 (= $x719 $x344))))))
 ))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x734 (_ bv0 32))))
 (let ((?x609 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x609 (_ bv0 32))))
 (= $x698 $x329))))))
 ))
 (let (($x725 (and $x388 $x330)))
 (let (($x614 (and $x725 $x349)))
 (let (($x276 (and $x614 $x26)))
 (let (($x306 (and $x276 $x204)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (=> $x384 (= ?x177 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x764 (_ bv1 32))))
 (= $x384 (bvuge ?x187 (_ bv1 32)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x764 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x764 (_ bv0 32))))
 (= $x472 (= ?x187 (_ bv0 32)))))))
 ))
 (let (($x298 (and $x28 $x658)))
 (let (($x300 (and $x298 $x506)))
 (let (($x606 (and $x300 $x89)))
 (let (($x191 (and $x606 $x306)))
 (let (($x706 (=> $x191 $x245)))
 (not $x706)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18421404)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x14041413)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18421407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18421404)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09800000) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xedaa0100)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xdf7dc9a8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x438c0454)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xdf7dc9a8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x438c0457)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xedaa0103)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x438c0454)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xedaa0100)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xdf7dc9a8)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000013) #x02
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!24 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000013) #x02
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!24 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x678 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x720)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv1 32))) (select input.dst.llvm-mem ?x678))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv2 32))) ?x311))))
 (let ((?x653 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (=> $x69 (= ?x653 ?x339))))))))))
 ))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x368 (_ bv1 32))))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (= $x69 $x708))))))
 ))
 (let (($x683 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x782 (= false false)))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x593 (_ bv0 32))))
 (=> $x672 $x782)))))
 ))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x368 (_ bv0 32))))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x593 (_ bv0 32))))
 (= $x672 $x607))))))
 ))
 (let (($x397 (and $x201 $x683)))
 (let (($x429 (and $x397 $x32)))
 (let (($x499 (and $x429 $x558)))
 (let (($x598 (= $x499 true)))
 (let (($x292 (= $x598 true)))
 (let ((?x689 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x671 (bvneg ?x689)))
 (let (($x212 (= ?x671 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (= $x212 true)))
 (let (($x150 (= $x158 true)))
 (let (($x400 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x422 (bvadd ?x720 input.dst.llvm-%m2)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd ?x422 (_ bv1 32))) (select input.dst.llvm-mem ?x422))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x422 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x422 (_ bv2 32))) ?x613))))
 (let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x614 (_ bv1 32))))
 (=> $x174 (= ?x575 ?x63))))))))))
 ))
 (let (($x767 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x368 (_ bv1 32))))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x614 (_ bv1 32))))
 (= $x174 $x708))))))
 ))
 (let (($x530 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x782 (= false false)))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x614 (_ bv0 32))))
 (=> $x256 $x782)))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x368 (_ bv0 32))))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x614 (_ bv0 32))))
 (= $x256 $x607))))))
 ))
 (let (($x33 (and $x178 $x530)))
 (let (($x776 (and $x33 $x767)))
 (let (($x48 (and $x776 $x400)))
 (let (($x54 (= $x48 true)))
 (let (($x74 (= $x54 true)))
 (let (($x428 (= $x74 true)))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x137))))
 (let ((?x653 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (=> $x69 (= ?x653 ?x101))))))))))
 ))
 (let (($x151 (and $x429 $x365)))
 (let (($x762 (= $x151 true)))
 (let (($x600 (= $x762 true)))
 (let (($x5 (= $x600 true)))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x420))))
 (let ((?x180 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv2 32))) ?x171)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv3 32))) ?x180)))
 (let ((?x653 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (=> $x69 (= ?x653 ?x64)))))))))))
 ))
 (let (($x155 (and $x429 $x334)))
 (let (($x354 (= $x155 true)))
 (let (($x249 (= $x354 true)))
 (let (($x305 (= $x249 true)))
 (let (($x493 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x422 (bvadd ?x720 input.dst.llvm-%m2)))
 (let ((?x721 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x422 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x422))))
 (let ((?x404 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x422 (_ bv2 32))) ?x721)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x422 (_ bv3 32))) ?x404)))
 (let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x614 (_ bv1 32))))
 (=> $x174 (= ?x575 ?x358)))))))))))
 ))
 (let (($x641 (and $x776 $x493)))
 (let (($x503 (= $x641 true)))
 (let (($x675 (= $x503 true)))
 (let (($x620 (= $x675 true)))
 (let (($x711 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x137))))
 (let ((?x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x608 (bvuge ?x92 (_ bv1 32))))
 (=> $x608 (= ?x12 ?x101))))))))))
 ))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x368 (_ bv1 32))))
 (let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x608 (bvuge ?x92 (_ bv1 32))))
 (= $x608 $x708))))))
 ))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x782 (= false false)))
 (let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x693 (= ?x92 (_ bv0 32))))
 (=> $x693 $x782)))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x368 (_ bv0 32))))
 (let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x693 (= ?x92 (_ bv0 32))))
 (= $x693 $x607))))))
 ))
 (let (($x474 (and $x269 $x221)))
 (let (($x585 (and $x474 $x419)))
 (let (($x583 (and $x585 $x711)))
 (let (($x454 (= $x583 true)))
 (let (($x763 (= $x454 true)))
 (let (($x648 (= $x763 true)))
 (let (($x147 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x420))))
 (let ((?x180 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv2 32))) ?x171)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv3 32))) ?x180)))
 (let ((?x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x608 (bvuge ?x92 (_ bv1 32))))
 (=> $x608 (= ?x12 ?x64)))))))))))
 ))
 (let (($x550 (and $x585 $x147)))
 (let (($x401 (= $x550 true)))
 (let (($x80 (= $x401 true)))
 (let (($x57 (= $x80 true)))
 (let ((?x738 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x415 (= (_ bv0 32) ?x738)))
 (let ((?x363 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x500 (= (_ bv0 32) ?x363)))
 (let ((?x207 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x651 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x207)))
 (let ((?x10 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x705 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x556 (and $x239 $x705)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x411 (and $x136 $x556)))
 (let (($x471 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x37 $x402)))
 (let (($x619 (not $x7)))
 (let (($x469 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x308 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x692 (and $x308 $x469)))
 (let (($x463 (and (not $x692) $x619)))
 (let (($x629 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x644 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x381 (and $x644 $x629)))
 (let (($x9 (not $x381)))
 (let (($x418 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x551 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x617 (and $x551 $x418)))
 (let (($x590 (and (not $x617) $x9)))
 (let (($x681 (and (and (and (and (and (and $x590 $x463) $x445) $x471) $x411) $x651) $x500)))
 (let (($x270 (and $x681 $x415)))
 (let (($x185 (= $x270 true)))
 (let (($x209 (= $x185 true)))
 (let (($x313 (= $x209 true)))
 (let ((?x778 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x769 (= (_ bv0 2) ?x778)))
 (let (($x260 (= $x769 true)))
 (let (($x102 (= $x260 true)))
 (let (($x599 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x283 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x596 (and $x283 $x599)))
 (let (($x515 (= $x596 true)))
 (let (($x229 (= $x515 true)))
 (let (($x398 (= $x229 true)))
 (let (($x408 (= ?x671 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x430 (= $x408 true)))
 (let (($x30 (= $x430 true)))
 (let (($x284 (and $x30 $x398)))
 (let (($x537 (and $x284 $x102)))
 (let (($x119 (and $x537 $x313)))
 (let (($x326 (and $x119 $x57)))
 (let (($x452 (and $x326 $x648)))
 (let (($x521 (and $x452 $x620)))
 (let (($x251 (and $x521 $x305)))
 (let (($x540 (and $x251 $x5)))
 (let (($x624 (and $x540 $x428)))
 (let (($x555 (and $x624 $x150)))
 (let (($x758 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x653 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (=> $x69 (= ?x653 ?x12)))))))
 ))
 (let (($x476 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x608 (bvuge ?x92 (_ bv1 32))))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (= $x69 $x608))))))
 ))
 (let (($x528 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x693 (= ?x92 (_ bv0 32))))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x593 (_ bv0 32))))
 (= $x672 $x693))))))
 ))
 (let (($x149 (and $x528 $x683)))
 (let (($x748 (and $x149 $x476)))
 (let (($x266 (and $x748 $x758)))
 (let (($x465 (and $x266 $x555)))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x614 (_ bv1 32))))
 (=> $x174 (= ?x575 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x614 (_ bv1 32))))
 (= $x174 (bvuge ?x344 (_ bv1 32)))))))
 ))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x614 (_ bv0 32))))
 (= $x256 (= ?x344 (_ bv0 32)))))))
 ))
 (let (($x519 (and $x316 $x530)))
 (let (($x741 (and $x519 $x746)))
 (let (($x492 (and $x741 $x375)))
 (let (($x475 (and $x492 $x465)))
 (let (($x497 (=> $x475 $x292)))
 (not $x497)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x678 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x720)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv1 32))) (select input.dst.llvm-mem ?x678))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv2 32))) ?x311))))
 (let ((?x653 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (=> $x69 (= ?x653 ?x339))))))))))
 ))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x368 (_ bv1 32))))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (= $x69 $x708))))))
 ))
 (let (($x683 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x782 (= false false)))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x593 (_ bv0 32))))
 (=> $x672 $x782)))))
 ))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x368 (_ bv0 32))))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x593 (_ bv0 32))))
 (= $x672 $x607))))))
 ))
 (let (($x397 (and $x201 $x683)))
 (let (($x429 (and $x397 $x32)))
 (let (($x499 (and $x429 $x558)))
 (let (($x598 (= $x499 true)))
 (let (($x292 (= $x598 true)))
 (let ((?x689 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x671 (bvneg ?x689)))
 (let (($x212 (= ?x671 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (= $x212 true)))
 (let (($x150 (= $x158 true)))
 (let (($x400 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x422 (bvadd ?x720 input.dst.llvm-%m2)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd ?x422 (_ bv1 32))) (select input.dst.llvm-mem ?x422))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x422 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x422 (_ bv2 32))) ?x613))))
 (let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x614 (_ bv1 32))))
 (=> $x174 (= ?x575 ?x63))))))))))
 ))
 (let (($x767 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x368 (_ bv1 32))))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x614 (_ bv1 32))))
 (= $x174 $x708))))))
 ))
 (let (($x530 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x782 (= false false)))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x614 (_ bv0 32))))
 (=> $x256 $x782)))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x368 (_ bv0 32))))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x614 (_ bv0 32))))
 (= $x256 $x607))))))
 ))
 (let (($x33 (and $x178 $x530)))
 (let (($x776 (and $x33 $x767)))
 (let (($x48 (and $x776 $x400)))
 (let (($x54 (= $x48 true)))
 (let (($x74 (= $x54 true)))
 (let (($x428 (= $x74 true)))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x137))))
 (let ((?x653 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (=> $x69 (= ?x653 ?x101))))))))))
 ))
 (let (($x151 (and $x429 $x365)))
 (let (($x762 (= $x151 true)))
 (let (($x600 (= $x762 true)))
 (let (($x5 (= $x600 true)))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x420))))
 (let ((?x180 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv2 32))) ?x171)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv3 32))) ?x180)))
 (let ((?x653 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (=> $x69 (= ?x653 ?x64)))))))))))
 ))
 (let (($x155 (and $x429 $x334)))
 (let (($x354 (= $x155 true)))
 (let (($x249 (= $x354 true)))
 (let (($x305 (= $x249 true)))
 (let (($x493 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x422 (bvadd ?x720 input.dst.llvm-%m2)))
 (let ((?x721 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x422 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x422))))
 (let ((?x404 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x422 (_ bv2 32))) ?x721)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x422 (_ bv3 32))) ?x404)))
 (let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x614 (_ bv1 32))))
 (=> $x174 (= ?x575 ?x358)))))))))))
 ))
 (let (($x641 (and $x776 $x493)))
 (let (($x503 (= $x641 true)))
 (let (($x675 (= $x503 true)))
 (let (($x620 (= $x675 true)))
 (let (($x711 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x137))))
 (let ((?x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x608 (bvuge ?x92 (_ bv1 32))))
 (=> $x608 (= ?x12 ?x101))))))))))
 ))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x368 (_ bv1 32))))
 (let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x608 (bvuge ?x92 (_ bv1 32))))
 (= $x608 $x708))))))
 ))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x782 (= false false)))
 (let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x693 (= ?x92 (_ bv0 32))))
 (=> $x693 $x782)))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x368 (_ bv0 32))))
 (let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x693 (= ?x92 (_ bv0 32))))
 (= $x693 $x607))))))
 ))
 (let (($x474 (and $x269 $x221)))
 (let (($x585 (and $x474 $x419)))
 (let (($x583 (and $x585 $x711)))
 (let (($x454 (= $x583 true)))
 (let (($x763 (= $x454 true)))
 (let (($x648 (= $x763 true)))
 (let (($x147 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x720 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x720 input.dst.llvm-%m1)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x420))))
 (let ((?x180 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv2 32))) ?x171)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv3 32))) ?x180)))
 (let ((?x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x608 (bvuge ?x92 (_ bv1 32))))
 (=> $x608 (= ?x12 ?x64)))))))))))
 ))
 (let (($x550 (and $x585 $x147)))
 (let (($x401 (= $x550 true)))
 (let (($x80 (= $x401 true)))
 (let (($x57 (= $x80 true)))
 (let ((?x738 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x415 (= (_ bv0 32) ?x738)))
 (let ((?x363 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x500 (= (_ bv0 32) ?x363)))
 (let ((?x207 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x651 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x207)))
 (let ((?x10 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x705 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x556 (and $x239 $x705)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x411 (and $x136 $x556)))
 (let (($x471 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x37 $x402)))
 (let (($x619 (not $x7)))
 (let (($x469 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x308 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x692 (and $x308 $x469)))
 (let (($x463 (and (not $x692) $x619)))
 (let (($x629 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x644 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x381 (and $x644 $x629)))
 (let (($x9 (not $x381)))
 (let (($x418 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x551 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x617 (and $x551 $x418)))
 (let (($x590 (and (not $x617) $x9)))
 (let (($x681 (and (and (and (and (and (and $x590 $x463) $x445) $x471) $x411) $x651) $x500)))
 (let (($x270 (and $x681 $x415)))
 (let (($x185 (= $x270 true)))
 (let (($x209 (= $x185 true)))
 (let (($x313 (= $x209 true)))
 (let ((?x778 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x769 (= (_ bv0 2) ?x778)))
 (let (($x260 (= $x769 true)))
 (let (($x102 (= $x260 true)))
 (let (($x599 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x283 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x596 (and $x283 $x599)))
 (let (($x515 (= $x596 true)))
 (let (($x229 (= $x515 true)))
 (let (($x398 (= $x229 true)))
 (let (($x408 (= ?x671 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x430 (= $x408 true)))
 (let (($x30 (= $x430 true)))
 (let (($x284 (and $x30 $x398)))
 (let (($x537 (and $x284 $x102)))
 (let (($x119 (and $x537 $x313)))
 (let (($x326 (and $x119 $x57)))
 (let (($x452 (and $x326 $x648)))
 (let (($x521 (and $x452 $x620)))
 (let (($x251 (and $x521 $x305)))
 (let (($x540 (and $x251 $x5)))
 (let (($x624 (and $x540 $x428)))
 (let (($x555 (and $x624 $x150)))
 (let (($x758 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x653 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (=> $x69 (= ?x653 ?x12)))))))
 ))
 (let (($x476 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x608 (bvuge ?x92 (_ bv1 32))))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x593 (_ bv1 32))))
 (= $x69 $x608))))))
 ))
 (let (($x528 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x92 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x693 (= ?x92 (_ bv0 32))))
 (let ((?x593 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x593 (_ bv0 32))))
 (= $x672 $x693))))))
 ))
 (let (($x149 (and $x528 $x683)))
 (let (($x748 (and $x149 $x476)))
 (let (($x266 (and $x748 $x758)))
 (let (($x465 (and $x266 $x555)))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x614 (_ bv1 32))))
 (=> $x174 (= ?x575 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x614 (_ bv1 32))))
 (= $x174 (bvuge ?x344 (_ bv1 32)))))))
 ))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x614 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x614 (_ bv0 32))))
 (= $x256 (= ?x344 (_ bv0 32)))))))
 ))
 (let (($x519 (and $x316 $x530)))
 (let (($x741 (and $x519 $x746)))
 (let (($x492 (and $x741 $x375)))
 (let (($x475 (and $x492 $x465)))
 (let (($x497 (=> $x475 $x292)))
 (not $x497)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x20222904)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x10080640)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40103440)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x10080640)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40103443)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x20222907)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40103440)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x20222904)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x10080640)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000020))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x100806c3) #x01
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000020) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000020))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000020))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000020) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000020) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000020) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x87c04100)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6c600004)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000041)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6c600007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x87c04103)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6c600004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x87c04100)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000041 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000041)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!25 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x861 (= true false)))
 (let (($x862 (= $x861 true)))
 (let ((?x846 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x847 (= (_ bv0 32) ?x846)))
 (let ((?x844 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x845 (= (_ bv0 32) ?x844)))
 (let ((?x842 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x843 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x842)))
 (let ((?x838 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x839 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x838)))
 (let (($x837 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x840 (and $x837 $x839)))
 (let (($x836 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x841 (and $x836 $x840)))
 (let (($x835 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x833 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x827 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x826 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x828 (and $x826 $x827)))
 (let (($x829 (not $x828)))
 (let (($x824 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x823 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x825 (and $x823 $x824)))
 (let (($x831 (and (not $x825) $x829)))
 (let (($x818 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x817 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x819 (and $x817 $x818)))
 (let (($x820 (not $x819)))
 (let (($x814 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x812 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x815 (and $x812 $x814)))
 (let (($x822 (and (not $x815) $x820)))
 (let (($x853 (and (and (and (and (and (and $x822 $x831) $x833) $x835) $x841) $x843) $x845)))
 (let (($x854 (and $x853 $x847)))
 (let (($x855 (= $x854 true)))
 (let (($x856 (= $x855 true)))
 (let (($x857 (= $x856 true)))
 (let (($x804 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x536 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x536))))
 (let ((?x215 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (=> $x599 (= ?x215 ?x379))))))))))
 ))
 (let (($x786 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x74 (_ bv1 32))))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (= $x599 $x703))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x190 (= false false)))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x653 (= ?x748 (_ bv0 32))))
 (=> $x653 $x190)))))
 ))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x74 (_ bv0 32))))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x653 (= ?x748 (_ bv0 32))))
 (= $x653 $x428))))))
 ))
 (let (($x605 (and $x112 $x140)))
 (let (($x167 (and $x605 $x786)))
 (let (($x805 (and $x167 $x804)))
 (let (($x806 (= $x805 true)))
 (let (($x807 (= $x806 true)))
 (let (($x808 (= $x807 true)))
 (let (($x794 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x242))))
 (let ((?x216 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (=> $x419 (= ?x216 ?x433))))))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x74 (_ bv1 32))))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (= $x419 $x703))))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x190 (= false false)))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x738 (_ bv0 32))))
 (=> $x415 $x190)))))
 ))
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x74 (_ bv0 32))))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x738 (_ bv0 32))))
 (= $x415 $x428))))))
 ))
 (let (($x544 (and $x674 $x119)))
 (let (($x486 (and $x544 $x107)))
 (let (($x795 (and $x486 $x794)))
 (let (($x796 (= $x795 true)))
 (let (($x797 (= $x796 true)))
 (let (($x798 (= $x797 true)))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x623 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x175)))
 (let ((?x460 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x623)))
 (let ((?x216 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (=> $x419 (= ?x216 ?x460)))))))))))
 ))
 (let (($x489 (and $x486 $x231)))
 (let (($x122 (= $x489 true)))
 (let (($x787 (= $x122 true)))
 (let (($x788 (= $x787 true)))
 (let (($x660 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x568 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x409))))
 (let ((?x560 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x568)))
 (let ((?x563 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x560)))
 (let ((?x215 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (=> $x599 (= ?x215 ?x563)))))))))))
 ))
 (let (($x710 (and $x167 $x660)))
 (let (($x702 (= $x710 true)))
 (let (($x733 (= $x702 true)))
 (let (($x545 (= $x733 true)))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x242))))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x363 (_ bv1 32))))
 (=> $x208 (= ?x570 ?x433))))))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x74 (_ bv1 32))))
 (let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x363 (_ bv1 32))))
 (= $x208 $x703))))))
 ))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x190 (= false false)))
 (let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x500 (= ?x363 (_ bv0 32))))
 (=> $x500 $x190)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x74 (_ bv0 32))))
 (let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x500 (= ?x363 (_ bv0 32))))
 (= $x500 $x428))))))
 ))
 (let (($x473 (and $x427 $x154)))
 (let (($x482 (and $x473 $x457)))
 (let (($x129 (and $x482 $x116)))
 (let (($x161 (= $x129 true)))
 (let (($x779 (= $x161 true)))
 (let (($x546 (= $x779 true)))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x623 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x175)))
 (let ((?x460 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x623)))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x363 (_ bv1 32))))
 (=> $x208 (= ?x570 ?x460)))))))))))
 ))
 (let (($x121 (and $x482 $x41)))
 (let (($x290 (= $x121 true)))
 (let (($x529 (= $x290 true)))
 (let (($x317 (= $x529 true)))
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x467 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x409))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x467)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x246)))
 (let ((?x215 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (=> $x599 (= ?x215 ?x271)))))))))))
 ))
 (let (($x245 (and $x167 $x656)))
 (let (($x637 (= $x245 true)))
 (let (($x743 (= $x637 true)))
 (let (($x273 (= $x743 true)))
 (let ((?x550 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x401 (bvneg ?x550)))
 (let (($x306 (= ?x401 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x701 (= $x306 true)))
 (let (($x294 (= $x701 true)))
 (let (($x217 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x568 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x409))))
 (let ((?x560 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x568)))
 (let ((?x563 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x560)))
 (let ((?x355 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x608 (_ bv1 32))))
 (=> $x24 (= ?x355 ?x563)))))))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x74 (_ bv1 32))))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x608 (_ bv1 32))))
 (= $x24 $x703))))))
 ))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x190 (= false false)))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x608 (_ bv0 32))))
 (=> $x85 $x190)))))
 ))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x74 (_ bv0 32))))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x608 (_ bv0 32))))
 (= $x85 $x428))))))
 ))
 (let (($x555 (and $x485 $x150)))
 (let (($x165 (and $x555 $x311)))
 (let (($x47 (and $x165 $x217)))
 (let (($x386 (= $x47 true)))
 (let (($x601 (= $x386 true)))
 (let (($x160 (= $x601 true)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x536 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x536))))
 (let ((?x355 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x608 (_ bv1 32))))
 (=> $x24 (= ?x355 ?x379))))))))))
 ))
 (let (($x173 (and $x165 $x237)))
 (let (($x211 (= $x173 true)))
 (let (($x309 (= $x211 true)))
 (let (($x516 (= $x309 true)))
 (let (($x691 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x781 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x291))))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x781)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x353)))
 (let ((?x216 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (=> $x419 (= ?x216 ?x267)))))))))))
 ))
 (let (($x192 (and $x486 $x691)))
 (let (($x665 (= $x192 true)))
 (let (($x45 (= $x665 true)))
 (let (($x424 (= $x45 true)))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x467 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x409))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x467)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x246)))
 (let ((?x355 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x608 (_ bv1 32))))
 (=> $x24 (= ?x355 ?x271)))))))))))
 ))
 (let (($x410 (and $x165 $x554)))
 (let (($x248 (= $x410 true)))
 (let (($x635 (= $x248 true)))
 (let (($x40 (= $x635 true)))
 (let (($x57 (= ?x401 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x326 (= $x57 true)))
 (let (($x366 (= $x326 true)))
 (let (($x328 (and $x366 $x40)))
 (let (($x547 (and $x328 $x424)))
 (let (($x369 (and $x547 $x516)))
 (let (($x204 (and $x369 $x160)))
 (let (($x44 (and $x204 $x294)))
 (let (($x576 (and $x44 $x273)))
 (let (($x657 (and $x576 $x317)))
 (let (($x148 (and $x657 $x546)))
 (let (($x6 (and $x148 $x545)))
 (let (($x789 (and $x6 $x788)))
 (let (($x799 (and $x789 $x798)))
 (let (($x809 (and $x799 $x808)))
 (let (($x858 (and $x809 $x857)))
 (let (($x64 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x216 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (=> $x419 (= ?x216 ?x570)))))))
 ))
 (let (($x707 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x363 (_ bv1 32))))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (= $x419 $x208))))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x500 (= ?x363 (_ bv0 32))))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x738 (_ bv0 32))))
 (= $x415 $x500))))))
 ))
 (let (($x111 (and $x185 $x119)))
 (let (($x488 (and $x111 $x707)))
 (let (($x181 (and $x488 $x64)))
 (let (($x859 (and $x181 $x858)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x355 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x215 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (=> $x599 (= ?x215 ?x355)))))))
 ))
 (let (($x515 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x608 (_ bv1 32))))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (= $x599 $x24))))))
 ))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x608 (_ bv0 32))))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x653 (= ?x748 (_ bv0 32))))
 (= $x653 $x85))))))
 ))
 (let (($x480 (and $x146 $x140)))
 (let (($x229 (and $x480 $x515)))
 (let (($x617 (and $x229 $x418)))
 (let (($x860 (and $x617 $x859)))
 (let (($x863 (=> $x860 $x862)))
 (not $x863))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x861 (= true false)))
 (let (($x862 (= $x861 true)))
 (let ((?x846 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x847 (= (_ bv0 32) ?x846)))
 (let ((?x844 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x845 (= (_ bv0 32) ?x844)))
 (let ((?x842 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x843 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x842)))
 (let ((?x838 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x839 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x838)))
 (let (($x837 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x840 (and $x837 $x839)))
 (let (($x836 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x841 (and $x836 $x840)))
 (let (($x835 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x833 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x827 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x826 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x828 (and $x826 $x827)))
 (let (($x829 (not $x828)))
 (let (($x824 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x823 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x825 (and $x823 $x824)))
 (let (($x831 (and (not $x825) $x829)))
 (let (($x818 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x817 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x819 (and $x817 $x818)))
 (let (($x820 (not $x819)))
 (let (($x814 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x812 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x815 (and $x812 $x814)))
 (let (($x822 (and (not $x815) $x820)))
 (let (($x853 (and (and (and (and (and (and $x822 $x831) $x833) $x835) $x841) $x843) $x845)))
 (let (($x854 (and $x853 $x847)))
 (let (($x855 (= $x854 true)))
 (let (($x856 (= $x855 true)))
 (let (($x857 (= $x856 true)))
 (let (($x804 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x536 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x536))))
 (let ((?x215 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (=> $x599 (= ?x215 ?x379))))))))))
 ))
 (let (($x786 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x74 (_ bv1 32))))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (= $x599 $x703))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x190 (= false false)))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x653 (= ?x748 (_ bv0 32))))
 (=> $x653 $x190)))))
 ))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x74 (_ bv0 32))))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x653 (= ?x748 (_ bv0 32))))
 (= $x653 $x428))))))
 ))
 (let (($x605 (and $x112 $x140)))
 (let (($x167 (and $x605 $x786)))
 (let (($x805 (and $x167 $x804)))
 (let (($x806 (= $x805 true)))
 (let (($x807 (= $x806 true)))
 (let (($x808 (= $x807 true)))
 (let (($x794 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x242))))
 (let ((?x216 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (=> $x419 (= ?x216 ?x433))))))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x74 (_ bv1 32))))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (= $x419 $x703))))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x190 (= false false)))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x738 (_ bv0 32))))
 (=> $x415 $x190)))))
 ))
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x74 (_ bv0 32))))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x738 (_ bv0 32))))
 (= $x415 $x428))))))
 ))
 (let (($x544 (and $x674 $x119)))
 (let (($x486 (and $x544 $x107)))
 (let (($x795 (and $x486 $x794)))
 (let (($x796 (= $x795 true)))
 (let (($x797 (= $x796 true)))
 (let (($x798 (= $x797 true)))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x623 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x175)))
 (let ((?x460 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x623)))
 (let ((?x216 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (=> $x419 (= ?x216 ?x460)))))))))))
 ))
 (let (($x489 (and $x486 $x231)))
 (let (($x122 (= $x489 true)))
 (let (($x787 (= $x122 true)))
 (let (($x788 (= $x787 true)))
 (let (($x660 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x568 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x409))))
 (let ((?x560 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x568)))
 (let ((?x563 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x560)))
 (let ((?x215 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (=> $x599 (= ?x215 ?x563)))))))))))
 ))
 (let (($x710 (and $x167 $x660)))
 (let (($x702 (= $x710 true)))
 (let (($x733 (= $x702 true)))
 (let (($x545 (= $x733 true)))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x242))))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x363 (_ bv1 32))))
 (=> $x208 (= ?x570 ?x433))))))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x74 (_ bv1 32))))
 (let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x363 (_ bv1 32))))
 (= $x208 $x703))))))
 ))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x190 (= false false)))
 (let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x500 (= ?x363 (_ bv0 32))))
 (=> $x500 $x190)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x74 (_ bv0 32))))
 (let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x500 (= ?x363 (_ bv0 32))))
 (= $x500 $x428))))))
 ))
 (let (($x473 (and $x427 $x154)))
 (let (($x482 (and $x473 $x457)))
 (let (($x129 (and $x482 $x116)))
 (let (($x161 (= $x129 true)))
 (let (($x779 (= $x161 true)))
 (let (($x546 (= $x779 true)))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x623 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x175)))
 (let ((?x460 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x623)))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x363 (_ bv1 32))))
 (=> $x208 (= ?x570 ?x460)))))))))))
 ))
 (let (($x121 (and $x482 $x41)))
 (let (($x290 (= $x121 true)))
 (let (($x529 (= $x290 true)))
 (let (($x317 (= $x529 true)))
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x467 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x409))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x467)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x246)))
 (let ((?x215 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (=> $x599 (= ?x215 ?x271)))))))))))
 ))
 (let (($x245 (and $x167 $x656)))
 (let (($x637 (= $x245 true)))
 (let (($x743 (= $x637 true)))
 (let (($x273 (= $x743 true)))
 (let ((?x550 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x401 (bvneg ?x550)))
 (let (($x306 (= ?x401 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x701 (= $x306 true)))
 (let (($x294 (= $x701 true)))
 (let (($x217 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x568 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x409))))
 (let ((?x560 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x568)))
 (let ((?x563 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x560)))
 (let ((?x355 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x608 (_ bv1 32))))
 (=> $x24 (= ?x355 ?x563)))))))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x74 (_ bv1 32))))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x608 (_ bv1 32))))
 (= $x24 $x703))))))
 ))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x190 (= false false)))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x608 (_ bv0 32))))
 (=> $x85 $x190)))))
 ))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x74 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x74 (_ bv0 32))))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x608 (_ bv0 32))))
 (= $x85 $x428))))))
 ))
 (let (($x555 (and $x485 $x150)))
 (let (($x165 (and $x555 $x311)))
 (let (($x47 (and $x165 $x217)))
 (let (($x386 (= $x47 true)))
 (let (($x601 (= $x386 true)))
 (let (($x160 (= $x601 true)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x536 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x536))))
 (let ((?x355 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x608 (_ bv1 32))))
 (=> $x24 (= ?x355 ?x379))))))))))
 ))
 (let (($x173 (and $x165 $x237)))
 (let (($x211 (= $x173 true)))
 (let (($x309 (= $x211 true)))
 (let (($x516 (= $x309 true)))
 (let (($x691 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x291 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x781 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x291))))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x781)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x353)))
 (let ((?x216 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (=> $x419 (= ?x216 ?x267)))))))))))
 ))
 (let (($x192 (and $x486 $x691)))
 (let (($x665 (= $x192 true)))
 (let (($x45 (= $x665 true)))
 (let (($x424 (= $x45 true)))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x409 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x467 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x409))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x467)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x246)))
 (let ((?x355 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x608 (_ bv1 32))))
 (=> $x24 (= ?x355 ?x271)))))))))))
 ))
 (let (($x410 (and $x165 $x554)))
 (let (($x248 (= $x410 true)))
 (let (($x635 (= $x248 true)))
 (let (($x40 (= $x635 true)))
 (let (($x57 (= ?x401 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x326 (= $x57 true)))
 (let (($x366 (= $x326 true)))
 (let (($x328 (and $x366 $x40)))
 (let (($x547 (and $x328 $x424)))
 (let (($x369 (and $x547 $x516)))
 (let (($x204 (and $x369 $x160)))
 (let (($x44 (and $x204 $x294)))
 (let (($x576 (and $x44 $x273)))
 (let (($x657 (and $x576 $x317)))
 (let (($x148 (and $x657 $x546)))
 (let (($x6 (and $x148 $x545)))
 (let (($x789 (and $x6 $x788)))
 (let (($x799 (and $x789 $x798)))
 (let (($x809 (and $x799 $x808)))
 (let (($x858 (and $x809 $x857)))
 (let (($x64 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x216 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (=> $x419 (= ?x216 ?x570)))))))
 ))
 (let (($x707 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x363 (_ bv1 32))))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x738 (_ bv1 32))))
 (= $x419 $x208))))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x363 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x500 (= ?x363 (_ bv0 32))))
 (let ((?x738 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x738 (_ bv0 32))))
 (= $x415 $x500))))))
 ))
 (let (($x111 (and $x185 $x119)))
 (let (($x488 (and $x111 $x707)))
 (let (($x181 (and $x488 $x64)))
 (let (($x859 (and $x181 $x858)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x355 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x215 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (=> $x599 (= ?x215 ?x355)))))))
 ))
 (let (($x515 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x608 (_ bv1 32))))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (bvuge ?x748 (_ bv1 32))))
 (= $x599 $x24))))))
 ))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x608 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x608 (_ bv0 32))))
 (let ((?x748 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x653 (= ?x748 (_ bv0 32))))
 (= $x653 $x85))))))
 ))
 (let (($x480 (and $x146 $x140)))
 (let (($x229 (and $x480 $x515)))
 (let (($x617 (and $x229 $x418)))
 (let (($x860 (and $x617 $x859)))
 (let (($x863 (=> $x860 $x862)))
 (not $x863))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!27))
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!28))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000bc000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000bc003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000bc000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!31 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!29 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!31 (k!29 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1!32 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!32 (k!29 x!0)))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!26 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!28 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!28 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!27 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 x!0)))))
  (define-fun k!30 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!34 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!34 (k!30 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!33 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!33 (k!30 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!27 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!26 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!26 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!27 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x389bf3f0)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xb7efbcff)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x5cefffd2)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x842be6b8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!27))
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!28))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x842be6bb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x389bf3f3)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x842be6b8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x389bf3f0)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!30 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!31 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!31 (k!30 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x5cefffd5 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x5cefffd4 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x5cefffd3 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x5cefffd2 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!26 (bvadd #x5cefffd5 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x5cefffd4 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x5cefffd3 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x5cefffd2 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!33 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!33 (k!30 x!0)))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x5cefffd5 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x5cefffd4 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x5cefffd3 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x5cefffd2 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!34 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!29 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!34 (k!29 x!0)))
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1!32 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!32 (k!29 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #xb7efbd02 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xb7efbd01 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xb7efbd00 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xb7efbcff (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!28 (bvadd #xb7efbd02 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #xb7efbd01 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #xb7efbd00 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #xb7efbcff (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #xb7efbd02 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbd01 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbd00 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbcff (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m2-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x871 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x878 (=> $x871 true)))
 (let (($x879 (= $x878 true)))
 (let (($x880 (= $x879 true)))
 (let (($x872 (= $x871 true)))
 (let (($x873 (= $x872 true)))
 (let (($x874 (= $x873 true)))
 (let ((?x31 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x534 (= (_ bv0 32) ?x31)))
 (let ((?x446 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x580 (= (_ bv0 32) ?x446)))
 (let ((?x218 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x564 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x496 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x736 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x496)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x17 (and $x299 $x736)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x230 $x17)))
 (let (($x318 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x281 (and $x117 $x114)))
 (let (($x670 (not $x281)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x726 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x615 (and $x726 $x29)))
 (let (($x301 (and (not $x615) $x670)))
 (let (($x426 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x436 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x436 $x426)))
 (let (($x754 (not $x257)))
 (let (($x541 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x448 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x448 $x541)))
 (let (($x728 (and (not $x250) $x754)))
 (let (($x706 (and (and (and (and (and (and $x728 $x301) $x253) $x318) $x163) $x564) $x580)))
 (let (($x233 (and $x706 $x534)))
 (let (($x865 (= $x233 true)))
 (let (($x866 (= $x865 true)))
 (let (($x867 (= $x866 true)))
 (let (($x687 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem ?x837))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv2 32))) ?x472))))
 (let ((?x409 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (=> $x624 (= ?x409 ?x297))))))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x819 (bvuge ?x804 (_ bv1 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (= $x624 $x819))))))
 ))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x180 (= false false)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x488 (_ bv0 32))))
 (=> $x216 $x180)))))
 ))
 (let (($x768 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (= ?x804 (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x488 (_ bv0 32))))
 (= $x216 $x805))))))
 ))
 (let (($x168 (and $x768 $x227)))
 (let (($x310 (and $x168 $x324)))
 (let (($x15 (and $x310 $x687)))
 (let (($x592 (= $x15 true)))
 (let (($x735 (= $x592 true)))
 (let (($x371 (= $x735 true)))
 (let (($x497 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x450 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x162 (and $x450 $x497)))
 (let (($x499 (= $x162 true)))
 (let (($x598 (= $x499 true)))
 (let (($x558 (= $x598 true)))
 (let (($x475 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x83 (bvadd ?x836 input.dst.llvm-%m1)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x65))))
 (let ((?x386 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (=> $x369 (= ?x386 ?x483))))))))))
 ))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x819 (bvuge ?x804 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (= $x369 $x819))))))
 ))
 (let (($x744 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x180 (= false false)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x665 (= ?x192 (_ bv0 32))))
 (=> $x665 $x180)))))
 ))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (= ?x804 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x665 (= ?x192 (_ bv0 32))))
 (= $x665 $x805))))))
 ))
 (let (($x380 (and $x642 $x744)))
 (let (($x602 (and $x380 $x73)))
 (let (($x462 (and $x602 $x475)))
 (let (($x60 (= $x462 true)))
 (let (($x234 (= $x60 true)))
 (let (($x275 (= $x234 true)))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x83 (bvadd ?x836 input.dst.llvm-%m1)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x83))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv2 32))) ?x84)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv3 32))) ?x322)))
 (let ((?x386 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (=> $x369 (= ?x386 ?x36)))))))))))
 ))
 (let (($x540 (and $x602 $x600)))
 (let (($x5 (= $x540 true)))
 (let (($x81 (= $x5 true)))
 (let (($x737 (= $x81 true)))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x777 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x837))))
 (let ((?x672 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv2 32))) ?x777)))
 (let ((?x528 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv3 32))) ?x672)))
 (let ((?x409 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (=> $x624 (= ?x409 ?x528)))))))))))
 ))
 (let (($x151 (and $x310 $x365)))
 (let (($x251 (= $x151 true)))
 (let (($x479 (= $x251 true)))
 (let (($x354 (= $x479 true)))
 (let (($x756 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x83 (bvadd ?x836 input.dst.llvm-%m1)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x65))))
 (let ((?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x247 (_ bv1 32))))
 (=> $x516 (= ?x47 ?x483))))))))))
 ))
 (let (($x461 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x819 (bvuge ?x804 (_ bv1 32))))
 (let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x247 (_ bv1 32))))
 (= $x516 $x819))))))
 ))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x180 (= false false)))
 (let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x247 (_ bv0 32))))
 (=> $x62 $x180)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (= ?x804 (_ bv0 32))))
 (let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x247 (_ bv0 32))))
 (= $x62 $x805))))))
 ))
 (let (($x110 (and $x321 $x293)))
 (let (($x286 (and $x110 $x461)))
 (let (($x210 (and $x286 $x756)))
 (let (($x144 (= $x210 true)))
 (let (($x201 (= $x144 true)))
 (let (($x244 (= $x201 true)))
 (let (($x609 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x83 (bvadd ?x836 input.dst.llvm-%m1)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x83))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv2 32))) ?x84)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv3 32))) ?x322)))
 (let ((?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x247 (_ bv1 32))))
 (=> $x516 (= ?x47 ?x36)))))))))))
 ))
 (let (($x238 (and $x286 $x609)))
 (let (($x89 (= $x238 true)))
 (let (($x718 (= $x89 true)))
 (let (($x177 (= $x718 true)))
 (let (($x759 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x841 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x837))))
 (let ((?x843 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv2 32))) ?x841)))
 (let ((?x845 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv3 32))) ?x843)))
 (let ((?x409 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (=> $x624 (= ?x409 ?x845)))))))))))
 ))
 (let (($x106 (and $x310 $x759)))
 (let (($x453 (= $x106 true)))
 (let (($x315 (= $x453 true)))
 (let (($x413 (= $x315 true)))
 (let ((?x294 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x44 (bvneg ?x294)))
 (let (($x778 (= ?x44 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x260 (= $x778 true)))
 (let (($x102 (= $x260 true)))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x777 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x837))))
 (let ((?x672 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv2 32))) ?x777)))
 (let ((?x528 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv3 32))) ?x672)))
 (let ((?x583 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (bvuge ?x208 (_ bv1 32))))
 (=> $x428 (= ?x583 ?x528)))))))))))
 ))
 (let (($x822 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x819 (bvuge ?x804 (_ bv1 32))))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (bvuge ?x208 (_ bv1 32))))
 (= $x428 $x819))))))
 ))
 (let (($x810 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x180 (= false false)))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x585 (= ?x208 (_ bv0 32))))
 (=> $x585 $x180)))))
 ))
 (let (($x807 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (= ?x804 (_ bv0 32))))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x585 (= ?x208 (_ bv0 32))))
 (= $x585 $x805))))))
 ))
 (let (($x811 (and $x807 $x810)))
 (let (($x823 (and $x811 $x822)))
 (let (($x30 (and $x823 $x430)))
 (let (($x66 (= $x30 true)))
 (let (($x663 (= $x66 true)))
 (let (($x283 (= $x663 true)))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem ?x837))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv2 32))) ?x472))))
 (let ((?x583 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (bvuge ?x208 (_ bv1 32))))
 (=> $x428 (= ?x583 ?x297))))))))))
 ))
 (let (($x298 (and $x823 $x197)))
 (let (($x384 (= $x298 true)))
 (let (($x658 (= $x384 true)))
 (let (($x438 (= $x658 true)))
 (let (($x153 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x83 (bvadd ?x836 input.dst.llvm-%m1)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x83))))
 (let ((?x590 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x83 (_ bv2 32))) ?x308)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x83 (_ bv3 32))) ?x590)))
 (let ((?x386 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (=> $x369 (= ?x386 ?x240)))))))))))
 ))
 (let (($x133 (and $x602 $x153)))
 (let (($x699 (= $x133 true)))
 (let (($x128 (= $x699 true)))
 (let (($x574 (= $x128 true)))
 (let (($x847 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x841 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x837))))
 (let ((?x843 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv2 32))) ?x841)))
 (let ((?x845 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv3 32))) ?x843)))
 (let ((?x583 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (bvuge ?x208 (_ bv1 32))))
 (=> $x428 (= ?x583 ?x845)))))))))))
 ))
 (let (($x854 (and $x823 $x847)))
 (let (($x855 (= $x854 true)))
 (let (($x856 (= $x855 true)))
 (let (($x857 (= $x856 true)))
 (let (($x112 (= ?x44 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x605 (= $x112 true)))
 (let (($x487 (= $x605 true)))
 (let (($x858 (and $x487 $x857)))
 (let (($x304 (and $x858 $x574)))
 (let (($x70 (and $x304 $x438)))
 (let (($x414 (and $x70 $x283)))
 (let (($x537 (and $x414 $x102)))
 (let (($x612 (and $x537 $x413)))
 (let (($x495 (and $x612 $x177)))
 (let (($x397 (and $x495 $x244)))
 (let (($x249 (and $x397 $x354)))
 (let (($x727 (and $x249 $x737)))
 (let (($x339 (and $x727 $x275)))
 (let (($x292 (and $x339 $x558)))
 (let (($x673 (and $x292 $x371)))
 (let (($x868 (and $x673 $x867)))
 (let (($x875 (and $x868 $x874)))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x386 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (=> $x369 (= ?x386 ?x47)))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x247 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (= $x369 $x516))))))
 ))
 (let (($x424 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x247 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x665 (= ?x192 (_ bv0 32))))
 (= $x665 $x62))))))
 ))
 (let (($x327 (and $x424 $x744)))
 (let (($x565 (and $x327 $x331)))
 (let (($x385 (and $x565 $x204)))
 (let (($x876 (and $x385 $x875)))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x409 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (=> $x624 (= ?x409 ?x583)))))))
 ))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (bvuge ?x208 (_ bv1 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (= $x624 $x428))))))
 ))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x585 (= ?x208 (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x488 (_ bv0 32))))
 (= $x216 $x585))))))
 ))
 (let (($x147 (and $x171 $x227)))
 (let (($x150 (and $x147 $x158)))
 (let (($x178 (and $x150 $x300)))
 (let (($x877 (and $x178 $x876)))
 (let (($x881 (=> $x877 $x880)))
 (not $x881)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x871 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x878 (=> $x871 true)))
 (let (($x879 (= $x878 true)))
 (let (($x880 (= $x879 true)))
 (let (($x872 (= $x871 true)))
 (let (($x873 (= $x872 true)))
 (let (($x874 (= $x873 true)))
 (let ((?x31 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x534 (= (_ bv0 32) ?x31)))
 (let ((?x446 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x580 (= (_ bv0 32) ?x446)))
 (let ((?x218 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x564 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x496 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x736 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x496)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x17 (and $x299 $x736)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x230 $x17)))
 (let (($x318 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x281 (and $x117 $x114)))
 (let (($x670 (not $x281)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x726 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x615 (and $x726 $x29)))
 (let (($x301 (and (not $x615) $x670)))
 (let (($x426 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x436 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x436 $x426)))
 (let (($x754 (not $x257)))
 (let (($x541 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x448 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x448 $x541)))
 (let (($x728 (and (not $x250) $x754)))
 (let (($x706 (and (and (and (and (and (and $x728 $x301) $x253) $x318) $x163) $x564) $x580)))
 (let (($x233 (and $x706 $x534)))
 (let (($x865 (= $x233 true)))
 (let (($x866 (= $x865 true)))
 (let (($x867 (= $x866 true)))
 (let (($x687 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem ?x837))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv2 32))) ?x472))))
 (let ((?x409 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (=> $x624 (= ?x409 ?x297))))))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x819 (bvuge ?x804 (_ bv1 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (= $x624 $x819))))))
 ))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x180 (= false false)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x488 (_ bv0 32))))
 (=> $x216 $x180)))))
 ))
 (let (($x768 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (= ?x804 (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x488 (_ bv0 32))))
 (= $x216 $x805))))))
 ))
 (let (($x168 (and $x768 $x227)))
 (let (($x310 (and $x168 $x324)))
 (let (($x15 (and $x310 $x687)))
 (let (($x592 (= $x15 true)))
 (let (($x735 (= $x592 true)))
 (let (($x371 (= $x735 true)))
 (let (($x497 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x450 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x162 (and $x450 $x497)))
 (let (($x499 (= $x162 true)))
 (let (($x598 (= $x499 true)))
 (let (($x558 (= $x598 true)))
 (let (($x475 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x83 (bvadd ?x836 input.dst.llvm-%m1)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x65))))
 (let ((?x386 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (=> $x369 (= ?x386 ?x483))))))))))
 ))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x819 (bvuge ?x804 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (= $x369 $x819))))))
 ))
 (let (($x744 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x180 (= false false)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x665 (= ?x192 (_ bv0 32))))
 (=> $x665 $x180)))))
 ))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (= ?x804 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x665 (= ?x192 (_ bv0 32))))
 (= $x665 $x805))))))
 ))
 (let (($x380 (and $x642 $x744)))
 (let (($x602 (and $x380 $x73)))
 (let (($x462 (and $x602 $x475)))
 (let (($x60 (= $x462 true)))
 (let (($x234 (= $x60 true)))
 (let (($x275 (= $x234 true)))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x83 (bvadd ?x836 input.dst.llvm-%m1)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x83))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv2 32))) ?x84)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv3 32))) ?x322)))
 (let ((?x386 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (=> $x369 (= ?x386 ?x36)))))))))))
 ))
 (let (($x540 (and $x602 $x600)))
 (let (($x5 (= $x540 true)))
 (let (($x81 (= $x5 true)))
 (let (($x737 (= $x81 true)))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x777 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x837))))
 (let ((?x672 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv2 32))) ?x777)))
 (let ((?x528 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv3 32))) ?x672)))
 (let ((?x409 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (=> $x624 (= ?x409 ?x528)))))))))))
 ))
 (let (($x151 (and $x310 $x365)))
 (let (($x251 (= $x151 true)))
 (let (($x479 (= $x251 true)))
 (let (($x354 (= $x479 true)))
 (let (($x756 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x83 (bvadd ?x836 input.dst.llvm-%m1)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x65))))
 (let ((?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x247 (_ bv1 32))))
 (=> $x516 (= ?x47 ?x483))))))))))
 ))
 (let (($x461 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x819 (bvuge ?x804 (_ bv1 32))))
 (let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x247 (_ bv1 32))))
 (= $x516 $x819))))))
 ))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x180 (= false false)))
 (let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x247 (_ bv0 32))))
 (=> $x62 $x180)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (= ?x804 (_ bv0 32))))
 (let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x247 (_ bv0 32))))
 (= $x62 $x805))))))
 ))
 (let (($x110 (and $x321 $x293)))
 (let (($x286 (and $x110 $x461)))
 (let (($x210 (and $x286 $x756)))
 (let (($x144 (= $x210 true)))
 (let (($x201 (= $x144 true)))
 (let (($x244 (= $x201 true)))
 (let (($x609 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x83 (bvadd ?x836 input.dst.llvm-%m1)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x83))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv2 32))) ?x84)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv3 32))) ?x322)))
 (let ((?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x247 (_ bv1 32))))
 (=> $x516 (= ?x47 ?x36)))))))))))
 ))
 (let (($x238 (and $x286 $x609)))
 (let (($x89 (= $x238 true)))
 (let (($x718 (= $x89 true)))
 (let (($x177 (= $x718 true)))
 (let (($x759 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x841 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x837))))
 (let ((?x843 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv2 32))) ?x841)))
 (let ((?x845 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv3 32))) ?x843)))
 (let ((?x409 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (=> $x624 (= ?x409 ?x845)))))))))))
 ))
 (let (($x106 (and $x310 $x759)))
 (let (($x453 (= $x106 true)))
 (let (($x315 (= $x453 true)))
 (let (($x413 (= $x315 true)))
 (let ((?x294 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x44 (bvneg ?x294)))
 (let (($x778 (= ?x44 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x260 (= $x778 true)))
 (let (($x102 (= $x260 true)))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x777 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x837))))
 (let ((?x672 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv2 32))) ?x777)))
 (let ((?x528 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x837 (_ bv3 32))) ?x672)))
 (let ((?x583 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (bvuge ?x208 (_ bv1 32))))
 (=> $x428 (= ?x583 ?x528)))))))))))
 ))
 (let (($x822 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x819 (bvuge ?x804 (_ bv1 32))))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (bvuge ?x208 (_ bv1 32))))
 (= $x428 $x819))))))
 ))
 (let (($x810 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x180 (= false false)))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x585 (= ?x208 (_ bv0 32))))
 (=> $x585 $x180)))))
 ))
 (let (($x807 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x804 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (= ?x804 (_ bv0 32))))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x585 (= ?x208 (_ bv0 32))))
 (= $x585 $x805))))))
 ))
 (let (($x811 (and $x807 $x810)))
 (let (($x823 (and $x811 $x822)))
 (let (($x30 (and $x823 $x430)))
 (let (($x66 (= $x30 true)))
 (let (($x663 (= $x66 true)))
 (let (($x283 (= $x663 true)))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem ?x837))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x837 (_ bv2 32))) ?x472))))
 (let ((?x583 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (bvuge ?x208 (_ bv1 32))))
 (=> $x428 (= ?x583 ?x297))))))))))
 ))
 (let (($x298 (and $x823 $x197)))
 (let (($x384 (= $x298 true)))
 (let (($x658 (= $x384 true)))
 (let (($x438 (= $x658 true)))
 (let (($x153 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x83 (bvadd ?x836 input.dst.llvm-%m1)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x83))))
 (let ((?x590 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x83 (_ bv2 32))) ?x308)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x83 (_ bv3 32))) ?x590)))
 (let ((?x386 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (=> $x369 (= ?x386 ?x240)))))))))))
 ))
 (let (($x133 (and $x602 $x153)))
 (let (($x699 (= $x133 true)))
 (let (($x128 (= $x699 true)))
 (let (($x574 (= $x128 true)))
 (let (($x847 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x836 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x837 (bvadd ?x836 input.dst.llvm-%m2)))
 (let ((?x841 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x837))))
 (let ((?x843 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv2 32))) ?x841)))
 (let ((?x845 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x837 (_ bv3 32))) ?x843)))
 (let ((?x583 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (bvuge ?x208 (_ bv1 32))))
 (=> $x428 (= ?x583 ?x845)))))))))))
 ))
 (let (($x854 (and $x823 $x847)))
 (let (($x855 (= $x854 true)))
 (let (($x856 (= $x855 true)))
 (let (($x857 (= $x856 true)))
 (let (($x112 (= ?x44 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x605 (= $x112 true)))
 (let (($x487 (= $x605 true)))
 (let (($x858 (and $x487 $x857)))
 (let (($x304 (and $x858 $x574)))
 (let (($x70 (and $x304 $x438)))
 (let (($x414 (and $x70 $x283)))
 (let (($x537 (and $x414 $x102)))
 (let (($x612 (and $x537 $x413)))
 (let (($x495 (and $x612 $x177)))
 (let (($x397 (and $x495 $x244)))
 (let (($x249 (and $x397 $x354)))
 (let (($x727 (and $x249 $x737)))
 (let (($x339 (and $x727 $x275)))
 (let (($x292 (and $x339 $x558)))
 (let (($x673 (and $x292 $x371)))
 (let (($x868 (and $x673 $x867)))
 (let (($x875 (and $x868 $x874)))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x386 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (=> $x369 (= ?x386 ?x47)))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x247 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x192 (_ bv1 32))))
 (= $x369 $x516))))))
 ))
 (let (($x424 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x247 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x247 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x665 (= ?x192 (_ bv0 32))))
 (= $x665 $x62))))))
 ))
 (let (($x327 (and $x424 $x744)))
 (let (($x565 (and $x327 $x331)))
 (let (($x385 (and $x565 $x204)))
 (let (($x876 (and $x385 $x875)))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x409 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (=> $x624 (= ?x409 ?x583)))))))
 ))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (bvuge ?x208 (_ bv1 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (bvuge ?x488 (_ bv1 32))))
 (= $x624 $x428))))))
 ))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x585 (= ?x208 (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x488 (_ bv0 32))))
 (= $x216 $x585))))))
 ))
 (let (($x147 (and $x171 $x227)))
 (let (($x150 (and $x147 $x158)))
 (let (($x178 (and $x150 $x300)))
 (let (($x877 (and $x178 $x876)))
 (let (($x881 (=> $x877 $x880)))
 (not $x881)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x885 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x886 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x885)))
 (let ((?x883 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L2%3%fcallEnd)))
 (let ((?x884 (bvadd input.spec-%var-fi-0.L2%3%fcallStart ?x883)))
 (let (($x887 (= ?x884 ?x886)))
 (let (($x888 (= $x887 true)))
 (let (($x889 (= $x888 true)))
 (let ((?x77 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x108 (bvneg ?x77)))
 (let (($x125 (= ?x108 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x164 (= $x125 true)))
 (let (($x584 (= $x164 true)))
 (let (($x71 (= ?x108 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x595 (= $x71 true)))
 (let (($x543 (= $x595 true)))
 (let (($x100 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x196 (= $x100 true)))
 (let (($x323 (= $x196 true)))
 (let (($x335 (= $x323 true)))
 (let (($x148 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x161 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x780 (and $x161 $x148)))
 (let (($x98 (and $x780 $x100)))
 (let (($x52 (= $x98 true)))
 (let (($x53 (= $x52 true)))
 (let (($x43 (= $x53 true)))
 (let ((?x561 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x716 (= (_ bv0 32) ?x561)))
 (let ((?x604 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x142 (= (_ bv0 32) ?x604)))
 (let ((?x648 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x648)))
 (let ((?x422 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x454 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x422)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x755 (and $x382 $x454)))
 (let (($x548 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x548 $x755)))
 (let (($x850 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x834 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x848 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x831 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x827 (and $x831 $x848)))
 (let (($x828 (not $x827)))
 (let (($x833 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x830 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x849 (and $x830 $x833)))
 (let (($x829 (and (not $x849) $x828)))
 (let (($x821 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x815 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x816 (and $x815 $x821)))
 (let (($x818 (not $x816)))
 (let (($x812 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x798 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x814 (and $x798 $x812)))
 (let (($x825 (and (not $x814) $x818)))
 (let (($x76 (and (and (and (and (and (and $x825 $x829) $x834) $x850) $x33) $x103) $x142)))
 (let (($x432 (and $x76 $x716)))
 (let (($x38 (= $x432 true)))
 (let (($x490 (= $x38 true)))
 (let (($x50 (= $x490 true)))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem ?x728))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv2 32))) ?x581))))
 (let ((?x837 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (=> $x806 (= ?x837 ?x391))))))))))
 ))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x475 (_ bv1 32))))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (= $x806 $x634))))))
 ))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x565 (_ bv0 32))))
 (=> $x386 $x160)))))
 ))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x462 (= ?x475 (_ bv0 32))))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x565 (_ bv0 32))))
 (= $x386 $x462))))))
 ))
 (let (($x568 (and $x309 $x306)))
 (let (($x217 (and $x568 $x387)))
 (let (($x231 (and $x217 $x6)))
 (let (($x489 (= $x231 true)))
 (let (($x787 (= $x489 true)))
 (let (($x122 (= $x787 true)))
 (let (($x166 (= $x780 true)))
 (let (($x254 (= $x166 true)))
 (let (($x733 (= $x254 true)))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x10 (bvadd ?x754 input.dst.llvm-%m1)))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem ?x10))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv2 32))) ?x460))))
 (let ((?x66 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (=> $x70 (= ?x66 ?x121))))))))))
 ))
 (let (($x661 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x475 (_ bv1 32))))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (= $x70 $x634))))))
 ))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x699 (= ?x133 (_ bv0 32))))
 (=> $x699 $x160)))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x462 (= ?x475 (_ bv0 32))))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x699 (= ?x133 (_ bv0 32))))
 (= $x699 $x462))))))
 ))
 (let (($x743 (and $x637 $x49)))
 (let (($x68 (and $x743 $x661)))
 (let (($x370 (and $x68 $x99)))
 (let (($x137 (= $x370 true)))
 (let (($x101 (= $x137 true)))
 (let (($x546 (= $x101 true)))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x10 (bvadd ?x754 input.dst.llvm-%m1)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x10))))
 (let ((?x587 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv2 32))) ?x35)))
 (let ((?x553 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv3 32))) ?x587)))
 (let ((?x66 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (=> $x70 (= ?x66 ?x553)))))))))))
 ))
 (let (($x463 (and $x68 $x619)))
 (let (($x264 (= $x463 true)))
 (let (($x170 (= $x264 true)))
 (let (($x725 (= $x170 true)))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x405 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x728))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x405)))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x159)))
 (let ((?x837 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (=> $x806 (= ?x837 ?x588)))))))))))
 ))
 (let (($x345 (and $x217 $x349)))
 (let (($x863 (= $x345 true)))
 (let (($x861 (= $x863 true)))
 (let (($x864 (= $x861 true)))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x10 (bvadd ?x754 input.dst.llvm-%m1)))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem ?x10))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv2 32))) ?x460))))
 (let ((?x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x37 (_ bv1 32))))
 (=> $x438 (= ?x30 ?x121))))))))))
 ))
 (let (($x18 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x475 (_ bv1 32))))
 (let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x37 (_ bv1 32))))
 (= $x438 $x634))))))
 ))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x37 (_ bv0 32))))
 (=> $x402 $x160)))))
 ))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x462 (= ?x475 (_ bv0 32))))
 (let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x37 (_ bv0 32))))
 (= $x402 $x462))))))
 ))
 (let (($x571 (and $x504 $x443)))
 (let (($x357 (and $x571 $x18)))
 (let (($x433 (and $x357 $x274)))
 (let (($x172 (= $x433 true)))
 (let (($x684 (= $x172 true)))
 (let (($x657 (= $x684 true)))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x10 (bvadd ?x754 input.dst.llvm-%m1)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x10))))
 (let ((?x587 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv2 32))) ?x35)))
 (let ((?x553 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv3 32))) ?x587)))
 (let ((?x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x37 (_ bv1 32))))
 (=> $x438 (= ?x30 ?x553)))))))))))
 ))
 (let (($x652 (and $x357 $x241)))
 (let (($x449 (= $x652 true)))
 (let (($x223 (= $x449 true)))
 (let (($x346 (= $x223 true)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x616 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x728))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x616)))
 (let ((?x417 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x281)))
 (let ((?x837 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (=> $x806 (= ?x837 ?x417)))))))))))
 ))
 (let (($x617 (and $x217 $x418)))
 (let (($x681 (= $x617 true)))
 (let (($x738 (= $x681 true)))
 (let (($x415 (= $x738 true)))
 (let (($x131 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x405 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x728))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x405)))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x159)))
 (let ((?x132 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (bvuge ?x516 (_ bv1 32))))
 (=> $x805 (= ?x132 ?x588)))))))))))
 ))
 (let (($x687 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x475 (_ bv1 32))))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (bvuge ?x516 (_ bv1 32))))
 (= $x805 $x634))))))
 ))
 (let (($x523 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (= ?x516 (_ bv0 32))))
 (=> $x695 $x160)))))
 ))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x462 (= ?x475 (_ bv0 32))))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (= ?x516 (_ bv0 32))))
 (= $x695 $x462))))))
 ))
 (let (($x638 (and $x234 $x523)))
 (let (($x15 (and $x638 $x687)))
 (let (($x781 (and $x15 $x131)))
 (let (($x353 (= $x781 true)))
 (let (($x379 (= $x353 true)))
 (let (($x347 (= $x379 true)))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem ?x728))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv2 32))) ?x581))))
 (let ((?x132 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (bvuge ?x516 (_ bv1 32))))
 (=> $x805 (= ?x132 ?x391))))))))))
 ))
 (let (($x376 (and $x15 $x189)))
 (let (($x466 (= $x376 true)))
 (let (($x96 (= $x466 true)))
 (let (($x563 (= $x96 true)))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x10 (bvadd ?x754 input.dst.llvm-%m1)))
 (let ((?x629 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x10))))
 (let ((?x539 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x10 (_ bv2 32))) ?x629)))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x10 (_ bv3 32))) ?x539)))
 (let ((?x66 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (=> $x70 (= ?x66 ?x252)))))))))))
 ))
 (let (($x578 (and $x68 $x330)))
 (let (($x712 (= $x578 true)))
 (let (($x514 (= $x712 true)))
 (let (($x771 (= $x514 true)))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x616 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x728))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x616)))
 (let ((?x417 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x281)))
 (let ((?x132 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (bvuge ?x516 (_ bv1 32))))
 (=> $x805 (= ?x132 ?x417)))))))))))
 ))
 (let (($x773 (and $x15 $x261)))
 (let (($x318 (= $x773 true)))
 (let (($x421 (= $x318 true)))
 (let (($x230 (= $x421 true)))
 (let (($x97 (and $x230 $x771)))
 (let (($x508 (and $x97 $x563)))
 (let (($x646 (and $x508 $x347)))
 (let (($x270 (and $x646 $x415)))
 (let (($x302 (and $x270 $x346)))
 (let (($x333 (and $x302 $x657)))
 (let (($x644 (and $x333 $x864)))
 (let (($x711 (and $x644 $x725)))
 (let (($x25 (and $x711 $x546)))
 (let (($x545 (and $x25 $x733)))
 (let (($x788 (and $x545 $x122)))
 (let (($x88 (and $x788 $x50)))
 (let (($x532 (and $x88 $x43)))
 (let (($x243 (and $x532 $x335)))
 (let (($x356 (and $x243 $x543)))
 (let (($x377 (and $x356 $x584)))
 (let (($x414 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x66 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (=> $x70 (= ?x66 ?x30)))))))
 ))
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x37 (_ bv1 32))))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (= $x70 $x438))))))
 ))
 (let (($x574 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x37 (_ bv0 32))))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x699 (= ?x133 (_ bv0 32))))
 (= $x699 $x402))))))
 ))
 (let (($x220 (and $x574 $x49)))
 (let (($x593 (and $x220 $x289)))
 (let (($x21 (and $x593 $x414)))
 (let (($x314 (and $x21 $x377)))
 (let (($x844 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x837 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (=> $x806 (= ?x837 ?x132)))))))
 ))
 (let (($x809 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (bvuge ?x516 (_ bv1 32))))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (= $x806 $x805))))))
 ))
 (let (($x601 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (= ?x516 (_ bv0 32))))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x565 (_ bv0 32))))
 (= $x386 $x695))))))
 ))
 (let (($x701 (and $x601 $x306)))
 (let (($x810 (and $x701 $x809)))
 (let (($x457 (and $x810 $x844)))
 (let (($x367 (and $x457 $x314)))
 (let (($x890 (=> $x367 $x889)))
 (not $x890))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x885 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x886 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x885)))
 (let ((?x883 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L2%3%fcallEnd)))
 (let ((?x884 (bvadd input.spec-%var-fi-0.L2%3%fcallStart ?x883)))
 (let (($x887 (= ?x884 ?x886)))
 (let (($x888 (= $x887 true)))
 (let (($x889 (= $x888 true)))
 (let ((?x77 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x108 (bvneg ?x77)))
 (let (($x125 (= ?x108 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x164 (= $x125 true)))
 (let (($x584 (= $x164 true)))
 (let (($x71 (= ?x108 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x595 (= $x71 true)))
 (let (($x543 (= $x595 true)))
 (let (($x100 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x196 (= $x100 true)))
 (let (($x323 (= $x196 true)))
 (let (($x335 (= $x323 true)))
 (let (($x148 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x161 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x780 (and $x161 $x148)))
 (let (($x98 (and $x780 $x100)))
 (let (($x52 (= $x98 true)))
 (let (($x53 (= $x52 true)))
 (let (($x43 (= $x53 true)))
 (let ((?x561 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x716 (= (_ bv0 32) ?x561)))
 (let ((?x604 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x142 (= (_ bv0 32) ?x604)))
 (let ((?x648 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x648)))
 (let ((?x422 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x454 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x422)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x755 (and $x382 $x454)))
 (let (($x548 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x548 $x755)))
 (let (($x850 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x834 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x848 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x831 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x827 (and $x831 $x848)))
 (let (($x828 (not $x827)))
 (let (($x833 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x830 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x849 (and $x830 $x833)))
 (let (($x829 (and (not $x849) $x828)))
 (let (($x821 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x815 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x816 (and $x815 $x821)))
 (let (($x818 (not $x816)))
 (let (($x812 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x798 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x814 (and $x798 $x812)))
 (let (($x825 (and (not $x814) $x818)))
 (let (($x76 (and (and (and (and (and (and $x825 $x829) $x834) $x850) $x33) $x103) $x142)))
 (let (($x432 (and $x76 $x716)))
 (let (($x38 (= $x432 true)))
 (let (($x490 (= $x38 true)))
 (let (($x50 (= $x490 true)))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem ?x728))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv2 32))) ?x581))))
 (let ((?x837 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (=> $x806 (= ?x837 ?x391))))))))))
 ))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x475 (_ bv1 32))))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (= $x806 $x634))))))
 ))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x565 (_ bv0 32))))
 (=> $x386 $x160)))))
 ))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x462 (= ?x475 (_ bv0 32))))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x565 (_ bv0 32))))
 (= $x386 $x462))))))
 ))
 (let (($x568 (and $x309 $x306)))
 (let (($x217 (and $x568 $x387)))
 (let (($x231 (and $x217 $x6)))
 (let (($x489 (= $x231 true)))
 (let (($x787 (= $x489 true)))
 (let (($x122 (= $x787 true)))
 (let (($x166 (= $x780 true)))
 (let (($x254 (= $x166 true)))
 (let (($x733 (= $x254 true)))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x10 (bvadd ?x754 input.dst.llvm-%m1)))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem ?x10))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv2 32))) ?x460))))
 (let ((?x66 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (=> $x70 (= ?x66 ?x121))))))))))
 ))
 (let (($x661 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x475 (_ bv1 32))))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (= $x70 $x634))))))
 ))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x699 (= ?x133 (_ bv0 32))))
 (=> $x699 $x160)))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x462 (= ?x475 (_ bv0 32))))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x699 (= ?x133 (_ bv0 32))))
 (= $x699 $x462))))))
 ))
 (let (($x743 (and $x637 $x49)))
 (let (($x68 (and $x743 $x661)))
 (let (($x370 (and $x68 $x99)))
 (let (($x137 (= $x370 true)))
 (let (($x101 (= $x137 true)))
 (let (($x546 (= $x101 true)))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x10 (bvadd ?x754 input.dst.llvm-%m1)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x10))))
 (let ((?x587 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv2 32))) ?x35)))
 (let ((?x553 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv3 32))) ?x587)))
 (let ((?x66 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (=> $x70 (= ?x66 ?x553)))))))))))
 ))
 (let (($x463 (and $x68 $x619)))
 (let (($x264 (= $x463 true)))
 (let (($x170 (= $x264 true)))
 (let (($x725 (= $x170 true)))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x405 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x728))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x405)))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x159)))
 (let ((?x837 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (=> $x806 (= ?x837 ?x588)))))))))))
 ))
 (let (($x345 (and $x217 $x349)))
 (let (($x863 (= $x345 true)))
 (let (($x861 (= $x863 true)))
 (let (($x864 (= $x861 true)))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x10 (bvadd ?x754 input.dst.llvm-%m1)))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem ?x10))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv2 32))) ?x460))))
 (let ((?x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x37 (_ bv1 32))))
 (=> $x438 (= ?x30 ?x121))))))))))
 ))
 (let (($x18 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x475 (_ bv1 32))))
 (let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x37 (_ bv1 32))))
 (= $x438 $x634))))))
 ))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x37 (_ bv0 32))))
 (=> $x402 $x160)))))
 ))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x462 (= ?x475 (_ bv0 32))))
 (let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x37 (_ bv0 32))))
 (= $x402 $x462))))))
 ))
 (let (($x571 (and $x504 $x443)))
 (let (($x357 (and $x571 $x18)))
 (let (($x433 (and $x357 $x274)))
 (let (($x172 (= $x433 true)))
 (let (($x684 (= $x172 true)))
 (let (($x657 (= $x684 true)))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x10 (bvadd ?x754 input.dst.llvm-%m1)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x10))))
 (let ((?x587 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv2 32))) ?x35)))
 (let ((?x553 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x10 (_ bv3 32))) ?x587)))
 (let ((?x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x37 (_ bv1 32))))
 (=> $x438 (= ?x30 ?x553)))))))))))
 ))
 (let (($x652 (and $x357 $x241)))
 (let (($x449 (= $x652 true)))
 (let (($x223 (= $x449 true)))
 (let (($x346 (= $x223 true)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x616 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x728))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x616)))
 (let ((?x417 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x281)))
 (let ((?x837 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (=> $x806 (= ?x837 ?x417)))))))))))
 ))
 (let (($x617 (and $x217 $x418)))
 (let (($x681 (= $x617 true)))
 (let (($x738 (= $x681 true)))
 (let (($x415 (= $x738 true)))
 (let (($x131 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x405 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x728))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x405)))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x159)))
 (let ((?x132 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (bvuge ?x516 (_ bv1 32))))
 (=> $x805 (= ?x132 ?x588)))))))))))
 ))
 (let (($x687 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x475 (_ bv1 32))))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (bvuge ?x516 (_ bv1 32))))
 (= $x805 $x634))))))
 ))
 (let (($x523 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (= ?x516 (_ bv0 32))))
 (=> $x695 $x160)))))
 ))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x475 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x462 (= ?x475 (_ bv0 32))))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (= ?x516 (_ bv0 32))))
 (= $x695 $x462))))))
 ))
 (let (($x638 (and $x234 $x523)))
 (let (($x15 (and $x638 $x687)))
 (let (($x781 (and $x15 $x131)))
 (let (($x353 (= $x781 true)))
 (let (($x379 (= $x353 true)))
 (let (($x347 (= $x379 true)))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem ?x728))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv2 32))) ?x581))))
 (let ((?x132 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (bvuge ?x516 (_ bv1 32))))
 (=> $x805 (= ?x132 ?x391))))))))))
 ))
 (let (($x376 (and $x15 $x189)))
 (let (($x466 (= $x376 true)))
 (let (($x96 (= $x466 true)))
 (let (($x563 (= $x96 true)))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x10 (bvadd ?x754 input.dst.llvm-%m1)))
 (let ((?x629 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x10))))
 (let ((?x539 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x10 (_ bv2 32))) ?x629)))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x10 (_ bv3 32))) ?x539)))
 (let ((?x66 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (=> $x70 (= ?x66 ?x252)))))))))))
 ))
 (let (($x578 (and $x68 $x330)))
 (let (($x712 (= $x578 true)))
 (let (($x514 (= $x712 true)))
 (let (($x771 (= $x514 true)))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x754 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x728 (bvadd ?x754 input.dst.llvm-%m2)))
 (let ((?x616 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x728))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv2 32))) ?x616)))
 (let ((?x417 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x728 (_ bv3 32))) ?x281)))
 (let ((?x132 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (bvuge ?x516 (_ bv1 32))))
 (=> $x805 (= ?x132 ?x417)))))))))))
 ))
 (let (($x773 (and $x15 $x261)))
 (let (($x318 (= $x773 true)))
 (let (($x421 (= $x318 true)))
 (let (($x230 (= $x421 true)))
 (let (($x97 (and $x230 $x771)))
 (let (($x508 (and $x97 $x563)))
 (let (($x646 (and $x508 $x347)))
 (let (($x270 (and $x646 $x415)))
 (let (($x302 (and $x270 $x346)))
 (let (($x333 (and $x302 $x657)))
 (let (($x644 (and $x333 $x864)))
 (let (($x711 (and $x644 $x725)))
 (let (($x25 (and $x711 $x546)))
 (let (($x545 (and $x25 $x733)))
 (let (($x788 (and $x545 $x122)))
 (let (($x88 (and $x788 $x50)))
 (let (($x532 (and $x88 $x43)))
 (let (($x243 (and $x532 $x335)))
 (let (($x356 (and $x243 $x543)))
 (let (($x377 (and $x356 $x584)))
 (let (($x414 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x66 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (=> $x70 (= ?x66 ?x30)))))))
 ))
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x37 (_ bv1 32))))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x133 (_ bv1 32))))
 (= $x70 $x438))))))
 ))
 (let (($x574 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x37 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x37 (_ bv0 32))))
 (let ((?x133 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x699 (= ?x133 (_ bv0 32))))
 (= $x699 $x402))))))
 ))
 (let (($x220 (and $x574 $x49)))
 (let (($x593 (and $x220 $x289)))
 (let (($x21 (and $x593 $x414)))
 (let (($x314 (and $x21 $x377)))
 (let (($x844 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x837 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (=> $x806 (= ?x837 ?x132)))))))
 ))
 (let (($x809 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x805 (bvuge ?x516 (_ bv1 32))))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x806 (bvuge ?x565 (_ bv1 32))))
 (= $x806 $x805))))))
 ))
 (let (($x601 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x516 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (= ?x516 (_ bv0 32))))
 (let ((?x565 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x565 (_ bv0 32))))
 (= $x386 $x695))))))
 ))
 (let (($x701 (and $x601 $x306)))
 (let (($x810 (and $x701 $x809)))
 (let (($x457 (and $x810 $x844)))
 (let (($x367 (and $x457 $x314)))
 (let (($x890 (=> $x367 $x889)))
 (not $x890))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x890 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x891 (= (_ bv0 32) ?x890)))
 (let ((?x888 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x889 (= (_ bv0 32) ?x888)))
 (let ((?x886 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x887 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x886)))
 (let ((?x367 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x367)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x314 $x883)))
 (let (($x377 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x377 $x884)))
 (let (($x274 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x623 (and $x41 $x115)))
 (let (($x188 (not $x623)))
 (let (($x346 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x302 (and $x223 $x346)))
 (let (($x439 (and (not $x302) $x188)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x553 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x567 (and $x553 $x143)))
 (let (($x241 (not $x567)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x295 $x11)))
 (let (($x449 (and (not $x35) $x241)))
 (let (($x528 (and (and (and (and (and (and $x449 $x439) $x290) $x274) $x885) $x887) $x889)))
 (let (($x199 (and $x528 $x891)))
 (let (($x395 (= $x199 true)))
 (let (($x171 (= $x395 true)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x471 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x239 (concat ?x471 (concat ?x82 (concat ?x130 ?x195)))))
 (let (($x342 (= ?x239 input.dst.llvm-%m1)))
 (let (($x175 (= $x342 true)))
 (let (($x722 (= $x175 true)))
 (let ((?x685 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x651 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x762 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x540 (concat ?x762 (concat ?x9 (concat ?x651 ?x685)))))
 (let (($x492 (= ?x540 input.dst.llvm-%m2)))
 (let (($x375 (= $x492 true)))
 (let (($x474 (= $x375 true)))
 (let (($x5 (= input.dst.llvm-%m2 ?x540)))
 (let (($x411 (= input.dst.llvm-%m1 ?x239)))
 (let (($x81 (and $x411 $x5)))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x838 (bvadd ?x323 input.dst.llvm-%m2)))
 (let ((?x846 (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv1 32))) (select input.dst.llvm-mem ?x838))))
 (let ((?x801 (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv2 32))) ?x846))))
 (let ((?x615 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x593 (_ bv1 32))))
 (=> $x15 (= ?x615 ?x801))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x835 (_ bv1 32))))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x593 (_ bv1 32))))
 (= $x15 $x604))))))
 ))
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x593 (_ bv0 32))))
 (=> $x66 $x283)))))
 ))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x850 (= ?x835 (_ bv0 32))))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x593 (_ bv0 32))))
 (= $x66 $x850))))))
 ))
 (let (($x218 (and $x203 $x465)))
 (let (($x8 (and $x218 $x303)))
 (let (($x373 (and $x8 $x22)))
 (let (($x149 (and $x373 $x81)))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x335 (bvadd ?x323 input.dst.llvm-%m1)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x77))))
 (let ((?x217 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x675 (_ bv1 32))))
 (=> $x569 (= ?x217 ?x356))))))))))
 ))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x835 (_ bv1 32))))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x675 (_ bv1 32))))
 (= $x569 $x604))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x675 (_ bv0 32))))
 (=> $x581 $x283)))))
 ))
 (let (($x548 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x850 (= ?x835 (_ bv0 32))))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x675 (_ bv0 32))))
 (= $x581 $x850))))))
 ))
 (let (($x382 (and $x548 $x189)))
 (let (($x561 (and $x382 $x76)))
 (let (($x584 (and $x561 $x164)))
 (let (($x337 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x270 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x443 (and $x270 $x337)))
 (let (($x113 (and (and (and (and (and (and $x443 $x449) $x439) $x290) $x274) $x584) $x885)))
 (let (($x643 (and (and (and (and $x113 $x887) $x889) $x891) $x149)))
 (let (($x378 (= $x643 true)))
 (let (($x298 (= $x378 true)))
 (let (($x558 (= $x298 true)))
 (let (($x571 (= $x443 true)))
 (let (($x622 (= $x571 true)))
 (let (($x18 (= $x622 true)))
 (let (($x288 (and $x18 $x558)))
 (let (($x708 (and $x288 $x474)))
 (let (($x429 (and $x708 $x722)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x217 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x675 (_ bv1 32))))
 (=> $x569 (= ?x217 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x131 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x675 (_ bv1 32))))
 (= $x569 (bvuge ?x282 (_ bv1 32)))))))
 ))
 (let (($x391 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x675 (_ bv0 32))))
 (= $x581 (= ?x282 (_ bv0 32)))))))
 ))
 (let (($x376 (and $x391 $x189)))
 (let (($x781 (and $x376 $x131)))
 (let (($x617 (and $x781 $x418)))
 (let (($x155 (and $x617 $x429)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x615 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x593 (_ bv1 32))))
 (=> $x15 (= ?x615 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x438 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x593 (_ bv1 32))))
 (= $x15 (bvuge ?x438 (_ bv1 32)))))))
 ))
 (let (($x663 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x438 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x593 (_ bv0 32))))
 (= $x66 (= ?x438 (_ bv0 32)))))))
 ))
 (let (($x102 (and $x663 $x465)))
 (let (($x754 (and $x102 $x324)))
 (let (($x417 (and $x754 $x281)))
 (let (($x393 (and $x417 $x155)))
 (let (($x570 (=> $x393 $x171)))
 (not $x570)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x890 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x891 (= (_ bv0 32) ?x890)))
 (let ((?x888 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x889 (= (_ bv0 32) ?x888)))
 (let ((?x886 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x887 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x886)))
 (let ((?x367 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x367)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x314 $x883)))
 (let (($x377 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x377 $x884)))
 (let (($x274 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x623 (and $x41 $x115)))
 (let (($x188 (not $x623)))
 (let (($x346 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x302 (and $x223 $x346)))
 (let (($x439 (and (not $x302) $x188)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x553 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x567 (and $x553 $x143)))
 (let (($x241 (not $x567)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x295 $x11)))
 (let (($x449 (and (not $x35) $x241)))
 (let (($x528 (and (and (and (and (and (and $x449 $x439) $x290) $x274) $x885) $x887) $x889)))
 (let (($x199 (and $x528 $x891)))
 (let (($x395 (= $x199 true)))
 (let (($x171 (= $x395 true)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x471 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x239 (concat ?x471 (concat ?x82 (concat ?x130 ?x195)))))
 (let (($x342 (= ?x239 input.dst.llvm-%m1)))
 (let (($x175 (= $x342 true)))
 (let (($x722 (= $x175 true)))
 (let ((?x685 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x651 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x762 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x540 (concat ?x762 (concat ?x9 (concat ?x651 ?x685)))))
 (let (($x492 (= ?x540 input.dst.llvm-%m2)))
 (let (($x375 (= $x492 true)))
 (let (($x474 (= $x375 true)))
 (let (($x5 (= input.dst.llvm-%m2 ?x540)))
 (let (($x411 (= input.dst.llvm-%m1 ?x239)))
 (let (($x81 (and $x411 $x5)))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x838 (bvadd ?x323 input.dst.llvm-%m2)))
 (let ((?x846 (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv1 32))) (select input.dst.llvm-mem ?x838))))
 (let ((?x801 (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv2 32))) ?x846))))
 (let ((?x615 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x593 (_ bv1 32))))
 (=> $x15 (= ?x615 ?x801))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x835 (_ bv1 32))))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x593 (_ bv1 32))))
 (= $x15 $x604))))))
 ))
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x593 (_ bv0 32))))
 (=> $x66 $x283)))))
 ))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x850 (= ?x835 (_ bv0 32))))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x593 (_ bv0 32))))
 (= $x66 $x850))))))
 ))
 (let (($x218 (and $x203 $x465)))
 (let (($x8 (and $x218 $x303)))
 (let (($x373 (and $x8 $x22)))
 (let (($x149 (and $x373 $x81)))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x335 (bvadd ?x323 input.dst.llvm-%m1)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x77))))
 (let ((?x217 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x675 (_ bv1 32))))
 (=> $x569 (= ?x217 ?x356))))))))))
 ))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x604 (bvuge ?x835 (_ bv1 32))))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x675 (_ bv1 32))))
 (= $x569 $x604))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x675 (_ bv0 32))))
 (=> $x581 $x283)))))
 ))
 (let (($x548 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x850 (= ?x835 (_ bv0 32))))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x675 (_ bv0 32))))
 (= $x581 $x850))))))
 ))
 (let (($x382 (and $x548 $x189)))
 (let (($x561 (and $x382 $x76)))
 (let (($x584 (and $x561 $x164)))
 (let (($x337 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x270 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x443 (and $x270 $x337)))
 (let (($x113 (and (and (and (and (and (and $x443 $x449) $x439) $x290) $x274) $x584) $x885)))
 (let (($x643 (and (and (and (and $x113 $x887) $x889) $x891) $x149)))
 (let (($x378 (= $x643 true)))
 (let (($x298 (= $x378 true)))
 (let (($x558 (= $x298 true)))
 (let (($x571 (= $x443 true)))
 (let (($x622 (= $x571 true)))
 (let (($x18 (= $x622 true)))
 (let (($x288 (and $x18 $x558)))
 (let (($x708 (and $x288 $x474)))
 (let (($x429 (and $x708 $x722)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x217 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x675 (_ bv1 32))))
 (=> $x569 (= ?x217 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x131 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x675 (_ bv1 32))))
 (= $x569 (bvuge ?x282 (_ bv1 32)))))))
 ))
 (let (($x391 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x675 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x675 (_ bv0 32))))
 (= $x581 (= ?x282 (_ bv0 32)))))))
 ))
 (let (($x376 (and $x391 $x189)))
 (let (($x781 (and $x376 $x131)))
 (let (($x617 (and $x781 $x418)))
 (let (($x155 (and $x617 $x429)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x615 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x593 (_ bv1 32))))
 (=> $x15 (= ?x615 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x438 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x593 (_ bv1 32))))
 (= $x15 (bvuge ?x438 (_ bv1 32)))))))
 ))
 (let (($x663 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x438 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x593 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x593 (_ bv0 32))))
 (= $x66 (= ?x438 (_ bv0 32)))))))
 ))
 (let (($x102 (and $x663 $x465)))
 (let (($x754 (and $x102 $x324)))
 (let (($x417 (and $x754 $x281)))
 (let (($x393 (and $x417 $x155)))
 (let (($x570 (=> $x393 $x171)))
 (not $x570)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x234 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x339 (= (_ bv0 2) ?x234)))
 (let (($x523 (= $x339 true)))
 (let ((?x613 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x539 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x712 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x212 (concat ?x97 (concat ?x712 (concat ?x539 ?x613)))))
 (let (($x133 (= ?x212 input.dst.llvm-%m2)))
 (let (($x699 (= $x133 true)))
 (let (($x128 (= $x699 true)))
 (let (($x291 (= input.dst.llvm-%m2 ?x212)))
 (let ((?x373 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x471 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x411 (concat ?x239 (concat ?x130 (concat ?x471 ?x373)))))
 (let (($x632 (= input.dst.llvm-%m1 ?x411)))
 (let (($x486 (and $x632 $x291)))
 (let (($x860 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x824 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x176 (bvadd ?x824 input.dst.llvm-%m2)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x39))))
 (let ((?x302 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (bvuge ?x781 (_ bv1 32))))
 (=> $x679 (= ?x302 ?x301))))))))))
 ))
 (let (($x727 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x25 (_ bv1 32))))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (bvuge ?x781 (_ bv1 32))))
 (= $x679 $x318))))))
 ))
 (let (($x681 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x551 (= false false)))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x781 (_ bv0 32))))
 (=> $x217 $x551)))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x25 (_ bv0 32))))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x781 (_ bv0 32))))
 (= $x217 $x129))))))
 ))
 (let (($x285 (and $x246 $x681)))
 (let (($x678 (and $x285 $x727)))
 (let (($x388 (and $x678 $x860)))
 (let (($x544 (and $x388 $x486)))
 (let ((?x508 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x422 (= (_ bv0 32) ?x508)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x563 (= (_ bv0 32) ?x96)))
 (let ((?x145 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x466 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x827 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x828 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x827)))
 (let (($x831 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x829 (and $x831 $x828)))
 (let (($x848 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x784 (and $x848 $x829)))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x824 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x798 (bvadd ?x824 input.dst.llvm-%m1)))
 (let ((?x813 (concat (select input.dst.llvm-mem (bvadd ?x798 (_ bv1 32))) (select input.dst.llvm-mem ?x798))))
 (let ((?x849 (concat (select input.dst.llvm-mem (bvadd ?x798 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x798 (_ bv2 32))) ?x813))))
 (let ((?x843 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x356 (_ bv1 32))))
 (=> $x891 (= ?x843 ?x849))))))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x25 (_ bv1 32))))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x356 (_ bv1 32))))
 (= $x891 $x318))))))
 ))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x551 (= false false)))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x356 (_ bv0 32))))
 (=> $x206 $x551)))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x25 (_ bv0 32))))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x356 (_ bv0 32))))
 (= $x206 $x129))))))
 ))
 (let (($x780 (and $x545 $x377)))
 (let (($x637 (and $x780 $x230)))
 (let (($x578 (and $x637 $x330)))
 (let (($x327 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x488 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x473 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x305 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x528 (and $x305 $x473)))
 (let (($x199 (not $x528)))
 (let (($x750 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x575 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x575 $x750)))
 (let (($x171 (and (not $x32) $x199)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x342 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x722 (and $x342 $x175)))
 (let (($x429 (not $x722)))
 (let (($x375 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x474 (and $x288 $x375)))
 (let (($x393 (and (not $x474) $x429)))
 (let (($x540 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x685 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x5 (and $x685 $x540)))
 (let (($x568 (and (and (and (and (and (and $x5 $x393) $x171) $x488) $x327) $x578) $x784)))
 (let (($x132 (and (and (and (and $x568 $x466) $x563) $x422) $x544)))
 (let (($x435 (= $x132 true)))
 (let (($x844 (= $x435 true)))
 (let (($x457 (= $x844 true)))
 (let (($x81 (= $x5 true)))
 (let (($x149 (= $x81 true)))
 (let (($x643 (= $x149 true)))
 (let (($x762 (= ?x411 input.dst.llvm-%m1)))
 (let (($x381 (= $x762 true)))
 (let (($x9 (= $x381 true)))
 (let (($x378 (and $x9 $x643)))
 (let (($x153 (and $x378 $x457)))
 (let (($x574 (and $x153 $x128)))
 (let (($x846 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x843 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x356 (_ bv1 32))))
 (=> $x891 (= ?x843 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x446 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x356 (_ bv1 32))))
 (= $x891 (bvuge ?x243 (_ bv1 32)))))))
 ))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x356 (_ bv0 32))))
 (= $x206 (= ?x243 (_ bv0 32)))))))
 ))
 (let (($x314 (and $x164 $x377)))
 (let (($x203 (and $x314 $x446)))
 (let (($x855 (and $x203 $x846)))
 (let (($x123 (and $x855 $x574)))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x302 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (bvuge ?x781 (_ bv1 32))))
 (=> $x679 (= ?x302 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x35 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x588 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (bvuge ?x781 (_ bv1 32))))
 (= $x679 (bvuge ?x588 (_ bv1 32)))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x588 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x781 (_ bv0 32))))
 (= $x217 (= ?x588 (_ bv0 32)))))))
 ))
 (let (($x738 (and $x355 $x681)))
 (let (($x652 (and $x738 $x35)))
 (let (($x623 (and $x652 $x115)))
 (let (($x49 (and $x623 $x123)))
 (let (($x634 (=> $x49 $x523)))
 (not $x634))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x234 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x339 (= (_ bv0 2) ?x234)))
 (let (($x523 (= $x339 true)))
 (let ((?x613 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x539 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x712 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x212 (concat ?x97 (concat ?x712 (concat ?x539 ?x613)))))
 (let (($x133 (= ?x212 input.dst.llvm-%m2)))
 (let (($x699 (= $x133 true)))
 (let (($x128 (= $x699 true)))
 (let (($x291 (= input.dst.llvm-%m2 ?x212)))
 (let ((?x373 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x471 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x411 (concat ?x239 (concat ?x130 (concat ?x471 ?x373)))))
 (let (($x632 (= input.dst.llvm-%m1 ?x411)))
 (let (($x486 (and $x632 $x291)))
 (let (($x860 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x824 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x176 (bvadd ?x824 input.dst.llvm-%m2)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x39))))
 (let ((?x302 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (bvuge ?x781 (_ bv1 32))))
 (=> $x679 (= ?x302 ?x301))))))))))
 ))
 (let (($x727 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x25 (_ bv1 32))))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (bvuge ?x781 (_ bv1 32))))
 (= $x679 $x318))))))
 ))
 (let (($x681 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x551 (= false false)))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x781 (_ bv0 32))))
 (=> $x217 $x551)))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x25 (_ bv0 32))))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x781 (_ bv0 32))))
 (= $x217 $x129))))))
 ))
 (let (($x285 (and $x246 $x681)))
 (let (($x678 (and $x285 $x727)))
 (let (($x388 (and $x678 $x860)))
 (let (($x544 (and $x388 $x486)))
 (let ((?x508 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x422 (= (_ bv0 32) ?x508)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x563 (= (_ bv0 32) ?x96)))
 (let ((?x145 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x466 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x827 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x828 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x827)))
 (let (($x831 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x829 (and $x831 $x828)))
 (let (($x848 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x784 (and $x848 $x829)))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x824 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x798 (bvadd ?x824 input.dst.llvm-%m1)))
 (let ((?x813 (concat (select input.dst.llvm-mem (bvadd ?x798 (_ bv1 32))) (select input.dst.llvm-mem ?x798))))
 (let ((?x849 (concat (select input.dst.llvm-mem (bvadd ?x798 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x798 (_ bv2 32))) ?x813))))
 (let ((?x843 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x356 (_ bv1 32))))
 (=> $x891 (= ?x843 ?x849))))))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x25 (_ bv1 32))))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x356 (_ bv1 32))))
 (= $x891 $x318))))))
 ))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x551 (= false false)))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x356 (_ bv0 32))))
 (=> $x206 $x551)))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x25 (_ bv0 32))))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x356 (_ bv0 32))))
 (= $x206 $x129))))))
 ))
 (let (($x780 (and $x545 $x377)))
 (let (($x637 (and $x780 $x230)))
 (let (($x578 (and $x637 $x330)))
 (let (($x327 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x488 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x473 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x305 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x528 (and $x305 $x473)))
 (let (($x199 (not $x528)))
 (let (($x750 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x575 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x575 $x750)))
 (let (($x171 (and (not $x32) $x199)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x342 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x722 (and $x342 $x175)))
 (let (($x429 (not $x722)))
 (let (($x375 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x474 (and $x288 $x375)))
 (let (($x393 (and (not $x474) $x429)))
 (let (($x540 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x685 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x5 (and $x685 $x540)))
 (let (($x568 (and (and (and (and (and (and $x5 $x393) $x171) $x488) $x327) $x578) $x784)))
 (let (($x132 (and (and (and (and $x568 $x466) $x563) $x422) $x544)))
 (let (($x435 (= $x132 true)))
 (let (($x844 (= $x435 true)))
 (let (($x457 (= $x844 true)))
 (let (($x81 (= $x5 true)))
 (let (($x149 (= $x81 true)))
 (let (($x643 (= $x149 true)))
 (let (($x762 (= ?x411 input.dst.llvm-%m1)))
 (let (($x381 (= $x762 true)))
 (let (($x9 (= $x381 true)))
 (let (($x378 (and $x9 $x643)))
 (let (($x153 (and $x378 $x457)))
 (let (($x574 (and $x153 $x128)))
 (let (($x846 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x843 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x356 (_ bv1 32))))
 (=> $x891 (= ?x843 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x446 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x356 (_ bv1 32))))
 (= $x891 (bvuge ?x243 (_ bv1 32)))))))
 ))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x356 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x356 (_ bv0 32))))
 (= $x206 (= ?x243 (_ bv0 32)))))))
 ))
 (let (($x314 (and $x164 $x377)))
 (let (($x203 (and $x314 $x446)))
 (let (($x855 (and $x203 $x846)))
 (let (($x123 (and $x855 $x574)))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x302 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (bvuge ?x781 (_ bv1 32))))
 (=> $x679 (= ?x302 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x35 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x588 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (bvuge ?x781 (_ bv1 32))))
 (= $x679 (bvuge ?x588 (_ bv1 32)))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x588 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x781 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x781 (_ bv0 32))))
 (= $x217 (= ?x588 (_ bv0 32)))))))
 ))
 (let (($x738 (and $x355 $x681)))
 (let (($x652 (and $x738 $x35)))
 (let (($x623 (and $x652 $x115)))
 (let (($x49 (and $x623 $x123)))
 (let (($x634 (=> $x49 $x523)))
 (not $x634))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 188 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x143 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x567 (= (_ bv0 2) ?x143)))
 (let (($x449 (= $x567 true)))
 (let ((?x335 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x502 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x889 (concat ?x502 (concat ?x113 (concat ?x108 ?x335)))))
 (let (($x189 (= ?x889 input.dst.llvm-%m1)))
 (let (($x337 (= $x189 true)))
 (let (($x443 (= $x337 true)))
 (let ((?x176 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x731 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x329 (concat ?x301 (concat ?x522 (concat ?x731 ?x176)))))
 (let (($x303 (= input.dst.llvm-%m2 ?x329)))
 (let (($x269 (= input.dst.llvm-%m1 ?x889)))
 (let (($x8 (and $x269 $x303)))
 (let (($x242 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x310 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x447 (bvadd ?x310 input.dst.llvm-%m2)))
 (let ((?x680 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x680))))
 (let ((?x643 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x203 (_ bv1 32))))
 (=> $x600 (= ?x643 ?x604))))))))))
 ))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x840 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x684 (bvuge ?x840 (_ bv1 32))))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x203 (_ bv1 32))))
 (= $x600 $x684))))))
 ))
 (let (($x801 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x841 (= false false)))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x843 (= ?x203 (_ bv0 32))))
 (=> $x843 $x841)))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x840 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x857 (= ?x840 (_ bv0 32))))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x843 (= ?x203 (_ bv0 32))))
 (= $x843 $x857))))))
 ))
 (let (($x282 (and $x280 $x801)))
 (let (($x772 (and $x282 $x307)))
 (let (($x345 (and $x772 $x242)))
 (let (($x348 (and $x345 $x8)))
 (let ((?x148 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x254 (= (_ bv0 32) ?x148)))
 (let ((?x161 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x116 (= (_ bv0 32) ?x161)))
 (let ((?x166 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x779 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x166)))
 (let ((?x367 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x367)))
 (let (($x584 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x584 $x883)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x137 $x884)))
 (let (($x741 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x310 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x861 (bvadd ?x310 input.dst.llvm-%m1)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv1 32))) (select input.dst.llvm-mem ?x861))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv2 32))) ?x264))))
 (let ((?x508 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x848 (bvuge ?x230 (_ bv1 32))))
 (=> $x848 (= ?x508 ?x187))))))))))
 ))
 (let (($x579 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x840 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x684 (bvuge ?x840 (_ bv1 32))))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x848 (bvuge ?x230 (_ bv1 32))))
 (= $x848 $x684))))))
 ))
 (let (($x833 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x841 (= false false)))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x230 (_ bv0 32))))
 (=> $x637 $x841)))))
 ))
 (let (($x856 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x840 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x857 (= ?x840 (_ bv0 32))))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x230 (_ bv0 32))))
 (= $x637 $x857))))))
 ))
 (let (($x208 (and $x856 $x833)))
 (let (($x778 (and $x208 $x579)))
 (let (($x99 (and $x778 $x741)))
 (let (($x289 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x774 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x634 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x523 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x510 (and $x523 $x634)))
 (let (($x220 (not $x510)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x339 (and $x60 $x234)))
 (let (($x439 (and (not $x339) $x220)))
 (let (($x699 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x133 $x699)))
 (let (($x574 (not $x128)))
 (let (($x844 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x457 (and $x132 $x844)))
 (let (($x49 (and (not $x457) $x574)))
 (let (($x539 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x712 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x613 (and $x712 $x539)))
 (let (($x726 (and (and (and (and (and (and $x613 $x49) $x439) $x774) $x289) $x99) $x885)))
 (let (($x675 (and (and (and (and $x726 $x779) $x116) $x254) $x348)))
 (let (($x581 (= $x675 true)))
 (let (($x226 (= $x581 true)))
 (let (($x391 (= $x226 true)))
 (let (($x252 (= $x613 true)))
 (let (($x514 (= $x252 true)))
 (let (($x212 (= $x514 true)))
 (let (($x860 (= ?x329 input.dst.llvm-%m2)))
 (let (($x388 (= $x860 true)))
 (let (($x632 (= $x388 true)))
 (let (($x291 (and $x632 $x212)))
 (let (($x46 (and $x291 $x391)))
 (let (($x571 (and $x46 $x443)))
 (let (($x520 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x508 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x848 (bvuge ?x230 (_ bv1 32))))
 (=> $x848 (= ?x508 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x827 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x780 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x848 (bvuge ?x230 (_ bv1 32))))
 (= $x848 (bvuge ?x780 (_ bv1 32)))))))
 ))
 (let (($x824 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x780 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x230 (_ bv0 32))))
 (= $x637 (= ?x780 (_ bv0 32)))))))
 ))
 (let (($x816 (and $x824 $x833)))
 (let (($x828 (and $x816 $x827)))
 (let (($x246 (and $x828 $x520)))
 (let (($x622 (and $x246 $x571)))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x643 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x203 (_ bv1 32))))
 (=> $x600 (= ?x643 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x381 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x203 (_ bv1 32))))
 (= $x600 (bvuge ?x890 (_ bv1 32)))))))
 ))
 (let (($x853 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x843 (= ?x203 (_ bv0 32))))
 (= $x843 (= ?x890 (_ bv0 32)))))))
 ))
 (let (($x22 (and $x853 $x801)))
 (let (($x9 (and $x22 $x381)))
 (let (($x288 (and $x9 $x558)))
 (let (($x357 (and $x288 $x622)))
 (let (($x304 (=> $x357 $x449)))
 (not $x304))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x143 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x567 (= (_ bv0 2) ?x143)))
 (let (($x449 (= $x567 true)))
 (let ((?x335 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x502 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x889 (concat ?x502 (concat ?x113 (concat ?x108 ?x335)))))
 (let (($x189 (= ?x889 input.dst.llvm-%m1)))
 (let (($x337 (= $x189 true)))
 (let (($x443 (= $x337 true)))
 (let ((?x176 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x731 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x329 (concat ?x301 (concat ?x522 (concat ?x731 ?x176)))))
 (let (($x303 (= input.dst.llvm-%m2 ?x329)))
 (let (($x269 (= input.dst.llvm-%m1 ?x889)))
 (let (($x8 (and $x269 $x303)))
 (let (($x242 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x310 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x447 (bvadd ?x310 input.dst.llvm-%m2)))
 (let ((?x680 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x680))))
 (let ((?x643 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x203 (_ bv1 32))))
 (=> $x600 (= ?x643 ?x604))))))))))
 ))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x840 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x684 (bvuge ?x840 (_ bv1 32))))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x203 (_ bv1 32))))
 (= $x600 $x684))))))
 ))
 (let (($x801 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x841 (= false false)))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x843 (= ?x203 (_ bv0 32))))
 (=> $x843 $x841)))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x840 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x857 (= ?x840 (_ bv0 32))))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x843 (= ?x203 (_ bv0 32))))
 (= $x843 $x857))))))
 ))
 (let (($x282 (and $x280 $x801)))
 (let (($x772 (and $x282 $x307)))
 (let (($x345 (and $x772 $x242)))
 (let (($x348 (and $x345 $x8)))
 (let ((?x148 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x254 (= (_ bv0 32) ?x148)))
 (let ((?x161 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x116 (= (_ bv0 32) ?x161)))
 (let ((?x166 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x779 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x166)))
 (let ((?x367 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x367)))
 (let (($x584 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x584 $x883)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x137 $x884)))
 (let (($x741 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x310 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x861 (bvadd ?x310 input.dst.llvm-%m1)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv1 32))) (select input.dst.llvm-mem ?x861))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv2 32))) ?x264))))
 (let ((?x508 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x848 (bvuge ?x230 (_ bv1 32))))
 (=> $x848 (= ?x508 ?x187))))))))))
 ))
 (let (($x579 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x840 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x684 (bvuge ?x840 (_ bv1 32))))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x848 (bvuge ?x230 (_ bv1 32))))
 (= $x848 $x684))))))
 ))
 (let (($x833 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x841 (= false false)))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x230 (_ bv0 32))))
 (=> $x637 $x841)))))
 ))
 (let (($x856 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x840 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x857 (= ?x840 (_ bv0 32))))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x230 (_ bv0 32))))
 (= $x637 $x857))))))
 ))
 (let (($x208 (and $x856 $x833)))
 (let (($x778 (and $x208 $x579)))
 (let (($x99 (and $x778 $x741)))
 (let (($x289 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x774 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x634 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x523 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x510 (and $x523 $x634)))
 (let (($x220 (not $x510)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x339 (and $x60 $x234)))
 (let (($x439 (and (not $x339) $x220)))
 (let (($x699 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x133 $x699)))
 (let (($x574 (not $x128)))
 (let (($x844 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x457 (and $x132 $x844)))
 (let (($x49 (and (not $x457) $x574)))
 (let (($x539 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x712 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x613 (and $x712 $x539)))
 (let (($x726 (and (and (and (and (and (and $x613 $x49) $x439) $x774) $x289) $x99) $x885)))
 (let (($x675 (and (and (and (and $x726 $x779) $x116) $x254) $x348)))
 (let (($x581 (= $x675 true)))
 (let (($x226 (= $x581 true)))
 (let (($x391 (= $x226 true)))
 (let (($x252 (= $x613 true)))
 (let (($x514 (= $x252 true)))
 (let (($x212 (= $x514 true)))
 (let (($x860 (= ?x329 input.dst.llvm-%m2)))
 (let (($x388 (= $x860 true)))
 (let (($x632 (= $x388 true)))
 (let (($x291 (and $x632 $x212)))
 (let (($x46 (and $x291 $x391)))
 (let (($x571 (and $x46 $x443)))
 (let (($x520 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x508 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x848 (bvuge ?x230 (_ bv1 32))))
 (=> $x848 (= ?x508 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x827 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x780 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x848 (bvuge ?x230 (_ bv1 32))))
 (= $x848 (bvuge ?x780 (_ bv1 32)))))))
 ))
 (let (($x824 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x780 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x230 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x230 (_ bv0 32))))
 (= $x637 (= ?x780 (_ bv0 32)))))))
 ))
 (let (($x816 (and $x824 $x833)))
 (let (($x828 (and $x816 $x827)))
 (let (($x246 (and $x828 $x520)))
 (let (($x622 (and $x246 $x571)))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x643 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x203 (_ bv1 32))))
 (=> $x600 (= ?x643 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x381 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x203 (_ bv1 32))))
 (= $x600 (bvuge ?x890 (_ bv1 32)))))))
 ))
 (let (($x853 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x203 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x843 (= ?x203 (_ bv0 32))))
 (= $x843 (= ?x890 (_ bv0 32)))))))
 ))
 (let (($x22 (and $x853 $x801)))
 (let (($x9 (and $x22 $x381)))
 (let (($x288 (and $x9 $x558)))
 (let (($x357 (and $x288 $x622)))
 (let (($x304 (=> $x357 $x449)))
 (not $x304))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 188 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x338 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x172 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x862 (bvadd ?x172 input.dst.llvm-%m1)))
 (let ((?x810 (concat (select input.dst.llvm-mem (bvadd ?x862 (_ bv1 32))) (select input.dst.llvm-mem ?x862))))
 (let ((?x863 (concat (select input.dst.llvm-mem (bvadd ?x862 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x862 (_ bv2 32))) ?x810))))
 (let ((?x148 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x579 (_ bv1 32))))
 (=> $x137 (= ?x148 ?x863))))))))))
 ))
 (let (($x750 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x432 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x432 (_ bv1 32))))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x579 (_ bv1 32))))
 (= $x137 $x405))))))
 ))
 (let (($x543 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x837 (= false false)))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (= ?x579 (_ bv0 32))))
 (=> $x778 $x837)))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x432 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x432 (_ bv0 32))))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (= ?x579 (_ bv0 32))))
 (= $x778 $x454))))))
 ))
 (let (($x783 (and $x135 $x543)))
 (let (($x211 (and $x783 $x750)))
 (let (($x349 (and $x211 $x338)))
 (let (($x195 (= $x349 true)))
 (let (($x685 (= $x195 true)))
 (let ((?x646 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x813 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x826 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x330 (concat ?x826 (concat ?x813 (concat ?x25 ?x646)))))
 (let (($x377 (= ?x330 input.dst.llvm-%m1)))
 (let (($x136 (= $x377 true)))
 (let (($x130 (= $x136 true)))
 (let ((?x447 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x382 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x604 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x604 (concat ?x213 (concat ?x382 ?x447)))))
 (let (($x568 (= input.dst.llvm-%m2 ?x142)))
 (let (($x578 (= input.dst.llvm-%m1 ?x330)))
 (let (($x145 (and $x578 $x568)))
 (let (($x488 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x172 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x587 (bvadd ?x172 input.dst.llvm-%m2)))
 (let ((?x524 (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv1 32))) (select input.dst.llvm-mem ?x587))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv2 32))) ?x524))))
 (let ((?x212 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x845 (bvuge ?x828 (_ bv1 32))))
 (=> $x845 (= ?x212 ?x199))))))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x432 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x432 (_ bv1 32))))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x845 (bvuge ?x828 (_ bv1 32))))
 (= $x845 $x405))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x837 (= false false)))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x508 (= ?x828 (_ bv0 32))))
 (=> $x508 $x837)))))
 ))
 (let (($x704 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x432 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x432 (_ bv0 32))))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x508 (= ?x828 (_ bv0 32))))
 (= $x508 $x454))))))
 ))
 (let (($x243 (and $x704 $x285)))
 (let (($x248 (and $x243 $x418)))
 (let (($x347 (and $x248 $x488)))
 (let (($x407 (and $x347 $x145)))
 (let ((?x28 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x529 (= (_ bv0 32) ?x28)))
 (let ((?x858 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x290 (= (_ bv0 32) ?x858)))
 (let ((?x842 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x842)))
 (let ((?x818 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x792 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x818)))
 (let (($x798 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x812 (and $x798 $x792)))
 (let (($x851 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x808 (and $x851 $x812)))
 (let (($x131 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x474 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x449 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (and $x449 $x304)))
 (let (($x376 (not $x223)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x312 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x567 (and $x312 $x143)))
 (let (($x375 (and (not $x567) $x376)))
 (let (($x337 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x443 (and $x189 $x337)))
 (let (($x571 (not $x443)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x675 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x391 (and $x675 $x226)))
 (let (($x357 (and (not $x391) $x571)))
 (let (($x335 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x619 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x278 (and $x619 $x335)))
 (let (($x460 (and (and (and (and (and (and $x278 $x357) $x375) $x474) $x131) $x349) $x808)))
 (let (($x356 (and (and (and (and $x460 $x274) $x290) $x529) $x407)))
 (let (($x206 (= $x356 true)))
 (let (($x125 (= $x206 true)))
 (let (($x164 (= $x125 true)))
 (let (($x886 (= $x278 true)))
 (let (($x889 (= $x886 true)))
 (let (($x269 (= $x889 true)))
 (let (($x242 (= ?x142 input.dst.llvm-%m2)))
 (let (($x345 (= $x242 true)))
 (let (($x887 (= $x345 true)))
 (let (($x303 (and $x887 $x269)))
 (let (($x533 (and $x303 $x164)))
 (let (($x697 (and $x533 $x130)))
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x148 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x579 (_ bv1 32))))
 (=> $x137 (= ?x148 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x579 (_ bv1 32))))
 (= $x137 (bvuge ?x208 (_ bv1 32)))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (= ?x579 (_ bv0 32))))
 (= $x778 (= ?x208 (_ bv0 32)))))))
 ))
 (let (($x644 (and $x310 $x543)))
 (let (($x883 (and $x644 $x367)))
 (let (($x280 (and $x883 $x621)))
 (let (($x471 (and $x280 $x697)))
 (let (($x544 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x845 (bvuge ?x828 (_ bv1 32))))
 (=> $x845 (= ?x212 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x845 (bvuge ?x828 (_ bv1 32))))
 (= $x845 (bvuge ?x309 (_ bv1 32)))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x508 (= ?x828 (_ bv0 32))))
 (= $x508 (= ?x309 (_ bv0 32)))))))
 ))
 (let (($x678 (and $x422 $x285)))
 (let (($x632 (and $x678 $x388)))
 (let (($x132 (and $x632 $x544)))
 (let (($x769 (and $x132 $x471)))
 (let (($x607 (=> $x769 $x685)))
 (not $x607)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x338 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x172 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x862 (bvadd ?x172 input.dst.llvm-%m1)))
 (let ((?x810 (concat (select input.dst.llvm-mem (bvadd ?x862 (_ bv1 32))) (select input.dst.llvm-mem ?x862))))
 (let ((?x863 (concat (select input.dst.llvm-mem (bvadd ?x862 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x862 (_ bv2 32))) ?x810))))
 (let ((?x148 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x579 (_ bv1 32))))
 (=> $x137 (= ?x148 ?x863))))))))))
 ))
 (let (($x750 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x432 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x432 (_ bv1 32))))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x579 (_ bv1 32))))
 (= $x137 $x405))))))
 ))
 (let (($x543 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x837 (= false false)))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (= ?x579 (_ bv0 32))))
 (=> $x778 $x837)))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x432 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x432 (_ bv0 32))))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (= ?x579 (_ bv0 32))))
 (= $x778 $x454))))))
 ))
 (let (($x783 (and $x135 $x543)))
 (let (($x211 (and $x783 $x750)))
 (let (($x349 (and $x211 $x338)))
 (let (($x195 (= $x349 true)))
 (let (($x685 (= $x195 true)))
 (let ((?x646 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x813 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x826 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x330 (concat ?x826 (concat ?x813 (concat ?x25 ?x646)))))
 (let (($x377 (= ?x330 input.dst.llvm-%m1)))
 (let (($x136 (= $x377 true)))
 (let (($x130 (= $x136 true)))
 (let ((?x447 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x382 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x604 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x604 (concat ?x213 (concat ?x382 ?x447)))))
 (let (($x568 (= input.dst.llvm-%m2 ?x142)))
 (let (($x578 (= input.dst.llvm-%m1 ?x330)))
 (let (($x145 (and $x578 $x568)))
 (let (($x488 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x172 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x587 (bvadd ?x172 input.dst.llvm-%m2)))
 (let ((?x524 (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv1 32))) (select input.dst.llvm-mem ?x587))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv2 32))) ?x524))))
 (let ((?x212 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x845 (bvuge ?x828 (_ bv1 32))))
 (=> $x845 (= ?x212 ?x199))))))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x432 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x432 (_ bv1 32))))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x845 (bvuge ?x828 (_ bv1 32))))
 (= $x845 $x405))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x837 (= false false)))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x508 (= ?x828 (_ bv0 32))))
 (=> $x508 $x837)))))
 ))
 (let (($x704 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x432 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x432 (_ bv0 32))))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x508 (= ?x828 (_ bv0 32))))
 (= $x508 $x454))))))
 ))
 (let (($x243 (and $x704 $x285)))
 (let (($x248 (and $x243 $x418)))
 (let (($x347 (and $x248 $x488)))
 (let (($x407 (and $x347 $x145)))
 (let ((?x28 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x529 (= (_ bv0 32) ?x28)))
 (let ((?x858 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x290 (= (_ bv0 32) ?x858)))
 (let ((?x842 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x842)))
 (let ((?x818 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x792 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x818)))
 (let (($x798 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x812 (and $x798 $x792)))
 (let (($x851 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x808 (and $x851 $x812)))
 (let (($x131 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x474 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x449 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (and $x449 $x304)))
 (let (($x376 (not $x223)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x312 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x567 (and $x312 $x143)))
 (let (($x375 (and (not $x567) $x376)))
 (let (($x337 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x443 (and $x189 $x337)))
 (let (($x571 (not $x443)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x675 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x391 (and $x675 $x226)))
 (let (($x357 (and (not $x391) $x571)))
 (let (($x335 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x619 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x278 (and $x619 $x335)))
 (let (($x460 (and (and (and (and (and (and $x278 $x357) $x375) $x474) $x131) $x349) $x808)))
 (let (($x356 (and (and (and (and $x460 $x274) $x290) $x529) $x407)))
 (let (($x206 (= $x356 true)))
 (let (($x125 (= $x206 true)))
 (let (($x164 (= $x125 true)))
 (let (($x886 (= $x278 true)))
 (let (($x889 (= $x886 true)))
 (let (($x269 (= $x889 true)))
 (let (($x242 (= ?x142 input.dst.llvm-%m2)))
 (let (($x345 (= $x242 true)))
 (let (($x887 (= $x345 true)))
 (let (($x303 (and $x887 $x269)))
 (let (($x533 (and $x303 $x164)))
 (let (($x697 (and $x533 $x130)))
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x148 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x579 (_ bv1 32))))
 (=> $x137 (= ?x148 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x579 (_ bv1 32))))
 (= $x137 (bvuge ?x208 (_ bv1 32)))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x579 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (= ?x579 (_ bv0 32))))
 (= $x778 (= ?x208 (_ bv0 32)))))))
 ))
 (let (($x644 (and $x310 $x543)))
 (let (($x883 (and $x644 $x367)))
 (let (($x280 (and $x883 $x621)))
 (let (($x471 (and $x280 $x697)))
 (let (($x544 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x845 (bvuge ?x828 (_ bv1 32))))
 (=> $x845 (= ?x212 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x845 (bvuge ?x828 (_ bv1 32))))
 (= $x845 (bvuge ?x309 (_ bv1 32)))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x828 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x508 (= ?x828 (_ bv0 32))))
 (= $x508 (= ?x309 (_ bv0 32)))))))
 ))
 (let (($x678 (and $x422 $x285)))
 (let (($x632 (and $x678 $x388)))
 (let (($x132 (and $x632 $x544)))
 (let (($x769 (and $x132 $x471)))
 (let (($x607 (=> $x769 $x685)))
 (not $x607)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x651 (bvadd ?x456 input.dst.llvm-%m2)))
 (let ((?x462 (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv1 32))) (select input.dst.llvm-mem ?x651))))
 (let ((?x774 (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv2 32))) ?x462))))
 (let ((?x269 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x883 (_ bv1 32))))
 (=> $x561 (= ?x269 ?x774))))))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x236 (_ bv1 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x883 (_ bv1 32))))
 (= $x561 $x234))))))
 ))
 (let (($x282 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x676 (= false false)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x883 (_ bv0 32))))
 (=> $x148 $x676)))))
 ))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (= ?x236 (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x883 (_ bv0 32))))
 (= $x148 $x218))))))
 ))
 (let (($x352 (and $x318 $x282)))
 (let (($x734 (and $x352 $x445)))
 (let (($x615 (and $x734 $x289)))
 (let (($x712 (= $x615 true)))
 (let (($x539 (= $x712 true)))
 (let ((?x857 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x864 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x726 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x726 (concat ?x864 (concat ?x264 ?x857)))))
 (let (($x522 (= ?x166 input.dst.llvm-%m2)))
 (let (($x630 (= $x522 true)))
 (let (($x731 (= $x630 true)))
 (let (($x281 (= input.dst.llvm-%m2 ?x166)))
 (let ((?x587 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x528 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x199 (concat ?x225 (concat ?x528 ?x587)))))
 (let (($x839 (= input.dst.llvm-%m1 ?x171)))
 (let (($x161 (and $x839 $x281)))
 (let (($x116 (and $x615 $x161)))
 (let ((?x170 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x429 (= (_ bv0 32) ?x170)))
 (let ((?x342 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x175 (= (_ bv0 32) ?x342)))
 (let ((?x87 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x708 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x746 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x711 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x746)))
 (let (($x463 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x52 (and $x463 $x711)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x722 (and $x7 $x52)))
 (let (($x33 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x253 (bvadd ?x456 input.dst.llvm-%m1)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x85))))
 (let ((?x28 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x750 (_ bv1 32))))
 (=> $x851 (= ?x28 ?x379))))))))))
 ))
 (let (($x787 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x236 (_ bv1 32))))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x750 (_ bv1 32))))
 (= $x851 $x234))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x676 (= false false)))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x750 (_ bv0 32))))
 (=> $x211 $x676)))))
 ))
 (let (($x702 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (= ?x236 (_ bv0 32))))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x750 (_ bv0 32))))
 (= $x211 $x218))))))
 ))
 (let (($x231 (and $x702 $x370)))
 (let (($x283 (and $x231 $x787)))
 (let (($x861 (and $x283 $x33)))
 (let (($x588 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x566 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x540 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x435 (and $x540 $x314)))
 (let (($x844 (not $x435)))
 (let (($x685 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x607 (and $x195 $x685)))
 (let (($x123 (and (not $x607) $x844)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x377 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x377 $x136)))
 (let (($x697 (not $x130)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x356 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x356 $x125)))
 (let (($x769 (and (not $x164) $x697)))
 (let (($x646 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x813 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x129 (and $x813 $x646)))
 (let (($x288 (and (and (and (and (and (and $x129 $x769) $x123) $x566) $x588) $x861) $x722)))
 (let (($x608 (and (and (and (and $x288 $x708) $x175) $x429) $x116)))
 (let (($x824 (= $x608 true)))
 (let (($x825 (= $x824 true)))
 (let (($x833 (= $x825 true)))
 (let (($x830 (= $x129 true)))
 (let (($x330 (= $x830 true)))
 (let (($x578 (= $x330 true)))
 (let (($x488 (= ?x171 input.dst.llvm-%m1)))
 (let (($x347 (= $x488 true)))
 (let (($x849 (= $x347 true)))
 (let (($x568 (and $x849 $x578)))
 (let (($x594 (and $x568 $x833)))
 (let (($x542 (and $x594 $x731)))
 (let (($x531 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x750 (_ bv1 32))))
 (=> $x851 (= ?x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x818 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x750 (_ bv1 32))))
 (= $x851 (bvuge ?x783 (_ bv1 32)))))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x750 (_ bv0 32))))
 (= $x211 (= ?x783 (_ bv0 32)))))))
 ))
 (let (($x657 (and $x172 $x370)))
 (let (($x792 (and $x657 $x818)))
 (let (($x704 (and $x792 $x531)))
 (let (($x93 (and $x704 $x542)))
 (let (($x348 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x883 (_ bv1 32))))
 (=> $x561 (= ?x269 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x29 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x883 (_ bv1 32))))
 (= $x561 (bvuge ?x29 (_ bv1 32)))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x29 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x883 (_ bv0 32))))
 (= $x148 (= ?x29 (_ bv0 32)))))))
 ))
 (let (($x772 (and $x254 $x282)))
 (let (($x887 (and $x772 $x345)))
 (let (($x675 (and $x887 $x348)))
 (let (($x698 (and $x675 $x93)))
 (let (($x613 (=> $x698 $x539)))
 (not $x613)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x651 (bvadd ?x456 input.dst.llvm-%m2)))
 (let ((?x462 (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv1 32))) (select input.dst.llvm-mem ?x651))))
 (let ((?x774 (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x651 (_ bv2 32))) ?x462))))
 (let ((?x269 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x883 (_ bv1 32))))
 (=> $x561 (= ?x269 ?x774))))))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x236 (_ bv1 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x883 (_ bv1 32))))
 (= $x561 $x234))))))
 ))
 (let (($x282 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x676 (= false false)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x883 (_ bv0 32))))
 (=> $x148 $x676)))))
 ))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (= ?x236 (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x883 (_ bv0 32))))
 (= $x148 $x218))))))
 ))
 (let (($x352 (and $x318 $x282)))
 (let (($x734 (and $x352 $x445)))
 (let (($x615 (and $x734 $x289)))
 (let (($x712 (= $x615 true)))
 (let (($x539 (= $x712 true)))
 (let ((?x857 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x864 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x726 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x726 (concat ?x864 (concat ?x264 ?x857)))))
 (let (($x522 (= ?x166 input.dst.llvm-%m2)))
 (let (($x630 (= $x522 true)))
 (let (($x731 (= $x630 true)))
 (let (($x281 (= input.dst.llvm-%m2 ?x166)))
 (let ((?x587 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x528 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x199 (concat ?x225 (concat ?x528 ?x587)))))
 (let (($x839 (= input.dst.llvm-%m1 ?x171)))
 (let (($x161 (and $x839 $x281)))
 (let (($x116 (and $x615 $x161)))
 (let ((?x170 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x429 (= (_ bv0 32) ?x170)))
 (let ((?x342 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x175 (= (_ bv0 32) ?x342)))
 (let ((?x87 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x708 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x746 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x711 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x746)))
 (let (($x463 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x52 (and $x463 $x711)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x722 (and $x7 $x52)))
 (let (($x33 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x456 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x253 (bvadd ?x456 input.dst.llvm-%m1)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x85))))
 (let ((?x28 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x750 (_ bv1 32))))
 (=> $x851 (= ?x28 ?x379))))))))))
 ))
 (let (($x787 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x236 (_ bv1 32))))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x750 (_ bv1 32))))
 (= $x851 $x234))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x676 (= false false)))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x750 (_ bv0 32))))
 (=> $x211 $x676)))))
 ))
 (let (($x702 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (= ?x236 (_ bv0 32))))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x750 (_ bv0 32))))
 (= $x211 $x218))))))
 ))
 (let (($x231 (and $x702 $x370)))
 (let (($x283 (and $x231 $x787)))
 (let (($x861 (and $x283 $x33)))
 (let (($x588 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x566 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x540 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x435 (and $x540 $x314)))
 (let (($x844 (not $x435)))
 (let (($x685 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x607 (and $x195 $x685)))
 (let (($x123 (and (not $x607) $x844)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x377 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x377 $x136)))
 (let (($x697 (not $x130)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x356 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x356 $x125)))
 (let (($x769 (and (not $x164) $x697)))
 (let (($x646 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x813 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x129 (and $x813 $x646)))
 (let (($x288 (and (and (and (and (and (and $x129 $x769) $x123) $x566) $x588) $x861) $x722)))
 (let (($x608 (and (and (and (and $x288 $x708) $x175) $x429) $x116)))
 (let (($x824 (= $x608 true)))
 (let (($x825 (= $x824 true)))
 (let (($x833 (= $x825 true)))
 (let (($x830 (= $x129 true)))
 (let (($x330 (= $x830 true)))
 (let (($x578 (= $x330 true)))
 (let (($x488 (= ?x171 input.dst.llvm-%m1)))
 (let (($x347 (= $x488 true)))
 (let (($x849 (= $x347 true)))
 (let (($x568 (and $x849 $x578)))
 (let (($x594 (and $x568 $x833)))
 (let (($x542 (and $x594 $x731)))
 (let (($x531 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x750 (_ bv1 32))))
 (=> $x851 (= ?x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x818 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x750 (_ bv1 32))))
 (= $x851 (bvuge ?x783 (_ bv1 32)))))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x783 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x750 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x750 (_ bv0 32))))
 (= $x211 (= ?x783 (_ bv0 32)))))))
 ))
 (let (($x657 (and $x172 $x370)))
 (let (($x792 (and $x657 $x818)))
 (let (($x704 (and $x792 $x531)))
 (let (($x93 (and $x704 $x542)))
 (let (($x348 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x883 (_ bv1 32))))
 (=> $x561 (= ?x269 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x29 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x883 (_ bv1 32))))
 (= $x561 (bvuge ?x29 (_ bv1 32)))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x29 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x883 (_ bv0 32))))
 (= $x148 (= ?x29 (_ bv0 32)))))))
 ))
 (let (($x772 (and $x254 $x282)))
 (let (($x887 (and $x772 $x345)))
 (let (($x675 (and $x887 $x348)))
 (let (($x698 (and $x675 $x93)))
 (let (($x613 (=> $x698 $x539)))
 (not $x613)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x59 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x255 (bvneg ?x59)))
 (let (($x455 (= ?x255 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x194 (= $x455 true)))
 (let (($x425 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x745 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x484 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x14 (and $x484 $x745)))
 (let (($x258 (and $x14 $x425)))
 (let (($x423 (= $x258 true)))
 (let (($x761 (= $x423 true)))
 (let (($x478 (= $x761 true)))
 (let ((?x92 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x183 (= (_ bv0 32) ?x92)))
 (let ((?x760 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x538 (= (_ bv0 32) ?x760)))
 (let ((?x311 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x694 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x311)))
 (let ((?x666 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x666)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x518 (and $x366 $x54)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x119 $x518)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x326 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x631 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x368 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x458 (and $x368 $x631)))
 (let (($x361 (not $x458)))
 (let (($x720 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x406 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x582 (and $x406 $x720)))
 (let (($x625 (and (not $x582) $x361)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x599 $x138)))
 (let (($x296 (not $x209)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x480 (and $x69 $x140)))
 (let (($x591 (and (not $x480) $x296)))
 (let (($x265 (and (and (and (and (and (and $x591 $x625) $x326) $x185) $x74) $x694) $x538)))
 (let (($x498 (and $x265 $x183)))
 (let (($x693 (= $x498 true)))
 (let (($x639 (= $x693 true)))
 (let (($x758 (= $x639 true)))
 (let (($x822 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x290 (bvadd ?x785 input.dst.llvm-%m2)))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem ?x290))))
 (let ((?x803 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv2 32))) ?x605))))
 (let ((?x578 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x792 (_ bv1 32))))
 (=> $x570 (= ?x578 ?x803))))))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x779 (bvuge ?x393 (_ bv1 32))))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x792 (_ bv1 32))))
 (= $x570 $x779))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x71 (= false false)))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x792 (_ bv0 32))))
 (=> $x28 $x71)))))
 ))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x807 (= ?x393 (_ bv0 32))))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x792 (_ bv0 32))))
 (= $x28 $x807))))))
 ))
 (let (($x108 (and $x504 $x243)))
 (let (($x131 (and $x108 $x155)))
 (let (($x245 (and $x131 $x822)))
 (let (($x273 (= $x245 true)))
 (let (($x836 (= $x273 true)))
 (let (($x266 (= $x836 true)))
 (let ((?x521 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x633 (= (_ bv0 2) ?x521)))
 (let (($x753 (= $x633 true)))
 (let (($x794 (= $x753 true)))
 (let (($x763 (= $x14 true)))
 (let (($x713 (= $x763 true)))
 (let (($x404 (= $x713 true)))
 (let (($x603 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x395 (bvadd ?x785 input.dst.llvm-%m1)))
 (let ((?x465 (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv1 32))) (select input.dst.llvm-mem ?x395))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv2 32))) ?x465))))
 (let ((?x170 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x787 (_ bv1 32))))
 (=> $x7 (= ?x170 ?x422))))))))))
 ))
 (let (($x5 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x779 (bvuge ?x393 (_ bv1 32))))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x787 (_ bv1 32))))
 (= $x7 $x779))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x71 (= false false)))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x787 (_ bv0 32))))
 (=> $x283 $x71)))))
 ))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x807 (= ?x393 (_ bv0 32))))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x787 (_ bv0 32))))
 (= $x283 $x807))))))
 ))
 (let (($x335 (and $x619 $x353)))
 (let (($x81 (and $x335 $x5)))
 (let (($x494 (and $x81 $x603)))
 (let (($x325 (= $x494 true)))
 (let (($x34 (= $x325 true)))
 (let (($x767 (= $x34 true)))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x395 (bvadd ?x785 input.dst.llvm-%m1)))
 (let ((?x512 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x395))))
 (let ((?x834 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv2 32))) ?x512)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv3 32))) ?x834)))
 (let ((?x170 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x787 (_ bv1 32))))
 (=> $x7 (= ?x170 ?x293)))))))))))
 ))
 (let (($x419 (and $x81 $x114)))
 (let (($x180 (= $x419 true)))
 (let (($x181 (= $x180 true)))
 (let (($x227 (= $x181 true)))
 (let (($x543 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x290 (bvadd ?x785 input.dst.llvm-%m2)))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x290))))
 (let ((?x832 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x290 (_ bv2 32))) ?x291)))
 (let ((?x548 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x290 (_ bv3 32))) ?x832)))
 (let ((?x578 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x792 (_ bv1 32))))
 (=> $x570 (= ?x578 ?x548)))))))))))
 ))
 (let (($x669 (and $x131 $x543)))
 (let (($x213 (= $x669 true)))
 (let (($x76 (= $x213 true)))
 (let (($x382 (= $x76 true)))
 (let (($x852 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x395 (bvadd ?x785 input.dst.llvm-%m1)))
 (let ((?x465 (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv1 32))) (select input.dst.llvm-mem ?x395))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv2 32))) ?x465))))
 (let ((?x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x231 (_ bv1 32))))
 (=> $x558 (= ?x230 ?x422))))))))))
 ))
 (let (($x801 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x779 (bvuge ?x393 (_ bv1 32))))
 (let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x231 (_ bv1 32))))
 (= $x558 $x779))))))
 ))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x71 (= false false)))
 (let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x231 (_ bv0 32))))
 (=> $x234 $x71)))))
 ))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x807 (= ?x393 (_ bv0 32))))
 (let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x231 (_ bv0 32))))
 (= $x234 $x807))))))
 ))
 (let (($x884 (and $x50 $x100)))
 (let (($x22 (and $x884 $x801)))
 (let (($x837 (and $x22 $x852)))
 (let (($x246 (= $x837 true)))
 (let (($x285 (= $x246 true)))
 (let (($x678 (= $x285 true)))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x395 (bvadd ?x785 input.dst.llvm-%m1)))
 (let ((?x512 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x395))))
 (let ((?x834 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv2 32))) ?x512)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv3 32))) ?x834)))
 (let ((?x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x231 (_ bv1 32))))
 (=> $x558 (= ?x230 ?x293)))))))))))
 ))
 (let (($x485 (and $x22 $x150)))
 (let (($x770 (= $x485 true)))
 (let (($x784 (= $x770 true)))
 (let (($x612 (= $x784 true)))
 (let (($x845 (and $x612 $x678)))
 (let (($x241 (and $x845 $x382)))
 (let (($x147 (and $x241 $x227)))
 (let (($x721 (and $x147 $x767)))
 (let (($x620 (and $x721 $x404)))
 (let (($x267 (and $x620 $x794)))
 (let (($x12 (and $x267 $x266)))
 (let (($x671 (and $x12 $x758)))
 (let (($x90 (and $x671 $x478)))
 (let (($x780 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x170 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x787 (_ bv1 32))))
 (=> $x7 (= ?x170 ?x230)))))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x231 (_ bv1 32))))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x787 (_ bv1 32))))
 (= $x7 $x558))))))
 ))
 (let (($x456 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x231 (_ bv0 32))))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x787 (_ bv0 32))))
 (= $x283 $x234))))))
 ))
 (let (($x585 (and $x456 $x353)))
 (let (($x711 (and $x585 $x746)))
 (let (($x318 (and $x711 $x780)))
 (let (($x398 (and $x318 $x90)))
 (let (($x407 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x792 (_ bv1 32))))
 (=> $x570 (= ?x578 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x792 (_ bv1 32))))
 (= $x570 (bvuge ?x346 (_ bv1 32)))))))
 ))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x792 (_ bv0 32))))
 (= $x28 (= ?x346 (_ bv0 32)))))))
 ))
 (let (($x248 (and $x529 $x243)))
 (let (($x849 (and $x248 $x347)))
 (let (($x356 (and $x849 $x407)))
 (let (($x752 (and $x356 $x398)))
 (let (($x394 (=> $x752 $x194)))
 (not $x394)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x59 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x255 (bvneg ?x59)))
 (let (($x455 (= ?x255 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x194 (= $x455 true)))
 (let (($x425 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x745 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x484 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x14 (and $x484 $x745)))
 (let (($x258 (and $x14 $x425)))
 (let (($x423 (= $x258 true)))
 (let (($x761 (= $x423 true)))
 (let (($x478 (= $x761 true)))
 (let ((?x92 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x183 (= (_ bv0 32) ?x92)))
 (let ((?x760 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x538 (= (_ bv0 32) ?x760)))
 (let ((?x311 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x694 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x311)))
 (let ((?x666 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x666)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x518 (and $x366 $x54)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x119 $x518)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x326 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x631 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x368 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x458 (and $x368 $x631)))
 (let (($x361 (not $x458)))
 (let (($x720 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x406 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x582 (and $x406 $x720)))
 (let (($x625 (and (not $x582) $x361)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x599 $x138)))
 (let (($x296 (not $x209)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x480 (and $x69 $x140)))
 (let (($x591 (and (not $x480) $x296)))
 (let (($x265 (and (and (and (and (and (and $x591 $x625) $x326) $x185) $x74) $x694) $x538)))
 (let (($x498 (and $x265 $x183)))
 (let (($x693 (= $x498 true)))
 (let (($x639 (= $x693 true)))
 (let (($x758 (= $x639 true)))
 (let (($x822 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x290 (bvadd ?x785 input.dst.llvm-%m2)))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem ?x290))))
 (let ((?x803 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv2 32))) ?x605))))
 (let ((?x578 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x792 (_ bv1 32))))
 (=> $x570 (= ?x578 ?x803))))))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x779 (bvuge ?x393 (_ bv1 32))))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x792 (_ bv1 32))))
 (= $x570 $x779))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x71 (= false false)))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x792 (_ bv0 32))))
 (=> $x28 $x71)))))
 ))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x807 (= ?x393 (_ bv0 32))))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x792 (_ bv0 32))))
 (= $x28 $x807))))))
 ))
 (let (($x108 (and $x504 $x243)))
 (let (($x131 (and $x108 $x155)))
 (let (($x245 (and $x131 $x822)))
 (let (($x273 (= $x245 true)))
 (let (($x836 (= $x273 true)))
 (let (($x266 (= $x836 true)))
 (let ((?x521 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x633 (= (_ bv0 2) ?x521)))
 (let (($x753 (= $x633 true)))
 (let (($x794 (= $x753 true)))
 (let (($x763 (= $x14 true)))
 (let (($x713 (= $x763 true)))
 (let (($x404 (= $x713 true)))
 (let (($x603 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x395 (bvadd ?x785 input.dst.llvm-%m1)))
 (let ((?x465 (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv1 32))) (select input.dst.llvm-mem ?x395))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv2 32))) ?x465))))
 (let ((?x170 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x787 (_ bv1 32))))
 (=> $x7 (= ?x170 ?x422))))))))))
 ))
 (let (($x5 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x779 (bvuge ?x393 (_ bv1 32))))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x787 (_ bv1 32))))
 (= $x7 $x779))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x71 (= false false)))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x787 (_ bv0 32))))
 (=> $x283 $x71)))))
 ))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x807 (= ?x393 (_ bv0 32))))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x787 (_ bv0 32))))
 (= $x283 $x807))))))
 ))
 (let (($x335 (and $x619 $x353)))
 (let (($x81 (and $x335 $x5)))
 (let (($x494 (and $x81 $x603)))
 (let (($x325 (= $x494 true)))
 (let (($x34 (= $x325 true)))
 (let (($x767 (= $x34 true)))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x395 (bvadd ?x785 input.dst.llvm-%m1)))
 (let ((?x512 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x395))))
 (let ((?x834 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv2 32))) ?x512)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv3 32))) ?x834)))
 (let ((?x170 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x787 (_ bv1 32))))
 (=> $x7 (= ?x170 ?x293)))))))))))
 ))
 (let (($x419 (and $x81 $x114)))
 (let (($x180 (= $x419 true)))
 (let (($x181 (= $x180 true)))
 (let (($x227 (= $x181 true)))
 (let (($x543 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x290 (bvadd ?x785 input.dst.llvm-%m2)))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x290))))
 (let ((?x832 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x290 (_ bv2 32))) ?x291)))
 (let ((?x548 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x290 (_ bv3 32))) ?x832)))
 (let ((?x578 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x792 (_ bv1 32))))
 (=> $x570 (= ?x578 ?x548)))))))))))
 ))
 (let (($x669 (and $x131 $x543)))
 (let (($x213 (= $x669 true)))
 (let (($x76 (= $x213 true)))
 (let (($x382 (= $x76 true)))
 (let (($x852 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x395 (bvadd ?x785 input.dst.llvm-%m1)))
 (let ((?x465 (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv1 32))) (select input.dst.llvm-mem ?x395))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x395 (_ bv2 32))) ?x465))))
 (let ((?x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x231 (_ bv1 32))))
 (=> $x558 (= ?x230 ?x422))))))))))
 ))
 (let (($x801 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x779 (bvuge ?x393 (_ bv1 32))))
 (let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x231 (_ bv1 32))))
 (= $x558 $x779))))))
 ))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x71 (= false false)))
 (let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x231 (_ bv0 32))))
 (=> $x234 $x71)))))
 ))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x807 (= ?x393 (_ bv0 32))))
 (let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x231 (_ bv0 32))))
 (= $x234 $x807))))))
 ))
 (let (($x884 (and $x50 $x100)))
 (let (($x22 (and $x884 $x801)))
 (let (($x837 (and $x22 $x852)))
 (let (($x246 (= $x837 true)))
 (let (($x285 (= $x246 true)))
 (let (($x678 (= $x285 true)))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x785 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x395 (bvadd ?x785 input.dst.llvm-%m1)))
 (let ((?x512 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x395))))
 (let ((?x834 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv2 32))) ?x512)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x395 (_ bv3 32))) ?x834)))
 (let ((?x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x231 (_ bv1 32))))
 (=> $x558 (= ?x230 ?x293)))))))))))
 ))
 (let (($x485 (and $x22 $x150)))
 (let (($x770 (= $x485 true)))
 (let (($x784 (= $x770 true)))
 (let (($x612 (= $x784 true)))
 (let (($x845 (and $x612 $x678)))
 (let (($x241 (and $x845 $x382)))
 (let (($x147 (and $x241 $x227)))
 (let (($x721 (and $x147 $x767)))
 (let (($x620 (and $x721 $x404)))
 (let (($x267 (and $x620 $x794)))
 (let (($x12 (and $x267 $x266)))
 (let (($x671 (and $x12 $x758)))
 (let (($x90 (and $x671 $x478)))
 (let (($x780 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x170 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x787 (_ bv1 32))))
 (=> $x7 (= ?x170 ?x230)))))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x558 (bvuge ?x231 (_ bv1 32))))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x787 (_ bv1 32))))
 (= $x7 $x558))))))
 ))
 (let (($x456 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x231 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x231 (_ bv0 32))))
 (let ((?x787 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x787 (_ bv0 32))))
 (= $x283 $x234))))))
 ))
 (let (($x585 (and $x456 $x353)))
 (let (($x711 (and $x585 $x746)))
 (let (($x318 (and $x711 $x780)))
 (let (($x398 (and $x318 $x90)))
 (let (($x407 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x792 (_ bv1 32))))
 (=> $x570 (= ?x578 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x792 (_ bv1 32))))
 (= $x570 (bvuge ?x346 (_ bv1 32)))))))
 ))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x792 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x792 (_ bv0 32))))
 (= $x28 (= ?x346 (_ bv0 32)))))))
 ))
 (let (($x248 (and $x529 $x243)))
 (let (($x849 (and $x248 $x347)))
 (let (($x356 (and $x849 $x407)))
 (let (($x752 (and $x356 $x398)))
 (let (($x394 (=> $x752 $x194)))
 (not $x394)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x338 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x842 (bvneg ?x338)))
 (let (($x115 (= ?x842 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x858 (= $x115 true)))
 (let (($x432 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x750 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x675 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x211 (and $x675 $x750)))
 (let (($x349 (and $x211 $x432)))
 (let (($x460 (= $x349 true)))
 (let (($x863 (= $x460 true)))
 (let (($x390 (= $x863 true)))
 (let ((?x240 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x37 (= (_ bv0 32) ?x240)))
 (let ((?x846 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x239 (= (_ bv0 32) ?x846)))
 (let ((?x447 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x447)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x502 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x82)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x627 (and $x176 $x502)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x301 $x627)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x650 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x773 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x821 (and $x32 $x773)))
 (let (($x284 (not $x821)))
 (let (($x554 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x327 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x438 (and $x327 $x554)))
 (let (($x604 (and (not $x438) $x284)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x600 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x386 (and $x600 $x9)))
 (let (($x891 (not $x386)))
 (let (($x853 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x854 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x854 $x853)))
 (let (($x855 (and (not $x305) $x891)))
 (let (($x207 (and (and (and (and (and (and $x855 $x604) $x650) $x39) $x77) $x23) $x239)))
 (let (($x563 (and $x207 $x37)))
 (let (($x373 (= $x563 true)))
 (let (($x223 (= $x373 true)))
 (let (($x376 (= $x223 true)))
 (let (($x433 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x587 (bvadd ?x352 input.dst.llvm-%m2)))
 (let ((?x449 (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv1 32))) (select input.dst.llvm-mem ?x587))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv2 32))) ?x449))))
 (let ((?x537 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x711 (_ bv1 32))))
 (=> $x22 (= ?x537 ?x388))))))))))
 ))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x758 (_ bv1 32))))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x711 (_ bv1 32))))
 (= $x22 $x194))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x637 (= false false)))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x711 (_ bv0 32))))
 (=> $x170 $x637)))))
 ))
 (let (($x710 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x671 (= ?x758 (_ bv0 32))))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x711 (_ bv0 32))))
 (= $x170 $x671))))))
 ))
 (let (($x73 (and $x710 $x418)))
 (let (($x297 (and $x73 $x590)))
 (let (($x196 (and $x297 $x433)))
 (let (($x43 (= $x196 true)))
 (let (($x98 (= $x43 true)))
 (let (($x490 (= $x98 true)))
 (let ((?x225 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x159 (= (_ bv0 2) ?x225)))
 (let (($x528 (= $x159 true)))
 (let (($x127 (= $x528 true)))
 (let (($x473 (= $x211 true)))
 (let (($x172 (= $x473 true)))
 (let (($x261 (= $x172 true)))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x271 (bvadd ?x352 input.dst.llvm-%m1)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x68))))
 (let ((?x721 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x486 (_ bv1 32))))
 (=> $x114 (= ?x721 ?x10))))))))))
 ))
 (let (($x566 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x758 (_ bv1 32))))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x486 (_ bv1 32))))
 (= $x114 $x194))))))
 ))
 (let (($x543 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x637 (= false false)))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x486 (_ bv0 32))))
 (=> $x291 $x637)))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x671 (= ?x758 (_ bv0 32))))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x486 (_ bv0 32))))
 (= $x291 $x671))))))
 ))
 (let (($x844 (and $x435 $x543)))
 (let (($x149 (and $x844 $x566)))
 (let (($x342 (and $x149 $x421)))
 (let (($x175 (= $x342 true)))
 (let (($x8 (= $x175 true)))
 (let (($x269 (= $x8 true)))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x271 (bvadd ?x352 input.dst.llvm-%m1)))
 (let ((?x475 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x271))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv2 32))) ?x475)))
 (let ((?x369 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv3 32))) ?x15)))
 (let ((?x721 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x486 (_ bv1 32))))
 (=> $x114 (= ?x721 ?x369)))))))))))
 ))
 (let (($x661 (and $x149 $x218)))
 (let (($x85 (= $x661 true)))
 (let (($x707 (= $x85 true)))
 (let (($x379 (= $x707 true)))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x587 (bvadd ?x352 input.dst.llvm-%m2)))
 (let ((?x672 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x587 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x587))))
 (let ((?x691 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x587 (_ bv2 32))) ?x672)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x587 (_ bv3 32))) ?x691)))
 (let ((?x537 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x711 (_ bv1 32))))
 (=> $x22 (= ?x537 ?x300)))))))))))
 ))
 (let (($x583 (and $x297 $x430)))
 (let (($x178 (= $x583 true)))
 (let (($x665 (= $x178 true)))
 (let (($x25 (= $x665 true)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x271 (bvadd ?x352 input.dst.llvm-%m1)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x68))))
 (let ((?x767 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x132 (_ bv1 32))))
 (=> $x117 (= ?x767 ?x10))))))))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x758 (_ bv1 32))))
 (let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x132 (_ bv1 32))))
 (= $x117 $x194))))))
 ))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x637 (= false false)))
 (let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x132 (_ bv0 32))))
 (=> $x212 $x637)))))
 ))
 (let (($x610 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x671 (= ?x758 (_ bv0 32))))
 (let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x132 (_ bv0 32))))
 (= $x212 $x671))))))
 ))
 (let (($x761 (and $x610 $x423)))
 (let (($x206 (and $x761 $x362)))
 (let (($x6 (and $x206 $x188)))
 (let (($x339 (= $x6 true)))
 (let (($x203 (= $x339 true)))
 (let (($x523 (= $x203 true)))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x271 (bvadd ?x352 input.dst.llvm-%m1)))
 (let ((?x475 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x271))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv2 32))) ?x475)))
 (let ((?x369 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv3 32))) ?x15)))
 (let ((?x767 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x132 (_ bv1 32))))
 (=> $x117 (= ?x767 ?x369)))))))))))
 ))
 (let (($x247 (and $x206 $x62)))
 (let (($x237 (= $x247 true)))
 (let (($x294 (= $x237 true)))
 (let (($x79 (= $x294 true)))
 (let (($x634 (and $x79 $x523)))
 (let (($x45 (and $x634 $x25)))
 (let (($x674 (and $x45 $x379)))
 (let (($x889 (and $x674 $x269)))
 (let (($x370 (and $x889 $x261)))
 (let (($x18 (and $x370 $x127)))
 (let (($x526 (and $x18 $x490)))
 (let (($x375 (and $x526 $x376)))
 (let (($x648 (and $x375 $x390)))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x767 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x721 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x486 (_ bv1 32))))
 (=> $x114 (= ?x721 ?x767)))))))
 ))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x132 (_ bv1 32))))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x486 (_ bv1 32))))
 (= $x114 $x117))))))
 ))
 (let (($x548 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x132 (_ bv0 32))))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x486 (_ bv0 32))))
 (= $x291 $x212))))))
 ))
 (let (($x669 (and $x548 $x543)))
 (let (($x181 (and $x669 $x180)))
 (let (($x452 (and $x181 $x484)))
 (let (($x810 (and $x452 $x648)))
 (let (($x834 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x711 (_ bv1 32))))
 (=> $x22 (= ?x537 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x847 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x711 (_ bv1 32))))
 (= $x22 (bvuge ?x558 (_ bv1 32)))))))
 ))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x711 (_ bv0 32))))
 (= $x170 (= ?x558 (_ bv0 32)))))))
 ))
 (let (($x445 (and $x429 $x418)))
 (let (($x785 (and $x445 $x847)))
 (let (($x293 (and $x785 $x834)))
 (let (($x454 (and $x293 $x810)))
 (let (($x104 (=> $x454 $x858)))
 (not $x104)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x338 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x842 (bvneg ?x338)))
 (let (($x115 (= ?x842 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x858 (= $x115 true)))
 (let (($x432 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x750 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x675 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x211 (and $x675 $x750)))
 (let (($x349 (and $x211 $x432)))
 (let (($x460 (= $x349 true)))
 (let (($x863 (= $x460 true)))
 (let (($x390 (= $x863 true)))
 (let ((?x240 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x37 (= (_ bv0 32) ?x240)))
 (let ((?x846 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x239 (= (_ bv0 32) ?x846)))
 (let ((?x447 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x447)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x502 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x82)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x627 (and $x176 $x502)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x301 $x627)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x650 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x773 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x821 (and $x32 $x773)))
 (let (($x284 (not $x821)))
 (let (($x554 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x327 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x438 (and $x327 $x554)))
 (let (($x604 (and (not $x438) $x284)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x600 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x386 (and $x600 $x9)))
 (let (($x891 (not $x386)))
 (let (($x853 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x854 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x854 $x853)))
 (let (($x855 (and (not $x305) $x891)))
 (let (($x207 (and (and (and (and (and (and $x855 $x604) $x650) $x39) $x77) $x23) $x239)))
 (let (($x563 (and $x207 $x37)))
 (let (($x373 (= $x563 true)))
 (let (($x223 (= $x373 true)))
 (let (($x376 (= $x223 true)))
 (let (($x433 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x587 (bvadd ?x352 input.dst.llvm-%m2)))
 (let ((?x449 (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv1 32))) (select input.dst.llvm-mem ?x587))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x587 (_ bv2 32))) ?x449))))
 (let ((?x537 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x711 (_ bv1 32))))
 (=> $x22 (= ?x537 ?x388))))))))))
 ))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x758 (_ bv1 32))))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x711 (_ bv1 32))))
 (= $x22 $x194))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x637 (= false false)))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x711 (_ bv0 32))))
 (=> $x170 $x637)))))
 ))
 (let (($x710 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x671 (= ?x758 (_ bv0 32))))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x711 (_ bv0 32))))
 (= $x170 $x671))))))
 ))
 (let (($x73 (and $x710 $x418)))
 (let (($x297 (and $x73 $x590)))
 (let (($x196 (and $x297 $x433)))
 (let (($x43 (= $x196 true)))
 (let (($x98 (= $x43 true)))
 (let (($x490 (= $x98 true)))
 (let ((?x225 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x159 (= (_ bv0 2) ?x225)))
 (let (($x528 (= $x159 true)))
 (let (($x127 (= $x528 true)))
 (let (($x473 (= $x211 true)))
 (let (($x172 (= $x473 true)))
 (let (($x261 (= $x172 true)))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x271 (bvadd ?x352 input.dst.llvm-%m1)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x68))))
 (let ((?x721 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x486 (_ bv1 32))))
 (=> $x114 (= ?x721 ?x10))))))))))
 ))
 (let (($x566 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x758 (_ bv1 32))))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x486 (_ bv1 32))))
 (= $x114 $x194))))))
 ))
 (let (($x543 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x637 (= false false)))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x486 (_ bv0 32))))
 (=> $x291 $x637)))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x671 (= ?x758 (_ bv0 32))))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x486 (_ bv0 32))))
 (= $x291 $x671))))))
 ))
 (let (($x844 (and $x435 $x543)))
 (let (($x149 (and $x844 $x566)))
 (let (($x342 (and $x149 $x421)))
 (let (($x175 (= $x342 true)))
 (let (($x8 (= $x175 true)))
 (let (($x269 (= $x8 true)))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x271 (bvadd ?x352 input.dst.llvm-%m1)))
 (let ((?x475 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x271))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv2 32))) ?x475)))
 (let ((?x369 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv3 32))) ?x15)))
 (let ((?x721 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x486 (_ bv1 32))))
 (=> $x114 (= ?x721 ?x369)))))))))))
 ))
 (let (($x661 (and $x149 $x218)))
 (let (($x85 (= $x661 true)))
 (let (($x707 (= $x85 true)))
 (let (($x379 (= $x707 true)))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x587 (bvadd ?x352 input.dst.llvm-%m2)))
 (let ((?x672 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x587 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x587))))
 (let ((?x691 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x587 (_ bv2 32))) ?x672)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x587 (_ bv3 32))) ?x691)))
 (let ((?x537 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x711 (_ bv1 32))))
 (=> $x22 (= ?x537 ?x300)))))))))))
 ))
 (let (($x583 (and $x297 $x430)))
 (let (($x178 (= $x583 true)))
 (let (($x665 (= $x178 true)))
 (let (($x25 (= $x665 true)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x271 (bvadd ?x352 input.dst.llvm-%m1)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x68))))
 (let ((?x767 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x132 (_ bv1 32))))
 (=> $x117 (= ?x767 ?x10))))))))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x758 (_ bv1 32))))
 (let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x132 (_ bv1 32))))
 (= $x117 $x194))))))
 ))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x637 (= false false)))
 (let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x132 (_ bv0 32))))
 (=> $x212 $x637)))))
 ))
 (let (($x610 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x758 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x671 (= ?x758 (_ bv0 32))))
 (let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x132 (_ bv0 32))))
 (= $x212 $x671))))))
 ))
 (let (($x761 (and $x610 $x423)))
 (let (($x206 (and $x761 $x362)))
 (let (($x6 (and $x206 $x188)))
 (let (($x339 (= $x6 true)))
 (let (($x203 (= $x339 true)))
 (let (($x523 (= $x203 true)))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x271 (bvadd ?x352 input.dst.llvm-%m1)))
 (let ((?x475 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x271))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv2 32))) ?x475)))
 (let ((?x369 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x271 (_ bv3 32))) ?x15)))
 (let ((?x767 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x132 (_ bv1 32))))
 (=> $x117 (= ?x767 ?x369)))))))))))
 ))
 (let (($x247 (and $x206 $x62)))
 (let (($x237 (= $x247 true)))
 (let (($x294 (= $x237 true)))
 (let (($x79 (= $x294 true)))
 (let (($x634 (and $x79 $x523)))
 (let (($x45 (and $x634 $x25)))
 (let (($x674 (and $x45 $x379)))
 (let (($x889 (and $x674 $x269)))
 (let (($x370 (and $x889 $x261)))
 (let (($x18 (and $x370 $x127)))
 (let (($x526 (and $x18 $x490)))
 (let (($x375 (and $x526 $x376)))
 (let (($x648 (and $x375 $x390)))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x767 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x721 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x486 (_ bv1 32))))
 (=> $x114 (= ?x721 ?x767)))))))
 ))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x132 (_ bv1 32))))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x486 (_ bv1 32))))
 (= $x114 $x117))))))
 ))
 (let (($x548 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x132 (_ bv0 32))))
 (let ((?x486 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x486 (_ bv0 32))))
 (= $x291 $x212))))))
 ))
 (let (($x669 (and $x548 $x543)))
 (let (($x181 (and $x669 $x180)))
 (let (($x452 (and $x181 $x484)))
 (let (($x810 (and $x452 $x648)))
 (let (($x834 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x711 (_ bv1 32))))
 (=> $x22 (= ?x537 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x847 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x711 (_ bv1 32))))
 (= $x22 (bvuge ?x558 (_ bv1 32)))))))
 ))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x711 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x711 (_ bv0 32))))
 (= $x170 (= ?x558 (_ bv0 32)))))))
 ))
 (let (($x445 (and $x429 $x418)))
 (let (($x785 (and $x445 $x847)))
 (let (($x293 (and $x785 $x834)))
 (let (($x454 (and $x293 $x810)))
 (let (($x104 (=> $x454 $x858)))
 (not $x104)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x362 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x271 (= ?x206 (_ bv0 32))))
 (let ((?x847 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x537 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x847)))
 (let (($x669 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x537)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x22 $x669)))
 (let (($x352 (and $x114 $x271)))
 (and $x352 $x362)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x362 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x271 (= ?x206 (_ bv0 32))))
 (let ((?x847 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x537 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x847)))
 (let (($x669 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x537)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x22 $x669)))
 (let (($x352 (and $x114 $x271)))
 (and $x352 $x362)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x630 (= true false)))
 (let (($x522 (= $x630 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x861 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x851 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x623 (concat ?x851 (concat ?x861 (concat ?x53 ?x124)))))
 (let (($x71 (= ?x623 input.dst.llvm-%m)))
 (let (($x704 (= $x71 true)))
 (let (($x243 (= $x704 true)))
 (let ((?x685 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x387 (bvugt ?x685 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x685 (_ bv3 32)))))
 (let (($x576 (=> (bvule ?x685 (bvsub (bvadd ?x685 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x387)))))))
 (let (($x323 (= $x576 true)))
 (let (($x5 (= $x323 true)))
 (let (($x516 (= $x5 true)))
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x377 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x131))))
 (let ((?x560 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x465 (bvuge ?x560 (_ bv1 32))))
 (=> $x465 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x424))))))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x817 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x560 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x465 (bvuge ?x560 (_ bv1 32))))
 (= $x465 (bvuge ?x817 (_ bv1 32)))))))
 ))
 (let (($x571 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x671 (= false false)))
 (let ((?x560 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x811 (= ?x560 (_ bv0 32))))
 (=> $x811 $x671)))))
 ))
 (let (($x819 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x811 (= ?x560 (_ bv0 32))))
 (= $x811 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x289 (and $x819 $x571)))
 (let (($x357 (and $x289 $x46)))
 (let (($x241 (and $x357 $x382)))
 (let (($x697 (= $x241 true)))
 (let (($x298 (= $x697 true)))
 (let (($x769 (= $x298 true)))
 (let ((?x846 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x239 (= (_ bv0 32) ?x846)))
 (let ((?x447 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x447)))
 (let (($x415 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x771 (and $x415 $x23)))
 (let (($x207 (and $x771 $x239)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x77 $x207)))
 (let (($x37 (= $x240 true)))
 (let (($x563 (= $x37 true)))
 (let (($x373 (= $x563 true)))
 (let ((?x32 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x650 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x359 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x32 (_ bv3 32)))))
 (let (($x176 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x359 $x650)))))))
 (let (($x773 (= $x176 true)))
 (let (($x821 (= $x773 true)))
 (let (($x82 (= $x821 true)))
 (let (($x295 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x843 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x327 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x843 $x295)))))))
 (let (($x532 (= $x327 true)))
 (let (($x854 (= $x532 true)))
 (let (($x554 (= $x854 true)))
 (let ((?x528 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x198 (bvugt ?x528 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x632 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x528 (_ bv3 32)))))
 (let (($x526 (=> (bvule ?x528 (bvsub (bvadd ?x528 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x632 $x198)))))))
 (let (($x860 (= $x526 true)))
 (let (($x329 (= $x860 true)))
 (let (($x601 (= $x329 true)))
 (let (($x438 (and $x601 $x554)))
 (let (($x502 (and $x438 $x82)))
 (let (($x223 (and $x502 $x373)))
 (let (($x195 (and $x223 $x769)))
 (let (($x687 (and $x195 $x516)))
 (let (($x248 (and $x687 $x243)))
 (let ((?x220 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x172 (= ?x220 input.spec-%tmpvar-1.L1%3%d.2)))
 (let ((?x421 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x750 (bvuge ?x421 (_ bv1 32))))
 (let (($x261 (=> $x750 $x172)))
 (let (($x575 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x211 (= $x750 $x575)))
 (let (($x671 (= false false)))
 (let (($x342 (= ?x421 (_ bv0 32))))
 (let (($x8 (=> $x342 $x671)))
 (let (($x288 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x175 (= $x342 $x288)))
 (let (($x269 (and $x175 $x8)))
 (let (($x473 (and $x269 $x211)))
 (let (($x370 (and $x473 $x261)))
 (let (($x570 (and $x370 $x248)))
 (let ((?x798 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x149 (= ?x798 input.spec-%tmpvar-5.L1%12%d.2)))
 (let ((?x506 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (bvuge ?x506 (_ bv1 32))))
 (let (($x94 (=> $x844 $x149)))
 (let (($x435 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x446 (= $x844 $x435)))
 (let (($x409 (= ?x506 (_ bv0 32))))
 (let (($x583 (=> $x409 $x671)))
 (let (($x691 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x430 (= $x409 $x691)))
 (let (($x178 (and $x430 $x583)))
 (let (($x566 (and $x178 $x446)))
 (let (($x236 (and $x566 $x94)))
 (let (($x187 (and $x236 $x570)))
 (let ((?x746 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x587 (= ?x746 input.spec-%tmpvar-9.L1%21%d.2)))
 (let ((?x188 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x188 (_ bv1 32))))
 (let (($x192 (=> $x590 $x587)))
 (let (($x308 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x297 (= $x590 $x308)))
 (let (($x6 (= ?x188 (_ bv0 32))))
 (let (($x203 (=> $x6 $x671)))
 (let (($x606 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x339 (= $x6 $x606)))
 (let (($x523 (and $x339 $x203)))
 (let (($x381 (and $x523 $x297)))
 (let (($x776 (and $x381 $x192)))
 (let (($x467 (and $x776 $x187)))
 (let ((?x445 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x79 (= ?x445 input.spec-%tmpvar-13.L1%30%d.2)))
 (let ((?x794 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x794 (_ bv1 32))))
 (let (($x112 (=> $x247 $x79)))
 (let (($x62 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x237 (= $x247 $x62)))
 (let (($x394 (= ?x794 (_ bv0 32))))
 (let (($x734 (=> $x394 $x671)))
 (let (($x620 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x535 (= $x394 $x620)))
 (let (($x475 (and $x535 $x734)))
 (let (($x294 (and $x475 $x237)))
 (let (($x805 (and $x294 $x112)))
 (let (($x764 (and $x805 $x467)))
 (let (($x452 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x224 (and $x452 $x764)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x208 (and $x141 $x224)))
 (let (($x767 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x621 (and $x767 $x208)))
 (let (($x181 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x615 (and $x181 $x621)))
 (let (($x548 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x774 (and $x548 $x615)))
 (let (($x725 (and $x671 $x774)))
 (let (($x544 (= ?x220 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x741 (and $x544 $x725)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x216 (and $x318 $x741)))
 (let (($x857 (and $x671 $x216)))
 (let (($x463 (= ?x798 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x616 (and $x463 $x857)))
 (let (($x362 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x839 (and $x362 $x616)))
 (let (($x462 (and $x671 $x839)))
 (let (($x644 (= ?x746 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x864 (and $x644 $x462)))
 (let (($x558 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x264 (and $x558 $x864)))
 (let (($x166 (and $x671 $x264)))
 (let (($x820 (= ?x445 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x281 (and $x820 $x166)))
 (let (($x825 (=> $x281 $x522)))
 (not $x825)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x630 (= true false)))
 (let (($x522 (= $x630 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x861 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x851 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x623 (concat ?x851 (concat ?x861 (concat ?x53 ?x124)))))
 (let (($x71 (= ?x623 input.dst.llvm-%m)))
 (let (($x704 (= $x71 true)))
 (let (($x243 (= $x704 true)))
 (let ((?x685 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x387 (bvugt ?x685 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x685 (_ bv3 32)))))
 (let (($x576 (=> (bvule ?x685 (bvsub (bvadd ?x685 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x387)))))))
 (let (($x323 (= $x576 true)))
 (let (($x5 (= $x323 true)))
 (let (($x516 (= $x5 true)))
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x377 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x131))))
 (let ((?x560 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x465 (bvuge ?x560 (_ bv1 32))))
 (=> $x465 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x424))))))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x817 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x560 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x465 (bvuge ?x560 (_ bv1 32))))
 (= $x465 (bvuge ?x817 (_ bv1 32)))))))
 ))
 (let (($x571 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x671 (= false false)))
 (let ((?x560 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x811 (= ?x560 (_ bv0 32))))
 (=> $x811 $x671)))))
 ))
 (let (($x819 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x811 (= ?x560 (_ bv0 32))))
 (= $x811 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x289 (and $x819 $x571)))
 (let (($x357 (and $x289 $x46)))
 (let (($x241 (and $x357 $x382)))
 (let (($x697 (= $x241 true)))
 (let (($x298 (= $x697 true)))
 (let (($x769 (= $x298 true)))
 (let ((?x846 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x239 (= (_ bv0 32) ?x846)))
 (let ((?x447 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x447)))
 (let (($x415 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x771 (and $x415 $x23)))
 (let (($x207 (and $x771 $x239)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x77 $x207)))
 (let (($x37 (= $x240 true)))
 (let (($x563 (= $x37 true)))
 (let (($x373 (= $x563 true)))
 (let ((?x32 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x650 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x359 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x32 (_ bv3 32)))))
 (let (($x176 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x359 $x650)))))))
 (let (($x773 (= $x176 true)))
 (let (($x821 (= $x773 true)))
 (let (($x82 (= $x821 true)))
 (let (($x295 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x843 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x327 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x843 $x295)))))))
 (let (($x532 (= $x327 true)))
 (let (($x854 (= $x532 true)))
 (let (($x554 (= $x854 true)))
 (let ((?x528 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x198 (bvugt ?x528 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x632 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x528 (_ bv3 32)))))
 (let (($x526 (=> (bvule ?x528 (bvsub (bvadd ?x528 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x632 $x198)))))))
 (let (($x860 (= $x526 true)))
 (let (($x329 (= $x860 true)))
 (let (($x601 (= $x329 true)))
 (let (($x438 (and $x601 $x554)))
 (let (($x502 (and $x438 $x82)))
 (let (($x223 (and $x502 $x373)))
 (let (($x195 (and $x223 $x769)))
 (let (($x687 (and $x195 $x516)))
 (let (($x248 (and $x687 $x243)))
 (let ((?x220 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x172 (= ?x220 input.spec-%tmpvar-1.L1%3%d.2)))
 (let ((?x421 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x750 (bvuge ?x421 (_ bv1 32))))
 (let (($x261 (=> $x750 $x172)))
 (let (($x575 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x211 (= $x750 $x575)))
 (let (($x671 (= false false)))
 (let (($x342 (= ?x421 (_ bv0 32))))
 (let (($x8 (=> $x342 $x671)))
 (let (($x288 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x175 (= $x342 $x288)))
 (let (($x269 (and $x175 $x8)))
 (let (($x473 (and $x269 $x211)))
 (let (($x370 (and $x473 $x261)))
 (let (($x570 (and $x370 $x248)))
 (let ((?x798 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x149 (= ?x798 input.spec-%tmpvar-5.L1%12%d.2)))
 (let ((?x506 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (bvuge ?x506 (_ bv1 32))))
 (let (($x94 (=> $x844 $x149)))
 (let (($x435 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x446 (= $x844 $x435)))
 (let (($x409 (= ?x506 (_ bv0 32))))
 (let (($x583 (=> $x409 $x671)))
 (let (($x691 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x430 (= $x409 $x691)))
 (let (($x178 (and $x430 $x583)))
 (let (($x566 (and $x178 $x446)))
 (let (($x236 (and $x566 $x94)))
 (let (($x187 (and $x236 $x570)))
 (let ((?x746 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x587 (= ?x746 input.spec-%tmpvar-9.L1%21%d.2)))
 (let ((?x188 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x188 (_ bv1 32))))
 (let (($x192 (=> $x590 $x587)))
 (let (($x308 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x297 (= $x590 $x308)))
 (let (($x6 (= ?x188 (_ bv0 32))))
 (let (($x203 (=> $x6 $x671)))
 (let (($x606 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x339 (= $x6 $x606)))
 (let (($x523 (and $x339 $x203)))
 (let (($x381 (and $x523 $x297)))
 (let (($x776 (and $x381 $x192)))
 (let (($x467 (and $x776 $x187)))
 (let ((?x445 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x79 (= ?x445 input.spec-%tmpvar-13.L1%30%d.2)))
 (let ((?x794 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x794 (_ bv1 32))))
 (let (($x112 (=> $x247 $x79)))
 (let (($x62 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x237 (= $x247 $x62)))
 (let (($x394 (= ?x794 (_ bv0 32))))
 (let (($x734 (=> $x394 $x671)))
 (let (($x620 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x535 (= $x394 $x620)))
 (let (($x475 (and $x535 $x734)))
 (let (($x294 (and $x475 $x237)))
 (let (($x805 (and $x294 $x112)))
 (let (($x764 (and $x805 $x467)))
 (let (($x452 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x224 (and $x452 $x764)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x208 (and $x141 $x224)))
 (let (($x767 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x621 (and $x767 $x208)))
 (let (($x181 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x615 (and $x181 $x621)))
 (let (($x548 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x774 (and $x548 $x615)))
 (let (($x725 (and $x671 $x774)))
 (let (($x544 (= ?x220 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x741 (and $x544 $x725)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x216 (and $x318 $x741)))
 (let (($x857 (and $x671 $x216)))
 (let (($x463 (= ?x798 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x616 (and $x463 $x857)))
 (let (($x362 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x839 (and $x362 $x616)))
 (let (($x462 (and $x671 $x839)))
 (let (($x644 (= ?x746 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x864 (and $x644 $x462)))
 (let (($x558 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x264 (and $x558 $x864)))
 (let (($x166 (and $x671 $x264)))
 (let (($x820 (= ?x445 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x281 (and $x820 $x166)))
 (let (($x825 (=> $x281 $x522)))
 (not $x825)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32)
    #x00002000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m-0.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      false)))))
  (define-fun k!5 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!1 #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.0.1!6 (k!5 x!0)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff2) #xff
    (ite (= x!0 #xfffffff1) #xff
    (ite (= x!0 #xfffffff3) #xff
    (ite (= x!0 #xfffffff0) #xf9
      #x00)))))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffffff3)
                                     (k!4 #xfffffff2)
                                     (k!4 #xfffffff1)
                                     (k!4 #xfffffff0)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffffff3)
                                     (k!4 #xfffffff2)
                                     (k!4 #xfffffff1)
                                     (k!4 #xfffffff0)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffffff3)
                                     (k!4 #xfffffff2)
                                     (k!4 #xfffffff1)
                                     (k!4 #xfffffff0)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffffff3)
                                     (k!4 #xfffffff2)
                                     (k!4 #xfffffff1)
                                     (k!4 #xfffffff0))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00020000)
  (define-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32)
    #x20000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00020003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00020000)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m-0.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000003)
        (= x!0 #x00000002)
        (= x!0 #x00000001)
        (= x!0 #x00000000)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00020003) #x40
      #x00))
  (define-fun k!5 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!1 #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.0.1!6 (k!5 x!0)))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x00020003)
                                     (k!4 #x00020002)
                                     (k!4 #x00020001)
                                     (k!4 #x00020000)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x00020003)
                                     (k!4 #x00020002)
                                     (k!4 #x00020001)
                                     (k!4 #x00020000)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x00020003)
                                     (k!4 #x00020002)
                                     (k!4 #x00020001)
                                     (k!4 #x00020000)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #x00020003)
                                     (k!4 #x00020002)
                                     (k!4 #x00020001)
                                     (k!4 #x00020000))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x438 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x520 (bvuge ?x438 (_ bv1 32))))
 (let (($x680 (= ?x438 (_ bv0 32))))
 (let (($x391 (or $x680 $x520)))
 (let ((?x846 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x846 (_ bv1 32))))
 (let (($x581 (and $x560 $x391)))
 (let (($x239 (= ?x846 (_ bv0 32))))
 (let (($x472 (and $x239 $x391)))
 (let (($x622 (or $x472 $x581)))
 (let ((?x331 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x760 (bvuge ?x331 (_ bv1 32))))
 (let (($x852 (and $x760 $x622)))
 (let (($x312 (= ?x331 (_ bv0 32))))
 (let (($x285 (and $x312 $x622)))
 (let (($x837 (or $x285 $x852)))
 (let ((?x769 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (bvuge ?x769 (_ bv1 32))))
 (let (($x678 (and $x414 $x837)))
 (let (($x195 (= ?x769 (_ bv0 32))))
 (let (($x246 (and $x195 $x837)))
 (let (($x845 (or $x246 $x678)))
 (let (($x728 (or false $x845)))
 (let (($x504 (= $x728 true)))
 (let (($x108 (= $x504 true)))
 (let ((?x369 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x738 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x780 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x840 (concat ?x780 (concat ?x231 (concat ?x738 ?x369)))))
 (let (($x411 (= ?x840 input.dst.llvm-%m)))
 (let (($x393 (= $x411 true)))
 (let (($x807 (= $x393 true)))
 (let ((?x394 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x710 (= (bvand ?x394 (_ bv4294967292 32)) ?x394)))
 (let ((?x620 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x122 (= (bvand ?x620 (_ bv4294967292 32)) ?x620)))
 (let (($x25 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x620 (bvsub ?x620 (_ bv4 32))) (bvult ?x620 (bvsub ?x620 (_ bv4 32))))))
 (let (($x45 (and true $x25)))
 (let ((?x543 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x263 (= (bvand ?x543 (_ bv4294967292 32)) ?x543)))
 (let (($x643 (and $x263 $x45)))
 (let (($x348 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x394 (bvsub ?x394 (_ bv8 32))) (bvult ?x394 (bvsub ?x394 (_ bv8 32))))))
 (let (($x634 (and (and (and true $x348) $x643) $x122)))
 (let (($x73 (and $x634 $x710)))
 (let (($x693 (= $x73 true)))
 (let (($x763 (= $x693 true)))
 (let (($x498 (= $x763 true)))
 (let (($x652 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x466 (and true $x652)))
 (let (($x337 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x695 (and $x337 $x466)))
 (let (($x681 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x543 (bvsub ?x543 (_ bv12 32))) (bvult ?x543 (bvsub ?x543 (_ bv12 32))))))
 (let (($x727 (and (and (and true $x337) $x681) $x695)))
 (let (($x130 (= $x727 true)))
 (let (($x11 (= $x130 true)))
 (let (($x218 (= $x11 true)))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x509 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x802 (concat (select input.dst.llvm-mem (bvadd ?x509 (_ bv1 32))) (select input.dst.llvm-mem ?x509))))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x509 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x509 (_ bv2 32))) ?x802))))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x849 (_ bv1 32))))
 (=> $x129 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x402))))))))
 ))
 (let (($x593 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x849 (_ bv1 32))))
 (= $x129 (bvuge ?x171 (_ bv1 32)))))))
 ))
 (let (($x713 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x446 (= false false)))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x849 (_ bv0 32))))
 (=> $x521 $x446)))))
 ))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x849 (_ bv0 32))))
 (= $x521 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x745 (and $x657 $x713)))
 (let (($x546 (and $x745 $x593)))
 (let (($x572 (and $x546 $x158)))
 (let (($x770 (= $x572 true)))
 (let (($x784 (= $x770 true)))
 (let (($x612 (= $x784 true)))
 (let ((?x38 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x53 (= (_ bv0 32) ?x38)))
 (let ((?x851 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x851)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x861 (and $x28 $x33)))
 (let (($x124 (and $x861 $x53)))
 (let (($x687 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x603 (and $x687 $x124)))
 (let (($x529 (= $x603 true)))
 (let (($x623 (= $x529 true)))
 (let (($x71 (= $x623 true)))
 (let (($x754 (and $x71 $x612)))
 (let (($x661 (and $x754 $x218)))
 (let (($x439 (and $x661 $x498)))
 (let (($x608 (and $x439 $x807)))
 (let ((?x43 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x576 (= ?x43 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x323 (=> $x414 $x576)))
 (let (($x850 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x743 (= $x414 $x850)))
 (let (($x446 (= false false)))
 (let (($x255 (=> $x195 $x446)))
 (let (($x697 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x685 (= $x195 $x697)))
 (let (($x123 (and $x685 $x255)))
 (let (($x888 (and $x123 $x743)))
 (let (($x5 (and $x888 $x323)))
 (let (($x824 (and $x5 $x608)))
 (let ((?x528 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x155 (= ?x528 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x136 (=> $x760 $x155)))
 (let (($x92 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x757 (= $x760 $x92)))
 (let (($x357 (=> $x312 $x446)))
 (let (($x289 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x46 (= $x312 $x289)))
 (let (($x310 (and $x46 $x357)))
 (let (($x41 (and $x310 $x757)))
 (let (($x131 (and $x41 $x136)))
 (let (($x161 (and $x131 $x824)))
 (let ((?x8 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x101 (= ?x8 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x795 (=> $x560 $x101)))
 (let (($x232 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x811 (= $x560 $x232)))
 (let (($x240 (=> $x239 $x446)))
 (let (($x23 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x207 (= $x239 $x23)))
 (let (($x37 (and $x207 $x240)))
 (let (($x477 (and $x37 $x811)))
 (let (($x173 (and $x477 $x795)))
 (let (($x594 (and $x173 $x161)))
 (let ((?x844 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x176 (= ?x844 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x773 (=> $x520 $x176)))
 (let (($x562 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x39 (= $x520 $x562)))
 (let (($x284 (=> $x680 $x446)))
 (let (($x854 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x32 (= $x680 $x854)))
 (let (($x604 (and $x32 $x284)))
 (let (($x97 (and $x604 $x39)))
 (let (($x821 (and $x97 $x773)))
 (let (($x731 (and $x821 $x594)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x613 (and $x295 $x731)))
 (let (($x305 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x884 (and $x305 $x613)))
 (let (($x853 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x715 (and $x853 $x884)))
 (let (($x601 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x629 (and $x601 $x715)))
 (let (($x860 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x395 (and $x860 $x629)))
 (let (($x542 (and $x446 $x395)))
 (let (($x98 (= ?x43 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x698 (and $x98 $x542)))
 (let (($x890 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x93 (and $x890 $x698)))
 (let (($x72 (and $x446 $x93)))
 (let (($x127 (= ?x528 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x226 (and $x127 $x72)))
 (let (($x575 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x828 (and $x575 $x226)))
 (let (($x567 (and $x446 $x828)))
 (let (($x269 (= ?x8 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x539 (and $x269 $x567)))
 (let (($x672 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x252 (and $x672 $x539)))
 (let (($x712 (and $x446 $x252)))
 (let (($x435 (= ?x844 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x816 (and $x435 $x712)))
 (let (($x339 (bvugt ?x620 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x606 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x620 (_ bv3 32)))))
 (let (($x381 (=> (bvule ?x620 (bvsub (bvadd ?x620 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x606 $x339)))))))
 (let (($x247 (bvugt ?x394 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x475 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x394 (_ bv3 32)))))
 (let (($x112 (=> (bvule ?x394 (bvsub (bvadd ?x394 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x475 $x247)))))))
 (let (($x767 (bvugt ?x543 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x721 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x543 (_ bv3 32)))))
 (let (($x794 (=> (bvule ?x543 (bvsub (bvadd ?x543 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x721 $x767)))))))
 (let (($x463 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x605 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x429 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x605 $x463)))))))
 (let (($x544 (and $x429 $x794)))
 (let (($x639 (and $x544 $x112)))
 (let (($x805 (and $x639 $x381)))
 (let (($x827 (and $x805 $x816)))
 (let (($x701 (=> $x827 $x108)))
 (not $x701)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x438 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x520 (bvuge ?x438 (_ bv1 32))))
 (let (($x680 (= ?x438 (_ bv0 32))))
 (let (($x391 (or $x680 $x520)))
 (let ((?x846 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x846 (_ bv1 32))))
 (let (($x581 (and $x560 $x391)))
 (let (($x239 (= ?x846 (_ bv0 32))))
 (let (($x472 (and $x239 $x391)))
 (let (($x622 (or $x472 $x581)))
 (let ((?x331 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x760 (bvuge ?x331 (_ bv1 32))))
 (let (($x852 (and $x760 $x622)))
 (let (($x312 (= ?x331 (_ bv0 32))))
 (let (($x285 (and $x312 $x622)))
 (let (($x837 (or $x285 $x852)))
 (let ((?x769 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (bvuge ?x769 (_ bv1 32))))
 (let (($x678 (and $x414 $x837)))
 (let (($x195 (= ?x769 (_ bv0 32))))
 (let (($x246 (and $x195 $x837)))
 (let (($x845 (or $x246 $x678)))
 (let (($x728 (or false $x845)))
 (let (($x504 (= $x728 true)))
 (let (($x108 (= $x504 true)))
 (let ((?x369 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x738 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x780 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x840 (concat ?x780 (concat ?x231 (concat ?x738 ?x369)))))
 (let (($x411 (= ?x840 input.dst.llvm-%m)))
 (let (($x393 (= $x411 true)))
 (let (($x807 (= $x393 true)))
 (let ((?x394 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x710 (= (bvand ?x394 (_ bv4294967292 32)) ?x394)))
 (let ((?x620 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x122 (= (bvand ?x620 (_ bv4294967292 32)) ?x620)))
 (let (($x25 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x620 (bvsub ?x620 (_ bv4 32))) (bvult ?x620 (bvsub ?x620 (_ bv4 32))))))
 (let (($x45 (and true $x25)))
 (let ((?x543 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x263 (= (bvand ?x543 (_ bv4294967292 32)) ?x543)))
 (let (($x643 (and $x263 $x45)))
 (let (($x348 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x394 (bvsub ?x394 (_ bv8 32))) (bvult ?x394 (bvsub ?x394 (_ bv8 32))))))
 (let (($x634 (and (and (and true $x348) $x643) $x122)))
 (let (($x73 (and $x634 $x710)))
 (let (($x693 (= $x73 true)))
 (let (($x763 (= $x693 true)))
 (let (($x498 (= $x763 true)))
 (let (($x652 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x466 (and true $x652)))
 (let (($x337 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x695 (and $x337 $x466)))
 (let (($x681 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x543 (bvsub ?x543 (_ bv12 32))) (bvult ?x543 (bvsub ?x543 (_ bv12 32))))))
 (let (($x727 (and (and (and true $x337) $x681) $x695)))
 (let (($x130 (= $x727 true)))
 (let (($x11 (= $x130 true)))
 (let (($x218 (= $x11 true)))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x509 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x802 (concat (select input.dst.llvm-mem (bvadd ?x509 (_ bv1 32))) (select input.dst.llvm-mem ?x509))))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x509 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x509 (_ bv2 32))) ?x802))))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x849 (_ bv1 32))))
 (=> $x129 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x402))))))))
 ))
 (let (($x593 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x849 (_ bv1 32))))
 (= $x129 (bvuge ?x171 (_ bv1 32)))))))
 ))
 (let (($x713 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x446 (= false false)))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x849 (_ bv0 32))))
 (=> $x521 $x446)))))
 ))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x849 (_ bv0 32))))
 (= $x521 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x745 (and $x657 $x713)))
 (let (($x546 (and $x745 $x593)))
 (let (($x572 (and $x546 $x158)))
 (let (($x770 (= $x572 true)))
 (let (($x784 (= $x770 true)))
 (let (($x612 (= $x784 true)))
 (let ((?x38 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x53 (= (_ bv0 32) ?x38)))
 (let ((?x851 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x851)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x861 (and $x28 $x33)))
 (let (($x124 (and $x861 $x53)))
 (let (($x687 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x603 (and $x687 $x124)))
 (let (($x529 (= $x603 true)))
 (let (($x623 (= $x529 true)))
 (let (($x71 (= $x623 true)))
 (let (($x754 (and $x71 $x612)))
 (let (($x661 (and $x754 $x218)))
 (let (($x439 (and $x661 $x498)))
 (let (($x608 (and $x439 $x807)))
 (let ((?x43 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x576 (= ?x43 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x323 (=> $x414 $x576)))
 (let (($x850 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x743 (= $x414 $x850)))
 (let (($x446 (= false false)))
 (let (($x255 (=> $x195 $x446)))
 (let (($x697 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x685 (= $x195 $x697)))
 (let (($x123 (and $x685 $x255)))
 (let (($x888 (and $x123 $x743)))
 (let (($x5 (and $x888 $x323)))
 (let (($x824 (and $x5 $x608)))
 (let ((?x528 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x155 (= ?x528 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x136 (=> $x760 $x155)))
 (let (($x92 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x757 (= $x760 $x92)))
 (let (($x357 (=> $x312 $x446)))
 (let (($x289 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x46 (= $x312 $x289)))
 (let (($x310 (and $x46 $x357)))
 (let (($x41 (and $x310 $x757)))
 (let (($x131 (and $x41 $x136)))
 (let (($x161 (and $x131 $x824)))
 (let ((?x8 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x101 (= ?x8 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x795 (=> $x560 $x101)))
 (let (($x232 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x811 (= $x560 $x232)))
 (let (($x240 (=> $x239 $x446)))
 (let (($x23 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x207 (= $x239 $x23)))
 (let (($x37 (and $x207 $x240)))
 (let (($x477 (and $x37 $x811)))
 (let (($x173 (and $x477 $x795)))
 (let (($x594 (and $x173 $x161)))
 (let ((?x844 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x176 (= ?x844 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x773 (=> $x520 $x176)))
 (let (($x562 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x39 (= $x520 $x562)))
 (let (($x284 (=> $x680 $x446)))
 (let (($x854 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x32 (= $x680 $x854)))
 (let (($x604 (and $x32 $x284)))
 (let (($x97 (and $x604 $x39)))
 (let (($x821 (and $x97 $x773)))
 (let (($x731 (and $x821 $x594)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x613 (and $x295 $x731)))
 (let (($x305 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x884 (and $x305 $x613)))
 (let (($x853 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x715 (and $x853 $x884)))
 (let (($x601 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x629 (and $x601 $x715)))
 (let (($x860 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x395 (and $x860 $x629)))
 (let (($x542 (and $x446 $x395)))
 (let (($x98 (= ?x43 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x698 (and $x98 $x542)))
 (let (($x890 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x93 (and $x890 $x698)))
 (let (($x72 (and $x446 $x93)))
 (let (($x127 (= ?x528 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x226 (and $x127 $x72)))
 (let (($x575 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x828 (and $x575 $x226)))
 (let (($x567 (and $x446 $x828)))
 (let (($x269 (= ?x8 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x539 (and $x269 $x567)))
 (let (($x672 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x252 (and $x672 $x539)))
 (let (($x712 (and $x446 $x252)))
 (let (($x435 (= ?x844 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x816 (and $x435 $x712)))
 (let (($x339 (bvugt ?x620 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x606 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x620 (_ bv3 32)))))
 (let (($x381 (=> (bvule ?x620 (bvsub (bvadd ?x620 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x606 $x339)))))))
 (let (($x247 (bvugt ?x394 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x475 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x394 (_ bv3 32)))))
 (let (($x112 (=> (bvule ?x394 (bvsub (bvadd ?x394 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x475 $x247)))))))
 (let (($x767 (bvugt ?x543 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x721 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x543 (_ bv3 32)))))
 (let (($x794 (=> (bvule ?x543 (bvsub (bvadd ?x543 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x721 $x767)))))))
 (let (($x463 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x605 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x429 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x605 $x463)))))))
 (let (($x544 (and $x429 $x794)))
 (let (($x639 (and $x544 $x112)))
 (let (($x805 (and $x639 $x381)))
 (let (($x827 (and $x805 $x816)))
 (let (($x701 (=> $x827 $x108)))
 (not $x701)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 228 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x295 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x99 (bvmul (_ bv4294967295 32) ?x295)))
 (let ((?x175 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x121 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x175)))
 (let ((?x168 (bvadd ?x121 ?x99)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x762 (concat ?x283 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x755 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x339 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x159 (bvadd ?x339 (_ bv3 32))))
 (let ((?x50 (concat (select input.dst.llvm-mem ?x159) (concat ?x755 ?x762))))
 (let ((?x885 (bvmul (_ bv4294967295 32) ?x50)))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x34 (concat ?x325 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x578 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x794 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x644 (bvadd ?x794 (_ bv3 32))))
 (let ((?x407 (concat (select input.dst.llvm-mem ?x644) (concat ?x578 ?x34))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x619 (concat ?x113 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x886 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x423 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x767 (bvadd ?x423 (_ bv3 32))))
 (let ((?x341 (concat (select input.dst.llvm-mem ?x767) (concat ?x886 ?x619))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x386)))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x332)))
 (let ((?x88 (bvadd (bvadd (bvadd ?x650 ?x341) ?x407) ?x885)))
 (let (($x428 (= ?x88 ?x168)))
 (let (($x699 (= $x428 true)))
 (let (($x128 (= $x699 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x863 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x813 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x75 (concat ?x813 (concat ?x863 ?x349)))))
 (let (($x385 (= ?x55 input.dst.llvm-%m)))
 (let (($x222 (= $x385 true)))
 (let (($x410 (= $x222 true)))
 (let (($x235 (= input.dst.llvm-%m ?x55)))
 (let ((?x432 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x375 (= (_ bv0 32) ?x432)))
 (let ((?x404 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x404)))
 (let (($x753 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x753 $x184)))
 (let (($x716 (and $x133 $x375)))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x338 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem ?x338))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv2 32))) ?x35))))
 (let ((?x522 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x522 (_ bv1 32))))
 (=> $x570 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x111))))))))
 ))
 (let (($x764 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x522 (_ bv1 32))))
 (= $x570 (bvuge ?x264 (_ bv1 32)))))))
 ))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x43 (= false false)))
 (let ((?x522 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x522 (_ bv0 32))))
 (=> $x376 $x43)))))
 ))
 (let (($x486 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x522 (_ bv0 32))))
 (= $x376 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x117 (and $x486 $x419)))
 (let (($x224 (and $x117 $x764)))
 (let (($x584 (and $x224 $x150)))
 (let (($x824 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= (bvand ?x339 (_ bv4294967292 32)) ?x339)))
 (let (($x826 (= (bvand ?x794 (_ bv4294967292 32)) ?x794)))
 (let (($x348 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x794 (bvsub ?x794 (_ bv4 32))) (bvult ?x794 (bvsub ?x794 (_ bv4 32))))))
 (let (($x789 (and true $x348)))
 (let (($x661 (= (bvand ?x423 (_ bv4294967292 32)) ?x423)))
 (let (($x675 (and $x661 $x789)))
 (let (($x130 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x339 (bvsub ?x339 (_ bv8 32))) (bvult ?x339 (bvsub ?x339 (_ bv8 32))))))
 (let (($x665 (and (and (and true $x130) $x675) $x826)))
 (let (($x231 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x204 (and true $x231)))
 (let (($x193 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x738 (and $x193 $x204)))
 (let (($x498 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x423 (bvsub ?x423 (_ bv12 32))) (bvult ?x423 (bvsub ?x423 (_ bv12 32))))))
 (let (($x234 (and (and (and true $x193) $x498) $x738)))
 (let (($x102 (and (and (and (and (and (and $x234 $x665) $x45) $x824) $x584) $x716) $x235)))
 (let (($x106 (= $x102 true)))
 (let (($x160 (= $x106 true)))
 (let (($x856 (= $x160 true)))
 (let (($x840 (= $x234 true)))
 (let (($x411 (= $x840 true)))
 (let (($x393 (= $x411 true)))
 (let (($x643 (and $x665 $x45)))
 (let (($x68 (= $x643 true)))
 (let (($x333 (= $x68 true)))
 (let (($x122 (= $x333 true)))
 (let (($x807 (and $x122 $x393)))
 (let (($x684 (and $x807 $x856)))
 (let (($x538 (and $x684 $x410)))
 (let ((?x757 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x697 (bvuge ?x757 (_ bv1 32))))
 (let ((?x28 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x28 (_ bv1 32))))
 (let (($x268 (and $x71 $x697)))
 (let ((?x713 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x509 (bvuge ?x713 (_ bv1 32))))
 (let (($x835 (and $x509 $x268)))
 (let ((?x572 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x572 (_ bv1 32))))
 (let (($x569 (and $x96 $x835)))
 (let (($x424 (and $x569 $x538)))
 (let ((?x240 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x681 (= ?x240 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x355 (=> $x96 $x681)))
 (let (($x143 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x742 (= $x96 $x143)))
 (let (($x43 (= false false)))
 (let (($x770 (= ?x572 (_ bv0 32))))
 (let (($x612 (=> $x770 $x43)))
 (let (($x189 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x784 (= $x770 $x189)))
 (let (($x754 (and $x784 $x612)))
 (let (($x551 (and $x754 $x742)))
 (let (($x617 (and $x551 $x355)))
 (let (($x213 (and $x617 $x424)))
 (let ((?x39 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x797 (= ?x39 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x487 (=> $x509 $x797)))
 (let (($x545 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x510 (= $x509 $x545)))
 (let (($x745 (= ?x713 (_ bv0 32))))
 (let (($x306 (=> $x745 $x43)))
 (let (($x657 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x129 (= $x745 $x657)))
 (let (($x324 (and $x129 $x306)))
 (let (($x262 (and $x324 $x510)))
 (let (($x547 (and $x262 $x487)))
 (let (($x76 (and $x547 $x213)))
 (let (($x849 (= ?x295 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x521 (=> $x71 $x849)))
 (let (($x623 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x63 (= $x71 $x623)))
 (let (($x851 (= ?x28 (_ bv0 32))))
 (let (($x861 (=> $x851 $x43)))
 (let (($x516 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x33 (= $x851 $x516)))
 (let (($x38 (and $x33 $x861)))
 (let (($x347 (and $x38 $x63)))
 (let (($x848 (and $x347 $x521)))
 (let (($x351 (and $x848 $x76)))
 (let (($x123 (= ?x175 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x414 (=> $x697 $x123)))
 (let (($x382 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x685 (= $x697 $x382)))
 (let (($x41 (= ?x757 (_ bv0 32))))
 (let (($x155 (=> $x41 $x43)))
 (let (($x760 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x571 (= $x41 $x760)))
 (let (($x136 (and $x571 $x155)))
 (let (($x255 (and $x136 $x685)))
 (let (($x850 (and $x255 $x414)))
 (let (($x227 (and $x850 $x351)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x147 (and $x331 $x227)))
 (let (($x173 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x387 (and $x173 $x147)))
 (let (($x101 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x817 (and $x101 $x387)))
 (let (($x477 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x441 (and $x477 $x817)))
 (let (($x232 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x799 (and $x232 $x441)))
 (let (($x819 (and $x43 $x799)))
 (let (($x37 (= ?x240 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x115 (and $x37 $x819)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x533 (and $x176 $x115)))
 (let (($x377 (and $x43 $x533)))
 (let (($x97 (= ?x39 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x265 (and $x97 $x377)))
 (let (($x680 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x82 (and $x680 $x265)))
 (let (($x502 (and $x43 $x82)))
 (let (($x554 (= ?x295 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x627 (and $x554 $x502)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x77 (and $x98 $x627)))
 (let (($x563 (and $x43 $x77)))
 (let (($x890 (= ?x175 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x373 (and $x890 $x563)))
 (let (($x297 (bvugt ?x794 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x644)))
 (let (($x6 (=> (bvule ?x794 (bvsub (bvadd ?x794 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x297)))))))
 (let (($x318 (bvugt ?x339 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x746 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x585 (=> (bvule ?x339 (bvsub (bvadd ?x339 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x746 $x318)))))))
 (let (($x513 (bvugt ?x423 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x492 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x767)))
 (let (($x181 (=> (bvule ?x423 (bvsub (bvadd ?x423 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x492 $x513)))))))
 (let (($x237 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x543 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x605 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x543 $x237)))))))
 (let (($x721 (and $x605 $x181)))
 (let (($x452 (and $x721 $x585)))
 (let (($x463 (and $x452 $x6)))
 (let (($x223 (and $x463 $x373)))
 (let (($x565 (=> $x223 $x128)))
 (not $x565))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x295 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x99 (bvmul (_ bv4294967295 32) ?x295)))
 (let ((?x175 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x121 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x175)))
 (let ((?x168 (bvadd ?x121 ?x99)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x762 (concat ?x283 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x755 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x339 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x159 (bvadd ?x339 (_ bv3 32))))
 (let ((?x50 (concat (select input.dst.llvm-mem ?x159) (concat ?x755 ?x762))))
 (let ((?x885 (bvmul (_ bv4294967295 32) ?x50)))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x34 (concat ?x325 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x578 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x794 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x644 (bvadd ?x794 (_ bv3 32))))
 (let ((?x407 (concat (select input.dst.llvm-mem ?x644) (concat ?x578 ?x34))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x619 (concat ?x113 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x886 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x423 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x767 (bvadd ?x423 (_ bv3 32))))
 (let ((?x341 (concat (select input.dst.llvm-mem ?x767) (concat ?x886 ?x619))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x386)))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x332)))
 (let ((?x88 (bvadd (bvadd (bvadd ?x650 ?x341) ?x407) ?x885)))
 (let (($x428 (= ?x88 ?x168)))
 (let (($x699 (= $x428 true)))
 (let (($x128 (= $x699 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x863 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x813 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x75 (concat ?x813 (concat ?x863 ?x349)))))
 (let (($x385 (= ?x55 input.dst.llvm-%m)))
 (let (($x222 (= $x385 true)))
 (let (($x410 (= $x222 true)))
 (let (($x235 (= input.dst.llvm-%m ?x55)))
 (let ((?x432 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x375 (= (_ bv0 32) ?x432)))
 (let ((?x404 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x404)))
 (let (($x753 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x753 $x184)))
 (let (($x716 (and $x133 $x375)))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x338 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem ?x338))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv2 32))) ?x35))))
 (let ((?x522 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x522 (_ bv1 32))))
 (=> $x570 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x111))))))))
 ))
 (let (($x764 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x522 (_ bv1 32))))
 (= $x570 (bvuge ?x264 (_ bv1 32)))))))
 ))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x43 (= false false)))
 (let ((?x522 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x522 (_ bv0 32))))
 (=> $x376 $x43)))))
 ))
 (let (($x486 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x522 (_ bv0 32))))
 (= $x376 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x117 (and $x486 $x419)))
 (let (($x224 (and $x117 $x764)))
 (let (($x584 (and $x224 $x150)))
 (let (($x824 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= (bvand ?x339 (_ bv4294967292 32)) ?x339)))
 (let (($x826 (= (bvand ?x794 (_ bv4294967292 32)) ?x794)))
 (let (($x348 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x794 (bvsub ?x794 (_ bv4 32))) (bvult ?x794 (bvsub ?x794 (_ bv4 32))))))
 (let (($x789 (and true $x348)))
 (let (($x661 (= (bvand ?x423 (_ bv4294967292 32)) ?x423)))
 (let (($x675 (and $x661 $x789)))
 (let (($x130 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x339 (bvsub ?x339 (_ bv8 32))) (bvult ?x339 (bvsub ?x339 (_ bv8 32))))))
 (let (($x665 (and (and (and true $x130) $x675) $x826)))
 (let (($x231 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x204 (and true $x231)))
 (let (($x193 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x738 (and $x193 $x204)))
 (let (($x498 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x423 (bvsub ?x423 (_ bv12 32))) (bvult ?x423 (bvsub ?x423 (_ bv12 32))))))
 (let (($x234 (and (and (and true $x193) $x498) $x738)))
 (let (($x102 (and (and (and (and (and (and $x234 $x665) $x45) $x824) $x584) $x716) $x235)))
 (let (($x106 (= $x102 true)))
 (let (($x160 (= $x106 true)))
 (let (($x856 (= $x160 true)))
 (let (($x840 (= $x234 true)))
 (let (($x411 (= $x840 true)))
 (let (($x393 (= $x411 true)))
 (let (($x643 (and $x665 $x45)))
 (let (($x68 (= $x643 true)))
 (let (($x333 (= $x68 true)))
 (let (($x122 (= $x333 true)))
 (let (($x807 (and $x122 $x393)))
 (let (($x684 (and $x807 $x856)))
 (let (($x538 (and $x684 $x410)))
 (let ((?x757 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x697 (bvuge ?x757 (_ bv1 32))))
 (let ((?x28 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x28 (_ bv1 32))))
 (let (($x268 (and $x71 $x697)))
 (let ((?x713 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x509 (bvuge ?x713 (_ bv1 32))))
 (let (($x835 (and $x509 $x268)))
 (let ((?x572 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x572 (_ bv1 32))))
 (let (($x569 (and $x96 $x835)))
 (let (($x424 (and $x569 $x538)))
 (let ((?x240 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x681 (= ?x240 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x355 (=> $x96 $x681)))
 (let (($x143 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x742 (= $x96 $x143)))
 (let (($x43 (= false false)))
 (let (($x770 (= ?x572 (_ bv0 32))))
 (let (($x612 (=> $x770 $x43)))
 (let (($x189 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x784 (= $x770 $x189)))
 (let (($x754 (and $x784 $x612)))
 (let (($x551 (and $x754 $x742)))
 (let (($x617 (and $x551 $x355)))
 (let (($x213 (and $x617 $x424)))
 (let ((?x39 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x797 (= ?x39 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x487 (=> $x509 $x797)))
 (let (($x545 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x510 (= $x509 $x545)))
 (let (($x745 (= ?x713 (_ bv0 32))))
 (let (($x306 (=> $x745 $x43)))
 (let (($x657 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x129 (= $x745 $x657)))
 (let (($x324 (and $x129 $x306)))
 (let (($x262 (and $x324 $x510)))
 (let (($x547 (and $x262 $x487)))
 (let (($x76 (and $x547 $x213)))
 (let (($x849 (= ?x295 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x521 (=> $x71 $x849)))
 (let (($x623 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x63 (= $x71 $x623)))
 (let (($x851 (= ?x28 (_ bv0 32))))
 (let (($x861 (=> $x851 $x43)))
 (let (($x516 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x33 (= $x851 $x516)))
 (let (($x38 (and $x33 $x861)))
 (let (($x347 (and $x38 $x63)))
 (let (($x848 (and $x347 $x521)))
 (let (($x351 (and $x848 $x76)))
 (let (($x123 (= ?x175 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x414 (=> $x697 $x123)))
 (let (($x382 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x685 (= $x697 $x382)))
 (let (($x41 (= ?x757 (_ bv0 32))))
 (let (($x155 (=> $x41 $x43)))
 (let (($x760 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x571 (= $x41 $x760)))
 (let (($x136 (and $x571 $x155)))
 (let (($x255 (and $x136 $x685)))
 (let (($x850 (and $x255 $x414)))
 (let (($x227 (and $x850 $x351)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x147 (and $x331 $x227)))
 (let (($x173 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x387 (and $x173 $x147)))
 (let (($x101 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x817 (and $x101 $x387)))
 (let (($x477 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x441 (and $x477 $x817)))
 (let (($x232 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x799 (and $x232 $x441)))
 (let (($x819 (and $x43 $x799)))
 (let (($x37 (= ?x240 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x115 (and $x37 $x819)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x533 (and $x176 $x115)))
 (let (($x377 (and $x43 $x533)))
 (let (($x97 (= ?x39 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x265 (and $x97 $x377)))
 (let (($x680 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x82 (and $x680 $x265)))
 (let (($x502 (and $x43 $x82)))
 (let (($x554 (= ?x295 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x627 (and $x554 $x502)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x77 (and $x98 $x627)))
 (let (($x563 (and $x43 $x77)))
 (let (($x890 (= ?x175 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x373 (and $x890 $x563)))
 (let (($x297 (bvugt ?x794 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x644)))
 (let (($x6 (=> (bvule ?x794 (bvsub (bvadd ?x794 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x297)))))))
 (let (($x318 (bvugt ?x339 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x746 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x585 (=> (bvule ?x339 (bvsub (bvadd ?x339 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x746 $x318)))))))
 (let (($x513 (bvugt ?x423 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x492 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x767)))
 (let (($x181 (=> (bvule ?x423 (bvsub (bvadd ?x423 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x492 $x513)))))))
 (let (($x237 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x543 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x605 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x543 $x237)))))))
 (let (($x721 (and $x605 $x181)))
 (let (($x452 (and $x721 $x585)))
 (let (($x463 (and $x452 $x6)))
 (let (($x223 (and $x463 $x373)))
 (let (($x565 (=> $x223 $x128)))
 (not $x565))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x331 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x529 (bvmul (_ bv4294967295 32) ?x331)))
 (let ((?x443 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x529)))
 (let ((?x593 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x546 (concat ?x593 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x857 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x475 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x294 (bvadd ?x475 (_ bv3 32))))
 (let ((?x241 (concat (select input.dst.llvm-mem ?x294) (concat ?x857 ?x546))))
 (let ((?x576 (bvmul (_ bv4294967295 32) ?x241)))
 (let ((?x802 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x793 (concat ?x802 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x663 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x672 (bvadd ?x159 (_ bv3 32))))
 (let ((?x725 (concat (select input.dst.llvm-mem ?x672) (concat ?x663 ?x793))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x346 (concat ?x114 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x543 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x141 (bvadd ?x543 (_ bv3 32))))
 (let ((?x206 (concat (select input.dst.llvm-mem ?x141) (concat ?x307 ?x346))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x785 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x194)))
 (let ((?x810 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x785)))
 (let ((?x603 (bvadd (bvadd (bvadd ?x810 ?x206) ?x725) ?x576)))
 (let (($x289 (= ?x603 ?x443)))
 (let (($x46 (= $x289 true)))
 (let (($x131 (= $x46 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x674 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x421 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x370 (concat ?x433 (concat ?x421 (concat ?x674 ?x94)))))
 (let (($x583 (= ?x370 input.dst.llvm-%m)))
 (let (($x615 (= $x583 true)))
 (let (($x774 (= $x615 true)))
 (let (($x409 (= input.dst.llvm-%m ?x370)))
 (let ((?x629 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x395 (= (_ bv0 32) ?x629)))
 (let ((?x731 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x613 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x731)))
 (let (($x594 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x715 (and $x594 $x613)))
 (let (($x542 (and $x715 $x395)))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x845 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv1 32))) (select input.dst.llvm-mem ?x845))))
 (let ((?x587 (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv2 32))) ?x290))))
 (let ((?x446 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x639 (bvuge ?x446 (_ bv1 32))))
 (=> $x639 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x587))))))))
 ))
 (let (($x72 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x821 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x446 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x639 (bvuge ?x446 (_ bv1 32))))
 (= $x639 (bvuge ?x821 (_ bv1 32)))))))
 ))
 (let (($x860 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x240 (= false false)))
 (let ((?x446 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x446 (_ bv0 32))))
 (=> $x327 $x240)))))
 ))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x446 (_ bv0 32))))
 (= $x327 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x329 (and $x32 $x860)))
 (let (($x828 (and $x329 $x72)))
 (let (($x884 (and $x828 $x172)))
 (let (($x684 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x670 (= (bvand ?x475 (_ bv4294967292 32)) ?x475)))
 (let (($x842 (= (bvand ?x159 (_ bv4294967292 32)) ?x159)))
 (let (($x18 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x159 (bvsub ?x159 (_ bv4 32))) (bvult ?x159 (bvsub ?x159 (_ bv4 32))))))
 (let (($x104 (and true $x18)))
 (let (($x539 (= (bvand ?x543 (_ bv4294967292 32)) ?x543)))
 (let (($x553 (and $x539 $x104)))
 (let (($x764 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x475 (bvsub ?x475 (_ bv8 32))) (bvult ?x475 (bvsub ?x475 (_ bv8 32))))))
 (let (($x111 (and (and (and true $x764) $x553) $x842)))
 (let (($x460 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x863 (and true $x460)))
 (let (($x184 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x349 (and $x184 $x863)))
 (let (($x679 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x543 (bvsub ?x543 (_ bv12 32))) (bvult ?x543 (bvsub ?x543 (_ bv12 32))))))
 (let (($x55 (and (and (and true $x184) $x679) $x349)))
 (let (($x198 (and (and (and (and (and (and $x55 $x111) $x670) $x684) $x884) $x542) $x409)))
 (let (($x225 (= $x198 true)))
 (let (($x379 (= $x225 true)))
 (let (($x430 (= $x379 true)))
 (let (($x235 (= $x55 true)))
 (let (($x102 (= $x235 true)))
 (let (($x106 (= $x102 true)))
 (let (($x150 (and $x111 $x670)))
 (let (($x584 (= $x150 true)))
 (let (($x806 (= $x584 true)))
 (let (($x753 (= $x806 true)))
 (let (($x160 (and $x753 $x106)))
 (let (($x288 (and $x160 $x430)))
 (let (($x741 (and $x288 $x774)))
 (let ((?x510 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x510 (_ bv0 32))))
 (let ((?x569 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x569 (_ bv1 32))))
 (let (($x486 (and $x85 $x262)))
 (let ((?x68 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x68 (_ bv1 32))))
 (let (($x352 (and $x498 $x486)))
 (let ((?x120 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x120 (_ bv1 32))))
 (let (($x419 (and $x226 $x352)))
 (let (($x216 (and $x419 $x741)))
 (let ((?x861 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x264 (= ?x861 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x462 (=> $x226 $x264)))
 (let (($x630 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x281 (= $x226 $x630)))
 (let (($x240 (= false false)))
 (let (($x775 (= ?x120 (_ bv0 32))))
 (let (($x824 (=> $x775 $x240)))
 (let (($x393 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x608 (= $x775 $x393)))
 (let (($x47 (and $x608 $x824)))
 (let (($x864 (and $x47 $x281)))
 (let (($x496 (and $x864 $x462)))
 (let (($x704 (and $x496 $x216)))
 (let ((?x685 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x439 (= ?x685 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x780 (=> $x498 $x439)))
 (let (($x763 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x116 (= $x498 $x763)))
 (let (($x333 (= ?x68 (_ bv0 32))))
 (let (($x634 (=> $x333 $x240)))
 (let (($x45 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x122 (= $x333 $x45)))
 (let (($x193 (and $x122 $x634)))
 (let (($x380 (and $x193 $x116)))
 (let (($x702 (and $x380 $x780)))
 (let (($x761 (and $x702 $x704)))
 (let (($x303 (= ?x331 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x348 (=> $x85 $x303)))
 (let (($x661 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x707 (= $x85 $x661)))
 (let (($x466 (= ?x569 (_ bv0 32))))
 (let (($x695 (=> $x466 $x240)))
 (let (($x268 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x652 (= $x466 $x268)))
 (let (($x727 (and $x652 $x695)))
 (let (($x889 (and $x727 $x707)))
 (let (($x789 (and $x889 $x348)))
 (let (($x616 (and $x789 $x761)))
 (let ((?x532 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x754 (= ?x532 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x189 (bvuge ?x510 (_ bv1 32))))
 (let (($x96 (=> $x189 $x754)))
 (let (($x402 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x784 (= $x189 $x402)))
 (let (($x797 (=> $x262 $x240)))
 (let (($x509 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x688 (= $x262 $x509)))
 (let (($x487 (and $x688 $x797)))
 (let (($x612 (and $x487 $x784)))
 (let (($x143 (and $x612 $x96)))
 (let (($x15 (and $x143 $x616)))
 (let (($x713 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x362 (and $x713 $x15)))
 (let (($x848 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x839 (and $x848 $x362)))
 (let (($x849 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x825 (and $x849 $x839)))
 (let (($x347 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x7 (and $x347 $x825)))
 (let (($x623 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x700 (and $x623 $x7)))
 (let (($x832 (and $x240 $x700)))
 (let (($x38 (= ?x861 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x22 (and $x38 $x832)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x637 (and $x123 $x22)))
 (let (($x418 (and $x240 $x637)))
 (let (($x255 (= ?x685 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x271 (and $x255 $x418)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x801 (and $x41 $x271)))
 (let (($x834 (and $x240 $x801)))
 (let (($x92 (= ?x331 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x669 (and $x92 $x834)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x212 (and $x37 $x669)))
 (let (($x132 (and $x240 $x212)))
 (let (($x176 (= ?x532 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x187 (and $x176 $x132)))
 (let (($x566 (bvugt ?x159 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x750 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x672)))
 (let (($x890 (=> (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x750 $x566)))))))
 (let (($x689 (bvugt ?x475 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x294)))
 (let (($x44 (=> (bvule ?x475 (bvsub (bvadd ?x475 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x689)))))))
 (let (($x558 (bvugt ?x543 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x734 (=> (bvule ?x543 (bvsub (bvadd ?x543 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x558)))))))
 (let (($x506 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x423 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x423)))
 (let (($x429 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x506)))))))
 (let (($x528 (and $x429 $x734)))
 (let (($x291 (and $x528 $x44)))
 (let (($x381 (and $x291 $x890)))
 (let (($x243 (and $x381 $x187)))
 (let (($x298 (=> $x243 $x131)))
 (not $x298)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x331 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x529 (bvmul (_ bv4294967295 32) ?x331)))
 (let ((?x443 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x529)))
 (let ((?x593 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x546 (concat ?x593 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x857 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x475 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x294 (bvadd ?x475 (_ bv3 32))))
 (let ((?x241 (concat (select input.dst.llvm-mem ?x294) (concat ?x857 ?x546))))
 (let ((?x576 (bvmul (_ bv4294967295 32) ?x241)))
 (let ((?x802 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x793 (concat ?x802 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x663 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x672 (bvadd ?x159 (_ bv3 32))))
 (let ((?x725 (concat (select input.dst.llvm-mem ?x672) (concat ?x663 ?x793))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x346 (concat ?x114 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x543 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x141 (bvadd ?x543 (_ bv3 32))))
 (let ((?x206 (concat (select input.dst.llvm-mem ?x141) (concat ?x307 ?x346))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x785 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x194)))
 (let ((?x810 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x785)))
 (let ((?x603 (bvadd (bvadd (bvadd ?x810 ?x206) ?x725) ?x576)))
 (let (($x289 (= ?x603 ?x443)))
 (let (($x46 (= $x289 true)))
 (let (($x131 (= $x46 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x674 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x421 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x370 (concat ?x433 (concat ?x421 (concat ?x674 ?x94)))))
 (let (($x583 (= ?x370 input.dst.llvm-%m)))
 (let (($x615 (= $x583 true)))
 (let (($x774 (= $x615 true)))
 (let (($x409 (= input.dst.llvm-%m ?x370)))
 (let ((?x629 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x395 (= (_ bv0 32) ?x629)))
 (let ((?x731 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x613 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x731)))
 (let (($x594 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x715 (and $x594 $x613)))
 (let (($x542 (and $x715 $x395)))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x845 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv1 32))) (select input.dst.llvm-mem ?x845))))
 (let ((?x587 (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv2 32))) ?x290))))
 (let ((?x446 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x639 (bvuge ?x446 (_ bv1 32))))
 (=> $x639 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x587))))))))
 ))
 (let (($x72 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x821 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x446 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x639 (bvuge ?x446 (_ bv1 32))))
 (= $x639 (bvuge ?x821 (_ bv1 32)))))))
 ))
 (let (($x860 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x240 (= false false)))
 (let ((?x446 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x446 (_ bv0 32))))
 (=> $x327 $x240)))))
 ))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x446 (_ bv0 32))))
 (= $x327 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x329 (and $x32 $x860)))
 (let (($x828 (and $x329 $x72)))
 (let (($x884 (and $x828 $x172)))
 (let (($x684 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x670 (= (bvand ?x475 (_ bv4294967292 32)) ?x475)))
 (let (($x842 (= (bvand ?x159 (_ bv4294967292 32)) ?x159)))
 (let (($x18 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x159 (bvsub ?x159 (_ bv4 32))) (bvult ?x159 (bvsub ?x159 (_ bv4 32))))))
 (let (($x104 (and true $x18)))
 (let (($x539 (= (bvand ?x543 (_ bv4294967292 32)) ?x543)))
 (let (($x553 (and $x539 $x104)))
 (let (($x764 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x475 (bvsub ?x475 (_ bv8 32))) (bvult ?x475 (bvsub ?x475 (_ bv8 32))))))
 (let (($x111 (and (and (and true $x764) $x553) $x842)))
 (let (($x460 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x863 (and true $x460)))
 (let (($x184 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x349 (and $x184 $x863)))
 (let (($x679 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x543 (bvsub ?x543 (_ bv12 32))) (bvult ?x543 (bvsub ?x543 (_ bv12 32))))))
 (let (($x55 (and (and (and true $x184) $x679) $x349)))
 (let (($x198 (and (and (and (and (and (and $x55 $x111) $x670) $x684) $x884) $x542) $x409)))
 (let (($x225 (= $x198 true)))
 (let (($x379 (= $x225 true)))
 (let (($x430 (= $x379 true)))
 (let (($x235 (= $x55 true)))
 (let (($x102 (= $x235 true)))
 (let (($x106 (= $x102 true)))
 (let (($x150 (and $x111 $x670)))
 (let (($x584 (= $x150 true)))
 (let (($x806 (= $x584 true)))
 (let (($x753 (= $x806 true)))
 (let (($x160 (and $x753 $x106)))
 (let (($x288 (and $x160 $x430)))
 (let (($x741 (and $x288 $x774)))
 (let ((?x510 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x510 (_ bv0 32))))
 (let ((?x569 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x569 (_ bv1 32))))
 (let (($x486 (and $x85 $x262)))
 (let ((?x68 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x68 (_ bv1 32))))
 (let (($x352 (and $x498 $x486)))
 (let ((?x120 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x120 (_ bv1 32))))
 (let (($x419 (and $x226 $x352)))
 (let (($x216 (and $x419 $x741)))
 (let ((?x861 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x264 (= ?x861 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x462 (=> $x226 $x264)))
 (let (($x630 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x281 (= $x226 $x630)))
 (let (($x240 (= false false)))
 (let (($x775 (= ?x120 (_ bv0 32))))
 (let (($x824 (=> $x775 $x240)))
 (let (($x393 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x608 (= $x775 $x393)))
 (let (($x47 (and $x608 $x824)))
 (let (($x864 (and $x47 $x281)))
 (let (($x496 (and $x864 $x462)))
 (let (($x704 (and $x496 $x216)))
 (let ((?x685 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x439 (= ?x685 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x780 (=> $x498 $x439)))
 (let (($x763 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x116 (= $x498 $x763)))
 (let (($x333 (= ?x68 (_ bv0 32))))
 (let (($x634 (=> $x333 $x240)))
 (let (($x45 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x122 (= $x333 $x45)))
 (let (($x193 (and $x122 $x634)))
 (let (($x380 (and $x193 $x116)))
 (let (($x702 (and $x380 $x780)))
 (let (($x761 (and $x702 $x704)))
 (let (($x303 (= ?x331 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x348 (=> $x85 $x303)))
 (let (($x661 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x707 (= $x85 $x661)))
 (let (($x466 (= ?x569 (_ bv0 32))))
 (let (($x695 (=> $x466 $x240)))
 (let (($x268 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x652 (= $x466 $x268)))
 (let (($x727 (and $x652 $x695)))
 (let (($x889 (and $x727 $x707)))
 (let (($x789 (and $x889 $x348)))
 (let (($x616 (and $x789 $x761)))
 (let ((?x532 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x754 (= ?x532 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x189 (bvuge ?x510 (_ bv1 32))))
 (let (($x96 (=> $x189 $x754)))
 (let (($x402 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x784 (= $x189 $x402)))
 (let (($x797 (=> $x262 $x240)))
 (let (($x509 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x688 (= $x262 $x509)))
 (let (($x487 (and $x688 $x797)))
 (let (($x612 (and $x487 $x784)))
 (let (($x143 (and $x612 $x96)))
 (let (($x15 (and $x143 $x616)))
 (let (($x713 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x362 (and $x713 $x15)))
 (let (($x848 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x839 (and $x848 $x362)))
 (let (($x849 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x825 (and $x849 $x839)))
 (let (($x347 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x7 (and $x347 $x825)))
 (let (($x623 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x700 (and $x623 $x7)))
 (let (($x832 (and $x240 $x700)))
 (let (($x38 (= ?x861 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x22 (and $x38 $x832)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x637 (and $x123 $x22)))
 (let (($x418 (and $x240 $x637)))
 (let (($x255 (= ?x685 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x271 (and $x255 $x418)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x801 (and $x41 $x271)))
 (let (($x834 (and $x240 $x801)))
 (let (($x92 (= ?x331 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x669 (and $x92 $x834)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x212 (and $x37 $x669)))
 (let (($x132 (and $x240 $x212)))
 (let (($x176 (= ?x532 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x187 (and $x176 $x132)))
 (let (($x566 (bvugt ?x159 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x750 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x672)))
 (let (($x890 (=> (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x750 $x566)))))))
 (let (($x689 (bvugt ?x475 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x294)))
 (let (($x44 (=> (bvule ?x475 (bvsub (bvadd ?x475 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x689)))))))
 (let (($x558 (bvugt ?x543 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x734 (=> (bvule ?x543 (bvsub (bvadd ?x543 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x558)))))))
 (let (($x506 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x423 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x423)))
 (let (($x429 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x506)))))))
 (let (($x528 (and $x429 $x734)))
 (let (($x291 (and $x528 $x44)))
 (let (($x381 (and $x291 $x890)))
 (let (($x243 (and $x381 $x187)))
 (let (($x298 (=> $x243 $x131)))
 (not $x298)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x310 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x488 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x310)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x710 (concat ?x73 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x742 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x318 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x247 (bvadd ?x318 (_ bv3 32))))
 (let ((?x681 (concat (select input.dst.llvm-mem ?x247) (concat ?x742 ?x710))))
 (let ((?x130 (bvmul (_ bv4294967295 32) ?x681)))
 (let ((?x234 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x833 (concat ?x234 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x294 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x269 (bvadd ?x294 (_ bv3 32))))
 (let ((?x733 (concat (select input.dst.llvm-mem ?x269) (concat ?x522 ?x833))))
 (let ((?x837 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x827 (concat ?x837 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x112 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x79 (bvadd ?x112 (_ bv3 32))))
 (let ((?x231 (concat (select input.dst.llvm-mem ?x79) (concat ?x285 ?x827))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x302)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x581)))
 (let ((?x218 (bvadd (bvadd (bvadd ?x712 ?x231) ?x733) ?x130)))
 (let (($x657 (= ?x218 ?x488)))
 (let (($x129 (= $x657 true)))
 (let (($x547 (= $x129 true)))
 (let ((?x568 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x456 (concat ?x70 (concat ?x34 (concat ?x145 ?x568)))))
 (let (($x829 (= ?x456 input.dst.llvm-%m)))
 (let (($x121 (= $x829 true)))
 (let (($x99 (= $x121 true)))
 (let (($x755 (= input.dst.llvm-%m ?x456)))
 (let ((?x351 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x227 (= (_ bv0 32) ?x351)))
 (let ((?x538 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x538)))
 (let (($x410 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x410 $x213)))
 (let (($x147 (and $x76 $x227)))
 (let (($x424 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x796 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x796 (_ bv1 32))) (select input.dst.llvm-mem ?x796))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x796 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x796 (_ bv2 32))) ?x81))))
 (let ((?x357 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (bvuge ?x357 (_ bv1 32))))
 (=> $x387 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x413))))))))
 ))
 (let (($x799 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x687 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x357 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (bvuge ?x357 (_ bv1 32))))
 (= $x387 (bvuge ?x687 (_ bv1 32)))))))
 ))
 (let (($x811 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x861 (= false false)))
 (let ((?x357 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x760 (= ?x357 (_ bv0 32))))
 (=> $x760 $x861)))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x357 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x760 (= ?x357 (_ bv0 32))))
 (= $x760 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x477 (and $x155 $x811)))
 (let (($x819 (and $x477 $x799)))
 (let (($x222 (and $x819 $x424)))
 (let (($x288 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x449 (= (bvand ?x318 (_ bv4294967292 32)) ?x318)))
 (let (($x504 (= (bvand ?x294 (_ bv4294967292 32)) ?x294)))
 (let (($x388 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x294 (bvsub ?x294 (_ bv4 32))) (bvult ?x294 (bvsub ?x294 (_ bv4 32))))))
 (let (($x304 (and true $x388)))
 (let (($x115 (= (bvand ?x112 (_ bv4294967292 32)) ?x112)))
 (let (($x108 (and $x115 $x304)))
 (let (($x72 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x318 (bvsub ?x318 (_ bv8 32))) (bvult ?x318 (bvsub ?x318 (_ bv8 32))))))
 (let (($x587 (and (and (and true $x72) $x108) $x504)))
 (let (($x211 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x674 (and true $x211)))
 (let (($x613 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x94 (and $x613 $x674)))
 (let (($x300 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x112 (bvsub ?x112 (_ bv12 32))) (bvult ?x112 (bvsub ?x112 (_ bv12 32))))))
 (let (($x370 (and (and (and true $x613) $x300) $x94)))
 (let (($x762 (and (and (and (and (and (and $x370 $x587) $x449) $x288) $x222) $x147) $x755)))
 (let (($x353 (= $x762 true)))
 (let (($x885 (= $x353 true)))
 (let (($x50 (= $x885 true)))
 (let (($x409 (= $x370 true)))
 (let (($x198 (= $x409 true)))
 (let (($x225 (= $x198 true)))
 (let (($x172 (and $x587 $x449)))
 (let (($x884 (= $x172 true)))
 (let (($x342 (= $x884 true)))
 (let (($x594 (= $x342 true)))
 (let (($x379 (and $x594 $x225)))
 (let (($x88 (and $x379 $x50)))
 (let (($x168 (and $x88 $x99)))
 (let ((?x116 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x116 (_ bv1 32))))
 (let ((?x419 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (= ?x419 (_ bv0 32))))
 (let (($x32 (and $x570 $x393)))
 (let ((?x584 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (bvuge ?x584 (_ bv1 32))))
 (let (($x841 (and $x679 $x32)))
 (let ((?x691 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x441 (bvuge ?x691 (_ bv1 32))))
 (let (($x860 (and $x441 $x841)))
 (let (($x428 (and $x860 $x168)))
 (let ((?x695 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x821 (= ?x695 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x771 (=> $x441 $x821)))
 (let (($x846 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x523 (= $x441 $x846)))
 (let (($x861 (= false false)))
 (let (($x474 (= ?x691 (_ bv0 32))))
 (let (($x684 (=> $x474 $x861)))
 (let (($x106 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x856 (= $x474 $x106)))
 (let (($x776 (and $x856 $x684)))
 (let (($x773 (and $x776 $x523)))
 (let (($x854 (and $x773 $x771)))
 (let (($x128 (and $x854 $x428)))
 (let ((?x784 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x830 (= ?x784 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x648 (=> $x679 $x830)))
 (let (($x716 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x646 (= $x679 $x716)))
 (let (($x806 (= ?x584 (_ bv0 32))))
 (let (($x404 (=> $x806 $x861)))
 (let (($x670 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x753 (= $x806 $x670)))
 (let (($x184 (and $x753 $x404)))
 (let (($x75 (and $x184 $x646)))
 (let (($x813 (and $x75 $x648)))
 (let (($x699 (and $x813 $x128)))
 (let ((?x713 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x485 (= ?x713 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x338 (bvuge ?x419 (_ bv1 32))))
 (let (($x18 (=> $x338 $x485)))
 (let (($x539 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x537 (= $x338 $x539)))
 (let (($x248 (=> $x570 $x861)))
 (let (($x486 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x117 (= $x570 $x486)))
 (let (($x467 (and $x117 $x248)))
 (let (($x792 (and $x467 $x537)))
 (let (($x104 (and $x792 $x18)))
 (let (($x565 (and $x104 $x699)))
 (let (($x47 (= ?x310 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x226 (=> $x393 $x47)))
 (let (($x840 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x608 (= $x393 $x840)))
 (let (($x380 (= ?x116 (_ bv0 32))))
 (let (($x439 (=> $x380 $x861)))
 (let (($x498 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x25 (= $x380 $x498)))
 (let (($x780 (and $x25 $x439)))
 (let (($x824 (and $x780 $x608)))
 (let (($x630 (and $x824 $x226)))
 (let (($x253 (and $x630 $x565)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x484 (and $x68 $x253)))
 (let (($x789 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x590 (and $x789 $x484)))
 (let (($x303 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x284 (and $x303 $x590)))
 (let (($x889 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x601 (and $x889 $x284)))
 (let (($x661 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x853 (and $x661 $x601)))
 (let (($x544 (and $x861 $x853)))
 (let (($x727 (= ?x695 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x620 (and $x727 $x544)))
 (let (($x754 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x308 (and $x754 $x620)))
 (let (($x805 (and $x861 $x308)))
 (let (($x612 (= ?x784 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x149 (and $x612 $x805)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x415 (and $x262 $x149)))
 (let (($x23 (and $x861 $x415)))
 (let (($x545 (= ?x713 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x604 (and $x545 $x23)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x520 (and $x38 $x604)))
 (let (($x855 (and $x861 $x520)))
 (let (($x123 (= ?x310 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x305 (and $x123 $x855)))
 (let (($x463 (bvugt ?x294 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x269)))
 (let (($x176 (=> (bvule ?x294 (bvsub (bvadd ?x294 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x463)))))))
 (let (($x452 (bvugt ?x318 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x585 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x247)))
 (let (($x297 (=> (bvule ?x318 (bvsub (bvadd ?x318 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x585 $x452)))))))
 (let (($x721 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x746 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x721)))))))
 (let (($x423 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x237 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x548 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x237)))
 (let (($x513 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x548 $x423)))))))
 (let (($x339 (and $x513 $x746)))
 (let (($x180 (and $x339 $x297)))
 (let (($x394 (and $x180 $x176)))
 (let (($x567 (and $x394 $x305)))
 (let (($x158 (=> $x567 $x547)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x310 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x488 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x310)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x710 (concat ?x73 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x742 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x318 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x247 (bvadd ?x318 (_ bv3 32))))
 (let ((?x681 (concat (select input.dst.llvm-mem ?x247) (concat ?x742 ?x710))))
 (let ((?x130 (bvmul (_ bv4294967295 32) ?x681)))
 (let ((?x234 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x833 (concat ?x234 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x294 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x269 (bvadd ?x294 (_ bv3 32))))
 (let ((?x733 (concat (select input.dst.llvm-mem ?x269) (concat ?x522 ?x833))))
 (let ((?x837 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x827 (concat ?x837 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x112 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x79 (bvadd ?x112 (_ bv3 32))))
 (let ((?x231 (concat (select input.dst.llvm-mem ?x79) (concat ?x285 ?x827))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x302)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x581)))
 (let ((?x218 (bvadd (bvadd (bvadd ?x712 ?x231) ?x733) ?x130)))
 (let (($x657 (= ?x218 ?x488)))
 (let (($x129 (= $x657 true)))
 (let (($x547 (= $x129 true)))
 (let ((?x568 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x456 (concat ?x70 (concat ?x34 (concat ?x145 ?x568)))))
 (let (($x829 (= ?x456 input.dst.llvm-%m)))
 (let (($x121 (= $x829 true)))
 (let (($x99 (= $x121 true)))
 (let (($x755 (= input.dst.llvm-%m ?x456)))
 (let ((?x351 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x227 (= (_ bv0 32) ?x351)))
 (let ((?x538 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x538)))
 (let (($x410 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x410 $x213)))
 (let (($x147 (and $x76 $x227)))
 (let (($x424 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x796 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x796 (_ bv1 32))) (select input.dst.llvm-mem ?x796))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x796 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x796 (_ bv2 32))) ?x81))))
 (let ((?x357 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (bvuge ?x357 (_ bv1 32))))
 (=> $x387 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x413))))))))
 ))
 (let (($x799 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x687 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x357 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (bvuge ?x357 (_ bv1 32))))
 (= $x387 (bvuge ?x687 (_ bv1 32)))))))
 ))
 (let (($x811 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x861 (= false false)))
 (let ((?x357 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x760 (= ?x357 (_ bv0 32))))
 (=> $x760 $x861)))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x357 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x760 (= ?x357 (_ bv0 32))))
 (= $x760 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x477 (and $x155 $x811)))
 (let (($x819 (and $x477 $x799)))
 (let (($x222 (and $x819 $x424)))
 (let (($x288 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x449 (= (bvand ?x318 (_ bv4294967292 32)) ?x318)))
 (let (($x504 (= (bvand ?x294 (_ bv4294967292 32)) ?x294)))
 (let (($x388 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x294 (bvsub ?x294 (_ bv4 32))) (bvult ?x294 (bvsub ?x294 (_ bv4 32))))))
 (let (($x304 (and true $x388)))
 (let (($x115 (= (bvand ?x112 (_ bv4294967292 32)) ?x112)))
 (let (($x108 (and $x115 $x304)))
 (let (($x72 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x318 (bvsub ?x318 (_ bv8 32))) (bvult ?x318 (bvsub ?x318 (_ bv8 32))))))
 (let (($x587 (and (and (and true $x72) $x108) $x504)))
 (let (($x211 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x674 (and true $x211)))
 (let (($x613 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x94 (and $x613 $x674)))
 (let (($x300 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x112 (bvsub ?x112 (_ bv12 32))) (bvult ?x112 (bvsub ?x112 (_ bv12 32))))))
 (let (($x370 (and (and (and true $x613) $x300) $x94)))
 (let (($x762 (and (and (and (and (and (and $x370 $x587) $x449) $x288) $x222) $x147) $x755)))
 (let (($x353 (= $x762 true)))
 (let (($x885 (= $x353 true)))
 (let (($x50 (= $x885 true)))
 (let (($x409 (= $x370 true)))
 (let (($x198 (= $x409 true)))
 (let (($x225 (= $x198 true)))
 (let (($x172 (and $x587 $x449)))
 (let (($x884 (= $x172 true)))
 (let (($x342 (= $x884 true)))
 (let (($x594 (= $x342 true)))
 (let (($x379 (and $x594 $x225)))
 (let (($x88 (and $x379 $x50)))
 (let (($x168 (and $x88 $x99)))
 (let ((?x116 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x116 (_ bv1 32))))
 (let ((?x419 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (= ?x419 (_ bv0 32))))
 (let (($x32 (and $x570 $x393)))
 (let ((?x584 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (bvuge ?x584 (_ bv1 32))))
 (let (($x841 (and $x679 $x32)))
 (let ((?x691 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x441 (bvuge ?x691 (_ bv1 32))))
 (let (($x860 (and $x441 $x841)))
 (let (($x428 (and $x860 $x168)))
 (let ((?x695 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x821 (= ?x695 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x771 (=> $x441 $x821)))
 (let (($x846 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x523 (= $x441 $x846)))
 (let (($x861 (= false false)))
 (let (($x474 (= ?x691 (_ bv0 32))))
 (let (($x684 (=> $x474 $x861)))
 (let (($x106 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x856 (= $x474 $x106)))
 (let (($x776 (and $x856 $x684)))
 (let (($x773 (and $x776 $x523)))
 (let (($x854 (and $x773 $x771)))
 (let (($x128 (and $x854 $x428)))
 (let ((?x784 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x830 (= ?x784 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x648 (=> $x679 $x830)))
 (let (($x716 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x646 (= $x679 $x716)))
 (let (($x806 (= ?x584 (_ bv0 32))))
 (let (($x404 (=> $x806 $x861)))
 (let (($x670 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x753 (= $x806 $x670)))
 (let (($x184 (and $x753 $x404)))
 (let (($x75 (and $x184 $x646)))
 (let (($x813 (and $x75 $x648)))
 (let (($x699 (and $x813 $x128)))
 (let ((?x713 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x485 (= ?x713 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x338 (bvuge ?x419 (_ bv1 32))))
 (let (($x18 (=> $x338 $x485)))
 (let (($x539 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x537 (= $x338 $x539)))
 (let (($x248 (=> $x570 $x861)))
 (let (($x486 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x117 (= $x570 $x486)))
 (let (($x467 (and $x117 $x248)))
 (let (($x792 (and $x467 $x537)))
 (let (($x104 (and $x792 $x18)))
 (let (($x565 (and $x104 $x699)))
 (let (($x47 (= ?x310 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x226 (=> $x393 $x47)))
 (let (($x840 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x608 (= $x393 $x840)))
 (let (($x380 (= ?x116 (_ bv0 32))))
 (let (($x439 (=> $x380 $x861)))
 (let (($x498 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x25 (= $x380 $x498)))
 (let (($x780 (and $x25 $x439)))
 (let (($x824 (and $x780 $x608)))
 (let (($x630 (and $x824 $x226)))
 (let (($x253 (and $x630 $x565)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x484 (and $x68 $x253)))
 (let (($x789 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x590 (and $x789 $x484)))
 (let (($x303 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x284 (and $x303 $x590)))
 (let (($x889 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x601 (and $x889 $x284)))
 (let (($x661 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x853 (and $x661 $x601)))
 (let (($x544 (and $x861 $x853)))
 (let (($x727 (= ?x695 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x620 (and $x727 $x544)))
 (let (($x754 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x308 (and $x754 $x620)))
 (let (($x805 (and $x861 $x308)))
 (let (($x612 (= ?x784 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x149 (and $x612 $x805)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x415 (and $x262 $x149)))
 (let (($x23 (and $x861 $x415)))
 (let (($x545 (= ?x713 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x604 (and $x545 $x23)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x520 (and $x38 $x604)))
 (let (($x855 (and $x861 $x520)))
 (let (($x123 (= ?x310 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x305 (and $x123 $x855)))
 (let (($x463 (bvugt ?x294 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x269)))
 (let (($x176 (=> (bvule ?x294 (bvsub (bvadd ?x294 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x463)))))))
 (let (($x452 (bvugt ?x318 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x585 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x247)))
 (let (($x297 (=> (bvule ?x318 (bvsub (bvadd ?x318 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x585 $x452)))))))
 (let (($x721 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x746 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x721)))))))
 (let (($x423 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x237 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x548 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x237)))
 (let (($x513 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x548 $x423)))))))
 (let (($x339 (and $x513 $x746)))
 (let (($x180 (and $x339 $x297)))
 (let (($x394 (and $x180 $x176)))
 (let (($x567 (and $x394 $x305)))
 (let (($x158 (=> $x567 $x547)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 241 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x608 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x248 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x665 (bvadd ?x248 ?x608)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x375 (concat ?x133 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x864 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x689 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x794 (bvadd ?x689 (_ bv3 32))))
 (let ((?x764 (concat (select input.dst.llvm-mem ?x794) (concat ?x864 ?x375))))
 (let ((?x35 (bvmul (_ bv4294967295 32) ?x764)))
 (let ((?x178 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x239 (concat ?x178 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x247 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x175 (bvadd ?x247 (_ bv3 32))))
 (let ((?x858 (concat (select input.dst.llvm-mem ?x175) (concat ?x327 ?x239))))
 (let ((?x502 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x373 (concat ?x502 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x548 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x651 (bvadd ?x548 (_ bv3 32))))
 (let ((?x863 (concat (select input.dst.llvm-mem ?x651) (concat ?x301 ?x373))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x265)))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x82)))
 (let ((?x333 (bvadd (bvadd (bvadd ?x359 ?x863) ?x858) ?x35)))
 (let (($x45 (= ?x333 ?x665)))
 (let (($x122 (= $x45 true)))
 (let (($x702 (= $x122 true)))
 (let ((?x663 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x536 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x857 (concat ?x536 (concat ?x337 (concat ?x267 ?x663)))))
 (let (($x529 (= ?x857 input.dst.llvm-%m)))
 (let (($x443 (= $x529 true)))
 (let (($x289 (= $x443 true)))
 (let (($x124 (= input.dst.llvm-%m ?x857)))
 (let ((?x15 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x362 (= (_ bv0 32) ?x15)))
 (let ((?x704 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x761 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x704)))
 (let (($x741 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x616 (and $x741 $x761)))
 (let (($x822 (and $x616 $x362)))
 (let (($x615 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x758 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x206))))
 (let ((?x509 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x825 (bvuge ?x509 (_ bv1 32))))
 (=> $x825 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x758))))))))
 ))
 (let (($x832 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x509 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x825 (bvuge ?x509 (_ bv1 32))))
 (= $x825 (bvuge ?x466 (_ bv1 32)))))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x695 (= false false)))
 (let ((?x509 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x688 (= ?x509 (_ bv0 32))))
 (=> $x688 $x695)))))
 ))
 (let (($x5 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x509 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x688 (= ?x509 (_ bv0 32))))
 (= $x688 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x849 (and $x5 $x347)))
 (let (($x583 (and $x849 $x832)))
 (let (($x774 (and $x583 $x615)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= (bvand ?x689 (_ bv4294967292 32)) ?x689)))
 (let (($x386 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x341 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 (_ bv4 32))) (bvult ?x247 (bvsub ?x247 (_ bv4 32))))))
 (let (($x113 (and true $x341)))
 (let (($x22 (= (bvand ?x548 (_ bv4294967292 32)) ?x548)))
 (let (($x332 (and $x22 $x113)))
 (let (($x799 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x689 (bvsub ?x689 (_ bv8 32))) (bvult ?x689 (bvsub ?x689 (_ bv8 32))))))
 (let (($x413 (and (and (and true $x799) $x332) $x386)))
 (let (($x578 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x145 (and true $x578)))
 (let (($x213 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x568 (and $x213 $x145)))
 (let (($x787 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x548 (bvsub ?x548 (_ bv12 32))) (bvult ?x548 (bvsub ?x548 (_ bv12 32))))))
 (let (($x456 (and (and (and true $x213) $x787) $x568)))
 (let (($x743 (and (and (and (and (and (and $x456 $x413) $x100) $x88) $x774) $x822) $x124)))
 (let (($x576 (= $x743 true)))
 (let (($x241 (= $x576 true)))
 (let (($x603 (= $x241 true)))
 (let (($x755 (= $x456 true)))
 (let (($x762 (= $x755 true)))
 (let (($x353 (= $x762 true)))
 (let (($x424 (and $x413 $x100)))
 (let (($x222 (= $x424 true)))
 (let (($x809 (= $x222 true)))
 (let (($x410 (= $x809 true)))
 (let (($x885 (and $x410 $x353)))
 (let (($x312 (and $x885 $x603)))
 (let (($x46 (and $x312 $x289)))
 (let ((?x646 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x646 (_ bv0 32))))
 (let ((?x860 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x639 (= ?x860 (_ bv0 32))))
 (let (($x155 (and $x639 $x75)))
 (let ((?x884 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x884 (_ bv1 32))))
 (let (($x232 (and $x300 $x155)))
 (let ((?x779 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x779 (_ bv1 32))))
 (let (($x811 (and $x7 $x232)))
 (let (($x298 (and $x811 $x46)))
 (let (($x687 (= ?x248 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x851 (=> $x7 $x687)))
 (let (($x414 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x28 (= $x7 $x414)))
 (let (($x695 (= false false)))
 (let (($x356 (= ?x779 (_ bv0 32))))
 (let (($x288 (=> $x356 $x695)))
 (let (($x225 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x430 (= $x356 $x225)))
 (let (($x407 (and $x430 $x288)))
 (let (($x850 (and $x407 $x28)))
 (let (($x571 (and $x850 $x851)))
 (let (($x131 (and $x571 $x298)))
 (let (($x87 (= ?x608 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x261 (=> $x300 $x87)))
 (let (($x542 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x236 (= $x300 $x542)))
 (let (($x342 (= ?x884 (_ bv0 32))))
 (let (($x731 (=> $x342 $x695)))
 (let (($x449 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x594 (= $x342 $x449)))
 (let (($x613 (and $x594 $x731)))
 (let (($x433 (and $x613 $x236)))
 (let (($x421 (and $x433 $x261)))
 (let (($x769 (and $x421 $x131)))
 (let ((?x68 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x10 (= ?x68 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x845 (bvuge ?x860 (_ bv1 32))))
 (let (($x388 (=> $x845 $x10)))
 (let (($x115 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x728 (= $x845 $x115)))
 (let (($x844 (=> $x639 $x695)))
 (let (($x32 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x329 (= $x639 $x32)))
 (let (($x93 (and $x329 $x844)))
 (let (($x490 (and $x93 $x728)))
 (let (($x304 (and $x490 $x388)))
 (let (($x644 (and $x304 $x769)))
 (let ((?x324 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x776 (= ?x324 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x106 (bvuge ?x646 (_ bv1 32))))
 (let (($x441 (=> $x106 $x776)))
 (let (($x235 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x856 (= $x106 $x235)))
 (let (($x830 (=> $x75 $x695)))
 (let (($x679 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x260 (= $x75 $x679)))
 (let (($x648 (and $x260 $x830)))
 (let (($x684 (and $x648 $x856)))
 (let (($x846 (and $x684 $x441)))
 (let (($x671 (and $x846 $x644)))
 (let (($x584 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x196 (and $x584 $x671)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x447 (and $x104 $x196)))
 (let (($x485 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x101 (and $x485 $x447)))
 (let (($x792 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x438 (and $x792 $x101)))
 (let (($x539 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x526 (and $x539 $x438)))
 (let (($x295 (and $x695 $x526)))
 (let (($x467 (= ?x248 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x554 (and $x467 $x295)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x323 (and $x47 $x554)))
 (let (($x680 (and $x695 $x323)))
 (let (($x824 (= ?x608 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x516 (and $x824 $x680)))
 (let (($x380 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x136 (and $x380 $x516)))
 (let (($x697 (and $x695 $x136)))
 (let (($x763 (= ?x68 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x795 (and $x763 $x697)))
 (let (($x727 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x173 (and $x727 $x795)))
 (let (($x39 (and $x695 $x173)))
 (let (($x754 (= ?x324 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x385 (and $x754 $x39)))
 (let (($x381 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x890 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x123 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x890 $x381)))))))
 (let (($x291 (bvugt ?x689 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x794)))
 (let (($x566 (=> (bvule ?x689 (bvsub (bvadd ?x689 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x291)))))))
 (let (($x528 (bvugt ?x548 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x734 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x651)))
 (let (($x127 (=> (bvule ?x548 (bvsub (bvadd ?x548 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x734 $x528)))))))
 (let (($x62 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x605 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x237 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x605)))
 (let (($x558 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x237 $x62)))))))
 (let (($x475 (and $x558 $x127)))
 (let (($x203 (and $x475 $x566)))
 (let (($x97 (and $x203 $x123)))
 (let (($x533 (and $x97 $x385)))
 (let (($x807 (=> $x533 $x702)))
 (not $x807))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x608 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x248 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x665 (bvadd ?x248 ?x608)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x375 (concat ?x133 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x864 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x689 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x794 (bvadd ?x689 (_ bv3 32))))
 (let ((?x764 (concat (select input.dst.llvm-mem ?x794) (concat ?x864 ?x375))))
 (let ((?x35 (bvmul (_ bv4294967295 32) ?x764)))
 (let ((?x178 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x239 (concat ?x178 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x247 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x175 (bvadd ?x247 (_ bv3 32))))
 (let ((?x858 (concat (select input.dst.llvm-mem ?x175) (concat ?x327 ?x239))))
 (let ((?x502 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x373 (concat ?x502 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x548 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x651 (bvadd ?x548 (_ bv3 32))))
 (let ((?x863 (concat (select input.dst.llvm-mem ?x651) (concat ?x301 ?x373))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x265)))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x82)))
 (let ((?x333 (bvadd (bvadd (bvadd ?x359 ?x863) ?x858) ?x35)))
 (let (($x45 (= ?x333 ?x665)))
 (let (($x122 (= $x45 true)))
 (let (($x702 (= $x122 true)))
 (let ((?x663 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x536 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x857 (concat ?x536 (concat ?x337 (concat ?x267 ?x663)))))
 (let (($x529 (= ?x857 input.dst.llvm-%m)))
 (let (($x443 (= $x529 true)))
 (let (($x289 (= $x443 true)))
 (let (($x124 (= input.dst.llvm-%m ?x857)))
 (let ((?x15 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x362 (= (_ bv0 32) ?x15)))
 (let ((?x704 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x761 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x704)))
 (let (($x741 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x616 (and $x741 $x761)))
 (let (($x822 (and $x616 $x362)))
 (let (($x615 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x758 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x206))))
 (let ((?x509 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x825 (bvuge ?x509 (_ bv1 32))))
 (=> $x825 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x758))))))))
 ))
 (let (($x832 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x509 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x825 (bvuge ?x509 (_ bv1 32))))
 (= $x825 (bvuge ?x466 (_ bv1 32)))))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x695 (= false false)))
 (let ((?x509 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x688 (= ?x509 (_ bv0 32))))
 (=> $x688 $x695)))))
 ))
 (let (($x5 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x509 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x688 (= ?x509 (_ bv0 32))))
 (= $x688 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x849 (and $x5 $x347)))
 (let (($x583 (and $x849 $x832)))
 (let (($x774 (and $x583 $x615)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= (bvand ?x689 (_ bv4294967292 32)) ?x689)))
 (let (($x386 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x341 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 (_ bv4 32))) (bvult ?x247 (bvsub ?x247 (_ bv4 32))))))
 (let (($x113 (and true $x341)))
 (let (($x22 (= (bvand ?x548 (_ bv4294967292 32)) ?x548)))
 (let (($x332 (and $x22 $x113)))
 (let (($x799 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x689 (bvsub ?x689 (_ bv8 32))) (bvult ?x689 (bvsub ?x689 (_ bv8 32))))))
 (let (($x413 (and (and (and true $x799) $x332) $x386)))
 (let (($x578 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x145 (and true $x578)))
 (let (($x213 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x568 (and $x213 $x145)))
 (let (($x787 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x548 (bvsub ?x548 (_ bv12 32))) (bvult ?x548 (bvsub ?x548 (_ bv12 32))))))
 (let (($x456 (and (and (and true $x213) $x787) $x568)))
 (let (($x743 (and (and (and (and (and (and $x456 $x413) $x100) $x88) $x774) $x822) $x124)))
 (let (($x576 (= $x743 true)))
 (let (($x241 (= $x576 true)))
 (let (($x603 (= $x241 true)))
 (let (($x755 (= $x456 true)))
 (let (($x762 (= $x755 true)))
 (let (($x353 (= $x762 true)))
 (let (($x424 (and $x413 $x100)))
 (let (($x222 (= $x424 true)))
 (let (($x809 (= $x222 true)))
 (let (($x410 (= $x809 true)))
 (let (($x885 (and $x410 $x353)))
 (let (($x312 (and $x885 $x603)))
 (let (($x46 (and $x312 $x289)))
 (let ((?x646 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x646 (_ bv0 32))))
 (let ((?x860 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x639 (= ?x860 (_ bv0 32))))
 (let (($x155 (and $x639 $x75)))
 (let ((?x884 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x884 (_ bv1 32))))
 (let (($x232 (and $x300 $x155)))
 (let ((?x779 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x779 (_ bv1 32))))
 (let (($x811 (and $x7 $x232)))
 (let (($x298 (and $x811 $x46)))
 (let (($x687 (= ?x248 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x851 (=> $x7 $x687)))
 (let (($x414 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x28 (= $x7 $x414)))
 (let (($x695 (= false false)))
 (let (($x356 (= ?x779 (_ bv0 32))))
 (let (($x288 (=> $x356 $x695)))
 (let (($x225 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x430 (= $x356 $x225)))
 (let (($x407 (and $x430 $x288)))
 (let (($x850 (and $x407 $x28)))
 (let (($x571 (and $x850 $x851)))
 (let (($x131 (and $x571 $x298)))
 (let (($x87 (= ?x608 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x261 (=> $x300 $x87)))
 (let (($x542 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x236 (= $x300 $x542)))
 (let (($x342 (= ?x884 (_ bv0 32))))
 (let (($x731 (=> $x342 $x695)))
 (let (($x449 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x594 (= $x342 $x449)))
 (let (($x613 (and $x594 $x731)))
 (let (($x433 (and $x613 $x236)))
 (let (($x421 (and $x433 $x261)))
 (let (($x769 (and $x421 $x131)))
 (let ((?x68 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x10 (= ?x68 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x845 (bvuge ?x860 (_ bv1 32))))
 (let (($x388 (=> $x845 $x10)))
 (let (($x115 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x728 (= $x845 $x115)))
 (let (($x844 (=> $x639 $x695)))
 (let (($x32 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x329 (= $x639 $x32)))
 (let (($x93 (and $x329 $x844)))
 (let (($x490 (and $x93 $x728)))
 (let (($x304 (and $x490 $x388)))
 (let (($x644 (and $x304 $x769)))
 (let ((?x324 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x776 (= ?x324 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x106 (bvuge ?x646 (_ bv1 32))))
 (let (($x441 (=> $x106 $x776)))
 (let (($x235 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x856 (= $x106 $x235)))
 (let (($x830 (=> $x75 $x695)))
 (let (($x679 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x260 (= $x75 $x679)))
 (let (($x648 (and $x260 $x830)))
 (let (($x684 (and $x648 $x856)))
 (let (($x846 (and $x684 $x441)))
 (let (($x671 (and $x846 $x644)))
 (let (($x584 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x196 (and $x584 $x671)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x447 (and $x104 $x196)))
 (let (($x485 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x101 (and $x485 $x447)))
 (let (($x792 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x438 (and $x792 $x101)))
 (let (($x539 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x526 (and $x539 $x438)))
 (let (($x295 (and $x695 $x526)))
 (let (($x467 (= ?x248 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x554 (and $x467 $x295)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x323 (and $x47 $x554)))
 (let (($x680 (and $x695 $x323)))
 (let (($x824 (= ?x608 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x516 (and $x824 $x680)))
 (let (($x380 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x136 (and $x380 $x516)))
 (let (($x697 (and $x695 $x136)))
 (let (($x763 (= ?x68 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x795 (and $x763 $x697)))
 (let (($x727 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x173 (and $x727 $x795)))
 (let (($x39 (and $x695 $x173)))
 (let (($x754 (= ?x324 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x385 (and $x754 $x39)))
 (let (($x381 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x890 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x123 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x890 $x381)))))))
 (let (($x291 (bvugt ?x689 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x794)))
 (let (($x566 (=> (bvule ?x689 (bvsub (bvadd ?x689 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x291)))))))
 (let (($x528 (bvugt ?x548 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x734 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x651)))
 (let (($x127 (=> (bvule ?x548 (bvsub (bvadd ?x548 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x734 $x528)))))))
 (let (($x62 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x605 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x237 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x605)))
 (let (($x558 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x237 $x62)))))))
 (let (($x475 (and $x558 $x127)))
 (let (($x203 (and $x475 $x566)))
 (let (($x97 (and $x203 $x123)))
 (let (($x533 (and $x97 $x385)))
 (let (($x807 (=> $x533 $x702)))
 (not $x807))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 241 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x584 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x670 (bvmul (_ bv4294967295 32) ?x584)))
 (let ((?x813 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x670)))
 (let ((?x395 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x523 (concat ?x395 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x452 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x159 (bvadd ?x452 (_ bv3 32))))
 (let ((?x290 (concat (select input.dst.llvm-mem ?x159) (concat ?x102 ?x523))))
 (let ((?x828 (bvmul (_ bv4294967295 32) ?x290)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x357 (concat ?x43 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x794 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x532 (bvadd ?x794 (_ bv3 32))))
 (let ((?x504 (concat (select input.dst.llvm-mem ?x532) (concat ?x108 ?x357))))
 (let ((?x711 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x258 (concat ?x711 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x621 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x237 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x767 (bvadd ?x237 (_ bv3 32))))
 (let ((?x94 (concat (select input.dst.llvm-mem ?x767) (concat ?x621 ?x258))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x514 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x187)))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x514)))
 (let ((?x111 (bvadd (bvadd (bvadd ?x243 ?x94) ?x504) ?x828)))
 (let (($x160 (= ?x111 ?x813)))
 (let (($x691 (= $x160 true)))
 (let (($x474 (= $x691 true)))
 (let ((?x166 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x742 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x11 (concat ?x742 (concat ?x73 (concat ?x234 ?x166)))))
 (let (($x657 (= ?x11 input.dst.llvm-%m)))
 (let (($x129 (= $x657 true)))
 (let (($x547 (= $x129 true)))
 (let (($x263 (= input.dst.llvm-%m ?x11)))
 (let ((?x484 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x204 (= (_ bv0 32) ?x484)))
 (let ((?x699 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x565 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x699)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x128 $x565)))
 (let (($x675 (and $x253 $x204)))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x581 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x837 (concat (select input.dst.llvm-mem (bvadd ?x581 (_ bv1 32))) (select input.dst.llvm-mem ?x581))))
 (let ((?x827 (concat (select input.dst.llvm-mem (bvadd ?x581 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x581 (_ bv2 32))) ?x837))))
 (let ((?x25 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x853 (bvuge ?x25 (_ bv1 32))))
 (=> $x853 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x827))))))))
 ))
 (let (($x829 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x861 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x25 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x853 (bvuge ?x25 (_ bv1 32))))
 (= $x853 (bvuge ?x861 (_ bv1 32)))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x248 (= false false)))
 (let ((?x25 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (= ?x25 (_ bv0 32))))
 (=> $x439 $x248)))))
 ))
 (let (($x661 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (= ?x25 (_ bv0 32))))
 (= $x439 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x510 (and $x661 $x303)))
 (let (($x308 (and $x510 $x829)))
 (let (($x168 (and $x308 $x99)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= (bvand ?x452 (_ bv4294967292 32)) ?x452)))
 (let (($x785 (= (bvand ?x794 (_ bv4294967292 32)) ?x794)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x794 (bvsub ?x794 (_ bv4 32))) (bvult ?x794 (bvsub ?x794 (_ bv4 32))))))
 (let (($x847 (and true $x114)))
 (let (($x620 (= (bvand ?x237 (_ bv4294967292 32)) ?x237)))
 (let (($x810 (and $x620 $x847)))
 (let (($x832 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x452 (bvsub ?x452 (_ bv8 32))) (bvult ?x452 (bvsub ?x452 (_ bv8 32))))))
 (let (($x758 (and (and (and true $x832) $x810) $x785)))
 (let (($x274 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x267 (and true $x274)))
 (let (($x761 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x663 (and $x761 $x267)))
 (let (($x546 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x237 (bvsub ?x237 (_ bv12 32))) (bvult ?x237 (bvsub ?x237 (_ bv12 32))))))
 (let (($x857 (and (and (and true $x761) $x546) $x663)))
 (let (($x130 (and (and (and (and (and (and $x857 $x758) $x216) $x312) $x168) $x675) $x263)))
 (let (($x681 (= $x130 true)))
 (let (($x218 (= $x681 true)))
 (let (($x745 (= $x218 true)))
 (let (($x124 (= $x857 true)))
 (let (($x743 (= $x124 true)))
 (let (($x576 (= $x743 true)))
 (let (($x615 (and $x758 $x216)))
 (let (($x774 (= $x615 true)))
 (let (($x171 (= $x774 true)))
 (let (($x741 (= $x171 true)))
 (let (($x241 (and $x741 $x576)))
 (let (($x488 (and $x241 $x745)))
 (let (($x572 (and $x488 $x547)))
 (let ((?x236 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x236 (_ bv1 32))))
 (let ((?x811 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x796 (bvuge ?x811 (_ bv1 32))))
 (let (($x5 (and $x796 $x225)))
 (let ((?x222 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (= ?x222 (_ bv0 32))))
 (let (($x63 (and $x809 $x5)))
 (let ((?x422 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x601 (bvuge ?x422 (_ bv1 32))))
 (let (($x347 (and $x601 $x63)))
 (let (($x158 (and $x347 $x572)))
 (let ((?x844 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x466 (= ?x844 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x240 (=> $x601 $x466)))
 (let (($x143 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x96 (= $x601 $x143)))
 (let (($x248 (= false false)))
 (let (($x725 (= ?x422 (_ bv0 32))))
 (let (($x88 (=> $x725 $x248)))
 (let (($x353 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x50 (= $x725 $x353)))
 (let (($x888 (and $x50 $x88)))
 (let (($x835 (and $x888 $x96)))
 (let (($x797 (and $x835 $x240)))
 (let (($x672 (and $x797 $x158)))
 (let ((?x856 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x283 (= ?x856 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x787 (bvuge ?x222 (_ bv1 32))))
 (let (($x325 (=> $x787 $x283)))
 (let (($x147 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x330 (= $x787 $x147)))
 (let (($x538 (=> $x809 $x248)))
 (let (($x100 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x410 (= $x809 $x100)))
 (let (($x213 (and $x410 $x538)))
 (let (($x70 (and $x213 $x330)))
 (let (($x34 (and $x70 $x325)))
 (let (($x843 (and $x34 $x672)))
 (let (($x886 (= ?x584 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x341 (=> $x796 $x886)))
 (let (($x22 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x600 (= $x796 $x22)))
 (let (($x387 (= ?x811 (_ bv0 32))))
 (let (($x562 (=> $x387 $x248)))
 (let (($x155 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x477 (= $x387 $x155)))
 (let (($x817 (and $x477 $x562)))
 (let (($x335 (and $x817 $x600)))
 (let (($x113 (and $x335 $x341)))
 (let (($x207 (and $x113 $x843)))
 (let ((?x193 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x407 (= ?x193 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x7 (=> $x225 $x407)))
 (let (($x409 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x430 (= $x225 $x409)))
 (let (($x433 (= ?x236 (_ bv0 32))))
 (let (($x87 (=> $x433 $x248)))
 (let (($x300 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x192 (= $x433 $x300)))
 (let (($x261 (and $x192 $x87)))
 (let (($x288 (and $x261 $x430)))
 (let (($x414 (and $x288 $x7)))
 (let (($x37 (and $x414 $x207)))
 (let (($x884 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x623 (and $x884 $x37)))
 (let (($x304 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x757 (and $x304 $x623)))
 (let (($x10 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x560 (and $x10 $x757)))
 (let (($x490 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x331 (and $x490 $x560)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x92 (and $x115 $x331)))
 (let (($x41 (and $x248 $x92)))
 (let (($x93 (= ?x844 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x268 (and $x93 $x41)))
 (let (($x776 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x355 (and $x776 $x268)))
 (let (($x487 (and $x248 $x355)))
 (let (($x684 (= ?x856 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x189 (and $x684 $x487)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x521 (and $x75 $x189)))
 (let (($x848 (and $x248 $x521)))
 (let (($x716 (= ?x584 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x685 (and $x716 $x848)))
 (let (($x467 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x382 (and $x467 $x685)))
 (let (($x637 (and $x248 $x382)))
 (let (($x47 (= ?x193 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x820 (and $x47 $x637)))
 (let (($x394 (bvugt ?x794 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x532)))
 (let (($x754 (=> (bvule ?x794 (bvsub (bvadd ?x794 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x176 $x394)))))))
 (let (($x180 (bvugt ?x452 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x463 (=> (bvule ?x452 (bvsub (bvadd ?x452 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x297 $x180)))))))
 (let (($x339 (bvugt ?x237 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x746 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x767)))
 (let (($x585 (=> (bvule ?x237 (bvsub (bvadd ?x237 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x746 $x339)))))))
 (let (($x423 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x548 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x548)))
 (let (($x721 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x423)))))))
 (let (($x318 (and $x721 $x585)))
 (let (($x750 (and $x318 $x463)))
 (let (($x255 (and $x750 $x754)))
 (let (($x350 (and $x255 $x820)))
 (let (($x775 (=> $x350 $x474)))
 (not $x775)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x584 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x670 (bvmul (_ bv4294967295 32) ?x584)))
 (let ((?x813 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x670)))
 (let ((?x395 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x523 (concat ?x395 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x452 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x159 (bvadd ?x452 (_ bv3 32))))
 (let ((?x290 (concat (select input.dst.llvm-mem ?x159) (concat ?x102 ?x523))))
 (let ((?x828 (bvmul (_ bv4294967295 32) ?x290)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x357 (concat ?x43 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x794 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x532 (bvadd ?x794 (_ bv3 32))))
 (let ((?x504 (concat (select input.dst.llvm-mem ?x532) (concat ?x108 ?x357))))
 (let ((?x711 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x258 (concat ?x711 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x621 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x237 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x767 (bvadd ?x237 (_ bv3 32))))
 (let ((?x94 (concat (select input.dst.llvm-mem ?x767) (concat ?x621 ?x258))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x514 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x187)))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x514)))
 (let ((?x111 (bvadd (bvadd (bvadd ?x243 ?x94) ?x504) ?x828)))
 (let (($x160 (= ?x111 ?x813)))
 (let (($x691 (= $x160 true)))
 (let (($x474 (= $x691 true)))
 (let ((?x166 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x742 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x11 (concat ?x742 (concat ?x73 (concat ?x234 ?x166)))))
 (let (($x657 (= ?x11 input.dst.llvm-%m)))
 (let (($x129 (= $x657 true)))
 (let (($x547 (= $x129 true)))
 (let (($x263 (= input.dst.llvm-%m ?x11)))
 (let ((?x484 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x204 (= (_ bv0 32) ?x484)))
 (let ((?x699 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x565 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x699)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x128 $x565)))
 (let (($x675 (and $x253 $x204)))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x581 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x837 (concat (select input.dst.llvm-mem (bvadd ?x581 (_ bv1 32))) (select input.dst.llvm-mem ?x581))))
 (let ((?x827 (concat (select input.dst.llvm-mem (bvadd ?x581 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x581 (_ bv2 32))) ?x837))))
 (let ((?x25 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x853 (bvuge ?x25 (_ bv1 32))))
 (=> $x853 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x827))))))))
 ))
 (let (($x829 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x861 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x25 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x853 (bvuge ?x25 (_ bv1 32))))
 (= $x853 (bvuge ?x861 (_ bv1 32)))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x248 (= false false)))
 (let ((?x25 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (= ?x25 (_ bv0 32))))
 (=> $x439 $x248)))))
 ))
 (let (($x661 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (= ?x25 (_ bv0 32))))
 (= $x439 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x510 (and $x661 $x303)))
 (let (($x308 (and $x510 $x829)))
 (let (($x168 (and $x308 $x99)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= (bvand ?x452 (_ bv4294967292 32)) ?x452)))
 (let (($x785 (= (bvand ?x794 (_ bv4294967292 32)) ?x794)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x794 (bvsub ?x794 (_ bv4 32))) (bvult ?x794 (bvsub ?x794 (_ bv4 32))))))
 (let (($x847 (and true $x114)))
 (let (($x620 (= (bvand ?x237 (_ bv4294967292 32)) ?x237)))
 (let (($x810 (and $x620 $x847)))
 (let (($x832 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x452 (bvsub ?x452 (_ bv8 32))) (bvult ?x452 (bvsub ?x452 (_ bv8 32))))))
 (let (($x758 (and (and (and true $x832) $x810) $x785)))
 (let (($x274 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x267 (and true $x274)))
 (let (($x761 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x663 (and $x761 $x267)))
 (let (($x546 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x237 (bvsub ?x237 (_ bv12 32))) (bvult ?x237 (bvsub ?x237 (_ bv12 32))))))
 (let (($x857 (and (and (and true $x761) $x546) $x663)))
 (let (($x130 (and (and (and (and (and (and $x857 $x758) $x216) $x312) $x168) $x675) $x263)))
 (let (($x681 (= $x130 true)))
 (let (($x218 (= $x681 true)))
 (let (($x745 (= $x218 true)))
 (let (($x124 (= $x857 true)))
 (let (($x743 (= $x124 true)))
 (let (($x576 (= $x743 true)))
 (let (($x615 (and $x758 $x216)))
 (let (($x774 (= $x615 true)))
 (let (($x171 (= $x774 true)))
 (let (($x741 (= $x171 true)))
 (let (($x241 (and $x741 $x576)))
 (let (($x488 (and $x241 $x745)))
 (let (($x572 (and $x488 $x547)))
 (let ((?x236 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x236 (_ bv1 32))))
 (let ((?x811 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x796 (bvuge ?x811 (_ bv1 32))))
 (let (($x5 (and $x796 $x225)))
 (let ((?x222 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (= ?x222 (_ bv0 32))))
 (let (($x63 (and $x809 $x5)))
 (let ((?x422 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x601 (bvuge ?x422 (_ bv1 32))))
 (let (($x347 (and $x601 $x63)))
 (let (($x158 (and $x347 $x572)))
 (let ((?x844 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x466 (= ?x844 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x240 (=> $x601 $x466)))
 (let (($x143 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x96 (= $x601 $x143)))
 (let (($x248 (= false false)))
 (let (($x725 (= ?x422 (_ bv0 32))))
 (let (($x88 (=> $x725 $x248)))
 (let (($x353 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x50 (= $x725 $x353)))
 (let (($x888 (and $x50 $x88)))
 (let (($x835 (and $x888 $x96)))
 (let (($x797 (and $x835 $x240)))
 (let (($x672 (and $x797 $x158)))
 (let ((?x856 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x283 (= ?x856 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x787 (bvuge ?x222 (_ bv1 32))))
 (let (($x325 (=> $x787 $x283)))
 (let (($x147 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x330 (= $x787 $x147)))
 (let (($x538 (=> $x809 $x248)))
 (let (($x100 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x410 (= $x809 $x100)))
 (let (($x213 (and $x410 $x538)))
 (let (($x70 (and $x213 $x330)))
 (let (($x34 (and $x70 $x325)))
 (let (($x843 (and $x34 $x672)))
 (let (($x886 (= ?x584 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x341 (=> $x796 $x886)))
 (let (($x22 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x600 (= $x796 $x22)))
 (let (($x387 (= ?x811 (_ bv0 32))))
 (let (($x562 (=> $x387 $x248)))
 (let (($x155 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x477 (= $x387 $x155)))
 (let (($x817 (and $x477 $x562)))
 (let (($x335 (and $x817 $x600)))
 (let (($x113 (and $x335 $x341)))
 (let (($x207 (and $x113 $x843)))
 (let ((?x193 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x407 (= ?x193 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x7 (=> $x225 $x407)))
 (let (($x409 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x430 (= $x225 $x409)))
 (let (($x433 (= ?x236 (_ bv0 32))))
 (let (($x87 (=> $x433 $x248)))
 (let (($x300 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x192 (= $x433 $x300)))
 (let (($x261 (and $x192 $x87)))
 (let (($x288 (and $x261 $x430)))
 (let (($x414 (and $x288 $x7)))
 (let (($x37 (and $x414 $x207)))
 (let (($x884 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x623 (and $x884 $x37)))
 (let (($x304 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x757 (and $x304 $x623)))
 (let (($x10 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x560 (and $x10 $x757)))
 (let (($x490 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x331 (and $x490 $x560)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x92 (and $x115 $x331)))
 (let (($x41 (and $x248 $x92)))
 (let (($x93 (= ?x844 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x268 (and $x93 $x41)))
 (let (($x776 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x355 (and $x776 $x268)))
 (let (($x487 (and $x248 $x355)))
 (let (($x684 (= ?x856 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x189 (and $x684 $x487)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x521 (and $x75 $x189)))
 (let (($x848 (and $x248 $x521)))
 (let (($x716 (= ?x584 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x685 (and $x716 $x848)))
 (let (($x467 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x382 (and $x467 $x685)))
 (let (($x637 (and $x248 $x382)))
 (let (($x47 (= ?x193 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x820 (and $x47 $x637)))
 (let (($x394 (bvugt ?x794 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x532)))
 (let (($x754 (=> (bvule ?x794 (bvsub (bvadd ?x794 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x176 $x394)))))))
 (let (($x180 (bvugt ?x452 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x463 (=> (bvule ?x452 (bvsub (bvadd ?x452 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x297 $x180)))))))
 (let (($x339 (bvugt ?x237 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x746 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x767)))
 (let (($x585 (=> (bvule ?x237 (bvsub (bvadd ?x237 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x746 $x339)))))))
 (let (($x423 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x548 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x548)))
 (let (($x721 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x423)))))))
 (let (($x318 (and $x721 $x585)))
 (let (($x750 (and $x318 $x463)))
 (let (($x255 (and $x750 $x754)))
 (let (($x350 (and $x255 $x820)))
 (let (($x775 (=> $x350 $x474)))
 (not $x775)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x884 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x342 (bvmul (_ bv4294967295 32) ?x884)))
 (let ((?x562 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x587 (bvadd ?x562 ?x342)))
 (let ((?x351 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x76 (concat ?x351 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x291 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x294 (bvadd ?x291 (_ bv3 32))))
 (let ((?x687 (concat (select input.dst.llvm-mem ?x294) (concat ?x28 ?x76))))
 (let ((?x799 (bvmul (_ bv4294967295 32) ?x687)))
 (let ((?x456 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x569 (concat ?x456 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x509 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x310 (bvadd ?x159 (_ bv3 32))))
 (let ((?x579 (concat (select input.dst.llvm-mem ?x310) (concat ?x509 ?x569))))
 (let ((?x415 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x604 (concat ?x415 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x220 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x141 (bvadd ?x220 (_ bv3 32))))
 (let ((?x578 (concat (select input.dst.llvm-mem ?x141) (concat ?x230 ?x604))))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x567)))
 (let ((?x520 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x23)))
 (let ((?x778 (bvadd (bvadd (bvadd ?x520 ?x578) ?x579) ?x799)))
 (let (($x449 (= ?x778 ?x587)))
 (let (($x594 (= $x449 true)))
 (let (($x421 (= $x594 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x446 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x281 (concat ?x390 (concat ?x239 (concat ?x446 ?x29)))))
 (let (($x665 (= ?x281 input.dst.llvm-%m)))
 (let (($x45 (= $x665 true)))
 (let (($x122 (= $x45 true)))
 (let (($x864 (= input.dst.llvm-%m ?x281)))
 (let ((?x644 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x671 (= (_ bv0 32) ?x644)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x769 (and $x289 $x131)))
 (let (($x196 (and $x769 $x671)))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x445 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv1 32))) (select input.dst.llvm-mem ?x445))))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv2 32))) ?x9))))
 (let ((?x404 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (bvuge ?x404 (_ bv1 32))))
 (=> $x447 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x460))))))))
 ))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x841 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x404 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (bvuge ?x404 (_ bv1 32))))
 (= $x447 (bvuge ?x841 (_ bv1 32)))))))
 ))
 (let (($x537 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x844 (= false false)))
 (let ((?x404 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (= ?x404 (_ bv0 32))))
 (=> $x679 $x844)))))
 ))
 (let (($x830 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x404 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (= ?x404 (_ bv0 32))))
 (= $x679 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x792 (and $x830 $x537)))
 (let (($x295 (and $x792 $x526)))
 (let (($x443 (and $x295 $x298)))
 (let (($x488 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x712 (= (bvand ?x159 (_ bv4294967292 32)) ?x159)))
 (let (($x852 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x159 (bvsub ?x159 (_ bv4 32))) (bvult ?x159 (bvsub ?x159 (_ bv4 32))))))
 (let (($x472 (and true $x852)))
 (let (($x554 (= (bvand ?x220 (_ bv4294967292 32)) ?x220)))
 (let (($x246 (and $x554 $x472)))
 (let (($x829 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv8 32))) (bvult ?x291 (bvsub ?x291 (_ bv8 32))))))
 (let (($x827 (and (and (and true $x829) $x246) $x712)))
 (let (($x738 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x234 (and true $x738)))
 (let (($x565 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x166 (and $x565 $x234)))
 (let (($x551 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x220 (bvsub ?x220 (_ bv12 32))) (bvult ?x220 (bvsub ?x220 (_ bv12 32))))))
 (let (($x11 (and (and (and true $x565) $x551) $x166)))
 (let (($x375 (and (and (and (and (and (and $x11 $x827) $x121) $x488) $x443) $x196) $x864)))
 (let (($x411 (= $x375 true)))
 (let (($x35 (= $x411 true)))
 (let (($x764 (= $x35 true)))
 (let (($x263 (= $x11 true)))
 (let (($x130 (= $x263 true)))
 (let (($x681 (= $x130 true)))
 (let (($x99 (and $x827 $x121)))
 (let (($x168 (= $x99 true)))
 (let (($x710 (= $x168 true)))
 (let (($x128 (= $x710 true)))
 (let (($x218 (and $x128 $x681)))
 (let (($x333 (and $x218 $x764)))
 (let (($x702 (and $x333 $x122)))
 (let ((?x330 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x330 (_ bv0 32))))
 (let ((?x347 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x347 (_ bv1 32))))
 (let (($x661 (and $x194 $x70)))
 (let ((?x774 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x774 (_ bv0 32))))
 (let (($x889 (and $x171 $x661)))
 (let ((?x733 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x733 (_ bv1 32))))
 (let (($x303 (and $x438 $x889)))
 (let (($x807 (and $x303 $x702)))
 (let (($x861 (= ?x562 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x634 (=> $x438 $x861)))
 (let (($x352 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x630 (= $x438 $x352)))
 (let (($x844 (= false false)))
 (let (($x726 (= ?x733 (_ bv0 32))))
 (let (($x312 (=> $x726 $x844)))
 (let (($x576 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x603 (= $x726 $x576)))
 (let (($x369 (and $x603 $x312)))
 (let (($x570 (and $x369 $x630)))
 (let (($x617 (and $x570 $x634)))
 (let (($x269 (and $x617 $x807)))
 (let ((?x430 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x508 (= ?x430 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x546 (bvuge ?x774 (_ bv1 32))))
 (let (($x793 (=> $x546 $x508)))
 (let (($x822 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x593 (= $x546 $x822)))
 (let (($x704 (=> $x171 $x844)))
 (let (($x216 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x741 (= $x171 $x216)))
 (let (($x761 (and $x741 $x704)))
 (let (($x536 (and $x761 $x593)))
 (let (($x337 (and $x536 $x793)))
 (let (($x120 (and $x337 $x269)))
 (let (($x293 (= ?x884 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x114 (=> $x194 $x293)))
 (let (($x620 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x208 (= $x194 $x620)))
 (let (($x825 (= ?x347 (_ bv0 32))))
 (let (($x839 (=> $x825 $x844)))
 (let (($x5 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x849 (= $x825 $x5)))
 (let (($x700 (and $x849 $x839)))
 (let (($x307 (and $x700 $x208)))
 (let (($x847 (and $x307 $x114)))
 (let (($x465 (and $x847 $x120)))
 (let ((?x184 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x888 (= ?x184 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x353 (bvuge ?x330 (_ bv1 32))))
 (let (($x601 (=> $x353 $x888)))
 (let (($x755 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x50 (= $x353 $x755)))
 (let (($x283 (=> $x70 $x844)))
 (let (($x787 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x619 (= $x70 $x787)))
 (let (($x325 (and $x619 $x283)))
 (let (($x88 (and $x325 $x50)))
 (let (($x143 (and $x88 $x601)))
 (let (($x33 (and $x143 $x465)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x38 (and $x222 $x33)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x419 (and $x113 $x38)))
 (let (($x886 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x707 (and $x886 $x419)))
 (let (($x335 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x71 (and $x335 $x707)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x713 (and $x22 $x71)))
 (let (($x545 (and $x844 $x713)))
 (let (($x817 (= ?x562 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x262 (and $x817 $x545)))
 (let (($x407 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x462 (and $x407 $x262)))
 (let (($x780 (and $x844 $x462)))
 (let (($x288 (= ?x430 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x486 (and $x288 $x780)))
 (let (($x433 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x393 (and $x433 $x486)))
 (let (($x348 (and $x844 $x393)))
 (let (($x542 (= ?x884 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x789 (and $x542 $x348)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x784 (and $x93 $x789)))
 (let (($x402 (and $x844 $x784)))
 (let (($x776 (= ?x184 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x590 (and $x776 $x402)))
 (let (($x97 (bvugt ?x159 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x310)))
 (let (($x47 (=> (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x97)))))))
 (let (($x203 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x566 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x294)))
 (let (($x381 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x566 $x203)))))))
 (let (($x475 (bvugt ?x220 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x44 (=> (bvule ?x220 (bvsub (bvadd ?x220 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x475)))))))
 (let (($x548 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x528 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x548)))))))
 (let (($x689 (and $x528 $x44)))
 (let (($x6 (and $x689 $x381)))
 (let (($x612 (and $x6 $x47)))
 (let (($x575 (and $x612 $x590)))
 (let (($x379 (=> $x575 $x421)))
 (not $x379)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x884 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x342 (bvmul (_ bv4294967295 32) ?x884)))
 (let ((?x562 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x587 (bvadd ?x562 ?x342)))
 (let ((?x351 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x76 (concat ?x351 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x291 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x294 (bvadd ?x291 (_ bv3 32))))
 (let ((?x687 (concat (select input.dst.llvm-mem ?x294) (concat ?x28 ?x76))))
 (let ((?x799 (bvmul (_ bv4294967295 32) ?x687)))
 (let ((?x456 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x569 (concat ?x456 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x509 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x310 (bvadd ?x159 (_ bv3 32))))
 (let ((?x579 (concat (select input.dst.llvm-mem ?x310) (concat ?x509 ?x569))))
 (let ((?x415 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x604 (concat ?x415 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x220 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x141 (bvadd ?x220 (_ bv3 32))))
 (let ((?x578 (concat (select input.dst.llvm-mem ?x141) (concat ?x230 ?x604))))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x567)))
 (let ((?x520 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x23)))
 (let ((?x778 (bvadd (bvadd (bvadd ?x520 ?x578) ?x579) ?x799)))
 (let (($x449 (= ?x778 ?x587)))
 (let (($x594 (= $x449 true)))
 (let (($x421 (= $x594 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x446 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x281 (concat ?x390 (concat ?x239 (concat ?x446 ?x29)))))
 (let (($x665 (= ?x281 input.dst.llvm-%m)))
 (let (($x45 (= $x665 true)))
 (let (($x122 (= $x45 true)))
 (let (($x864 (= input.dst.llvm-%m ?x281)))
 (let ((?x644 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x671 (= (_ bv0 32) ?x644)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x769 (and $x289 $x131)))
 (let (($x196 (and $x769 $x671)))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x445 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv1 32))) (select input.dst.llvm-mem ?x445))))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv2 32))) ?x9))))
 (let ((?x404 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (bvuge ?x404 (_ bv1 32))))
 (=> $x447 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x460))))))))
 ))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x841 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x404 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (bvuge ?x404 (_ bv1 32))))
 (= $x447 (bvuge ?x841 (_ bv1 32)))))))
 ))
 (let (($x537 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x844 (= false false)))
 (let ((?x404 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (= ?x404 (_ bv0 32))))
 (=> $x679 $x844)))))
 ))
 (let (($x830 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x404 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x679 (= ?x404 (_ bv0 32))))
 (= $x679 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x792 (and $x830 $x537)))
 (let (($x295 (and $x792 $x526)))
 (let (($x443 (and $x295 $x298)))
 (let (($x488 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x712 (= (bvand ?x159 (_ bv4294967292 32)) ?x159)))
 (let (($x852 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x159 (bvsub ?x159 (_ bv4 32))) (bvult ?x159 (bvsub ?x159 (_ bv4 32))))))
 (let (($x472 (and true $x852)))
 (let (($x554 (= (bvand ?x220 (_ bv4294967292 32)) ?x220)))
 (let (($x246 (and $x554 $x472)))
 (let (($x829 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv8 32))) (bvult ?x291 (bvsub ?x291 (_ bv8 32))))))
 (let (($x827 (and (and (and true $x829) $x246) $x712)))
 (let (($x738 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x234 (and true $x738)))
 (let (($x565 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x166 (and $x565 $x234)))
 (let (($x551 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x220 (bvsub ?x220 (_ bv12 32))) (bvult ?x220 (bvsub ?x220 (_ bv12 32))))))
 (let (($x11 (and (and (and true $x565) $x551) $x166)))
 (let (($x375 (and (and (and (and (and (and $x11 $x827) $x121) $x488) $x443) $x196) $x864)))
 (let (($x411 (= $x375 true)))
 (let (($x35 (= $x411 true)))
 (let (($x764 (= $x35 true)))
 (let (($x263 (= $x11 true)))
 (let (($x130 (= $x263 true)))
 (let (($x681 (= $x130 true)))
 (let (($x99 (and $x827 $x121)))
 (let (($x168 (= $x99 true)))
 (let (($x710 (= $x168 true)))
 (let (($x128 (= $x710 true)))
 (let (($x218 (and $x128 $x681)))
 (let (($x333 (and $x218 $x764)))
 (let (($x702 (and $x333 $x122)))
 (let ((?x330 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x330 (_ bv0 32))))
 (let ((?x347 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x347 (_ bv1 32))))
 (let (($x661 (and $x194 $x70)))
 (let ((?x774 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x774 (_ bv0 32))))
 (let (($x889 (and $x171 $x661)))
 (let ((?x733 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x733 (_ bv1 32))))
 (let (($x303 (and $x438 $x889)))
 (let (($x807 (and $x303 $x702)))
 (let (($x861 (= ?x562 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x634 (=> $x438 $x861)))
 (let (($x352 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x630 (= $x438 $x352)))
 (let (($x844 (= false false)))
 (let (($x726 (= ?x733 (_ bv0 32))))
 (let (($x312 (=> $x726 $x844)))
 (let (($x576 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x603 (= $x726 $x576)))
 (let (($x369 (and $x603 $x312)))
 (let (($x570 (and $x369 $x630)))
 (let (($x617 (and $x570 $x634)))
 (let (($x269 (and $x617 $x807)))
 (let ((?x430 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x508 (= ?x430 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x546 (bvuge ?x774 (_ bv1 32))))
 (let (($x793 (=> $x546 $x508)))
 (let (($x822 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x593 (= $x546 $x822)))
 (let (($x704 (=> $x171 $x844)))
 (let (($x216 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x741 (= $x171 $x216)))
 (let (($x761 (and $x741 $x704)))
 (let (($x536 (and $x761 $x593)))
 (let (($x337 (and $x536 $x793)))
 (let (($x120 (and $x337 $x269)))
 (let (($x293 (= ?x884 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x114 (=> $x194 $x293)))
 (let (($x620 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x208 (= $x194 $x620)))
 (let (($x825 (= ?x347 (_ bv0 32))))
 (let (($x839 (=> $x825 $x844)))
 (let (($x5 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x849 (= $x825 $x5)))
 (let (($x700 (and $x849 $x839)))
 (let (($x307 (and $x700 $x208)))
 (let (($x847 (and $x307 $x114)))
 (let (($x465 (and $x847 $x120)))
 (let ((?x184 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x888 (= ?x184 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x353 (bvuge ?x330 (_ bv1 32))))
 (let (($x601 (=> $x353 $x888)))
 (let (($x755 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x50 (= $x353 $x755)))
 (let (($x283 (=> $x70 $x844)))
 (let (($x787 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x619 (= $x70 $x787)))
 (let (($x325 (and $x619 $x283)))
 (let (($x88 (and $x325 $x50)))
 (let (($x143 (and $x88 $x601)))
 (let (($x33 (and $x143 $x465)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x38 (and $x222 $x33)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x419 (and $x113 $x38)))
 (let (($x886 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x707 (and $x886 $x419)))
 (let (($x335 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x71 (and $x335 $x707)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x713 (and $x22 $x71)))
 (let (($x545 (and $x844 $x713)))
 (let (($x817 (= ?x562 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x262 (and $x817 $x545)))
 (let (($x407 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x462 (and $x407 $x262)))
 (let (($x780 (and $x844 $x462)))
 (let (($x288 (= ?x430 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x486 (and $x288 $x780)))
 (let (($x433 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x393 (and $x433 $x486)))
 (let (($x348 (and $x844 $x393)))
 (let (($x542 (= ?x884 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x789 (and $x542 $x348)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x784 (and $x93 $x789)))
 (let (($x402 (and $x844 $x784)))
 (let (($x776 (= ?x184 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x590 (and $x776 $x402)))
 (let (($x97 (bvugt ?x159 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x310)))
 (let (($x47 (=> (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x97)))))))
 (let (($x203 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x566 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x294)))
 (let (($x381 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x566 $x203)))))))
 (let (($x475 (bvugt ?x220 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x44 (=> (bvule ?x220 (bvsub (bvadd ?x220 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x475)))))))
 (let (($x548 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x528 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x548)))))))
 (let (($x689 (and $x528 $x44)))
 (let (($x6 (and $x689 $x381)))
 (let (($x612 (and $x6 $x47)))
 (let (($x575 (and $x612 $x590)))
 (let (($x379 (=> $x575 $x421)))
 (not $x379)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x613 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x839 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x413 (bvadd ?x839 ?x613)))
 (let ((?x616 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x362 (concat ?x616 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x835 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x180 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x247 (bvadd ?x180 (_ bv3 32))))
 (let ((?x832 (concat (select input.dst.llvm-mem ?x247) (concat ?x835 ?x362))))
 (let ((?x206 (bvmul (_ bv4294967295 32) ?x832)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x498 (concat ?x226 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x294 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x324 (bvadd ?x294 (_ bv3 32))))
 (let ((?x170 (concat (select input.dst.llvm-mem ?x324) (concat ?x439 ?x498))))
 (let ((?x697 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x385 (concat ?x697 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x563 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x8 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x79 (bvadd ?x8 (_ bv3 32))))
 (let ((?x267 (concat (select input.dst.llvm-mem ?x79) (concat ?x563 ?x385))))
 (let ((?x516 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x516)))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x136)))
 (let ((?x809 (bvadd (bvadd (bvadd ?x223 ?x267) ?x170) ?x206)))
 (let (($x100 (= ?x809 ?x413)))
 (let (($x410 (= $x100 true)))
 (let (($x34 (= $x410 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x632 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x773 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x773 (concat ?x632 (concat ?x98 ?x108)))))
 (let (($x670 (= ?x102 input.dst.llvm-%m)))
 (let (($x813 (= $x670 true)))
 (let (($x160 (= $x813 true)))
 (let (($x806 (= input.dst.llvm-%m ?x102)))
 (let ((?x37 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x623 (= (_ bv0 32) ?x37)))
 (let ((?x672 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x843 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x672)))
 (let (($x572 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x572 $x843)))
 (let (($x370 (and $x207 $x623)))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x94))))
 (let ((?x300 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x300 (_ bv1 32))))
 (=> $x560 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x271))))))))
 ))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x300 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x300 (_ bv1 32))))
 (= $x560 (bvuge ?x387 (_ bv1 32)))))))
 ))
 (let (($x490 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x562 (= false false)))
 (let ((?x300 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (= ?x300 (_ bv0 32))))
 (=> $x192 $x562)))))
 ))
 (let (($x854 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x300 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (= ?x300 (_ bv0 32))))
 (= $x192 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x10 (and $x854 $x490)))
 (let (($x657 (and $x10 $x41)))
 (let (($x547 (and $x657 $x129)))
 (let (($x333 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (= (bvand ?x180 (_ bv4294967292 32)) ?x180)))
 (let (($x265 (= (bvand ?x294 (_ bv4294967292 32)) ?x294)))
 (let (($x863 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x294 (bvsub ?x294 (_ bv4 32))) (bvult ?x294 (bvsub ?x294 (_ bv4 32))))))
 (let (($x502 (and true $x863)))
 (let (($x268 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x82 (and $x268 $x502)))
 (let (($x526 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x180 (bvsub ?x180 (_ bv8 32))) (bvult ?x180 (bvsub ?x180 (_ bv8 32))))))
 (let (($x460 (and (and (and true $x526) $x82) $x265)))
 (let (($x327 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x446 (and true $x327)))
 (let (($x131 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x29 (and $x131 $x446)))
 (let (($x432 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv12 32))) (bvult ?x8 (bvsub ?x8 (_ bv12 32))))))
 (let (($x281 (and (and (and true $x131) $x432) $x29)))
 (let (($x821 (and (and (and (and (and (and $x281 $x460) $x224) $x333) $x547) $x370) $x806)))
 (let (($x828 (= $x821 true)))
 (let (($x290 (= $x828 true)))
 (let (($x111 (= $x290 true)))
 (let (($x864 (= $x281 true)))
 (let (($x375 (= $x864 true)))
 (let (($x411 (= $x375 true)))
 (let (($x298 (and $x460 $x224)))
 (let (($x443 (= $x298 true)))
 (let (($x264 (= $x443 true)))
 (let (($x289 (= $x264 true)))
 (let (($x35 (and $x289 $x411)))
 (let (($x753 (and $x35 $x111)))
 (let (($x691 (and $x753 $x160)))
 (let ((?x593 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x593 (_ bv1 32))))
 (let ((?x303 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x853 (= ?x303 (_ bv0 32))))
 (let (($x830 (and $x853 $x576)))
 (let ((?x168 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x168 (_ bv0 32))))
 (let (($x539 (and $x710 $x830)))
 (let ((?x818 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x818 (_ bv1 32))))
 (let (($x537 (and $x331 $x539)))
 (let (($x775 (and $x537 $x691)))
 (let (($x841 (= ?x839 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x639 (=> $x331 $x841)))
 (let (($x441 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x860 (= $x331 $x441)))
 (let (($x562 (= false false)))
 (let (($x842 (= ?x818 (_ bv0 32))))
 (let (($x488 (=> $x842 $x562)))
 (let (($x681 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x745 (= $x842 $x681)))
 (let (($x858 (and $x745 $x488)))
 (let (($x846 (and $x858 $x860)))
 (let (($x260 (and $x846 $x639)))
 (let (($x474 (and $x260 $x775)))
 (let ((?x50 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x693 (= ?x50 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x551 (bvuge ?x168 (_ bv1 32))))
 (let (($x376 (=> $x551 $x693)))
 (let (($x675 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x826 (= $x551 $x675)))
 (let (($x699 (=> $x710 $x562)))
 (let (($x121 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x128 (= $x710 $x121)))
 (let (($x565 (and $x128 $x699)))
 (let (($x742 (and $x565 $x826)))
 (let (($x73 (and $x742 $x376)))
 (let (($x770 (and $x73 $x474)))
 (let ((?x222 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x798 (= ?x222 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x581 (bvuge ?x303 (_ bv1 32))))
 (let (($x852 (=> $x581 $x798)))
 (let (($x554 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x302 (= $x581 $x554)))
 (let (($x284 (=> $x853 $x562)))
 (let (($x661 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x510 (= $x853 $x661)))
 (let (($x544 (and $x510 $x284)))
 (let (($x678 (and $x544 $x302)))
 (let (($x472 (and $x678 $x852)))
 (let (($x175 (and $x472 $x770)))
 (let (($x369 (= ?x613 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x438 (=> $x576 $x369)))
 (let (($x124 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x603 (= $x576 $x124)))
 (let (($x536 (= ?x593 (_ bv0 32))))
 (let (($x508 (=> $x536 $x562)))
 (let (($x546 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x53 (= $x536 $x546)))
 (let (($x793 (and $x53 $x508)))
 (let (($x312 (and $x793 $x603)))
 (let (($x352 (and $x312 $x438)))
 (let (($x14 (and $x352 $x175)))
 (let (($x774 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x652 (and $x774 $x14)))
 (let (($x847 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x496 (and $x847 $x652)))
 (let (($x293 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x485 (and $x293 $x496)))
 (let (($x307 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x116 (and $x307 $x485)))
 (let (($x620 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x85 (and $x620 $x116)))
 (let (($x68 (and $x562 $x85)))
 (let (($x700 (= ?x839 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x763 (and $x700 $x68)))
 (let (($x888 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x771 (and $x888 $x763)))
 (let (($x380 (and $x562 $x771)))
 (let (($x88 (= ?x50 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x32 (and $x88 $x380)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x648 (and $x70 $x32)))
 (let (($x106 (and $x562 $x648)))
 (let (($x147 (= ?x222 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x18 (and $x147 $x106)))
 (let (($x817 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x104 (and $x817 $x18)))
 (let (($x608 (and $x562 $x104)))
 (let (($x407 (= ?x613 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x529 (and $x407 $x608)))
 (let (($x255 (bvugt ?x294 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x754 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x324)))
 (let (($x776 (=> (bvule ?x294 (bvsub (bvadd ?x294 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x754 $x255)))))))
 (let (($x750 (bvugt ?x180 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x463 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x247)))
 (let (($x394 (=> (bvule ?x180 (bvsub (bvadd ?x180 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x463 $x750)))))))
 (let (($x318 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x585 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x297 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x585 $x318)))))))
 (let (($x513 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x339 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x513)))))))
 (let (($x452 (and $x339 $x297)))
 (let (($x890 (and $x452 $x394)))
 (let (($x824 (and $x890 $x776)))
 (let (($x323 (and $x824 $x529)))
 (let (($x885 (=> $x323 $x34)))
 (not $x885))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x613 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x839 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x413 (bvadd ?x839 ?x613)))
 (let ((?x616 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x362 (concat ?x616 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x835 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x180 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x247 (bvadd ?x180 (_ bv3 32))))
 (let ((?x832 (concat (select input.dst.llvm-mem ?x247) (concat ?x835 ?x362))))
 (let ((?x206 (bvmul (_ bv4294967295 32) ?x832)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x498 (concat ?x226 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x294 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x324 (bvadd ?x294 (_ bv3 32))))
 (let ((?x170 (concat (select input.dst.llvm-mem ?x324) (concat ?x439 ?x498))))
 (let ((?x697 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x385 (concat ?x697 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x563 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x8 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x79 (bvadd ?x8 (_ bv3 32))))
 (let ((?x267 (concat (select input.dst.llvm-mem ?x79) (concat ?x563 ?x385))))
 (let ((?x516 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x516)))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x136)))
 (let ((?x809 (bvadd (bvadd (bvadd ?x223 ?x267) ?x170) ?x206)))
 (let (($x100 (= ?x809 ?x413)))
 (let (($x410 (= $x100 true)))
 (let (($x34 (= $x410 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x632 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x773 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x773 (concat ?x632 (concat ?x98 ?x108)))))
 (let (($x670 (= ?x102 input.dst.llvm-%m)))
 (let (($x813 (= $x670 true)))
 (let (($x160 (= $x813 true)))
 (let (($x806 (= input.dst.llvm-%m ?x102)))
 (let ((?x37 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x623 (= (_ bv0 32) ?x37)))
 (let ((?x672 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x843 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x672)))
 (let (($x572 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x572 $x843)))
 (let (($x370 (and $x207 $x623)))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x94))))
 (let ((?x300 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x300 (_ bv1 32))))
 (=> $x560 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x271))))))))
 ))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x300 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x300 (_ bv1 32))))
 (= $x560 (bvuge ?x387 (_ bv1 32)))))))
 ))
 (let (($x490 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x562 (= false false)))
 (let ((?x300 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (= ?x300 (_ bv0 32))))
 (=> $x192 $x562)))))
 ))
 (let (($x854 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x300 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (= ?x300 (_ bv0 32))))
 (= $x192 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x10 (and $x854 $x490)))
 (let (($x657 (and $x10 $x41)))
 (let (($x547 (and $x657 $x129)))
 (let (($x333 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (= (bvand ?x180 (_ bv4294967292 32)) ?x180)))
 (let (($x265 (= (bvand ?x294 (_ bv4294967292 32)) ?x294)))
 (let (($x863 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x294 (bvsub ?x294 (_ bv4 32))) (bvult ?x294 (bvsub ?x294 (_ bv4 32))))))
 (let (($x502 (and true $x863)))
 (let (($x268 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x82 (and $x268 $x502)))
 (let (($x526 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x180 (bvsub ?x180 (_ bv8 32))) (bvult ?x180 (bvsub ?x180 (_ bv8 32))))))
 (let (($x460 (and (and (and true $x526) $x82) $x265)))
 (let (($x327 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x446 (and true $x327)))
 (let (($x131 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x29 (and $x131 $x446)))
 (let (($x432 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv12 32))) (bvult ?x8 (bvsub ?x8 (_ bv12 32))))))
 (let (($x281 (and (and (and true $x131) $x432) $x29)))
 (let (($x821 (and (and (and (and (and (and $x281 $x460) $x224) $x333) $x547) $x370) $x806)))
 (let (($x828 (= $x821 true)))
 (let (($x290 (= $x828 true)))
 (let (($x111 (= $x290 true)))
 (let (($x864 (= $x281 true)))
 (let (($x375 (= $x864 true)))
 (let (($x411 (= $x375 true)))
 (let (($x298 (and $x460 $x224)))
 (let (($x443 (= $x298 true)))
 (let (($x264 (= $x443 true)))
 (let (($x289 (= $x264 true)))
 (let (($x35 (and $x289 $x411)))
 (let (($x753 (and $x35 $x111)))
 (let (($x691 (and $x753 $x160)))
 (let ((?x593 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x593 (_ bv1 32))))
 (let ((?x303 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x853 (= ?x303 (_ bv0 32))))
 (let (($x830 (and $x853 $x576)))
 (let ((?x168 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x168 (_ bv0 32))))
 (let (($x539 (and $x710 $x830)))
 (let ((?x818 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x818 (_ bv1 32))))
 (let (($x537 (and $x331 $x539)))
 (let (($x775 (and $x537 $x691)))
 (let (($x841 (= ?x839 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x639 (=> $x331 $x841)))
 (let (($x441 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x860 (= $x331 $x441)))
 (let (($x562 (= false false)))
 (let (($x842 (= ?x818 (_ bv0 32))))
 (let (($x488 (=> $x842 $x562)))
 (let (($x681 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x745 (= $x842 $x681)))
 (let (($x858 (and $x745 $x488)))
 (let (($x846 (and $x858 $x860)))
 (let (($x260 (and $x846 $x639)))
 (let (($x474 (and $x260 $x775)))
 (let ((?x50 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x693 (= ?x50 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x551 (bvuge ?x168 (_ bv1 32))))
 (let (($x376 (=> $x551 $x693)))
 (let (($x675 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x826 (= $x551 $x675)))
 (let (($x699 (=> $x710 $x562)))
 (let (($x121 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x128 (= $x710 $x121)))
 (let (($x565 (and $x128 $x699)))
 (let (($x742 (and $x565 $x826)))
 (let (($x73 (and $x742 $x376)))
 (let (($x770 (and $x73 $x474)))
 (let ((?x222 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x798 (= ?x222 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x581 (bvuge ?x303 (_ bv1 32))))
 (let (($x852 (=> $x581 $x798)))
 (let (($x554 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x302 (= $x581 $x554)))
 (let (($x284 (=> $x853 $x562)))
 (let (($x661 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x510 (= $x853 $x661)))
 (let (($x544 (and $x510 $x284)))
 (let (($x678 (and $x544 $x302)))
 (let (($x472 (and $x678 $x852)))
 (let (($x175 (and $x472 $x770)))
 (let (($x369 (= ?x613 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x438 (=> $x576 $x369)))
 (let (($x124 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x603 (= $x576 $x124)))
 (let (($x536 (= ?x593 (_ bv0 32))))
 (let (($x508 (=> $x536 $x562)))
 (let (($x546 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x53 (= $x536 $x546)))
 (let (($x793 (and $x53 $x508)))
 (let (($x312 (and $x793 $x603)))
 (let (($x352 (and $x312 $x438)))
 (let (($x14 (and $x352 $x175)))
 (let (($x774 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x652 (and $x774 $x14)))
 (let (($x847 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x496 (and $x847 $x652)))
 (let (($x293 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x485 (and $x293 $x496)))
 (let (($x307 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x116 (and $x307 $x485)))
 (let (($x620 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x85 (and $x620 $x116)))
 (let (($x68 (and $x562 $x85)))
 (let (($x700 (= ?x839 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x763 (and $x700 $x68)))
 (let (($x888 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x771 (and $x888 $x763)))
 (let (($x380 (and $x562 $x771)))
 (let (($x88 (= ?x50 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x32 (and $x88 $x380)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x648 (and $x70 $x32)))
 (let (($x106 (and $x562 $x648)))
 (let (($x147 (= ?x222 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x18 (and $x147 $x106)))
 (let (($x817 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x104 (and $x817 $x18)))
 (let (($x608 (and $x562 $x104)))
 (let (($x407 (= ?x613 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x529 (and $x407 $x608)))
 (let (($x255 (bvugt ?x294 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x754 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x324)))
 (let (($x776 (=> (bvule ?x294 (bvsub (bvadd ?x294 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x754 $x255)))))))
 (let (($x750 (bvugt ?x180 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x463 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x247)))
 (let (($x394 (=> (bvule ?x180 (bvsub (bvadd ?x180 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x463 $x750)))))))
 (let (($x318 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x585 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x297 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x585 $x318)))))))
 (let (($x513 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x339 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x513)))))))
 (let (($x452 (and $x339 $x297)))
 (let (($x890 (and $x452 $x394)))
 (let (($x824 (and $x890 $x776)))
 (let (($x323 (and $x824 $x529)))
 (let (($x885 (=> $x323 $x34)))
 (not $x885))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 241 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x630 (concat ?x204 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x743 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x203 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x794 (bvadd ?x203 (_ bv3 32))))
 (let ((?x837 (concat (select input.dst.llvm-mem ?x794) (concat ?x743 ?x630))))
 (let ((?x308 (bvmul (_ bv4294967295 32) ?x837)))
 (let ((?x695 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x404 (concat ?x695 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x246 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x247 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x193 (bvadd ?x247 (_ bv3 32))))
 (let ((?x712 (concat (select input.dst.llvm-mem ?x193) (concat ?x246 ?x404))))
 (let ((?x801 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x834 (concat ?x801 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x418 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x513 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x651 (bvadd ?x513 (_ bv3 32))))
 (let ((?x166 (concat (select input.dst.llvm-mem ?x651) (concat ?x418 ?x834))))
 (let ((?x820 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x820)))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x212)))
 (let ((?x758 (bvadd (bvadd (bvadd ?x350 ?x166) ?x712) ?x308)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x216 (= ?x284 ?x758)))
 (let (($x741 (= $x216 true)))
 (let (($x337 (= $x741 true)))
 (let ((?x306 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x456 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x351 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x819 (concat ?x28 (concat ?x351 (concat ?x456 ?x306)))))
 (let (($x449 (= ?x819 input.dst.llvm-%m)))
 (let (($x594 (= $x449 true)))
 (let (($x421 (= $x594 true)))
 (let (($x650 (= input.dst.llvm-%m ?x819)))
 (let ((?x38 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x145 (= (_ bv0 32) ?x38)))
 (let ((?x120 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x465 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x269 $x465)))
 (let (($x332 (and $x33 $x145)))
 (let (($x122 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x415))))
 (let ((?x619 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x713 (bvuge ?x619 (_ bv1 32))))
 (=> $x713 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x604))))))))
 ))
 (let (($x665 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x844 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x619 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x713 (bvuge ?x619 (_ bv1 32))))
 (= $x713 (bvuge ?x844 (_ bv1 32)))))))
 ))
 (let (($x886 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x839 (= false false)))
 (let ((?x619 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x619 (_ bv0 32))))
 (=> $x283 $x839)))))
 ))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x619 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x619 (_ bv0 32))))
 (= $x283 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x236 (and $x22 $x886)))
 (let (($x462 (and $x236 $x665)))
 (let (($x702 (and $x462 $x122)))
 (let (($x753 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x514 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x711 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 (_ bv4 32))) (bvult ?x247 (bvsub ?x247 (_ bv4 32))))))
 (let (($x132 (and true $x711)))
 (let (($x262 (= (bvand ?x513 (_ bv4294967292 32)) ?x513)))
 (let (($x243 (and $x262 $x132)))
 (let (($x41 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 (_ bv8 32))) (bvult ?x203 (bvsub ?x203 (_ bv8 32))))))
 (let (($x271 (and (and (and true $x41) $x243) $x514)))
 (let (($x760 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x98 (and true $x760)))
 (let (($x843 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x108 (and $x843 $x98)))
 (let (($x523 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x513 (bvsub ?x513 (_ bv12 32))) (bvult ?x513 (bvsub ?x513 (_ bv12 32))))))
 (let (($x102 (and (and (and true $x843) $x523) $x108)))
 (let (($x799 (and (and (and (and (and (and $x102 $x271) $x158) $x753) $x702) $x332) $x650)))
 (let (($x687 (= $x799 true)))
 (let (($x778 (= $x687 true)))
 (let (($x342 (= $x778 true)))
 (let (($x806 (= $x102 true)))
 (let (($x821 (= $x806 true)))
 (let (($x828 (= $x821 true)))
 (let (($x129 (and $x271 $x158)))
 (let (($x547 (= $x129 true)))
 (let (($x715 (= $x547 true)))
 (let (($x572 (= $x715 true)))
 (let (($x290 (and $x572 $x828)))
 (let (($x587 (and $x290 $x342)))
 (let (($x779 (and $x587 $x421)))
 (let ((?x826 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x742 (= ?x826 (_ bv0 32))))
 (let ((?x537 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (= ?x537 (_ bv0 32))))
 (let (($x854 (and $x447 $x742)))
 (let ((?x443 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x264 (= ?x443 (_ bv0 32))))
 (let (($x728 (and $x264 $x854)))
 (let ((?x473 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x473 (_ bv1 32))))
 (let (($x490 (and $x71 $x728)))
 (let (($x379 (and $x490 $x779)))
 (let (($x387 (= ?x284 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x248 (=> $x71 $x387)))
 (let (($x414 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x7 (= $x71 $x414)))
 (let (($x839 (= false false)))
 (let (($x504 (= ?x473 (_ bv0 32))))
 (let (($x333 (=> $x504 $x839)))
 (let (($x411 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x764 (= $x504 $x411)))
 (let (($x72 (and $x764 $x333)))
 (let (($x232 (and $x72 $x7)))
 (let (($x87 (and $x232 $x248)))
 (let (($x532 (and $x87 $x379)))
 (let ((?x603 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x133 (= ?x603 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x432 (bvuge ?x443 (_ bv1 32))))
 (let (($x178 (=> $x432 $x133)))
 (let (($x196 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x553 (= $x432 $x196)))
 (let (($x46 (=> $x264 $x839)))
 (let (($x224 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x289 (= $x264 $x224)))
 (let (($x131 (and $x289 $x46)))
 (let (($x390 (and $x131 $x553)))
 (let (($x239 (and $x390 $x178)))
 (let (($x643 (and $x239 $x532)))
 (let ((?x774 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x301 (= ?x774 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x445 (bvuge ?x537 (_ bv1 32))))
 (let (($x863 (=> $x445 $x301)))
 (let (($x268 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x698 (= $x445 $x268)))
 (let (($x840 (=> $x447 $x839)))
 (let (($x830 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x792 (= $x447 $x830)))
 (let (($x101 (and $x792 $x840)))
 (let (($x891 (and $x101 $x698)))
 (let (($x502 (and $x891 $x863)))
 (let (($x117 (and $x502 $x643)))
 (let ((?x213 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x858 (= ?x213 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x681 (bvuge ?x826 (_ bv1 32))))
 (let (($x331 (=> $x681 $x858)))
 (let (($x263 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x745 (= $x681 $x263)))
 (let (($x693 (=> $x742 $x839)))
 (let (($x551 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x428 (= $x742 $x551)))
 (let (($x376 (and $x428 $x693)))
 (let (($x488 (and $x376 $x745)))
 (let (($x441 (and $x488 $x331)))
 (let (($x467 (and $x441 $x117)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x115 (and $x168 $x467)))
 (let (($x472 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x646 (and $x472 $x115)))
 (let (($x798 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x338 (and $x798 $x646)))
 (let (($x678 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x584 (and $x678 $x338)))
 (let (($x554 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x716 (and $x554 $x584)))
 (let (($x75 (and $x839 $x716)))
 (let (($x544 (= ?x284 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x155 (and $x544 $x75)))
 (let (($x369 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x851 (and $x369 $x155)))
 (let (($x261 (and $x839 $x851)))
 (let (($x312 (= ?x603 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x225 (and $x312 $x261)))
 (let (($x536 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x388 (and $x536 $x225)))
 (let (($x304 (and $x839 $x388)))
 (let (($x822 (= ?x774 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x856 (and $x822 $x304)))
 (let (($x700 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x235 (and $x700 $x856)))
 (let (($x355 (and $x839 $x235)))
 (let (($x888 (= ?x213 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x862 (and $x888 $x355)))
 (let (($x612 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x407 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x612)))))))
 (let (($x6 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x381 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x794)))
 (let (($x97 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x381 $x6)))))))
 (let (($x689 (bvugt ?x513 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x651)))
 (let (($x566 (=> (bvule ?x513 (bvsub (bvadd ?x513 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x689)))))))
 (let (($x435 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x558 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x528 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x558)))
 (let (($x475 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x528 $x435)))))))
 (let (($x291 (and $x475 $x566)))
 (let (($x176 (and $x291 $x97)))
 (let (($x684 (and $x176 $x407)))
 (let (($x349 (and $x684 $x862)))
 (let (($x241 (=> $x349 $x337)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x630 (concat ?x204 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x743 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x203 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x794 (bvadd ?x203 (_ bv3 32))))
 (let ((?x837 (concat (select input.dst.llvm-mem ?x794) (concat ?x743 ?x630))))
 (let ((?x308 (bvmul (_ bv4294967295 32) ?x837)))
 (let ((?x695 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x404 (concat ?x695 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x246 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x247 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x193 (bvadd ?x247 (_ bv3 32))))
 (let ((?x712 (concat (select input.dst.llvm-mem ?x193) (concat ?x246 ?x404))))
 (let ((?x801 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x834 (concat ?x801 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x418 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x513 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x651 (bvadd ?x513 (_ bv3 32))))
 (let ((?x166 (concat (select input.dst.llvm-mem ?x651) (concat ?x418 ?x834))))
 (let ((?x820 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x820)))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x212)))
 (let ((?x758 (bvadd (bvadd (bvadd ?x350 ?x166) ?x712) ?x308)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x216 (= ?x284 ?x758)))
 (let (($x741 (= $x216 true)))
 (let (($x337 (= $x741 true)))
 (let ((?x306 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x456 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x351 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x819 (concat ?x28 (concat ?x351 (concat ?x456 ?x306)))))
 (let (($x449 (= ?x819 input.dst.llvm-%m)))
 (let (($x594 (= $x449 true)))
 (let (($x421 (= $x594 true)))
 (let (($x650 (= input.dst.llvm-%m ?x819)))
 (let ((?x38 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x145 (= (_ bv0 32) ?x38)))
 (let ((?x120 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x465 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x269 $x465)))
 (let (($x332 (and $x33 $x145)))
 (let (($x122 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x415))))
 (let ((?x619 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x713 (bvuge ?x619 (_ bv1 32))))
 (=> $x713 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x604))))))))
 ))
 (let (($x665 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x844 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x619 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x713 (bvuge ?x619 (_ bv1 32))))
 (= $x713 (bvuge ?x844 (_ bv1 32)))))))
 ))
 (let (($x886 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x839 (= false false)))
 (let ((?x619 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x619 (_ bv0 32))))
 (=> $x283 $x839)))))
 ))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x619 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x619 (_ bv0 32))))
 (= $x283 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x236 (and $x22 $x886)))
 (let (($x462 (and $x236 $x665)))
 (let (($x702 (and $x462 $x122)))
 (let (($x753 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x514 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x711 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 (_ bv4 32))) (bvult ?x247 (bvsub ?x247 (_ bv4 32))))))
 (let (($x132 (and true $x711)))
 (let (($x262 (= (bvand ?x513 (_ bv4294967292 32)) ?x513)))
 (let (($x243 (and $x262 $x132)))
 (let (($x41 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 (_ bv8 32))) (bvult ?x203 (bvsub ?x203 (_ bv8 32))))))
 (let (($x271 (and (and (and true $x41) $x243) $x514)))
 (let (($x760 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x98 (and true $x760)))
 (let (($x843 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x108 (and $x843 $x98)))
 (let (($x523 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x513 (bvsub ?x513 (_ bv12 32))) (bvult ?x513 (bvsub ?x513 (_ bv12 32))))))
 (let (($x102 (and (and (and true $x843) $x523) $x108)))
 (let (($x799 (and (and (and (and (and (and $x102 $x271) $x158) $x753) $x702) $x332) $x650)))
 (let (($x687 (= $x799 true)))
 (let (($x778 (= $x687 true)))
 (let (($x342 (= $x778 true)))
 (let (($x806 (= $x102 true)))
 (let (($x821 (= $x806 true)))
 (let (($x828 (= $x821 true)))
 (let (($x129 (and $x271 $x158)))
 (let (($x547 (= $x129 true)))
 (let (($x715 (= $x547 true)))
 (let (($x572 (= $x715 true)))
 (let (($x290 (and $x572 $x828)))
 (let (($x587 (and $x290 $x342)))
 (let (($x779 (and $x587 $x421)))
 (let ((?x826 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x742 (= ?x826 (_ bv0 32))))
 (let ((?x537 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (= ?x537 (_ bv0 32))))
 (let (($x854 (and $x447 $x742)))
 (let ((?x443 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x264 (= ?x443 (_ bv0 32))))
 (let (($x728 (and $x264 $x854)))
 (let ((?x473 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x473 (_ bv1 32))))
 (let (($x490 (and $x71 $x728)))
 (let (($x379 (and $x490 $x779)))
 (let (($x387 (= ?x284 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x248 (=> $x71 $x387)))
 (let (($x414 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x7 (= $x71 $x414)))
 (let (($x839 (= false false)))
 (let (($x504 (= ?x473 (_ bv0 32))))
 (let (($x333 (=> $x504 $x839)))
 (let (($x411 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x764 (= $x504 $x411)))
 (let (($x72 (and $x764 $x333)))
 (let (($x232 (and $x72 $x7)))
 (let (($x87 (and $x232 $x248)))
 (let (($x532 (and $x87 $x379)))
 (let ((?x603 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x133 (= ?x603 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x432 (bvuge ?x443 (_ bv1 32))))
 (let (($x178 (=> $x432 $x133)))
 (let (($x196 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x553 (= $x432 $x196)))
 (let (($x46 (=> $x264 $x839)))
 (let (($x224 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x289 (= $x264 $x224)))
 (let (($x131 (and $x289 $x46)))
 (let (($x390 (and $x131 $x553)))
 (let (($x239 (and $x390 $x178)))
 (let (($x643 (and $x239 $x532)))
 (let ((?x774 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x301 (= ?x774 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x445 (bvuge ?x537 (_ bv1 32))))
 (let (($x863 (=> $x445 $x301)))
 (let (($x268 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x698 (= $x445 $x268)))
 (let (($x840 (=> $x447 $x839)))
 (let (($x830 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x792 (= $x447 $x830)))
 (let (($x101 (and $x792 $x840)))
 (let (($x891 (and $x101 $x698)))
 (let (($x502 (and $x891 $x863)))
 (let (($x117 (and $x502 $x643)))
 (let ((?x213 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x858 (= ?x213 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x681 (bvuge ?x826 (_ bv1 32))))
 (let (($x331 (=> $x681 $x858)))
 (let (($x263 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x745 (= $x681 $x263)))
 (let (($x693 (=> $x742 $x839)))
 (let (($x551 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x428 (= $x742 $x551)))
 (let (($x376 (and $x428 $x693)))
 (let (($x488 (and $x376 $x745)))
 (let (($x441 (and $x488 $x331)))
 (let (($x467 (and $x441 $x117)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x115 (and $x168 $x467)))
 (let (($x472 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x646 (and $x472 $x115)))
 (let (($x798 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x338 (and $x798 $x646)))
 (let (($x678 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x584 (and $x678 $x338)))
 (let (($x554 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x716 (and $x554 $x584)))
 (let (($x75 (and $x839 $x716)))
 (let (($x544 (= ?x284 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x155 (and $x544 $x75)))
 (let (($x369 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x851 (and $x369 $x155)))
 (let (($x261 (and $x839 $x851)))
 (let (($x312 (= ?x603 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x225 (and $x312 $x261)))
 (let (($x536 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x388 (and $x536 $x225)))
 (let (($x304 (and $x839 $x388)))
 (let (($x822 (= ?x774 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x856 (and $x822 $x304)))
 (let (($x700 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x235 (and $x700 $x856)))
 (let (($x355 (and $x839 $x235)))
 (let (($x888 (= ?x213 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x862 (and $x888 $x355)))
 (let (($x612 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x407 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x612)))))))
 (let (($x6 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x381 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x794)))
 (let (($x97 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x381 $x6)))))))
 (let (($x689 (bvugt ?x513 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x651)))
 (let (($x566 (=> (bvule ?x513 (bvsub (bvadd ?x513 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x689)))))))
 (let (($x435 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x558 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x528 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x558)))
 (let (($x475 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x528 $x435)))))))
 (let (($x291 (and $x475 $x566)))
 (let (($x176 (and $x291 $x97)))
 (let (($x684 (and $x176 $x407)))
 (let (($x349 (and $x684 $x862)))
 (let (($x241 (=> $x349 $x337)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 240 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x128 (bvmul (_ bv4294967295 32) ?x168)))
 (let ((?x218 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x128)))
 (let ((?x860 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x846 (concat ?x860 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x841 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x750 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x159 (bvadd ?x750 (_ bv3 32))))
 (let ((?x295 (concat (select input.dst.llvm-mem ?x159) (concat ?x841 ?x846))))
 (let ((?x77 (bvmul (_ bv4294967295 32) ?x295)))
 (let ((?x300 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x192 (concat ?x300 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x794 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x184 (bvadd ?x794 (_ bv3 32))))
 (let ((?x55 (concat (select input.dst.llvm-mem ?x184) (concat ?x377 ?x192))))
 (let ((?x805 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x633 (concat ?x805 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x528 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x767 (bvadd ?x528 (_ bv3 32))))
 (let ((?x281 (concat (select input.dst.llvm-mem ?x767) (concat ?x327 ?x633))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x348)))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x402)))
 (let ((?x121 (bvadd (bvadd (bvadd ?x393 ?x281) ?x55) ?x77)))
 (let (($x818 (= ?x121 ?x218)))
 (let (($x842 (= $x818 true)))
 (let (($x726 (= $x842 true)))
 (let ((?x857 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x498 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x802 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x785 (concat ?x346 (concat ?x802 (concat ?x498 ?x857)))))
 (let (($x34 (= ?x785 input.dst.llvm-%m)))
 (let (($x885 (= $x34 true)))
 (let (($x310 (= $x885 true)))
 (let (($x170 (= input.dst.llvm-%m ?x785)))
 (let ((?x663 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x454 (= (_ bv0 32) ?x663)))
 (let ((?x175 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let (($x770 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x652 (and $x770 $x14)))
 (let (($x439 (and $x652 $x454)))
 (let (($x691 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x680 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem ?x223))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv2 32))) ?x680))))
 (let ((?x508 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x508 (_ bv1 32))))
 (=> $x68 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x583))))))))
 ))
 (let (($x771 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x704 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x508 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x508 (_ bv1 32))))
 (= $x68 (bvuge ?x704 (_ bv1 32)))))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x284 (= false false)))
 (let ((?x508 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x797 (= ?x508 (_ bv0 32))))
 (=> $x797 $x284)))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x508 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x797 (= ?x508 (_ bv0 32))))
 (= $x797 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x796 (and $x208 $x330)))
 (let (($x506 (and $x796 $x771)))
 (let (($x474 (and $x506 $x691)))
 (let (($x587 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= (bvand ?x750 (_ bv4294967292 32)) ?x750)))
 (let (($x520 (= (bvand ?x794 (_ bv4294967292 32)) ?x794)))
 (let (($x855 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x794 (bvsub ?x794 (_ bv4 32))) (bvult ?x794 (bvsub ?x794 (_ bv4 32))))))
 (let (($x816 (and true $x855)))
 (let (($x763 (= (bvand ?x528 (_ bv4294967292 32)) ?x528)))
 (let (($x252 (and $x763 $x816)))
 (let (($x665 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x750 (bvsub ?x750 (_ bv8 32))) (bvult ?x750 (bvsub ?x750 (_ bv8 32))))))
 (let (($x604 (and (and (and true $x665) $x252) $x520)))
 (let (($x568 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x456 (and true $x568)))
 (let (($x465 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x306 (and $x465 $x456)))
 (let (($x850 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x528 (bvsub ?x528 (_ bv12 32))) (bvult ?x528 (bvsub ?x528 (_ bv12 32))))))
 (let (($x819 (and (and (and true $x465) $x850) $x306)))
 (let (($x832 (and (and (and (and (and (and $x819 $x604) $x45) $x587) $x474) $x439) $x170)))
 (let (($x809 (= $x832 true)))
 (let (($x413 (= $x809 true)))
 (let (($x100 (= $x413 true)))
 (let (($x650 (= $x819 true)))
 (let (($x799 (= $x650 true)))
 (let (($x687 (= $x799 true)))
 (let (($x122 (and $x604 $x45)))
 (let (($x702 (= $x122 true)))
 (let (($x76 (= $x702 true)))
 (let (($x269 (= $x76 true)))
 (let (($x778 (and $x269 $x687)))
 (let (($x410 (and $x778 $x100)))
 (let (($x422 (and $x410 $x310)))
 (let ((?x553 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x411 (bvuge ?x553 (_ bv1 32))))
 (let ((?x490 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x490 (_ bv1 32))))
 (let (($x22 (and $x187 $x411)))
 (let ((?x547 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x523 (bvuge ?x547 (_ bv1 32))))
 (let (($x335 (and $x523 $x22)))
 (let ((?x579 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x579 (_ bv0 32))))
 (let (($x886 (and $x198 $x335)))
 (let (($x150 (and $x886 $x422)))
 (let ((?x840 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x844 (= ?x840 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x116 (bvuge ?x579 (_ bv1 32))))
 (let (($x538 (=> $x116 $x844)))
 (let (($x63 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x143 (= $x116 $x63)))
 (let (($x284 (= false false)))
 (let (($x753 (=> $x198 $x284)))
 (let (($x828 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x111 (= $x198 $x828)))
 (let (($x494 (and $x111 $x753)))
 (let (($x825 (and $x494 $x143)))
 (let (($x571 (and $x825 $x538)))
 (let (($x329 (and $x571 $x150)))
 (let ((?x745 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x629 (= ?x745 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x357 (=> $x523 $x629)))
 (let (($x370 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x395 (= $x523 $x370)))
 (let (($x715 (= ?x547 (_ bv0 32))))
 (let (($x672 (=> $x715 $x284)))
 (let (($x158 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x572 (= $x715 $x158)))
 (let (($x843 (and $x572 $x672)))
 (let (($x773 (and $x843 $x395)))
 (let (($x632 (and $x773 $x357)))
 (let (($x93 (and $x632 $x329)))
 (let (($x674 (= ?x168 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x711 (=> $x187 $x674)))
 (let (($x262 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x595 (= $x187 $x262)))
 (let (($x560 (= ?x490 (_ bv0 32))))
 (let (($x757 (=> $x560 $x284)))
 (let (($x854 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x10 (= $x560 $x854)))
 (let (($x92 (and $x10 $x757)))
 (let (($x621 (and $x92 $x595)))
 (let (($x132 (and $x621 $x711)))
 (let (($x347 (and $x132 $x93)))
 (let ((?x761 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x72 (= ?x761 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x71 (=> $x411 $x72)))
 (let (($x864 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x764 (= $x411 $x864)))
 (let (($x390 (= ?x553 (_ bv0 32))))
 (let (($x133 (=> $x390 $x284)))
 (let (($x432 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x373 (= $x390 $x432)))
 (let (($x178 (and $x373 $x133)))
 (let (($x333 (and $x178 $x764)))
 (let (($x414 (and $x333 $x71)))
 (let (($x600 (and $x414 $x347)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x845 (and $x443 $x600)))
 (let (($x502 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x884 (and $x502 $x845)))
 (let (($x301 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x542 (and $x301 $x884)))
 (let (($x891 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x433 (and $x891 $x542)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x240 (and $x268 $x433)))
 (let (($x325 (and $x284 $x240)))
 (let (($x101 (= ?x840 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x5 (and $x101 $x325)))
 (let (($x858 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x353 (and $x858 $x5)))
 (let (($x341 (and $x284 $x353)))
 (let (($x488 (= ?x745 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x113 (and $x488 $x341)))
 (let (($x742 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x430 (and $x742 $x113)))
 (let (($x409 (and $x284 $x430)))
 (let (($x675 (= ?x168 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x419 (and $x675 $x409)))
 (let (($x544 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x492 (and $x544 $x419)))
 (let (($x701 (and $x284 $x492)))
 (let (($x369 (= ?x761 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x543 (and $x369 $x701)))
 (let (($x824 (bvugt ?x794 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x776 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x888 (=> (bvule ?x794 (bvsub (bvadd ?x794 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x776 $x824)))))))
 (let (($x890 (bvugt ?x750 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x255 (=> (bvule ?x750 (bvsub (bvadd ?x750 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x394 $x890)))))))
 (let (($x452 (bvugt ?x528 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x767)))
 (let (($x463 (=> (bvule ?x528 (bvsub (bvadd ?x528 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x297 $x452)))))))
 (let (($x423 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x513 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x513)))
 (let (($x318 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x423)))))))
 (let (($x180 (and $x318 $x463)))
 (let (($x123 (and $x180 $x255)))
 (let (($x288 (and $x123 $x888)))
 (let (($x780 (and $x288 $x543)))
 (let (($x725 (=> $x780 $x726)))
 (not $x725)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x128 (bvmul (_ bv4294967295 32) ?x168)))
 (let ((?x218 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x128)))
 (let ((?x860 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x846 (concat ?x860 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x841 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x750 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x159 (bvadd ?x750 (_ bv3 32))))
 (let ((?x295 (concat (select input.dst.llvm-mem ?x159) (concat ?x841 ?x846))))
 (let ((?x77 (bvmul (_ bv4294967295 32) ?x295)))
 (let ((?x300 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x192 (concat ?x300 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x794 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x184 (bvadd ?x794 (_ bv3 32))))
 (let ((?x55 (concat (select input.dst.llvm-mem ?x184) (concat ?x377 ?x192))))
 (let ((?x805 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x633 (concat ?x805 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x528 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x767 (bvadd ?x528 (_ bv3 32))))
 (let ((?x281 (concat (select input.dst.llvm-mem ?x767) (concat ?x327 ?x633))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x348)))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x402)))
 (let ((?x121 (bvadd (bvadd (bvadd ?x393 ?x281) ?x55) ?x77)))
 (let (($x818 (= ?x121 ?x218)))
 (let (($x842 (= $x818 true)))
 (let (($x726 (= $x842 true)))
 (let ((?x857 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x498 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x802 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x785 (concat ?x346 (concat ?x802 (concat ?x498 ?x857)))))
 (let (($x34 (= ?x785 input.dst.llvm-%m)))
 (let (($x885 (= $x34 true)))
 (let (($x310 (= $x885 true)))
 (let (($x170 (= input.dst.llvm-%m ?x785)))
 (let ((?x663 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x454 (= (_ bv0 32) ?x663)))
 (let ((?x175 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let (($x770 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x652 (and $x770 $x14)))
 (let (($x439 (and $x652 $x454)))
 (let (($x691 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x680 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem ?x223))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv2 32))) ?x680))))
 (let ((?x508 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x508 (_ bv1 32))))
 (=> $x68 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x583))))))))
 ))
 (let (($x771 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x704 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x508 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x508 (_ bv1 32))))
 (= $x68 (bvuge ?x704 (_ bv1 32)))))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x284 (= false false)))
 (let ((?x508 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x797 (= ?x508 (_ bv0 32))))
 (=> $x797 $x284)))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x508 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x797 (= ?x508 (_ bv0 32))))
 (= $x797 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x796 (and $x208 $x330)))
 (let (($x506 (and $x796 $x771)))
 (let (($x474 (and $x506 $x691)))
 (let (($x587 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= (bvand ?x750 (_ bv4294967292 32)) ?x750)))
 (let (($x520 (= (bvand ?x794 (_ bv4294967292 32)) ?x794)))
 (let (($x855 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x794 (bvsub ?x794 (_ bv4 32))) (bvult ?x794 (bvsub ?x794 (_ bv4 32))))))
 (let (($x816 (and true $x855)))
 (let (($x763 (= (bvand ?x528 (_ bv4294967292 32)) ?x528)))
 (let (($x252 (and $x763 $x816)))
 (let (($x665 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x750 (bvsub ?x750 (_ bv8 32))) (bvult ?x750 (bvsub ?x750 (_ bv8 32))))))
 (let (($x604 (and (and (and true $x665) $x252) $x520)))
 (let (($x568 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x456 (and true $x568)))
 (let (($x465 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x306 (and $x465 $x456)))
 (let (($x850 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x528 (bvsub ?x528 (_ bv12 32))) (bvult ?x528 (bvsub ?x528 (_ bv12 32))))))
 (let (($x819 (and (and (and true $x465) $x850) $x306)))
 (let (($x832 (and (and (and (and (and (and $x819 $x604) $x45) $x587) $x474) $x439) $x170)))
 (let (($x809 (= $x832 true)))
 (let (($x413 (= $x809 true)))
 (let (($x100 (= $x413 true)))
 (let (($x650 (= $x819 true)))
 (let (($x799 (= $x650 true)))
 (let (($x687 (= $x799 true)))
 (let (($x122 (and $x604 $x45)))
 (let (($x702 (= $x122 true)))
 (let (($x76 (= $x702 true)))
 (let (($x269 (= $x76 true)))
 (let (($x778 (and $x269 $x687)))
 (let (($x410 (and $x778 $x100)))
 (let (($x422 (and $x410 $x310)))
 (let ((?x553 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x411 (bvuge ?x553 (_ bv1 32))))
 (let ((?x490 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x490 (_ bv1 32))))
 (let (($x22 (and $x187 $x411)))
 (let ((?x547 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x523 (bvuge ?x547 (_ bv1 32))))
 (let (($x335 (and $x523 $x22)))
 (let ((?x579 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x579 (_ bv0 32))))
 (let (($x886 (and $x198 $x335)))
 (let (($x150 (and $x886 $x422)))
 (let ((?x840 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x844 (= ?x840 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x116 (bvuge ?x579 (_ bv1 32))))
 (let (($x538 (=> $x116 $x844)))
 (let (($x63 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x143 (= $x116 $x63)))
 (let (($x284 (= false false)))
 (let (($x753 (=> $x198 $x284)))
 (let (($x828 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x111 (= $x198 $x828)))
 (let (($x494 (and $x111 $x753)))
 (let (($x825 (and $x494 $x143)))
 (let (($x571 (and $x825 $x538)))
 (let (($x329 (and $x571 $x150)))
 (let ((?x745 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x629 (= ?x745 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x357 (=> $x523 $x629)))
 (let (($x370 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x395 (= $x523 $x370)))
 (let (($x715 (= ?x547 (_ bv0 32))))
 (let (($x672 (=> $x715 $x284)))
 (let (($x158 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x572 (= $x715 $x158)))
 (let (($x843 (and $x572 $x672)))
 (let (($x773 (and $x843 $x395)))
 (let (($x632 (and $x773 $x357)))
 (let (($x93 (and $x632 $x329)))
 (let (($x674 (= ?x168 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x711 (=> $x187 $x674)))
 (let (($x262 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x595 (= $x187 $x262)))
 (let (($x560 (= ?x490 (_ bv0 32))))
 (let (($x757 (=> $x560 $x284)))
 (let (($x854 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x10 (= $x560 $x854)))
 (let (($x92 (and $x10 $x757)))
 (let (($x621 (and $x92 $x595)))
 (let (($x132 (and $x621 $x711)))
 (let (($x347 (and $x132 $x93)))
 (let ((?x761 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x72 (= ?x761 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x71 (=> $x411 $x72)))
 (let (($x864 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x764 (= $x411 $x864)))
 (let (($x390 (= ?x553 (_ bv0 32))))
 (let (($x133 (=> $x390 $x284)))
 (let (($x432 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x373 (= $x390 $x432)))
 (let (($x178 (and $x373 $x133)))
 (let (($x333 (and $x178 $x764)))
 (let (($x414 (and $x333 $x71)))
 (let (($x600 (and $x414 $x347)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x845 (and $x443 $x600)))
 (let (($x502 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x884 (and $x502 $x845)))
 (let (($x301 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x542 (and $x301 $x884)))
 (let (($x891 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x433 (and $x891 $x542)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x240 (and $x268 $x433)))
 (let (($x325 (and $x284 $x240)))
 (let (($x101 (= ?x840 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x5 (and $x101 $x325)))
 (let (($x858 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x353 (and $x858 $x5)))
 (let (($x341 (and $x284 $x353)))
 (let (($x488 (= ?x745 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x113 (and $x488 $x341)))
 (let (($x742 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x430 (and $x742 $x113)))
 (let (($x409 (and $x284 $x430)))
 (let (($x675 (= ?x168 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x419 (and $x675 $x409)))
 (let (($x544 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x492 (and $x544 $x419)))
 (let (($x701 (and $x284 $x492)))
 (let (($x369 (= ?x761 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x543 (and $x369 $x701)))
 (let (($x824 (bvugt ?x794 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x776 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x888 (=> (bvule ?x794 (bvsub (bvadd ?x794 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x776 $x824)))))))
 (let (($x890 (bvugt ?x750 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x255 (=> (bvule ?x750 (bvsub (bvadd ?x750 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x394 $x890)))))))
 (let (($x452 (bvugt ?x528 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x767)))
 (let (($x463 (=> (bvule ?x528 (bvsub (bvadd ?x528 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x297 $x452)))))))
 (let (($x423 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x513 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x513)))
 (let (($x318 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x423)))))))
 (let (($x180 (and $x318 $x463)))
 (let (($x123 (and $x180 $x255)))
 (let (($x288 (and $x123 $x888)))
 (let (($x780 (and $x288 $x543)))
 (let (($x725 (=> $x780 $x726)))
 (not $x725)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x443 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x264 (bvmul (_ bv4294967295 32) ?x443)))
 (let ((?x764 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x460 (bvadd ?x764 ?x264)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x207 (concat ?x37 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x294 (bvadd ?x6 (_ bv3 32))))
 (let ((?x387 (concat (select input.dst.llvm-mem ?x294) (concat ?x7 ?x207))))
 (let ((?x41 (bvmul (_ bv4294967295 32) ?x387)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x601 (concat ?x102 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x619 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x613 (bvadd ?x159 (_ bv3 32))))
 (let ((?x610 (concat (select input.dst.llvm-mem ?x613) (concat ?x619 ?x601))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x529 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x127 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x141 (bvadd ?x127 (_ bv3 32))))
 (let ((?x760 (concat (select input.dst.llvm-mem ?x141) (concat ?x522 ?x529))))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x533)))
 (let ((?x608 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x32)))
 (let ((?x258 (bvadd (bvadd (bvadd ?x608 ?x760) ?x610) ?x41)))
 (let (($x224 (= ?x258 ?x460)))
 (let (($x289 (= $x224 true)))
 (let (($x239 (= $x289 true)))
 (let ((?x231 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x679 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x404 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x484 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x570 (concat ?x484 (concat ?x404 (concat ?x679 ?x231)))))
 (let (($x216 (= ?x570 input.dst.llvm-%m)))
 (let (($x741 (= $x216 true)))
 (let (($x337 (= $x741 true)))
 (let (($x743 (= input.dst.llvm-%m ?x570)))
 (let ((?x117 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x467 (= (_ bv0 32) ?x117)))
 (let ((?x779 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x532 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x779)))
 (let (($x421 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x643 (and $x421 $x532)))
 (let (($x115 (and $x643 $x467)))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x738 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x738))))
 (let ((?x699 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (bvuge ?x699 (_ bv1 32))))
 (=> $x646 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x234))))))))
 ))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x539 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x699 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (bvuge ?x699 (_ bv1 32))))
 (= $x646 (bvuge ?x539 (_ bv1 32)))))))
 ))
 (let (($x302 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x840 (= false false)))
 (let ((?x699 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x551 (= ?x699 (_ bv0 32))))
 (=> $x551 $x840)))))
 ))
 (let (($x693 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x699 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x551 (= ?x699 (_ bv0 32))))
 (= $x551 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x678 (and $x693 $x302)))
 (let (($x75 (and $x678 $x716)))
 (let (($x594 (and $x75 $x379)))
 (let (($x410 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x535 (= (bvand ?x159 (_ bv4294967292 32)) ?x159)))
 (let (($x627 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x159 (bvsub ?x159 (_ bv4 32))) (bvult ?x159 (bvsub ?x159 (_ bv4 32))))))
 (let (($x563 (and true $x627)))
 (let (($x155 (= (bvand ?x127 (_ bv4294967292 32)) ?x127)))
 (let (($x267 (and $x155 $x563)))
 (let (($x771 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x583 (and (and (and true $x771) $x267) $x535)))
 (let (($x226 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x498 (and true $x226)))
 (let (($x14 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x857 (and $x14 $x498)))
 (let (($x206 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x127 (bvsub ?x127 (_ bv12 32))) (bvult ?x127 (bvsub ?x127 (_ bv12 32))))))
 (let (($x785 (and (and (and true $x14) $x206) $x857)))
 (let (($x630 (and (and (and (and (and (and $x785 $x583) $x160) $x410) $x594) $x115) $x743)))
 (let (($x861 (= $x630 true)))
 (let (($x308 (= $x861 true)))
 (let (($x837 (= $x308 true)))
 (let (($x170 (= $x785 true)))
 (let (($x832 (= $x170 true)))
 (let (($x809 (= $x832 true)))
 (let (($x691 (and $x583 $x160)))
 (let (($x474 (= $x691 true)))
 (let (($x762 (= $x474 true)))
 (let (($x770 (= $x762 true)))
 (let (($x413 (and $x770 $x809)))
 (let (($x758 (and $x413 $x837)))
 (let (($x241 (and $x758 $x337)))
 (let ((?x395 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (= ?x395 (_ bv0 32))))
 (let ((?x886 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x886 (_ bv1 32))))
 (let (($x208 (and $x23 $x773)))
 (let ((?x702 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x850 (bvuge ?x702 (_ bv1 32))))
 (let (($x293 (and $x850 $x208)))
 (let ((?x466 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x466 (_ bv0 32))))
 (let (($x330 (and $x15 $x293)))
 (let (($x733 (and $x330 $x241)))
 (let ((?x757 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x704 (= ?x757 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x584 (bvuge ?x466 (_ bv1 32))))
 (let (($x546 (=> $x584 $x704)))
 (let (($x853 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x889 (= $x584 $x853)))
 (let (($x840 (= false false)))
 (let (($x587 (=> $x15 $x840)))
 (let (($x687 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x342 (= $x15 $x687)))
 (let (($x362 (and $x342 $x587)))
 (let (($x562 (and $x362 $x889)))
 (let (($x620 (and $x562 $x546)))
 (let (($x172 (and $x620 $x733)))
 (let (($x227 (= ?x764 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x688 (=> $x850 $x227)))
 (let (($x332 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x386 (= $x850 $x332)))
 (let (($x76 (= ?x702 (_ bv0 32))))
 (let (($x120 (=> $x76 $x840)))
 (let (($x45 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x269 (= $x76 $x45)))
 (let (($x465 (and $x269 $x120)))
 (let (($x28 (and $x465 $x386)))
 (let (($x351 (and $x28 $x688)))
 (let (($x324 (and $x351 $x172)))
 (let (($x622 (= ?x443 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x855 (=> $x23 $x622)))
 (let (($x763 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x567 (= $x23 $x763)))
 (let (($x713 (= ?x886 (_ bv0 32))))
 (let (($x707 (=> $x713 $x840)))
 (let (($x22 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x236 (= $x713 $x22)))
 (let (($x545 (and $x236 $x707)))
 (let (($x161 (and $x545 $x567)))
 (let (($x816 (and $x161 $x855)))
 (let (($x477 (and $x816 $x324)))
 (let ((?x565 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x494 (= ?x565 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x828 (bvuge ?x395 (_ bv1 32))))
 (let (($x116 (=> $x828 $x494)))
 (let (($x806 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x111 (= $x828 $x806)))
 (let (($x629 (=> $x773 $x840)))
 (let (($x523 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x489 (= $x773 $x523)))
 (let (($x357 (and $x489 $x629)))
 (let (($x753 (and $x357 $x111)))
 (let (($x63 (and $x753 $x116)))
 (let (($x817 (and $x63 $x477)))
 (let (($x547 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x303 (and $x547 $x817)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x438 (and $x132 $x303)))
 (let (($x674 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x307 (and $x674 $x438)))
 (let (($x621 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x222 (and $x621 $x307)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x147 (and $x262 $x222)))
 (let (($x70 (and $x840 $x147)))
 (let (($x92 (= ?x757 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x634 (and $x92 $x70)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x661 (and $x72 $x634)))
 (let (($x576 (and $x840 $x661)))
 (let (($x333 (= ?x764 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x793 (and $x333 $x576)))
 (let (($x390 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x114 (and $x390 $x793)))
 (let (($x847 (and $x840 $x114)))
 (let (($x196 (= ?x443 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x50 (and $x196 $x847)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x755 (and $x101 $x50)))
 (let (($x496 (and $x840 $x755)))
 (let (($x858 (= ?x565 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x485 (and $x858 $x496)))
 (let (($x684 (bvugt ?x159 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x407 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x613)))
 (let (($x369 (=> (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x407 $x684)))))))
 (let (($x176 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x294)))
 (let (($x612 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x176)))))))
 (let (($x291 (bvugt ?x127 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x566 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x381 (=> (bvule ?x127 (bvsub (bvadd ?x127 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x566 $x291)))))))
 (let (($x513 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x435 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x548 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x435)))
 (let (($x689 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x548 $x513)))))))
 (let (($x203 (and $x689 $x381)))
 (let (($x754 (and $x203 $x612)))
 (let (($x88 (and $x754 $x369)))
 (let (($x509 (and $x88 $x485)))
 (let (($x35 (=> $x509 $x239)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x443 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x264 (bvmul (_ bv4294967295 32) ?x443)))
 (let ((?x764 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x460 (bvadd ?x764 ?x264)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x207 (concat ?x37 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x294 (bvadd ?x6 (_ bv3 32))))
 (let ((?x387 (concat (select input.dst.llvm-mem ?x294) (concat ?x7 ?x207))))
 (let ((?x41 (bvmul (_ bv4294967295 32) ?x387)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x601 (concat ?x102 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x619 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x613 (bvadd ?x159 (_ bv3 32))))
 (let ((?x610 (concat (select input.dst.llvm-mem ?x613) (concat ?x619 ?x601))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x529 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x127 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x141 (bvadd ?x127 (_ bv3 32))))
 (let ((?x760 (concat (select input.dst.llvm-mem ?x141) (concat ?x522 ?x529))))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x533)))
 (let ((?x608 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x32)))
 (let ((?x258 (bvadd (bvadd (bvadd ?x608 ?x760) ?x610) ?x41)))
 (let (($x224 (= ?x258 ?x460)))
 (let (($x289 (= $x224 true)))
 (let (($x239 (= $x289 true)))
 (let ((?x231 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x679 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x404 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x484 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x570 (concat ?x484 (concat ?x404 (concat ?x679 ?x231)))))
 (let (($x216 (= ?x570 input.dst.llvm-%m)))
 (let (($x741 (= $x216 true)))
 (let (($x337 (= $x741 true)))
 (let (($x743 (= input.dst.llvm-%m ?x570)))
 (let ((?x117 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x467 (= (_ bv0 32) ?x117)))
 (let ((?x779 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x532 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x779)))
 (let (($x421 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x643 (and $x421 $x532)))
 (let (($x115 (and $x643 $x467)))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x738 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x738))))
 (let ((?x699 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (bvuge ?x699 (_ bv1 32))))
 (=> $x646 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x234))))))))
 ))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x539 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x699 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (bvuge ?x699 (_ bv1 32))))
 (= $x646 (bvuge ?x539 (_ bv1 32)))))))
 ))
 (let (($x302 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x840 (= false false)))
 (let ((?x699 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x551 (= ?x699 (_ bv0 32))))
 (=> $x551 $x840)))))
 ))
 (let (($x693 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x699 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x551 (= ?x699 (_ bv0 32))))
 (= $x551 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x678 (and $x693 $x302)))
 (let (($x75 (and $x678 $x716)))
 (let (($x594 (and $x75 $x379)))
 (let (($x410 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x535 (= (bvand ?x159 (_ bv4294967292 32)) ?x159)))
 (let (($x627 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x159 (bvsub ?x159 (_ bv4 32))) (bvult ?x159 (bvsub ?x159 (_ bv4 32))))))
 (let (($x563 (and true $x627)))
 (let (($x155 (= (bvand ?x127 (_ bv4294967292 32)) ?x127)))
 (let (($x267 (and $x155 $x563)))
 (let (($x771 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x583 (and (and (and true $x771) $x267) $x535)))
 (let (($x226 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x498 (and true $x226)))
 (let (($x14 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x857 (and $x14 $x498)))
 (let (($x206 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x127 (bvsub ?x127 (_ bv12 32))) (bvult ?x127 (bvsub ?x127 (_ bv12 32))))))
 (let (($x785 (and (and (and true $x14) $x206) $x857)))
 (let (($x630 (and (and (and (and (and (and $x785 $x583) $x160) $x410) $x594) $x115) $x743)))
 (let (($x861 (= $x630 true)))
 (let (($x308 (= $x861 true)))
 (let (($x837 (= $x308 true)))
 (let (($x170 (= $x785 true)))
 (let (($x832 (= $x170 true)))
 (let (($x809 (= $x832 true)))
 (let (($x691 (and $x583 $x160)))
 (let (($x474 (= $x691 true)))
 (let (($x762 (= $x474 true)))
 (let (($x770 (= $x762 true)))
 (let (($x413 (and $x770 $x809)))
 (let (($x758 (and $x413 $x837)))
 (let (($x241 (and $x758 $x337)))
 (let ((?x395 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (= ?x395 (_ bv0 32))))
 (let ((?x886 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x886 (_ bv1 32))))
 (let (($x208 (and $x23 $x773)))
 (let ((?x702 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x850 (bvuge ?x702 (_ bv1 32))))
 (let (($x293 (and $x850 $x208)))
 (let ((?x466 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x466 (_ bv0 32))))
 (let (($x330 (and $x15 $x293)))
 (let (($x733 (and $x330 $x241)))
 (let ((?x757 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x704 (= ?x757 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x584 (bvuge ?x466 (_ bv1 32))))
 (let (($x546 (=> $x584 $x704)))
 (let (($x853 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x889 (= $x584 $x853)))
 (let (($x840 (= false false)))
 (let (($x587 (=> $x15 $x840)))
 (let (($x687 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x342 (= $x15 $x687)))
 (let (($x362 (and $x342 $x587)))
 (let (($x562 (and $x362 $x889)))
 (let (($x620 (and $x562 $x546)))
 (let (($x172 (and $x620 $x733)))
 (let (($x227 (= ?x764 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x688 (=> $x850 $x227)))
 (let (($x332 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x386 (= $x850 $x332)))
 (let (($x76 (= ?x702 (_ bv0 32))))
 (let (($x120 (=> $x76 $x840)))
 (let (($x45 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x269 (= $x76 $x45)))
 (let (($x465 (and $x269 $x120)))
 (let (($x28 (and $x465 $x386)))
 (let (($x351 (and $x28 $x688)))
 (let (($x324 (and $x351 $x172)))
 (let (($x622 (= ?x443 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x855 (=> $x23 $x622)))
 (let (($x763 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x567 (= $x23 $x763)))
 (let (($x713 (= ?x886 (_ bv0 32))))
 (let (($x707 (=> $x713 $x840)))
 (let (($x22 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x236 (= $x713 $x22)))
 (let (($x545 (and $x236 $x707)))
 (let (($x161 (and $x545 $x567)))
 (let (($x816 (and $x161 $x855)))
 (let (($x477 (and $x816 $x324)))
 (let ((?x565 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x494 (= ?x565 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x828 (bvuge ?x395 (_ bv1 32))))
 (let (($x116 (=> $x828 $x494)))
 (let (($x806 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x111 (= $x828 $x806)))
 (let (($x629 (=> $x773 $x840)))
 (let (($x523 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x489 (= $x773 $x523)))
 (let (($x357 (and $x489 $x629)))
 (let (($x753 (and $x357 $x111)))
 (let (($x63 (and $x753 $x116)))
 (let (($x817 (and $x63 $x477)))
 (let (($x547 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x303 (and $x547 $x817)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x438 (and $x132 $x303)))
 (let (($x674 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x307 (and $x674 $x438)))
 (let (($x621 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x222 (and $x621 $x307)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x147 (and $x262 $x222)))
 (let (($x70 (and $x840 $x147)))
 (let (($x92 (= ?x757 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x634 (and $x92 $x70)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x661 (and $x72 $x634)))
 (let (($x576 (and $x840 $x661)))
 (let (($x333 (= ?x764 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x793 (and $x333 $x576)))
 (let (($x390 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x114 (and $x390 $x793)))
 (let (($x847 (and $x840 $x114)))
 (let (($x196 (= ?x443 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x50 (and $x196 $x847)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x755 (and $x101 $x50)))
 (let (($x496 (and $x840 $x755)))
 (let (($x858 (= ?x565 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x485 (and $x858 $x496)))
 (let (($x684 (bvugt ?x159 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x407 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x613)))
 (let (($x369 (=> (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x407 $x684)))))))
 (let (($x176 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x294)))
 (let (($x612 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x176)))))))
 (let (($x291 (bvugt ?x127 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x566 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x381 (=> (bvule ?x127 (bvsub (bvadd ?x127 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x566 $x291)))))))
 (let (($x513 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x435 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x548 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x435)))
 (let (($x689 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x548 $x513)))))))
 (let (($x203 (and $x689 $x381)))
 (let (($x754 (and $x203 $x612)))
 (let (($x88 (and $x754 $x369)))
 (let (($x509 (and $x88 $x485)))
 (let (($x35 (=> $x509 $x239)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x111 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x271 (bvadd ?x111 ?x131)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x145 (concat ?x33 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x825 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x890 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x247 (bvadd ?x890 (_ bv3 32))))
 (let ((?x665 (concat (select input.dst.llvm-mem ?x247) (concat ?x825 ?x145))))
 (let ((?x415 (bvmul (_ bv4294967295 32) ?x665)))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x53 (concat ?x352 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x797 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x294 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x213 (bvadd ?x294 (_ bv3 32))))
 (let ((?x578 (concat (select input.dst.llvm-mem ?x213) (concat ?x797 ?x53))))
 (let ((?x304 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x862 (concat ?x304 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x848 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x548 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x79 (bvadd ?x548 (_ bv3 32))))
 (let ((?x456 (concat (select input.dst.llvm-mem ?x79) (concat ?x848 ?x862))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x225)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x388)))
 (let ((?x715 (bvadd (bvadd (bvadd ?x382 ?x456) ?x578) ?x415)))
 (let (($x158 (= ?x715 ?x271)))
 (let (($x572 (= $x158 true)))
 (let (($x632 (= $x572 true)))
 (let ((?x377 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x731 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x841 (concat ?x130 (concat ?x359 (concat ?x731 ?x377)))))
 (let (($x128 (= ?x841 input.dst.llvm-%m)))
 (let (($x218 (= $x128 true)))
 (let (($x818 (= $x218 true)))
 (let (($x827 (= input.dst.llvm-%m ?x841)))
 (let ((?x600 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x845 (= (_ bv0 32) ?x600)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x422 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x347 (and $x422 $x93)))
 (let (($x811 (and $x347 $x845)))
 (let (($x885 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x281))))
 (let ((?x432 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (bvuge ?x432 (_ bv1 32))))
 (=> $x542 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x391))))))))
 ))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x432 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (bvuge ?x432 (_ bv1 32))))
 (= $x542 (bvuge ?x560 (_ bv1 32)))))))
 ))
 (let (($x891 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x757 (= false false)))
 (let ((?x432 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x432 (_ bv0 32))))
 (=> $x373 $x757)))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x432 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x432 (_ bv0 32))))
 (= $x373 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x301 (and $x260 $x891)))
 (let (($x34 (and $x301 $x325)))
 (let (($x310 (and $x34 $x885)))
 (let (($x758 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x683 (= (bvand ?x890 (_ bv4294967292 32)) ?x890)))
 (let (($x820 (= (bvand ?x294 (_ bv4294967292 32)) ?x294)))
 (let (($x166 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x294 (bvsub ?x294 (_ bv4 32))) (bvult ?x294 (bvsub ?x294 (_ bv4 32))))))
 (let (($x801 (and true $x166)))
 (let (($x5 (= (bvand ?x548 (_ bv4294967292 32)) ?x548)))
 (let (($x212 (and $x5 $x801)))
 (let (($x716 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x890 (bvsub ?x890 (_ bv8 32))) (bvult ?x890 (bvsub ?x890 (_ bv8 32))))))
 (let (($x234 (and (and (and true $x716) $x212) $x820)))
 (let (($x246 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x679 (and true $x246)))
 (let (($x532 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x231 (and $x532 $x679)))
 (let (($x253 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x548 (bvsub ?x548 (_ bv12 32))) (bvult ?x548 (bvsub ?x548 (_ bv12 32))))))
 (let (($x570 (and (and (and true $x532) $x253) $x231)))
 (let (($x526 (and (and (and (and (and (and $x570 $x234) $x683) $x758) $x310) $x811) $x827)))
 (let (($x77 (= $x526 true)))
 (let (($x295 (= $x77 true)))
 (let (($x121 (= $x295 true)))
 (let (($x743 (= $x570 true)))
 (let (($x630 (= $x743 true)))
 (let (($x861 (= $x630 true)))
 (let (($x379 (and $x234 $x683)))
 (let (($x594 (= $x379 true)))
 (let (($x829 (= $x594 true)))
 (let (($x421 (= $x829 true)))
 (let (($x308 (and $x421 $x861)))
 (let (($x73 (and $x308 $x121)))
 (let (($x842 (and $x73 $x818)))
 (let ((?x386 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x687 (bvuge ?x386 (_ bv1 32))))
 (let ((?x330 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x330 (_ bv0 32))))
 (let (($x693 (and $x68 $x687)))
 (let ((?x474 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x474 (_ bv1 32))))
 (let (($x554 (and $x206 $x693)))
 (let ((?x171 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x171 (_ bv0 32))))
 (let (($x302 (and $x833 $x554)))
 (let (($x725 (and $x302 $x842)))
 (let ((?x707 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x539 (= ?x707 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x433 (bvuge ?x171 (_ bv1 32))))
 (let (($x447 (=> $x433 $x539)))
 (let (($x331 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x537 (= $x433 $x331)))
 (let (($x757 (= false false)))
 (let (($x410 (=> $x833 $x757)))
 (let (($x809 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x100 (= $x833 $x809)))
 (let (($x712 (and $x100 $x410)))
 (let (($x441 (and $x712 $x537)))
 (let (($x428 (and $x441 $x447)))
 (let (($x726 (and $x428 $x725)))
 (let (($x835 (= ?x111 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x616 (=> $x206 $x835)))
 (let (($x439 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x96 (= $x206 $x439)))
 (let (($x762 (= ?x474 (_ bv0 32))))
 (let (($x175 (=> $x762 $x757)))
 (let (($x160 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x770 (= $x762 $x160)))
 (let (($x14 (and $x770 $x175)))
 (let (($x346 (and $x14 $x96)))
 (let (($x802 (and $x346 $x616)))
 (let (($x356 (and $x802 $x726)))
 (let ((?x547 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x385 (= ?x547 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x223 (bvuge ?x330 (_ bv1 32))))
 (let (($x627 (=> $x223 $x385)))
 (let (($x155 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x136 (= $x223 $x155)))
 (let (($x85 (=> $x68 $x757)))
 (let (($x208 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x796 (= $x68 $x208)))
 (let (($x670 (and $x796 $x85)))
 (let (($x173 (and $x670 $x136)))
 (let (($x563 (and $x173 $x627)))
 (let (($x193 (and $x563 $x356)))
 (let (($x362 (= ?x131 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x584 (=> $x687 $x362)))
 (let (($x650 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x342 (= $x687 $x650)))
 (let (($x28 (= ?x386 (_ bv0 32))))
 (let (($x227 (=> $x28 $x757)))
 (let (($x850 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x807 (= $x28 $x850)))
 (let (($x688 (and $x807 $x227)))
 (let (($x587 (and $x688 $x342)))
 (let (($x853 (and $x587 $x584)))
 (let (($x424 (and $x853 $x193)))
 (let (($x702 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x849 (and $x702 $x424)))
 (let (($x816 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x617 (and $x816 $x849)))
 (let (($x622 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x798 (and $x622 $x617)))
 (let (($x161 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x593 (and $x161 $x798)))
 (let (($x763 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x194 (and $x763 $x593)))
 (let (($x774 (and $x757 $x194)))
 (let (($x545 (= ?x707 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x822 (and $x545 $x774)))
 (let (($x494 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x639 (and $x494 $x822)))
 (let (($x536 (and $x757 $x639)))
 (let (($x753 (= ?x111 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x830 (and $x753 $x536)))
 (let (($x773 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x376 (and $x773 $x830)))
 (let (($x681 (and $x757 $x376)))
 (let (($x370 (= ?x547 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x852 (and $x370 $x681)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x472 (and $x92 $x852)))
 (let (($x603 (and $x757 $x472)))
 (let (($x72 (= ?x131 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x449 (and $x72 $x603)))
 (let (($x288 (bvugt ?x294 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x888 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x213)))
 (let (($x858 (=> (bvule ?x294 (bvsub (bvadd ?x294 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x888 $x288)))))))
 (let (($x123 (bvugt ?x890 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x247)))
 (let (($x824 (=> (bvule ?x890 (bvsub (bvadd ?x890 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x123)))))))
 (let (($x180 (bvugt ?x548 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x463 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x394 (=> (bvule ?x548 (bvsub (bvadd ?x548 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x463 $x180)))))))
 (let (($x339 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x435 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x452 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x435 $x339)))))))
 (let (($x750 (and $x452 $x394)))
 (let (($x47 (and $x750 $x824)))
 (let (($x312 (and $x47 $x858)))
 (let (($x851 (and $x312 $x449)))
 (let (($x290 (=> $x851 $x632)))
 (not $x290))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x111 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x271 (bvadd ?x111 ?x131)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x145 (concat ?x33 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x825 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x890 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x247 (bvadd ?x890 (_ bv3 32))))
 (let ((?x665 (concat (select input.dst.llvm-mem ?x247) (concat ?x825 ?x145))))
 (let ((?x415 (bvmul (_ bv4294967295 32) ?x665)))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x53 (concat ?x352 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x797 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x294 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x213 (bvadd ?x294 (_ bv3 32))))
 (let ((?x578 (concat (select input.dst.llvm-mem ?x213) (concat ?x797 ?x53))))
 (let ((?x304 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x862 (concat ?x304 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x848 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x548 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x79 (bvadd ?x548 (_ bv3 32))))
 (let ((?x456 (concat (select input.dst.llvm-mem ?x79) (concat ?x848 ?x862))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x225)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x388)))
 (let ((?x715 (bvadd (bvadd (bvadd ?x382 ?x456) ?x578) ?x415)))
 (let (($x158 (= ?x715 ?x271)))
 (let (($x572 (= $x158 true)))
 (let (($x632 (= $x572 true)))
 (let ((?x377 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x731 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x841 (concat ?x130 (concat ?x359 (concat ?x731 ?x377)))))
 (let (($x128 (= ?x841 input.dst.llvm-%m)))
 (let (($x218 (= $x128 true)))
 (let (($x818 (= $x218 true)))
 (let (($x827 (= input.dst.llvm-%m ?x841)))
 (let ((?x600 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x845 (= (_ bv0 32) ?x600)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x422 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x347 (and $x422 $x93)))
 (let (($x811 (and $x347 $x845)))
 (let (($x885 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x281))))
 (let ((?x432 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (bvuge ?x432 (_ bv1 32))))
 (=> $x542 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x391))))))))
 ))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x432 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (bvuge ?x432 (_ bv1 32))))
 (= $x542 (bvuge ?x560 (_ bv1 32)))))))
 ))
 (let (($x891 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x757 (= false false)))
 (let ((?x432 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x432 (_ bv0 32))))
 (=> $x373 $x757)))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x432 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x432 (_ bv0 32))))
 (= $x373 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x301 (and $x260 $x891)))
 (let (($x34 (and $x301 $x325)))
 (let (($x310 (and $x34 $x885)))
 (let (($x758 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x683 (= (bvand ?x890 (_ bv4294967292 32)) ?x890)))
 (let (($x820 (= (bvand ?x294 (_ bv4294967292 32)) ?x294)))
 (let (($x166 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x294 (bvsub ?x294 (_ bv4 32))) (bvult ?x294 (bvsub ?x294 (_ bv4 32))))))
 (let (($x801 (and true $x166)))
 (let (($x5 (= (bvand ?x548 (_ bv4294967292 32)) ?x548)))
 (let (($x212 (and $x5 $x801)))
 (let (($x716 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x890 (bvsub ?x890 (_ bv8 32))) (bvult ?x890 (bvsub ?x890 (_ bv8 32))))))
 (let (($x234 (and (and (and true $x716) $x212) $x820)))
 (let (($x246 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x679 (and true $x246)))
 (let (($x532 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x231 (and $x532 $x679)))
 (let (($x253 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x548 (bvsub ?x548 (_ bv12 32))) (bvult ?x548 (bvsub ?x548 (_ bv12 32))))))
 (let (($x570 (and (and (and true $x532) $x253) $x231)))
 (let (($x526 (and (and (and (and (and (and $x570 $x234) $x683) $x758) $x310) $x811) $x827)))
 (let (($x77 (= $x526 true)))
 (let (($x295 (= $x77 true)))
 (let (($x121 (= $x295 true)))
 (let (($x743 (= $x570 true)))
 (let (($x630 (= $x743 true)))
 (let (($x861 (= $x630 true)))
 (let (($x379 (and $x234 $x683)))
 (let (($x594 (= $x379 true)))
 (let (($x829 (= $x594 true)))
 (let (($x421 (= $x829 true)))
 (let (($x308 (and $x421 $x861)))
 (let (($x73 (and $x308 $x121)))
 (let (($x842 (and $x73 $x818)))
 (let ((?x386 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x687 (bvuge ?x386 (_ bv1 32))))
 (let ((?x330 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x330 (_ bv0 32))))
 (let (($x693 (and $x68 $x687)))
 (let ((?x474 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x474 (_ bv1 32))))
 (let (($x554 (and $x206 $x693)))
 (let ((?x171 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x171 (_ bv0 32))))
 (let (($x302 (and $x833 $x554)))
 (let (($x725 (and $x302 $x842)))
 (let ((?x707 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x539 (= ?x707 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x433 (bvuge ?x171 (_ bv1 32))))
 (let (($x447 (=> $x433 $x539)))
 (let (($x331 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x537 (= $x433 $x331)))
 (let (($x757 (= false false)))
 (let (($x410 (=> $x833 $x757)))
 (let (($x809 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x100 (= $x833 $x809)))
 (let (($x712 (and $x100 $x410)))
 (let (($x441 (and $x712 $x537)))
 (let (($x428 (and $x441 $x447)))
 (let (($x726 (and $x428 $x725)))
 (let (($x835 (= ?x111 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x616 (=> $x206 $x835)))
 (let (($x439 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x96 (= $x206 $x439)))
 (let (($x762 (= ?x474 (_ bv0 32))))
 (let (($x175 (=> $x762 $x757)))
 (let (($x160 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x770 (= $x762 $x160)))
 (let (($x14 (and $x770 $x175)))
 (let (($x346 (and $x14 $x96)))
 (let (($x802 (and $x346 $x616)))
 (let (($x356 (and $x802 $x726)))
 (let ((?x547 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x385 (= ?x547 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x223 (bvuge ?x330 (_ bv1 32))))
 (let (($x627 (=> $x223 $x385)))
 (let (($x155 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x136 (= $x223 $x155)))
 (let (($x85 (=> $x68 $x757)))
 (let (($x208 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x796 (= $x68 $x208)))
 (let (($x670 (and $x796 $x85)))
 (let (($x173 (and $x670 $x136)))
 (let (($x563 (and $x173 $x627)))
 (let (($x193 (and $x563 $x356)))
 (let (($x362 (= ?x131 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x584 (=> $x687 $x362)))
 (let (($x650 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x342 (= $x687 $x650)))
 (let (($x28 (= ?x386 (_ bv0 32))))
 (let (($x227 (=> $x28 $x757)))
 (let (($x850 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x807 (= $x28 $x850)))
 (let (($x688 (and $x807 $x227)))
 (let (($x587 (and $x688 $x342)))
 (let (($x853 (and $x587 $x584)))
 (let (($x424 (and $x853 $x193)))
 (let (($x702 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x849 (and $x702 $x424)))
 (let (($x816 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x617 (and $x816 $x849)))
 (let (($x622 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x798 (and $x622 $x617)))
 (let (($x161 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x593 (and $x161 $x798)))
 (let (($x763 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x194 (and $x763 $x593)))
 (let (($x774 (and $x757 $x194)))
 (let (($x545 (= ?x707 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x822 (and $x545 $x774)))
 (let (($x494 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x639 (and $x494 $x822)))
 (let (($x536 (and $x757 $x639)))
 (let (($x753 (= ?x111 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x830 (and $x753 $x536)))
 (let (($x773 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x376 (and $x773 $x830)))
 (let (($x681 (and $x757 $x376)))
 (let (($x370 (= ?x547 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x852 (and $x370 $x681)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x472 (and $x92 $x852)))
 (let (($x603 (and $x757 $x472)))
 (let (($x72 (= ?x131 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x449 (and $x72 $x603)))
 (let (($x288 (bvugt ?x294 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x888 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x213)))
 (let (($x858 (=> (bvule ?x294 (bvsub (bvadd ?x294 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x888 $x288)))))))
 (let (($x123 (bvugt ?x890 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x247)))
 (let (($x824 (=> (bvule ?x890 (bvsub (bvadd ?x890 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x123)))))))
 (let (($x180 (bvugt ?x548 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x463 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x394 (=> (bvule ?x548 (bvsub (bvadd ?x548 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x463 $x180)))))))
 (let (($x339 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x435 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x452 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x435 $x339)))))))
 (let (($x750 (and $x452 $x394)))
 (let (($x47 (and $x750 $x824)))
 (let (($x312 (and $x47 $x858)))
 (let (($x851 (and $x312 $x449)))
 (let (($x290 (=> $x851 $x632)))
 (not $x290))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 241 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x454 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x889 (concat ?x454 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x799 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x176 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x794 (bvadd ?x176 (_ bv3 32))))
 (let ((?x680 (concat (select input.dst.llvm-mem ?x794) (concat ?x799 ?x889))))
 (let ((?x506 (bvmul (_ bv4294967295 32) ?x680)))
 (let ((?x839 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x699 (concat ?x839 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x247 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x761 (bvadd ?x247 (_ bv3 32))))
 (let ((?x535 (concat (select input.dst.llvm-mem ?x761) (concat ?x267 ?x699))))
 (let ((?x486 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x784 (concat ?x486 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x590 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x339 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x651 (bvadd ?x339 (_ bv3 32))))
 (let ((?x857 (concat (select input.dst.llvm-mem ?x651) (concat ?x590 ?x784))))
 (let ((?x543 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x543)))
 (let ((?x780 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x149)))
 (let ((?x604 (bvadd (bvadd (bvadd ?x780 ?x857) ?x535) ?x506)))
 (let ((?x342 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x45 (= ?x342 ?x604)))
 (let (($x269 (= $x45 true)))
 (let (($x351 (= $x269 true)))
 (let ((?x787 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x657 (concat ?x7 (concat ?x37 (concat ?x102 ?x787)))))
 (let (($x224 (= ?x657 input.dst.llvm-%m)))
 (let (($x289 (= $x224 true)))
 (let (($x239 (= $x289 true)))
 (let (($x211 (= input.dst.llvm-%m ?x657)))
 (let ((?x303 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x98 (= (_ bv0 32) ?x303)))
 (let ((?x324 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x477 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x324)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x817 (and $x172 $x477)))
 (let (($x243 (and $x817 $x98)))
 (let (($x337 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x32 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x529 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x106))))
 (let ((?x489 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x489 (_ bv1 32))))
 (=> $x147 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x529))))))))
 ))
 (let (($x216 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x840 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x489 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x489 (_ bv1 32))))
 (= $x147 (bvuge ?x840 (_ bv1 32)))))))
 ))
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x707 (= false false)))
 (let ((?x489 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (= ?x489 (_ bv0 32))))
 (=> $x629 $x707)))))
 ))
 (let (($x262 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (= ?x489 (_ bv0 32))))
 (= $x629 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x553 (and $x262 $x674)))
 (let (($x661 (and $x553 $x216)))
 (let (($x241 (and $x661 $x337)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x402 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x805 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 (_ bv4 32))) (bvult ?x247 (bvsub ?x247 (_ bv4 32))))))
 (let (($x789 (and true $x805)))
 (let (($x634 (= (bvand ?x339 (_ bv4294967292 32)) ?x339)))
 (let (($x393 (and $x634 $x789)))
 (let (($x325 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv8 32))) (bvult ?x176 (bvsub ?x176 (_ bv8 32))))))
 (let (($x391 (and (and (and true $x325) $x393) $x402)))
 (let (($x82 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x731 (and true $x82)))
 (let (($x93 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x377 (and $x93 $x731)))
 (let (($x846 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x339 (bvsub ?x339 (_ bv12 32))) (bvult ?x339 (bvsub ?x339 (_ bv12 32))))))
 (let (($x841 (and (and (and true $x93) $x846) $x377)))
 (let (($x41 (and (and (and (and (and (and $x841 $x391) $x150) $x73) $x241) $x243) $x211)))
 (let (($x387 (= $x41 true)))
 (let (($x258 (= $x387 true)))
 (let (($x264 (= $x258 true)))
 (let (($x827 (= $x841 true)))
 (let (($x526 (= $x827 true)))
 (let (($x77 (= $x526 true)))
 (let (($x885 (and $x391 $x150)))
 (let (($x310 (= $x885 true)))
 (let (($x671 (= $x310 true)))
 (let (($x422 (= $x671 true)))
 (let (($x295 (and $x422 $x77)))
 (let (($x460 (and $x295 $x264)))
 (let (($x473 (and $x460 $x239)))
 (let ((?x96 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x96 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x302 (_ bv0 32))))
 (let (($x260 (and $x646 $x346)))
 (let ((?x594 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x594 (_ bv1 32))))
 (let (($x698 (and $x253 $x260)))
 (let ((?x644 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x644 (_ bv0 32))))
 (let (($x891 (and $x55 $x698)))
 (let (($x35 (and $x891 $x473)))
 (let ((?x85 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x560 (= ?x85 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x222 (bvuge ?x644 (_ bv1 32))))
 (let (($x284 (=> $x222 $x560)))
 (let (($x414 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x71 (= $x222 $x414)))
 (let (($x707 (= false false)))
 (let (($x758 (=> $x55 $x707)))
 (let (($x861 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x837 (= $x55 $x861)))
 (let (($x9 (and $x837 $x758)))
 (let (($x728 (and $x9 $x71)))
 (let (($x133 (and $x728 $x284)))
 (let (($x184 (and $x133 $x35)))
 (let (($x204 (= ?x342 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x695 (=> $x253 $x204)))
 (let (($x115 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x285 (= $x253 $x115)))
 (let (($x829 (= ?x594 (_ bv0 32))))
 (let (($x779 (=> $x829 $x707)))
 (let (($x683 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x421 (= $x829 $x683)))
 (let (($x532 (and $x421 $x779)))
 (let (($x484 (and $x532 $x285)))
 (let (($x404 (and $x484 $x695)))
 (let (($x615 (and $x404 $x184)))
 (let ((?x702 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x418 (= ?x702 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x188 (bvuge ?x302 (_ bv1 32))))
 (let (($x166 (=> $x188 $x418)))
 (let (($x5 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x487 (= $x188 $x5)))
 (let (($x124 (=> $x646 $x707)))
 (let (($x693 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x678 (= $x646 $x693)))
 (let (($x338 (and $x678 $x124)))
 (let (($x669 (and $x338 $x487)))
 (let (($x801 (and $x669 $x166)))
 (let (($x510 (and $x801 $x615)))
 (let ((?x843 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x712 (= ?x843 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x809 (bvuge ?x96 (_ bv1 32))))
 (let (($x433 (=> $x809 $x712)))
 (let (($x170 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x100 (= $x809 $x170)))
 (let (($x835 (=> $x346 $x707)))
 (let (($x206 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x813 (= $x346 $x206)))
 (let (($x616 (and $x813 $x835)))
 (let (($x410 (and $x616 $x100)))
 (let (($x331 (and $x410 $x433)))
 (let (($x544 (and $x331 $x510)))
 (let (($x474 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x268 (and $x474 $x544)))
 (let (($x563 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x826 (and $x563 $x268)))
 (let (($x385 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x581 (and $x385 $x826)))
 (let (($x173 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x168 (and $x173 $x581)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x675 (and $x155 $x168)))
 (let (($x742 (and $x707 $x675)))
 (let (($x670 (= ?x85 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x854 (and $x670 $x742)))
 (let (($x362 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x248 (and $x362 $x854)))
 (let (($x178 (and $x707 $x248)))
 (let (($x587 (= ?x342 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x411 (and $x587 $x178)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x863 (and $x28 $x411)))
 (let (($x502 (and $x707 $x863)))
 (let (($x332 (= ?x702 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x745 (and $x332 $x502)))
 (let (($x545 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x263 (and $x545 $x745)))
 (let (($x353 (and $x707 $x263)))
 (let (($x494 (= ?x843 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x734 (and $x494 $x353)))
 (let (($x88 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x369 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x761)))
 (let (($x72 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x369 $x88)))))))
 (let (($x754 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x612 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x794)))
 (let (($x684 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x612 $x754)))))))
 (let (($x203 (bvugt ?x339 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x381 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x651)))
 (let (($x97 (=> (bvule ?x339 (bvsub (bvadd ?x339 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x381 $x203)))))))
 (let (($x721 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x475 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x689 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x475)))
 (let (($x291 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x689 $x721)))))))
 (let (($x6 (and $x291 $x97)))
 (let (($x776 (and $x6 $x684)))
 (let (($x488 (and $x776 $x72)))
 (let (($x11 (and $x488 $x734)))
 (let (($x778 (=> $x11 $x351)))
 (not $x778)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x454 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x889 (concat ?x454 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x799 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x176 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x794 (bvadd ?x176 (_ bv3 32))))
 (let ((?x680 (concat (select input.dst.llvm-mem ?x794) (concat ?x799 ?x889))))
 (let ((?x506 (bvmul (_ bv4294967295 32) ?x680)))
 (let ((?x839 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x699 (concat ?x839 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x247 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x761 (bvadd ?x247 (_ bv3 32))))
 (let ((?x535 (concat (select input.dst.llvm-mem ?x761) (concat ?x267 ?x699))))
 (let ((?x486 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x784 (concat ?x486 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x590 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x339 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x651 (bvadd ?x339 (_ bv3 32))))
 (let ((?x857 (concat (select input.dst.llvm-mem ?x651) (concat ?x590 ?x784))))
 (let ((?x543 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x543)))
 (let ((?x780 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x149)))
 (let ((?x604 (bvadd (bvadd (bvadd ?x780 ?x857) ?x535) ?x506)))
 (let ((?x342 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x45 (= ?x342 ?x604)))
 (let (($x269 (= $x45 true)))
 (let (($x351 (= $x269 true)))
 (let ((?x787 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x657 (concat ?x7 (concat ?x37 (concat ?x102 ?x787)))))
 (let (($x224 (= ?x657 input.dst.llvm-%m)))
 (let (($x289 (= $x224 true)))
 (let (($x239 (= $x289 true)))
 (let (($x211 (= input.dst.llvm-%m ?x657)))
 (let ((?x303 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x98 (= (_ bv0 32) ?x303)))
 (let ((?x324 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x477 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x324)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x817 (and $x172 $x477)))
 (let (($x243 (and $x817 $x98)))
 (let (($x337 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x32 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x529 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x106))))
 (let ((?x489 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x489 (_ bv1 32))))
 (=> $x147 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x529))))))))
 ))
 (let (($x216 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x840 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x489 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x489 (_ bv1 32))))
 (= $x147 (bvuge ?x840 (_ bv1 32)))))))
 ))
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x707 (= false false)))
 (let ((?x489 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (= ?x489 (_ bv0 32))))
 (=> $x629 $x707)))))
 ))
 (let (($x262 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (= ?x489 (_ bv0 32))))
 (= $x629 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x553 (and $x262 $x674)))
 (let (($x661 (and $x553 $x216)))
 (let (($x241 (and $x661 $x337)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x402 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x805 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 (_ bv4 32))) (bvult ?x247 (bvsub ?x247 (_ bv4 32))))))
 (let (($x789 (and true $x805)))
 (let (($x634 (= (bvand ?x339 (_ bv4294967292 32)) ?x339)))
 (let (($x393 (and $x634 $x789)))
 (let (($x325 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv8 32))) (bvult ?x176 (bvsub ?x176 (_ bv8 32))))))
 (let (($x391 (and (and (and true $x325) $x393) $x402)))
 (let (($x82 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x731 (and true $x82)))
 (let (($x93 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x377 (and $x93 $x731)))
 (let (($x846 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x339 (bvsub ?x339 (_ bv12 32))) (bvult ?x339 (bvsub ?x339 (_ bv12 32))))))
 (let (($x841 (and (and (and true $x93) $x846) $x377)))
 (let (($x41 (and (and (and (and (and (and $x841 $x391) $x150) $x73) $x241) $x243) $x211)))
 (let (($x387 (= $x41 true)))
 (let (($x258 (= $x387 true)))
 (let (($x264 (= $x258 true)))
 (let (($x827 (= $x841 true)))
 (let (($x526 (= $x827 true)))
 (let (($x77 (= $x526 true)))
 (let (($x885 (and $x391 $x150)))
 (let (($x310 (= $x885 true)))
 (let (($x671 (= $x310 true)))
 (let (($x422 (= $x671 true)))
 (let (($x295 (and $x422 $x77)))
 (let (($x460 (and $x295 $x264)))
 (let (($x473 (and $x460 $x239)))
 (let ((?x96 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x96 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x302 (_ bv0 32))))
 (let (($x260 (and $x646 $x346)))
 (let ((?x594 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x594 (_ bv1 32))))
 (let (($x698 (and $x253 $x260)))
 (let ((?x644 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x644 (_ bv0 32))))
 (let (($x891 (and $x55 $x698)))
 (let (($x35 (and $x891 $x473)))
 (let ((?x85 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x560 (= ?x85 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x222 (bvuge ?x644 (_ bv1 32))))
 (let (($x284 (=> $x222 $x560)))
 (let (($x414 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x71 (= $x222 $x414)))
 (let (($x707 (= false false)))
 (let (($x758 (=> $x55 $x707)))
 (let (($x861 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x837 (= $x55 $x861)))
 (let (($x9 (and $x837 $x758)))
 (let (($x728 (and $x9 $x71)))
 (let (($x133 (and $x728 $x284)))
 (let (($x184 (and $x133 $x35)))
 (let (($x204 (= ?x342 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x695 (=> $x253 $x204)))
 (let (($x115 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x285 (= $x253 $x115)))
 (let (($x829 (= ?x594 (_ bv0 32))))
 (let (($x779 (=> $x829 $x707)))
 (let (($x683 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x421 (= $x829 $x683)))
 (let (($x532 (and $x421 $x779)))
 (let (($x484 (and $x532 $x285)))
 (let (($x404 (and $x484 $x695)))
 (let (($x615 (and $x404 $x184)))
 (let ((?x702 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x418 (= ?x702 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x188 (bvuge ?x302 (_ bv1 32))))
 (let (($x166 (=> $x188 $x418)))
 (let (($x5 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x487 (= $x188 $x5)))
 (let (($x124 (=> $x646 $x707)))
 (let (($x693 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x678 (= $x646 $x693)))
 (let (($x338 (and $x678 $x124)))
 (let (($x669 (and $x338 $x487)))
 (let (($x801 (and $x669 $x166)))
 (let (($x510 (and $x801 $x615)))
 (let ((?x843 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x712 (= ?x843 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x809 (bvuge ?x96 (_ bv1 32))))
 (let (($x433 (=> $x809 $x712)))
 (let (($x170 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x100 (= $x809 $x170)))
 (let (($x835 (=> $x346 $x707)))
 (let (($x206 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x813 (= $x346 $x206)))
 (let (($x616 (and $x813 $x835)))
 (let (($x410 (and $x616 $x100)))
 (let (($x331 (and $x410 $x433)))
 (let (($x544 (and $x331 $x510)))
 (let (($x474 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x268 (and $x474 $x544)))
 (let (($x563 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x826 (and $x563 $x268)))
 (let (($x385 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x581 (and $x385 $x826)))
 (let (($x173 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x168 (and $x173 $x581)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x675 (and $x155 $x168)))
 (let (($x742 (and $x707 $x675)))
 (let (($x670 (= ?x85 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x854 (and $x670 $x742)))
 (let (($x362 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x248 (and $x362 $x854)))
 (let (($x178 (and $x707 $x248)))
 (let (($x587 (= ?x342 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x411 (and $x587 $x178)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x863 (and $x28 $x411)))
 (let (($x502 (and $x707 $x863)))
 (let (($x332 (= ?x702 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x745 (and $x332 $x502)))
 (let (($x545 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x263 (and $x545 $x745)))
 (let (($x353 (and $x707 $x263)))
 (let (($x494 (= ?x843 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x734 (and $x494 $x353)))
 (let (($x88 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x369 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x761)))
 (let (($x72 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x369 $x88)))))))
 (let (($x754 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x612 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x794)))
 (let (($x684 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x612 $x754)))))))
 (let (($x203 (bvugt ?x339 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x381 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x651)))
 (let (($x97 (=> (bvule ?x339 (bvsub (bvadd ?x339 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x381 $x203)))))))
 (let (($x721 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x475 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x689 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x475)))
 (let (($x291 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x689 $x721)))))))
 (let (($x6 (and $x291 $x97)))
 (let (($x776 (and $x6 $x684)))
 (let (($x488 (and $x776 $x72)))
 (let (($x11 (and $x488 $x734)))
 (let (($x778 (=> $x11 $x351)))
 (not $x778)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 240 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x474 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x770 (bvmul (_ bv4294967295 32) ?x474)))
 (let ((?x465 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x802 (bvadd ?x465 ?x770)))
 (let ((?x537 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x441 (concat ?x537 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x539 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x123 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x159 (bvadd ?x123 (_ bv3 32))))
 (let ((?x75 (concat (select input.dst.llvm-mem ?x159) (concat ?x539 ?x441))))
 (let ((?x189 (bvmul (_ bv4294967295 32) ?x75)))
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x373 (concat ?x432 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x637 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x794 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x565 (bvadd ?x794 (_ bv3 32))))
 (let ((?x727 (concat (select input.dst.llvm-mem ?x565) (concat ?x637 ?x373))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x380 (concat ?x323 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x246 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x689 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x767 (bvadd ?x689 (_ bv3 32))))
 (let ((?x570 (concat (select input.dst.llvm-mem ?x767) (concat ?x246 ?x380))))
 (let ((?x847 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x847)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x496)))
 (let ((?x160 (bvadd (bvadd (bvadd ?x114 ?x570) ?x727) ?x189)))
 (let (($x413 (= ?x160 ?x802)))
 (let (($x171 (= $x413 true)))
 (let (($x833 (= $x171 true)))
 (let ((?x819 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x569 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x520 (concat ?x81 (concat ?x569 (concat ?x53 ?x819)))))
 (let (($x632 (= ?x520 input.dst.llvm-%m)))
 (let (($x290 (= $x632 true)))
 (let (($x613 (= $x290 true)))
 (let (($x578 (= input.dst.llvm-%m ?x520)))
 (let ((?x306 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x230 (= (_ bv0 32) ?x306)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x424 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x356 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x849 (and $x356 $x424)))
 (let (($x797 (and $x849 $x230)))
 (let (($x842 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x462 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x261))))
 (let ((?x227 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x774 (bvuge ?x227 (_ bv1 32))))
 (=> $x774 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x462))))))))
 ))
 (let (($x639 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x774 (bvuge ?x227 (_ bv1 32))))
 (= $x774 (bvuge ?x120 (_ bv1 32)))))))
 ))
 (let (($x395 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x85 (= false false)))
 (let ((?x227 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x571 (= ?x227 (_ bv0 32))))
 (=> $x571 $x85)))))
 ))
 (let (($x567 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x227 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x571 (= ?x227 (_ bv0 32))))
 (= $x571 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x187 (and $x567 $x395)))
 (let (($x237 (and $x187 $x639)))
 (let (($x726 (and $x237 $x842)))
 (let (($x460 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x741 (= (bvand ?x123 (_ bv4294967292 32)) ?x123)))
 (let (($x608 (= (bvand ?x794 (_ bv4294967292 32)) ?x794)))
 (let (($x648 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x794 (bvsub ?x794 (_ bv4 32))) (bvult ?x794 (bvsub ?x794 (_ bv4 32))))))
 (let (($x429 (and true $x648)))
 (let (($x822 (= (bvand ?x689 (_ bv4294967292 32)) ?x689)))
 (let (($x606 (and $x822 $x429)))
 (let (($x216 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x123 (bvsub ?x123 (_ bv8 32))) (bvult ?x123 (bvsub ?x123 (_ bv8 32))))))
 (let (($x529 (and (and (and true $x216) $x606) $x608)))
 (let (($x108 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x102 (and true $x108)))
 (let (($x477 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x787 (and $x477 $x102)))
 (let (($x232 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x689 (bvsub ?x689 (_ bv12 32))) (bvult ?x689 (bvsub ?x689 (_ bv12 32))))))
 (let (($x657 (and (and (and true $x477) $x232) $x787)))
 (let (($x665 (and (and (and (and (and (and $x657 $x529) $x741) $x460) $x726) $x797) $x578)))
 (let (($x715 (= $x665 true)))
 (let (($x271 (= $x715 true)))
 (let (($x158 (= $x271 true)))
 (let (($x211 (= $x657 true)))
 (let (($x41 (= $x211 true)))
 (let (($x387 (= $x41 true)))
 (let (($x337 (and $x529 $x741)))
 (let (($x241 (= $x337 true)))
 (let (($x207 (= $x241 true)))
 (let (($x172 (= $x207 true)))
 (let (($x258 (and $x172 $x387)))
 (let (($x572 (and $x258 $x158)))
 (let (($x579 (and $x572 $x613)))
 (let ((?x285 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x861 (bvuge ?x285 (_ bv1 32))))
 (let ((?x891 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x891 (_ bv1 32))))
 (let (($x262 (and $x348 $x861)))
 (let ((?x310 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x671 (= ?x310 (_ bv0 32))))
 (let (($x621 (and $x671 $x262)))
 (let ((?x610 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x375 (= ?x610 (_ bv0 32))))
 (let (($x674 (and $x375 $x621)))
 (let (($x99 (and $x674 $x579)))
 (let ((?x124 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x840 (= ?x124 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x593 (bvuge ?x610 (_ bv1 32))))
 (let (($x672 (=> $x593 $x840)))
 (let (($x335 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x63 (= $x593 $x335)))
 (let (($x85 (= false false)))
 (let (($x73 (=> $x375 $x85)))
 (let (($x77 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x121 (= $x375 $x77)))
 (let (($x43 (and $x121 $x73)))
 (let (($x713 (and $x43 $x63)))
 (let (($x87 (and $x713 $x672)))
 (let (($x792 (and $x87 $x99)))
 (let ((?x100 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x769 (= ?x100 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x846 (bvuge ?x310 (_ bv1 32))))
 (let (($x192 (=> $x846 $x769)))
 (let (($x811 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x860 (= $x846 $x811)))
 (let (($x329 (=> $x671 $x85)))
 (let (($x150 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x422 (= $x671 $x150)))
 (let (($x93 (and $x422 $x329)))
 (let (($x130 (and $x93 $x860)))
 (let (($x359 (and $x130 $x192)))
 (let (($x101 (and $x359 $x792)))
 (let (($x29 (= ?x474 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x805 (=> $x348 $x29)))
 (let (($x634 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x575 (= $x348 $x634)))
 (let (($x542 (= ?x891 (_ bv0 32))))
 (let (($x884 (=> $x542 $x85)))
 (let (($x260 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x301 (= $x542 $x260)))
 (let (($x240 (and $x301 $x884)))
 (let (($x327 (and $x240 $x575)))
 (let (($x789 (and $x327 $x805)))
 (let (($x886 (and $x789 $x101)))
 (let (($x9 (= ?x465 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x222 (=> $x861 $x9)))
 (let (($x743 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x837 (= $x861 $x743)))
 (let (($x484 (= ?x285 (_ bv0 32))))
 (let (($x204 (=> $x484 $x85)))
 (let (($x253 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x834 (= $x484 $x253)))
 (let (($x695 (and $x834 $x204)))
 (let (($x758 (and $x695 $x837)))
 (let (($x414 (and $x758 $x222)))
 (let (($x595 (and $x414 $x886)))
 (let (($x594 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x445 (and $x594 $x595)))
 (let (($x801 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x443 (and $x801 $x445)))
 (let (($x418 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x196 (and $x418 $x443)))
 (let (($x669 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x390 (and $x669 $x196)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x538 (and $x5 $x390)))
 (let (($x357 (and $x85 $x538)))
 (let (($x338 (= ?x124 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x22 (and $x338 $x357)))
 (let (($x712 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x828 (and $x712 $x22)))
 (let (($x711 (and $x85 $x828)))
 (let (($x410 (= ?x100 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x132 (and $x410 $x711)))
 (let (($x346 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x764 (and $x346 $x132)))
 (let (($x864 (and $x85 $x764)))
 (let (($x439 (= ?x474 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x438 (and $x439 $x864)))
 (let (($x670 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x746 (and $x670 $x438)))
 (let (($x265 (and $x85 $x746)))
 (let (($x362 (= ?x465 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x585 (and $x362 $x265)))
 (let (($x312 (bvugt ?x794 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x858 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x565)))
 (let (($x494 (=> (bvule ?x794 (bvsub (bvadd ?x794 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x858 $x312)))))))
 (let (($x47 (bvugt ?x123 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x824 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x288 (=> (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x824 $x47)))))))
 (let (($x750 (bvugt ?x689 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x767)))
 (let (($x255 (=> (bvule ?x689 (bvsub (bvadd ?x689 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x394 $x750)))))))
 (let (($x475 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x423 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x435 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x423)))
 (let (($x180 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x435 $x475)))))))
 (let (($x890 (and $x180 $x255)))
 (let (($x407 (and $x890 $x288)))
 (let (($x333 (and $x407 $x494)))
 (let (($x576 (and $x333 $x585)))
 (let (($x15 (=> $x576 $x833)))
 (not $x15)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x474 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x770 (bvmul (_ bv4294967295 32) ?x474)))
 (let ((?x465 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x802 (bvadd ?x465 ?x770)))
 (let ((?x537 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x441 (concat ?x537 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x539 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x123 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x159 (bvadd ?x123 (_ bv3 32))))
 (let ((?x75 (concat (select input.dst.llvm-mem ?x159) (concat ?x539 ?x441))))
 (let ((?x189 (bvmul (_ bv4294967295 32) ?x75)))
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x373 (concat ?x432 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x637 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x794 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x565 (bvadd ?x794 (_ bv3 32))))
 (let ((?x727 (concat (select input.dst.llvm-mem ?x565) (concat ?x637 ?x373))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x380 (concat ?x323 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x246 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x689 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x767 (bvadd ?x689 (_ bv3 32))))
 (let ((?x570 (concat (select input.dst.llvm-mem ?x767) (concat ?x246 ?x380))))
 (let ((?x847 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x847)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x496)))
 (let ((?x160 (bvadd (bvadd (bvadd ?x114 ?x570) ?x727) ?x189)))
 (let (($x413 (= ?x160 ?x802)))
 (let (($x171 (= $x413 true)))
 (let (($x833 (= $x171 true)))
 (let ((?x819 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x569 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x520 (concat ?x81 (concat ?x569 (concat ?x53 ?x819)))))
 (let (($x632 (= ?x520 input.dst.llvm-%m)))
 (let (($x290 (= $x632 true)))
 (let (($x613 (= $x290 true)))
 (let (($x578 (= input.dst.llvm-%m ?x520)))
 (let ((?x306 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x230 (= (_ bv0 32) ?x306)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x424 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x356 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x849 (and $x356 $x424)))
 (let (($x797 (and $x849 $x230)))
 (let (($x842 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x462 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x261))))
 (let ((?x227 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x774 (bvuge ?x227 (_ bv1 32))))
 (=> $x774 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x462))))))))
 ))
 (let (($x639 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x774 (bvuge ?x227 (_ bv1 32))))
 (= $x774 (bvuge ?x120 (_ bv1 32)))))))
 ))
 (let (($x395 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x85 (= false false)))
 (let ((?x227 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x571 (= ?x227 (_ bv0 32))))
 (=> $x571 $x85)))))
 ))
 (let (($x567 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x227 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x571 (= ?x227 (_ bv0 32))))
 (= $x571 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x187 (and $x567 $x395)))
 (let (($x237 (and $x187 $x639)))
 (let (($x726 (and $x237 $x842)))
 (let (($x460 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x741 (= (bvand ?x123 (_ bv4294967292 32)) ?x123)))
 (let (($x608 (= (bvand ?x794 (_ bv4294967292 32)) ?x794)))
 (let (($x648 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x794 (bvsub ?x794 (_ bv4 32))) (bvult ?x794 (bvsub ?x794 (_ bv4 32))))))
 (let (($x429 (and true $x648)))
 (let (($x822 (= (bvand ?x689 (_ bv4294967292 32)) ?x689)))
 (let (($x606 (and $x822 $x429)))
 (let (($x216 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x123 (bvsub ?x123 (_ bv8 32))) (bvult ?x123 (bvsub ?x123 (_ bv8 32))))))
 (let (($x529 (and (and (and true $x216) $x606) $x608)))
 (let (($x108 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x102 (and true $x108)))
 (let (($x477 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x787 (and $x477 $x102)))
 (let (($x232 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x689 (bvsub ?x689 (_ bv12 32))) (bvult ?x689 (bvsub ?x689 (_ bv12 32))))))
 (let (($x657 (and (and (and true $x477) $x232) $x787)))
 (let (($x665 (and (and (and (and (and (and $x657 $x529) $x741) $x460) $x726) $x797) $x578)))
 (let (($x715 (= $x665 true)))
 (let (($x271 (= $x715 true)))
 (let (($x158 (= $x271 true)))
 (let (($x211 (= $x657 true)))
 (let (($x41 (= $x211 true)))
 (let (($x387 (= $x41 true)))
 (let (($x337 (and $x529 $x741)))
 (let (($x241 (= $x337 true)))
 (let (($x207 (= $x241 true)))
 (let (($x172 (= $x207 true)))
 (let (($x258 (and $x172 $x387)))
 (let (($x572 (and $x258 $x158)))
 (let (($x579 (and $x572 $x613)))
 (let ((?x285 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x861 (bvuge ?x285 (_ bv1 32))))
 (let ((?x891 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x891 (_ bv1 32))))
 (let (($x262 (and $x348 $x861)))
 (let ((?x310 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x671 (= ?x310 (_ bv0 32))))
 (let (($x621 (and $x671 $x262)))
 (let ((?x610 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x375 (= ?x610 (_ bv0 32))))
 (let (($x674 (and $x375 $x621)))
 (let (($x99 (and $x674 $x579)))
 (let ((?x124 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x840 (= ?x124 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x593 (bvuge ?x610 (_ bv1 32))))
 (let (($x672 (=> $x593 $x840)))
 (let (($x335 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x63 (= $x593 $x335)))
 (let (($x85 (= false false)))
 (let (($x73 (=> $x375 $x85)))
 (let (($x77 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x121 (= $x375 $x77)))
 (let (($x43 (and $x121 $x73)))
 (let (($x713 (and $x43 $x63)))
 (let (($x87 (and $x713 $x672)))
 (let (($x792 (and $x87 $x99)))
 (let ((?x100 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x769 (= ?x100 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x846 (bvuge ?x310 (_ bv1 32))))
 (let (($x192 (=> $x846 $x769)))
 (let (($x811 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x860 (= $x846 $x811)))
 (let (($x329 (=> $x671 $x85)))
 (let (($x150 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x422 (= $x671 $x150)))
 (let (($x93 (and $x422 $x329)))
 (let (($x130 (and $x93 $x860)))
 (let (($x359 (and $x130 $x192)))
 (let (($x101 (and $x359 $x792)))
 (let (($x29 (= ?x474 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x805 (=> $x348 $x29)))
 (let (($x634 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x575 (= $x348 $x634)))
 (let (($x542 (= ?x891 (_ bv0 32))))
 (let (($x884 (=> $x542 $x85)))
 (let (($x260 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x301 (= $x542 $x260)))
 (let (($x240 (and $x301 $x884)))
 (let (($x327 (and $x240 $x575)))
 (let (($x789 (and $x327 $x805)))
 (let (($x886 (and $x789 $x101)))
 (let (($x9 (= ?x465 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x222 (=> $x861 $x9)))
 (let (($x743 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x837 (= $x861 $x743)))
 (let (($x484 (= ?x285 (_ bv0 32))))
 (let (($x204 (=> $x484 $x85)))
 (let (($x253 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x834 (= $x484 $x253)))
 (let (($x695 (and $x834 $x204)))
 (let (($x758 (and $x695 $x837)))
 (let (($x414 (and $x758 $x222)))
 (let (($x595 (and $x414 $x886)))
 (let (($x594 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x445 (and $x594 $x595)))
 (let (($x801 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x443 (and $x801 $x445)))
 (let (($x418 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x196 (and $x418 $x443)))
 (let (($x669 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x390 (and $x669 $x196)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x538 (and $x5 $x390)))
 (let (($x357 (and $x85 $x538)))
 (let (($x338 (= ?x124 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x22 (and $x338 $x357)))
 (let (($x712 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x828 (and $x712 $x22)))
 (let (($x711 (and $x85 $x828)))
 (let (($x410 (= ?x100 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x132 (and $x410 $x711)))
 (let (($x346 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x764 (and $x346 $x132)))
 (let (($x864 (and $x85 $x764)))
 (let (($x439 (= ?x474 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x438 (and $x439 $x864)))
 (let (($x670 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x746 (and $x670 $x438)))
 (let (($x265 (and $x85 $x746)))
 (let (($x362 (= ?x465 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x585 (and $x362 $x265)))
 (let (($x312 (bvugt ?x794 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x858 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x565)))
 (let (($x494 (=> (bvule ?x794 (bvsub (bvadd ?x794 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x858 $x312)))))))
 (let (($x47 (bvugt ?x123 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x824 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x288 (=> (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x824 $x47)))))))
 (let (($x750 (bvugt ?x689 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x767)))
 (let (($x255 (=> (bvule ?x689 (bvsub (bvadd ?x689 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x394 $x750)))))))
 (let (($x475 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x423 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x435 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x423)))
 (let (($x180 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x435 $x475)))))))
 (let (($x890 (and $x180 $x255)))
 (let (($x407 (and $x890 $x288)))
 (let (($x333 (and $x407 $x494)))
 (let (($x576 (and $x333 $x585)))
 (let (($x15 (=> $x576 $x833)))
 (not $x15)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x379 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x234 (bvmul (_ bv4294967295 32) ?x379)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x845 (concat ?x347 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x728 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x612 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x47 (bvadd ?x612 (_ bv3 32))))
 (let ((?x325 (concat (select input.dst.llvm-mem ?x47) (concat ?x728 ?x845))))
 (let ((?x281 (bvmul (_ bv4294967295 32) ?x325)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x523 (concat ?x116 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x629 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x888 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x312 (bvadd ?x888 (_ bv3 32))))
 (let ((?x446 (concat (select input.dst.llvm-mem ?x312) (concat ?x629 ?x523))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x512 (concat ?x449 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x423 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x750 (bvadd ?x423 (_ bv3 32))))
 (let ((?x731 (concat (select input.dst.llvm-mem ?x750) (concat ?x181 ?x512))))
 (let ((?x856 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x852 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x856)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x852)))
 (let ((?x829 (bvadd (bvadd (bvadd ?x376 ?x731) ?x446) ?x281)))
 (let (($x683 (= ?x829 ?x234)))
 (let (($x421 (= $x683 true)))
 (let (($x404 (= $x421 true)))
 (let ((?x267 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x700 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x562 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x799 (concat ?x562 (concat ?x274 (concat ?x700 ?x267)))))
 (let (($x269 (= ?x799 input.dst.llvm-%m)))
 (let (($x351 (= $x269 true)))
 (let (($x778 (= $x351 true)))
 (let (($x76 (= input.dst.llvm-%m ?x799)))
 (let ((?x544 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x268 (= (_ bv0 32) ?x544)))
 (let ((?x184 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x615 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x184)))
 (let (($x473 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x510 (and $x473 $x615)))
 (let (($x785 (and $x510 $x268)))
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x543 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x857 (concat (select input.dst.llvm-mem (bvadd ?x543 (_ bv1 32))) (select input.dst.llvm-mem ?x543))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x543 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x543 (_ bv2 32))) ?x857))))
 (let ((?x206 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (bvuge ?x206 (_ bv1 32))))
 (=> $x581 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x113))))))))
 ))
 (let (($x742 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x646 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x206 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (bvuge ?x206 (_ bv1 32))))
 (= $x581 (bvuge ?x646 (_ bv1 32)))))))
 ))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x712 (= false false)))
 (let ((?x206 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x813 (= ?x206 (_ bv0 32))))
 (=> $x813 $x712)))))
 ))
 (let (($x620 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x813 (= ?x206 (_ bv0 32))))
 (= $x813 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x385 (and $x620 $x173)))
 (let (($x224 (and $x385 $x742)))
 (let (($x239 (and $x224 $x289)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (= (bvand ?x612 (_ bv4294967292 32)) ?x612)))
 (let (($x304 (= (bvand ?x888 (_ bv4294967292 32)) ?x888)))
 (let (($x862 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x888 (bvsub ?x888 (_ bv4 32))) (bvult ?x888 (bvsub ?x888 (_ bv4 32))))))
 (let (($x521 (and true $x862)))
 (let (($x725 (= (bvand ?x423 (_ bv4294967292 32)) ?x423)))
 (let (($x848 (and $x725 $x521)))
 (let (($x128 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x612 (bvsub ?x612 (_ bv8 32))) (bvult ?x612 (bvsub ?x612 (_ bv8 32))))))
 (let (($x568 (and (and (and true $x128) $x848) $x304)))
 (let (($x569 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x352 (and true $x569)))
 (let (($x193 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x53 (and $x193 $x352)))
 (let (($x797 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x423 (bvsub ?x423 (_ bv12 32))) (bvult ?x423 (bvsub ?x423 (_ bv12 32))))))
 (let (($x143 (and (and (and true $x193) $x797) $x53)))
 (let (($x704 (and (and (and (and (and (and $x143 $x568) $x218) $x158) $x239) $x785) $x76)))
 (let (($x506 (= $x704 true)))
 (let (($x680 (= $x506 true)))
 (let (($x604 (= $x680 true)))
 (let (($x520 (= $x143 true)))
 (let (($x578 (= $x520 true)))
 (let (($x665 (= $x578 true)))
 (let (($x818 (and $x568 $x218)))
 (let (($x842 (= $x818 true)))
 (let (($x726 (= $x842 true)))
 (let (($x821 (= $x726 true)))
 (let (($x715 (and $x821 $x665)))
 (let (($x45 (and $x715 $x604)))
 (let (($x466 (and $x45 $x778)))
 (let ((?x811 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x860 (= ?x811 (_ bv0 32))))
 (let ((?x621 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x822 (bvuge ?x621 (_ bv1 32))))
 (let (($x763 (and $x822 $x860)))
 (let ((?x337 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x337 (_ bv0 32))))
 (let (($x567 (and $x241 $x763)))
 (let ((?x258 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (= ?x258 (_ bv0 32))))
 (let (($x622 (and $x844 $x567)))
 (let (($x298 (and $x622 $x466)))
 (let ((?x301 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x757 (= ?x301 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x68 (bvuge ?x258 (_ bv1 32))))
 (let (($x120 (=> $x68 $x757)))
 (let (($x571 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x168 (= $x68 $x571)))
 (let (($x712 (= false false)))
 (let (($x264 (=> $x844 $x712)))
 (let (($x41 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x38 (= $x844 $x41)))
 (let (($x460 (and $x38 $x264)))
 (let (($x293 (and $x460 $x168)))
 (let (($x850 (and $x293 $x120)))
 (let (($x213 (and $x850 $x298)))
 (let ((?x743 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x7 (= ?x743 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x243 (bvuge ?x337 (_ bv1 32))))
 (let (($x623 (=> $x243 $x7)))
 (let (($x98 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x232 (= $x243 $x98)))
 (let (($x172 (=> $x241 $x712)))
 (let (($x733 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x207 (= $x241 $x733)))
 (let (($x324 (and $x207 $x172)))
 (let (($x514 (and $x324 $x232)))
 (let (($x283 (and $x514 $x623)))
 (let (($x10 (and $x283 $x213)))
 (let (($x516 (= ?x379 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x104 (=> $x822 $x516)))
 (let (($x94 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x32 (= $x822 $x94)))
 (let (($x674 (= ?x621 (_ bv0 32))))
 (let (($x553 (=> $x674 $x712)))
 (let (($x87 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x147 (= $x674 $x87)))
 (let (($x307 (and $x147 $x553)))
 (let (($x533 (and $x307 $x32)))
 (let (($x648 (and $x533 $x104)))
 (let (($x92 (and $x648 $x10)))
 (let ((?x410 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x73 (= ?x410 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x827 (bvuge ?x811 (_ bv1 32))))
 (let (($x43 (=> $x827 $x73)))
 (let (($x375 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x77 (= $x827 $x375)))
 (let (($x710 (=> $x860 $x712)))
 (let (($x93 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x130 (= $x860 $x93)))
 (let (($x769 (and $x130 $x710)))
 (let (($x121 (and $x769 $x77)))
 (let (($x593 (and $x121 $x43)))
 (let (($x330 (and $x593 $x92)))
 (let (($x885 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x584 (and $x885 $x330)))
 (let (($x805 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x161 (and $x805 $x584)))
 (let (($x133 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x547 (and $x133 $x161)))
 (let (($x575 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x370 (and $x575 $x547)))
 (let (($x348 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x773 (and $x348 $x370)))
 (let (($x546 (and $x712 $x773)))
 (let (($x884 (= ?x301 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x208 (and $x884 $x546)))
 (let (($x532 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x687 (and $x532 $x208)))
 (let (($x688 (and $x712 $x687)))
 (let (($x837 (= ?x743 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x855 (and $x837 $x688)))
 (let (($x285 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x816 (and $x285 $x855)))
 (let (($x111 (and $x712 $x816)))
 (let (($x594 (= ?x379 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x806 (and $x594 $x111)))
 (let (($x678 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x617 (and $x678 $x806)))
 (let (($x798 (and $x712 $x617)))
 (let (($x14 (= ?x410 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x619 (and $x14 $x798)))
 (let (($x72 (bvugt ?x888 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x312)))
 (let (($x587 (=> (bvule ?x888 (bvsub (bvadd ?x888 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x72)))))))
 (let (($x684 (bvugt ?x612 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x369 (=> (bvule ?x612 (bvsub (bvadd ?x612 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x294 $x684)))))))
 (let (($x97 (bvugt ?x423 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x750)))
 (let (($x123 (=> (bvule ?x423 (bvsub (bvadd ?x423 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x141 $x97)))))))
 (let (($x291 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x721 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x721)))
 (let (($x381 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x291)))))))
 (let (($x203 (and $x381 $x123)))
 (let (($x754 (and $x203 $x369)))
 (let (($x88 (and $x754 $x587)))
 (let (($x44 (and $x88 $x619)))
 (let (($x308 (=> $x44 $x404)))
 (not $x308))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x379 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x234 (bvmul (_ bv4294967295 32) ?x379)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x845 (concat ?x347 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x728 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x612 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x47 (bvadd ?x612 (_ bv3 32))))
 (let ((?x325 (concat (select input.dst.llvm-mem ?x47) (concat ?x728 ?x845))))
 (let ((?x281 (bvmul (_ bv4294967295 32) ?x325)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x523 (concat ?x116 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x629 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x888 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x312 (bvadd ?x888 (_ bv3 32))))
 (let ((?x446 (concat (select input.dst.llvm-mem ?x312) (concat ?x629 ?x523))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x512 (concat ?x449 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x423 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x750 (bvadd ?x423 (_ bv3 32))))
 (let ((?x731 (concat (select input.dst.llvm-mem ?x750) (concat ?x181 ?x512))))
 (let ((?x856 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x852 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x856)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x852)))
 (let ((?x829 (bvadd (bvadd (bvadd ?x376 ?x731) ?x446) ?x281)))
 (let (($x683 (= ?x829 ?x234)))
 (let (($x421 (= $x683 true)))
 (let (($x404 (= $x421 true)))
 (let ((?x267 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x700 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x562 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x799 (concat ?x562 (concat ?x274 (concat ?x700 ?x267)))))
 (let (($x269 (= ?x799 input.dst.llvm-%m)))
 (let (($x351 (= $x269 true)))
 (let (($x778 (= $x351 true)))
 (let (($x76 (= input.dst.llvm-%m ?x799)))
 (let ((?x544 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x268 (= (_ bv0 32) ?x544)))
 (let ((?x184 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x615 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x184)))
 (let (($x473 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x510 (and $x473 $x615)))
 (let (($x785 (and $x510 $x268)))
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x543 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x857 (concat (select input.dst.llvm-mem (bvadd ?x543 (_ bv1 32))) (select input.dst.llvm-mem ?x543))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x543 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x543 (_ bv2 32))) ?x857))))
 (let ((?x206 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (bvuge ?x206 (_ bv1 32))))
 (=> $x581 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x113))))))))
 ))
 (let (($x742 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x646 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x206 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (bvuge ?x206 (_ bv1 32))))
 (= $x581 (bvuge ?x646 (_ bv1 32)))))))
 ))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x712 (= false false)))
 (let ((?x206 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x813 (= ?x206 (_ bv0 32))))
 (=> $x813 $x712)))))
 ))
 (let (($x620 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x813 (= ?x206 (_ bv0 32))))
 (= $x813 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x385 (and $x620 $x173)))
 (let (($x224 (and $x385 $x742)))
 (let (($x239 (and $x224 $x289)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (= (bvand ?x612 (_ bv4294967292 32)) ?x612)))
 (let (($x304 (= (bvand ?x888 (_ bv4294967292 32)) ?x888)))
 (let (($x862 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x888 (bvsub ?x888 (_ bv4 32))) (bvult ?x888 (bvsub ?x888 (_ bv4 32))))))
 (let (($x521 (and true $x862)))
 (let (($x725 (= (bvand ?x423 (_ bv4294967292 32)) ?x423)))
 (let (($x848 (and $x725 $x521)))
 (let (($x128 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x612 (bvsub ?x612 (_ bv8 32))) (bvult ?x612 (bvsub ?x612 (_ bv8 32))))))
 (let (($x568 (and (and (and true $x128) $x848) $x304)))
 (let (($x569 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x352 (and true $x569)))
 (let (($x193 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x53 (and $x193 $x352)))
 (let (($x797 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x423 (bvsub ?x423 (_ bv12 32))) (bvult ?x423 (bvsub ?x423 (_ bv12 32))))))
 (let (($x143 (and (and (and true $x193) $x797) $x53)))
 (let (($x704 (and (and (and (and (and (and $x143 $x568) $x218) $x158) $x239) $x785) $x76)))
 (let (($x506 (= $x704 true)))
 (let (($x680 (= $x506 true)))
 (let (($x604 (= $x680 true)))
 (let (($x520 (= $x143 true)))
 (let (($x578 (= $x520 true)))
 (let (($x665 (= $x578 true)))
 (let (($x818 (and $x568 $x218)))
 (let (($x842 (= $x818 true)))
 (let (($x726 (= $x842 true)))
 (let (($x821 (= $x726 true)))
 (let (($x715 (and $x821 $x665)))
 (let (($x45 (and $x715 $x604)))
 (let (($x466 (and $x45 $x778)))
 (let ((?x811 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x860 (= ?x811 (_ bv0 32))))
 (let ((?x621 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x822 (bvuge ?x621 (_ bv1 32))))
 (let (($x763 (and $x822 $x860)))
 (let ((?x337 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x337 (_ bv0 32))))
 (let (($x567 (and $x241 $x763)))
 (let ((?x258 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (= ?x258 (_ bv0 32))))
 (let (($x622 (and $x844 $x567)))
 (let (($x298 (and $x622 $x466)))
 (let ((?x301 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x757 (= ?x301 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x68 (bvuge ?x258 (_ bv1 32))))
 (let (($x120 (=> $x68 $x757)))
 (let (($x571 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x168 (= $x68 $x571)))
 (let (($x712 (= false false)))
 (let (($x264 (=> $x844 $x712)))
 (let (($x41 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x38 (= $x844 $x41)))
 (let (($x460 (and $x38 $x264)))
 (let (($x293 (and $x460 $x168)))
 (let (($x850 (and $x293 $x120)))
 (let (($x213 (and $x850 $x298)))
 (let ((?x743 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x7 (= ?x743 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x243 (bvuge ?x337 (_ bv1 32))))
 (let (($x623 (=> $x243 $x7)))
 (let (($x98 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x232 (= $x243 $x98)))
 (let (($x172 (=> $x241 $x712)))
 (let (($x733 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x207 (= $x241 $x733)))
 (let (($x324 (and $x207 $x172)))
 (let (($x514 (and $x324 $x232)))
 (let (($x283 (and $x514 $x623)))
 (let (($x10 (and $x283 $x213)))
 (let (($x516 (= ?x379 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x104 (=> $x822 $x516)))
 (let (($x94 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x32 (= $x822 $x94)))
 (let (($x674 (= ?x621 (_ bv0 32))))
 (let (($x553 (=> $x674 $x712)))
 (let (($x87 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x147 (= $x674 $x87)))
 (let (($x307 (and $x147 $x553)))
 (let (($x533 (and $x307 $x32)))
 (let (($x648 (and $x533 $x104)))
 (let (($x92 (and $x648 $x10)))
 (let ((?x410 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x73 (= ?x410 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x827 (bvuge ?x811 (_ bv1 32))))
 (let (($x43 (=> $x827 $x73)))
 (let (($x375 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x77 (= $x827 $x375)))
 (let (($x710 (=> $x860 $x712)))
 (let (($x93 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x130 (= $x860 $x93)))
 (let (($x769 (and $x130 $x710)))
 (let (($x121 (and $x769 $x77)))
 (let (($x593 (and $x121 $x43)))
 (let (($x330 (and $x593 $x92)))
 (let (($x885 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x584 (and $x885 $x330)))
 (let (($x805 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x161 (and $x805 $x584)))
 (let (($x133 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x547 (and $x133 $x161)))
 (let (($x575 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x370 (and $x575 $x547)))
 (let (($x348 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x773 (and $x348 $x370)))
 (let (($x546 (and $x712 $x773)))
 (let (($x884 (= ?x301 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x208 (and $x884 $x546)))
 (let (($x532 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x687 (and $x532 $x208)))
 (let (($x688 (and $x712 $x687)))
 (let (($x837 (= ?x743 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x855 (and $x837 $x688)))
 (let (($x285 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x816 (and $x285 $x855)))
 (let (($x111 (and $x712 $x816)))
 (let (($x594 (= ?x379 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x806 (and $x594 $x111)))
 (let (($x678 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x617 (and $x678 $x806)))
 (let (($x798 (and $x712 $x617)))
 (let (($x14 (= ?x410 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x619 (and $x14 $x798)))
 (let (($x72 (bvugt ?x888 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x312)))
 (let (($x587 (=> (bvule ?x888 (bvsub (bvadd ?x888 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x72)))))))
 (let (($x684 (bvugt ?x612 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x369 (=> (bvule ?x612 (bvsub (bvadd ?x612 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x294 $x684)))))))
 (let (($x97 (bvugt ?x423 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x750)))
 (let (($x123 (=> (bvule ?x423 (bvsub (bvadd ?x423 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x141 $x97)))))))
 (let (($x291 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x721 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x721)))
 (let (($x381 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x291)))))))
 (let (($x203 (and $x381 $x123)))
 (let (($x754 (and $x203 $x369)))
 (let (($x88 (and $x754 $x587)))
 (let (($x44 (and $x88 $x619)))
 (let (($x308 (=> $x44 $x404)))
 (not $x308))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 241 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x817 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x335 (concat ?x817 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x713 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x824 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x776 (bvadd ?x824 (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x776) (concat ?x713 ?x335))))
 (let ((?x106 (bvmul (_ bv4294967295 32) ?x216)))
 (let ((?x853 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x807 (concat ?x853 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x429 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x47 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x488 (bvadd ?x47 (_ bv3 32))))
 (let ((?x760 (concat (select input.dst.llvm-mem ?x488) (concat ?x429 ?x807))))
 (let ((?x430 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x409 (concat ?x430 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x341 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x291 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x6 (bvadd ?x291 (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x6) (concat ?x341 ?x409))))
 (let ((?x734 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x734)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x492)))
 (let ((?x671 (bvadd (bvadd (bvadd ?x11 ?x102) ?x760) ?x106)))
 (let ((?x758 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x391 (= ?x758 ?x671)))
 (let (($x150 (= $x391 true)))
 (let (($x192 (= $x150 true)))
 (let ((?x820 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x537 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x539 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x727 (concat ?x539 (concat ?x537 (concat ?x46 ?x820)))))
 (let (($x413 (= ?x727 input.dst.llvm-%m)))
 (let (($x171 (= $x413 true)))
 (let (($x833 (= $x171 true)))
 (let (($x583 (= input.dst.llvm-%m ?x727)))
 (let ((?x595 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x432 (= (_ bv0 32) ?x595)))
 (let ((?x792 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x792)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x886 (and $x99 $x101)))
 (let (($x762 (and $x886 $x432)))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x847 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x847 (_ bv1 32))) (select input.dst.llvm-mem ?x847))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x847 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x847 (_ bv2 32))) ?x39))))
 (let ((?x253 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x253 (_ bv1 32))))
 (=> $x390 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x50))))))))
 ))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x834 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x253 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x253 (_ bv1 32))))
 (= $x390 (bvuge ?x834 (_ bv1 32)))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x301 (= false false)))
 (let ((?x253 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x253 (_ bv0 32))))
 (=> $x85 $x301)))))
 ))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x253 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x253 (_ bv0 32))))
 (= $x85 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x439 (and $x188 $x428)))
 (let (($x22 (and $x439 $x572)))
 (let (($x613 (and $x22 $x290)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (= (bvand ?x824 (_ bv4294967292 32)) ?x824)))
 (let (($x149 (= (bvand ?x47 (_ bv4294967292 32)) ?x47)))
 (let (($x486 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x47 (bvsub ?x47 (_ bv4 32))) (bvult ?x47 (bvsub ?x47 (_ bv4 32))))))
 (let (($x701 (and true $x486)))
 (let (($x357 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x780 (and $x357 $x701)))
 (let (($x742 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x824 (bvsub ?x824 (_ bv8 32))) (bvult ?x824 (bvsub ?x824 (_ bv8 32))))))
 (let (($x113 (and (and (and true $x742) $x780) $x149)))
 (let (($x551 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x700 (and true $x551)))
 (let (($x615 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x267 (and $x615 $x700)))
 (let (($x889 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv12 32))) (bvult ?x291 (bvsub ?x291 (_ bv12 32))))))
 (let (($x799 (and (and (and true $x615) $x889) $x267)))
 (let (($x189 (and (and (and (and (and (and $x799 $x113) $x35) $x45) $x613) $x762) $x583)))
 (let (($x75 (= $x189 true)))
 (let (($x160 (= $x75 true)))
 (let (($x770 (= $x160 true)))
 (let (($x76 (= $x799 true)))
 (let (($x704 (= $x76 true)))
 (let (($x506 (= $x704 true)))
 (let (($x289 (and $x113 $x35)))
 (let (($x239 (= $x289 true)))
 (let (($x652 (= $x239 true)))
 (let (($x473 (= $x652 true)))
 (let (($x680 (and $x473 $x506)))
 (let (($x802 (and $x680 $x770)))
 (let (($x198 (and $x802 $x833)))
 (let ((?x232 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x232 (_ bv1 32))))
 (let ((?x622 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x622 (_ bv0 32))))
 (let (($x620 (and $x187 $x41)))
 (let ((?x842 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x726 (= ?x842 (_ bv0 32))))
 (let (($x136 (and $x726 $x620)))
 (let ((?x810 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (= ?x810 (_ bv0 32))))
 (let (($x173 (and $x535 $x136)))
 (let (($x15 (and $x173 $x198)))
 (let ((?x553 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x646 (= ?x553 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x196 (bvuge ?x810 (_ bv1 32))))
 (let (($x707 (=> $x196 $x646)))
 (let (($x331 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x433 (= $x196 $x331)))
 (let (($x301 (= false false)))
 (let (($x158 (=> $x535 $x301)))
 (let (($x665 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x271 (= $x535 $x665)))
 (let (($x771 (and $x271 $x158)))
 (let (($x554 (and $x771 $x433)))
 (let (($x835 (and $x554 $x707)))
 (let (($x761 (and $x835 $x15)))
 (let ((?x77 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x415 (= ?x77 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x797 (bvuge ?x842 (_ bv1 32))))
 (let (($x81 (=> $x797 $x415)))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x252 (= $x797 $x230)))
 (let (($x356 (=> $x726 $x301)))
 (let (($x218 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x821 (= $x726 $x218)))
 (let (($x193 (and $x821 $x356)))
 (let (($x825 (and $x193 $x252)))
 (let (($x33 (and $x825 $x81)))
 (let (($x129 (and $x33 $x761)))
 (let ((?x885 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x235 (= ?x885 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x388 (bvuge ?x622 (_ bv1 32))))
 (let (($x862 (=> $x388 $x235)))
 (let (($x725 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x854 (= $x388 $x725)))
 (let (($x774 (=> $x187 $x301)))
 (let (($x763 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x395 (= $x187 $x763)))
 (let (($x194 (and $x395 $x774)))
 (let (($x382 (and $x194 $x854)))
 (let (($x521 (and $x382 $x862)))
 (let (($x236 (and $x521 $x129)))
 (let (($x460 (= ?x758 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x68 (=> $x41 $x460)))
 (let (($x657 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x38 (= $x41 $x657)))
 (let (($x514 (= ?x232 (_ bv0 32))))
 (let (($x7 (=> $x514 $x301)))
 (let (($x243 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x529 (= $x514 $x243)))
 (let (($x623 (and $x529 $x7)))
 (let (($x264 (and $x623 $x38)))
 (let (($x571 (and $x264 $x68)))
 (let (($x545 (and $x571 $x236)))
 (let (($x337 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x155 (and $x337 $x545)))
 (let (($x648 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x386 (and $x648 $x155)))
 (let (($x516 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x23 (and $x516 $x386)))
 (let (($x533 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x702 (and $x533 $x23)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x332 (and $x94 $x702)))
 (let (($x28 (and $x301 $x332)))
 (let (($x307 (= ?x553 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x693 (and $x307 $x28)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x447 (and $x73 $x693)))
 (let (($x616 (and $x301 $x447)))
 (let (($x121 (= ?x77 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x809 (and $x121 $x616)))
 (let (($x860 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x627 (and $x860 $x809)))
 (let (($x563 (and $x301 $x627)))
 (let (($x846 (= ?x885 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x342 (and $x846 $x563)))
 (let (($x884 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x650 (and $x884 $x342)))
 (let (($x248 (and $x301 $x650)))
 (let (($x532 (= ?x758 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x112 (and $x532 $x248)))
 (let (($x494 (bvugt ?x47 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x843 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x488)))
 (let (($x14 (=> (bvule ?x47 (bvsub (bvadd ?x47 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x843 $x494)))))))
 (let (($x288 (bvugt ?x824 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x776)))
 (let (($x858 (=> (bvule ?x824 (bvsub (bvadd ?x824 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x288)))))))
 (let (($x255 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x159 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x255)))))))
 (let (($x180 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x339 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x394 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x339 $x180)))))))
 (let (($x651 (and $x394 $x159)))
 (let (($x794 (and $x651 $x858)))
 (let (($x465 (and $x794 $x14)))
 (let (($x508 (and $x465 $x112)))
 (let (($x359 (=> $x508 $x192)))
 (not $x359)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x817 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x335 (concat ?x817 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x713 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x824 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x776 (bvadd ?x824 (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x776) (concat ?x713 ?x335))))
 (let ((?x106 (bvmul (_ bv4294967295 32) ?x216)))
 (let ((?x853 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x807 (concat ?x853 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x429 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x47 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x488 (bvadd ?x47 (_ bv3 32))))
 (let ((?x760 (concat (select input.dst.llvm-mem ?x488) (concat ?x429 ?x807))))
 (let ((?x430 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x409 (concat ?x430 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x341 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x291 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x6 (bvadd ?x291 (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x6) (concat ?x341 ?x409))))
 (let ((?x734 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x734)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x492)))
 (let ((?x671 (bvadd (bvadd (bvadd ?x11 ?x102) ?x760) ?x106)))
 (let ((?x758 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x391 (= ?x758 ?x671)))
 (let (($x150 (= $x391 true)))
 (let (($x192 (= $x150 true)))
 (let ((?x820 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x537 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x539 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x727 (concat ?x539 (concat ?x537 (concat ?x46 ?x820)))))
 (let (($x413 (= ?x727 input.dst.llvm-%m)))
 (let (($x171 (= $x413 true)))
 (let (($x833 (= $x171 true)))
 (let (($x583 (= input.dst.llvm-%m ?x727)))
 (let ((?x595 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x432 (= (_ bv0 32) ?x595)))
 (let ((?x792 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x792)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x886 (and $x99 $x101)))
 (let (($x762 (and $x886 $x432)))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x847 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x847 (_ bv1 32))) (select input.dst.llvm-mem ?x847))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x847 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x847 (_ bv2 32))) ?x39))))
 (let ((?x253 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x253 (_ bv1 32))))
 (=> $x390 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x50))))))))
 ))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x834 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x253 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x253 (_ bv1 32))))
 (= $x390 (bvuge ?x834 (_ bv1 32)))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x301 (= false false)))
 (let ((?x253 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x253 (_ bv0 32))))
 (=> $x85 $x301)))))
 ))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x253 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x253 (_ bv0 32))))
 (= $x85 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x439 (and $x188 $x428)))
 (let (($x22 (and $x439 $x572)))
 (let (($x613 (and $x22 $x290)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (= (bvand ?x824 (_ bv4294967292 32)) ?x824)))
 (let (($x149 (= (bvand ?x47 (_ bv4294967292 32)) ?x47)))
 (let (($x486 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x47 (bvsub ?x47 (_ bv4 32))) (bvult ?x47 (bvsub ?x47 (_ bv4 32))))))
 (let (($x701 (and true $x486)))
 (let (($x357 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x780 (and $x357 $x701)))
 (let (($x742 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x824 (bvsub ?x824 (_ bv8 32))) (bvult ?x824 (bvsub ?x824 (_ bv8 32))))))
 (let (($x113 (and (and (and true $x742) $x780) $x149)))
 (let (($x551 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x700 (and true $x551)))
 (let (($x615 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x267 (and $x615 $x700)))
 (let (($x889 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv12 32))) (bvult ?x291 (bvsub ?x291 (_ bv12 32))))))
 (let (($x799 (and (and (and true $x615) $x889) $x267)))
 (let (($x189 (and (and (and (and (and (and $x799 $x113) $x35) $x45) $x613) $x762) $x583)))
 (let (($x75 (= $x189 true)))
 (let (($x160 (= $x75 true)))
 (let (($x770 (= $x160 true)))
 (let (($x76 (= $x799 true)))
 (let (($x704 (= $x76 true)))
 (let (($x506 (= $x704 true)))
 (let (($x289 (and $x113 $x35)))
 (let (($x239 (= $x289 true)))
 (let (($x652 (= $x239 true)))
 (let (($x473 (= $x652 true)))
 (let (($x680 (and $x473 $x506)))
 (let (($x802 (and $x680 $x770)))
 (let (($x198 (and $x802 $x833)))
 (let ((?x232 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x232 (_ bv1 32))))
 (let ((?x622 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x622 (_ bv0 32))))
 (let (($x620 (and $x187 $x41)))
 (let ((?x842 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x726 (= ?x842 (_ bv0 32))))
 (let (($x136 (and $x726 $x620)))
 (let ((?x810 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (= ?x810 (_ bv0 32))))
 (let (($x173 (and $x535 $x136)))
 (let (($x15 (and $x173 $x198)))
 (let ((?x553 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x646 (= ?x553 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x196 (bvuge ?x810 (_ bv1 32))))
 (let (($x707 (=> $x196 $x646)))
 (let (($x331 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x433 (= $x196 $x331)))
 (let (($x301 (= false false)))
 (let (($x158 (=> $x535 $x301)))
 (let (($x665 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x271 (= $x535 $x665)))
 (let (($x771 (and $x271 $x158)))
 (let (($x554 (and $x771 $x433)))
 (let (($x835 (and $x554 $x707)))
 (let (($x761 (and $x835 $x15)))
 (let ((?x77 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x415 (= ?x77 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x797 (bvuge ?x842 (_ bv1 32))))
 (let (($x81 (=> $x797 $x415)))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x252 (= $x797 $x230)))
 (let (($x356 (=> $x726 $x301)))
 (let (($x218 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x821 (= $x726 $x218)))
 (let (($x193 (and $x821 $x356)))
 (let (($x825 (and $x193 $x252)))
 (let (($x33 (and $x825 $x81)))
 (let (($x129 (and $x33 $x761)))
 (let ((?x885 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x235 (= ?x885 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x388 (bvuge ?x622 (_ bv1 32))))
 (let (($x862 (=> $x388 $x235)))
 (let (($x725 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x854 (= $x388 $x725)))
 (let (($x774 (=> $x187 $x301)))
 (let (($x763 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x395 (= $x187 $x763)))
 (let (($x194 (and $x395 $x774)))
 (let (($x382 (and $x194 $x854)))
 (let (($x521 (and $x382 $x862)))
 (let (($x236 (and $x521 $x129)))
 (let (($x460 (= ?x758 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x68 (=> $x41 $x460)))
 (let (($x657 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x38 (= $x41 $x657)))
 (let (($x514 (= ?x232 (_ bv0 32))))
 (let (($x7 (=> $x514 $x301)))
 (let (($x243 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x529 (= $x514 $x243)))
 (let (($x623 (and $x529 $x7)))
 (let (($x264 (and $x623 $x38)))
 (let (($x571 (and $x264 $x68)))
 (let (($x545 (and $x571 $x236)))
 (let (($x337 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x155 (and $x337 $x545)))
 (let (($x648 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x386 (and $x648 $x155)))
 (let (($x516 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x23 (and $x516 $x386)))
 (let (($x533 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x702 (and $x533 $x23)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x332 (and $x94 $x702)))
 (let (($x28 (and $x301 $x332)))
 (let (($x307 (= ?x553 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x693 (and $x307 $x28)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x447 (and $x73 $x693)))
 (let (($x616 (and $x301 $x447)))
 (let (($x121 (= ?x77 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x809 (and $x121 $x616)))
 (let (($x860 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x627 (and $x860 $x809)))
 (let (($x563 (and $x301 $x627)))
 (let (($x846 (= ?x885 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x342 (and $x846 $x563)))
 (let (($x884 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x650 (and $x884 $x342)))
 (let (($x248 (and $x301 $x650)))
 (let (($x532 (= ?x758 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x112 (and $x532 $x248)))
 (let (($x494 (bvugt ?x47 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x843 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x488)))
 (let (($x14 (=> (bvule ?x47 (bvsub (bvadd ?x47 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x843 $x494)))))))
 (let (($x288 (bvugt ?x824 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x776)))
 (let (($x858 (=> (bvule ?x824 (bvsub (bvadd ?x824 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x288)))))))
 (let (($x255 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x159 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x255)))))))
 (let (($x180 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x339 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x394 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x339 $x180)))))))
 (let (($x651 (and $x394 $x159)))
 (let (($x794 (and $x651 $x858)))
 (let (($x465 (and $x794 $x14)))
 (let (($x508 (and $x465 $x112)))
 (let (($x359 (=> $x508 $x192)))
 (not $x359)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 240 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x293 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x757 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x294 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x288 (bvadd ?x294 (_ bv3 32))))
 (let ((?x639 (concat (select input.dst.llvm-mem ?x288) (concat ?x757 ?x293))))
 (let ((?x237 (bvmul (_ bv4294967295 32) ?x639)))
 (let ((?x206 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x813 (concat ?x206 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x565 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x494 (bvadd ?x565 (_ bv3 32))))
 (let ((?x819 (concat (select input.dst.llvm-mem ?x494) (concat ?x261 ?x813))))
 (let ((?x485 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x755 (concat ?x485 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x569 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x141 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x255 (bvadd ?x141 (_ bv3 32))))
 (let ((?x143 (concat (select input.dst.llvm-mem ?x255) (concat ?x569 ?x755))))
 (let ((?x764 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x746 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x764)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x746)))
 (let ((?x733 (bvadd (bvadd (bvadd ?x132 ?x143) ?x819) ?x237)))
 (let (($x207 (= (_ bv0 32) ?x733)))
 (let (($x283 (= $x207 true)))
 (let (($x387 (= $x283 true)))
 (let ((?x841 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x523 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x633 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x402 (concat ?x633 (concat ?x300 (concat ?x523 ?x841)))))
 (let (($x404 (= ?x402 input.dst.llvm-%m)))
 (let (($x308 (= $x404 true)))
 (let (($x753 (= $x308 true)))
 (let (($x446 (= input.dst.llvm-%m ?x402)))
 (let ((?x377 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x217 (= (_ bv0 32) ?x377)))
 (let ((?x92 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x584 (and $x10 $x330)))
 (let (($x629 (and $x584 $x217)))
 (let (($x466 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x376 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv1 32))) (select input.dst.llvm-mem ?x376))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv2 32))) ?x472))))
 (let ((?x710 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (bvuge ?x710 (_ bv1 32))))
 (=> $x546 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x34))))))))
 ))
 (let (($x687 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x710 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (bvuge ?x710 (_ bv1 32))))
 (= $x546 (bvuge ?x422 (_ bv1 32)))))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x553 (= false false)))
 (let ((?x710 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x710 (_ bv0 32))))
 (=> $x327 $x553)))))
 ))
 (let (($x634 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x710 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x710 (_ bv0 32))))
 (= $x327 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x338 (and $x634 $x115)))
 (let (($x548 (and $x338 $x687)))
 (let (($x213 (and $x548 $x466)))
 (let (($x802 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x632 (= (bvand ?x294 (_ bv4294967292 32)) ?x294)))
 (let (($x496 (= (bvand ?x565 (_ bv4294967292 32)) ?x565)))
 (let (($x323 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x565 (bvsub ?x565 (_ bv4 32))) (bvult ?x565 (bvsub ?x565 (_ bv4 32))))))
 (let (($x231 (and true $x323)))
 (let (($x208 (= (bvand ?x141 (_ bv4294967292 32)) ?x141)))
 (let (($x380 (and $x208 $x231)))
 (let (($x572 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x294 (bvsub ?x294 (_ bv8 32))) (bvult ?x294 (bvsub ?x294 (_ bv8 32))))))
 (let (($x50 (and (and (and true $x572) $x380) $x496)))
 (let (($x637 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x46 (and true $x637)))
 (let (($x101 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x820 (and $x101 $x46)))
 (let (($x716 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x141 (bvsub ?x141 (_ bv12 32))) (bvult ?x141 (bvsub ?x141 (_ bv12 32))))))
 (let (($x727 (and (and (and true $x101) $x716) $x820)))
 (let (($x325 (and (and (and (and (and (and $x727 $x50) $x632) $x802) $x213) $x629) $x446)))
 (let (($x829 (= $x325 true)))
 (let (($x234 (= $x829 true)))
 (let (($x683 (= $x234 true)))
 (let (($x583 (= $x727 true)))
 (let (($x189 (= $x583 true)))
 (let (($x75 (= $x189 true)))
 (let (($x290 (and $x50 $x632)))
 (let (($x613 (= $x290 true)))
 (let (($x441 (= $x613 true)))
 (let (($x99 (= $x441 true)))
 (let (($x160 (and $x99 $x75)))
 (let (($x421 (and $x160 $x683)))
 (let (($x644 (and $x421 $x753)))
 (let ((?x252 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x825 (= ?x252 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x173 (_ bv0 32))))
 (let (($x188 (and $x581 $x825)))
 (let ((?x239 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (= ?x239 (_ bv0 32))))
 (let (($x487 (and $x652 $x188)))
 (let ((?x350 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x350 (_ bv0 32))))
 (let (($x428 (and $x738 $x487)))
 (let (($x362 (and $x428 $x644)))
 (let ((?x774 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x834 (= ?x774 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x370 (bvuge ?x350 (_ bv1 32))))
 (let (($x484 (=> $x370 $x834)))
 (let (($x414 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x222 (= $x370 $x414)))
 (let (($x553 (= false false)))
 (let (($x45 (=> $x738 $x553)))
 (let (($x506 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x604 (= $x738 $x506)))
 (let (($x467 (and $x604 $x45)))
 (let (($x891 (and $x467 $x222)))
 (let (($x669 (and $x891 $x484)))
 (let (($x122 (and $x669 $x362)))
 (let ((?x38 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x663 (= ?x38 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x889 (bvuge ?x239 (_ bv1 32))))
 (let (($x699 (=> $x889 $x663)))
 (let (($x785 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x454 (= $x889 $x785)))
 (let (($x184 (=> $x652 $x553)))
 (let (($x35 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x473 (= $x652 $x35)))
 (let (($x615 (and $x473 $x184)))
 (let (($x562 (and $x615 $x454)))
 (let (($x274 (and $x562 $x699)))
 (let (($x796 (and $x274 $x122)))
 (let ((?x337 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x498 (= ?x337 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x543 (bvuge ?x173 (_ bv1 32))))
 (let (($x486 (=> $x543 $x498)))
 (let (($x357 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x62 (= $x543 $x357)))
 (let (($x826 (=> $x581 $x553)))
 (let (($x620 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x385 (= $x581 $x620)))
 (let (($x675 (and $x385 $x826)))
 (let (($x590 (and $x675 $x62)))
 (let (($x701 (and $x590 $x486)))
 (let (($x698 (and $x701 $x796)))
 (let ((?x329 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x771 (= ?x329 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x665 (bvuge ?x252 (_ bv1 32))))
 (let (($x196 (=> $x665 $x771)))
 (let (($x520 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x271 (= $x665 $x520)))
 (let (($x415 (=> $x825 $x553)))
 (let (($x797 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x462 (= $x825 $x797)))
 (let (($x81 (and $x462 $x415)))
 (let (($x158 (and $x81 $x271)))
 (let (($x331 (and $x158 $x196)))
 (let (($x5 (and $x331 $x698)))
 (let (($x842 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x670 (and $x842 $x5)))
 (let (($x521 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x223 (and $x521 $x670)))
 (let (($x235 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x691 (and $x235 $x223)))
 (let (($x382 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x96 (and $x382 $x691)))
 (let (($x725 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x542 (and $x725 $x96)))
 (let (($x204 (and $x553 $x542)))
 (let (($x194 (= ?x774 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x284 (and $x194 $x204)))
 (let (($x460 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x695 (and $x460 $x284)))
 (let (($x418 (and $x553 $x695)))
 (let (($x264 (= ?x38 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x166 (and $x264 $x418)))
 (let (($x514 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x346 (and $x514 $x166)))
 (let (($x100 (and $x553 $x346)))
 (let (($x98 (= ?x337 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x445 (and $x98 $x100)))
 (let (($x307 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x117 (and $x307 $x445)))
 (let (($x697 (and $x553 $x117)))
 (let (($x73 (= ?x329 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x558 (and $x73 $x697)))
 (let (($x587 (bvugt ?x565 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x494)))
 (let (($x837 (=> (bvule ?x565 (bvsub (bvadd ?x565 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x333 $x587)))))))
 (let (($x369 (bvugt ?x294 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x407 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x131 (=> (bvule ?x294 (bvsub (bvadd ?x294 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x407 $x369)))))))
 (let (($x123 (bvugt ?x141 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x890 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x824 (=> (bvule ?x141 (bvsub (bvadd ?x141 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x890 $x123)))))))
 (let (($x339 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x513 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x513)))
 (let (($x318 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x339)))))))
 (let (($x381 (and $x318 $x824)))
 (let (($x684 (and $x381 $x131)))
 (let (($x72 (and $x684 $x837)))
 (let (($x828 (and $x72 $x558)))
 (let (($x258 (=> $x828 $x387)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x293 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x757 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x294 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x288 (bvadd ?x294 (_ bv3 32))))
 (let ((?x639 (concat (select input.dst.llvm-mem ?x288) (concat ?x757 ?x293))))
 (let ((?x237 (bvmul (_ bv4294967295 32) ?x639)))
 (let ((?x206 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x813 (concat ?x206 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x565 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x494 (bvadd ?x565 (_ bv3 32))))
 (let ((?x819 (concat (select input.dst.llvm-mem ?x494) (concat ?x261 ?x813))))
 (let ((?x485 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x755 (concat ?x485 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x569 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x141 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x255 (bvadd ?x141 (_ bv3 32))))
 (let ((?x143 (concat (select input.dst.llvm-mem ?x255) (concat ?x569 ?x755))))
 (let ((?x764 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x746 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x764)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x746)))
 (let ((?x733 (bvadd (bvadd (bvadd ?x132 ?x143) ?x819) ?x237)))
 (let (($x207 (= (_ bv0 32) ?x733)))
 (let (($x283 (= $x207 true)))
 (let (($x387 (= $x283 true)))
 (let ((?x841 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x523 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x633 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x402 (concat ?x633 (concat ?x300 (concat ?x523 ?x841)))))
 (let (($x404 (= ?x402 input.dst.llvm-%m)))
 (let (($x308 (= $x404 true)))
 (let (($x753 (= $x308 true)))
 (let (($x446 (= input.dst.llvm-%m ?x402)))
 (let ((?x377 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x217 (= (_ bv0 32) ?x377)))
 (let ((?x92 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x584 (and $x10 $x330)))
 (let (($x629 (and $x584 $x217)))
 (let (($x466 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x376 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv1 32))) (select input.dst.llvm-mem ?x376))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv2 32))) ?x472))))
 (let ((?x710 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (bvuge ?x710 (_ bv1 32))))
 (=> $x546 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x34))))))))
 ))
 (let (($x687 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x710 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (bvuge ?x710 (_ bv1 32))))
 (= $x546 (bvuge ?x422 (_ bv1 32)))))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x553 (= false false)))
 (let ((?x710 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x710 (_ bv0 32))))
 (=> $x327 $x553)))))
 ))
 (let (($x634 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x710 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x710 (_ bv0 32))))
 (= $x327 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x338 (and $x634 $x115)))
 (let (($x548 (and $x338 $x687)))
 (let (($x213 (and $x548 $x466)))
 (let (($x802 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x632 (= (bvand ?x294 (_ bv4294967292 32)) ?x294)))
 (let (($x496 (= (bvand ?x565 (_ bv4294967292 32)) ?x565)))
 (let (($x323 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x565 (bvsub ?x565 (_ bv4 32))) (bvult ?x565 (bvsub ?x565 (_ bv4 32))))))
 (let (($x231 (and true $x323)))
 (let (($x208 (= (bvand ?x141 (_ bv4294967292 32)) ?x141)))
 (let (($x380 (and $x208 $x231)))
 (let (($x572 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x294 (bvsub ?x294 (_ bv8 32))) (bvult ?x294 (bvsub ?x294 (_ bv8 32))))))
 (let (($x50 (and (and (and true $x572) $x380) $x496)))
 (let (($x637 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x46 (and true $x637)))
 (let (($x101 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x820 (and $x101 $x46)))
 (let (($x716 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x141 (bvsub ?x141 (_ bv12 32))) (bvult ?x141 (bvsub ?x141 (_ bv12 32))))))
 (let (($x727 (and (and (and true $x101) $x716) $x820)))
 (let (($x325 (and (and (and (and (and (and $x727 $x50) $x632) $x802) $x213) $x629) $x446)))
 (let (($x829 (= $x325 true)))
 (let (($x234 (= $x829 true)))
 (let (($x683 (= $x234 true)))
 (let (($x583 (= $x727 true)))
 (let (($x189 (= $x583 true)))
 (let (($x75 (= $x189 true)))
 (let (($x290 (and $x50 $x632)))
 (let (($x613 (= $x290 true)))
 (let (($x441 (= $x613 true)))
 (let (($x99 (= $x441 true)))
 (let (($x160 (and $x99 $x75)))
 (let (($x421 (and $x160 $x683)))
 (let (($x644 (and $x421 $x753)))
 (let ((?x252 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x825 (= ?x252 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x173 (_ bv0 32))))
 (let (($x188 (and $x581 $x825)))
 (let ((?x239 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (= ?x239 (_ bv0 32))))
 (let (($x487 (and $x652 $x188)))
 (let ((?x350 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x350 (_ bv0 32))))
 (let (($x428 (and $x738 $x487)))
 (let (($x362 (and $x428 $x644)))
 (let ((?x774 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x834 (= ?x774 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x370 (bvuge ?x350 (_ bv1 32))))
 (let (($x484 (=> $x370 $x834)))
 (let (($x414 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x222 (= $x370 $x414)))
 (let (($x553 (= false false)))
 (let (($x45 (=> $x738 $x553)))
 (let (($x506 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x604 (= $x738 $x506)))
 (let (($x467 (and $x604 $x45)))
 (let (($x891 (and $x467 $x222)))
 (let (($x669 (and $x891 $x484)))
 (let (($x122 (and $x669 $x362)))
 (let ((?x38 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x663 (= ?x38 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x889 (bvuge ?x239 (_ bv1 32))))
 (let (($x699 (=> $x889 $x663)))
 (let (($x785 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x454 (= $x889 $x785)))
 (let (($x184 (=> $x652 $x553)))
 (let (($x35 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x473 (= $x652 $x35)))
 (let (($x615 (and $x473 $x184)))
 (let (($x562 (and $x615 $x454)))
 (let (($x274 (and $x562 $x699)))
 (let (($x796 (and $x274 $x122)))
 (let ((?x337 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x498 (= ?x337 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x543 (bvuge ?x173 (_ bv1 32))))
 (let (($x486 (=> $x543 $x498)))
 (let (($x357 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x62 (= $x543 $x357)))
 (let (($x826 (=> $x581 $x553)))
 (let (($x620 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x385 (= $x581 $x620)))
 (let (($x675 (and $x385 $x826)))
 (let (($x590 (and $x675 $x62)))
 (let (($x701 (and $x590 $x486)))
 (let (($x698 (and $x701 $x796)))
 (let ((?x329 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x771 (= ?x329 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x665 (bvuge ?x252 (_ bv1 32))))
 (let (($x196 (=> $x665 $x771)))
 (let (($x520 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x271 (= $x665 $x520)))
 (let (($x415 (=> $x825 $x553)))
 (let (($x797 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x462 (= $x825 $x797)))
 (let (($x81 (and $x462 $x415)))
 (let (($x158 (and $x81 $x271)))
 (let (($x331 (and $x158 $x196)))
 (let (($x5 (and $x331 $x698)))
 (let (($x842 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x670 (and $x842 $x5)))
 (let (($x521 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x223 (and $x521 $x670)))
 (let (($x235 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x691 (and $x235 $x223)))
 (let (($x382 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x96 (and $x382 $x691)))
 (let (($x725 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x542 (and $x725 $x96)))
 (let (($x204 (and $x553 $x542)))
 (let (($x194 (= ?x774 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x284 (and $x194 $x204)))
 (let (($x460 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x695 (and $x460 $x284)))
 (let (($x418 (and $x553 $x695)))
 (let (($x264 (= ?x38 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x166 (and $x264 $x418)))
 (let (($x514 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x346 (and $x514 $x166)))
 (let (($x100 (and $x553 $x346)))
 (let (($x98 (= ?x337 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x445 (and $x98 $x100)))
 (let (($x307 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x117 (and $x307 $x445)))
 (let (($x697 (and $x553 $x117)))
 (let (($x73 (= ?x329 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x558 (and $x73 $x697)))
 (let (($x587 (bvugt ?x565 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x494)))
 (let (($x837 (=> (bvule ?x565 (bvsub (bvadd ?x565 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x333 $x587)))))))
 (let (($x369 (bvugt ?x294 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x407 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x131 (=> (bvule ?x294 (bvsub (bvadd ?x294 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x407 $x369)))))))
 (let (($x123 (bvugt ?x141 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x890 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x824 (=> (bvule ?x141 (bvsub (bvadd ?x141 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x890 $x123)))))))
 (let (($x339 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x513 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x513)))
 (let (($x318 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x339)))))))
 (let (($x381 (and $x318 $x824)))
 (let (($x684 (and $x381 $x131)))
 (let (($x72 (and $x684 $x837)))
 (let (($x828 (and $x72 $x558)))
 (let (($x258 (=> $x828 $x387)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 240 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x454 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x506 (bvuge ?x454 (_ bv1 32))))
 (let (($x562 (= ?x454 (_ bv0 32))))
 (let (($x161 (or $x562 $x506)))
 (let ((?x428 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x847 (bvuge ?x428 (_ bv1 32))))
 (let (($x212 (and $x847 $x161)))
 (let (($x390 (= ?x428 (_ bv0 32))))
 (let (($x547 (and $x390 $x161)))
 (let (($x566 (or $x547 $x212)))
 (let ((?x613 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (bvuge ?x613 (_ bv1 32))))
 (let (($x44 (and $x716 $x566)))
 (let (($x441 (= ?x613 (_ bv0 32))))
 (let (($x688 (and $x441 $x566)))
 (let (($x603 (or $x688 $x44)))
 (let ((?x560 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x702 (bvuge ?x560 (_ bv1 32))))
 (let (($x830 (and $x702 $x603)))
 (let (($x600 (= ?x560 (_ bv0 32))))
 (let (($x355 (and $x600 $x603)))
 (let (($x855 (or $x355 $x830)))
 (let (($x806 (or false $x855)))
 (let (($x798 (= $x806 true)))
 (let (($x816 (= $x798 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x310 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x526 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x526 (concat ?x70 (concat ?x310 ?x63)))))
 (let (($x216 (= ?x106 input.dst.llvm-%m)))
 (let (($x671 (= $x216 true)))
 (let (($x391 (= $x671 true)))
 (let (($x155 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x787 (and true $x155)))
 (let (($x409 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x522 (and $x409 $x787)))
 (let ((?x291 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x661 (bvsub ?x291 (_ bv12 32))))
 (let (($x198 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x291 ?x661) (bvult ?x291 ?x661))))
 (let (($x145 (and (and (and true $x409) $x198) $x522)))
 (let (($x853 (= $x145 true)))
 (let (($x807 (= $x853 true)))
 (let (($x606 (= $x807 true)))
 (let ((?x247 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x102 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let ((?x288 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x297 (= (bvand ?x288 (_ bv4294967292 32)) ?x288)))
 (let (($x863 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x288 (bvsub ?x288 (_ bv4 32))) (bvult ?x288 (bvsub ?x288 (_ bv4 32))))))
 (let (($x502 (and true $x863)))
 (let (($x627 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x745 (and $x627 $x502)))
 (let (($x263 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 (_ bv8 32))) (bvult ?x247 (bvsub ?x247 (_ bv8 32))))))
 (let (($x11 (and (and (and true $x263) $x745) $x297)))
 (let (($x430 (and $x11 $x102)))
 (let (($x353 (= $x430 true)))
 (let (($x419 (= $x353 true)))
 (let (($x341 (= $x419 true)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x811 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x860 (concat (select input.dst.llvm-mem (bvadd ?x811 (_ bv1 32))) (select input.dst.llvm-mem ?x811))))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd ?x811 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x811 (_ bv2 32))) ?x860))))
 (let ((?x848 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x848 (_ bv1 32))))
 (=> $x283 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x648))))))))
 ))
 (let (($x258 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x143 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x848 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x848 (_ bv1 32))))
 (= $x283 (bvuge ?x143 (_ bv1 32)))))))
 ))
 (let (($x456 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x774 (= false false)))
 (let ((?x848 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x848 (_ bv0 32))))
 (=> $x261 $x774)))))
 ))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x848 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x848 (_ bv0 32))))
 (= $x261 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x819 (and $x206 $x456)))
 (let (($x844 (and $x819 $x258)))
 (let (($x332 (and $x844 $x23)))
 (let (($x28 (= $x332 true)))
 (let (($x413 (= $x28 true)))
 (let (($x447 (= $x413 true)))
 (let ((?x269 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x687 (= (_ bv0 32) ?x269)))
 (let ((?x338 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x546 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x338)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x773 (and $x115 $x546)))
 (let (($x548 (and $x773 $x687)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x133 $x548)))
 (let (($x693 (= $x298 true)))
 (let (($x852 (= $x693 true)))
 (let (($x376 (= $x852 true)))
 (let (($x127 (and $x376 $x447)))
 (let (($x108 (and $x127 $x341)))
 (let (($x817 (and $x108 $x606)))
 (let (($x150 (and $x817 $x391)))
 (let ((?x826 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x422 (= ?x826 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x93 (=> $x702 $x422)))
 (let (($x674 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x262 (= $x702 $x674)))
 (let (($x774 (= false false)))
 (let (($x802 (=> $x600 $x774)))
 (let (($x75 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x770 (= $x600 $x75)))
 (let (($x845 (and $x770 $x802)))
 (let (($x712 (and $x845 $x262)))
 (let (($x348 (and $x712 $x93)))
 (let (($x192 (and $x348 $x150)))
 (let ((?x271 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x832 (= ?x271 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x373 (=> $x716 $x832)))
 (let (($x762 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x643 (= $x716 $x762)))
 (let (($x792 (=> $x441 $x774)))
 (let (($x632 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x99 (= $x441 $x632)))
 (let (($x101 (and $x99 $x792)))
 (let (($x539 (and $x101 $x643)))
 (let (($x537 (and $x539 $x373)))
 (let (($x359 (and $x537 $x192)))
 (let ((?x842 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x246 (= ?x842 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x323 (=> $x847 $x246)))
 (let (($x208 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x509 (= $x847 $x208)))
 (let (($x443 (=> $x390 $x774)))
 (let (($x188 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x439 (= $x390 $x188)))
 (let (($x538 (and $x439 $x443)))
 (let (($x114 (and $x538 $x509)))
 (let (($x231 (and $x114 $x323)))
 (let (($x295 (and $x231 $x359)))
 (let ((?x324 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x467 (= ?x324 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x370 (=> $x506 $x467)))
 (let (($x76 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x604 (= $x506 $x76)))
 (let (($x663 (=> $x562 $x774)))
 (let (($x889 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x775 (= $x562 $x889)))
 (let (($x699 (and $x775 $x663)))
 (let (($x45 (and $x699 $x604)))
 (let (($x414 (and $x45 $x370)))
 (let (($x474 (and $x414 $x295)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x312 (and $x239 $x474)))
 (let (($x701 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x124 (and $x701 $x312)))
 (let (($x498 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x678 (and $x498 $x124)))
 (let (($x590 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x621 (and $x590 $x678)))
 (let (($x357 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x43 (and $x357 $x621)))
 (let (($x575 (and $x774 $x43)))
 (let (($x675 (= ?x826 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x379 (and $x675 $x575)))
 (let (($x771 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x594 (and $x771 $x379)))
 (let (($x285 (and $x774 $x594)))
 (let (($x158 (= ?x271 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x840 (and $x158 $x285)))
 (let (($x825 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x87 (and $x825 $x840)))
 (let (($x827 (and $x774 $x87)))
 (let (($x230 (= ?x842 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x769 (and $x230 $x827)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x29 (and $x194 $x769)))
 (let (($x805 (and $x774 $x29)))
 (let (($x460 (= ?x324 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x743 (and $x460 $x805)))
 (let (($x14 (bvugt ?x288 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x410 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x288 (_ bv3 32)))))
 (let (($x73 (=> (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x410 $x14)))))))
 (let (($x858 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x888 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x247 (_ bv3 32)))))
 (let (($x843 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x888 $x858)))))))
 (let (($x159 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x291 (_ bv3 32)))))
 (let (($x776 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x176 $x159)))))))
 (let (($x475 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x721 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x79 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x721 $x475)))))))
 (let (($x750 (and $x79 $x776)))
 (let (($x47 (and $x750 $x843)))
 (let (($x758 (and $x47 $x73)))
 (let (($x861 (and $x758 $x743)))
 (let (($x617 (=> $x861 $x816)))
 (not $x617))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x454 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x506 (bvuge ?x454 (_ bv1 32))))
 (let (($x562 (= ?x454 (_ bv0 32))))
 (let (($x161 (or $x562 $x506)))
 (let ((?x428 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x847 (bvuge ?x428 (_ bv1 32))))
 (let (($x212 (and $x847 $x161)))
 (let (($x390 (= ?x428 (_ bv0 32))))
 (let (($x547 (and $x390 $x161)))
 (let (($x566 (or $x547 $x212)))
 (let ((?x613 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (bvuge ?x613 (_ bv1 32))))
 (let (($x44 (and $x716 $x566)))
 (let (($x441 (= ?x613 (_ bv0 32))))
 (let (($x688 (and $x441 $x566)))
 (let (($x603 (or $x688 $x44)))
 (let ((?x560 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x702 (bvuge ?x560 (_ bv1 32))))
 (let (($x830 (and $x702 $x603)))
 (let (($x600 (= ?x560 (_ bv0 32))))
 (let (($x355 (and $x600 $x603)))
 (let (($x855 (or $x355 $x830)))
 (let (($x806 (or false $x855)))
 (let (($x798 (= $x806 true)))
 (let (($x816 (= $x798 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x310 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x526 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x526 (concat ?x70 (concat ?x310 ?x63)))))
 (let (($x216 (= ?x106 input.dst.llvm-%m)))
 (let (($x671 (= $x216 true)))
 (let (($x391 (= $x671 true)))
 (let (($x155 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x787 (and true $x155)))
 (let (($x409 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x522 (and $x409 $x787)))
 (let ((?x291 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x661 (bvsub ?x291 (_ bv12 32))))
 (let (($x198 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x291 ?x661) (bvult ?x291 ?x661))))
 (let (($x145 (and (and (and true $x409) $x198) $x522)))
 (let (($x853 (= $x145 true)))
 (let (($x807 (= $x853 true)))
 (let (($x606 (= $x807 true)))
 (let ((?x247 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x102 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let ((?x288 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x297 (= (bvand ?x288 (_ bv4294967292 32)) ?x288)))
 (let (($x863 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x288 (bvsub ?x288 (_ bv4 32))) (bvult ?x288 (bvsub ?x288 (_ bv4 32))))))
 (let (($x502 (and true $x863)))
 (let (($x627 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x745 (and $x627 $x502)))
 (let (($x263 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 (_ bv8 32))) (bvult ?x247 (bvsub ?x247 (_ bv8 32))))))
 (let (($x11 (and (and (and true $x263) $x745) $x297)))
 (let (($x430 (and $x11 $x102)))
 (let (($x353 (= $x430 true)))
 (let (($x419 (= $x353 true)))
 (let (($x341 (= $x419 true)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x811 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x860 (concat (select input.dst.llvm-mem (bvadd ?x811 (_ bv1 32))) (select input.dst.llvm-mem ?x811))))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd ?x811 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x811 (_ bv2 32))) ?x860))))
 (let ((?x848 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x848 (_ bv1 32))))
 (=> $x283 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x648))))))))
 ))
 (let (($x258 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x143 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x848 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x848 (_ bv1 32))))
 (= $x283 (bvuge ?x143 (_ bv1 32)))))))
 ))
 (let (($x456 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x774 (= false false)))
 (let ((?x848 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x848 (_ bv0 32))))
 (=> $x261 $x774)))))
 ))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x848 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x848 (_ bv0 32))))
 (= $x261 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x819 (and $x206 $x456)))
 (let (($x844 (and $x819 $x258)))
 (let (($x332 (and $x844 $x23)))
 (let (($x28 (= $x332 true)))
 (let (($x413 (= $x28 true)))
 (let (($x447 (= $x413 true)))
 (let ((?x269 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x687 (= (_ bv0 32) ?x269)))
 (let ((?x338 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x546 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x338)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x773 (and $x115 $x546)))
 (let (($x548 (and $x773 $x687)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x133 $x548)))
 (let (($x693 (= $x298 true)))
 (let (($x852 (= $x693 true)))
 (let (($x376 (= $x852 true)))
 (let (($x127 (and $x376 $x447)))
 (let (($x108 (and $x127 $x341)))
 (let (($x817 (and $x108 $x606)))
 (let (($x150 (and $x817 $x391)))
 (let ((?x826 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x422 (= ?x826 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x93 (=> $x702 $x422)))
 (let (($x674 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x262 (= $x702 $x674)))
 (let (($x774 (= false false)))
 (let (($x802 (=> $x600 $x774)))
 (let (($x75 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x770 (= $x600 $x75)))
 (let (($x845 (and $x770 $x802)))
 (let (($x712 (and $x845 $x262)))
 (let (($x348 (and $x712 $x93)))
 (let (($x192 (and $x348 $x150)))
 (let ((?x271 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x832 (= ?x271 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x373 (=> $x716 $x832)))
 (let (($x762 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x643 (= $x716 $x762)))
 (let (($x792 (=> $x441 $x774)))
 (let (($x632 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x99 (= $x441 $x632)))
 (let (($x101 (and $x99 $x792)))
 (let (($x539 (and $x101 $x643)))
 (let (($x537 (and $x539 $x373)))
 (let (($x359 (and $x537 $x192)))
 (let ((?x842 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x246 (= ?x842 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x323 (=> $x847 $x246)))
 (let (($x208 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x509 (= $x847 $x208)))
 (let (($x443 (=> $x390 $x774)))
 (let (($x188 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x439 (= $x390 $x188)))
 (let (($x538 (and $x439 $x443)))
 (let (($x114 (and $x538 $x509)))
 (let (($x231 (and $x114 $x323)))
 (let (($x295 (and $x231 $x359)))
 (let ((?x324 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x467 (= ?x324 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x370 (=> $x506 $x467)))
 (let (($x76 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x604 (= $x506 $x76)))
 (let (($x663 (=> $x562 $x774)))
 (let (($x889 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x775 (= $x562 $x889)))
 (let (($x699 (and $x775 $x663)))
 (let (($x45 (and $x699 $x604)))
 (let (($x414 (and $x45 $x370)))
 (let (($x474 (and $x414 $x295)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x312 (and $x239 $x474)))
 (let (($x701 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x124 (and $x701 $x312)))
 (let (($x498 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x678 (and $x498 $x124)))
 (let (($x590 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x621 (and $x590 $x678)))
 (let (($x357 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x43 (and $x357 $x621)))
 (let (($x575 (and $x774 $x43)))
 (let (($x675 (= ?x826 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x379 (and $x675 $x575)))
 (let (($x771 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x594 (and $x771 $x379)))
 (let (($x285 (and $x774 $x594)))
 (let (($x158 (= ?x271 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x840 (and $x158 $x285)))
 (let (($x825 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x87 (and $x825 $x840)))
 (let (($x827 (and $x774 $x87)))
 (let (($x230 (= ?x842 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x769 (and $x230 $x827)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x29 (and $x194 $x769)))
 (let (($x805 (and $x774 $x29)))
 (let (($x460 (= ?x324 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x743 (and $x460 $x805)))
 (let (($x14 (bvugt ?x288 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x410 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x288 (_ bv3 32)))))
 (let (($x73 (=> (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x410 $x14)))))))
 (let (($x858 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x888 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x247 (_ bv3 32)))))
 (let (($x843 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x888 $x858)))))))
 (let (($x159 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x291 (_ bv3 32)))))
 (let (($x776 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x176 $x159)))))))
 (let (($x475 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x721 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x79 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x721 $x475)))))))
 (let (($x750 (and $x79 $x776)))
 (let (($x47 (and $x750 $x843)))
 (let (($x758 (and $x47 $x73)))
 (let (($x861 (and $x758 $x743)))
 (let (($x617 (=> $x861 $x816)))
 (not $x617))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 229 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2889963/query
