==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x14 $x12)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x14 $x12)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x151 (= true false)))
 (let (($x152 (= $x151 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x131 (concat ?x128 (concat ?x124 ?x122)))))
 (let (($x133 (= ?x132 input.dst.llvm-%n)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x114 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x106)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x101 $x104)))
 (let (($x108 (and $x105 $x107)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x99 $x108)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x118 (and $x112 $x117)))
 (let (($x136 (and $x118 $x135)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x137 (and $x96 $x136)))
 (let (($x93 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x138 (and $x93 $x137)))
 (let (($x90 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x60 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x60 (_ bv1 32))))
 (=> $x77 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x79 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x50 (_ bv1 32))))
 (let ((?x60 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x60 (_ bv1 32))))
 (= $x77 $x74))))))
 ))
 (let (($x67 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x64 (= false false)))
 (let ((?x60 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x60 (_ bv0 32))))
 (=> $x61 $x64)))))
 ))
 (let (($x63 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x50 (_ bv0 32))))
 (let ((?x60 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x60 (_ bv0 32))))
 (= $x61 $x53))))))
 ))
 (let (($x68 (and $x63 $x67)))
 (let (($x80 (and $x68 $x79)))
 (let (($x91 (and $x80 $x90)))
 (let (($x139 (and $x91 $x138)))
 (let (($x25 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x140 (and $x25 $x139)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x141 (and $x20 $x140)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x142 (and $x30 $x141)))
 (let (($x22 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x143 (and $x22 $x142)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x144 (and $x18 $x143)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x145 (and $x42 $x144)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x146 (and $x37 $x145)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x147 (and $x28 $x146)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x148 (and $x44 $x147)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x149 (and $x9 $x148)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x150 (and $x32 $x149)))
 (let (($x153 (=> $x150 $x152)))
 (not $x153)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x151 (= true false)))
 (let (($x152 (= $x151 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x131 (concat ?x128 (concat ?x124 ?x122)))))
 (let (($x133 (= ?x132 input.dst.llvm-%n)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x114 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x106)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x101 $x104)))
 (let (($x108 (and $x105 $x107)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x99 $x108)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x118 (and $x112 $x117)))
 (let (($x136 (and $x118 $x135)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x137 (and $x96 $x136)))
 (let (($x93 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x138 (and $x93 $x137)))
 (let (($x90 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x60 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x60 (_ bv1 32))))
 (=> $x77 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x79 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x50 (_ bv1 32))))
 (let ((?x60 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x60 (_ bv1 32))))
 (= $x77 $x74))))))
 ))
 (let (($x67 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x64 (= false false)))
 (let ((?x60 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x60 (_ bv0 32))))
 (=> $x61 $x64)))))
 ))
 (let (($x63 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x50 (_ bv0 32))))
 (let ((?x60 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x60 (_ bv0 32))))
 (= $x61 $x53))))))
 ))
 (let (($x68 (and $x63 $x67)))
 (let (($x80 (and $x68 $x79)))
 (let (($x91 (and $x80 $x90)))
 (let (($x139 (and $x91 $x138)))
 (let (($x25 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x140 (and $x25 $x139)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x141 (and $x20 $x140)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x142 (and $x30 $x141)))
 (let (($x22 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x143 (and $x22 $x142)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x144 (and $x18 $x143)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x145 (and $x42 $x144)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x146 (and $x37 $x145)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x147 (and $x28 $x146)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x148 (and $x44 $x147)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x149 (and $x9 $x148)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x150 (and $x32 $x149)))
 (let (($x153 (=> $x150 $x152)))
 (not $x153)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000144)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000147)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000144)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd7e22140)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd7e22143)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd7e22140)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x149)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x144 $x147)))
 (let (($x151 (and $x148 $x150)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x140 $x151)))
 (let (($x75 (= $x73 true)))
 (let (($x76 (= $x75 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x48 (concat ?x29 (concat ?x26 ?x120)))))
 (let (($x10 (= input.dst.llvm-%n ?x40)))
 (let (($x14 (and (and (and $x140 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x151) $x10)))
 (let (($x6 (= $x14 true)))
 (let (($x8 (= $x6 true)))
 (let (($x23 (= $x8 true)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x34 (and $x137 $x23)))
 (let (($x134 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x36 (and $x134 $x34)))
 (let (($x129 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x99 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x99 (_ bv1 32))))
 (=> $x116 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x118 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x66 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x99 (_ bv1 32))))
 (= $x116 $x113))))))
 ))
 (let (($x106 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x103 (= false false)))
 (let ((?x99 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x99 (_ bv0 32))))
 (=> $x100 $x103)))))
 ))
 (let (($x102 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x66 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x99 (_ bv0 32))))
 (= $x100 $x39))))))
 ))
 (let (($x107 (and $x102 $x106)))
 (let (($x119 (and $x107 $x118)))
 (let (($x132 (and $x119 $x129)))
 (let (($x51 (and $x132 $x36)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x49 (and $x47 $x51)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x52 (and $x30 $x49)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x54 (and $x80 $x52)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x55 (and $x18 $x54)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x56 (and $x92 $x55)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x57 (and $x62 $x56)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x65 (and $x91 $x57)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x69 (and $x20 $x65)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x70 (and $x7 $x69)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x71 (and $x19 $x70)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x72 (and $x21 $x71)))
 (let (($x81 (=> $x72 $x76)))
 (not $x81))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x149)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x144 $x147)))
 (let (($x151 (and $x148 $x150)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x140 $x151)))
 (let (($x75 (= $x73 true)))
 (let (($x76 (= $x75 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x48 (concat ?x29 (concat ?x26 ?x120)))))
 (let (($x10 (= input.dst.llvm-%n ?x40)))
 (let (($x14 (and (and (and $x140 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x151) $x10)))
 (let (($x6 (= $x14 true)))
 (let (($x8 (= $x6 true)))
 (let (($x23 (= $x8 true)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x34 (and $x137 $x23)))
 (let (($x134 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x36 (and $x134 $x34)))
 (let (($x129 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x99 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x99 (_ bv1 32))))
 (=> $x116 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x118 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x66 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x99 (_ bv1 32))))
 (= $x116 $x113))))))
 ))
 (let (($x106 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x103 (= false false)))
 (let ((?x99 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x99 (_ bv0 32))))
 (=> $x100 $x103)))))
 ))
 (let (($x102 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x66 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x99 (_ bv0 32))))
 (= $x100 $x39))))))
 ))
 (let (($x107 (and $x102 $x106)))
 (let (($x119 (and $x107 $x118)))
 (let (($x132 (and $x119 $x129)))
 (let (($x51 (and $x132 $x36)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x49 (and $x47 $x51)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x52 (and $x30 $x49)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x54 (and $x80 $x52)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x55 (and $x18 $x54)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x56 (and $x92 $x55)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x57 (and $x62 $x56)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x65 (and $x91 $x57)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x69 (and $x20 $x65)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x70 (and $x7 $x69)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x71 (and $x19 $x70)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x72 (and $x21 $x71)))
 (let (($x81 (=> $x72 $x76)))
 (not $x81))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x126 (= $x131 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x50 (concat ?x67 (concat ?x46 ?x68)))))
 (let (($x64 (= input.dst.llvm-%n ?x79)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x71 $x75)))
 (let (($x153 (and $x76 $x82)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and (and (and $x57 $x69) $x153) $x64)))
 (let (($x61 (= $x77 true)))
 (let (($x74 (= $x61 true)))
 (let (($x90 (= $x74 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x43 (and $x54 $x90)))
 (let (($x51 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x17 (and $x51 $x43)))
 (let (($x23 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x140 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x140 (_ bv1 32))))
 (=> $x12 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x29 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x125 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x125 (_ bv1 32))))
 (let ((?x140 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x140 (_ bv1 32))))
 (= $x12 $x152))))))
 ))
 (let (($x146 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x143 (= false false)))
 (let ((?x140 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x140 (_ bv0 32))))
 (=> $x141 $x143)))))
 ))
 (let (($x38 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x125 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x125 (_ bv0 32))))
 (let ((?x140 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x140 (_ bv0 32))))
 (= $x141 $x133))))))
 ))
 (let (($x147 (and $x38 $x146)))
 (let (($x121 (and $x147 $x29)))
 (let (($x34 (and $x121 $x23)))
 (let (($x94 (and $x34 $x17)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x95 (and $x47 $x94)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x96 (and $x30 $x95)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x104 (and $x80 $x96)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x108 (and $x18 $x104)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x109 (and $x92 $x108)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x110 (and $x62 $x109)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x111 (and $x91 $x110)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x112 (and $x20 $x111)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x114 (and $x7 $x112)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x115 (and $x19 $x114)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x130 (and $x21 $x115)))
 (let (($x127 (=> $x130 $x126)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x126 (= $x131 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x50 (concat ?x67 (concat ?x46 ?x68)))))
 (let (($x64 (= input.dst.llvm-%n ?x79)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x71 $x75)))
 (let (($x153 (and $x76 $x82)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and (and (and $x57 $x69) $x153) $x64)))
 (let (($x61 (= $x77 true)))
 (let (($x74 (= $x61 true)))
 (let (($x90 (= $x74 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x43 (and $x54 $x90)))
 (let (($x51 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x17 (and $x51 $x43)))
 (let (($x23 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x140 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x140 (_ bv1 32))))
 (=> $x12 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x29 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x125 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x125 (_ bv1 32))))
 (let ((?x140 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x140 (_ bv1 32))))
 (= $x12 $x152))))))
 ))
 (let (($x146 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x143 (= false false)))
 (let ((?x140 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x140 (_ bv0 32))))
 (=> $x141 $x143)))))
 ))
 (let (($x38 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x125 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x125 (_ bv0 32))))
 (let ((?x140 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x140 (_ bv0 32))))
 (= $x141 $x133))))))
 ))
 (let (($x147 (and $x38 $x146)))
 (let (($x121 (and $x147 $x29)))
 (let (($x34 (and $x121 $x23)))
 (let (($x94 (and $x34 $x17)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x95 (and $x47 $x94)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x96 (and $x30 $x95)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x104 (and $x80 $x96)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x108 (and $x18 $x104)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x109 (and $x92 $x108)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x110 (and $x62 $x109)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x111 (and $x91 $x110)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x112 (and $x20 $x111)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x114 (and $x7 $x112)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x115 (and $x19 $x114)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x130 (and $x21 $x115)))
 (let (($x127 (=> $x130 $x126)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x41)))
 (let (($x10 (= ?x40 input.spec-%var-n-1)))
 (let (($x123 (= $x10 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x102 (concat ?x103 (concat ?x118 ?x66)))))
 (let (($x106 (= input.dst.llvm-%n ?x105)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x128)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x115 $x126)))
 (let (($x25 (and $x127 $x13)))
 (let (($x112 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and (and (and $x110 $x112) $x25) $x106)))
 (let (($x129 (= $x113 true)))
 (let (($x122 (= $x129 true)))
 (let (($x132 (= $x122 true)))
 (let (($x104 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x134 (and $x104 $x132)))
 (let (($x94 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x135 (and $x94 $x134)))
 (let (($x90 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x57 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x57 (_ bv1 32))))
 (=> $x28 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x67 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x8 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x8 (_ bv1 32))))
 (let ((?x57 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x57 (_ bv1 32))))
 (= $x28 $x154))))))
 ))
 (let (($x73 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x70 (= false false)))
 (let ((?x57 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x57 (_ bv0 32))))
 (=> $x65 $x70)))))
 ))
 (let (($x22 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x8 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x8 (_ bv0 32))))
 (let ((?x57 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x57 (_ bv0 32))))
 (= $x65 $x36))))))
 ))
 (let (($x75 (and $x22 $x73)))
 (let (($x42 (and $x75 $x67)))
 (let (($x43 (and $x42 $x90)))
 (let (($x136 (and $x43 $x135)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x137 (and $x47 $x136)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x144 (and $x30 $x137)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x148 (and $x80 $x144)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x149 (and $x18 $x148)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x150 (and $x92 $x149)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x151 (and $x62 $x150)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x15 (and $x91 $x151)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x31 (and $x20 $x15)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x48 (and $x7 $x31)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x26 (and $x21 $x48)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x120 (and $x37 $x26)))
 (let (($x83 (=> $x120 $x123)))
 (not $x83))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x41)))
 (let (($x10 (= ?x40 input.spec-%var-n-1)))
 (let (($x123 (= $x10 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x102 (concat ?x103 (concat ?x118 ?x66)))))
 (let (($x106 (= input.dst.llvm-%n ?x105)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x128)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x115 $x126)))
 (let (($x25 (and $x127 $x13)))
 (let (($x112 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and (and (and $x110 $x112) $x25) $x106)))
 (let (($x129 (= $x113 true)))
 (let (($x122 (= $x129 true)))
 (let (($x132 (= $x122 true)))
 (let (($x104 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x134 (and $x104 $x132)))
 (let (($x94 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x135 (and $x94 $x134)))
 (let (($x90 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x57 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x57 (_ bv1 32))))
 (=> $x28 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x67 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x8 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x8 (_ bv1 32))))
 (let ((?x57 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x57 (_ bv1 32))))
 (= $x28 $x154))))))
 ))
 (let (($x73 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x70 (= false false)))
 (let ((?x57 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x57 (_ bv0 32))))
 (=> $x65 $x70)))))
 ))
 (let (($x22 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x8 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x8 (_ bv0 32))))
 (let ((?x57 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x57 (_ bv0 32))))
 (= $x65 $x36))))))
 ))
 (let (($x75 (and $x22 $x73)))
 (let (($x42 (and $x75 $x67)))
 (let (($x43 (and $x42 $x90)))
 (let (($x136 (and $x43 $x135)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x137 (and $x47 $x136)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x144 (and $x30 $x137)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x148 (and $x80 $x144)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x149 (and $x18 $x148)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x150 (and $x92 $x149)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x151 (and $x62 $x150)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x15 (and $x91 $x151)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x31 (and $x20 $x15)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x48 (and $x7 $x31)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x26 (and $x21 $x48)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x120 (and $x37 $x26)))
 (let (($x83 (=> $x120 $x123)))
 (not $x83))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x46)))
 (let (($x53 (= ?x68 input.dst.llvm-%n)))
 (let (($x60 (= $x53 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x143 (concat ?x121 (concat ?x141 ?x139)))))
 (let (($x142 (= input.dst.llvm-%n ?x133)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x10)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x26 $x41)))
 (let (($x83 (and $x40 $x123)))
 (let (($x31 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and (and (and $x151 $x31) $x83) $x142)))
 (let (($x147 (= $x146 true)))
 (let (($x12 (= $x147 true)))
 (let (($x152 (= $x12 true)))
 (let (($x148 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x23 (and $x148 $x152)))
 (let (($x136 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x6 (and $x136 $x23)))
 (let (($x132 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x110 (_ bv1 32))))
 (=> $x124 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x103 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x74 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x74 (_ bv1 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x110 (_ bv1 32))))
 (= $x124 $x98))))))
 ))
 (let (($x131 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x110 (_ bv0 32))))
 (=> $x111 $x114)))))
 ))
 (let (($x107 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x74 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x74 (_ bv0 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x110 (_ bv0 32))))
 (= $x111 $x17))))))
 ))
 (let (($x126 (and $x107 $x131)))
 (let (($x117 (and $x126 $x103)))
 (let (($x134 (and $x117 $x132)))
 (let (($x34 (and $x134 $x6)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x51 (and $x47 $x34)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x49 (and $x30 $x51)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x52 (and $x80 $x49)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x54 (and $x18 $x52)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x71 (and $x92 $x54)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x76 (and $x62 $x71)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x81 (and $x91 $x76)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x82 (and $x20 $x81)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x153 (and $x7 $x82)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x63 (and $x21 $x153)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x87 (and $x37 $x63)))
 (let (($x79 (=> $x87 $x60)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x46)))
 (let (($x53 (= ?x68 input.dst.llvm-%n)))
 (let (($x60 (= $x53 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x143 (concat ?x121 (concat ?x141 ?x139)))))
 (let (($x142 (= input.dst.llvm-%n ?x133)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x10)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x26 $x41)))
 (let (($x83 (and $x40 $x123)))
 (let (($x31 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and (and (and $x151 $x31) $x83) $x142)))
 (let (($x147 (= $x146 true)))
 (let (($x12 (= $x147 true)))
 (let (($x152 (= $x12 true)))
 (let (($x148 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x23 (and $x148 $x152)))
 (let (($x136 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x6 (and $x136 $x23)))
 (let (($x132 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x110 (_ bv1 32))))
 (=> $x124 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x103 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x74 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x74 (_ bv1 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x110 (_ bv1 32))))
 (= $x124 $x98))))))
 ))
 (let (($x131 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x110 (_ bv0 32))))
 (=> $x111 $x114)))))
 ))
 (let (($x107 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x74 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x74 (_ bv0 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x110 (_ bv0 32))))
 (= $x111 $x17))))))
 ))
 (let (($x126 (and $x107 $x131)))
 (let (($x117 (and $x126 $x103)))
 (let (($x134 (and $x117 $x132)))
 (let (($x34 (and $x134 $x6)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x51 (and $x47 $x34)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x49 (and $x30 $x51)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x52 (and $x80 $x49)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x54 (and $x18 $x52)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x71 (and $x92 $x54)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x76 (and $x62 $x71)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x81 (and $x91 $x76)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x82 (and $x20 $x81)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x153 (and $x7 $x82)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x63 (and $x21 $x153)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x87 (and $x37 $x63)))
 (let (($x79 (=> $x87 $x60)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x118 (= $x102 true)))
 (let (($x66 (= $x118 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x70 (concat ?x42 (concat ?x65 ?x56)))))
 (let (($x69 (= input.dst.llvm-%n ?x36)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x63 $x46)))
 (let (($x79 (and $x68 $x60)))
 (let (($x82 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and (and (and $x76 $x82) $x79) $x69)))
 (let (($x75 (= $x73 true)))
 (let (($x28 (= $x75 true)))
 (let (($x154 (= $x28 true)))
 (let (($x52 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x90 (and $x52 $x154)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x61 (and $x34 $x90)))
 (let (($x152 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x151 (_ bv1 32))))
 (=> $x5 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x121 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x122 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x122 (_ bv1 32))))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x151 (_ bv1 32))))
 (= $x5 $x84))))))
 ))
 (let (($x35 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x48 (= false false)))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x151 (_ bv0 32))))
 (=> $x15 $x48)))))
 ))
 (let (($x38 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x122 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x122 (_ bv0 32))))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x151 (_ bv0 32))))
 (= $x15 $x135))))))
 ))
 (let (($x41 (and $x38 $x35)))
 (let (($x140 (and $x41 $x121)))
 (let (($x23 (and $x140 $x152)))
 (let (($x43 (and $x23 $x61)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x94 (and $x47 $x43)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x95 (and $x30 $x94)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x96 (and $x80 $x95)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x104 (and $x18 $x96)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x115 (and $x92 $x104)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x127 (and $x62 $x115)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x128 (and $x91 $x127)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x13 (and $x20 $x128)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x25 (and $x7 $x13)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x116 (and $x21 $x25)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x101 (and $x37 $x116)))
 (let (($x119 (=> $x101 $x66)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x118 (= $x102 true)))
 (let (($x66 (= $x118 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x70 (concat ?x42 (concat ?x65 ?x56)))))
 (let (($x69 (= input.dst.llvm-%n ?x36)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x63 $x46)))
 (let (($x79 (and $x68 $x60)))
 (let (($x82 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and (and (and $x76 $x82) $x79) $x69)))
 (let (($x75 (= $x73 true)))
 (let (($x28 (= $x75 true)))
 (let (($x154 (= $x28 true)))
 (let (($x52 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x90 (and $x52 $x154)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x61 (and $x34 $x90)))
 (let (($x152 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x151 (_ bv1 32))))
 (=> $x5 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x121 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x122 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x122 (_ bv1 32))))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x151 (_ bv1 32))))
 (= $x5 $x84))))))
 ))
 (let (($x35 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x48 (= false false)))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x151 (_ bv0 32))))
 (=> $x15 $x48)))))
 ))
 (let (($x38 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x122 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x122 (_ bv0 32))))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x151 (_ bv0 32))))
 (= $x15 $x135))))))
 ))
 (let (($x41 (and $x38 $x35)))
 (let (($x140 (and $x41 $x121)))
 (let (($x23 (and $x140 $x152)))
 (let (($x43 (and $x23 $x61)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x94 (and $x47 $x43)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x95 (and $x30 $x94)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x96 (and $x80 $x95)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x104 (and $x18 $x96)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x115 (and $x92 $x104)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x127 (and $x62 $x115)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x128 (and $x91 $x127)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x13 (and $x20 $x128)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x25 (and $x7 $x13)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x116 (and $x21 $x25)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x101 (and $x37 $x116)))
 (let (($x119 (=> $x101 $x66)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x214 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (= $x214 false)))
 (let (($x216 (= $x215 true)))
 (let ((?x115 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x115)))
 (let (($x196 (= ?x127 input.dst.llvm-%n)))
 (let (($x197 (= $x196 true)))
 (let (($x198 (= $x197 true)))
 (let (($x191 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x191 true)))
 (let (($x193 (= $x192 true)))
 (let (($x186 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x187 (= $x186 true)))
 (let (($x188 (= $x187 true)))
 (let (($x189 (= $x188 true)))
 (let (($x181 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let (($x184 (= $x183 true)))
 (let (($x176 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x177 (= $x176 true)))
 (let (($x178 (= $x177 true)))
 (let (($x179 (= $x178 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x166 (= (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x167 (= $x166 true)))
 (let (($x168 (= $x167 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x158)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x85 $x156)))
 (let (($x160 (and $x157 $x159)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x105 $x160)))
 (let (($x162 (= $x161 true)))
 (let (($x163 (= $x162 true)))
 (let (($x164 (= $x163 true)))
 (let (($x141 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x141 true)))
 (let (($x125 (= $x139 true)))
 (let (($x123 (= (_ bv0 32) input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x83 (= $x123 true)))
 (let (($x145 (= $x83 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x148 (= $x144 true)))
 (let (($x26 (= $x148 true)))
 (let (($x40 (= $x26 true)))
 (let (($x132 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x129 (= $x132 true)))
 (let (($x134 (= $x129 true)))
 (let (($x136 (= $x134 true)))
 (let (($x130 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x126 (= $x131 true)))
 (let (($x124 (= $x126 true)))
 (let (($x108 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x114 (= $x108 true)))
 (let (($x17 (= $x114 true)))
 (let (($x112 (= $x17 true)))
 (let (($x111 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x74 (= $x111 true)))
 (let (($x97 (= $x74 true)))
 (let (($x103 (= $x97 true)))
 (let (($x39 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x99 (= $x39 true)))
 (let (($x100 (= $x99 true)))
 (let (($x109 (= $x100 true)))
 (let (($x101 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x102 (= $x101 true)))
 (let (($x118 (= $x102 true)))
 (let (($x66 (= $x118 true)))
 (let (($x128 (= ?x127 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x13 (= $x128 true)))
 (let (($x25 (= $x13 true)))
 (let (($x119 (and $x25 $x66)))
 (let (($x110 (and $x119 $x109)))
 (let (($x117 (and $x110 $x103)))
 (let (($x107 (and $x117 $x112)))
 (let (($x98 (and $x107 $x124)))
 (let (($x137 (and $x98 $x136)))
 (let (($x10 (and $x137 $x40)))
 (let (($x138 (and $x10 $x145)))
 (let (($x14 (and $x138 $x125)))
 (let (($x165 (and $x14 $x164)))
 (let (($x169 (and $x165 $x168)))
 (let (($x175 (and $x169 $x174)))
 (let (($x180 (and $x175 $x179)))
 (let (($x185 (and $x180 $x184)))
 (let (($x190 (and $x185 $x189)))
 (let (($x194 (and $x190 $x193)))
 (let (($x199 (and $x194 $x198)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x200 (and $x96 $x199)))
 (let (($x43 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x201 (and $x43 $x200)))
 (let (($x154 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x76 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x76 (_ bv1 32))))
 (=> $x88 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x42 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x12 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x12 (_ bv1 32))))
 (let ((?x76 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x76 (_ bv1 32))))
 (= $x88 $x64))))))
 ))
 (let (($x50 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x153 (= false false)))
 (let ((?x76 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x76 (_ bv0 32))))
 (=> $x81 $x153)))))
 ))
 (let (($x22 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x12 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x12 (_ bv0 32))))
 (let ((?x76 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x76 (_ bv0 32))))
 (= $x81 $x6))))))
 ))
 (let (($x46 (and $x22 $x50)))
 (let (($x57 (and $x46 $x42)))
 (let (($x90 (and $x57 $x154)))
 (let (($x202 (and $x90 $x201)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x203 (and $x47 $x202)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x204 (and $x30 $x203)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x205 (and $x80 $x204)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x206 (and $x18 $x205)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x207 (and $x92 $x206)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x208 (and $x62 $x207)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x209 (and $x91 $x208)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x210 (and $x21 $x209)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x211 (and $x37 $x210)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x212 (and $x9 $x211)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x213 (and $x20 $x212)))
 (let (($x217 (=> $x213 $x216)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x214 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (= $x214 false)))
 (let (($x216 (= $x215 true)))
 (let ((?x115 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x115)))
 (let (($x196 (= ?x127 input.dst.llvm-%n)))
 (let (($x197 (= $x196 true)))
 (let (($x198 (= $x197 true)))
 (let (($x191 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x191 true)))
 (let (($x193 (= $x192 true)))
 (let (($x186 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x187 (= $x186 true)))
 (let (($x188 (= $x187 true)))
 (let (($x189 (= $x188 true)))
 (let (($x181 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let (($x184 (= $x183 true)))
 (let (($x176 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x177 (= $x176 true)))
 (let (($x178 (= $x177 true)))
 (let (($x179 (= $x178 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x166 (= (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x167 (= $x166 true)))
 (let (($x168 (= $x167 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x158)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x85 $x156)))
 (let (($x160 (and $x157 $x159)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x105 $x160)))
 (let (($x162 (= $x161 true)))
 (let (($x163 (= $x162 true)))
 (let (($x164 (= $x163 true)))
 (let (($x141 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x141 true)))
 (let (($x125 (= $x139 true)))
 (let (($x123 (= (_ bv0 32) input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x83 (= $x123 true)))
 (let (($x145 (= $x83 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x148 (= $x144 true)))
 (let (($x26 (= $x148 true)))
 (let (($x40 (= $x26 true)))
 (let (($x132 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x129 (= $x132 true)))
 (let (($x134 (= $x129 true)))
 (let (($x136 (= $x134 true)))
 (let (($x130 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x126 (= $x131 true)))
 (let (($x124 (= $x126 true)))
 (let (($x108 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x114 (= $x108 true)))
 (let (($x17 (= $x114 true)))
 (let (($x112 (= $x17 true)))
 (let (($x111 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x74 (= $x111 true)))
 (let (($x97 (= $x74 true)))
 (let (($x103 (= $x97 true)))
 (let (($x39 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x99 (= $x39 true)))
 (let (($x100 (= $x99 true)))
 (let (($x109 (= $x100 true)))
 (let (($x101 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x102 (= $x101 true)))
 (let (($x118 (= $x102 true)))
 (let (($x66 (= $x118 true)))
 (let (($x128 (= ?x127 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x13 (= $x128 true)))
 (let (($x25 (= $x13 true)))
 (let (($x119 (and $x25 $x66)))
 (let (($x110 (and $x119 $x109)))
 (let (($x117 (and $x110 $x103)))
 (let (($x107 (and $x117 $x112)))
 (let (($x98 (and $x107 $x124)))
 (let (($x137 (and $x98 $x136)))
 (let (($x10 (and $x137 $x40)))
 (let (($x138 (and $x10 $x145)))
 (let (($x14 (and $x138 $x125)))
 (let (($x165 (and $x14 $x164)))
 (let (($x169 (and $x165 $x168)))
 (let (($x175 (and $x169 $x174)))
 (let (($x180 (and $x175 $x179)))
 (let (($x185 (and $x180 $x184)))
 (let (($x190 (and $x185 $x189)))
 (let (($x194 (and $x190 $x193)))
 (let (($x199 (and $x194 $x198)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x200 (and $x96 $x199)))
 (let (($x43 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x201 (and $x43 $x200)))
 (let (($x154 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x76 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x76 (_ bv1 32))))
 (=> $x88 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x42 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x12 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x12 (_ bv1 32))))
 (let ((?x76 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x76 (_ bv1 32))))
 (= $x88 $x64))))))
 ))
 (let (($x50 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x153 (= false false)))
 (let ((?x76 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x76 (_ bv0 32))))
 (=> $x81 $x153)))))
 ))
 (let (($x22 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x12 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x12 (_ bv0 32))))
 (let ((?x76 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x76 (_ bv0 32))))
 (= $x81 $x6))))))
 ))
 (let (($x46 (and $x22 $x50)))
 (let (($x57 (and $x46 $x42)))
 (let (($x90 (and $x57 $x154)))
 (let (($x202 (and $x90 $x201)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x203 (and $x47 $x202)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x204 (and $x30 $x203)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x205 (and $x80 $x204)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x206 (and $x18 $x205)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x207 (and $x92 $x206)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x208 (and $x62 $x207)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x209 (and $x91 $x208)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x210 (and $x21 $x209)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x211 (and $x37 $x210)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x212 (and $x9 $x211)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x213 (and $x20 $x212)))
 (let (($x217 (=> $x213 $x216)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000014)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000017)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000014)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x301 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x295 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x275 (and $x295 $x301)))
 (let (($x70 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x287 (and (not $x70) $x275)))
 (let (($x72 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (not $x72)))
 (let (($x288 (or $x55 $x287)))
 (let (($x289 (= $x288 true)))
 (let (($x302 (= $x289 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x135)))
 (let (($x38 (= ?x31 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x38 true)))
 (let (($x35 (= $x120 true)))
 (let ((?x122 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x122)))
 (let (($x140 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x140 true)))
 (let (($x149 (= $x146 true)))
 (let ((?x211 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x211)))
 (let (($x218 (= ?x212 input.dst.llvm-%n)))
 (let (($x150 (= $x218 true)))
 (let (($x151 (= $x150 true)))
 (let (($x213 (= ?x212 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x214 (= $x213 true)))
 (let (($x215 (= $x214 true)))
 (let (($x205 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x200 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x195 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x196 (= $x195 true)))
 (let (($x197 (= $x196 true)))
 (let (($x198 (= $x197 true)))
 (let (($x190 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x191 (= $x190 true)))
 (let (($x192 (= $x191 true)))
 (let (($x193 (= $x192 true)))
 (let (($x185 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x186 (= $x185 true)))
 (let (($x187 (= $x186 true)))
 (let (($x188 (= $x187 true)))
 (let (($x180 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x181 (= $x180 true)))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x176 (= $x175 true)))
 (let (($x177 (= $x176 true)))
 (let (($x178 (= $x177 true)))
 (let (($x170 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x171 (= $x170 true)))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let (($x164 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x165 (= $x164 true)))
 (let (($x166 (= $x165 true)))
 (let (($x167 (= $x166 true)))
 (let (($x158 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x159 (= $x158 true)))
 (let (($x160 (= $x159 true)))
 (let (($x161 (= $x160 true)))
 (let (($x85 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x86 (= $x85 true)))
 (let (($x155 (= $x86 true)))
 (let (($x156 (= $x155 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x141)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x123 $x138)))
 (let (($x125 (and $x143 $x139)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x40 $x125)))
 (let (($x133 (= $x14 true)))
 (let (($x142 (= $x133 true)))
 (let (($x105 (= $x142 true)))
 (let (($x157 (and $x105 $x156)))
 (let (($x162 (and $x157 $x161)))
 (let (($x168 (and $x162 $x167)))
 (let (($x174 (and $x168 $x173)))
 (let (($x179 (and $x174 $x178)))
 (let (($x184 (and $x179 $x183)))
 (let (($x189 (and $x184 $x188)))
 (let (($x194 (and $x189 $x193)))
 (let (($x199 (and $x194 $x198)))
 (let (($x204 (and $x199 $x203)))
 (let (($x209 (and $x204 $x208)))
 (let (($x216 (and $x209 $x215)))
 (let (($x15 (and $x216 $x151)))
 (let (($x48 (and $x15 $x149)))
 (let (($x41 (and $x48 $x35)))
 (let (($x144 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x5 (and $x144 $x41)))
 (let (($x134 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x84 (and $x134 $x5)))
 (let (($x98 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x127 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x127 (_ bv1 32))))
 (=> $x97 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x117 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x28 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x28 (_ bv1 32))))
 (let ((?x127 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x127 (_ bv1 32))))
 (= $x97 $x110))))))
 ))
 (let (($x118 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x116 (= false false)))
 (let ((?x127 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x127 (_ bv0 32))))
 (=> $x128 $x116)))))
 ))
 (let (($x25 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x28 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x28 (_ bv0 32))))
 (let ((?x127 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x127 (_ bv0 32))))
 (= $x128 $x61))))))
 ))
 (let (($x66 (and $x25 $x118)))
 (let (($x113 (and $x66 $x117)))
 (let (($x132 (and $x113 $x98)))
 (let (($x152 (and $x132 $x84)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x147 (and $x47 $x152)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x23 (and $x30 $x147)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x34 (and $x80 $x23)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x51 (and $x19 $x34)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x49 (and $x92 $x51)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x52 (and $x32 $x49)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x63 (and $x33 $x52)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x68 (and $x18 $x63)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x53 (and $x11 $x68)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x60 (and $x93 $x53)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x79 (and $x44 $x60)))
 (let (($x303 (=> $x79 $x302)))
 (not $x303))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x301 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x295 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x275 (and $x295 $x301)))
 (let (($x70 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x287 (and (not $x70) $x275)))
 (let (($x72 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (not $x72)))
 (let (($x288 (or $x55 $x287)))
 (let (($x289 (= $x288 true)))
 (let (($x302 (= $x289 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x135)))
 (let (($x38 (= ?x31 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x38 true)))
 (let (($x35 (= $x120 true)))
 (let ((?x122 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x122)))
 (let (($x140 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x140 true)))
 (let (($x149 (= $x146 true)))
 (let ((?x211 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x211)))
 (let (($x218 (= ?x212 input.dst.llvm-%n)))
 (let (($x150 (= $x218 true)))
 (let (($x151 (= $x150 true)))
 (let (($x213 (= ?x212 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x214 (= $x213 true)))
 (let (($x215 (= $x214 true)))
 (let (($x205 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x200 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x195 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x196 (= $x195 true)))
 (let (($x197 (= $x196 true)))
 (let (($x198 (= $x197 true)))
 (let (($x190 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x191 (= $x190 true)))
 (let (($x192 (= $x191 true)))
 (let (($x193 (= $x192 true)))
 (let (($x185 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x186 (= $x185 true)))
 (let (($x187 (= $x186 true)))
 (let (($x188 (= $x187 true)))
 (let (($x180 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x181 (= $x180 true)))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x176 (= $x175 true)))
 (let (($x177 (= $x176 true)))
 (let (($x178 (= $x177 true)))
 (let (($x170 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x171 (= $x170 true)))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let (($x164 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x165 (= $x164 true)))
 (let (($x166 (= $x165 true)))
 (let (($x167 (= $x166 true)))
 (let (($x158 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x159 (= $x158 true)))
 (let (($x160 (= $x159 true)))
 (let (($x161 (= $x160 true)))
 (let (($x85 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x86 (= $x85 true)))
 (let (($x155 (= $x86 true)))
 (let (($x156 (= $x155 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x141)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x123 $x138)))
 (let (($x125 (and $x143 $x139)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x40 $x125)))
 (let (($x133 (= $x14 true)))
 (let (($x142 (= $x133 true)))
 (let (($x105 (= $x142 true)))
 (let (($x157 (and $x105 $x156)))
 (let (($x162 (and $x157 $x161)))
 (let (($x168 (and $x162 $x167)))
 (let (($x174 (and $x168 $x173)))
 (let (($x179 (and $x174 $x178)))
 (let (($x184 (and $x179 $x183)))
 (let (($x189 (and $x184 $x188)))
 (let (($x194 (and $x189 $x193)))
 (let (($x199 (and $x194 $x198)))
 (let (($x204 (and $x199 $x203)))
 (let (($x209 (and $x204 $x208)))
 (let (($x216 (and $x209 $x215)))
 (let (($x15 (and $x216 $x151)))
 (let (($x48 (and $x15 $x149)))
 (let (($x41 (and $x48 $x35)))
 (let (($x144 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x5 (and $x144 $x41)))
 (let (($x134 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x84 (and $x134 $x5)))
 (let (($x98 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x127 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x127 (_ bv1 32))))
 (=> $x97 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x117 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x28 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x28 (_ bv1 32))))
 (let ((?x127 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x127 (_ bv1 32))))
 (= $x97 $x110))))))
 ))
 (let (($x118 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x116 (= false false)))
 (let ((?x127 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x127 (_ bv0 32))))
 (=> $x128 $x116)))))
 ))
 (let (($x25 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x28 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x28 (_ bv0 32))))
 (let ((?x127 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x127 (_ bv0 32))))
 (= $x128 $x61))))))
 ))
 (let (($x66 (and $x25 $x118)))
 (let (($x113 (and $x66 $x117)))
 (let (($x132 (and $x113 $x98)))
 (let (($x152 (and $x132 $x84)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x147 (and $x47 $x152)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x23 (and $x30 $x147)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x34 (and $x80 $x23)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x51 (and $x19 $x34)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x49 (and $x92 $x51)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x52 (and $x32 $x49)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x63 (and $x33 $x52)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x68 (and $x18 $x63)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x53 (and $x11 $x68)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x60 (and $x93 $x53)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x79 (and $x44 $x60)))
 (let (($x303 (=> $x79 $x302)))
 (not $x303))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 182 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x313 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x296 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x315 (ite $x296 ?x183 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x309 (bvmul (_ bv4294967295 32) ?x315)))
 (let ((?x312 (bvneg ?x309)))
 (let (($x316 (= ?x312 ?x313)))
 (let (($x317 (= $x316 true)))
 (let ((?x278 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x278)))
 (let (($x269 (= ?x251 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x265 (= $x269 true)))
 (let (($x270 (= $x265 true)))
 (let ((?x255 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x256 (bvneg ?x255)))
 (let (($x252 (= ?x256 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x252 true)))
 (let (($x274 (= $x225 true)))
 (let (($x130 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x219 (= $x130 true)))
 (let (($x236 (= $x219 true)))
 (let (($x237 (= $x236 true)))
 (let (($x108 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x114 (= $x108 true)))
 (let (($x17 (= $x114 true)))
 (let (($x112 (= $x17 true)))
 (let (($x99 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x100 (= $x99 true)))
 (let (($x109 (= $x100 true)))
 (let (($x111 (= $x109 true)))
 (let (($x95 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x96 (= $x95 true)))
 (let (($x101 (= $x96 true)))
 (let (($x119 (= $x101 true)))
 (let (($x154 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x75 (= $x154 true)))
 (let (($x90 (= $x75 true)))
 (let (($x43 (= $x90 true)))
 (let (($x87 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x50 (= $x87 true)))
 (let (($x46 (= $x50 true)))
 (let (($x88 (= $x46 true)))
 (let (($x54 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x153 (= $x54 true)))
 (let (($x6 (= $x153 true)))
 (let (($x82 (= $x6 true)))
 (let (($x249 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x253 (= $x249 true)))
 (let (($x259 (= $x253 true)))
 (let (($x260 (= $x259 true)))
 (let (($x235 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x246 (= $x235 true)))
 (let (($x247 (= $x246 true)))
 (let (($x226 (= $x247 true)))
 (let (($x250 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x258 (= $x250 true)))
 (let (($x254 (= $x258 true)))
 (let (($x224 (= $x254 true)))
 (let (($x241 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x240 (= $x241 true)))
 (let (($x243 (= $x240 true)))
 (let (($x244 (= $x243 true)))
 (let (($x232 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (= $x232 true)))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x222)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x65 $x36)))
 (let (($x221 (and $x69 $x220)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x57 $x221)))
 (let (($x56 (= $x223 true)))
 (let (($x230 (= $x56 true)))
 (let (($x227 (= $x230 true)))
 (let ((?x292 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x288 (bvneg ?x292)))
 (let (($x71 (= ?x288 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x76 (= $x71 true)))
 (let (($x81 (= $x76 true)))
 (let (($x302 (= ?x288 input.dst.llvm-%n)))
 (let (($x303 (= $x302 true)))
 (let (($x304 (= $x303 true)))
 (let (($x12 (and $x304 $x81)))
 (let (($x229 (and $x12 $x227)))
 (let (($x238 (and $x229 $x242)))
 (let (($x245 (and $x238 $x244)))
 (let (($x239 (and $x245 $x224)))
 (let (($x248 (and $x239 $x226)))
 (let (($x261 (and $x248 $x260)))
 (let (($x22 (and $x261 $x82)))
 (let (($x64 (and $x22 $x88)))
 (let (($x94 (and $x64 $x43)))
 (let (($x39 (and $x94 $x119)))
 (let (($x74 (and $x39 $x111)))
 (let (($x107 (and $x74 $x112)))
 (let (($x228 (and $x107 $x237)))
 (let (($x282 (and $x228 $x274)))
 (let (($x271 (and $x282 $x270)))
 (let (($x298 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x34 (and $x298 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x296) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x176 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x286 (and (not $x176) $x34)))
 (let (($x264 (and $x286 $x271)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x272 (and $x174 $x264)))
 (let (($x171 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x273 (and $x171 $x272)))
 (let (($x168 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x40 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x40 (_ bv1 32))))
 (=> $x155 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x157 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x124 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x124 (_ bv1 32))))
 (let ((?x40 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x40 (_ bv1 32))))
 (= $x155 $x106))))))
 ))
 (let (($x141 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x145 (= false false)))
 (let ((?x40 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x40 (_ bv0 32))))
 (=> $x10 $x145)))))
 ))
 (let (($x83 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x124 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x124 (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x40 (_ bv0 32))))
 (= $x10 $x129))))))
 ))
 (let (($x139 (and $x83 $x141)))
 (let (($x158 (and $x139 $x157)))
 (let (($x169 (and $x158 $x168)))
 (let (($x277 (and $x169 $x273)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x283 (and $x47 $x277)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x284 (and $x30 $x283)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x285 (and $x80 $x284)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x262 (and $x19 $x285)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x267 (and $x92 $x262)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x268 (and $x32 $x267)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x266 (and $x33 $x268)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x279 (and $x18 $x266)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x280 (and $x11 $x279)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x281 (and $x93 $x280)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x276 (and $x7 $x281)))
 (let (($x318 (=> $x276 $x317)))
 (not $x318))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x313 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x296 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x315 (ite $x296 ?x183 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x309 (bvmul (_ bv4294967295 32) ?x315)))
 (let ((?x312 (bvneg ?x309)))
 (let (($x316 (= ?x312 ?x313)))
 (let (($x317 (= $x316 true)))
 (let ((?x278 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x278)))
 (let (($x269 (= ?x251 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x265 (= $x269 true)))
 (let (($x270 (= $x265 true)))
 (let ((?x255 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x256 (bvneg ?x255)))
 (let (($x252 (= ?x256 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x252 true)))
 (let (($x274 (= $x225 true)))
 (let (($x130 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x219 (= $x130 true)))
 (let (($x236 (= $x219 true)))
 (let (($x237 (= $x236 true)))
 (let (($x108 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x114 (= $x108 true)))
 (let (($x17 (= $x114 true)))
 (let (($x112 (= $x17 true)))
 (let (($x99 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x100 (= $x99 true)))
 (let (($x109 (= $x100 true)))
 (let (($x111 (= $x109 true)))
 (let (($x95 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x96 (= $x95 true)))
 (let (($x101 (= $x96 true)))
 (let (($x119 (= $x101 true)))
 (let (($x154 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x75 (= $x154 true)))
 (let (($x90 (= $x75 true)))
 (let (($x43 (= $x90 true)))
 (let (($x87 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x50 (= $x87 true)))
 (let (($x46 (= $x50 true)))
 (let (($x88 (= $x46 true)))
 (let (($x54 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x153 (= $x54 true)))
 (let (($x6 (= $x153 true)))
 (let (($x82 (= $x6 true)))
 (let (($x249 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x253 (= $x249 true)))
 (let (($x259 (= $x253 true)))
 (let (($x260 (= $x259 true)))
 (let (($x235 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x246 (= $x235 true)))
 (let (($x247 (= $x246 true)))
 (let (($x226 (= $x247 true)))
 (let (($x250 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x258 (= $x250 true)))
 (let (($x254 (= $x258 true)))
 (let (($x224 (= $x254 true)))
 (let (($x241 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x240 (= $x241 true)))
 (let (($x243 (= $x240 true)))
 (let (($x244 (= $x243 true)))
 (let (($x232 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (= $x232 true)))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x222)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x65 $x36)))
 (let (($x221 (and $x69 $x220)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x57 $x221)))
 (let (($x56 (= $x223 true)))
 (let (($x230 (= $x56 true)))
 (let (($x227 (= $x230 true)))
 (let ((?x292 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x288 (bvneg ?x292)))
 (let (($x71 (= ?x288 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x76 (= $x71 true)))
 (let (($x81 (= $x76 true)))
 (let (($x302 (= ?x288 input.dst.llvm-%n)))
 (let (($x303 (= $x302 true)))
 (let (($x304 (= $x303 true)))
 (let (($x12 (and $x304 $x81)))
 (let (($x229 (and $x12 $x227)))
 (let (($x238 (and $x229 $x242)))
 (let (($x245 (and $x238 $x244)))
 (let (($x239 (and $x245 $x224)))
 (let (($x248 (and $x239 $x226)))
 (let (($x261 (and $x248 $x260)))
 (let (($x22 (and $x261 $x82)))
 (let (($x64 (and $x22 $x88)))
 (let (($x94 (and $x64 $x43)))
 (let (($x39 (and $x94 $x119)))
 (let (($x74 (and $x39 $x111)))
 (let (($x107 (and $x74 $x112)))
 (let (($x228 (and $x107 $x237)))
 (let (($x282 (and $x228 $x274)))
 (let (($x271 (and $x282 $x270)))
 (let (($x298 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x34 (and $x298 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x296) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x176 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x286 (and (not $x176) $x34)))
 (let (($x264 (and $x286 $x271)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x272 (and $x174 $x264)))
 (let (($x171 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x273 (and $x171 $x272)))
 (let (($x168 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x40 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x40 (_ bv1 32))))
 (=> $x155 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x157 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x124 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x124 (_ bv1 32))))
 (let ((?x40 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x40 (_ bv1 32))))
 (= $x155 $x106))))))
 ))
 (let (($x141 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x145 (= false false)))
 (let ((?x40 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x40 (_ bv0 32))))
 (=> $x10 $x145)))))
 ))
 (let (($x83 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x124 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x124 (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x40 (_ bv0 32))))
 (= $x10 $x129))))))
 ))
 (let (($x139 (and $x83 $x141)))
 (let (($x158 (and $x139 $x157)))
 (let (($x169 (and $x158 $x168)))
 (let (($x277 (and $x169 $x273)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x283 (and $x47 $x277)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x284 (and $x30 $x283)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x285 (and $x80 $x284)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x262 (and $x19 $x285)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x267 (and $x92 $x262)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x268 (and $x32 $x267)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x266 (and $x33 $x268)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x279 (and $x18 $x266)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x280 (and $x11 $x279)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x281 (and $x93 $x280)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x276 (and $x7 $x281)))
 (let (($x318 (=> $x276 $x317)))
 (not $x318))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 190 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x271 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x305 (ite $x271 ?x233 (ite (= (_ bv10 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x68 (bvmul (_ bv4294967295 32) ?x305)))
 (let ((?x48 (bvneg ?x68)))
 (let (($x307 (= ?x48 ?x306)))
 (let (($x308 (= $x307 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x193)))
 (let (($x15 (= ?x151 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x15 true)))
 (let (($x217 (= $x122 true)))
 (let ((?x161 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x161)))
 (let (($x164 (= ?x162 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x164 true)))
 (let (($x201 (= $x188 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x85 (= $x105 true)))
 (let (($x86 (= $x85 true)))
 (let (($x159 (= $x86 true)))
 (let (($x138 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x125 (= $x138 true)))
 (let (($x14 (= $x125 true)))
 (let (($x133 (= $x14 true)))
 (let (($x132 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x134 (= $x132 true)))
 (let (($x136 (= $x134 true)))
 (let (($x137 (= $x136 true)))
 (let (($x66 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x97 (= $x66 true)))
 (let (($x110 (= $x97 true)))
 (let (($x98 (= $x110 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x13 (= $x61 true)))
 (let (($x25 (= $x13 true)))
 (let (($x102 (= $x25 true)))
 (let (($x121 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x140 (= $x121 true)))
 (let (($x146 (= $x140 true)))
 (let (($x104 (= $x146 true)))
 (let (($x212 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x191 (= $x212 true)))
 (let (($x213 (= $x191 true)))
 (let (($x214 (= $x213 true)))
 (let (($x150 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x189 (= $x150 true)))
 (let (($x204 (= $x189 true)))
 (let (($x200 (= $x204 true)))
 (let (($x208 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x209 (= $x208 true)))
 (let (($x210 (= $x209 true)))
 (let (($x215 (= $x210 true)))
 (let (($x199 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x207 (= $x199 true)))
 (let (($x203 (= $x207 true)))
 (let (($x206 (= $x203 true)))
 (let (($x192 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x194 (= $x192 true)))
 (let (($x196 (= $x194 true)))
 (let (($x197 (= $x196 true)))
 (let (($x186 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x184 (= $x186 true)))
 (let (($x185 (= $x184 true)))
 (let (($x187 (= $x185 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x28)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x318 $x127)))
 (let (($x117 (and $x128 $x103)))
 (let (($x316 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x316 $x117)))
 (let (($x131 (= $x113 true)))
 (let (($x180 (= $x131 true)))
 (let (($x179 (= $x180 true)))
 (let ((?x270 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x279 (bvneg ?x270)))
 (let (($x177 (= ?x279 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x314 (= $x177 true)))
 (let (($x315 (= $x314 true)))
 (let (($x281 (= ?x279 input.dst.llvm-%n)))
 (let (($x276 (= $x281 true)))
 (let (($x183 (= $x276 true)))
 (let (($x309 (and $x183 $x315)))
 (let (($x181 (and $x309 $x179)))
 (let (($x195 (and $x181 $x187)))
 (let (($x198 (and $x195 $x197)))
 (let (($x205 (and $x198 $x206)))
 (let (($x29 (and $x205 $x215)))
 (let (($x211 (and $x29 $x200)))
 (let (($x218 (and $x211 $x214)))
 (let (($x116 (and $x218 $x104)))
 (let (($x118 (and $x116 $x102)))
 (let (($x126 (and $x118 $x98)))
 (let (($x144 (and $x126 $x137)))
 (let (($x142 (and $x144 $x133)))
 (let (($x160 (and $x142 $x159)))
 (let (($x202 (and $x160 $x201)))
 (let (($x190 (and $x202 $x217)))
 (let (($x266 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x236 (and (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) $x271) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x266)))
 (let (($x223 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x269 (and (not $x223) $x236)))
 (let (($x23 (and $x269 $x190)))
 (let (($x220 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x60 (and $x220 $x23)))
 (let (($x36 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x52 (and $x36 $x60)))
 (let (($x65 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x70 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x70 (_ bv1 32))))
 (=> $x288 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x302 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x167 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x286 (bvuge ?x167 (_ bv1 32))))
 (let ((?x70 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x70 (_ bv1 32))))
 (= $x288 $x286))))))
 ))
 (let (($x299 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x295 (= false false)))
 (let ((?x70 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x70 (_ bv0 32))))
 (=> $x293 $x295)))))
 ))
 (let (($x290 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x167 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x167 (_ bv0 32))))
 (let ((?x70 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x70 (_ bv0 32))))
 (= $x293 $x170))))))
 ))
 (let (($x300 (and $x290 $x299)))
 (let (($x303 (and $x300 $x302)))
 (let (($x77 (and $x303 $x65)))
 (let (($x216 (and $x77 $x52)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x41 (and $x47 $x216)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x31 (and $x30 $x41)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x5 (and $x80 $x31)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x84 (and $x19 $x5)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x135 (and $x92 $x84)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x152 (and $x32 $x135)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x147 (and $x33 $x152)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x49 (and $x18 $x147)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x79 (and $x11 $x49)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x72 (and $x93 $x79)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x55 (and $x44 $x72)))
 (let (($x311 (=> $x55 $x308)))
 (not $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x271 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x305 (ite $x271 ?x233 (ite (= (_ bv10 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x68 (bvmul (_ bv4294967295 32) ?x305)))
 (let ((?x48 (bvneg ?x68)))
 (let (($x307 (= ?x48 ?x306)))
 (let (($x308 (= $x307 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x193)))
 (let (($x15 (= ?x151 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x15 true)))
 (let (($x217 (= $x122 true)))
 (let ((?x161 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x161)))
 (let (($x164 (= ?x162 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x164 true)))
 (let (($x201 (= $x188 true)))
 (let (($x105 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x85 (= $x105 true)))
 (let (($x86 (= $x85 true)))
 (let (($x159 (= $x86 true)))
 (let (($x138 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x125 (= $x138 true)))
 (let (($x14 (= $x125 true)))
 (let (($x133 (= $x14 true)))
 (let (($x132 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x134 (= $x132 true)))
 (let (($x136 (= $x134 true)))
 (let (($x137 (= $x136 true)))
 (let (($x66 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x97 (= $x66 true)))
 (let (($x110 (= $x97 true)))
 (let (($x98 (= $x110 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x13 (= $x61 true)))
 (let (($x25 (= $x13 true)))
 (let (($x102 (= $x25 true)))
 (let (($x121 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x140 (= $x121 true)))
 (let (($x146 (= $x140 true)))
 (let (($x104 (= $x146 true)))
 (let (($x212 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x191 (= $x212 true)))
 (let (($x213 (= $x191 true)))
 (let (($x214 (= $x213 true)))
 (let (($x150 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x189 (= $x150 true)))
 (let (($x204 (= $x189 true)))
 (let (($x200 (= $x204 true)))
 (let (($x208 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x209 (= $x208 true)))
 (let (($x210 (= $x209 true)))
 (let (($x215 (= $x210 true)))
 (let (($x199 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x207 (= $x199 true)))
 (let (($x203 (= $x207 true)))
 (let (($x206 (= $x203 true)))
 (let (($x192 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x194 (= $x192 true)))
 (let (($x196 (= $x194 true)))
 (let (($x197 (= $x196 true)))
 (let (($x186 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x184 (= $x186 true)))
 (let (($x185 (= $x184 true)))
 (let (($x187 (= $x185 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x28)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x318 $x127)))
 (let (($x117 (and $x128 $x103)))
 (let (($x316 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x316 $x117)))
 (let (($x131 (= $x113 true)))
 (let (($x180 (= $x131 true)))
 (let (($x179 (= $x180 true)))
 (let ((?x270 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x279 (bvneg ?x270)))
 (let (($x177 (= ?x279 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x314 (= $x177 true)))
 (let (($x315 (= $x314 true)))
 (let (($x281 (= ?x279 input.dst.llvm-%n)))
 (let (($x276 (= $x281 true)))
 (let (($x183 (= $x276 true)))
 (let (($x309 (and $x183 $x315)))
 (let (($x181 (and $x309 $x179)))
 (let (($x195 (and $x181 $x187)))
 (let (($x198 (and $x195 $x197)))
 (let (($x205 (and $x198 $x206)))
 (let (($x29 (and $x205 $x215)))
 (let (($x211 (and $x29 $x200)))
 (let (($x218 (and $x211 $x214)))
 (let (($x116 (and $x218 $x104)))
 (let (($x118 (and $x116 $x102)))
 (let (($x126 (and $x118 $x98)))
 (let (($x144 (and $x126 $x137)))
 (let (($x142 (and $x144 $x133)))
 (let (($x160 (and $x142 $x159)))
 (let (($x202 (and $x160 $x201)))
 (let (($x190 (and $x202 $x217)))
 (let (($x266 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x236 (and (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) $x271) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x266)))
 (let (($x223 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x269 (and (not $x223) $x236)))
 (let (($x23 (and $x269 $x190)))
 (let (($x220 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x60 (and $x220 $x23)))
 (let (($x36 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x52 (and $x36 $x60)))
 (let (($x65 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x70 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x70 (_ bv1 32))))
 (=> $x288 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x302 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x167 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x286 (bvuge ?x167 (_ bv1 32))))
 (let ((?x70 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x70 (_ bv1 32))))
 (= $x288 $x286))))))
 ))
 (let (($x299 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x295 (= false false)))
 (let ((?x70 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x70 (_ bv0 32))))
 (=> $x293 $x295)))))
 ))
 (let (($x290 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x167 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x167 (_ bv0 32))))
 (let ((?x70 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x70 (_ bv0 32))))
 (= $x293 $x170))))))
 ))
 (let (($x300 (and $x290 $x299)))
 (let (($x303 (and $x300 $x302)))
 (let (($x77 (and $x303 $x65)))
 (let (($x216 (and $x77 $x52)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x41 (and $x47 $x216)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x31 (and $x30 $x41)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x5 (and $x80 $x31)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x84 (and $x19 $x5)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x135 (and $x92 $x84)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x152 (and $x32 $x135)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x147 (and $x33 $x152)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x49 (and $x18 $x147)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x79 (and $x11 $x49)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x72 (and $x93 $x79)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x55 (and $x44 $x72)))
 (let (($x311 (=> $x55 $x308)))
 (not $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 190 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x184 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x31 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x120 (ite $x31 ?x184 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x257 (bvule ?x120 (_ bv3 32))))
 (let (($x99 (= $x257 true)))
 (let (($x35 (= $x99 true)))
 (let ((?x250 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x250)))
 (let (($x43 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x43 true)))
 (let (($x64 (= $x94 true)))
 (let ((?x76 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x76)))
 (let (($x67 (= ?x81 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x241 (= $x67 true)))
 (let (($x226 (= $x241 true)))
 (let (($x34 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x291 (= $x34 true)))
 (let (($x292 (= $x291 true)))
 (let (($x304 (= $x292 true)))
 (let (($x297 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x296 (= $x297 true)))
 (let (($x301 (= $x296 true)))
 (let (($x275 (= $x301 true)))
 (let (($x169 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x171 (= $x169 true)))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let (($x139 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x155 (= $x139 true)))
 (let (($x106 (= $x155 true)))
 (let (($x168 (= $x106 true)))
 (let (($x129 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x123 (= $x129 true)))
 (let (($x83 (= $x123 true)))
 (let (($x143 (= $x83 true)))
 (let (($x96 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x101 (= $x96 true)))
 (let (($x119 (= $x101 true)))
 (let (($x148 (= $x119 true)))
 (let (($x22 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x244 (= $x22 true)))
 (let (($x87 (= $x244 true)))
 (let (($x50 (= $x87 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x6)))
 (let ((?x259 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x259)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x260 $x54)))
 (let (($x95 (and $x153 $x46)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x261 $x95)))
 (let (($x240 (= $x75 true)))
 (let (($x253 (= $x240 true)))
 (let (($x247 (= $x253 true)))
 (let (($x254 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x245 (= $x254 true)))
 (let (($x258 (= $x245 true)))
 (let (($x224 (= $x258 true)))
 (let (($x232 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x238 (= $x232 true)))
 (let (($x234 (= $x238 true)))
 (let (($x242 (= $x234 true)))
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x40)))
 (let (($x165 (= ?x10 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x229 (= $x165 true)))
 (let (($x227 (= $x229 true)))
 (let (($x124 (= ?x10 input.dst.llvm-%n)))
 (let (($x156 (= $x124 true)))
 (let (($x157 (= $x156 true)))
 (let (($x306 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x307 (= $x306 true)))
 (let (($x308 (= $x307 true)))
 (let (($x311 (= $x308 true)))
 (let (($x56 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x310 (= $x56 true)))
 (let (($x305 (= $x310 true)))
 (let (($x68 (= $x305 true)))
 (let (($x49 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x79 (= $x49 true)))
 (let (($x72 (= $x79 true)))
 (let (($x55 (= $x72 true)))
 (let (($x48 (and $x55 $x68)))
 (let (($x263 (and $x48 $x311)))
 (let (($x158 (and $x263 $x157)))
 (let (($x231 (and $x158 $x227)))
 (let (($x178 (and $x231 $x242)))
 (let (($x239 (and $x178 $x224)))
 (let (($x82 (and $x239 $x247)))
 (let (($x154 (and $x82 $x50)))
 (let (($x145 (and $x154 $x148)))
 (let (($x141 (and $x145 $x143)))
 (let (($x166 (and $x141 $x168)))
 (let (($x174 (and $x166 $x173)))
 (let (($x287 (and $x174 $x275)))
 (let (($x71 (and $x287 $x304)))
 (let (($x248 (and $x71 $x226)))
 (let (($x243 (and $x248 $x64)))
 (let (($x41 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x86 (and $x41 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x31) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x113 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x15 (and (not $x113) $x86)))
 (let (($x219 (and $x15 $x243)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x225 (and $x103 $x219)))
 (let (($x127 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x255 (and $x127 $x225)))
 (let (($x318 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x251 (_ bv1 32))))
 (=> $x279 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x281 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x73 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x73 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x251 (_ bv1 32))))
 (= $x279 $x269))))))
 ))
 (let (($x285 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x273 (= false false)))
 (let ((?x251 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x264 (= ?x251 (_ bv0 32))))
 (=> $x264 $x273)))))
 ))
 (let (($x271 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x73 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x73 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x264 (= ?x251 (_ bv0 32))))
 (= $x264 $x8))))))
 ))
 (let (($x262 (and $x271 $x285)))
 (let (($x276 (and $x262 $x281)))
 (let (($x319 (and $x276 $x318)))
 (let (($x88 (and $x319 $x255)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x114 (and $x47 $x88)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x109 (and $x30 $x114)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x17 (and $x80 $x109)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x112 (and $x19 $x17)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x100 (and $x92 $x112)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x107 (and $x32 $x100)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x130 (and $x33 $x107)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x228 (and $x18 $x130)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x274 (and $x11 $x228)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x282 (and $x93 $x274)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x278 (and $x44 $x282)))
 (let (($x38 (=> $x278 $x35)))
 (not $x38))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x184 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x31 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x120 (ite $x31 ?x184 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x257 (bvule ?x120 (_ bv3 32))))
 (let (($x99 (= $x257 true)))
 (let (($x35 (= $x99 true)))
 (let ((?x250 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x250)))
 (let (($x43 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x43 true)))
 (let (($x64 (= $x94 true)))
 (let ((?x76 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x76)))
 (let (($x67 (= ?x81 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x241 (= $x67 true)))
 (let (($x226 (= $x241 true)))
 (let (($x34 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x291 (= $x34 true)))
 (let (($x292 (= $x291 true)))
 (let (($x304 (= $x292 true)))
 (let (($x297 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x296 (= $x297 true)))
 (let (($x301 (= $x296 true)))
 (let (($x275 (= $x301 true)))
 (let (($x169 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x171 (= $x169 true)))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let (($x139 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x155 (= $x139 true)))
 (let (($x106 (= $x155 true)))
 (let (($x168 (= $x106 true)))
 (let (($x129 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x123 (= $x129 true)))
 (let (($x83 (= $x123 true)))
 (let (($x143 (= $x83 true)))
 (let (($x96 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x101 (= $x96 true)))
 (let (($x119 (= $x101 true)))
 (let (($x148 (= $x119 true)))
 (let (($x22 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x244 (= $x22 true)))
 (let (($x87 (= $x244 true)))
 (let (($x50 (= $x87 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x6)))
 (let ((?x259 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x259)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x260 $x54)))
 (let (($x95 (and $x153 $x46)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x261 $x95)))
 (let (($x240 (= $x75 true)))
 (let (($x253 (= $x240 true)))
 (let (($x247 (= $x253 true)))
 (let (($x254 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x245 (= $x254 true)))
 (let (($x258 (= $x245 true)))
 (let (($x224 (= $x258 true)))
 (let (($x232 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x238 (= $x232 true)))
 (let (($x234 (= $x238 true)))
 (let (($x242 (= $x234 true)))
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x40)))
 (let (($x165 (= ?x10 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x229 (= $x165 true)))
 (let (($x227 (= $x229 true)))
 (let (($x124 (= ?x10 input.dst.llvm-%n)))
 (let (($x156 (= $x124 true)))
 (let (($x157 (= $x156 true)))
 (let (($x306 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x307 (= $x306 true)))
 (let (($x308 (= $x307 true)))
 (let (($x311 (= $x308 true)))
 (let (($x56 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x310 (= $x56 true)))
 (let (($x305 (= $x310 true)))
 (let (($x68 (= $x305 true)))
 (let (($x49 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x79 (= $x49 true)))
 (let (($x72 (= $x79 true)))
 (let (($x55 (= $x72 true)))
 (let (($x48 (and $x55 $x68)))
 (let (($x263 (and $x48 $x311)))
 (let (($x158 (and $x263 $x157)))
 (let (($x231 (and $x158 $x227)))
 (let (($x178 (and $x231 $x242)))
 (let (($x239 (and $x178 $x224)))
 (let (($x82 (and $x239 $x247)))
 (let (($x154 (and $x82 $x50)))
 (let (($x145 (and $x154 $x148)))
 (let (($x141 (and $x145 $x143)))
 (let (($x166 (and $x141 $x168)))
 (let (($x174 (and $x166 $x173)))
 (let (($x287 (and $x174 $x275)))
 (let (($x71 (and $x287 $x304)))
 (let (($x248 (and $x71 $x226)))
 (let (($x243 (and $x248 $x64)))
 (let (($x41 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x86 (and $x41 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x31) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x113 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x15 (and (not $x113) $x86)))
 (let (($x219 (and $x15 $x243)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x225 (and $x103 $x219)))
 (let (($x127 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x255 (and $x127 $x225)))
 (let (($x318 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x251 (_ bv1 32))))
 (=> $x279 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x281 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x73 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x73 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x251 (_ bv1 32))))
 (= $x279 $x269))))))
 ))
 (let (($x285 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x273 (= false false)))
 (let ((?x251 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x264 (= ?x251 (_ bv0 32))))
 (=> $x264 $x273)))))
 ))
 (let (($x271 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x73 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x73 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x264 (= ?x251 (_ bv0 32))))
 (= $x264 $x8))))))
 ))
 (let (($x262 (and $x271 $x285)))
 (let (($x276 (and $x262 $x281)))
 (let (($x319 (and $x276 $x318)))
 (let (($x88 (and $x319 $x255)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x114 (and $x47 $x88)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x109 (and $x30 $x114)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x17 (and $x80 $x109)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x112 (and $x19 $x17)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x100 (and $x92 $x112)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x107 (and $x32 $x100)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x130 (and $x33 $x107)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x228 (and $x18 $x130)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x274 (and $x11 $x228)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x282 (and $x93 $x274)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x278 (and $x44 $x282)))
 (let (($x38 (=> $x278 $x35)))
 (not $x38))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x109 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x256 (ite $x109 ?x234 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x159 (bvule ?x256 (_ bv4 32))))
 (let (($x252 (= $x159 true)))
 (let (($x74 (= $x252 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x102)))
 (let (($x116 (= ?x118 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x116 true)))
 (let (($x85 (= $x196 true)))
 (let ((?x309 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x312 (bvneg ?x309)))
 (let (($x215 (= ?x312 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x215 true)))
 (let (($x199 (= $x29 true)))
 (let (($x270 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x183 (= $x270 true)))
 (let (($x177 (= $x183 true)))
 (let (($x314 (= $x177 true)))
 (let (($x267 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x268 (= $x267 true)))
 (let (($x266 (= $x268 true)))
 (let (($x236 (= $x266 true)))
 (let (($x69 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x222 (= $x69 true)))
 (let (($x220 (= $x222 true)))
 (let (($x277 (= $x220 true)))
 (let (($x286 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x65 (= $x286 true)))
 (let (($x57 (= $x65 true)))
 (let (($x77 (= $x57 true)))
 (let (($x290 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x298 (= $x290 true)))
 (let (($x299 (= $x298 true)))
 (let (($x300 (= $x299 true)))
 (let (($x98 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x175 (= $x98 true)))
 (let (($x295 (= $x175 true)))
 (let (($x170 (= $x295 true)))
 (let (($x121 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x140 (= $x121 true)))
 (let (($x61 (= $x140 true)))
 (let (($x97 (= $x61 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x66)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x204 $x213)))
 (let (($x194 (and $x146 $x13)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x150 $x194)))
 (let (($x210 (= $x189 true)))
 (let (($x214 (= $x210 true)))
 (let (($x218 (= $x214 true)))
 (let (($x198 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x207 (= $x198 true)))
 (let (($x206 (= $x207 true)))
 (let (($x205 (= $x206 true)))
 (let (($x195 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x185 (= $x195 true)))
 (let (($x187 (= $x185 true)))
 (let (($x230 (= $x187 true)))
 (let (($x42 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x181 (= $x42 true)))
 (let (($x179 (= $x181 true)))
 (let (($x182 (= $x179 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x35)))
 (let (($x167 (= ?x38 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x289 (= $x167 true)))
 (let (($x302 (= $x289 true)))
 (let (($x63 (= ?x38 input.dst.llvm-%n)))
 (let (($x176 (= $x63 true)))
 (let (($x70 (= $x176 true)))
 (let (($x184 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x131 (= $x184 true)))
 (let (($x53 (= $x131 true)))
 (let (($x120 (= $x53 true)))
 (let (($x228 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x274 (= $x228 true)))
 (let (($x282 (= $x274 true)))
 (let (($x278 (= $x282 true)))
 (let (($x257 (and $x278 $x120)))
 (let (($x293 (and $x257 $x70)))
 (let (($x303 (and $x293 $x302)))
 (let (($x186 (and $x303 $x182)))
 (let (($x203 (and $x186 $x230)))
 (let (($x208 (and $x203 $x205)))
 (let (($x197 (and $x208 $x218)))
 (let (($x110 (and $x197 $x97)))
 (let (($x294 (and $x110 $x170)))
 (let (($x288 (and $x294 $x300)))
 (let (($x36 (and $x288 $x77)))
 (let (($x284 (and $x36 $x277)))
 (let (($x265 (and $x284 $x236)))
 (let (($x315 (and $x265 $x314)))
 (let (($x25 (and $x315 $x199)))
 (let (($x188 (and $x25 $x85)))
 (let (($x114 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x292 (and $x114 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x109) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x158 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x43 (and (not $x158) $x292)))
 (let (($x161 (and $x43 $x188)))
 (let (($x156 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x104 (and $x156 $x161)))
 (let (($x40 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x125 (and $x40 $x104)))
 (let (($x311 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x151 (_ bv1 32))))
 (=> $x49 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x72 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x317 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x317 (_ bv1 32))))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x151 (_ bv1 32))))
 (= $x49 $x15))))))
 ))
 (let (($x5 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x52 (= false false)))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x151 (_ bv0 32))))
 (=> $x23 $x52)))))
 ))
 (let (($x190 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x317 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x317 (_ bv0 32))))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x151 (_ bv0 32))))
 (= $x23 $x115))))))
 ))
 (let (($x84 (and $x190 $x5)))
 (let (($x55 (and $x84 $x72)))
 (let (($x263 (and $x55 $x311)))
 (let (($x136 (and $x263 $x125)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x14 (and $x47 $x136)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x133 (and $x30 $x14)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x134 (and $x80 $x133)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x142 (and $x19 $x134)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x105 (and $x92 $x142)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x160 (and $x32 $x105)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x201 (and $x33 $x160)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x202 (and $x18 $x201)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x193 (and $x11 $x202)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x126 (and $x93 $x193)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x144 (and $x44 $x126)))
 (let (($x237 (=> $x144 $x74)))
 (not $x237))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x109 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x256 (ite $x109 ?x234 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x159 (bvule ?x256 (_ bv4 32))))
 (let (($x252 (= $x159 true)))
 (let (($x74 (= $x252 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x102)))
 (let (($x116 (= ?x118 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x116 true)))
 (let (($x85 (= $x196 true)))
 (let ((?x309 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x312 (bvneg ?x309)))
 (let (($x215 (= ?x312 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x215 true)))
 (let (($x199 (= $x29 true)))
 (let (($x270 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x183 (= $x270 true)))
 (let (($x177 (= $x183 true)))
 (let (($x314 (= $x177 true)))
 (let (($x267 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x268 (= $x267 true)))
 (let (($x266 (= $x268 true)))
 (let (($x236 (= $x266 true)))
 (let (($x69 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x222 (= $x69 true)))
 (let (($x220 (= $x222 true)))
 (let (($x277 (= $x220 true)))
 (let (($x286 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x65 (= $x286 true)))
 (let (($x57 (= $x65 true)))
 (let (($x77 (= $x57 true)))
 (let (($x290 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x298 (= $x290 true)))
 (let (($x299 (= $x298 true)))
 (let (($x300 (= $x299 true)))
 (let (($x98 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x175 (= $x98 true)))
 (let (($x295 (= $x175 true)))
 (let (($x170 (= $x295 true)))
 (let (($x121 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x140 (= $x121 true)))
 (let (($x61 (= $x140 true)))
 (let (($x97 (= $x61 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x66)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x204 $x213)))
 (let (($x194 (and $x146 $x13)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x150 $x194)))
 (let (($x210 (= $x189 true)))
 (let (($x214 (= $x210 true)))
 (let (($x218 (= $x214 true)))
 (let (($x198 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x207 (= $x198 true)))
 (let (($x206 (= $x207 true)))
 (let (($x205 (= $x206 true)))
 (let (($x195 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x185 (= $x195 true)))
 (let (($x187 (= $x185 true)))
 (let (($x230 (= $x187 true)))
 (let (($x42 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x181 (= $x42 true)))
 (let (($x179 (= $x181 true)))
 (let (($x182 (= $x179 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x35)))
 (let (($x167 (= ?x38 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x289 (= $x167 true)))
 (let (($x302 (= $x289 true)))
 (let (($x63 (= ?x38 input.dst.llvm-%n)))
 (let (($x176 (= $x63 true)))
 (let (($x70 (= $x176 true)))
 (let (($x184 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x131 (= $x184 true)))
 (let (($x53 (= $x131 true)))
 (let (($x120 (= $x53 true)))
 (let (($x228 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x274 (= $x228 true)))
 (let (($x282 (= $x274 true)))
 (let (($x278 (= $x282 true)))
 (let (($x257 (and $x278 $x120)))
 (let (($x293 (and $x257 $x70)))
 (let (($x303 (and $x293 $x302)))
 (let (($x186 (and $x303 $x182)))
 (let (($x203 (and $x186 $x230)))
 (let (($x208 (and $x203 $x205)))
 (let (($x197 (and $x208 $x218)))
 (let (($x110 (and $x197 $x97)))
 (let (($x294 (and $x110 $x170)))
 (let (($x288 (and $x294 $x300)))
 (let (($x36 (and $x288 $x77)))
 (let (($x284 (and $x36 $x277)))
 (let (($x265 (and $x284 $x236)))
 (let (($x315 (and $x265 $x314)))
 (let (($x25 (and $x315 $x199)))
 (let (($x188 (and $x25 $x85)))
 (let (($x114 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x292 (and $x114 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x109) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x158 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x43 (and (not $x158) $x292)))
 (let (($x161 (and $x43 $x188)))
 (let (($x156 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x104 (and $x156 $x161)))
 (let (($x40 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x125 (and $x40 $x104)))
 (let (($x311 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x151 (_ bv1 32))))
 (=> $x49 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x72 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x317 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x317 (_ bv1 32))))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x151 (_ bv1 32))))
 (= $x49 $x15))))))
 ))
 (let (($x5 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x52 (= false false)))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x151 (_ bv0 32))))
 (=> $x23 $x52)))))
 ))
 (let (($x190 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x317 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x317 (_ bv0 32))))
 (let ((?x151 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x151 (_ bv0 32))))
 (= $x23 $x115))))))
 ))
 (let (($x84 (and $x190 $x5)))
 (let (($x55 (and $x84 $x72)))
 (let (($x263 (and $x55 $x311)))
 (let (($x136 (and $x263 $x125)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x14 (and $x47 $x136)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x133 (and $x30 $x14)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x134 (and $x80 $x133)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x142 (and $x19 $x134)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x105 (and $x92 $x142)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x160 (and $x32 $x105)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x201 (and $x33 $x160)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x202 (and $x18 $x201)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x193 (and $x11 $x202)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x126 (and $x93 $x193)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x144 (and $x44 $x126)))
 (let (($x237 (=> $x144 $x74)))
 (not $x237))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x133 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x108 (ite $x133 ?x230 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x169 (bvsle ?x108 (_ bv9 32))))
 (let (($x137 (= $x169 true)))
 (let (($x163 (= $x137 true)))
 (let ((?x141 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x141)))
 (let (($x239 (= ?x145 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x291 (= $x239 true)))
 (let (($x241 (= $x291 true)))
 (let ((?x48 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x48)))
 (let (($x75 (= ?x258 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x75 true)))
 (let (($x83 (= $x261 true)))
 (let (($x233 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x56 (= $x233 true)))
 (let (($x310 (= $x56 true)))
 (let (($x305 (= $x310 true)))
 (let (($x152 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x147 (= $x152 true)))
 (let (($x86 (= $x147 true)))
 (let (($x122 (= $x86 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x103 (= $x28 true)))
 (let (($x216 (= $x103 true)))
 (let (($x31 (= $x216 true)))
 (let (($x318 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv4 32))))
 (let (($x316 (= $x318 true)))
 (let (($x319 (= $x316 true)))
 (let (($x127 (= $x319 true)))
 (let (($x283 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv9 32))))
 (let (($x285 (= $x283 true)))
 (let (($x262 (= $x285 true)))
 (let (($x279 (= $x262 true)))
 (let (($x221 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv9 32))))
 (let (($x273 (= $x221 true)))
 (let (($x8 (= $x273 true)))
 (let (($x272 (= $x8 true)))
 (let (($x101 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv4 32))))
 (let (($x129 (= $x101 true)))
 (let (($x155 (= $x129 true)))
 (let (($x106 (= $x155 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x123)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x22 $x119)))
 (let (($x253 (and $x139 $x224)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x82 $x253)))
 (let (($x50 (= $x46 true)))
 (let (($x154 (= $x50 true)))
 (let (($x235 (= $x154 true)))
 (let (($x249 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x259 (= $x249 true)))
 (let (($x54 (= $x259 true)))
 (let (($x153 (= $x54 true)))
 (let (($x242 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x178 (= $x242 true)))
 (let (($x245 (= $x178 true)))
 (let (($x260 (= $x245 true)))
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x280 (bvneg ?x73)))
 (let (($x227 (= ?x280 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x232 (= $x227 true)))
 (let (($x238 (= $x232 true)))
 (let (($x281 (= ?x280 input.dst.llvm-%n)))
 (let (($x276 (= $x281 true)))
 (let (($x313 (= $x276 true)))
 (let (($x74 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x237 (= $x74 true)))
 (let (($x39 (= $x237 true)))
 (let (($x223 (= $x39 true)))
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x111 (= $x165 true)))
 (let (($x256 (= $x111 true)))
 (let (($x159 (= $x256 true)))
 (let (($x202 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (= $x202 true)))
 (let (($x126 (= $x193 true)))
 (let (($x144 (= $x126 true)))
 (let (($x252 (and $x144 $x159)))
 (let (($x251 (and $x252 $x223)))
 (let (($x231 (and $x251 $x313)))
 (let (($x254 (and $x231 $x238)))
 (let (($x246 (and $x254 $x260)))
 (let (($x6 (and $x246 $x153)))
 (let (($x96 (and $x6 $x235)))
 (let (($x168 (and $x96 $x106)))
 (let (($x271 (and $x168 $x272)))
 (let (($x269 (and $x271 $x279)))
 (let (($x128 (and $x269 $x127)))
 (let (($x135 (and $x128 $x31)))
 (let (($x217 (and $x135 $x122)))
 (let (($x68 (and $x217 $x305)))
 (let (($x143 (and $x68 $x83)))
 (let (($x76 (and $x143 $x241)))
 (let (($x14 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x177 (and $x14 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x133) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x181 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x116 (and (not $x181) $x177)))
 (let (($x148 (and $x116 $x76)))
 (let (($x303 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x296 (and $x303 $x148)))
 (let (($x167 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x172 (and $x167 $x296)))
 (let (($x176 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x90 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x90 (_ bv1 32))))
 (=> $x228 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x282 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x308 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x308 (_ bv1 32))))
 (let ((?x90 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x90 (_ bv1 32))))
 (= $x228 $x43))))))
 ))
 (let (($x17 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x255 (= false false)))
 (let ((?x90 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x90 (_ bv0 32))))
 (=> $x219 $x255)))))
 ))
 (let (($x243 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x308 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x308 (_ bv0 32))))
 (let ((?x90 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x90 (_ bv0 32))))
 (= $x219 $x26))))))
 ))
 (let (($x112 (and $x243 $x17)))
 (let (($x278 (and $x112 $x282)))
 (let (($x70 (and $x278 $x176)))
 (let (($x301 (and $x70 $x172)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x275 (and $x47 $x301)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x171 (and $x30 $x275)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x287 (and $x80 $x171)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x34 (and $x19 $x287)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x71 (and $x92 $x34)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x226 (and $x32 $x71)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x248 (and $x33 $x226)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x250 (and $x18 $x248)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x166 (and $x11 $x250)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x174 (and $x93 $x166)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x297 (and $x44 $x174)))
 (let (($x138 (=> $x297 $x163)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x133 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x108 (ite $x133 ?x230 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x169 (bvsle ?x108 (_ bv9 32))))
 (let (($x137 (= $x169 true)))
 (let (($x163 (= $x137 true)))
 (let ((?x141 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x141)))
 (let (($x239 (= ?x145 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x291 (= $x239 true)))
 (let (($x241 (= $x291 true)))
 (let ((?x48 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x48)))
 (let (($x75 (= ?x258 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x75 true)))
 (let (($x83 (= $x261 true)))
 (let (($x233 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x56 (= $x233 true)))
 (let (($x310 (= $x56 true)))
 (let (($x305 (= $x310 true)))
 (let (($x152 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x147 (= $x152 true)))
 (let (($x86 (= $x147 true)))
 (let (($x122 (= $x86 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x103 (= $x28 true)))
 (let (($x216 (= $x103 true)))
 (let (($x31 (= $x216 true)))
 (let (($x318 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv4 32))))
 (let (($x316 (= $x318 true)))
 (let (($x319 (= $x316 true)))
 (let (($x127 (= $x319 true)))
 (let (($x283 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv9 32))))
 (let (($x285 (= $x283 true)))
 (let (($x262 (= $x285 true)))
 (let (($x279 (= $x262 true)))
 (let (($x221 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv9 32))))
 (let (($x273 (= $x221 true)))
 (let (($x8 (= $x273 true)))
 (let (($x272 (= $x8 true)))
 (let (($x101 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv4 32))))
 (let (($x129 (= $x101 true)))
 (let (($x155 (= $x129 true)))
 (let (($x106 (= $x155 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x123)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x22 $x119)))
 (let (($x253 (and $x139 $x224)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x82 $x253)))
 (let (($x50 (= $x46 true)))
 (let (($x154 (= $x50 true)))
 (let (($x235 (= $x154 true)))
 (let (($x249 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x259 (= $x249 true)))
 (let (($x54 (= $x259 true)))
 (let (($x153 (= $x54 true)))
 (let (($x242 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x178 (= $x242 true)))
 (let (($x245 (= $x178 true)))
 (let (($x260 (= $x245 true)))
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x280 (bvneg ?x73)))
 (let (($x227 (= ?x280 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x232 (= $x227 true)))
 (let (($x238 (= $x232 true)))
 (let (($x281 (= ?x280 input.dst.llvm-%n)))
 (let (($x276 (= $x281 true)))
 (let (($x313 (= $x276 true)))
 (let (($x74 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x237 (= $x74 true)))
 (let (($x39 (= $x237 true)))
 (let (($x223 (= $x39 true)))
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x111 (= $x165 true)))
 (let (($x256 (= $x111 true)))
 (let (($x159 (= $x256 true)))
 (let (($x202 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (= $x202 true)))
 (let (($x126 (= $x193 true)))
 (let (($x144 (= $x126 true)))
 (let (($x252 (and $x144 $x159)))
 (let (($x251 (and $x252 $x223)))
 (let (($x231 (and $x251 $x313)))
 (let (($x254 (and $x231 $x238)))
 (let (($x246 (and $x254 $x260)))
 (let (($x6 (and $x246 $x153)))
 (let (($x96 (and $x6 $x235)))
 (let (($x168 (and $x96 $x106)))
 (let (($x271 (and $x168 $x272)))
 (let (($x269 (and $x271 $x279)))
 (let (($x128 (and $x269 $x127)))
 (let (($x135 (and $x128 $x31)))
 (let (($x217 (and $x135 $x122)))
 (let (($x68 (and $x217 $x305)))
 (let (($x143 (and $x68 $x83)))
 (let (($x76 (and $x143 $x241)))
 (let (($x14 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x177 (and $x14 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x133) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x181 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x116 (and (not $x181) $x177)))
 (let (($x148 (and $x116 $x76)))
 (let (($x303 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x296 (and $x303 $x148)))
 (let (($x167 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x172 (and $x167 $x296)))
 (let (($x176 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x90 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x90 (_ bv1 32))))
 (=> $x228 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x282 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x308 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x308 (_ bv1 32))))
 (let ((?x90 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x90 (_ bv1 32))))
 (= $x228 $x43))))))
 ))
 (let (($x17 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x255 (= false false)))
 (let ((?x90 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x90 (_ bv0 32))))
 (=> $x219 $x255)))))
 ))
 (let (($x243 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x308 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x308 (_ bv0 32))))
 (let ((?x90 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x90 (_ bv0 32))))
 (= $x219 $x26))))))
 ))
 (let (($x112 (and $x243 $x17)))
 (let (($x278 (and $x112 $x282)))
 (let (($x70 (and $x278 $x176)))
 (let (($x301 (and $x70 $x172)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x275 (and $x47 $x301)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x171 (and $x30 $x275)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x287 (and $x80 $x171)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x34 (and $x19 $x287)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x71 (and $x92 $x34)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x226 (and $x32 $x71)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x248 (and $x33 $x226)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x250 (and $x18 $x248)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x166 (and $x11 $x250)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x174 (and $x93 $x166)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x297 (and $x44 $x174)))
 (let (($x138 (=> $x297 $x163)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00200030)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00200033)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00200030)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x245 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x275 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x267 (ite $x275 ?x245 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x315 (bvule ?x267 (_ bv10 32))))
 (let (($x102 (= $x315 true)))
 (let (($x36 (= $x102 true)))
 (let ((?x184 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x184)))
 (let (($x53 (= ?x131 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x53 true)))
 (let (($x257 (= $x120 true)))
 (let ((?x109 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x109)))
 (let (($x130 (= ?x100 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x130 true)))
 (let (($x94 (= $x292 true)))
 (let (($x40 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv10 32))))
 (let (($x10 (= $x40 true)))
 (let (($x124 (= $x10 true)))
 (let (($x156 (= $x124 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv10 32))))
 (let (($x15 (= $x49 true)))
 (let (($x311 (= $x15 true)))
 (let (($x307 (= $x311 true)))
 (let (($x60 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x190 (= $x60 true)))
 (let (($x41 (= $x190 true)))
 (let (($x5 (= $x41 true)))
 (let (($x57 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x77 (= $x57 true)))
 (let (($x117 (= $x77 true)))
 (let (($x52 (= $x117 true)))
 (let (($x211 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x98 (= $x211 true)))
 (let (($x175 (= $x98 true)))
 (let (($x290 (= $x175 true)))
 (let ((?x295 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x286 (= (_ bv0 32) ?x295)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x197 $x140)))
 (let (($x298 (and $x61 $x286)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x229 $x298)))
 (let (($x214 (= $x208 true)))
 (let (($x13 (= $x214 true)))
 (let (($x97 (= $x13 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x150 (= $x212 true)))
 (let (($x204 (= $x150 true)))
 (let (($x191 (= $x204 true)))
 (let (($x187 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x207 (= $x187 true)))
 (let (($x203 (= $x207 true)))
 (let (($x198 (= $x203 true)))
 (let (($x55 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x306 (= $x55 true)))
 (let (($x195 (= $x306 true)))
 (let (($x186 (= $x195 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x137)))
 (let (($x23 (= ?x163 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x317 (= $x23 true)))
 (let (($x79 (= $x317 true)))
 (let (($x138 (= ?x163 input.dst.llvm-%n)))
 (let (($x51 (= $x138 true)))
 (let (($x113 (= $x51 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x230 (= $x297 true)))
 (let (($x179 (= $x230 true)))
 (let (($x164 (= $x179 true)))
 (let (($x248 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x250 (= $x248 true)))
 (let (($x166 (= $x250 true)))
 (let (($x174 (= $x166 true)))
 (let (($x108 (and $x174 $x164)))
 (let (($x151 (and $x108 $x113)))
 (let (($x72 (and $x151 $x79)))
 (let (($x185 (and $x72 $x186)))
 (let (($x206 (and $x185 $x198)))
 (let (($x213 (and $x206 $x191)))
 (let (($x110 (and $x213 $x97)))
 (let (($x65 (and $x110 $x290)))
 (let (($x115 (and $x65 $x52)))
 (let (($x84 (and $x115 $x5)))
 (let (($x263 (and $x84 $x307)))
 (let (($x88 (and $x263 $x156)))
 (let (($x64 (and $x88 $x94)))
 (let (($x99 (and $x64 $x257)))
 (let (($x301 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x56 (and $x301 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x275) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x231 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x145 (and (not $x231) $x56)))
 (let (($x205 (and $x145 $x99)))
 (let (($x276 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x194 (and $x276 $x205)))
 (let (($x73 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x189 (and $x73 $x194)))
 (let (($x223 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x118 (_ bv1 32))))
 (=> $x202 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x126 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x63 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x63 (_ bv1 32))))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x118 (_ bv1 32))))
 (= $x202 $x116))))))
 ))
 (let (($x134 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x118 (_ bv0 32))))
 (=> $x161 $x125)))))
 ))
 (let (($x188 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x63 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x63 (_ bv0 32))))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x118 (_ bv0 32))))
 (= $x161 $x293))))))
 ))
 (let (($x142 (and $x188 $x134)))
 (let (($x144 (and $x142 $x126)))
 (let (($x251 (and $x144 $x223)))
 (let (($x200 (and $x251 $x189)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x299 (and $x47 $x200)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x300 (and $x30 $x299)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x288 (and $x80 $x300)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x294 (and $x19 $x288)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x209 (and $x92 $x294)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x183 (and $x32 $x209)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x29 (and $x33 $x183)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x309 (and $x18 $x29)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x170 (and $x11 $x309)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x268 (and $x93 $x170)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x220 (and $x44 $x268)))
 (let (($x277 (=> $x220 $x36)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x245 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x275 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x267 (ite $x275 ?x245 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x315 (bvule ?x267 (_ bv10 32))))
 (let (($x102 (= $x315 true)))
 (let (($x36 (= $x102 true)))
 (let ((?x184 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x184)))
 (let (($x53 (= ?x131 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x53 true)))
 (let (($x257 (= $x120 true)))
 (let ((?x109 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x109)))
 (let (($x130 (= ?x100 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x130 true)))
 (let (($x94 (= $x292 true)))
 (let (($x40 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv10 32))))
 (let (($x10 (= $x40 true)))
 (let (($x124 (= $x10 true)))
 (let (($x156 (= $x124 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv10 32))))
 (let (($x15 (= $x49 true)))
 (let (($x311 (= $x15 true)))
 (let (($x307 (= $x311 true)))
 (let (($x60 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x190 (= $x60 true)))
 (let (($x41 (= $x190 true)))
 (let (($x5 (= $x41 true)))
 (let (($x57 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x77 (= $x57 true)))
 (let (($x117 (= $x77 true)))
 (let (($x52 (= $x117 true)))
 (let (($x211 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x98 (= $x211 true)))
 (let (($x175 (= $x98 true)))
 (let (($x290 (= $x175 true)))
 (let ((?x295 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x286 (= (_ bv0 32) ?x295)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x197 $x140)))
 (let (($x298 (and $x61 $x286)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x229 $x298)))
 (let (($x214 (= $x208 true)))
 (let (($x13 (= $x214 true)))
 (let (($x97 (= $x13 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x150 (= $x212 true)))
 (let (($x204 (= $x150 true)))
 (let (($x191 (= $x204 true)))
 (let (($x187 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x207 (= $x187 true)))
 (let (($x203 (= $x207 true)))
 (let (($x198 (= $x203 true)))
 (let (($x55 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x306 (= $x55 true)))
 (let (($x195 (= $x306 true)))
 (let (($x186 (= $x195 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x137)))
 (let (($x23 (= ?x163 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x317 (= $x23 true)))
 (let (($x79 (= $x317 true)))
 (let (($x138 (= ?x163 input.dst.llvm-%n)))
 (let (($x51 (= $x138 true)))
 (let (($x113 (= $x51 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x230 (= $x297 true)))
 (let (($x179 (= $x230 true)))
 (let (($x164 (= $x179 true)))
 (let (($x248 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x250 (= $x248 true)))
 (let (($x166 (= $x250 true)))
 (let (($x174 (= $x166 true)))
 (let (($x108 (and $x174 $x164)))
 (let (($x151 (and $x108 $x113)))
 (let (($x72 (and $x151 $x79)))
 (let (($x185 (and $x72 $x186)))
 (let (($x206 (and $x185 $x198)))
 (let (($x213 (and $x206 $x191)))
 (let (($x110 (and $x213 $x97)))
 (let (($x65 (and $x110 $x290)))
 (let (($x115 (and $x65 $x52)))
 (let (($x84 (and $x115 $x5)))
 (let (($x263 (and $x84 $x307)))
 (let (($x88 (and $x263 $x156)))
 (let (($x64 (and $x88 $x94)))
 (let (($x99 (and $x64 $x257)))
 (let (($x301 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x56 (and $x301 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x275) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x231 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x145 (and (not $x231) $x56)))
 (let (($x205 (and $x145 $x99)))
 (let (($x276 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x194 (and $x276 $x205)))
 (let (($x73 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x189 (and $x73 $x194)))
 (let (($x223 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x118 (_ bv1 32))))
 (=> $x202 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x126 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x63 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x63 (_ bv1 32))))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x118 (_ bv1 32))))
 (= $x202 $x116))))))
 ))
 (let (($x134 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x118 (_ bv0 32))))
 (=> $x161 $x125)))))
 ))
 (let (($x188 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x63 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x63 (_ bv0 32))))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x118 (_ bv0 32))))
 (= $x161 $x293))))))
 ))
 (let (($x142 (and $x188 $x134)))
 (let (($x144 (and $x142 $x126)))
 (let (($x251 (and $x144 $x223)))
 (let (($x200 (and $x251 $x189)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x299 (and $x47 $x200)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x300 (and $x30 $x299)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x288 (and $x80 $x300)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x294 (and $x19 $x288)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x209 (and $x92 $x294)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x183 (and $x32 $x209)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x29 (and $x33 $x183)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x309 (and $x18 $x29)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x170 (and $x11 $x309)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x268 (and $x93 $x170)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x220 (and $x44 $x268)))
 (let (($x277 (=> $x220 $x36)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x245 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x28 (ite $x245 ?x198 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x68 (bvuge ?x28 (_ bv1 32))))
 (let (($x103 (= $x68 true)))
 (let (($x147 (= $x103 true)))
 (let ((?x303 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x303)))
 (let (($x133 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x133 true)))
 (let (($x160 (= $x105 true)))
 (let ((?x43 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x43)))
 (let (($x70 (= ?x176 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x70 true)))
 (let (($x289 (= $x167 true)))
 (let (($x243 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x114 (= $x243 true)))
 (let (($x17 (= $x114 true)))
 (let (($x112 (= $x17 true)))
 (let (($x319 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x157 (= $x319 true)))
 (let (($x255 (= $x157 true)))
 (let (($x26 (= $x255 true)))
 (let (($x168 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x221 (= $x168 true)))
 (let (($x271 (= $x221 true)))
 (let (($x318 (= $x271 true)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x283 (= (_ bv0 32) ?x269)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (and $x154 $x129)))
 (let (($x153 (and $x273 $x283)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x46 $x153)))
 (let (($x123 (= $x50 true)))
 (let (($x155 (= $x123 true)))
 (let (($x106 (= $x155 true)))
 (let (($x240 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x247 (= $x240 true)))
 (let (($x244 (= $x247 true)))
 (let (($x87 (= $x244 true)))
 (let (($x249 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x260 (= $x249 true)))
 (let (($x246 (= $x260 true)))
 (let (($x259 (= $x246 true)))
 (let ((?x219 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x308 (bvneg ?x219)))
 (let (($x254 (= ?x308 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x238 (= $x254 true)))
 (let (($x242 (= $x238 true)))
 (let (($x274 (= ?x308 input.dst.llvm-%n)))
 (let (($x282 (= $x274 true)))
 (let (($x278 (= $x282 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x36 true)))
 (let (($x312 (= $x277 true)))
 (let (($x158 (= $x312 true)))
 (let (($x35 (and $x158 $x278)))
 (let (($x178 (and $x35 $x242)))
 (let (($x22 (and $x178 $x259)))
 (let (($x119 (and $x22 $x87)))
 (let (($x180 (and $x119 $x106)))
 (let (($x316 (and $x180 $x318)))
 (let (($x225 (and $x316 $x26)))
 (let (($x228 (and $x225 $x112)))
 (let (($x302 (and $x228 $x289)))
 (let (($x201 (and $x302 $x160)))
 (let (($x220 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x184 (and $x220 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x245) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x306 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x288 (and (not $x306) $x184)))
 (let (($x177 (and $x288 $x201)))
 (let (($x72 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x196 (and $x72 $x177)))
 (let (($x23 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x85 (and $x23 $x196)))
 (let (($x51 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x141 (_ bv1 32))))
 (=> $x248 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x166 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x145 (bvuge ?x39 (_ bv1 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x141 (_ bv1 32))))
 (= $x248 $x145))))))
 ))
 (let (($x171 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x296 (= false false)))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x141 (_ bv0 32))))
 (=> $x76 $x296)))))
 ))
 (let (($x241 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x264 (= ?x39 (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x141 (_ bv0 32))))
 (= $x76 $x264))))))
 ))
 (let (($x287 (and $x241 $x171)))
 (let (($x174 (and $x287 $x166)))
 (let (($x113 (and $x174 $x51)))
 (let (($x234 (and $x113 $x85)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x165 (and $x47 $x234)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x111 (and $x30 $x165)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x256 (and $x80 $x111)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x159 (and $x19 $x256)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x252 (and $x92 $x159)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x54 (and $x32 $x252)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x224 (and $x33 $x54)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x253 (and $x18 $x224)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x82 (and $x11 $x253)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x285 (and $x93 $x82)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x262 (and $x44 $x285)))
 (let (($x122 (=> $x262 $x147)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x245 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x28 (ite $x245 ?x198 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x68 (bvuge ?x28 (_ bv1 32))))
 (let (($x103 (= $x68 true)))
 (let (($x147 (= $x103 true)))
 (let ((?x303 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x303)))
 (let (($x133 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x133 true)))
 (let (($x160 (= $x105 true)))
 (let ((?x43 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x43)))
 (let (($x70 (= ?x176 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x70 true)))
 (let (($x289 (= $x167 true)))
 (let (($x243 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x114 (= $x243 true)))
 (let (($x17 (= $x114 true)))
 (let (($x112 (= $x17 true)))
 (let (($x319 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x157 (= $x319 true)))
 (let (($x255 (= $x157 true)))
 (let (($x26 (= $x255 true)))
 (let (($x168 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x221 (= $x168 true)))
 (let (($x271 (= $x221 true)))
 (let (($x318 (= $x271 true)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x283 (= (_ bv0 32) ?x269)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (and $x154 $x129)))
 (let (($x153 (and $x273 $x283)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x46 $x153)))
 (let (($x123 (= $x50 true)))
 (let (($x155 (= $x123 true)))
 (let (($x106 (= $x155 true)))
 (let (($x240 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x247 (= $x240 true)))
 (let (($x244 (= $x247 true)))
 (let (($x87 (= $x244 true)))
 (let (($x249 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x260 (= $x249 true)))
 (let (($x246 (= $x260 true)))
 (let (($x259 (= $x246 true)))
 (let ((?x219 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x308 (bvneg ?x219)))
 (let (($x254 (= ?x308 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x238 (= $x254 true)))
 (let (($x242 (= $x238 true)))
 (let (($x274 (= ?x308 input.dst.llvm-%n)))
 (let (($x282 (= $x274 true)))
 (let (($x278 (= $x282 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x36 true)))
 (let (($x312 (= $x277 true)))
 (let (($x158 (= $x312 true)))
 (let (($x35 (and $x158 $x278)))
 (let (($x178 (and $x35 $x242)))
 (let (($x22 (and $x178 $x259)))
 (let (($x119 (and $x22 $x87)))
 (let (($x180 (and $x119 $x106)))
 (let (($x316 (and $x180 $x318)))
 (let (($x225 (and $x316 $x26)))
 (let (($x228 (and $x225 $x112)))
 (let (($x302 (and $x228 $x289)))
 (let (($x201 (and $x302 $x160)))
 (let (($x220 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x184 (and $x220 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x245) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x306 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x288 (and (not $x306) $x184)))
 (let (($x177 (and $x288 $x201)))
 (let (($x72 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x196 (and $x72 $x177)))
 (let (($x23 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x85 (and $x23 $x196)))
 (let (($x51 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x141 (_ bv1 32))))
 (=> $x248 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x166 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x145 (bvuge ?x39 (_ bv1 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x141 (_ bv1 32))))
 (= $x248 $x145))))))
 ))
 (let (($x171 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x296 (= false false)))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x141 (_ bv0 32))))
 (=> $x76 $x296)))))
 ))
 (let (($x241 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x264 (= ?x39 (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x141 (_ bv0 32))))
 (= $x76 $x264))))))
 ))
 (let (($x287 (and $x241 $x171)))
 (let (($x174 (and $x287 $x166)))
 (let (($x113 (and $x174 $x51)))
 (let (($x234 (and $x113 $x85)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x165 (and $x47 $x234)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x111 (and $x30 $x165)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x256 (and $x80 $x111)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x159 (and $x19 $x256)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x252 (and $x92 $x159)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x54 (and $x32 $x252)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x224 (and $x33 $x54)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x253 (and $x18 $x224)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x82 (and $x11 $x253)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x285 (and $x93 $x82)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x262 (and $x44 $x285)))
 (let (($x122 (=> $x262 $x147)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x235 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x203 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x75 (ite $x203 ?x235 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x131 (bvsge ?x75 (_ bv1 32))))
 (let (($x8 (= $x131 true)))
 (let (($x272 (= $x8 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x5)))
 (let (($x115 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x115 true)))
 (let (($x64 (= $x146 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x108)))
 (let (($x298 (= ?x169 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x298 true)))
 (let (($x210 (= $x208 true)))
 (let (($x291 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x297 (= $x291 true)))
 (let (($x230 (= $x297 true)))
 (let (($x179 (= $x230 true)))
 (let (($x34 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x71 (= $x34 true)))
 (let (($x226 (= $x71 true)))
 (let (($x56 (= $x226 true)))
 (let (($x280 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x281 (= $x280 true)))
 (let (($x276 (= $x281 true)))
 (let (($x172 (= $x276 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x134)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x125 $x188)))
 (let (($x202 (and $x14 $x142)))
 (let (($x307 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x307 $x202)))
 (let (($x223 (= $x116 true)))
 (let (($x237 (= $x223 true)))
 (let (($x251 (= $x237 true)))
 (let (($x65 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x66 (= $x65 true)))
 (let (($x57 (= $x66 true)))
 (let (($x77 (= $x57 true)))
 (let (($x190 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x213 (= $x190 true)))
 (let (($x13 (= $x213 true)))
 (let (($x286 (= $x13 true)))
 (let ((?x295 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x295)))
 (let (($x98 (= ?x232 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x175 (= $x98 true)))
 (let (($x117 (= $x175 true)))
 (let (($x214 (= ?x232 input.dst.llvm-%n)))
 (let (($x110 (= $x214 true)))
 (let (($x97 (= $x110 true)))
 (let (($x229 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (= $x229 true)))
 (let (($x121 (= $x197 true)))
 (let (($x140 (= $x121 true)))
 (let (($x211 (and $x140 $x97)))
 (let (($x49 (and $x211 $x117)))
 (let (($x290 (and $x49 $x286)))
 (let (($x60 (and $x290 $x77)))
 (let (($x73 (and $x60 $x251)))
 (let (($x275 (and $x73 $x172)))
 (let (($x239 (and $x275 $x56)))
 (let (($x164 (and $x239 $x179)))
 (let (($x41 (and $x164 $x210)))
 (let (($x194 (and $x41 $x64)))
 (let (($x207 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x262 (and $x207 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x203) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x247 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (and (not $x247) $x262)))
 (let (($x120 (and $x161 $x194)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x52 (and $x22 $x120)))
 (let (($x260 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x100 (and $x260 $x52)))
 (let (($x242 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x300 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x300 (_ bv1 32))))
 (=> $x36 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x312 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x138 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x138 (_ bv1 32))))
 (let ((?x300 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x300 (_ bv1 32))))
 (= $x36 $x288))))))
 ))
 (let (($x227 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x170 (= false false)))
 (let ((?x300 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x300 (_ bv0 32))))
 (=> $x29 $x170)))))
 ))
 (let (($x183 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x138 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x138 (_ bv0 32))))
 (let ((?x300 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x300 (_ bv0 32))))
 (= $x29 $x151))))))
 ))
 (let (($x284 (and $x183 $x227)))
 (let (($x158 (and $x284 $x312)))
 (let (($x178 (and $x158 $x242)))
 (let (($x124 (and $x178 $x100)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x107 (and $x47 $x124)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x130 (and $x30 $x107)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x10 (and $x80 $x130)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x292 (and $x19 $x10)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x94 (and $x92 $x292)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x53 (and $x32 $x94)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x189 (and $x33 $x53)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x200 (and $x18 $x189)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x299 (and $x11 $x200)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x263 (and $x93 $x299)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x88 (and $x44 $x263)))
 (let (($x152 (=> $x88 $x272)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x235 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x203 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x75 (ite $x203 ?x235 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x131 (bvsge ?x75 (_ bv1 32))))
 (let (($x8 (= $x131 true)))
 (let (($x272 (= $x8 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x5)))
 (let (($x115 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x146 (= $x115 true)))
 (let (($x64 (= $x146 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x108)))
 (let (($x298 (= ?x169 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x298 true)))
 (let (($x210 (= $x208 true)))
 (let (($x291 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x297 (= $x291 true)))
 (let (($x230 (= $x297 true)))
 (let (($x179 (= $x230 true)))
 (let (($x34 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x71 (= $x34 true)))
 (let (($x226 (= $x71 true)))
 (let (($x56 (= $x226 true)))
 (let (($x280 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x281 (= $x280 true)))
 (let (($x276 (= $x281 true)))
 (let (($x172 (= $x276 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x134)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x125 $x188)))
 (let (($x202 (and $x14 $x142)))
 (let (($x307 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x307 $x202)))
 (let (($x223 (= $x116 true)))
 (let (($x237 (= $x223 true)))
 (let (($x251 (= $x237 true)))
 (let (($x65 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x66 (= $x65 true)))
 (let (($x57 (= $x66 true)))
 (let (($x77 (= $x57 true)))
 (let (($x190 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x213 (= $x190 true)))
 (let (($x13 (= $x213 true)))
 (let (($x286 (= $x13 true)))
 (let ((?x295 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x295)))
 (let (($x98 (= ?x232 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x175 (= $x98 true)))
 (let (($x117 (= $x175 true)))
 (let (($x214 (= ?x232 input.dst.llvm-%n)))
 (let (($x110 (= $x214 true)))
 (let (($x97 (= $x110 true)))
 (let (($x229 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (= $x229 true)))
 (let (($x121 (= $x197 true)))
 (let (($x140 (= $x121 true)))
 (let (($x211 (and $x140 $x97)))
 (let (($x49 (and $x211 $x117)))
 (let (($x290 (and $x49 $x286)))
 (let (($x60 (and $x290 $x77)))
 (let (($x73 (and $x60 $x251)))
 (let (($x275 (and $x73 $x172)))
 (let (($x239 (and $x275 $x56)))
 (let (($x164 (and $x239 $x179)))
 (let (($x41 (and $x164 $x210)))
 (let (($x194 (and $x41 $x64)))
 (let (($x207 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x262 (and $x207 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x203) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x247 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (and (not $x247) $x262)))
 (let (($x120 (and $x161 $x194)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x52 (and $x22 $x120)))
 (let (($x260 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x100 (and $x260 $x52)))
 (let (($x242 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x300 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x300 (_ bv1 32))))
 (=> $x36 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x312 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x138 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x138 (_ bv1 32))))
 (let ((?x300 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x300 (_ bv1 32))))
 (= $x36 $x288))))))
 ))
 (let (($x227 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x170 (= false false)))
 (let ((?x300 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x300 (_ bv0 32))))
 (=> $x29 $x170)))))
 ))
 (let (($x183 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x138 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x138 (_ bv0 32))))
 (let ((?x300 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x300 (_ bv0 32))))
 (= $x29 $x151))))))
 ))
 (let (($x284 (and $x183 $x227)))
 (let (($x158 (and $x284 $x312)))
 (let (($x178 (and $x158 $x242)))
 (let (($x124 (and $x178 $x100)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x107 (and $x47 $x124)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x130 (and $x30 $x107)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x10 (and $x80 $x130)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x292 (and $x19 $x10)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x94 (and $x92 $x292)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x53 (and $x32 $x94)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x189 (and $x33 $x53)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x200 (and $x18 $x189)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x299 (and $x11 $x200)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x263 (and $x93 $x299)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x88 (and $x44 $x263)))
 (let (($x152 (=> $x88 $x272)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x166 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x111 (ite $x166 ?x42 (ite (= (_ bv10 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x122 (bvsge ?x111 (_ bv0 32))))
 (let (($x196 (= $x122 true)))
 (let (($x256 (= $x196 true)))
 (let ((?x219 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x308 (bvneg ?x219)))
 (let (($x274 (= ?x308 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x282 (= $x274 true)))
 (let (($x278 (= $x282 true)))
 (let ((?x267 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x315 (bvneg ?x267)))
 (let (($x184 (= ?x315 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x294 (= $x184 true)))
 (let (($x209 (= $x294 true)))
 (let (($x317 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x79 (= $x317 true)))
 (let (($x72 (= $x79 true)))
 (let (($x268 (= $x72 true)))
 (let (($x145 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x51 (= $x145 true)))
 (let (($x163 (= $x51 true)))
 (let (($x113 (= $x163 true)))
 (let ((?x296 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x264 (= (_ bv0 32) ?x296)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x313 (and $x289 $x177)))
 (let (($x148 (and $x313 $x264)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x43 $x148)))
 (let (($x301 (= $x241 true)))
 (let (($x171 (= $x301 true)))
 (let (($x287 (= $x171 true)))
 (let (($x302 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x269 (= $x302 true)))
 (let (($x157 (= $x269 true)))
 (let (($x271 (= $x157 true)))
 (let ((?x221 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x221)))
 (let (($x114 (= ?x225 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x17 (= $x114 true)))
 (let (($x38 (= $x17 true)))
 (let (($x319 (= ?x225 input.dst.llvm-%n)))
 (let (($x26 (= $x319 true)))
 (let (($x255 (= $x26 true)))
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x155 (= $x50 true)))
 (let (($x180 (= $x155 true)))
 (let (($x186 (= $x180 true)))
 (let (($x243 (and $x186 $x255)))
 (let (($x105 (and $x243 $x38)))
 (let (($x112 (and $x105 $x271)))
 (let (($x248 (and $x112 $x287)))
 (let (($x23 (and $x248 $x113)))
 (let (($x245 (and $x23 $x268)))
 (let (($x90 (and $x245 $x209)))
 (let (($x273 (and $x90 $x278)))
 (let (($x106 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x88 (and (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) $x166) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x106)))
 (let (($x66 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x76 (and (not $x66) $x88)))
 (let (($x318 (and $x76 $x273)))
 (let (($x290 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x316 (and $x290 $x318)))
 (let (($x213 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x123 (and $x213 $x316)))
 (let (($x117 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x118 (_ bv1 32))))
 (=> $x229 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x121 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x238 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x238 (_ bv1 32))))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x118 (_ bv1 32))))
 (= $x229 $x161))))))
 ))
 (let (($x150 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x187 (= false false)))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x118 (_ bv0 32))))
 (=> $x144 $x187)))))
 ))
 (let (($x126 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x238 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x238 (_ bv0 32))))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x118 (_ bv0 32))))
 (= $x144 $x249))))))
 ))
 (let (($x206 (and $x126 $x150)))
 (let (($x140 (and $x206 $x121)))
 (let (($x49 (and $x140 $x117)))
 (let (($x303 (and $x49 $x123)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x136 (and $x47 $x303)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x133 (and $x30 $x136)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x167 (and $x80 $x133)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x283 (and $x19 $x167)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x285 (and $x92 $x283)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x147 (and $x32 $x285)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x86 (and $x33 $x147)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x70 (and $x18 $x86)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x252 (and $x11 $x70)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x165 (and $x93 $x252)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x54 (and $x44 $x165)))
 (let (($x28 (=> $x54 $x256)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x166 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x111 (ite $x166 ?x42 (ite (= (_ bv10 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x122 (bvsge ?x111 (_ bv0 32))))
 (let (($x196 (= $x122 true)))
 (let (($x256 (= $x196 true)))
 (let ((?x219 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x308 (bvneg ?x219)))
 (let (($x274 (= ?x308 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x282 (= $x274 true)))
 (let (($x278 (= $x282 true)))
 (let ((?x267 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x315 (bvneg ?x267)))
 (let (($x184 (= ?x315 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x294 (= $x184 true)))
 (let (($x209 (= $x294 true)))
 (let (($x317 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x79 (= $x317 true)))
 (let (($x72 (= $x79 true)))
 (let (($x268 (= $x72 true)))
 (let (($x145 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x51 (= $x145 true)))
 (let (($x163 (= $x51 true)))
 (let (($x113 (= $x163 true)))
 (let ((?x296 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x264 (= (_ bv0 32) ?x296)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x313 (and $x289 $x177)))
 (let (($x148 (and $x313 $x264)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x43 $x148)))
 (let (($x301 (= $x241 true)))
 (let (($x171 (= $x301 true)))
 (let (($x287 (= $x171 true)))
 (let (($x302 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x269 (= $x302 true)))
 (let (($x157 (= $x269 true)))
 (let (($x271 (= $x157 true)))
 (let ((?x221 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x221)))
 (let (($x114 (= ?x225 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x17 (= $x114 true)))
 (let (($x38 (= $x17 true)))
 (let (($x319 (= ?x225 input.dst.llvm-%n)))
 (let (($x26 (= $x319 true)))
 (let (($x255 (= $x26 true)))
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x155 (= $x50 true)))
 (let (($x180 (= $x155 true)))
 (let (($x186 (= $x180 true)))
 (let (($x243 (and $x186 $x255)))
 (let (($x105 (and $x243 $x38)))
 (let (($x112 (and $x105 $x271)))
 (let (($x248 (and $x112 $x287)))
 (let (($x23 (and $x248 $x113)))
 (let (($x245 (and $x23 $x268)))
 (let (($x90 (and $x245 $x209)))
 (let (($x273 (and $x90 $x278)))
 (let (($x106 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x88 (and (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) $x166) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x106)))
 (let (($x66 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x76 (and (not $x66) $x88)))
 (let (($x318 (and $x76 $x273)))
 (let (($x290 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x316 (and $x290 $x318)))
 (let (($x213 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x123 (and $x213 $x316)))
 (let (($x117 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x118 (_ bv1 32))))
 (=> $x229 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x121 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x238 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x238 (_ bv1 32))))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x118 (_ bv1 32))))
 (= $x229 $x161))))))
 ))
 (let (($x150 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x187 (= false false)))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x118 (_ bv0 32))))
 (=> $x144 $x187)))))
 ))
 (let (($x126 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x238 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x238 (_ bv0 32))))
 (let ((?x118 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x118 (_ bv0 32))))
 (= $x144 $x249))))))
 ))
 (let (($x206 (and $x126 $x150)))
 (let (($x140 (and $x206 $x121)))
 (let (($x49 (and $x140 $x117)))
 (let (($x303 (and $x49 $x123)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x136 (and $x47 $x303)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x133 (and $x30 $x136)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x167 (and $x80 $x133)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x283 (and $x19 $x167)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x285 (and $x92 $x283)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x147 (and $x32 $x285)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x86 (and $x33 $x147)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x70 (and $x18 $x86)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x252 (and $x11 $x70)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x165 (and $x93 $x252)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x54 (and $x44 $x165)))
 (let (($x28 (=> $x54 $x256)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000088)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80800000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x80000088)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80800000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80800000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x279 (bvuge ?x152 (_ bv1 32))))
 (let (($x231 (= $x279 true)))
 (let (($x52 (= $x231 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x14)))
 (let (($x275 (= ?x172 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x223 (= $x275 true)))
 (let (($x5 (= $x223 true)))
 (let (($x295 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x232 (= $x295 true)))
 (let (($x214 (= $x232 true)))
 (let (($x110 (= $x214 true)))
 (let (($x218 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x262 (= $x218 true)))
 (let (($x63 (= $x262 true)))
 (let (($x193 (= $x63 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x178)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (and $x284 $x242)))
 (let (($x246 (and $x254 $x260)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x220 $x246)))
 (let (($x22 (= $x259 true)))
 (let (($x185 (= $x22 true)))
 (let (($x203 (= $x185 true)))
 (let (($x194 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x120 (= $x194 true)))
 (let (($x55 (= $x120 true)))
 (let (($x170 (= $x55 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x41)))
 (let (($x108 (= ?x134 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x169 (= $x108 true)))
 (let (($x210 (= $x169 true)))
 (let (($x276 (= ?x134 input.dst.llvm-%n)))
 (let (($x179 (= $x276 true)))
 (let (($x164 (= $x179 true)))
 (let ((?x293 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x291 (bvneg ?x293)))
 (let (($x230 (= ?x291 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x191 (= $x230 true)))
 (let (($x146 (= $x191 true)))
 (let (($x202 (and $x146 $x164)))
 (let (($x64 (and $x202 $x210)))
 (let (($x151 (and $x64 $x170)))
 (let (($x212 (and $x151 $x203)))
 (let (($x61 (and $x212 $x193)))
 (let (($x97 (and $x61 $x110)))
 (let (($x84 (and $x97 $x5)))
 (let (($x226 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x87 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x306 (and $x87 $x226)))
 (let (($x153 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x104 (and (not $x153) $x306)))
 (let (($x115 (and $x104 $x84)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x208 (and $x112 $x115)))
 (let (($x269 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x142 (and $x269 $x208)))
 (let (($x38 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x141 (_ bv1 32))))
 (=> $x50 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x180 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x175 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x175 (_ bv1 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x141 (_ bv1 32))))
 (= $x50 $x76))))))
 ))
 (let (($x101 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x139 (= false false)))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x141 (_ bv0 32))))
 (=> $x174 $x139)))))
 ))
 (let (($x166 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x175 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x175 (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x141 (_ bv0 32))))
 (= $x174 $x190))))))
 ))
 (let (($x154 (and $x166 $x101)))
 (let (($x186 (and $x154 $x180)))
 (let (($x105 (and $x186 $x38)))
 (let (($x263 (and $x105 $x142)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x272 (and $x47 $x263)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x233 (and $x30 $x272)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x298 (and $x80 $x233)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x94 (and $x19 $x298)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x107 (and $x92 $x94)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x53 (and $x32 $x107)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x189 (and $x33 $x53)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x124 (and $x18 $x189)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x200 (and $x11 $x124)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x299 (and $x93 $x200)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x244 (and $x44 $x299)))
 (let (($x10 (=> $x244 $x52)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x279 (bvuge ?x152 (_ bv1 32))))
 (let (($x231 (= $x279 true)))
 (let (($x52 (= $x231 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x14)))
 (let (($x275 (= ?x172 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x223 (= $x275 true)))
 (let (($x5 (= $x223 true)))
 (let (($x295 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x232 (= $x295 true)))
 (let (($x214 (= $x232 true)))
 (let (($x110 (= $x214 true)))
 (let (($x218 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x262 (= $x218 true)))
 (let (($x63 (= $x262 true)))
 (let (($x193 (= $x63 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x178)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (and $x284 $x242)))
 (let (($x246 (and $x254 $x260)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x220 $x246)))
 (let (($x22 (= $x259 true)))
 (let (($x185 (= $x22 true)))
 (let (($x203 (= $x185 true)))
 (let (($x194 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x120 (= $x194 true)))
 (let (($x55 (= $x120 true)))
 (let (($x170 (= $x55 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x41)))
 (let (($x108 (= ?x134 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x169 (= $x108 true)))
 (let (($x210 (= $x169 true)))
 (let (($x276 (= ?x134 input.dst.llvm-%n)))
 (let (($x179 (= $x276 true)))
 (let (($x164 (= $x179 true)))
 (let ((?x293 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x291 (bvneg ?x293)))
 (let (($x230 (= ?x291 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x191 (= $x230 true)))
 (let (($x146 (= $x191 true)))
 (let (($x202 (and $x146 $x164)))
 (let (($x64 (and $x202 $x210)))
 (let (($x151 (and $x64 $x170)))
 (let (($x212 (and $x151 $x203)))
 (let (($x61 (and $x212 $x193)))
 (let (($x97 (and $x61 $x110)))
 (let (($x84 (and $x97 $x5)))
 (let (($x226 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x87 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x306 (and $x87 $x226)))
 (let (($x153 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x104 (and (not $x153) $x306)))
 (let (($x115 (and $x104 $x84)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x208 (and $x112 $x115)))
 (let (($x269 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x142 (and $x269 $x208)))
 (let (($x38 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x141 (_ bv1 32))))
 (=> $x50 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x180 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x175 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x175 (_ bv1 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x141 (_ bv1 32))))
 (= $x50 $x76))))))
 ))
 (let (($x101 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x139 (= false false)))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x141 (_ bv0 32))))
 (=> $x174 $x139)))))
 ))
 (let (($x166 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x175 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x175 (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x141 (_ bv0 32))))
 (= $x174 $x190))))))
 ))
 (let (($x154 (and $x166 $x101)))
 (let (($x186 (and $x154 $x180)))
 (let (($x105 (and $x186 $x38)))
 (let (($x263 (and $x105 $x142)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x272 (and $x47 $x263)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x233 (and $x30 $x272)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x298 (and $x80 $x233)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x94 (and $x19 $x298)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x107 (and $x92 $x94)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x53 (and $x32 $x107)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x189 (and $x33 $x53)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x124 (and $x18 $x189)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x200 (and $x11 $x124)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x299 (and $x93 $x200)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x244 (and $x44 $x299)))
 (let (($x10 (=> $x244 $x52)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x159 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x288 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x209 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x277 (ite $x209 ?x288 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x60 (bvmul (_ bv4294967295 32) ?x277)))
 (let ((?x57 (bvneg ?x60)))
 (let (($x312 (= ?x57 ?x159)))
 (let (($x158 (= $x312 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x319 (bvneg ?x225)))
 (let (($x26 (= ?x319 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x26 true)))
 (let (($x301 (= $x255 true)))
 (let ((?x129 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x129)))
 (let (($x39 (= ?x106 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x250 (= $x39 true)))
 (let (($x168 (= $x250 true)))
 (let (($x286 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x290 (= $x286 true)))
 (let (($x119 (= $x290 true)))
 (let (($x46 (= $x119 true)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x150)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x187 $x126)))
 (let (($x229 (and $x207 $x206)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x86 $x229)))
 (let (($x117 (= $x161 true)))
 (let (($x98 (= $x117 true)))
 (let (($x49 (= $x98 true)))
 (let ((?x23 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x23)))
 (let (($x248 (= ?x171 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x282 (= $x248 true)))
 (let (($x278 (= $x282 true)))
 (let (($x72 (= ?x171 input.dst.llvm-%n)))
 (let (($x308 (= $x72 true)))
 (let (($x274 (= $x308 true)))
 (let (($x123 (and $x274 $x278)))
 (let (($x213 (and $x123 $x49)))
 (let (($x182 (and $x213 $x46)))
 (let (($x221 (and $x182 $x168)))
 (let (($x268 (and $x221 $x301)))
 (let (($x102 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x43 (and $x102 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x209) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x151 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x51 (and (not $x151) $x43)))
 (let (($x245 (and $x51 $x268)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x145 (and $x55 $x245)))
 (let (($x64 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x136 (and $x64 $x145)))
 (let (($x108 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x307 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x307 (_ bv1 32))))
 (=> $x293 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x297 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x17 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x17 (_ bv1 32))))
 (let ((?x307 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x307 (_ bv1 32))))
 (= $x293 $x104))))))
 ))
 (let (($x281 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x307 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x307 (_ bv0 32))))
 (=> $x251 $x237)))))
 ))
 (let (($x188 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x17 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x17 (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x307 (_ bv0 32))))
 (= $x251 $x302))))))
 ))
 (let (($x239 (and $x188 $x281)))
 (let (($x230 (and $x239 $x297)))
 (let (($x169 (and $x230 $x108)))
 (let (($x133 (and $x169 $x136)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x167 (and $x47 $x133)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x316 (and $x30 $x167)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x287 (and $x80 $x316)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x68 (and $x19 $x287)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x35 (and $x92 $x68)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x138 (and $x32 $x35)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x318 (and $x33 $x138)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x111 (and $x18 $x318)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x54 (and $x11 $x111)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x122 (and $x93 $x54)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x196 (and $x44 $x122)))
 (let (($x300 (=> $x196 $x158)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x159 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x288 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x209 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x277 (ite $x209 ?x288 (ite (= (_ bv4 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x60 (bvmul (_ bv4294967295 32) ?x277)))
 (let ((?x57 (bvneg ?x60)))
 (let (($x312 (= ?x57 ?x159)))
 (let (($x158 (= $x312 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x319 (bvneg ?x225)))
 (let (($x26 (= ?x319 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x26 true)))
 (let (($x301 (= $x255 true)))
 (let ((?x129 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x129)))
 (let (($x39 (= ?x106 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x250 (= $x39 true)))
 (let (($x168 (= $x250 true)))
 (let (($x286 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x290 (= $x286 true)))
 (let (($x119 (= $x290 true)))
 (let (($x46 (= $x119 true)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x150)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x187 $x126)))
 (let (($x229 (and $x207 $x206)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x86 $x229)))
 (let (($x117 (= $x161 true)))
 (let (($x98 (= $x117 true)))
 (let (($x49 (= $x98 true)))
 (let ((?x23 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x23)))
 (let (($x248 (= ?x171 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x282 (= $x248 true)))
 (let (($x278 (= $x282 true)))
 (let (($x72 (= ?x171 input.dst.llvm-%n)))
 (let (($x308 (= $x72 true)))
 (let (($x274 (= $x308 true)))
 (let (($x123 (and $x274 $x278)))
 (let (($x213 (and $x123 $x49)))
 (let (($x182 (and $x213 $x46)))
 (let (($x221 (and $x182 $x168)))
 (let (($x268 (and $x221 $x301)))
 (let (($x102 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x43 (and $x102 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) $x209) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x151 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x51 (and (not $x151) $x43)))
 (let (($x245 (and $x51 $x268)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x145 (and $x55 $x245)))
 (let (($x64 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x136 (and $x64 $x145)))
 (let (($x108 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x307 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x307 (_ bv1 32))))
 (=> $x293 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x297 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x17 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x17 (_ bv1 32))))
 (let ((?x307 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x307 (_ bv1 32))))
 (= $x293 $x104))))))
 ))
 (let (($x281 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x307 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x307 (_ bv0 32))))
 (=> $x251 $x237)))))
 ))
 (let (($x188 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x17 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x17 (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x307 (_ bv0 32))))
 (= $x251 $x302))))))
 ))
 (let (($x239 (and $x188 $x281)))
 (let (($x230 (and $x239 $x297)))
 (let (($x169 (and $x230 $x108)))
 (let (($x133 (and $x169 $x136)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x167 (and $x47 $x133)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x316 (and $x30 $x167)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x287 (and $x80 $x316)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x68 (and $x19 $x287)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x35 (and $x92 $x68)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x138 (and $x32 $x35)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x318 (and $x33 $x138)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x111 (and $x18 $x318)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x54 (and $x11 $x111)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x122 (and $x93 $x54)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x196 (and $x44 $x122)))
 (let (($x300 (=> $x196 $x158)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 135 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x290 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x5 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x256 (ite $x5 ?x290 (ite (= (_ bv10 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x148 (bvmul (_ bv4294967295 32) ?x256)))
 (let ((?x231 (bvneg ?x148)))
 (let (($x29 (= ?x231 ?x28)))
 (let (($x15 (= $x29 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x212)))
 (let (($x189 (= ?x53 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x189 true)))
 (let (($x298 (= $x124 true)))
 (let ((?x41 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x41)))
 (let (($x276 (= ?x134 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x276 true)))
 (let (($x232 (= $x246 true)))
 (let (($x306 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x176 (= $x306 true)))
 (let (($x125 (= $x176 true)))
 (let (($x191 (= $x125 true)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x269)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x50 $x114)))
 (let (($x271 (and $x105 $x157)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x101 $x271)))
 (let (($x73 (= $x112 true)))
 (let (($x280 (= $x73 true)))
 (let (($x34 (= $x280 true)))
 (let ((?x223 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x263 (bvneg ?x223)))
 (let (($x65 (= ?x263 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x139 (= $x65 true)))
 (let (($x190 (= $x139 true)))
 (let (($x299 (= ?x263 input.dst.llvm-%n)))
 (let (($x244 (= $x299 true)))
 (let (($x152 (= $x244 true)))
 (let (($x137 (and $x152 $x190)))
 (let (($x56 (and $x137 $x34)))
 (let (($x146 (and $x56 $x191)))
 (let (($x214 (and $x146 $x232)))
 (let (($x22 (and $x214 $x298)))
 (let (($x142 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x242 (and (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) $x5) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x142)))
 (let (($x161 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x172 (and (not $x161) $x242)))
 (let (($x211 (and $x172 $x22)))
 (let (($x206 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x264 (and $x206 $x211)))
 (let (($x126 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x201 (and $x126 $x264)))
 (let (($x187 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x77 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x77 (_ bv1 32))))
 (=> $x171 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x72 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x202 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x202 (_ bv1 32))))
 (let ((?x77 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x77 (_ bv1 32))))
 (= $x171 $x51))))))
 ))
 (let (($x90 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x267 (= false false)))
 (let ((?x77 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x77 (_ bv0 32))))
 (=> $x79 $x267)))))
 ))
 (let (($x317 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x202 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x202 (_ bv0 32))))
 (let ((?x77 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x77 (_ bv0 32))))
 (= $x79 $x210))))))
 ))
 (let (($x219 (and $x317 $x90)))
 (let (($x308 (and $x219 $x72)))
 (let (($x249 (and $x308 $x187)))
 (let (($x233 (and $x249 $x201)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x144 (and $x47 $x233)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x10 (and $x24 $x144)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x238 (and $x37 $x10)))
 (let (($x9 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x197 (and $x9 $x238)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x52 (and $x59 $x197)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x121 (and $x27 $x52)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x140 (and $x20 $x121)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x289 (and $x78 $x140)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x241 (and $x16 $x289)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x313 (and $x7 $x241)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x163 (and $x21 $x313)))
 (let (($x70 (=> $x163 $x15)))
 (not $x70)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x290 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x5 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x256 (ite $x5 ?x290 (ite (= (_ bv10 32) (_ bv4 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x148 (bvmul (_ bv4294967295 32) ?x256)))
 (let ((?x231 (bvneg ?x148)))
 (let (($x29 (= ?x231 ?x28)))
 (let (($x15 (= $x29 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x212)))
 (let (($x189 (= ?x53 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x189 true)))
 (let (($x298 (= $x124 true)))
 (let ((?x41 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x41)))
 (let (($x276 (= ?x134 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x276 true)))
 (let (($x232 (= $x246 true)))
 (let (($x306 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x176 (= $x306 true)))
 (let (($x125 (= $x176 true)))
 (let (($x191 (= $x125 true)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x269)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x50 $x114)))
 (let (($x271 (and $x105 $x157)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x101 $x271)))
 (let (($x73 (= $x112 true)))
 (let (($x280 (= $x73 true)))
 (let (($x34 (= $x280 true)))
 (let ((?x223 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x263 (bvneg ?x223)))
 (let (($x65 (= ?x263 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x139 (= $x65 true)))
 (let (($x190 (= $x139 true)))
 (let (($x299 (= ?x263 input.dst.llvm-%n)))
 (let (($x244 (= $x299 true)))
 (let (($x152 (= $x244 true)))
 (let (($x137 (and $x152 $x190)))
 (let (($x56 (and $x137 $x34)))
 (let (($x146 (and $x56 $x191)))
 (let (($x214 (and $x146 $x232)))
 (let (($x22 (and $x214 $x298)))
 (let (($x142 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x242 (and (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) $x5) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x142)))
 (let (($x161 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x172 (and (not $x161) $x242)))
 (let (($x211 (and $x172 $x22)))
 (let (($x206 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x264 (and $x206 $x211)))
 (let (($x126 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x201 (and $x126 $x264)))
 (let (($x187 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x77 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x77 (_ bv1 32))))
 (=> $x171 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x72 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x202 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x202 (_ bv1 32))))
 (let ((?x77 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x77 (_ bv1 32))))
 (= $x171 $x51))))))
 ))
 (let (($x90 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x267 (= false false)))
 (let ((?x77 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x77 (_ bv0 32))))
 (=> $x79 $x267)))))
 ))
 (let (($x317 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x202 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x202 (_ bv0 32))))
 (let ((?x77 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x77 (_ bv0 32))))
 (= $x79 $x210))))))
 ))
 (let (($x219 (and $x317 $x90)))
 (let (($x308 (and $x219 $x72)))
 (let (($x249 (and $x308 $x187)))
 (let (($x233 (and $x249 $x201)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x144 (and $x47 $x233)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x10 (and $x24 $x144)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x238 (and $x37 $x10)))
 (let (($x9 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x197 (and $x9 $x238)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x52 (and $x59 $x197)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x121 (and $x27 $x52)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x140 (and $x20 $x121)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x289 (and $x78 $x140)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x241 (and $x16 $x289)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x313 (and $x7 $x241)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x163 (and $x21 $x313)))
 (let (($x70 (=> $x163 $x15)))
 (not $x70)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 135 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x193 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x227 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x248 (and $x227 $x193)))
 (let (($x213 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x309 (and (not $x213) $x248)))
 (let (($x230 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (not $x230)))
 (let (($x88 (or $x179 $x309)))
 (let (($x178 (= $x88 true)))
 (let (($x61 (= $x178 true)))
 (let ((?x289 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x241 (bvneg ?x289)))
 (let (($x163 (= ?x241 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x290 (= $x163 true)))
 (let (($x117 (= $x290 true)))
 (let ((?x233 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x233)))
 (let (($x238 (= ?x144 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x197 (= $x238 true)))
 (let (($x52 (= $x197 true)))
 (let ((?x246 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x246)))
 (let (($x298 (= ?x232 input.dst.llvm-%n)))
 (let (($x22 (= $x298 true)))
 (let (($x211 (= $x22 true)))
 (let (($x214 (= ?x232 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x212 (= $x214 true)))
 (let (($x53 (= $x212 true)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x125)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x306 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x34 $x306)))
 (let (($x146 (and $x176 $x191)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x73 $x146)))
 (let (($x41 (= $x98 true)))
 (let (($x134 (= $x41 true)))
 (let (($x71 (= $x134 true)))
 (let (($x189 (and $x71 $x53)))
 (let (($x264 (and $x189 $x211)))
 (let (($x121 (and $x264 $x52)))
 (let (($x311 (and $x121 $x117)))
 (let (($x157 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x256 (and $x157 $x311)))
 (let (($x114 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x148 (and $x114 $x256)))
 (let (($x50 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x110 (_ bv1 32))))
 (=> $x263 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x299 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x240 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x240 (_ bv1 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x110 (_ bv1 32))))
 (= $x263 $x172))))))
 ))
 (let (($x295 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x200 (= false false)))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x110 (_ bv0 32))))
 (=> $x84 $x200)))))
 ))
 (let (($x5 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x240 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x240 (_ bv0 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x110 (_ bv0 32))))
 (= $x84 $x74))))))
 ))
 (let (($x115 (and $x5 $x295)))
 (let (($x244 (and $x115 $x299)))
 (let (($x76 (and $x244 $x50)))
 (let (($x231 (and $x76 $x148)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x28 (and $x47 $x231)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x29 (and $x24 $x28)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x15 (and $x37 $x29)))
 (let (($x9 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x70 (and $x9 $x15)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x165 (and $x91 $x70)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x153 (and $x33 $x165)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x307 (and $x18 $x153)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x251 (and $x11 $x307)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x17 (and $x93 $x251)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x291 (and $x44 $x17)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x297 (and $x58 $x291)))
 (let (($x275 (=> $x297 $x61)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x193 (bvuge (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x227 (bvuge (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x248 (and $x227 $x193)))
 (let (($x213 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x309 (and (not $x213) $x248)))
 (let (($x230 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (not $x230)))
 (let (($x88 (or $x179 $x309)))
 (let (($x178 (= $x88 true)))
 (let (($x61 (= $x178 true)))
 (let ((?x289 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x241 (bvneg ?x289)))
 (let (($x163 (= ?x241 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x290 (= $x163 true)))
 (let (($x117 (= $x290 true)))
 (let ((?x233 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x233)))
 (let (($x238 (= ?x144 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x197 (= $x238 true)))
 (let (($x52 (= $x197 true)))
 (let ((?x246 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x246)))
 (let (($x298 (= ?x232 input.dst.llvm-%n)))
 (let (($x22 (= $x298 true)))
 (let (($x211 (= $x22 true)))
 (let (($x214 (= ?x232 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x212 (= $x214 true)))
 (let (($x53 (= $x212 true)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x125)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x306 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x34 $x306)))
 (let (($x146 (and $x176 $x191)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x73 $x146)))
 (let (($x41 (= $x98 true)))
 (let (($x134 (= $x41 true)))
 (let (($x71 (= $x134 true)))
 (let (($x189 (and $x71 $x53)))
 (let (($x264 (and $x189 $x211)))
 (let (($x121 (and $x264 $x52)))
 (let (($x311 (and $x121 $x117)))
 (let (($x157 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x256 (and $x157 $x311)))
 (let (($x114 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x148 (and $x114 $x256)))
 (let (($x50 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x110 (_ bv1 32))))
 (=> $x263 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x299 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x240 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x240 (_ bv1 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x110 (_ bv1 32))))
 (= $x263 $x172))))))
 ))
 (let (($x295 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x200 (= false false)))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x110 (_ bv0 32))))
 (=> $x84 $x200)))))
 ))
 (let (($x5 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x240 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x240 (_ bv0 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x110 (_ bv0 32))))
 (= $x84 $x74))))))
 ))
 (let (($x115 (and $x5 $x295)))
 (let (($x244 (and $x115 $x299)))
 (let (($x76 (and $x244 $x50)))
 (let (($x231 (and $x76 $x148)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x28 (and $x47 $x231)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x29 (and $x24 $x28)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x15 (and $x37 $x29)))
 (let (($x9 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x70 (and $x9 $x15)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x165 (and $x91 $x70)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x153 (and $x33 $x165)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x307 (and $x18 $x153)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x251 (and $x11 $x307)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x17 (and $x93 $x251)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x291 (and $x44 $x17)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x297 (and $x58 $x291)))
 (let (($x275 (=> $x297 $x61)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 127 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x319 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (not $x319)))
 (let (($x167 (= $x13 false)))
 (let (($x287 (= $x167 true)))
 (let ((?x88 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x88)))
 (let (($x275 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x275 true)))
 (let (($x151 (= $x66 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x28)))
 (let (($x36 (= ?x29 input.dst.llvm-%n)))
 (let (($x260 (= $x36 true)))
 (let (($x193 (= $x260 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x288 (= (_ bv0 32) ?x218)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x297 $x213)))
 (let (($x63 (and $x159 $x288)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x17 $x63)))
 (let (($x175 (= $x243 true)))
 (let (($x227 (= $x175 true)))
 (let (($x174 (= $x227 true)))
 (let (($x15 (= ?x29 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x70 (= $x15 true)))
 (let (($x165 (= $x70 true)))
 (let ((?x290 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x290)))
 (let (($x256 (= ?x117 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x256 true)))
 (let (($x231 (= $x148 true)))
 (let (($x153 (and $x231 $x165)))
 (let (($x284 (and $x153 $x174)))
 (let (($x248 (and $x284 $x193)))
 (let (($x77 (and $x248 $x151)))
 (let (($x241 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x79 (and $x241 $x77)))
 (let (($x121 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x202 (and $x121 $x79)))
 (let (($x238 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x73 (_ bv1 32))))
 (=> $x214 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x53 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x154 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x276 (bvuge ?x154 (_ bv1 32))))
 (let ((?x73 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x73 (_ bv1 32))))
 (= $x214 $x276))))))
 ))
 (let (($x125 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x226 (= false false)))
 (let ((?x73 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (= ?x73 (_ bv0 32))))
 (=> $x280 $x226)))))
 ))
 (let (($x56 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x154 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x154 (_ bv0 32))))
 (let ((?x73 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (= ?x73 (_ bv0 32))))
 (= $x280 $x38))))))
 ))
 (let (($x191 (and $x56 $x125)))
 (let (($x189 (and $x191 $x53)))
 (let (($x197 (and $x189 $x238)))
 (let (($x315 (and $x197 $x202)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x72 (and $x47 $x315)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x308 (and $x80 $x72)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x147 (and $x19 $x308)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x49 (and $x89 $x147)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x182 (and $x32 $x49)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x286 (and $x20 $x182)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x119 (and $x78 $x286)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x46 (and $x16 $x119)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x221 (and $x7 $x46)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x225 (and $x21 $x221)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x250 (and $x92 $x225)))
 (let (($x316 (=> $x250 $x287)))
 (not $x316)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x319 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (not $x319)))
 (let (($x167 (= $x13 false)))
 (let (($x287 (= $x167 true)))
 (let ((?x88 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x88)))
 (let (($x275 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x275 true)))
 (let (($x151 (= $x66 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x28)))
 (let (($x36 (= ?x29 input.dst.llvm-%n)))
 (let (($x260 (= $x36 true)))
 (let (($x193 (= $x260 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x288 (= (_ bv0 32) ?x218)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x297 $x213)))
 (let (($x63 (and $x159 $x288)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x17 $x63)))
 (let (($x175 (= $x243 true)))
 (let (($x227 (= $x175 true)))
 (let (($x174 (= $x227 true)))
 (let (($x15 (= ?x29 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x70 (= $x15 true)))
 (let (($x165 (= $x70 true)))
 (let ((?x290 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x290)))
 (let (($x256 (= ?x117 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x256 true)))
 (let (($x231 (= $x148 true)))
 (let (($x153 (and $x231 $x165)))
 (let (($x284 (and $x153 $x174)))
 (let (($x248 (and $x284 $x193)))
 (let (($x77 (and $x248 $x151)))
 (let (($x241 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x79 (and $x241 $x77)))
 (let (($x121 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x202 (and $x121 $x79)))
 (let (($x238 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x73 (_ bv1 32))))
 (=> $x214 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x53 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x154 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x276 (bvuge ?x154 (_ bv1 32))))
 (let ((?x73 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x73 (_ bv1 32))))
 (= $x214 $x276))))))
 ))
 (let (($x125 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x226 (= false false)))
 (let ((?x73 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (= ?x73 (_ bv0 32))))
 (=> $x280 $x226)))))
 ))
 (let (($x56 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x154 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x154 (_ bv0 32))))
 (let ((?x73 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (= ?x73 (_ bv0 32))))
 (= $x280 $x38))))))
 ))
 (let (($x191 (and $x56 $x125)))
 (let (($x189 (and $x191 $x53)))
 (let (($x197 (and $x189 $x238)))
 (let (($x315 (and $x197 $x202)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x72 (and $x47 $x315)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x308 (and $x80 $x72)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x147 (and $x19 $x308)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x49 (and $x89 $x147)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x182 (and $x32 $x49)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x286 (and $x20 $x182)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x119 (and $x78 $x286)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x46 (and $x16 $x119)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x221 (and $x7 $x46)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x225 (and $x21 $x221)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x250 (and $x92 $x225)))
 (let (($x316 (=> $x250 $x287)))
 (not $x316)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00800010)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00800013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00800010)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000c8100)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000c8103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000c8100)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (= (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x245 (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (and (bvuge ?x245 (_ bv1 32)) $x204)))
 (let (($x60 (or (= ?x245 (_ bv0 32)) $x123)))
 (let (($x298 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x64 (and (not $x298) $x60)))
 (let (($x209 (or $x298 $x64)))
 (let (($x124 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x262 (or $x124 $x209)))
 (let (($x141 (= $x262 true)))
 (let (($x118 (= $x141 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x259 (bvneg ?x5)))
 (let (($x115 (= ?x259 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x263 (= $x115 true)))
 (let (($x172 (= $x263 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x299 (bvneg ?x94)))
 (let (($x96 (= ?x299 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x229 (= $x96 true)))
 (let (($x200 (= $x229 true)))
 (let ((?x225 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x225)))
 (let (($x68 (= ?x250 input.dst.llvm-%n)))
 (let (($x161 (= $x68 true)))
 (let (($x110 (= $x161 true)))
 (let (($x319 (= ?x250 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x13 (= $x319 true)))
 (let (($x167 (= $x13 true)))
 (let ((?x308 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x308)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x315 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x77 $x315)))
 (let (($x49 (and $x72 $x147)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x66 $x49)))
 (let (($x286 (= $x182 true)))
 (let (($x119 (= $x286 true)))
 (let (($x46 (= $x119 true)))
 (let (($x287 (and $x46 $x167)))
 (let (($x84 (and $x287 $x110)))
 (let (($x74 (and $x84 $x200)))
 (let (($x50 (and $x74 $x172)))
 (let (($x178 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x101 (and $x178 $x50)))
 (let (($x248 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x76 (and $x248 $x101)))
 (let (($x36 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x290 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x290 (_ bv1 32))))
 (=> $x230 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x213 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x10 (_ bv1 32))))
 (let ((?x290 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x290 (_ bv1 32))))
 (= $x230 $x17))))))
 ))
 (let (($x29 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x148 (= false false)))
 (let ((?x290 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x290 (_ bv0 32))))
 (=> $x117 $x148)))))
 ))
 (let (($x256 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x10 (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x290 (_ bv0 32))))
 (= $x117 $x52))))))
 ))
 (let (($x15 (and $x256 $x29)))
 (let (($x159 (and $x15 $x213)))
 (let (($x260 (and $x159 $x36)))
 (let (($x114 (and $x260 $x76)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x105 (and $x47 $x114)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x269 (and $x80 $x105)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x157 (and $x19 $x269)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x306 (and $x89 $x157)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x146 (and $x32 $x306)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x98 (and $x20 $x146)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x41 (and $x78 $x98)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x134 (and $x16 $x41)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x71 (and $x7 $x134)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x246 (and $x44 $x71)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x232 (and $x58 $x246)))
 (let (($x296 (=> $x232 $x118)))
 (not $x296))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (= (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x245 (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (and (bvuge ?x245 (_ bv1 32)) $x204)))
 (let (($x60 (or (= ?x245 (_ bv0 32)) $x123)))
 (let (($x298 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x64 (and (not $x298) $x60)))
 (let (($x209 (or $x298 $x64)))
 (let (($x124 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x262 (or $x124 $x209)))
 (let (($x141 (= $x262 true)))
 (let (($x118 (= $x141 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x259 (bvneg ?x5)))
 (let (($x115 (= ?x259 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x263 (= $x115 true)))
 (let (($x172 (= $x263 true)))
 (let ((?x94 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x299 (bvneg ?x94)))
 (let (($x96 (= ?x299 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x229 (= $x96 true)))
 (let (($x200 (= $x229 true)))
 (let ((?x225 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x225)))
 (let (($x68 (= ?x250 input.dst.llvm-%n)))
 (let (($x161 (= $x68 true)))
 (let (($x110 (= $x161 true)))
 (let (($x319 (= ?x250 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x13 (= $x319 true)))
 (let (($x167 (= $x13 true)))
 (let ((?x308 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x308)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x315 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x77 $x315)))
 (let (($x49 (and $x72 $x147)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x66 $x49)))
 (let (($x286 (= $x182 true)))
 (let (($x119 (= $x286 true)))
 (let (($x46 (= $x119 true)))
 (let (($x287 (and $x46 $x167)))
 (let (($x84 (and $x287 $x110)))
 (let (($x74 (and $x84 $x200)))
 (let (($x50 (and $x74 $x172)))
 (let (($x178 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x101 (and $x178 $x50)))
 (let (($x248 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x76 (and $x248 $x101)))
 (let (($x36 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x290 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x290 (_ bv1 32))))
 (=> $x230 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x213 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x10 (_ bv1 32))))
 (let ((?x290 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x290 (_ bv1 32))))
 (= $x230 $x17))))))
 ))
 (let (($x29 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x148 (= false false)))
 (let ((?x290 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x290 (_ bv0 32))))
 (=> $x117 $x148)))))
 ))
 (let (($x256 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x10 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x10 (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x290 (_ bv0 32))))
 (= $x117 $x52))))))
 ))
 (let (($x15 (and $x256 $x29)))
 (let (($x159 (and $x15 $x213)))
 (let (($x260 (and $x159 $x36)))
 (let (($x114 (and $x260 $x76)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x105 (and $x47 $x114)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x269 (and $x80 $x105)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x157 (and $x19 $x269)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x306 (and $x89 $x157)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x146 (and $x32 $x306)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x98 (and $x20 $x146)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x41 (and $x78 $x98)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x134 (and $x16 $x41)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x71 (and $x7 $x134)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x246 (and $x44 $x71)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x232 (and $x58 $x246)))
 (let (($x296 (=> $x232 $x118)))
 (not $x296))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 128 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x292 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x292 true)))
 (let (($x160 (= $x177 true)))
 (let ((?x283 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x283)))
 (let (($x168 (= ?x23 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x168 true)))
 (let (($x252 (= $x196 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x152)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x223 $x113)))
 (let (($x277 (and $x55 $x239)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (and $x139 $x277)))
 (let (($x116 (= $x293 true)))
 (let (($x183 (= $x116 true)))
 (let (($x255 (= $x183 true)))
 (let ((?x297 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x218 (bvneg ?x297)))
 (let (($x227 (= ?x218 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x185 (= $x227 true)))
 (let (($x242 (= $x185 true)))
 (let (($x288 (= ?x218 input.dst.llvm-%n)))
 (let (($x63 (= $x288 true)))
 (let (($x243 (= $x63 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x70)))
 (let (($x153 (= ?x165 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x307 (= $x153 true)))
 (let (($x251 (= $x307 true)))
 (let (($x197 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x121 (not $x197)))
 (let (($x140 (= $x121 true)))
 (let (($x289 (= $x140 true)))
 (let (($x241 (= $x289 true)))
 (let (($x291 (and $x241 $x251)))
 (let (($x175 (and $x291 $x243)))
 (let (($x14 (and $x175 $x242)))
 (let (($x274 (and $x14 $x255)))
 (let (($x228 (and $x274 $x252)))
 (let (($x276 (= (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x38 (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (and (bvuge ?x38 (_ bv1 32)) $x276)))
 (let (($x90 (or (= ?x38 (_ bv0 32)) $x210)))
 (let (($x115 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x86 (and (not $x115) $x90)))
 (let (($x104 (and $x86 $x228)))
 (let (($x259 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x126 (and $x259 $x104)))
 (let (($x74 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x207 (and $x74 $x126)))
 (let (($x96 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x66 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (bvuge ?x66 (_ bv1 32))))
 (=> $x319 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x167 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x220 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x220 (_ bv1 32))))
 (let ((?x66 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (bvuge ?x66 (_ bv1 32))))
 (= $x319 $x221))))))
 ))
 (let (($x308 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x202 (= false false)))
 (let ((?x66 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x66 (_ bv0 32))))
 (=> $x151 $x202)))))
 ))
 (let (($x79 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x220 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x220 (_ bv0 32))))
 (let ((?x66 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x66 (_ bv0 32))))
 (= $x151 $x193))))))
 ))
 (let (($x147 (and $x79 $x308)))
 (let (($x287 (and $x147 $x167)))
 (let (($x229 (and $x287 $x96)))
 (let (($x150 (and $x229 $x207)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x187 (and $x47 $x150)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x122 (and $x80 $x187)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x137 (and $x19 $x122)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x136 (and $x89 $x137)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x281 (and $x32 $x136)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x106 (and $x20 $x281)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x303 (and $x78 $x106)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x43 (and $x16 $x303)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x120 (and $x7 $x43)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x302 (and $x44 $x120)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x166 (and $x30 $x302)))
 (let (($x279 (=> $x166 $x160)))
 (not $x279)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x292 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x292 true)))
 (let (($x160 (= $x177 true)))
 (let ((?x283 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x283)))
 (let (($x168 (= ?x23 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x168 true)))
 (let (($x252 (= $x196 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x152)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x223 $x113)))
 (let (($x277 (and $x55 $x239)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (and $x139 $x277)))
 (let (($x116 (= $x293 true)))
 (let (($x183 (= $x116 true)))
 (let (($x255 (= $x183 true)))
 (let ((?x297 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x218 (bvneg ?x297)))
 (let (($x227 (= ?x218 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x185 (= $x227 true)))
 (let (($x242 (= $x185 true)))
 (let (($x288 (= ?x218 input.dst.llvm-%n)))
 (let (($x63 (= $x288 true)))
 (let (($x243 (= $x63 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x70)))
 (let (($x153 (= ?x165 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x307 (= $x153 true)))
 (let (($x251 (= $x307 true)))
 (let (($x197 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x121 (not $x197)))
 (let (($x140 (= $x121 true)))
 (let (($x289 (= $x140 true)))
 (let (($x241 (= $x289 true)))
 (let (($x291 (and $x241 $x251)))
 (let (($x175 (and $x291 $x243)))
 (let (($x14 (and $x175 $x242)))
 (let (($x274 (and $x14 $x255)))
 (let (($x228 (and $x274 $x252)))
 (let (($x276 (= (ite (or (or false (= (_ bv4 32) (_ bv4 32))) (= (_ bv4 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x38 (ite (or (or false (= (_ bv10 32) (_ bv4 32))) (= (_ bv10 32) (_ bv10 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (and (bvuge ?x38 (_ bv1 32)) $x276)))
 (let (($x90 (or (= ?x38 (_ bv0 32)) $x210)))
 (let (($x115 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x86 (and (not $x115) $x90)))
 (let (($x104 (and $x86 $x228)))
 (let (($x259 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x126 (and $x259 $x104)))
 (let (($x74 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x207 (and $x74 $x126)))
 (let (($x96 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x66 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (bvuge ?x66 (_ bv1 32))))
 (=> $x319 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x167 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x220 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x220 (_ bv1 32))))
 (let ((?x66 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (bvuge ?x66 (_ bv1 32))))
 (= $x319 $x221))))))
 ))
 (let (($x308 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x202 (= false false)))
 (let ((?x66 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x66 (_ bv0 32))))
 (=> $x151 $x202)))))
 ))
 (let (($x79 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x220 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x220 (_ bv0 32))))
 (let ((?x66 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x66 (_ bv0 32))))
 (= $x151 $x193))))))
 ))
 (let (($x147 (and $x79 $x308)))
 (let (($x287 (and $x147 $x167)))
 (let (($x229 (and $x287 $x96)))
 (let (($x150 (and $x229 $x207)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x187 (and $x47 $x150)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x122 (and $x80 $x187)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x137 (and $x19 $x122)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x136 (and $x89 $x137)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x281 (and $x32 $x136)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x106 (and $x20 $x281)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x303 (and $x78 $x106)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x43 (and $x16 $x303)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x120 (and $x7 $x43)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x302 (and $x44 $x120)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x166 (and $x30 $x302)))
 (let (($x279 (=> $x166 $x160)))
 (not $x279)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 133 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= input.spec-%var-r-0.L2%7%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x105 true)))
 (let (($x246 (= $x298 true)))
 (let ((?x292 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x292)))
 (let (($x279 (= ?x177 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x130 (= $x279 true)))
 (let (($x163 (= $x130 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x137)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x126 $x187)))
 (let (($x281 (and $x122 $x136)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x228 $x281)))
 (let (($x303 (= $x106 true)))
 (let (($x43 (= $x303 true)))
 (let (($x120 (= $x43 true)))
 (let ((?x293 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x293)))
 (let (($x283 (= ?x116 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x23 (= $x283 true)))
 (let (($x278 (= $x23 true)))
 (let (($x183 (= ?x116 input.dst.llvm-%n)))
 (let (($x255 (= $x183 true)))
 (let (($x274 (= $x255 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x145)))
 (let (($x55 (= ?x113 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x55 true)))
 (let (($x239 (= $x152 true)))
 (let (($x142 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (not $x142)))
 (let (($x139 (= $x65 true)))
 (let (($x190 (= $x139 true)))
 (let (($x223 (= $x190 true)))
 (let (($x277 (and $x223 $x239)))
 (let (($x172 (and $x277 $x274)))
 (let (($x168 (and $x172 $x278)))
 (let (($x302 (and $x168 $x120)))
 (let (($x290 (and $x302 $x163)))
 (let (($x185 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x117 (and $x185 $x290)))
 (let (($x175 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x10 (and $x175 $x117)))
 (let (($x288 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x179 (and $x288 $x10)))
 (let (($x291 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x219 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x219 (_ bv1 32))))
 (=> $x107 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x197 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x244 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x244 (_ bv1 32))))
 (let ((?x219 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x219 (_ bv1 32))))
 (= $x107 $x210))))))
 ))
 (let (($x34 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x226 (= false false)))
 (let ((?x219 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x219 (_ bv0 32))))
 (=> $x208 $x226)))))
 ))
 (let (($x97 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x244 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x244 (_ bv0 32))))
 (let ((?x219 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x219 (_ bv0 32))))
 (= $x208 $x200))))))
 ))
 (let (($x176 (and $x97 $x34)))
 (let (($x121 (and $x176 $x197)))
 (let (($x297 (and $x121 $x291)))
 (let (($x213 (and $x297 $x179)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x159 (and $x47 $x213)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x174 (and $x80 $x159)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x263 (and $x19 $x174)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x101 (and $x89 $x263)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x50 (and $x32 $x101)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x76 (and $x20 $x50)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x114 (and $x78 $x76)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x306 (and $x16 $x114)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x269 (and $x7 $x306)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x157 (and $x44 $x269)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x146 (and $x92 $x157)))
 (let (($x124 (=> $x146 $x246)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= input.spec-%var-r-0.L2%7%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x105 true)))
 (let (($x246 (= $x298 true)))
 (let ((?x292 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x292)))
 (let (($x279 (= ?x177 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x130 (= $x279 true)))
 (let (($x163 (= $x130 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x137)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x126 $x187)))
 (let (($x281 (and $x122 $x136)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x228 $x281)))
 (let (($x303 (= $x106 true)))
 (let (($x43 (= $x303 true)))
 (let (($x120 (= $x43 true)))
 (let ((?x293 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x293)))
 (let (($x283 (= ?x116 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x23 (= $x283 true)))
 (let (($x278 (= $x23 true)))
 (let (($x183 (= ?x116 input.dst.llvm-%n)))
 (let (($x255 (= $x183 true)))
 (let (($x274 (= $x255 true)))
 (let ((?x145 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x145)))
 (let (($x55 (= ?x113 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x55 true)))
 (let (($x239 (= $x152 true)))
 (let (($x142 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (not $x142)))
 (let (($x139 (= $x65 true)))
 (let (($x190 (= $x139 true)))
 (let (($x223 (= $x190 true)))
 (let (($x277 (and $x223 $x239)))
 (let (($x172 (and $x277 $x274)))
 (let (($x168 (and $x172 $x278)))
 (let (($x302 (and $x168 $x120)))
 (let (($x290 (and $x302 $x163)))
 (let (($x185 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x117 (and $x185 $x290)))
 (let (($x175 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x10 (and $x175 $x117)))
 (let (($x288 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x179 (and $x288 $x10)))
 (let (($x291 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x219 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x219 (_ bv1 32))))
 (=> $x107 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x197 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x244 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x244 (_ bv1 32))))
 (let ((?x219 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x219 (_ bv1 32))))
 (= $x107 $x210))))))
 ))
 (let (($x34 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x226 (= false false)))
 (let ((?x219 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x219 (_ bv0 32))))
 (=> $x208 $x226)))))
 ))
 (let (($x97 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x244 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x244 (_ bv0 32))))
 (let ((?x219 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x219 (_ bv0 32))))
 (= $x208 $x200))))))
 ))
 (let (($x176 (and $x97 $x34)))
 (let (($x121 (and $x176 $x197)))
 (let (($x297 (and $x121 $x291)))
 (let (($x213 (and $x297 $x179)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x159 (and $x47 $x213)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x174 (and $x80 $x159)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x263 (and $x19 $x174)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x101 (and $x89 $x263)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x50 (and $x32 $x101)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x76 (and $x20 $x50)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x114 (and $x78 $x76)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x306 (and $x16 $x114)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x269 (and $x7 $x306)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x157 (and $x44 $x269)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x146 (and $x92 $x157)))
 (let (($x124 (=> $x146 $x246)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 128 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x125 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (not $x125)))
 (let (($x191 (or $x125 $x56)))
 (let (($x214 (= $x191 true)))
 (let (($x276 (= $x214 true)))
 (let ((?x167 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x167)))
 (let (($x61 (= ?x287 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x61 true)))
 (let (($x193 (= $x202 true)))
 (let ((?x279 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x279)))
 (let (($x275 (= ?x130 input.dst.llvm-%n)))
 (let (($x66 (= $x275 true)))
 (let (($x151 (= $x66 true)))
 (let ((?x306 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x306)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x263 $x76)))
 (let (($x157 (and $x114 $x269)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x159 $x157)))
 (let (($x105 (= $x146 true)))
 (let (($x298 (= $x105 true)))
 (let (($x246 (= $x298 true)))
 (let (($x163 (= ?x130 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x290 (= $x163 true)))
 (let (($x117 (= $x290 true)))
 (let ((?x120 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x120)))
 (let (($x292 (= ?x302 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x292 true)))
 (let (($x160 (= $x177 true)))
 (let (($x10 (and $x160 $x117)))
 (let (($x124 (and $x10 $x246)))
 (let (($x220 (and $x124 $x151)))
 (let (($x77 (and $x220 $x193)))
 (let (($x106 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x79 (and $x106 $x77)))
 (let (($x137 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x72 (and $x137 $x79)))
 (let (($x150 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x242 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x242 (_ bv1 32))))
 (=> $x255 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x172 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x251 (_ bv1 32))))
 (let ((?x242 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x242 (_ bv1 32))))
 (= $x255 $x293))))))
 ))
 (let (($x51 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x139 (= false false)))
 (let ((?x242 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x242 (_ bv0 32))))
 (=> $x14 $x139)))))
 ))
 (let (($x65 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x218 (= ?x251 (_ bv0 32))))
 (let ((?x242 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x242 (_ bv0 32))))
 (= $x14 $x218))))))
 ))
 (let (($x145 (and $x65 $x51)))
 (let (($x283 (and $x145 $x172)))
 (let (($x187 (and $x283 $x150)))
 (let (($x308 (and $x187 $x72)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x147 (and $x47 $x308)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x319 (and $x80 $x147)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x221 (and $x19 $x319)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x96 (and $x89 $x221)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x299 (and $x32 $x96)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x229 (and $x20 $x299)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x74 (and $x78 $x229)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x272 (and $x16 $x74)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x5 (and $x7 $x272)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x259 (and $x44 $x5)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x38 (and $x92 $x259)))
 (let (($x90 (=> $x38 $x276)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x125 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (not $x125)))
 (let (($x191 (or $x125 $x56)))
 (let (($x214 (= $x191 true)))
 (let (($x276 (= $x214 true)))
 (let ((?x167 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x167)))
 (let (($x61 (= ?x287 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x61 true)))
 (let (($x193 (= $x202 true)))
 (let ((?x279 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x279)))
 (let (($x275 (= ?x130 input.dst.llvm-%n)))
 (let (($x66 (= $x275 true)))
 (let (($x151 (= $x66 true)))
 (let ((?x306 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x306)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x263 $x76)))
 (let (($x157 (and $x114 $x269)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x159 $x157)))
 (let (($x105 (= $x146 true)))
 (let (($x298 (= $x105 true)))
 (let (($x246 (= $x298 true)))
 (let (($x163 (= ?x130 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x290 (= $x163 true)))
 (let (($x117 (= $x290 true)))
 (let ((?x120 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x120)))
 (let (($x292 (= ?x302 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x292 true)))
 (let (($x160 (= $x177 true)))
 (let (($x10 (and $x160 $x117)))
 (let (($x124 (and $x10 $x246)))
 (let (($x220 (and $x124 $x151)))
 (let (($x77 (and $x220 $x193)))
 (let (($x106 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x79 (and $x106 $x77)))
 (let (($x137 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x72 (and $x137 $x79)))
 (let (($x150 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x242 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x242 (_ bv1 32))))
 (=> $x255 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x172 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x251 (_ bv1 32))))
 (let ((?x242 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x242 (_ bv1 32))))
 (= $x255 $x293))))))
 ))
 (let (($x51 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x139 (= false false)))
 (let ((?x242 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x242 (_ bv0 32))))
 (=> $x14 $x139)))))
 ))
 (let (($x65 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x251 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x218 (= ?x251 (_ bv0 32))))
 (let ((?x242 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (= ?x242 (_ bv0 32))))
 (= $x14 $x218))))))
 ))
 (let (($x145 (and $x65 $x51)))
 (let (($x283 (and $x145 $x172)))
 (let (($x187 (and $x283 $x150)))
 (let (($x308 (and $x187 $x72)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x147 (and $x47 $x308)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x319 (and $x80 $x147)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x221 (and $x19 $x319)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x96 (and $x89 $x221)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x299 (and $x32 $x96)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x229 (and $x20 $x299)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x74 (and $x78 $x229)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x272 (and $x16 $x74)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x5 (and $x7 $x272)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x259 (and $x44 $x5)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x38 (and $x92 $x259)))
 (let (($x90 (=> $x38 $x276)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 122 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x299 (= (_ bv0 32) ?x96)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x319 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x72 $x319)))
 (let (($x229 (and $x221 $x299)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x202 $x229)))
 (let (($x152 (= $x55 true)))
 (let (($x239 (= $x152 true)))
 (let ((?x259 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x115 (concat ?x276 (concat ?x125 ?x259)))))
 (let (($x226 (= ?x219 input.dst.llvm-%n)))
 (let (($x200 (= $x226 true)))
 (let (($x271 (= $x200 true)))
 (let (($x208 (= input.dst.llvm-%n ?x219)))
 (let (($x197 (and (and (and $x202 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x229) $x208)))
 (let (($x121 (= $x197 true)))
 (let (($x153 (= $x121 true)))
 (let (($x295 (= $x153 true)))
 (let (($x97 (and $x295 $x271)))
 (let (($x287 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x144 (and $x287 $x97)))
 (let (($x220 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x34 (and $x220 $x144)))
 (let (($x275 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x120 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x120 (_ bv1 32))))
 (=> $x101 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x76 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x207 (_ bv1 32))))
 (let ((?x120 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x120 (_ bv1 32))))
 (= $x101 $x159))))))
 ))
 (let (($x130 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x177 (= false false)))
 (let ((?x120 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x120 (_ bv0 32))))
 (=> $x302 $x177)))))
 ))
 (let (($x292 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x207 (_ bv0 32))))
 (let ((?x120 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x120 (_ bv0 32))))
 (= $x302 $x122))))))
 ))
 (let (($x163 (and $x292 $x130)))
 (let (($x114 (and $x163 $x76)))
 (let (($x66 (and $x114 $x275)))
 (let (($x176 (and $x66 $x34)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x107 (and $x47 $x176)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x210 (and $x80 $x107)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x291 (and $x19 $x210)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x307 (and $x89 $x291)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x297 (and $x32 $x307)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x288 (and $x20 $x297)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x63 (and $x78 $x288)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x243 (and $x16 $x63)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x175 (and $x7 $x243)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x190 (and $x44 $x175)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x113 (and $x92 $x190)))
 (let (($x277 (=> $x113 $x239)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x299 (= (_ bv0 32) ?x96)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x319 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x72 $x319)))
 (let (($x229 (and $x221 $x299)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x202 $x229)))
 (let (($x152 (= $x55 true)))
 (let (($x239 (= $x152 true)))
 (let ((?x259 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x115 (concat ?x276 (concat ?x125 ?x259)))))
 (let (($x226 (= ?x219 input.dst.llvm-%n)))
 (let (($x200 (= $x226 true)))
 (let (($x271 (= $x200 true)))
 (let (($x208 (= input.dst.llvm-%n ?x219)))
 (let (($x197 (and (and (and $x202 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x229) $x208)))
 (let (($x121 (= $x197 true)))
 (let (($x153 (= $x121 true)))
 (let (($x295 (= $x153 true)))
 (let (($x97 (and $x295 $x271)))
 (let (($x287 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x144 (and $x287 $x97)))
 (let (($x220 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x34 (and $x220 $x144)))
 (let (($x275 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x120 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x120 (_ bv1 32))))
 (=> $x101 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x76 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x207 (_ bv1 32))))
 (let ((?x120 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x120 (_ bv1 32))))
 (= $x101 $x159))))))
 ))
 (let (($x130 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x177 (= false false)))
 (let ((?x120 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x120 (_ bv0 32))))
 (=> $x302 $x177)))))
 ))
 (let (($x292 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x207 (_ bv0 32))))
 (let ((?x120 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x120 (_ bv0 32))))
 (= $x302 $x122))))))
 ))
 (let (($x163 (and $x292 $x130)))
 (let (($x114 (and $x163 $x76)))
 (let (($x66 (and $x114 $x275)))
 (let (($x176 (and $x66 $x34)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x107 (and $x47 $x176)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x210 (and $x80 $x107)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x291 (and $x19 $x210)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x307 (and $x89 $x291)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x297 (and $x32 $x307)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x288 (and $x20 $x297)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x63 (and $x78 $x288)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x243 (and $x16 $x63)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x175 (and $x7 $x243)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x190 (and $x44 $x175)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x113 (and $x92 $x190)))
 (let (($x277 (=> $x113 $x239)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x157)))
 (let (($x105 (= ?x146 input.dst.llvm-%n)))
 (let (($x298 (= $x105 true)))
 (let ((?x272 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x227 (concat ?x104 (concat ?x274 (concat ?x185 ?x272)))))
 (let (($x255 (= ?x227 input.dst.llvm-%n)))
 (let (($x293 (= $x255 true)))
 (let (($x150 (= $x293 true)))
 (let (($x139 (= input.dst.llvm-%n ?x227)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x113)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x243)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x288 $x175)))
 (let (($x152 (and $x190 $x55)))
 (let (($x307 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and (and (and $x210 $x307) $x152) $x139)))
 (let (($x223 (= $x65 true)))
 (let (($x51 (= $x223 true)))
 (let (($x145 (= $x51 true)))
 (let (($x126 (and $x145 $x150)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x187 (and $x34 $x126)))
 (let (($x271 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x137 (and $x271 $x187)))
 (let (($x295 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x202 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x202 (_ bv1 32))))
 (=> $x191 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x276 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x57 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x57 (_ bv1 32))))
 (let ((?x202 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x202 (_ bv1 32))))
 (= $x191 $x74))))))
 ))
 (let (($x147 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x79 (= false false)))
 (let ((?x202 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x202 (_ bv0 32))))
 (=> $x193 $x79)))))
 ))
 (let (($x244 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x57 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x57 (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x202 (_ bv0 32))))
 (= $x193 $x151))))))
 ))
 (let (($x319 (and $x244 $x147)))
 (let (($x38 (and $x319 $x276)))
 (let (($x226 (and $x38 $x295)))
 (let (($x136 (and $x226 $x137)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x281 (and $x47 $x136)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x106 (and $x80 $x281)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x160 (and $x19 $x106)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x290 (and $x89 $x160)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x117 (and $x32 $x290)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x10 (and $x20 $x117)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x179 (and $x78 $x10)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x213 (and $x16 $x179)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x174 (and $x7 $x213)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x263 (and $x44 $x174)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x306 (and $x92 $x263)))
 (let (($x183 (=> $x306 $x298)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x157)))
 (let (($x105 (= ?x146 input.dst.llvm-%n)))
 (let (($x298 (= $x105 true)))
 (let ((?x272 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x227 (concat ?x104 (concat ?x274 (concat ?x185 ?x272)))))
 (let (($x255 (= ?x227 input.dst.llvm-%n)))
 (let (($x293 (= $x255 true)))
 (let (($x150 (= $x293 true)))
 (let (($x139 (= input.dst.llvm-%n ?x227)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x113)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x243)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x288 $x175)))
 (let (($x152 (and $x190 $x55)))
 (let (($x307 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and (and (and $x210 $x307) $x152) $x139)))
 (let (($x223 (= $x65 true)))
 (let (($x51 (= $x223 true)))
 (let (($x145 (= $x51 true)))
 (let (($x126 (and $x145 $x150)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x187 (and $x34 $x126)))
 (let (($x271 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x137 (and $x271 $x187)))
 (let (($x295 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x202 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x202 (_ bv1 32))))
 (=> $x191 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x276 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x57 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x57 (_ bv1 32))))
 (let ((?x202 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x202 (_ bv1 32))))
 (= $x191 $x74))))))
 ))
 (let (($x147 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x79 (= false false)))
 (let ((?x202 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x202 (_ bv0 32))))
 (=> $x193 $x79)))))
 ))
 (let (($x244 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x57 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x57 (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x202 (_ bv0 32))))
 (= $x193 $x151))))))
 ))
 (let (($x319 (and $x244 $x147)))
 (let (($x38 (and $x319 $x276)))
 (let (($x226 (and $x38 $x295)))
 (let (($x136 (and $x226 $x137)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x281 (and $x47 $x136)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x106 (and $x80 $x281)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x160 (and $x19 $x106)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x290 (and $x89 $x160)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x117 (and $x32 $x290)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x10 (and $x20 $x117)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x179 (and $x78 $x10)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x213 (and $x16 $x179)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x174 (and $x7 $x213)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x263 (and $x44 $x174)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x306 (and $x92 $x263)))
 (let (($x183 (=> $x306 $x298)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x259 (bvneg ?x125)))
 (let (($x56 (= ?x259 input.spec-%var-n-1)))
 (let (($x90 (= $x56 true)))
 (let ((?x290 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x146 (concat ?x263 (concat ?x10 ?x290)))))
 (let (($x122 (= input.dst.llvm-%n ?x105)))
 (let ((?x246 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x303 (= (_ bv0 32) ?x246)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x207 $x76)))
 (let (($x177 (and $x114 $x303)))
 (let (($x120 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and (and (and $x43 $x120) $x177) $x122)))
 (let (($x130 (= $x279 true)))
 (let (($x163 (= $x130 true)))
 (let (($x101 (= $x163 true)))
 (let (($x183 (= ?x105 input.dst.llvm-%n)))
 (let (($x23 (= $x183 true)))
 (let (($x277 (= $x23 true)))
 (let (($x159 (and $x277 $x101)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x275 (and $x137 $x159)))
 (let (($x150 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x124 (and $x150 $x275)))
 (let (($x145 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x210 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x210 (_ bv1 32))))
 (=> $x14 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x274 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x153 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x153 (_ bv1 32))))
 (let ((?x210 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x210 (_ bv1 32))))
 (= $x14 $x239))))))
 ))
 (let (($x243 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x210 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x210 (_ bv0 32))))
 (=> $x291 $x297)))))
 ))
 (let (($x218 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x153 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x153 (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x210 (_ bv0 32))))
 (= $x291 $x200))))))
 ))
 (let (($x175 (and $x218 $x243)))
 (let (($x5 (and $x175 $x274)))
 (let (($x255 (and $x5 $x145)))
 (let (($x66 (and $x255 $x124)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x220 (and $x47 $x66)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x13 (and $x80 $x220)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x167 (and $x19 $x13)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x287 (and $x89 $x167)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x72 (and $x32 $x287)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x221 (and $x20 $x72)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x96 (and $x78 $x221)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x299 (and $x16 $x96)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x229 (and $x7 $x299)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x238 (and $x44 $x229)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x86 (and $x92 $x238)))
 (let (($x219 (=> $x86 $x90)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x259 (bvneg ?x125)))
 (let (($x56 (= ?x259 input.spec-%var-n-1)))
 (let (($x90 (= $x56 true)))
 (let ((?x290 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x146 (concat ?x263 (concat ?x10 ?x290)))))
 (let (($x122 (= input.dst.llvm-%n ?x105)))
 (let ((?x246 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x303 (= (_ bv0 32) ?x246)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x207 $x76)))
 (let (($x177 (and $x114 $x303)))
 (let (($x120 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and (and (and $x43 $x120) $x177) $x122)))
 (let (($x130 (= $x279 true)))
 (let (($x163 (= $x130 true)))
 (let (($x101 (= $x163 true)))
 (let (($x183 (= ?x105 input.dst.llvm-%n)))
 (let (($x23 (= $x183 true)))
 (let (($x277 (= $x23 true)))
 (let (($x159 (and $x277 $x101)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x275 (and $x137 $x159)))
 (let (($x150 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x124 (and $x150 $x275)))
 (let (($x145 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x210 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x210 (_ bv1 32))))
 (=> $x14 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x274 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x153 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x153 (_ bv1 32))))
 (let ((?x210 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x210 (_ bv1 32))))
 (= $x14 $x239))))))
 ))
 (let (($x243 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x210 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x210 (_ bv0 32))))
 (=> $x291 $x297)))))
 ))
 (let (($x218 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x153 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x153 (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x210 (_ bv0 32))))
 (= $x291 $x200))))))
 ))
 (let (($x175 (and $x218 $x243)))
 (let (($x5 (and $x175 $x274)))
 (let (($x255 (and $x5 $x145)))
 (let (($x66 (and $x255 $x124)))
 (let (($x47 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x220 (and $x47 $x66)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x13 (and $x80 $x220)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x167 (and $x19 $x13)))
 (let (($x89 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x287 (and $x89 $x167)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x72 (and $x32 $x287)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x221 (and $x20 $x72)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x96 (and $x78 $x221)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x299 (and $x16 $x96)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x229 (and $x7 $x299)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x238 (and $x44 $x229)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x86 (and $x92 $x238)))
 (let (($x219 (=> $x86 $x90)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888422/query
