==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (= true false)))
 (let (($x134 (= $x133 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x111 (concat ?x107 ?x105)))))
 (let (($x116 (= ?x115 input.dst.llvm-%n)))
 (let (($x117 (= $x116 true)))
 (let (($x99 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x91)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x86 $x89)))
 (let (($x93 (and $x90 $x92)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x72 $x93)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x79)))))))
 (let (($x95 (and $x85 $x94)))
 (let (($x96 (= $x95 true)))
 (let (($x97 (= $x96 true)))
 (let (($x102 (and $x97 $x101)))
 (let (($x118 (and $x102 $x117)))
 (let (($x68 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x119 (and $x68 $x118)))
 (let (($x65 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x120 (and $x65 $x119)))
 (let (($x62 (forall ((Lambda32 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x37 (_ bv1 32))))
 (=> $x51 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x53 (forall ((Lambda32 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x37 (_ bv1 32))))
 (= $x51 false)))))
 ))
 (let (($x45 (forall ((Lambda32 (_ BitVec 32)) )(let (($x7 (= false false)))
 (let (($x17 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x37 (_ bv0 32))))
 (=> $x9 $x7))))))
 ))
 (let (($x32 (forall ((Lambda32 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x37 (_ bv0 32))))
 (= $x9 true)))))
 ))
 (let (($x31 (and $x32 $x45)))
 (let (($x54 (and $x31 $x53)))
 (let (($x63 (and $x54 $x62)))
 (let (($x121 (and $x63 $x120)))
 (let (($x42 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x122 (and $x42 $x121)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x123 (and $x29 $x122)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x124 (and $x27 $x123)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x125 (and $x46 $x124)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x126 (and $x35 $x125)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x127 (and $x41 $x126)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x128 (and $x44 $x127)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x129 (and $x24 $x128)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x130 (and $x34 $x129)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x131 (and $x21 $x130)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x132 (and $x13 $x131)))
 (let (($x135 (=> $x132 $x134)))
 (not $x135))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (= true false)))
 (let (($x134 (= $x133 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x111 (concat ?x107 ?x105)))))
 (let (($x116 (= ?x115 input.dst.llvm-%n)))
 (let (($x117 (= $x116 true)))
 (let (($x99 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x91)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x86 $x89)))
 (let (($x93 (and $x90 $x92)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x72 $x93)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x79)))))))
 (let (($x95 (and $x85 $x94)))
 (let (($x96 (= $x95 true)))
 (let (($x97 (= $x96 true)))
 (let (($x102 (and $x97 $x101)))
 (let (($x118 (and $x102 $x117)))
 (let (($x68 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x119 (and $x68 $x118)))
 (let (($x65 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x120 (and $x65 $x119)))
 (let (($x62 (forall ((Lambda32 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x37 (_ bv1 32))))
 (=> $x51 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x53 (forall ((Lambda32 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x37 (_ bv1 32))))
 (= $x51 false)))))
 ))
 (let (($x45 (forall ((Lambda32 (_ BitVec 32)) )(let (($x7 (= false false)))
 (let (($x17 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x37 (_ bv0 32))))
 (=> $x9 $x7))))))
 ))
 (let (($x32 (forall ((Lambda32 (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x37 (_ bv0 32))))
 (= $x9 true)))))
 ))
 (let (($x31 (and $x32 $x45)))
 (let (($x54 (and $x31 $x53)))
 (let (($x63 (and $x54 $x62)))
 (let (($x121 (and $x63 $x120)))
 (let (($x42 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x122 (and $x42 $x121)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x123 (and $x29 $x122)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x124 (and $x27 $x123)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x125 (and $x46 $x124)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x126 (and $x35 $x125)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x127 (and $x41 $x126)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x128 (and $x44 $x127)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x129 (and $x24 $x128)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x130 (and $x34 $x129)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x131 (and $x21 $x130)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x132 (and $x13 $x131)))
 (let (($x135 (=> $x132 $x134)))
 (not $x135))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb405964)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb405967)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb405964)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x110)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x102 $x114)))
 (let (($x106 (and $x109 $x111)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x101 $x106)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x93)))))))
 (let (($x14 (and $x99 $x107)))
 (let (($x40 (= $x14 true)))
 (let (($x49 (= $x40 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x123 (concat ?x120 (concat ?x116 ?x112)))))
 (let (($x125 (= input.dst.llvm-%n ?x124)))
 (let (($x128 (and (and (and $x99 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x107) $x125)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x131 (and $x83 $x130)))
 (let (($x80 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x132 (and $x80 $x131)))
 (let (($x78 (forall ((Lambda32 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x56 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x56 (_ bv1 32))))
 (=> $x67 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x7 (forall ((Lambda32 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x56 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x56 (_ bv1 32))))
 (= $x67 false)))))
 ))
 (let (($x48 (forall ((Lambda32 (_ BitVec 32)) )(let (($x9 (= false false)))
 (let (($x5 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x56 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x56 (_ bv0 32))))
 (=> $x61 $x9))))))
 ))
 (let (($x32 (forall ((Lambda32 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x56 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x56 (_ bv0 32))))
 (= $x61 true)))))
 ))
 (let (($x45 (and $x32 $x48)))
 (let (($x26 (and $x45 $x7)))
 (let (($x76 (and $x26 $x78)))
 (let (($x133 (and $x76 $x132)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x134 (and $x18 $x133)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x135 (and $x42 $x134)))
 (let (($x41 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x136 (and $x41 $x135)))
 (let (($x68 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x70 (and $x68 $x136)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x104 (and $x30 $x70)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x11 (and $x46 $x104)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x57 (and $x37 $x11)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x12 (and $x29 $x57)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x28 (and $x6 $x12)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x10 (and $x23 $x28)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x36 (and $x8 $x10)))
 (let (($x50 (=> $x36 $x49)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x110)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x102 $x114)))
 (let (($x106 (and $x109 $x111)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x101 $x106)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x93)))))))
 (let (($x14 (and $x99 $x107)))
 (let (($x40 (= $x14 true)))
 (let (($x49 (= $x40 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x123 (concat ?x120 (concat ?x116 ?x112)))))
 (let (($x125 (= input.dst.llvm-%n ?x124)))
 (let (($x128 (and (and (and $x99 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x107) $x125)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x131 (and $x83 $x130)))
 (let (($x80 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x132 (and $x80 $x131)))
 (let (($x78 (forall ((Lambda32 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x56 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x56 (_ bv1 32))))
 (=> $x67 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x7 (forall ((Lambda32 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x56 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x56 (_ bv1 32))))
 (= $x67 false)))))
 ))
 (let (($x48 (forall ((Lambda32 (_ BitVec 32)) )(let (($x9 (= false false)))
 (let (($x5 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x56 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x56 (_ bv0 32))))
 (=> $x61 $x9))))))
 ))
 (let (($x32 (forall ((Lambda32 (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x56 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x56 (_ bv0 32))))
 (= $x61 true)))))
 ))
 (let (($x45 (and $x32 $x48)))
 (let (($x26 (and $x45 $x7)))
 (let (($x76 (and $x26 $x78)))
 (let (($x133 (and $x76 $x132)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x134 (and $x18 $x133)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x135 (and $x42 $x134)))
 (let (($x41 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x136 (and $x41 $x135)))
 (let (($x68 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x70 (and $x68 $x136)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x104 (and $x30 $x70)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x11 (and $x46 $x104)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x57 (and $x37 $x11)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x12 (and $x29 $x57)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x28 (and $x6 $x12)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x10 (and $x23 $x28)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x36 (and $x8 $x10)))
 (let (($x50 (=> $x36 $x49)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x54 (= $x47 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x11 (concat ?x136 (concat ?x132 ?x130)))))
 (let (($x12 (= input.dst.llvm-%n ?x57)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x117)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x119 $x116)))
 (let (($x124 (and $x112 $x121)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x118 $x124)))
 (let (($x100 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x110)))))))
 (let (($x36 (and (and (and $x122 $x100) $x125) $x12)))
 (let (($x14 (= $x36 true)))
 (let (($x40 (= $x14 true)))
 (let (($x99 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x49 (and $x99 $x40)))
 (let (($x95 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x50 (and $x95 $x49)))
 (let (($x90 (forall ((Lambda32 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x48 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x48 (_ bv1 32))))
 (=> $x79 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x81 (forall ((Lambda32 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x48 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x48 (_ bv1 32))))
 (= $x79 false)))))
 ))
 (let (($x75 (forall ((Lambda32 (_ BitVec 32)) )(let (($x7 (= false false)))
 (let (($x61 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x48 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x48 (_ bv0 32))))
 (=> $x45 $x7))))))
 ))
 (let (($x33 (forall ((Lambda32 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x48 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x48 (_ bv0 32))))
 (= $x45 true)))))
 ))
 (let (($x77 (and $x33 $x75)))
 (let (($x82 (and $x77 $x81)))
 (let (($x93 (and $x82 $x90)))
 (let (($x55 (and $x93 $x50)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x85 (and $x18 $x55)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x71 (and $x42 $x85)))
 (let (($x41 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x108 (and $x41 $x71)))
 (let (($x68 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x19 (and $x68 $x108)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x17 (and $x30 $x19)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x73 (and $x46 $x17)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x25 (and $x37 $x73)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x43 (and $x29 $x25)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x51 (and $x6 $x43)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x63 (and $x23 $x51)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x31 (and $x8 $x63)))
 (let (($x44 (=> $x31 $x54)))
 (not $x44)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x54 (= $x47 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x11 (concat ?x136 (concat ?x132 ?x130)))))
 (let (($x12 (= input.dst.llvm-%n ?x57)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x117)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x119 $x116)))
 (let (($x124 (and $x112 $x121)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x118 $x124)))
 (let (($x100 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x110)))))))
 (let (($x36 (and (and (and $x122 $x100) $x125) $x12)))
 (let (($x14 (= $x36 true)))
 (let (($x40 (= $x14 true)))
 (let (($x99 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x49 (and $x99 $x40)))
 (let (($x95 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x50 (and $x95 $x49)))
 (let (($x90 (forall ((Lambda32 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x48 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x48 (_ bv1 32))))
 (=> $x79 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x81 (forall ((Lambda32 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x48 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x48 (_ bv1 32))))
 (= $x79 false)))))
 ))
 (let (($x75 (forall ((Lambda32 (_ BitVec 32)) )(let (($x7 (= false false)))
 (let (($x61 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x48 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x48 (_ bv0 32))))
 (=> $x45 $x7))))))
 ))
 (let (($x33 (forall ((Lambda32 (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x48 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x48 (_ bv0 32))))
 (= $x45 true)))))
 ))
 (let (($x77 (and $x33 $x75)))
 (let (($x82 (and $x77 $x81)))
 (let (($x93 (and $x82 $x90)))
 (let (($x55 (and $x93 $x50)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x85 (and $x18 $x55)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x71 (and $x42 $x85)))
 (let (($x41 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x108 (and $x41 $x71)))
 (let (($x68 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x19 (and $x68 $x108)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x17 (and $x30 $x19)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x73 (and $x46 $x17)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x25 (and $x37 $x73)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x43 (and $x29 $x25)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x51 (and $x6 $x43)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x63 (and $x23 $x51)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x31 (and $x8 $x63)))
 (let (($x44 (=> $x31 $x54)))
 (not $x44)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x83)))
 (let (($x89 (= ?x98 input.dst.llvm-%n)))
 (let (($x84 (= $x89 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x73 (concat ?x108 (concat ?x50 ?x40)))))
 (let (($x43 (= input.dst.llvm-%n ?x25)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x133)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x135 $x132)))
 (let (($x57 (and $x130 $x70)))
 (let (($x134 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x134 $x57)))
 (let (($x123 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x117)))))))
 (let (($x31 (and (and (and $x104 $x123) $x12) $x43)))
 (let (($x47 (= $x31 true)))
 (let (($x54 (= $x47 true)))
 (let (($x122 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x44 (and $x122 $x54)))
 (let (($x106 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x74 (and $x106 $x44)))
 (let (($x113 (forall ((Lambda32 (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x60 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x60 (_ bv1 32))))
 (=> $x93 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x95 (forall ((Lambda32 (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x60 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x60 (_ bv1 32))))
 (= $x93 false)))))
 ))
 (let (($x87 (forall ((Lambda32 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x48 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x60 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x60 (_ bv0 32))))
 (=> $x75 $x80))))))
 ))
 (let (($x79 (forall ((Lambda32 (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x60 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x60 (_ bv0 32))))
 (= $x75 true)))))
 ))
 (let (($x91 (and $x79 $x87)))
 (let (($x97 (and $x91 $x95)))
 (let (($x110 (and $x97 $x113)))
 (let (($x72 (and $x110 $x74)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x86 (and $x34 $x72)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x129 (and $x52 $x86)))
 (let (($x39 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x64 (and $x39 $x129)))
 (let (($x65 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x35 (and $x65 $x64)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x88 (and $x27 $x35)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x5 (and $x15 $x88)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x32 (and $x22 $x5)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x9 (and $x21 $x32)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x53 (and $x69 $x9)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x26 (and $x8 $x53)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x78 (and $x96 $x26)))
 (let (($x58 (=> $x78 $x84)))
 (not $x58)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x83)))
 (let (($x89 (= ?x98 input.dst.llvm-%n)))
 (let (($x84 (= $x89 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x73 (concat ?x108 (concat ?x50 ?x40)))))
 (let (($x43 (= input.dst.llvm-%n ?x25)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x133)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x135 $x132)))
 (let (($x57 (and $x130 $x70)))
 (let (($x134 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x134 $x57)))
 (let (($x123 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x117)))))))
 (let (($x31 (and (and (and $x104 $x123) $x12) $x43)))
 (let (($x47 (= $x31 true)))
 (let (($x54 (= $x47 true)))
 (let (($x122 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x44 (and $x122 $x54)))
 (let (($x106 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x74 (and $x106 $x44)))
 (let (($x113 (forall ((Lambda32 (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x60 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x60 (_ bv1 32))))
 (=> $x93 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x95 (forall ((Lambda32 (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x60 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x60 (_ bv1 32))))
 (= $x93 false)))))
 ))
 (let (($x87 (forall ((Lambda32 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x48 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x60 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x60 (_ bv0 32))))
 (=> $x75 $x80))))))
 ))
 (let (($x79 (forall ((Lambda32 (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x60 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x60 (_ bv0 32))))
 (= $x75 true)))))
 ))
 (let (($x91 (and $x79 $x87)))
 (let (($x97 (and $x91 $x95)))
 (let (($x110 (and $x97 $x113)))
 (let (($x72 (and $x110 $x74)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x86 (and $x34 $x72)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x129 (and $x52 $x86)))
 (let (($x39 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x64 (and $x39 $x129)))
 (let (($x65 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x35 (and $x65 $x64)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x88 (and $x27 $x35)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x5 (and $x15 $x88)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x32 (and $x22 $x5)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x9 (and $x21 $x32)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x53 (and $x69 $x9)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x26 (and $x8 $x53)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x78 (and $x96 $x26)))
 (let (($x58 (=> $x78 $x84)))
 (not $x58)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x81 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x81)))
 (let (($x90 (= ?x92 input.spec-%var-n-1)))
 (let (($x99 (= $x90 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x5 (concat ?x64 (concat ?x74 ?x54)))))
 (let (($x9 (= input.dst.llvm-%n ?x32)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x55)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x71 $x50)))
 (let (($x25 (and $x40 $x19)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x85 $x25)))
 (let (($x11 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x130 $x133)))))))
 (let (($x78 (and (and (and $x17 $x11) $x43) $x9)))
 (let (($x76 (= $x78 true)))
 (let (($x83 (= $x76 true)))
 (let (($x104 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x98 (and $x104 $x83)))
 (let (($x124 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x89 (and $x124 $x98)))
 (let (($x115 (forall ((Lambda32 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x87 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x87 (_ bv1 32))))
 (=> $x111 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x107 (forall ((Lambda32 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x87 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x87 (_ bv1 32))))
 (= $x111 false)))))
 ))
 (let (($x114 (forall ((Lambda32 (_ BitVec 32)) )(let (($x95 (= false false)))
 (let (($x75 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x87 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (= ?x87 (_ bv0 32))))
 (=> $x91 $x95))))))
 ))
 (let (($x94 (forall ((Lambda32 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x87 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (= ?x87 (_ bv0 32))))
 (= $x91 true)))))
 ))
 (let (($x109 (and $x94 $x114)))
 (let (($x127 (and $x109 $x107)))
 (let (($x117 (and $x127 $x115)))
 (let (($x84 (and $x117 $x89)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x58 (and $x34 $x84)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x59 (and $x52 $x58)))
 (let (($x39 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x126 (and $x39 $x59)))
 (let (($x65 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x100 (and $x65 $x126)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x14 (and $x27 $x100)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x45 (and $x15 $x14)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x18 (and $x22 $x45)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x102 (and $x21 $x18)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x56 (and $x69 $x102)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x67 (and $x8 $x56)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x33 (and $x96 $x67)))
 (let (($x105 (=> $x33 $x99)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x81 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x81)))
 (let (($x90 (= ?x92 input.spec-%var-n-1)))
 (let (($x99 (= $x90 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x5 (concat ?x64 (concat ?x74 ?x54)))))
 (let (($x9 (= input.dst.llvm-%n ?x32)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x55)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x71 $x50)))
 (let (($x25 (and $x40 $x19)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x85 $x25)))
 (let (($x11 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x130 $x133)))))))
 (let (($x78 (and (and (and $x17 $x11) $x43) $x9)))
 (let (($x76 (= $x78 true)))
 (let (($x83 (= $x76 true)))
 (let (($x104 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x98 (and $x104 $x83)))
 (let (($x124 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x89 (and $x124 $x98)))
 (let (($x115 (forall ((Lambda32 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x87 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x87 (_ bv1 32))))
 (=> $x111 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x107 (forall ((Lambda32 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x87 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x87 (_ bv1 32))))
 (= $x111 false)))))
 ))
 (let (($x114 (forall ((Lambda32 (_ BitVec 32)) )(let (($x95 (= false false)))
 (let (($x75 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x87 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (= ?x87 (_ bv0 32))))
 (=> $x91 $x95))))))
 ))
 (let (($x94 (forall ((Lambda32 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x87 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (= ?x87 (_ bv0 32))))
 (= $x91 true)))))
 ))
 (let (($x109 (and $x94 $x114)))
 (let (($x127 (and $x109 $x107)))
 (let (($x117 (and $x127 $x115)))
 (let (($x84 (and $x117 $x89)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x58 (and $x34 $x84)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x59 (and $x52 $x58)))
 (let (($x39 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x126 (and $x39 $x59)))
 (let (($x65 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x100 (and $x65 $x126)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x14 (and $x27 $x100)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x45 (and $x15 $x14)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x18 (and $x22 $x45)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x102 (and $x21 $x18)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x56 (and $x69 $x102)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x67 (and $x8 $x56)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x33 (and $x96 $x67)))
 (let (($x105 (=> $x33 $x99)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x97 (= $x82 true)))
 (let (($x113 (= $x97 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x14 (concat ?x59 (concat ?x98 ?x76)))))
 (let (($x18 (= input.dst.llvm-%n ?x45)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x54)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x86 $x44)))
 (let (($x35 (and $x74 $x72)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x5 $x35)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x40)))))))
 (let (($x67 (and (and (and $x31 $x53) $x32) $x18)))
 (let (($x33 (= $x67 true)))
 (let (($x7 (= $x33 true)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x81 (and $x63 $x7)))
 (let (($x70 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x92 (and $x70 $x81)))
 (let (($x130 (forall ((Lambda32 (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x101 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x101 (_ bv1 32))))
 (=> $x117 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x124 (forall ((Lambda32 (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x101 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x101 (_ bv1 32))))
 (= $x117 false)))))
 ))
 (let (($x118 (forall ((Lambda32 (_ BitVec 32)) )(let (($x106 (= false false)))
 (let (($x87 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x101 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x101 (_ bv0 32))))
 (=> $x114 $x106))))))
 ))
 (let (($x111 (forall ((Lambda32 (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x101 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x101 (_ bv0 32))))
 (= $x114 true)))))
 ))
 (let (($x116 (and $x111 $x118)))
 (let (($x125 (and $x116 $x124)))
 (let (($x131 (and $x125 $x130)))
 (let (($x90 (and $x131 $x92)))
 (let (($x16 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x99 (and $x16 $x90)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x105 (and $x41 $x99)))
 (let (($x68 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x103 (and $x68 $x105)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x123 (and $x24 $x103)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x47 (and $x62 $x123)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x77 (and $x37 $x47)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x61 (and $x29 $x77)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x119 (and $x6 $x61)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x48 (and $x13 $x119)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x79 (and $x66 $x48)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x80 (and $x20 $x79)))
 (let (($x110 (=> $x80 $x113)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x97 (= $x82 true)))
 (let (($x113 (= $x97 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x14 (concat ?x59 (concat ?x98 ?x76)))))
 (let (($x18 (= input.dst.llvm-%n ?x45)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x54)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x86 $x44)))
 (let (($x35 (and $x74 $x72)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x5 $x35)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x40)))))))
 (let (($x67 (and (and (and $x31 $x53) $x32) $x18)))
 (let (($x33 (= $x67 true)))
 (let (($x7 (= $x33 true)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x81 (and $x63 $x7)))
 (let (($x70 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x92 (and $x70 $x81)))
 (let (($x130 (forall ((Lambda32 (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x101 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x101 (_ bv1 32))))
 (=> $x117 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x124 (forall ((Lambda32 (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x101 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x101 (_ bv1 32))))
 (= $x117 false)))))
 ))
 (let (($x118 (forall ((Lambda32 (_ BitVec 32)) )(let (($x106 (= false false)))
 (let (($x87 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x101 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x101 (_ bv0 32))))
 (=> $x114 $x106))))))
 ))
 (let (($x111 (forall ((Lambda32 (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x101 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x101 (_ bv0 32))))
 (= $x114 true)))))
 ))
 (let (($x116 (and $x111 $x118)))
 (let (($x125 (and $x116 $x124)))
 (let (($x131 (and $x125 $x130)))
 (let (($x90 (and $x131 $x92)))
 (let (($x16 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x99 (and $x16 $x90)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x105 (and $x41 $x99)))
 (let (($x68 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x103 (and $x68 $x105)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x123 (and $x24 $x103)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x47 (and $x62 $x123)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x77 (and $x37 $x47)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x61 (and $x29 $x77)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x119 (and $x6 $x61)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x48 (and $x13 $x119)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x79 (and $x66 $x48)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x80 (and $x20 $x79)))
 (let (($x110 (=> $x80 $x113)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x182 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (= $x182 false)))
 (let (($x184 (= $x183 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x11)))
 (let (($x165 (= ?x53 input.dst.llvm-%n)))
 (let (($x166 (= $x165 true)))
 (let (($x161 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x162 (= $x161 true)))
 (let (($x157 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x153 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let (($x149 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x120)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x115 $x36)))
 (let (($x138 (and $x128 $x137)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x113 $x138)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x34 $x134)))))))
 (let (($x140 (and $x112 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x119 true)))
 (let (($x103 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x123 (= $x103 true)))
 (let (($x47 (= $x123 true)))
 (let (($x92 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x90 (= $x92 true)))
 (let (($x99 (= $x90 true)))
 (let (($x33 (= (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x7 (= $x33 true)))
 (let (($x45 (= (_ bv0 32) input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x18 (= $x45 true)))
 (let (($x98 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x76 (= $x98 true)))
 (let (($x89 (= $x76 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x58 (= $x84 true)))
 (let (($x59 (= $x58 true)))
 (let (($x32 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x56 (= $x32 true)))
 (let (($x9 (= $x56 true)))
 (let (($x74 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x54 (= $x74 true)))
 (let (($x72 (= $x54 true)))
 (let (($x86 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x129 (= $x86 true)))
 (let (($x64 (= $x129 true)))
 (let (($x102 (= ?x53 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x88 (= $x102 true)))
 (let (($x44 (and $x88 $x64)))
 (let (($x35 (and $x44 $x72)))
 (let (($x100 (and $x35 $x9)))
 (let (($x83 (and $x100 $x59)))
 (let (($x126 (and $x83 $x89)))
 (let (($x67 (and $x126 $x18)))
 (let (($x81 (and $x67 $x7)))
 (let (($x105 (and $x81 $x99)))
 (let (($x77 (and $x105 $x47)))
 (let (($x79 (and $x77 $x48)))
 (let (($x143 (and $x79 $x142)))
 (let (($x148 (and $x143 $x147)))
 (let (($x152 (and $x148 $x151)))
 (let (($x156 (and $x152 $x155)))
 (let (($x160 (and $x156 $x159)))
 (let (($x163 (and $x160 $x162)))
 (let (($x167 (and $x163 $x166)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x168 (and $x43 $x167)))
 (let (($x55 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x169 (and $x55 $x168)))
 (let (($x50 (forall ((Lambda32 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x127 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x127 (_ bv1 32))))
 (=> $x131 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x70 (forall ((Lambda32 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x127 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x127 (_ bv1 32))))
 (= $x131 false)))))
 ))
 (let (($x104 (forall ((Lambda32 (_ BitVec 32)) )(let (($x121 (= false false)))
 (let (($x101 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x127 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x127 (_ bv0 32))))
 (=> $x118 $x121))))))
 ))
 (let (($x117 (forall ((Lambda32 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x127 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x127 (_ bv0 32))))
 (= $x118 true)))))
 ))
 (let (($x136 (and $x117 $x104)))
 (let (($x57 (and $x136 $x70)))
 (let (($x108 (and $x57 $x50)))
 (let (($x170 (and $x108 $x169)))
 (let (($x42 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x171 (and $x42 $x170)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x172 (and $x39 $x171)))
 (let (($x65 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x173 (and $x65 $x172)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x174 (and $x30 $x173)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x175 (and $x46 $x174)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x176 (and $x22 $x175)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x177 (and $x21 $x176)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x178 (and $x8 $x177)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x179 (and $x96 $x178)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x180 (and $x69 $x179)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x181 (and $x28 $x180)))
 (let (($x185 (=> $x181 $x184)))
 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x182 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (= $x182 false)))
 (let (($x184 (= $x183 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x11)))
 (let (($x165 (= ?x53 input.dst.llvm-%n)))
 (let (($x166 (= $x165 true)))
 (let (($x161 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x162 (= $x161 true)))
 (let (($x157 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x153 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let (($x149 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x120)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x115 $x36)))
 (let (($x138 (and $x128 $x137)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x113 $x138)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x34 $x134)))))))
 (let (($x140 (and $x112 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x119 true)))
 (let (($x103 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x123 (= $x103 true)))
 (let (($x47 (= $x123 true)))
 (let (($x92 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x90 (= $x92 true)))
 (let (($x99 (= $x90 true)))
 (let (($x33 (= (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x7 (= $x33 true)))
 (let (($x45 (= (_ bv0 32) input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x18 (= $x45 true)))
 (let (($x98 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x76 (= $x98 true)))
 (let (($x89 (= $x76 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x58 (= $x84 true)))
 (let (($x59 (= $x58 true)))
 (let (($x32 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x56 (= $x32 true)))
 (let (($x9 (= $x56 true)))
 (let (($x74 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x54 (= $x74 true)))
 (let (($x72 (= $x54 true)))
 (let (($x86 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x129 (= $x86 true)))
 (let (($x64 (= $x129 true)))
 (let (($x102 (= ?x53 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x88 (= $x102 true)))
 (let (($x44 (and $x88 $x64)))
 (let (($x35 (and $x44 $x72)))
 (let (($x100 (and $x35 $x9)))
 (let (($x83 (and $x100 $x59)))
 (let (($x126 (and $x83 $x89)))
 (let (($x67 (and $x126 $x18)))
 (let (($x81 (and $x67 $x7)))
 (let (($x105 (and $x81 $x99)))
 (let (($x77 (and $x105 $x47)))
 (let (($x79 (and $x77 $x48)))
 (let (($x143 (and $x79 $x142)))
 (let (($x148 (and $x143 $x147)))
 (let (($x152 (and $x148 $x151)))
 (let (($x156 (and $x152 $x155)))
 (let (($x160 (and $x156 $x159)))
 (let (($x163 (and $x160 $x162)))
 (let (($x167 (and $x163 $x166)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x168 (and $x43 $x167)))
 (let (($x55 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x169 (and $x55 $x168)))
 (let (($x50 (forall ((Lambda32 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x127 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x127 (_ bv1 32))))
 (=> $x131 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x70 (forall ((Lambda32 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x127 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x127 (_ bv1 32))))
 (= $x131 false)))))
 ))
 (let (($x104 (forall ((Lambda32 (_ BitVec 32)) )(let (($x121 (= false false)))
 (let (($x101 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x127 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x127 (_ bv0 32))))
 (=> $x118 $x121))))))
 ))
 (let (($x117 (forall ((Lambda32 (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x127 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x127 (_ bv0 32))))
 (= $x118 true)))))
 ))
 (let (($x136 (and $x117 $x104)))
 (let (($x57 (and $x136 $x70)))
 (let (($x108 (and $x57 $x50)))
 (let (($x170 (and $x108 $x169)))
 (let (($x42 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x171 (and $x42 $x170)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x172 (and $x39 $x171)))
 (let (($x65 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x173 (and $x65 $x172)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x174 (and $x30 $x173)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x175 (and $x46 $x174)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x176 (and $x22 $x175)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x177 (and $x21 $x176)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x178 (and $x8 $x177)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x179 (and $x96 $x178)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x180 (and $x69 $x179)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x181 (and $x28 $x180)))
 (let (($x185 (=> $x181 $x184)))
 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000001a0)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000001a3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000001a0)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (not $x132)))
 (let (($x106 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x124 (not $x106)))
 (let (($x12 (or $x124 $x130)))
 (let (($x85 (= $x12 true)))
 (let (($x26 (= $x85 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x171)))
 (let (($x177 (= ?x172 input.dst.llvm-%n)))
 (let (($x178 (= $x177 true)))
 (let (($x173 (= ?x172 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x174 (= $x173 true)))
 (let ((?x166 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x166)))
 (let (($x168 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x169 (= $x168 true)))
 (let (($x162 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x163 (= $x162 true)))
 (let (($x164 (= $x163 true)))
 (let (($x158 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x159 (= $x158 true)))
 (let (($x160 (= $x159 true)))
 (let (($x154 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x155 (= $x154 true)))
 (let (($x156 (= $x155 true)))
 (let (($x150 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x146 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x142 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x137 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x135 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x135 true)))
 (let (($x128 (= $x36 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x60)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x91 $x78)))
 (let (($x94 (and $x134 $x93)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x99 $x94)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x119)))))))
 (let (($x112 (and $x51 $x95)))
 (let (($x97 (= $x112 true)))
 (let (($x113 (= $x97 true)))
 (let (($x18 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x67 (= $x18 true)))
 (let (($x33 (= $x67 true)))
 (let ((?x83 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x83)))
 (let (($x89 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x89 true)))
 (let (($x100 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x14 (= $x100 true)))
 (let (($x84 (= $x14 true)))
 (let (($x32 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x56 (= $x32 true)))
 (let (($x9 (= $x56 true)))
 (let (($x58 (and $x9 $x84)))
 (let (($x45 (and $x58 $x126)))
 (let (($x7 (and $x45 $x33)))
 (let (($x115 (and $x7 $x113)))
 (let (($x120 (and $x115 $x128)))
 (let (($x140 (and $x120 $x139)))
 (let (($x145 (and $x140 $x144)))
 (let (($x149 (and $x145 $x148)))
 (let (($x153 (and $x149 $x152)))
 (let (($x157 (and $x153 $x156)))
 (let (($x161 (and $x157 $x160)))
 (let (($x165 (and $x161 $x164)))
 (let (($x170 (and $x165 $x169)))
 (let (($x175 (and $x170 $x174)))
 (let (($x179 (and $x175 $x178)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x180 (and $x54 $x179)))
 (let (($x64 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x181 (and $x64 $x180)))
 (let (($x5 (forall ((Lambda32 (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x125 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x125 (_ bv1 32))))
 (=> $x108 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x55 (forall ((Lambda32 (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x125 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x125 (_ bv1 32))))
 (= $x108 false)))))
 ))
 (let (($x63 (forall ((Lambda32 (_ BitVec 32)) )(let (($x133 (= false false)))
 (let (($x127 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x125 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x125 (_ bv0 32))))
 (=> $x104 $x133))))))
 ))
 (let (($x131 (forall ((Lambda32 (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x125 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x125 (_ bv0 32))))
 (= $x104 true)))))
 ))
 (let (($x71 (and $x131 $x63)))
 (let (($x19 (and $x71 $x55)))
 (let (($x86 (and $x19 $x5)))
 (let (($x182 (and $x86 $x181)))
 (let (($x52 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x183 (and $x52 $x182)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x184 (and $x68 $x183)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x185 (and $x24 $x184)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x186 (and $x80 $x185)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x82 (and $x15 $x186)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x114 (and $x62 $x82)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x16 (and $x27 $x114)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x73 (and $x30 $x16)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x75 (and $x37 $x73)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x109 (and $x66 $x75)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x111 (and $x28 $x109)))
 (let (($x187 (=> $x111 $x26)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (not $x132)))
 (let (($x106 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x124 (not $x106)))
 (let (($x12 (or $x124 $x130)))
 (let (($x85 (= $x12 true)))
 (let (($x26 (= $x85 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x171)))
 (let (($x177 (= ?x172 input.dst.llvm-%n)))
 (let (($x178 (= $x177 true)))
 (let (($x173 (= ?x172 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x174 (= $x173 true)))
 (let ((?x166 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x166)))
 (let (($x168 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x169 (= $x168 true)))
 (let (($x162 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x163 (= $x162 true)))
 (let (($x164 (= $x163 true)))
 (let (($x158 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x159 (= $x158 true)))
 (let (($x160 (= $x159 true)))
 (let (($x154 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x155 (= $x154 true)))
 (let (($x156 (= $x155 true)))
 (let (($x150 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x146 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x142 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x137 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x135 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x135 true)))
 (let (($x128 (= $x36 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x60)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x91 $x78)))
 (let (($x94 (and $x134 $x93)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x99 $x94)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x119)))))))
 (let (($x112 (and $x51 $x95)))
 (let (($x97 (= $x112 true)))
 (let (($x113 (= $x97 true)))
 (let (($x18 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x67 (= $x18 true)))
 (let (($x33 (= $x67 true)))
 (let ((?x83 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x83)))
 (let (($x89 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x89 true)))
 (let (($x100 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x14 (= $x100 true)))
 (let (($x84 (= $x14 true)))
 (let (($x32 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x56 (= $x32 true)))
 (let (($x9 (= $x56 true)))
 (let (($x58 (and $x9 $x84)))
 (let (($x45 (and $x58 $x126)))
 (let (($x7 (and $x45 $x33)))
 (let (($x115 (and $x7 $x113)))
 (let (($x120 (and $x115 $x128)))
 (let (($x140 (and $x120 $x139)))
 (let (($x145 (and $x140 $x144)))
 (let (($x149 (and $x145 $x148)))
 (let (($x153 (and $x149 $x152)))
 (let (($x157 (and $x153 $x156)))
 (let (($x161 (and $x157 $x160)))
 (let (($x165 (and $x161 $x164)))
 (let (($x170 (and $x165 $x169)))
 (let (($x175 (and $x170 $x174)))
 (let (($x179 (and $x175 $x178)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x180 (and $x54 $x179)))
 (let (($x64 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x181 (and $x64 $x180)))
 (let (($x5 (forall ((Lambda32 (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x125 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x125 (_ bv1 32))))
 (=> $x108 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x55 (forall ((Lambda32 (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x125 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x125 (_ bv1 32))))
 (= $x108 false)))))
 ))
 (let (($x63 (forall ((Lambda32 (_ BitVec 32)) )(let (($x133 (= false false)))
 (let (($x127 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x125 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x125 (_ bv0 32))))
 (=> $x104 $x133))))))
 ))
 (let (($x131 (forall ((Lambda32 (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x125 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x125 (_ bv0 32))))
 (= $x104 true)))))
 ))
 (let (($x71 (and $x131 $x63)))
 (let (($x19 (and $x71 $x55)))
 (let (($x86 (and $x19 $x5)))
 (let (($x182 (and $x86 $x181)))
 (let (($x52 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x183 (and $x52 $x182)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x184 (and $x68 $x183)))
 (let (($x24 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x185 (and $x24 $x184)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x186 (and $x80 $x185)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x82 (and $x15 $x186)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x114 (and $x62 $x82)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x16 (and $x27 $x114)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x73 (and $x30 $x16)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x75 (and $x37 $x73)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x109 (and $x66 $x75)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x111 (and $x28 $x109)))
 (let (($x187 (=> $x111 $x26)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 167 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x195 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x190 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x189 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x191 (ite $x189 ?x190 (_ bv0 32))))
 (let ((?x53 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x11 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x192 (ite $x11 ?x53 ?x191)))
 (let ((?x193 (bvmul (_ bv4294967295 32) ?x192)))
 (let ((?x194 (bvneg ?x193)))
 (let (($x196 (= ?x194 ?x195)))
 (let (($x197 (= $x196 true)))
 (let ((?x111 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x111)))
 (let (($x132 (= ?x106 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x130 (= $x132 true)))
 (let ((?x114 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x114)))
 (let (($x73 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x73 true)))
 (let (($x184 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x185 (= $x184 true)))
 (let (($x186 (= $x185 true)))
 (let (($x180 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x181 (= $x180 true)))
 (let (($x182 (= $x181 true)))
 (let (($x176 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x177 (= $x176 true)))
 (let (($x178 (= $x177 true)))
 (let (($x172 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x168 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x169 (= $x168 true)))
 (let (($x170 (= $x169 true)))
 (let (($x164 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x165 (= $x164 true)))
 (let (($x166 (= $x165 true)))
 (let (($x160 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x161 (= $x160 true)))
 (let (($x162 (= $x161 true)))
 (let (($x156 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x148 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x144 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x139 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x139 true)))
 (let (($x141 (= $x140 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x113)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x93 $x112)))
 (let (($x10 (and $x97 $x115)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x47 $x10)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x90)))))))
 (let (($x36 (and $x60 $x135)))
 (let (($x128 (= $x36 true)))
 (let (($x120 (= $x128 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x45)))
 (let (($x105 (= ?x18 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x103 (= $x105 true)))
 (let (($x33 (= ?x18 input.dst.llvm-%n)))
 (let (($x7 (= $x33 true)))
 (let (($x107 (and $x7 $x103)))
 (let (($x137 (and $x107 $x120)))
 (let (($x142 (and $x137 $x141)))
 (let (($x147 (and $x142 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x155 (and $x151 $x154)))
 (let (($x159 (and $x155 $x158)))
 (let (($x163 (and $x159 $x162)))
 (let (($x167 (and $x163 $x166)))
 (let (($x171 (and $x167 $x170)))
 (let (($x175 (and $x171 $x174)))
 (let (($x179 (and $x175 $x178)))
 (let (($x183 (and $x179 $x182)))
 (let (($x82 (and $x183 $x186)))
 (let (($x109 (and $x82 $x75)))
 (let (($x12 (and $x109 $x130)))
 (let (($x89 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x26 (and (not $x89) $x12)))
 (let (($x98 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x187 (and $x98 $x26)))
 (let (($x58 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x188 (and $x58 $x187)))
 (let (($x100 (forall ((Lambda32 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x57 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x57 (_ bv1 32))))
 (=> $x86 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x64 (forall ((Lambda32 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x57 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x57 (_ bv1 32))))
 (= $x86 false)))))
 ))
 (let (($x43 (forall ((Lambda32 (_ BitVec 32)) )(let (($x40 (= false false)))
 (let (($x125 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x57 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x57 (_ bv0 32))))
 (=> $x63 $x40))))))
 ))
 (let (($x108 (forall ((Lambda32 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x57 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x57 (_ bv0 32))))
 (= $x63 true)))))
 ))
 (let (($x102 (and $x108 $x43)))
 (let (($x44 (and $x102 $x64)))
 (let (($x14 (and $x44 $x100)))
 (let (($x92 (and $x14 $x188)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x118 (and $x41 $x92)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x42 (and $x65 $x118)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x31 (and $x20 $x42)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x87 (and $x8 $x31)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x116 (and $x17 $x87)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x117 (and $x23 $x116)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x121 (and $x96 $x117)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x70 (and $x21 $x121)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x49 (and $x29 $x70)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x50 (and $x69 $x49)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x25 (and $x28 $x50)))
 (let (($x198 (=> $x25 $x197)))
 (not $x198)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x195 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x190 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x189 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x191 (ite $x189 ?x190 (_ bv0 32))))
 (let ((?x53 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x11 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x192 (ite $x11 ?x53 ?x191)))
 (let ((?x193 (bvmul (_ bv4294967295 32) ?x192)))
 (let ((?x194 (bvneg ?x193)))
 (let (($x196 (= ?x194 ?x195)))
 (let (($x197 (= $x196 true)))
 (let ((?x111 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x111)))
 (let (($x132 (= ?x106 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x130 (= $x132 true)))
 (let ((?x114 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x114)))
 (let (($x73 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x73 true)))
 (let (($x184 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x185 (= $x184 true)))
 (let (($x186 (= $x185 true)))
 (let (($x180 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x181 (= $x180 true)))
 (let (($x182 (= $x181 true)))
 (let (($x176 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x177 (= $x176 true)))
 (let (($x178 (= $x177 true)))
 (let (($x172 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x168 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x169 (= $x168 true)))
 (let (($x170 (= $x169 true)))
 (let (($x164 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x165 (= $x164 true)))
 (let (($x166 (= $x165 true)))
 (let (($x160 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x161 (= $x160 true)))
 (let (($x162 (= $x161 true)))
 (let (($x156 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x148 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x144 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x139 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x139 true)))
 (let (($x141 (= $x140 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x113)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x93 $x112)))
 (let (($x10 (and $x97 $x115)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x47 $x10)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x90)))))))
 (let (($x36 (and $x60 $x135)))
 (let (($x128 (= $x36 true)))
 (let (($x120 (= $x128 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x45)))
 (let (($x105 (= ?x18 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x103 (= $x105 true)))
 (let (($x33 (= ?x18 input.dst.llvm-%n)))
 (let (($x7 (= $x33 true)))
 (let (($x107 (and $x7 $x103)))
 (let (($x137 (and $x107 $x120)))
 (let (($x142 (and $x137 $x141)))
 (let (($x147 (and $x142 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x155 (and $x151 $x154)))
 (let (($x159 (and $x155 $x158)))
 (let (($x163 (and $x159 $x162)))
 (let (($x167 (and $x163 $x166)))
 (let (($x171 (and $x167 $x170)))
 (let (($x175 (and $x171 $x174)))
 (let (($x179 (and $x175 $x178)))
 (let (($x183 (and $x179 $x182)))
 (let (($x82 (and $x183 $x186)))
 (let (($x109 (and $x82 $x75)))
 (let (($x12 (and $x109 $x130)))
 (let (($x89 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x26 (and (not $x89) $x12)))
 (let (($x98 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x187 (and $x98 $x26)))
 (let (($x58 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x188 (and $x58 $x187)))
 (let (($x100 (forall ((Lambda32 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x57 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x57 (_ bv1 32))))
 (=> $x86 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x64 (forall ((Lambda32 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x57 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x57 (_ bv1 32))))
 (= $x86 false)))))
 ))
 (let (($x43 (forall ((Lambda32 (_ BitVec 32)) )(let (($x40 (= false false)))
 (let (($x125 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x57 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x57 (_ bv0 32))))
 (=> $x63 $x40))))))
 ))
 (let (($x108 (forall ((Lambda32 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x57 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x57 (_ bv0 32))))
 (= $x63 true)))))
 ))
 (let (($x102 (and $x108 $x43)))
 (let (($x44 (and $x102 $x64)))
 (let (($x14 (and $x44 $x100)))
 (let (($x92 (and $x14 $x188)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x118 (and $x41 $x92)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x42 (and $x65 $x118)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x31 (and $x20 $x42)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x87 (and $x8 $x31)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x116 (and $x17 $x87)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x117 (and $x23 $x116)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x121 (and $x96 $x117)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x70 (and $x21 $x121)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x49 (and $x29 $x70)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x50 (and $x69 $x49)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x25 (and $x28 $x50)))
 (let (($x198 (=> $x25 $x197)))
 (not $x198)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 177 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x88 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x72 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x136 (ite $x72 ?x101 (_ bv0 32))))
 (let ((?x52 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x104 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x131 (ite $x104 ?x52 ?x136)))
 (let ((?x133 (bvmul (_ bv4294967295 32) ?x131)))
 (let ((?x55 (bvneg ?x133)))
 (let (($x5 (= ?x55 ?x88)))
 (let (($x74 (= $x5 true)))
 (let ((?x87 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x87)))
 (let (($x121 (= ?x116 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x121 true)))
 (let ((?x188 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x188)))
 (let (($x118 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x118 true)))
 (let (($x130 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x12 (= $x130 true)))
 (let (($x26 (= $x12 true)))
 (let (($x111 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x106 (= $x111 true)))
 (let (($x124 (= $x106 true)))
 (let (($x16 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x73 (= $x16 true)))
 (let (($x75 (= $x73 true)))
 (let (($x185 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x186 (= $x185 true)))
 (let (($x82 (= $x186 true)))
 (let (($x181 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let (($x177 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x178 (= $x177 true)))
 (let (($x179 (= $x178 true)))
 (let (($x173 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x170 (= $x169 true)))
 (let (($x171 (= $x170 true)))
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x166 (= $x165 true)))
 (let (($x167 (= $x166 true)))
 (let (($x161 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x162 (= $x161 true)))
 (let (($x163 (= $x162 true)))
 (let (($x157 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x143)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x138 $x141)))
 (let (($x145 (and $x142 $x144)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x47 $x145)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x115)))))))
 (let (($x147 (and $x137 $x146)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x79)))
 (let (($x99 (= ?x122 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x91 (= $x99 true)))
 (let (($x110 (= ?x122 input.dst.llvm-%n)))
 (let (($x90 (= $x110 true)))
 (let (($x34 (and $x90 $x91)))
 (let (($x150 (and $x34 $x149)))
 (let (($x155 (and $x150 $x154)))
 (let (($x160 (and $x155 $x159)))
 (let (($x164 (and $x160 $x163)))
 (let (($x168 (and $x164 $x167)))
 (let (($x172 (and $x168 $x171)))
 (let (($x176 (and $x172 $x175)))
 (let (($x180 (and $x176 $x179)))
 (let (($x184 (and $x180 $x183)))
 (let (($x114 (and $x184 $x82)))
 (let (($x109 (and $x114 $x75)))
 (let (($x132 (and $x109 $x124)))
 (let (($x187 (and $x132 $x26)))
 (let (($x31 (and $x187 $x42)))
 (let (($x49 (and $x31 $x70)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x25 (and (not $x48) $x49)))
 (let (($x107 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x11 (and $x107 $x25)))
 (let (($x7 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x53 (and $x7 $x11)))
 (let (($x18 (forall ((Lambda32 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x19 (_ bv1 32))))
 (=> $x14 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x58 (forall ((Lambda32 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x19 (_ bv1 32))))
 (= $x14 false)))))
 ))
 (let (($x54 (forall ((Lambda32 (_ BitVec 32)) )(let (($x129 (= false false)))
 (let (($x57 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x19 (_ bv0 32))))
 (=> $x43 $x129))))))
 ))
 (let (($x86 (forall ((Lambda32 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x19 (_ bv0 32))))
 (= $x43 true)))))
 ))
 (let (($x56 (and $x86 $x54)))
 (let (($x59 (and $x56 $x58)))
 (let (($x67 (and $x59 $x18)))
 (let (($x189 (and $x67 $x53)))
 (let (($x39 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x190 (and $x39 $x189)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x191 (and $x24 $x190)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x192 (and $x80 $x191)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x193 (and $x46 $x192)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x194 (and $x6 $x193)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x195 (and $x27 $x194)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x196 (and $x30 $x195)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x197 (and $x37 $x196)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x198 (and $x66 $x197)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x199 (and $x13 $x198)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x77 (and $x28 $x199)))
 (let (($x35 (=> $x77 $x74)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x88 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x72 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x136 (ite $x72 ?x101 (_ bv0 32))))
 (let ((?x52 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x104 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x131 (ite $x104 ?x52 ?x136)))
 (let ((?x133 (bvmul (_ bv4294967295 32) ?x131)))
 (let ((?x55 (bvneg ?x133)))
 (let (($x5 (= ?x55 ?x88)))
 (let (($x74 (= $x5 true)))
 (let ((?x87 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x87)))
 (let (($x121 (= ?x116 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x121 true)))
 (let ((?x188 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x188)))
 (let (($x118 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x118 true)))
 (let (($x130 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x12 (= $x130 true)))
 (let (($x26 (= $x12 true)))
 (let (($x111 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x106 (= $x111 true)))
 (let (($x124 (= $x106 true)))
 (let (($x16 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x73 (= $x16 true)))
 (let (($x75 (= $x73 true)))
 (let (($x185 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x186 (= $x185 true)))
 (let (($x82 (= $x186 true)))
 (let (($x181 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let (($x177 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x178 (= $x177 true)))
 (let (($x179 (= $x178 true)))
 (let (($x173 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x170 (= $x169 true)))
 (let (($x171 (= $x170 true)))
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x166 (= $x165 true)))
 (let (($x167 (= $x166 true)))
 (let (($x161 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x162 (= $x161 true)))
 (let (($x163 (= $x162 true)))
 (let (($x157 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x143)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x138 $x141)))
 (let (($x145 (and $x142 $x144)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x47 $x145)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x115)))))))
 (let (($x147 (and $x137 $x146)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x79)))
 (let (($x99 (= ?x122 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x91 (= $x99 true)))
 (let (($x110 (= ?x122 input.dst.llvm-%n)))
 (let (($x90 (= $x110 true)))
 (let (($x34 (and $x90 $x91)))
 (let (($x150 (and $x34 $x149)))
 (let (($x155 (and $x150 $x154)))
 (let (($x160 (and $x155 $x159)))
 (let (($x164 (and $x160 $x163)))
 (let (($x168 (and $x164 $x167)))
 (let (($x172 (and $x168 $x171)))
 (let (($x176 (and $x172 $x175)))
 (let (($x180 (and $x176 $x179)))
 (let (($x184 (and $x180 $x183)))
 (let (($x114 (and $x184 $x82)))
 (let (($x109 (and $x114 $x75)))
 (let (($x132 (and $x109 $x124)))
 (let (($x187 (and $x132 $x26)))
 (let (($x31 (and $x187 $x42)))
 (let (($x49 (and $x31 $x70)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x25 (and (not $x48) $x49)))
 (let (($x107 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x11 (and $x107 $x25)))
 (let (($x7 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x53 (and $x7 $x11)))
 (let (($x18 (forall ((Lambda32 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x19 (_ bv1 32))))
 (=> $x14 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x58 (forall ((Lambda32 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x19 (_ bv1 32))))
 (= $x14 false)))))
 ))
 (let (($x54 (forall ((Lambda32 (_ BitVec 32)) )(let (($x129 (= false false)))
 (let (($x57 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x19 (_ bv0 32))))
 (=> $x43 $x129))))))
 ))
 (let (($x86 (forall ((Lambda32 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x19 (_ bv0 32))))
 (= $x43 true)))))
 ))
 (let (($x56 (and $x86 $x54)))
 (let (($x59 (and $x56 $x58)))
 (let (($x67 (and $x59 $x18)))
 (let (($x189 (and $x67 $x53)))
 (let (($x39 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x190 (and $x39 $x189)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x191 (and $x24 $x190)))
 (let (($x80 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x192 (and $x80 $x191)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x193 (and $x46 $x192)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x194 (and $x6 $x193)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x195 (and $x27 $x194)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x196 (and $x30 $x195)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x197 (and $x37 $x196)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x198 (and $x66 $x197)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x199 (and $x13 $x198)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x77 (and $x28 $x199)))
 (let (($x35 (=> $x77 $x74)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 177 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x76 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x71 (ite $x76 ?x127 (_ bv0 32))))
 (let ((?x41 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x63 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x108 (ite $x63 ?x41 ?x71)))
 (let (($x40 (bvule ?x108 (_ bv3 32))))
 (let (($x64 (= $x40 true)))
 (let (($x9 (= $x64 true)))
 (let ((?x193 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x193)))
 (let (($x196 (= ?x194 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x197 (= $x196 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x53)))
 (let (($x190 (= ?x189 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x191 (= $x190 true)))
 (let (($x70 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x49 (= $x70 true)))
 (let (($x25 (= $x49 true)))
 (let (($x87 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x116 (= $x87 true)))
 (let (($x117 (= $x116 true)))
 (let (($x92 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x118 (= $x92 true)))
 (let (($x42 (= $x118 true)))
 (let (($x12 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x26 (= $x12 true)))
 (let (($x187 (= $x26 true)))
 (let (($x106 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x124 (= $x106 true)))
 (let (($x132 (= $x124 true)))
 (let (($x73 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x75 (= $x73 true)))
 (let (($x109 (= $x75 true)))
 (let (($x186 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x82 (= $x186 true)))
 (let (($x114 (= $x82 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x177)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x173 $x175)))
 (let (($x179 (and $x176 $x178)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x159 $x179)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x165 $x166)))))))
 (let (($x181 (and $x172 $x180)))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let (($x152 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x148 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let ((?x140 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x140)))
 (let (($x145 (= ?x141 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x146 (= $x145 true)))
 (let (($x142 (= ?x141 input.dst.llvm-%n)))
 (let (($x143 (= $x142 true)))
 (let (($x137 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x61 (= $x137 true)))
 (let (($x47 (= $x61 true)))
 (let (($x10 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x135 (= $x10 true)))
 (let (($x36 (= $x135 true)))
 (let (($x97 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (= $x97 true)))
 (let (($x112 (= $x113 true)))
 (let (($x128 (and $x112 $x36)))
 (let (($x138 (and $x128 $x47)))
 (let (($x144 (and $x138 $x143)))
 (let (($x147 (and $x144 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x155 (and $x151 $x154)))
 (let (($x184 (and $x155 $x183)))
 (let (($x16 (and $x184 $x114)))
 (let (($x111 (and $x16 $x109)))
 (let (($x130 (and $x111 $x132)))
 (let (($x188 (and $x130 $x187)))
 (let (($x31 (and $x188 $x42)))
 (let (($x121 (and $x31 $x117)))
 (let (($x11 (and $x121 $x25)))
 (let (($x192 (and $x11 $x191)))
 (let (($x198 (and $x192 $x197)))
 (let (($x94 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x77 (and (not $x94) $x198)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x104 (and $x34 $x77)))
 (let (($x90 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x52 (and $x90 $x104)))
 (let (($x122 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x44 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x44 (_ bv1 32))))
 (=> $x67 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x7 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x44 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x44 (_ bv1 32))))
 (= $x67 false)))))
 ))
 (let (($x98 (forall ((Lambda32 (_ BitVec 32)) )(let (($x84 (= false false)))
 (let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x44 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x44 (_ bv0 32))))
 (=> $x54 $x84))))))
 ))
 (let (($x14 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x44 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x44 (_ bv0 32))))
 (= $x54 true)))))
 ))
 (let (($x126 (and $x14 $x98)))
 (let (($x105 (and $x126 $x7)))
 (let (($x51 (and $x105 $x122)))
 (let (($x72 (and $x51 $x52)))
 (let (($x68 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x101 (and $x68 $x72)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x136 (and $x20 $x101)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x131 (and $x8 $x136)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x133 (and $x15 $x131)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x55 (and $x62 $x133)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x88 (and $x96 $x55)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x5 (and $x21 $x88)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x74 (and $x29 $x5)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x35 (and $x69 $x74)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x32 (and $x22 $x35)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x60 (and $x123 $x32)))
 (let (($x100 (=> $x60 $x9)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x76 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x71 (ite $x76 ?x127 (_ bv0 32))))
 (let ((?x41 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x63 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x108 (ite $x63 ?x41 ?x71)))
 (let (($x40 (bvule ?x108 (_ bv3 32))))
 (let (($x64 (= $x40 true)))
 (let (($x9 (= $x64 true)))
 (let ((?x193 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x193)))
 (let (($x196 (= ?x194 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x197 (= $x196 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x53)))
 (let (($x190 (= ?x189 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x191 (= $x190 true)))
 (let (($x70 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x49 (= $x70 true)))
 (let (($x25 (= $x49 true)))
 (let (($x87 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x116 (= $x87 true)))
 (let (($x117 (= $x116 true)))
 (let (($x92 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x118 (= $x92 true)))
 (let (($x42 (= $x118 true)))
 (let (($x12 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x26 (= $x12 true)))
 (let (($x187 (= $x26 true)))
 (let (($x106 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x124 (= $x106 true)))
 (let (($x132 (= $x124 true)))
 (let (($x73 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x75 (= $x73 true)))
 (let (($x109 (= $x75 true)))
 (let (($x186 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x82 (= $x186 true)))
 (let (($x114 (= $x82 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x177)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x173 $x175)))
 (let (($x179 (and $x176 $x178)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x159 $x179)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x165 $x166)))))))
 (let (($x181 (and $x172 $x180)))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let (($x152 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x148 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let ((?x140 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x140)))
 (let (($x145 (= ?x141 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x146 (= $x145 true)))
 (let (($x142 (= ?x141 input.dst.llvm-%n)))
 (let (($x143 (= $x142 true)))
 (let (($x137 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x61 (= $x137 true)))
 (let (($x47 (= $x61 true)))
 (let (($x10 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x135 (= $x10 true)))
 (let (($x36 (= $x135 true)))
 (let (($x97 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (= $x97 true)))
 (let (($x112 (= $x113 true)))
 (let (($x128 (and $x112 $x36)))
 (let (($x138 (and $x128 $x47)))
 (let (($x144 (and $x138 $x143)))
 (let (($x147 (and $x144 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x155 (and $x151 $x154)))
 (let (($x184 (and $x155 $x183)))
 (let (($x16 (and $x184 $x114)))
 (let (($x111 (and $x16 $x109)))
 (let (($x130 (and $x111 $x132)))
 (let (($x188 (and $x130 $x187)))
 (let (($x31 (and $x188 $x42)))
 (let (($x121 (and $x31 $x117)))
 (let (($x11 (and $x121 $x25)))
 (let (($x192 (and $x11 $x191)))
 (let (($x198 (and $x192 $x197)))
 (let (($x94 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x77 (and (not $x94) $x198)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x104 (and $x34 $x77)))
 (let (($x90 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x52 (and $x90 $x104)))
 (let (($x122 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x44 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x44 (_ bv1 32))))
 (=> $x67 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x7 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x44 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x44 (_ bv1 32))))
 (= $x67 false)))))
 ))
 (let (($x98 (forall ((Lambda32 (_ BitVec 32)) )(let (($x84 (= false false)))
 (let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x44 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x44 (_ bv0 32))))
 (=> $x54 $x84))))))
 ))
 (let (($x14 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x44 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x44 (_ bv0 32))))
 (= $x54 true)))))
 ))
 (let (($x126 (and $x14 $x98)))
 (let (($x105 (and $x126 $x7)))
 (let (($x51 (and $x105 $x122)))
 (let (($x72 (and $x51 $x52)))
 (let (($x68 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x101 (and $x68 $x72)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x136 (and $x20 $x101)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x131 (and $x8 $x136)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x133 (and $x15 $x131)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x55 (and $x62 $x133)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x88 (and $x96 $x55)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x5 (and $x21 $x88)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x74 (and $x29 $x5)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x35 (and $x69 $x74)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x32 (and $x22 $x35)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x60 (and $x123 $x32)))
 (let (($x100 (=> $x60 $x9)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x102 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x129 (ite $x102 ?x86 (_ bv0 32))))
 (let ((?x125 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x119 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x58 (ite $x119 ?x125 ?x129)))
 (let (($x45 (bvule ?x58 (_ bv4 32))))
 (let (($x18 (= $x45 true)))
 (let (($x103 (= $x18 true)))
 (let ((?x133 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x133)))
 (let (($x5 (= ?x55 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x5 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x52)))
 (let (($x101 (= ?x72 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x136 (= $x101 true)))
 (let (($x197 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x198 (= $x197 true)))
 (let (($x77 (= $x198 true)))
 (let (($x193 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x194 (= $x193 true)))
 (let (($x195 (= $x194 true)))
 (let (($x189 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x190 (= $x189 true)))
 (let (($x191 (= $x190 true)))
 (let (($x49 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x25 (= $x49 true)))
 (let (($x11 (= $x25 true)))
 (let (($x116 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x117 (= $x116 true)))
 (let (($x121 (= $x117 true)))
 (let (($x118 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x42 (= $x118 true)))
 (let (($x31 (= $x42 true)))
 (let (($x12 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x26 (= $x12 true)))
 (let (($x187 (= $x26 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x73)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x185 $x114)))
 (let (($x109 (and $x16 $x75)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x158 $x109)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x177 $x178)))))))
 (let (($x106 (and $x184 $x111)))
 (let (($x124 (= $x106 true)))
 (let (($x132 (= $x124 true)))
 (let (($x163 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x166 (= $x163 true)))
 (let (($x167 (= $x166 true)))
 (let (($x171 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x162 (= $x171 true)))
 (let (($x164 (= $x162 true)))
 (let ((?x150 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x150)))
 (let (($x155 (= ?x151 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x160 (= $x155 true)))
 (let (($x152 (= ?x151 input.dst.llvm-%n)))
 (let (($x153 (= $x152 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x138 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x138 true)))
 (let (($x140 (= $x139 true)))
 (let (($x144 (and $x140 $x143)))
 (let (($x148 (and $x144 $x147)))
 (let (($x154 (and $x148 $x153)))
 (let (($x161 (and $x154 $x160)))
 (let (($x165 (and $x161 $x164)))
 (let (($x168 (and $x165 $x167)))
 (let (($x130 (and $x168 $x132)))
 (let (($x188 (and $x130 $x187)))
 (let (($x87 (and $x188 $x31)))
 (let (($x70 (and $x87 $x121)))
 (let (($x53 (and $x70 $x11)))
 (let (($x192 (and $x53 $x191)))
 (let (($x196 (and $x192 $x195)))
 (let (($x104 (and $x196 $x77)))
 (let (($x131 (and $x104 $x136)))
 (let (($x35 (and $x131 $x74)))
 (let (($x137 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x60 (and (not $x137) $x35)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x63 (and $x36 $x60)))
 (let (($x115 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x41 (and $x115 $x63)))
 (let (($x97 (forall ((Lambda32 (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x59 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x59 (_ bv1 32))))
 (=> $x51 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x90 (forall ((Lambda32 (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x59 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x59 (_ bv1 32))))
 (= $x51 false)))))
 ))
 (let (($x107 (forall ((Lambda32 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x44 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x59 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x59 (_ bv0 32))))
 (=> $x98 $x33))))))
 ))
 (let (($x67 (forall ((Lambda32 (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x59 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x59 (_ bv0 32))))
 (= $x98 true)))))
 ))
 (let (($x134 (and $x67 $x107)))
 (let (($x99 (and $x134 $x90)))
 (let (($x113 (and $x99 $x97)))
 (let (($x76 (and $x113 $x41)))
 (let (($x65 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x127 (and $x65 $x76)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x71 (and $x80 $x127)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x108 (and $x46 $x71)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x40 (and $x17 $x108)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x64 (and $x23 $x40)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x9 (and $x30 $x64)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x100 (and $x37 $x9)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x83 (and $x66 $x100)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x157 (and $x13 $x83)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x43 (and $x28 $x157)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x39 (and $x78 $x43)))
 (let (($x48 (=> $x39 $x103)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x102 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x129 (ite $x102 ?x86 (_ bv0 32))))
 (let ((?x125 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x119 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x58 (ite $x119 ?x125 ?x129)))
 (let (($x45 (bvule ?x58 (_ bv4 32))))
 (let (($x18 (= $x45 true)))
 (let (($x103 (= $x18 true)))
 (let ((?x133 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x133)))
 (let (($x5 (= ?x55 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x5 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x52)))
 (let (($x101 (= ?x72 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x136 (= $x101 true)))
 (let (($x197 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x198 (= $x197 true)))
 (let (($x77 (= $x198 true)))
 (let (($x193 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x194 (= $x193 true)))
 (let (($x195 (= $x194 true)))
 (let (($x189 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x190 (= $x189 true)))
 (let (($x191 (= $x190 true)))
 (let (($x49 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x25 (= $x49 true)))
 (let (($x11 (= $x25 true)))
 (let (($x116 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x117 (= $x116 true)))
 (let (($x121 (= $x117 true)))
 (let (($x118 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv3 32))))
 (let (($x42 (= $x118 true)))
 (let (($x31 (= $x42 true)))
 (let (($x12 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x26 (= $x12 true)))
 (let (($x187 (= $x26 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x73)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x185 $x114)))
 (let (($x109 (and $x16 $x75)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x158 $x109)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x177 $x178)))))))
 (let (($x106 (and $x184 $x111)))
 (let (($x124 (= $x106 true)))
 (let (($x132 (= $x124 true)))
 (let (($x163 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x166 (= $x163 true)))
 (let (($x167 (= $x166 true)))
 (let (($x171 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x162 (= $x171 true)))
 (let (($x164 (= $x162 true)))
 (let ((?x150 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x150)))
 (let (($x155 (= ?x151 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x160 (= $x155 true)))
 (let (($x152 (= ?x151 input.dst.llvm-%n)))
 (let (($x153 (= $x152 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x138 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x138 true)))
 (let (($x140 (= $x139 true)))
 (let (($x144 (and $x140 $x143)))
 (let (($x148 (and $x144 $x147)))
 (let (($x154 (and $x148 $x153)))
 (let (($x161 (and $x154 $x160)))
 (let (($x165 (and $x161 $x164)))
 (let (($x168 (and $x165 $x167)))
 (let (($x130 (and $x168 $x132)))
 (let (($x188 (and $x130 $x187)))
 (let (($x87 (and $x188 $x31)))
 (let (($x70 (and $x87 $x121)))
 (let (($x53 (and $x70 $x11)))
 (let (($x192 (and $x53 $x191)))
 (let (($x196 (and $x192 $x195)))
 (let (($x104 (and $x196 $x77)))
 (let (($x131 (and $x104 $x136)))
 (let (($x35 (and $x131 $x74)))
 (let (($x137 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x60 (and (not $x137) $x35)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x63 (and $x36 $x60)))
 (let (($x115 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x41 (and $x115 $x63)))
 (let (($x97 (forall ((Lambda32 (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x59 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x59 (_ bv1 32))))
 (=> $x51 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x90 (forall ((Lambda32 (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x59 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x59 (_ bv1 32))))
 (= $x51 false)))))
 ))
 (let (($x107 (forall ((Lambda32 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x44 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x59 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x59 (_ bv0 32))))
 (=> $x98 $x33))))))
 ))
 (let (($x67 (forall ((Lambda32 (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x59 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x59 (_ bv0 32))))
 (= $x98 true)))))
 ))
 (let (($x134 (and $x67 $x107)))
 (let (($x99 (and $x134 $x90)))
 (let (($x113 (and $x99 $x97)))
 (let (($x76 (and $x113 $x41)))
 (let (($x65 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x127 (and $x65 $x76)))
 (let (($x80 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x71 (and $x80 $x127)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x108 (and $x46 $x71)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x40 (and $x17 $x108)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x64 (and $x23 $x40)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x9 (and $x30 $x64)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x100 (and $x37 $x9)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x83 (and $x66 $x100)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x157 (and $x13 $x83)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x43 (and $x28 $x157)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x39 (and $x78 $x43)))
 (let (($x48 (=> $x39 $x103)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x84 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x14 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x7 (ite $x14 ?x84 (_ bv0 32))))
 (let ((?x56 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x57 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x79 (ite $x57 ?x56 ?x7)))
 (let (($x122 (bvule ?x79 (_ bv9 32))))
 (let (($x91 (= $x122 true)))
 (let (($x94 (= $x91 true)))
 (let ((?x64 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x64)))
 (let (($x83 (= ?x9 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x157 (= $x83 true)))
 (let ((?x76 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x76)))
 (let (($x71 (= ?x127 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x71 true)))
 (let (($x35 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x60 (= $x35 true)))
 (let (($x63 (= $x60 true)))
 (let (($x55 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x88 (= $x55 true)))
 (let (($x5 (= $x88 true)))
 (let (($x101 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x136 (= $x101 true)))
 (let (($x131 (= $x136 true)))
 (let (($x77 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv4 32))))
 (let (($x104 (= $x77 true)))
 (let (($x52 (= $x104 true)))
 (let (($x195 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv9 32))))
 (let (($x196 (= $x195 true)))
 (let (($x197 (= $x196 true)))
 (let (($x191 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv9 32))))
 (let (($x192 (= $x191 true)))
 (let (($x193 (= $x192 true)))
 (let (($x11 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv4 32))))
 (let (($x53 (= $x11 true)))
 (let (($x189 (= $x53 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x42)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x26 $x92)))
 (let (($x87 (and $x118 $x31)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x185 $x87)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x109)))))))
 (let (($x117 (and $x12 $x116)))
 (let (($x121 (= $x117 true)))
 (let (($x70 (= $x121 true)))
 (let (($x179 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x180 (= $x179 true)))
 (let (($x181 (= $x180 true)))
 (let (($x176 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x177 (= $x176 true)))
 (let (($x175 (= $x177 true)))
 (let ((?x163 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x163)))
 (let (($x173 (= ?x166 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x183 (= $x173 true)))
 (let (($x167 (= ?x166 input.dst.llvm-%n)))
 (let (($x168 (= $x167 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x171 (= $x161 true)))
 (let (($x162 (= $x171 true)))
 (let (($x153 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let (($x149 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x160 (and $x151 $x155)))
 (let (($x164 (and $x160 $x162)))
 (let (($x159 (and $x164 $x168)))
 (let (($x174 (and $x159 $x183)))
 (let (($x178 (and $x174 $x175)))
 (let (($x182 (and $x178 $x181)))
 (let (($x49 (and $x182 $x70)))
 (let (($x190 (and $x49 $x189)))
 (let (($x194 (and $x190 $x193)))
 (let (($x198 (and $x194 $x197)))
 (let (($x72 (and $x198 $x52)))
 (let (($x133 (and $x72 $x131)))
 (let (($x74 (and $x133 $x5)))
 (let (($x41 (and $x74 $x63)))
 (let (($x40 (and $x41 $x108)))
 (let (($x43 (and $x40 $x157)))
 (let (($x146 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x119 (and (not $x146) $x43)))
 (let (($x144 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x125 (and $x144 $x119)))
 (let (($x141 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x102 (and $x141 $x125)))
 (let (($x138 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x105 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x105 (_ bv1 32))))
 (=> $x113 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x115 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x105 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x105 (_ bv1 32))))
 (= $x113 false)))))
 ))
 (let (($x34 (forall ((Lambda32 (_ BitVec 32)) )(let (($x110 (= false false)))
 (let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x105 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x105 (_ bv0 32))))
 (=> $x107 $x110))))))
 ))
 (let (($x51 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x105 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x105 (_ bv0 32))))
 (= $x107 true)))))
 ))
 (let (($x120 (and $x51 $x34)))
 (let (($x10 (and $x120 $x115)))
 (let (($x139 (and $x10 $x138)))
 (let (($x86 (and $x139 $x102)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x129 (and $x24 $x86)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x58 (and $x8 $x129)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x45 (and $x15 $x58)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x18 (and $x6 $x45)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x103 (and $x27 $x18)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x48 (and $x21 $x103)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x50 (and $x29 $x48)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x170 (and $x69 $x50)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x54 (and $x22 $x170)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x68 (and $x123 $x54)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x93 (and $x156 $x68)))
 (let (($x199 (=> $x93 $x94)))
 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x84 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x14 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x7 (ite $x14 ?x84 (_ bv0 32))))
 (let ((?x56 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x57 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x79 (ite $x57 ?x56 ?x7)))
 (let (($x122 (bvule ?x79 (_ bv9 32))))
 (let (($x91 (= $x122 true)))
 (let (($x94 (= $x91 true)))
 (let ((?x64 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x64)))
 (let (($x83 (= ?x9 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x157 (= $x83 true)))
 (let ((?x76 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x76)))
 (let (($x71 (= ?x127 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x71 true)))
 (let (($x35 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x60 (= $x35 true)))
 (let (($x63 (= $x60 true)))
 (let (($x55 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x88 (= $x55 true)))
 (let (($x5 (= $x88 true)))
 (let (($x101 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x136 (= $x101 true)))
 (let (($x131 (= $x136 true)))
 (let (($x77 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv4 32))))
 (let (($x104 (= $x77 true)))
 (let (($x52 (= $x104 true)))
 (let (($x195 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv9 32))))
 (let (($x196 (= $x195 true)))
 (let (($x197 (= $x196 true)))
 (let (($x191 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv9 32))))
 (let (($x192 (= $x191 true)))
 (let (($x193 (= $x192 true)))
 (let (($x11 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv4 32))))
 (let (($x53 (= $x11 true)))
 (let (($x189 (= $x53 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x42)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x26 $x92)))
 (let (($x87 (and $x118 $x31)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x185 $x87)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x109)))))))
 (let (($x117 (and $x12 $x116)))
 (let (($x121 (= $x117 true)))
 (let (($x70 (= $x121 true)))
 (let (($x179 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x180 (= $x179 true)))
 (let (($x181 (= $x180 true)))
 (let (($x176 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x177 (= $x176 true)))
 (let (($x175 (= $x177 true)))
 (let ((?x163 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x163)))
 (let (($x173 (= ?x166 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x183 (= $x173 true)))
 (let (($x167 (= ?x166 input.dst.llvm-%n)))
 (let (($x168 (= $x167 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x171 (= $x161 true)))
 (let (($x162 (= $x171 true)))
 (let (($x153 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let (($x149 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x160 (and $x151 $x155)))
 (let (($x164 (and $x160 $x162)))
 (let (($x159 (and $x164 $x168)))
 (let (($x174 (and $x159 $x183)))
 (let (($x178 (and $x174 $x175)))
 (let (($x182 (and $x178 $x181)))
 (let (($x49 (and $x182 $x70)))
 (let (($x190 (and $x49 $x189)))
 (let (($x194 (and $x190 $x193)))
 (let (($x198 (and $x194 $x197)))
 (let (($x72 (and $x198 $x52)))
 (let (($x133 (and $x72 $x131)))
 (let (($x74 (and $x133 $x5)))
 (let (($x41 (and $x74 $x63)))
 (let (($x40 (and $x41 $x108)))
 (let (($x43 (and $x40 $x157)))
 (let (($x146 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x119 (and (not $x146) $x43)))
 (let (($x144 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x125 (and $x144 $x119)))
 (let (($x141 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x102 (and $x141 $x125)))
 (let (($x138 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x105 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x105 (_ bv1 32))))
 (=> $x113 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x115 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x105 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x105 (_ bv1 32))))
 (= $x113 false)))))
 ))
 (let (($x34 (forall ((Lambda32 (_ BitVec 32)) )(let (($x110 (= false false)))
 (let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x105 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x105 (_ bv0 32))))
 (=> $x107 $x110))))))
 ))
 (let (($x51 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x105 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x105 (_ bv0 32))))
 (= $x107 true)))))
 ))
 (let (($x120 (and $x51 $x34)))
 (let (($x10 (and $x120 $x115)))
 (let (($x139 (and $x10 $x138)))
 (let (($x86 (and $x139 $x102)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x129 (and $x24 $x86)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x58 (and $x8 $x129)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x45 (and $x15 $x58)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x18 (and $x6 $x45)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x103 (and $x27 $x18)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x48 (and $x21 $x103)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x50 (and $x29 $x48)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x170 (and $x69 $x50)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x54 (and $x22 $x170)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x68 (and $x123 $x54)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x93 (and $x156 $x68)))
 (let (($x199 (=> $x93 $x94)))
 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00f000c0)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00f000c3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00f000c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x126 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x19 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x67 (ite $x19 ?x126 (_ bv0 32))))
 (let ((?x128 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x65 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x33 (ite $x65 ?x128 ?x67)))
 (let (($x90 (bvule ?x33 (_ bv10 32))))
 (let (($x95 (= $x90 true)))
 (let (($x97 (= $x95 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x45)))
 (let (($x48 (= ?x18 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x48 true)))
 (let ((?x125 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x125)))
 (let (($x86 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x86 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x157 (= $x83 true)))
 (let (($x43 (= $x157 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x64 (= $x40 true)))
 (let (($x9 (= $x64 true)))
 (let (($x76 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x127 (= $x76 true)))
 (let (($x71 (= $x127 true)))
 (let (($x35 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv10 32))))
 (let (($x60 (= $x35 true)))
 (let (($x63 (= $x60 true)))
 (let (($x55 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv10 32))))
 (let (($x88 (= $x55 true)))
 (let (($x5 (= $x88 true)))
 (let (($x101 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv10 32))))
 (let (($x136 (= $x101 true)))
 (let (($x131 (= $x136 true)))
 (let (($x198 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv10 32))))
 (let (($x77 (= $x198 true)))
 (let (($x104 (= $x77 true)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x190)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x49 $x53)))
 (let (($x192 (and $x189 $x191)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x158 $x192)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x42)))))))
 (let (($x194 (and $x70 $x193)))
 (let (($x195 (= $x194 true)))
 (let (($x196 (= $x195 true)))
 (let (($x16 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x109 (= $x16 true)))
 (let (($x111 (= $x109 true)))
 (let (($x130 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x114 (= $x130 true)))
 (let (($x73 (= $x114 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x175)))
 (let (($x182 (= ?x178 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x186 (= $x182 true)))
 (let (($x179 (= ?x178 input.dst.llvm-%n)))
 (let (($x180 (= $x179 true)))
 (let (($x173 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x183 (= $x173 true)))
 (let (($x174 (= $x183 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x167 (= $x166 true)))
 (let (($x168 (= $x167 true)))
 (let (($x164 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x165 (= $x164 true)))
 (let (($x163 (= $x165 true)))
 (let (($x159 (and $x163 $x168)))
 (let (($x176 (and $x159 $x174)))
 (let (($x181 (and $x176 $x180)))
 (let (($x82 (and $x181 $x186)))
 (let (($x75 (and $x82 $x73)))
 (let (($x106 (and $x75 $x111)))
 (let (($x197 (and $x106 $x196)))
 (let (($x52 (and $x197 $x104)))
 (let (($x133 (and $x52 $x131)))
 (let (($x74 (and $x133 $x5)))
 (let (($x41 (and $x74 $x63)))
 (let (($x108 (and $x41 $x71)))
 (let (($x100 (and $x108 $x9)))
 (let (($x119 (and $x100 $x43)))
 (let (($x58 (and $x119 $x129)))
 (let (($x170 (and $x58 $x50)))
 (let (($x161 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x68 (and (not $x161) $x170)))
 (let (($x155 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x93 (and $x155 $x68)))
 (let (($x152 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x57 (and $x152 $x93)))
 (let (($x149 (forall ((Lambda32 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x99 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x99 (_ bv1 32))))
 (=> $x139 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x141 (forall ((Lambda32 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x99 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x99 (_ bv1 32))))
 (= $x139 false)))))
 ))
 (let (($x36 (forall ((Lambda32 (_ BitVec 32)) )(let (($x112 (= false false)))
 (let (($x105 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x99 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x99 (_ bv0 32))))
 (=> $x34 $x112))))))
 ))
 (let (($x113 (forall ((Lambda32 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x99 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x99 (_ bv0 32))))
 (= $x34 true)))))
 ))
 (let (($x61 (and $x113 $x36)))
 (let (($x142 (and $x61 $x141)))
 (let (($x150 (and $x142 $x149)))
 (let (($x56 (and $x150 $x57)))
 (let (($x20 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x14 (and $x20 $x56)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x84 (and $x46 $x14)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x7 (and $x17 $x84)))
 (let (($x62 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x79 (and $x62 $x7)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x122 (and $x96 $x79)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x91 (and $x37 $x122)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x94 (and $x66 $x91)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x199 (and $x13 $x94)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x89 (and $x28 $x199)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x172 (and $x78 $x89)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x98 (and $x169 $x172)))
 (let (($x135 (=> $x98 $x97)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x126 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x19 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x67 (ite $x19 ?x126 (_ bv0 32))))
 (let ((?x128 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x65 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x33 (ite $x65 ?x128 ?x67)))
 (let (($x90 (bvule ?x33 (_ bv10 32))))
 (let (($x95 (= $x90 true)))
 (let (($x97 (= $x95 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x45)))
 (let (($x48 (= ?x18 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x48 true)))
 (let ((?x125 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x125)))
 (let (($x86 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x86 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x157 (= $x83 true)))
 (let (($x43 (= $x157 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x64 (= $x40 true)))
 (let (($x9 (= $x64 true)))
 (let (($x76 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x127 (= $x76 true)))
 (let (($x71 (= $x127 true)))
 (let (($x35 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv10 32))))
 (let (($x60 (= $x35 true)))
 (let (($x63 (= $x60 true)))
 (let (($x55 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv10 32))))
 (let (($x88 (= $x55 true)))
 (let (($x5 (= $x88 true)))
 (let (($x101 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv10 32))))
 (let (($x136 (= $x101 true)))
 (let (($x131 (= $x136 true)))
 (let (($x198 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv10 32))))
 (let (($x77 (= $x198 true)))
 (let (($x104 (= $x77 true)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x190)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x49 $x53)))
 (let (($x192 (and $x189 $x191)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x158 $x192)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x42)))))))
 (let (($x194 (and $x70 $x193)))
 (let (($x195 (= $x194 true)))
 (let (($x196 (= $x195 true)))
 (let (($x16 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x109 (= $x16 true)))
 (let (($x111 (= $x109 true)))
 (let (($x130 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x114 (= $x130 true)))
 (let (($x73 (= $x114 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x175)))
 (let (($x182 (= ?x178 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x186 (= $x182 true)))
 (let (($x179 (= ?x178 input.dst.llvm-%n)))
 (let (($x180 (= $x179 true)))
 (let (($x173 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x183 (= $x173 true)))
 (let (($x174 (= $x183 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x167 (= $x166 true)))
 (let (($x168 (= $x167 true)))
 (let (($x164 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x165 (= $x164 true)))
 (let (($x163 (= $x165 true)))
 (let (($x159 (and $x163 $x168)))
 (let (($x176 (and $x159 $x174)))
 (let (($x181 (and $x176 $x180)))
 (let (($x82 (and $x181 $x186)))
 (let (($x75 (and $x82 $x73)))
 (let (($x106 (and $x75 $x111)))
 (let (($x197 (and $x106 $x196)))
 (let (($x52 (and $x197 $x104)))
 (let (($x133 (and $x52 $x131)))
 (let (($x74 (and $x133 $x5)))
 (let (($x41 (and $x74 $x63)))
 (let (($x108 (and $x41 $x71)))
 (let (($x100 (and $x108 $x9)))
 (let (($x119 (and $x100 $x43)))
 (let (($x58 (and $x119 $x129)))
 (let (($x170 (and $x58 $x50)))
 (let (($x161 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x68 (and (not $x161) $x170)))
 (let (($x155 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x93 (and $x155 $x68)))
 (let (($x152 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x57 (and $x152 $x93)))
 (let (($x149 (forall ((Lambda32 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x99 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x99 (_ bv1 32))))
 (=> $x139 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x141 (forall ((Lambda32 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x99 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x99 (_ bv1 32))))
 (= $x139 false)))))
 ))
 (let (($x36 (forall ((Lambda32 (_ BitVec 32)) )(let (($x112 (= false false)))
 (let (($x105 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x99 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x99 (_ bv0 32))))
 (=> $x34 $x112))))))
 ))
 (let (($x113 (forall ((Lambda32 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x99 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x99 (_ bv0 32))))
 (= $x34 true)))))
 ))
 (let (($x61 (and $x113 $x36)))
 (let (($x142 (and $x61 $x141)))
 (let (($x150 (and $x142 $x149)))
 (let (($x56 (and $x150 $x57)))
 (let (($x20 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x14 (and $x20 $x56)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x84 (and $x46 $x14)))
 (let (($x17 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x7 (and $x17 $x84)))
 (let (($x62 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x79 (and $x62 $x7)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x122 (and $x96 $x79)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x91 (and $x37 $x122)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x94 (and $x66 $x91)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x199 (and $x13 $x94)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x89 (and $x28 $x199)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x172 (and $x78 $x89)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x98 (and $x169 $x172)))
 (let (($x135 (=> $x98 $x97)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0b000018)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0b00001b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0b000018)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x79 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x91 (ite $x79 ?x122 (_ bv0 32))))
 (let ((?x7 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x84 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x94 (ite $x84 ?x7 ?x91)))
 (let (($x199 (bvuge ?x94 (_ bv1 32))))
 (let (($x89 (= $x199 true)))
 (let (($x172 (= $x89 true)))
 (let ((?x9 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x9)))
 (let (($x157 (= ?x100 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x157 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x127)))
 (let (($x108 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x108 true)))
 (let (($x60 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x63 (= $x60 true)))
 (let (($x41 (= $x63 true)))
 (let (($x88 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x5 (= $x88 true)))
 (let (($x74 (= $x5 true)))
 (let (($x136 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x131 (= $x136 true)))
 (let (($x133 (= $x131 true)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x195)))
 (let ((?x192 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x192)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x190 $x193)))
 (let (($x197 (and $x194 $x196)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x188 $x197)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x12)))))))
 (let (($x77 (and $x189 $x198)))
 (let (($x104 (= $x77 true)))
 (let (($x52 (= $x104 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x185 (= $x106 true)))
 (let (($x26 (= $x185 true)))
 (let (($x75 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x16 (= $x75 true)))
 (let (($x109 (= $x16 true)))
 (let ((?x180 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x180)))
 (let (($x130 (= ?x181 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x114 (= $x130 true)))
 (let (($x182 (= ?x181 input.dst.llvm-%n)))
 (let (($x186 (= $x182 true)))
 (let (($x177 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (= $x177 true)))
 (let (($x178 (= $x175 true)))
 (let (($x82 (and $x178 $x186)))
 (let (($x73 (and $x82 $x114)))
 (let (($x111 (and $x73 $x109)))
 (let (($x121 (and $x111 $x26)))
 (let (($x72 (and $x121 $x52)))
 (let (($x55 (and $x72 $x133)))
 (let (($x35 (and $x55 $x74)))
 (let (($x76 (and $x35 $x41)))
 (let (($x64 (and $x76 $x40)))
 (let (($x119 (and $x64 $x43)))
 (let (($x183 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x102 (and (not $x183) $x119)))
 (let (($x159 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x86 (and $x159 $x102)))
 (let (($x166 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x129 (and $x166 $x86)))
 (let (($x164 (forall ((Lambda32 (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x10 (_ bv1 32))))
 (=> $x150 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x152 (forall ((Lambda32 (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x10 (_ bv1 32))))
 (= $x150 false)))))
 ))
 (let (($x144 (forall ((Lambda32 (_ BitVec 32)) )(let (($x140 (= false false)))
 (let (($x99 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x10 (_ bv0 32))))
 (=> $x36 $x140))))))
 ))
 (let (($x139 (forall ((Lambda32 (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x10 (_ bv0 32))))
 (= $x36 true)))))
 ))
 (let (($x147 (and $x139 $x144)))
 (let (($x153 (and $x147 $x152)))
 (let (($x165 (and $x153 $x164)))
 (let (($x58 (and $x165 $x129)))
 (let (($x80 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x45 (and $x80 $x58)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x18 (and $x15 $x45)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x103 (and $x6 $x18)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x48 (and $x23 $x103)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x50 (and $x30 $x48)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x170 (and $x29 $x50)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x68 (and $x69 $x170)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x93 (and $x22 $x68)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x57 (and $x123 $x93)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x56 (and $x156 $x57)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x14 (and $x184 $x56)))
 (let (($x98 (=> $x14 $x172)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x79 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x91 (ite $x79 ?x122 (_ bv0 32))))
 (let ((?x7 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x84 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x94 (ite $x84 ?x7 ?x91)))
 (let (($x199 (bvuge ?x94 (_ bv1 32))))
 (let (($x89 (= $x199 true)))
 (let (($x172 (= $x89 true)))
 (let ((?x9 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x9)))
 (let (($x157 (= ?x100 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x157 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x127)))
 (let (($x108 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x108 true)))
 (let (($x60 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x63 (= $x60 true)))
 (let (($x41 (= $x63 true)))
 (let (($x88 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x5 (= $x88 true)))
 (let (($x74 (= $x5 true)))
 (let (($x136 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x131 (= $x136 true)))
 (let (($x133 (= $x131 true)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x195)))
 (let ((?x192 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x192)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x190 $x193)))
 (let (($x197 (and $x194 $x196)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x188 $x197)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x12)))))))
 (let (($x77 (and $x189 $x198)))
 (let (($x104 (= $x77 true)))
 (let (($x52 (= $x104 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x185 (= $x106 true)))
 (let (($x26 (= $x185 true)))
 (let (($x75 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x16 (= $x75 true)))
 (let (($x109 (= $x16 true)))
 (let ((?x180 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x180)))
 (let (($x130 (= ?x181 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x114 (= $x130 true)))
 (let (($x182 (= ?x181 input.dst.llvm-%n)))
 (let (($x186 (= $x182 true)))
 (let (($x177 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (= $x177 true)))
 (let (($x178 (= $x175 true)))
 (let (($x82 (and $x178 $x186)))
 (let (($x73 (and $x82 $x114)))
 (let (($x111 (and $x73 $x109)))
 (let (($x121 (and $x111 $x26)))
 (let (($x72 (and $x121 $x52)))
 (let (($x55 (and $x72 $x133)))
 (let (($x35 (and $x55 $x74)))
 (let (($x76 (and $x35 $x41)))
 (let (($x64 (and $x76 $x40)))
 (let (($x119 (and $x64 $x43)))
 (let (($x183 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x102 (and (not $x183) $x119)))
 (let (($x159 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x86 (and $x159 $x102)))
 (let (($x166 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x129 (and $x166 $x86)))
 (let (($x164 (forall ((Lambda32 (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x10 (_ bv1 32))))
 (=> $x150 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x152 (forall ((Lambda32 (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x10 (_ bv1 32))))
 (= $x150 false)))))
 ))
 (let (($x144 (forall ((Lambda32 (_ BitVec 32)) )(let (($x140 (= false false)))
 (let (($x99 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x10 (_ bv0 32))))
 (=> $x36 $x140))))))
 ))
 (let (($x139 (forall ((Lambda32 (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x10 (_ bv0 32))))
 (= $x36 true)))))
 ))
 (let (($x147 (and $x139 $x144)))
 (let (($x153 (and $x147 $x152)))
 (let (($x165 (and $x153 $x164)))
 (let (($x58 (and $x165 $x129)))
 (let (($x80 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x45 (and $x80 $x58)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x18 (and $x15 $x45)))
 (let (($x6 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x103 (and $x6 $x18)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x48 (and $x23 $x103)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x50 (and $x30 $x48)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x170 (and $x29 $x50)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x68 (and $x69 $x170)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x93 (and $x22 $x68)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x57 (and $x123 $x93)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x56 (and $x156 $x57)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x14 (and $x184 $x56)))
 (let (($x98 (=> $x14 $x172)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 151 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x120 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x112 (ite $x120 ?x113 (_ bv0 32))))
 (let ((?x59 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x160 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x141 (ite $x160 ?x59 ?x112)))
 (let (($x148 (bvsge ?x141 (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x154 (= $x149 true)))
 (let ((?x48 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x48)))
 (let (($x68 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x68 true)))
 (let ((?x129 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x129)))
 (let (($x45 (= ?x58 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x45 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x119 (= $x43 true)))
 (let (($x102 (= $x119 true)))
 (let (($x9 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x100 (= $x9 true)))
 (let (($x83 (= $x100 true)))
 (let (($x71 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x108 (= $x71 true)))
 (let (($x40 (= $x108 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x88)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x101 $x133)))
 (let (($x74 (and $x55 $x5)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x188 $x74)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x195 $x196)))))))
 (let (($x60 (and $x72 $x35)))
 (let (($x63 (= $x60 true)))
 (let (($x41 (= $x63 true)))
 (let (($x12 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x158 (= $x12 true)))
 (let (($x49 (= $x158 true)))
 (let (($x87 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x117 (= $x87 true)))
 (let (($x70 (= $x117 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x111)))
 (let (($x42 (= ?x106 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x31 (= $x42 true)))
 (let (($x185 (= ?x106 input.dst.llvm-%n)))
 (let (($x26 (= $x185 true)))
 (let (($x73 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x75 (= $x73 true)))
 (let (($x16 (= $x75 true)))
 (let (($x121 (and $x16 $x26)))
 (let (($x53 (and $x121 $x31)))
 (let (($x116 (and $x53 $x70)))
 (let (($x25 (and $x116 $x49)))
 (let (($x76 (and $x25 $x41)))
 (let (($x64 (and $x76 $x40)))
 (let (($x157 (and $x64 $x83)))
 (let (($x86 (and $x157 $x102)))
 (let (($x103 (and $x86 $x18)))
 (let (($x57 (and $x103 $x93)))
 (let (($x82 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x14 (and (not $x82) $x57)))
 (let (($x182 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x84 (and $x182 $x14)))
 (let (($x179 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x7 (and $x179 $x84)))
 (let (($x177 (forall ((Lambda32 (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x142 (_ bv1 32))))
 (=> $x165 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x166 (forall ((Lambda32 (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x142 (_ bv1 32))))
 (= $x165 false)))))
 ))
 (let (($x155 (forall ((Lambda32 (_ BitVec 32)) )(let (($x151 (= false false)))
 (let (($x10 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x142 (_ bv0 32))))
 (=> $x144 $x151))))))
 ))
 (let (($x150 (forall ((Lambda32 (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x142 (_ bv0 32))))
 (= $x144 true)))))
 ))
 (let (($x171 (and $x150 $x155)))
 (let (($x167 (and $x171 $x166)))
 (let (($x175 (and $x167 $x177)))
 (let (($x79 (and $x175 $x7)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x122 (and $x8 $x79)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x91 (and $x17 $x122)))
 (let (($x62 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x94 (and $x62 $x91)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x199 (and $x27 $x94)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x89 (and $x21 $x199)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x172 (and $x66 $x89)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x98 (and $x13 $x172)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x65 (and $x28 $x98)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x92 (and $x78 $x65)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x34 (and $x169 $x92)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x20 (and $x124 $x34)))
 (let (($x161 (=> $x20 $x154)))
 (not $x161)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x120 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x112 (ite $x120 ?x113 (_ bv0 32))))
 (let ((?x59 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x160 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x141 (ite $x160 ?x59 ?x112)))
 (let (($x148 (bvsge ?x141 (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x154 (= $x149 true)))
 (let ((?x48 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x48)))
 (let (($x68 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x68 true)))
 (let ((?x129 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x129)))
 (let (($x45 (= ?x58 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x45 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x119 (= $x43 true)))
 (let (($x102 (= $x119 true)))
 (let (($x9 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x100 (= $x9 true)))
 (let (($x83 (= $x100 true)))
 (let (($x71 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x108 (= $x71 true)))
 (let (($x40 (= $x108 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x88)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x101 $x133)))
 (let (($x74 (and $x55 $x5)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x188 $x74)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x195 $x196)))))))
 (let (($x60 (and $x72 $x35)))
 (let (($x63 (= $x60 true)))
 (let (($x41 (= $x63 true)))
 (let (($x12 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x158 (= $x12 true)))
 (let (($x49 (= $x158 true)))
 (let (($x87 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x117 (= $x87 true)))
 (let (($x70 (= $x117 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x111)))
 (let (($x42 (= ?x106 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x31 (= $x42 true)))
 (let (($x185 (= ?x106 input.dst.llvm-%n)))
 (let (($x26 (= $x185 true)))
 (let (($x73 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x75 (= $x73 true)))
 (let (($x16 (= $x75 true)))
 (let (($x121 (and $x16 $x26)))
 (let (($x53 (and $x121 $x31)))
 (let (($x116 (and $x53 $x70)))
 (let (($x25 (and $x116 $x49)))
 (let (($x76 (and $x25 $x41)))
 (let (($x64 (and $x76 $x40)))
 (let (($x157 (and $x64 $x83)))
 (let (($x86 (and $x157 $x102)))
 (let (($x103 (and $x86 $x18)))
 (let (($x57 (and $x103 $x93)))
 (let (($x82 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x14 (and (not $x82) $x57)))
 (let (($x182 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x84 (and $x182 $x14)))
 (let (($x179 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x7 (and $x179 $x84)))
 (let (($x177 (forall ((Lambda32 (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x142 (_ bv1 32))))
 (=> $x165 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x166 (forall ((Lambda32 (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x142 (_ bv1 32))))
 (= $x165 false)))))
 ))
 (let (($x155 (forall ((Lambda32 (_ BitVec 32)) )(let (($x151 (= false false)))
 (let (($x10 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x142 (_ bv0 32))))
 (=> $x144 $x151))))))
 ))
 (let (($x150 (forall ((Lambda32 (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x142 (_ bv0 32))))
 (= $x144 true)))))
 ))
 (let (($x171 (and $x150 $x155)))
 (let (($x167 (and $x171 $x166)))
 (let (($x175 (and $x167 $x177)))
 (let (($x79 (and $x175 $x7)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x122 (and $x8 $x79)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x91 (and $x17 $x122)))
 (let (($x62 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x94 (and $x62 $x91)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x199 (and $x27 $x94)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x89 (and $x21 $x199)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x172 (and $x66 $x89)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x98 (and $x13 $x172)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x65 (and $x28 $x98)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x92 (and $x78 $x65)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x34 (and $x169 $x92)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x20 (and $x124 $x34)))
 (let (($x161 (=> $x20 $x154)))
 (not $x161)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000001fc)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000001ff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000001fc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x161 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x154 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x54 (ite $x154 ?x161 (_ bv0 32))))
 (let ((?x149 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x148 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x189 (ite $x148 ?x149 ?x54)))
 (let (($x36 (bvsge ?x189 (_ bv0 32))))
 (let (($x80 (= $x36 true)))
 (let (($x173 (= $x80 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x57)))
 (let (($x7 (= ?x14 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x7 true)))
 (let ((?x48 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x48)))
 (let (($x170 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x170 true)))
 (let (($x58 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x45 (= $x58 true)))
 (let (($x18 (= $x45 true)))
 (let (($x119 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x102 (= $x119 true)))
 (let (($x86 (= $x102 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x71)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x60 $x76)))
 (let (($x40 (and $x127 $x108)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x77 $x40)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x136 $x131)))))))
 (let (($x9 (and $x35 $x64)))
 (let (($x100 (= $x9 true)))
 (let (($x83 (= $x100 true)))
 (let (($x192 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x194 (= $x192 true)))
 (let (($x195 (= $x194 true)))
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x116)))
 (let (($x190 (= ?x12 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x191 (= $x190 true)))
 (let (($x158 (= ?x12 input.dst.llvm-%n)))
 (let (($x49 (= $x158 true)))
 (let (($x53 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x87 (= $x53 true)))
 (let (($x117 (= $x87 true)))
 (let (($x25 (and $x117 $x49)))
 (let (($x52 (and $x25 $x191)))
 (let (($x193 (and $x52 $x195)))
 (let (($x157 (and $x193 $x83)))
 (let (($x129 (and $x157 $x86)))
 (let (($x103 (and $x129 $x18)))
 (let (($x93 (and $x103 $x68)))
 (let (($x122 (and $x93 $x79)))
 (let (($x121 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x94 (and (not $x121) $x122)))
 (let (($x185 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x199 (and $x185 $x94)))
 (let (($x109 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x89 (and $x109 $x199)))
 (let (($x73 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x153 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x153 (_ bv1 32))))
 (=> $x175 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x179 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x153 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x153 (_ bv1 32))))
 (= $x175 false)))))
 ))
 (let (($x159 (forall ((Lambda32 (_ BitVec 32)) )(let (($x163 (= false false)))
 (let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x153 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x153 (_ bv0 32))))
 (=> $x155 $x163))))))
 ))
 (let (($x165 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x153 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x153 (_ bv0 32))))
 (= $x155 true)))))
 ))
 (let (($x174 (and $x165 $x159)))
 (let (($x180 (and $x174 $x179)))
 (let (($x75 (and $x180 $x73)))
 (let (($x172 (and $x75 $x89)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x98 (and $x46 $x172)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x65 (and $x6 $x98)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x92 (and $x23 $x65)))
 (let (($x96 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x34 (and $x96 $x92)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x20 (and $x37 $x34)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x160 (and $x69 $x20)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x59 (and $x22 $x160)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x120 (and $x123 $x59)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x113 (and $x156 $x120)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x112 (and $x184 $x113)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x141 (and $x187 $x112)))
 (let (($x105 (=> $x141 $x173)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x161 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x154 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x54 (ite $x154 ?x161 (_ bv0 32))))
 (let ((?x149 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x148 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x189 (ite $x148 ?x149 ?x54)))
 (let (($x36 (bvsge ?x189 (_ bv0 32))))
 (let (($x80 (= $x36 true)))
 (let (($x173 (= $x80 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x57)))
 (let (($x7 (= ?x14 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x7 true)))
 (let ((?x48 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x48)))
 (let (($x170 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x170 true)))
 (let (($x58 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x45 (= $x58 true)))
 (let (($x18 (= $x45 true)))
 (let (($x119 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x102 (= $x119 true)))
 (let (($x86 (= $x102 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x71)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x60 $x76)))
 (let (($x40 (and $x127 $x108)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x77 $x40)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x136 $x131)))))))
 (let (($x9 (and $x35 $x64)))
 (let (($x100 (= $x9 true)))
 (let (($x83 (= $x100 true)))
 (let (($x192 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x194 (= $x192 true)))
 (let (($x195 (= $x194 true)))
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x116)))
 (let (($x190 (= ?x12 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x191 (= $x190 true)))
 (let (($x158 (= ?x12 input.dst.llvm-%n)))
 (let (($x49 (= $x158 true)))
 (let (($x53 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x87 (= $x53 true)))
 (let (($x117 (= $x87 true)))
 (let (($x25 (and $x117 $x49)))
 (let (($x52 (and $x25 $x191)))
 (let (($x193 (and $x52 $x195)))
 (let (($x157 (and $x193 $x83)))
 (let (($x129 (and $x157 $x86)))
 (let (($x103 (and $x129 $x18)))
 (let (($x93 (and $x103 $x68)))
 (let (($x122 (and $x93 $x79)))
 (let (($x121 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x94 (and (not $x121) $x122)))
 (let (($x185 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x199 (and $x185 $x94)))
 (let (($x109 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x89 (and $x109 $x199)))
 (let (($x73 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x153 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x153 (_ bv1 32))))
 (=> $x175 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x179 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x153 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x153 (_ bv1 32))))
 (= $x175 false)))))
 ))
 (let (($x159 (forall ((Lambda32 (_ BitVec 32)) )(let (($x163 (= false false)))
 (let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x153 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x153 (_ bv0 32))))
 (=> $x155 $x163))))))
 ))
 (let (($x165 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x153 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x153 (_ bv0 32))))
 (= $x155 true)))))
 ))
 (let (($x174 (and $x165 $x159)))
 (let (($x180 (and $x174 $x179)))
 (let (($x75 (and $x180 $x73)))
 (let (($x172 (and $x75 $x89)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x98 (and $x46 $x172)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x65 (and $x6 $x98)))
 (let (($x23 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x92 (and $x23 $x65)))
 (let (($x96 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x34 (and $x96 $x92)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x20 (and $x37 $x34)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x160 (and $x69 $x20)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x59 (and $x22 $x160)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x120 (and $x123 $x59)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x113 (and $x156 $x120)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x112 (and $x184 $x113)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x141 (and $x187 $x112)))
 (let (($x105 (=> $x141 $x173)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000208)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80800008)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x80000208)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80800008)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80800008)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x90000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x90000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x90000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x197 (bvuge ?x61 (_ bv1 32))))
 (let (($x144 (= $x197 true)))
 (let (($x8 (= $x144 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x98)))
 (let (($x92 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x34 (= $x92 true)))
 (let (($x94 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x199 (= $x94 true)))
 (let (($x89 (= $x199 true)))
 (let (($x84 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x7 (= $x84 true)))
 (let (($x79 (= $x7 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x18)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x102 $x58)))
 (let (($x48 (and $x45 $x103)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x63 $x48)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x64)))))))
 (let (($x170 (and $x119 $x50)))
 (let (($x68 (= $x170 true)))
 (let (($x93 (= $x68 true)))
 (let (($x55 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x88 (= $x55 true)))
 (let (($x5 (= $x88 true)))
 (let ((?x118 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x118)))
 (let (($x188 (= ?x101 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x188 true)))
 (let ((?x191 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x191)))
 (let (($x193 (= ?x52 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x104 (= $x193 true)))
 (let (($x194 (= ?x52 input.dst.llvm-%n)))
 (let (($x195 (= $x194 true)))
 (let (($x72 (and $x195 $x104)))
 (let (($x133 (and $x72 $x131)))
 (let (($x35 (and $x133 $x5)))
 (let (($x57 (and $x35 $x93)))
 (let (($x122 (and $x57 $x79)))
 (let (($x172 (and $x122 $x89)))
 (let (($x20 (and $x172 $x34)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x59 (and (not $x25) $x20)))
 (let (($x158 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x120 (and $x158 $x59)))
 (let (($x70 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x113 (and $x70 $x120)))
 (let (($x53 (forall ((Lambda32 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x167 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x167 (_ bv1 32))))
 (=> $x75 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x109 (forall ((Lambda32 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x167 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x167 (_ bv1 32))))
 (= $x75 false)))))
 ))
 (let (($x182 (forall ((Lambda32 (_ BitVec 32)) )(let (($x178 (= false false)))
 (let (($x153 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x167 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (= ?x167 (_ bv0 32))))
 (=> $x159 $x178))))))
 ))
 (let (($x175 (forall ((Lambda32 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x167 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (= ?x167 (_ bv0 32))))
 (= $x159 true)))))
 ))
 (let (($x130 (and $x175 $x182)))
 (let (($x111 (and $x130 $x109)))
 (let (($x87 (and $x111 $x53)))
 (let (($x112 (and $x87 $x113)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x141 (and $x15 $x112)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x148 (and $x62 $x141)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x149 (and $x27 $x148)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x154 (and $x30 $x149)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x161 (and $x29 $x154)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x54 (and $x13 $x161)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x189 (and $x28 $x54)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x36 (and $x78 $x189)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x80 (and $x169 $x36)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x173 (and $x124 $x80)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x105 (and $x11 $x173)))
 (let (($x186 (=> $x105 $x8)))
 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x197 (bvuge ?x61 (_ bv1 32))))
 (let (($x144 (= $x197 true)))
 (let (($x8 (= $x144 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x98)))
 (let (($x92 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x34 (= $x92 true)))
 (let (($x94 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x199 (= $x94 true)))
 (let (($x89 (= $x199 true)))
 (let (($x84 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x7 (= $x84 true)))
 (let (($x79 (= $x7 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x18)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x102 $x58)))
 (let (($x48 (and $x45 $x103)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x63 $x48)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x64)))))))
 (let (($x170 (and $x119 $x50)))
 (let (($x68 (= $x170 true)))
 (let (($x93 (= $x68 true)))
 (let (($x55 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x88 (= $x55 true)))
 (let (($x5 (= $x88 true)))
 (let ((?x118 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x118)))
 (let (($x188 (= ?x101 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x188 true)))
 (let ((?x191 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x191)))
 (let (($x193 (= ?x52 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x104 (= $x193 true)))
 (let (($x194 (= ?x52 input.dst.llvm-%n)))
 (let (($x195 (= $x194 true)))
 (let (($x72 (and $x195 $x104)))
 (let (($x133 (and $x72 $x131)))
 (let (($x35 (and $x133 $x5)))
 (let (($x57 (and $x35 $x93)))
 (let (($x122 (and $x57 $x79)))
 (let (($x172 (and $x122 $x89)))
 (let (($x20 (and $x172 $x34)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x59 (and (not $x25) $x20)))
 (let (($x158 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x120 (and $x158 $x59)))
 (let (($x70 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x113 (and $x70 $x120)))
 (let (($x53 (forall ((Lambda32 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x167 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x167 (_ bv1 32))))
 (=> $x75 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x109 (forall ((Lambda32 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x167 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x167 (_ bv1 32))))
 (= $x75 false)))))
 ))
 (let (($x182 (forall ((Lambda32 (_ BitVec 32)) )(let (($x178 (= false false)))
 (let (($x153 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x167 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (= ?x167 (_ bv0 32))))
 (=> $x159 $x178))))))
 ))
 (let (($x175 (forall ((Lambda32 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x167 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (= ?x167 (_ bv0 32))))
 (= $x159 true)))))
 ))
 (let (($x130 (and $x175 $x182)))
 (let (($x111 (and $x130 $x109)))
 (let (($x87 (and $x111 $x53)))
 (let (($x112 (and $x87 $x113)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x141 (and $x15 $x112)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x148 (and $x62 $x141)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x149 (and $x27 $x148)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x154 (and $x30 $x149)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x161 (and $x29 $x154)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x54 (and $x13 $x161)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x189 (and $x28 $x54)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x36 (and $x78 $x189)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x80 (and $x169 $x36)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x173 (and $x124 $x80)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x105 (and $x11 $x173)))
 (let (($x186 (=> $x105 $x8)))
 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x26 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x46 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x10 (ite $x46 ?x26 (_ bv0 32))))
 (let ((?x155 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x77 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x171 (ite $x77 ?x155 ?x10)))
 (let ((?x165 (bvmul (_ bv4294967295 32) ?x171)))
 (let ((?x163 (bvneg ?x165)))
 (let (($x114 (= ?x163 ?x179)))
 (let (($x73 (= $x114 true)))
 (let ((?x59 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x59)))
 (let (($x112 (= ?x120 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x112 true)))
 (let ((?x172 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x172)))
 (let (($x65 (= ?x98 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x65 true)))
 (let (($x122 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (= $x122 true)))
 (let (($x199 (= $x94 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x50)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x58 $x103)))
 (let (($x68 (and $x48 $x170)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x108 $x68)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x157)))))))
 (let (($x57 (and $x129 $x93)))
 (let (($x14 (= $x57 true)))
 (let (($x84 (= $x14 true)))
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x188)))
 (let (($x5 (= ?x131 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x35 (= $x5 true)))
 (let (($x55 (= ?x131 input.dst.llvm-%n)))
 (let (($x88 (= $x55 true)))
 (let (($x41 (and $x88 $x35)))
 (let (($x7 (and $x41 $x84)))
 (let (($x89 (and $x7 $x199)))
 (let (($x34 (and $x89 $x92)))
 (let (($x148 (and $x34 $x141)))
 (let (($x101 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x154 (and (not $x101) $x148)))
 (let (($x74 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (and $x74 $x154)))
 (let (($x193 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x54 (and $x193 $x161)))
 (let (($x192 (forall ((Lambda32 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x182 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x182 (_ bv1 32))))
 (=> $x117 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x116 (forall ((Lambda32 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x182 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x182 (_ bv1 32))))
 (= $x117 false)))))
 ))
 (let (($x42 (forall ((Lambda32 (_ BitVec 32)) )(let (($x109 (= false false)))
 (let (($x159 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x182 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x182 (_ bv0 32))))
 (=> $x130 $x109))))))
 ))
 (let (($x16 (forall ((Lambda32 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x182 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x182 (_ bv0 32))))
 (= $x130 true)))))
 ))
 (let (($x31 (and $x16 $x42)))
 (let (($x12 (and $x31 $x116)))
 (let (($x194 (and $x12 $x192)))
 (let (($x189 (and $x194 $x54)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x36 (and $x15 $x189)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x80 (and $x62 $x36)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x173 (and $x27 $x80)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x105 (and $x30 $x173)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x61 (and $x29 $x105)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x197 (and $x13 $x61)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x144 (and $x28 $x197)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x8 (and $x78 $x144)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x186 (and $x169 $x8)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x99 (and $x124 $x186)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x198 (and $x11 $x99)))
 (let (($x106 (=> $x198 $x73)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x26 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x46 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x10 (ite $x46 ?x26 (_ bv0 32))))
 (let ((?x155 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x77 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x171 (ite $x77 ?x155 ?x10)))
 (let ((?x165 (bvmul (_ bv4294967295 32) ?x171)))
 (let ((?x163 (bvneg ?x165)))
 (let (($x114 (= ?x163 ?x179)))
 (let (($x73 (= $x114 true)))
 (let ((?x59 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x59)))
 (let (($x112 (= ?x120 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x112 true)))
 (let ((?x172 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x172)))
 (let (($x65 (= ?x98 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x65 true)))
 (let (($x122 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (= $x122 true)))
 (let (($x199 (= $x94 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x50)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x58 $x103)))
 (let (($x68 (and $x48 $x170)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x108 $x68)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x157)))))))
 (let (($x57 (and $x129 $x93)))
 (let (($x14 (= $x57 true)))
 (let (($x84 (= $x14 true)))
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x188)))
 (let (($x5 (= ?x131 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x35 (= $x5 true)))
 (let (($x55 (= ?x131 input.dst.llvm-%n)))
 (let (($x88 (= $x55 true)))
 (let (($x41 (and $x88 $x35)))
 (let (($x7 (and $x41 $x84)))
 (let (($x89 (and $x7 $x199)))
 (let (($x34 (and $x89 $x92)))
 (let (($x148 (and $x34 $x141)))
 (let (($x101 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x154 (and (not $x101) $x148)))
 (let (($x74 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (and $x74 $x154)))
 (let (($x193 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x54 (and $x193 $x161)))
 (let (($x192 (forall ((Lambda32 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x182 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x182 (_ bv1 32))))
 (=> $x117 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x116 (forall ((Lambda32 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x182 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x182 (_ bv1 32))))
 (= $x117 false)))))
 ))
 (let (($x42 (forall ((Lambda32 (_ BitVec 32)) )(let (($x109 (= false false)))
 (let (($x159 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x182 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x182 (_ bv0 32))))
 (=> $x130 $x109))))))
 ))
 (let (($x16 (forall ((Lambda32 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x182 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x182 (_ bv0 32))))
 (= $x130 true)))))
 ))
 (let (($x31 (and $x16 $x42)))
 (let (($x12 (and $x31 $x116)))
 (let (($x194 (and $x12 $x192)))
 (let (($x189 (and $x194 $x54)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x36 (and $x15 $x189)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x80 (and $x62 $x36)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x173 (and $x27 $x80)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x105 (and $x30 $x173)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x61 (and $x29 $x105)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x197 (and $x13 $x61)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x144 (and $x28 $x197)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x8 (and $x78 $x144)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x186 (and $x169 $x8)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x99 (and $x124 $x186)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x198 (and $x11 $x99)))
 (let (($x106 (=> $x198 $x73)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 133 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x53 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x153 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x25 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x175 (ite $x25 ?x153 (_ bv0 32))))
 (let ((?x142 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x174 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x178 (ite $x174 ?x142 ?x175)))
 (let ((?x180 (bvmul (_ bv4294967295 32) ?x178)))
 (let ((?x111 (bvneg ?x180)))
 (let (($x87 (= ?x111 ?x53)))
 (let (($x158 (= $x87 true)))
 (let ((?x61 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x61)))
 (let (($x8 (= ?x197 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x186 (= $x8 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x54)))
 (let (($x36 (= ?x189 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x36 true)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x141 true)))
 (let (($x154 (= $x148 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x98)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (and $x122 $x89)))
 (let (($x92 (and $x172 $x65)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x58 $x92)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x170 $x68)))))))
 (let (($x20 (and $x79 $x34)))
 (let (($x59 (= $x20 true)))
 (let (($x120 (= $x59 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x100)))
 (let (($x60 (= ?x83 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x63 (= $x60 true)))
 (let (($x157 (= ?x83 input.dst.llvm-%n)))
 (let (($x119 (= $x157 true)))
 (let (($x102 (and $x119 $x63)))
 (let (($x113 (and $x102 $x120)))
 (let (($x161 (and $x113 $x154)))
 (let (($x173 (and $x161 $x80)))
 (let (($x99 (and $x173 $x186)))
 (let (($x86 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x77 (and (not $x86) $x99)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x155 (and $x40 $x77)))
 (let (($x5 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x46 (and $x5 $x155)))
 (let (($x133 (forall ((Lambda32 (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x42 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x42 (_ bv1 32))))
 (=> $x195 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x104 (forall ((Lambda32 (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x42 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x42 (_ bv1 32))))
 (= $x195 false)))))
 ))
 (let (($x191 (forall ((Lambda32 (_ BitVec 32)) )(let (($x116 (= false false)))
 (let (($x130 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x42 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x42 (_ bv0 32))))
 (=> $x31 $x116))))))
 ))
 (let (($x70 (forall ((Lambda32 (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x42 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x42 (_ bv0 32))))
 (= $x31 true)))))
 ))
 (let (($x52 (and $x70 $x191)))
 (let (($x72 (and $x52 $x104)))
 (let (($x55 (and $x72 $x133)))
 (let (($x26 (and $x55 $x46)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x10 (and $x15 $x26)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x171 (and $x62 $x10)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x165 (and $x27 $x171)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x163 (and $x30 $x165)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x179 (and $x29 $x163)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x114 (and $x13 $x179)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x73 (and $x28 $x114)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x106 (and $x78 $x73)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x121 (and $x169 $x106)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x76 (and $x124 $x121)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x43 (and $x11 $x76)))
 (let (($x160 (=> $x43 $x158)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x53 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x153 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x25 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x175 (ite $x25 ?x153 (_ bv0 32))))
 (let ((?x142 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x174 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x178 (ite $x174 ?x142 ?x175)))
 (let ((?x180 (bvmul (_ bv4294967295 32) ?x178)))
 (let ((?x111 (bvneg ?x180)))
 (let (($x87 (= ?x111 ?x53)))
 (let (($x158 (= $x87 true)))
 (let ((?x61 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x61)))
 (let (($x8 (= ?x197 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x186 (= $x8 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x54)))
 (let (($x36 (= ?x189 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x36 true)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x141 true)))
 (let (($x154 (= $x148 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x98)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (and $x122 $x89)))
 (let (($x92 (and $x172 $x65)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x58 $x92)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x170 $x68)))))))
 (let (($x20 (and $x79 $x34)))
 (let (($x59 (= $x20 true)))
 (let (($x120 (= $x59 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x100)))
 (let (($x60 (= ?x83 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x63 (= $x60 true)))
 (let (($x157 (= ?x83 input.dst.llvm-%n)))
 (let (($x119 (= $x157 true)))
 (let (($x102 (and $x119 $x63)))
 (let (($x113 (and $x102 $x120)))
 (let (($x161 (and $x113 $x154)))
 (let (($x173 (and $x161 $x80)))
 (let (($x99 (and $x173 $x186)))
 (let (($x86 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x77 (and (not $x86) $x99)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x155 (and $x40 $x77)))
 (let (($x5 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x46 (and $x5 $x155)))
 (let (($x133 (forall ((Lambda32 (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x42 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x42 (_ bv1 32))))
 (=> $x195 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x104 (forall ((Lambda32 (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x42 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x42 (_ bv1 32))))
 (= $x195 false)))))
 ))
 (let (($x191 (forall ((Lambda32 (_ BitVec 32)) )(let (($x116 (= false false)))
 (let (($x130 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x42 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x42 (_ bv0 32))))
 (=> $x31 $x116))))))
 ))
 (let (($x70 (forall ((Lambda32 (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x42 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x42 (_ bv0 32))))
 (= $x31 true)))))
 ))
 (let (($x52 (and $x70 $x191)))
 (let (($x72 (and $x52 $x104)))
 (let (($x55 (and $x72 $x133)))
 (let (($x26 (and $x55 $x46)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x10 (and $x15 $x26)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x171 (and $x62 $x10)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x165 (and $x27 $x171)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x163 (and $x30 $x165)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x179 (and $x29 $x163)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x114 (and $x13 $x179)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x73 (and $x28 $x114)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x106 (and $x78 $x73)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x121 (and $x169 $x106)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x76 (and $x124 $x121)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x43 (and $x11 $x76)))
 (let (($x160 (=> $x43 $x158)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 133 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (not $x158)))
 (let (($x53 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x87 (not $x53)))
 (let (($x190 (or $x87 $x160)))
 (let (($x129 (= $x190 true)))
 (let (($x127 (= $x129 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x77)))
 (let (($x165 (= ?x155 input.dst.llvm-%n)))
 (let (($x163 (= $x165 true)))
 (let (($x46 (= ?x155 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x26 (= $x46 true)))
 (let ((?x61 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x61)))
 (let (($x8 (= ?x197 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x186 (= $x8 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x148)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x59 $x112)))
 (let (($x161 (and $x141 $x154)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x84 $x161)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x89)))))))
 (let (($x189 (and $x20 $x54)))
 (let (($x36 (= $x189 true)))
 (let (($x80 (= $x36 true)))
 (let ((?x103 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x103)))
 (let (($x48 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x48 true)))
 (let (($x173 (and $x68 $x80)))
 (let (($x99 (and $x173 $x186)))
 (let (($x10 (and $x99 $x26)))
 (let (($x179 (and $x10 $x163)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x114 (and $x45 $x179)))
 (let (($x60 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x73 (and $x60 $x114)))
 (let (($x9 (forall ((Lambda32 (_ BitVec 32)) )(let (($x31 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x191 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x191 (_ bv1 32))))
 (=> $x88 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x35 (forall ((Lambda32 (_ BitVec 32)) )(let (($x31 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x191 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x191 (_ bv1 32))))
 (= $x88 false)))))
 ))
 (let (($x188 (forall ((Lambda32 (_ BitVec 32)) )(let (($x104 (= false false)))
 (let (($x31 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x191 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x191 (_ bv0 32))))
 (=> $x52 $x104))))))
 ))
 (let (($x193 (forall ((Lambda32 (_ BitVec 32)) )(let (($x31 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x191 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x191 (_ bv0 32))))
 (= $x52 true)))))
 ))
 (let (($x131 (and $x193 $x188)))
 (let (($x41 (and $x131 $x35)))
 (let (($x157 (and $x41 $x9)))
 (let (($x106 (and $x157 $x73)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x121 (and $x15 $x106)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x76 (and $x62 $x121)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x43 (and $x27 $x76)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x174 (and $x30 $x43)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x142 (and $x29 $x174)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x25 (and $x13 $x142)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x153 (and $x28 $x25)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x175 (and $x78 $x153)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x178 (and $x169 $x175)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x180 (and $x124 $x178)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x111 (and $x11 $x180)))
 (let (($x75 (=> $x111 $x127)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (not $x158)))
 (let (($x53 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x87 (not $x53)))
 (let (($x190 (or $x87 $x160)))
 (let (($x129 (= $x190 true)))
 (let (($x127 (= $x129 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x77)))
 (let (($x165 (= ?x155 input.dst.llvm-%n)))
 (let (($x163 (= $x165 true)))
 (let (($x46 (= ?x155 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x26 (= $x46 true)))
 (let ((?x61 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x61)))
 (let (($x8 (= ?x197 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x186 (= $x8 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x148)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x59 $x112)))
 (let (($x161 (and $x141 $x154)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x84 $x161)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x199 $x89)))))))
 (let (($x189 (and $x20 $x54)))
 (let (($x36 (= $x189 true)))
 (let (($x80 (= $x36 true)))
 (let ((?x103 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x103)))
 (let (($x48 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x48 true)))
 (let (($x173 (and $x68 $x80)))
 (let (($x99 (and $x173 $x186)))
 (let (($x10 (and $x99 $x26)))
 (let (($x179 (and $x10 $x163)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x114 (and $x45 $x179)))
 (let (($x60 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x73 (and $x60 $x114)))
 (let (($x9 (forall ((Lambda32 (_ BitVec 32)) )(let (($x31 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x191 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x191 (_ bv1 32))))
 (=> $x88 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x35 (forall ((Lambda32 (_ BitVec 32)) )(let (($x31 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x191 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x191 (_ bv1 32))))
 (= $x88 false)))))
 ))
 (let (($x188 (forall ((Lambda32 (_ BitVec 32)) )(let (($x104 (= false false)))
 (let (($x31 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x191 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x191 (_ bv0 32))))
 (=> $x52 $x104))))))
 ))
 (let (($x193 (forall ((Lambda32 (_ BitVec 32)) )(let (($x31 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x191 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x191 (_ bv0 32))))
 (= $x52 true)))))
 ))
 (let (($x131 (and $x193 $x188)))
 (let (($x41 (and $x131 $x35)))
 (let (($x157 (and $x41 $x9)))
 (let (($x106 (and $x157 $x73)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x121 (and $x15 $x106)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x76 (and $x62 $x121)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x43 (and $x27 $x76)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x174 (and $x30 $x43)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x142 (and $x29 $x174)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x25 (and $x13 $x142)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x153 (and $x28 $x25)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x175 (and $x78 $x153)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x178 (and $x169 $x175)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x180 (and $x124 $x178)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x111 (and $x11 $x180)))
 (let (($x75 (=> $x111 $x127)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (not $x70)))
 (let (($x49 (= $x116 false)))
 (let (($x72 (= $x49 true)))
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x89)))
 (let (($x180 (= ?x172 input.dst.llvm-%n)))
 (let (($x111 (= $x180 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x43)))
 (let (($x25 (= ?x174 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x25 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x171)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x77 $x26)))
 (let (($x163 (and $x10 $x165)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x154 $x163)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x105)))))))
 (let (($x114 (and $x99 $x179)))
 (let (($x73 (= $x114 true)))
 (let (($x106 (= $x73 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x20)))
 (let (($x59 (= ?x14 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x59 true)))
 (let (($x98 (= ?x172 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x65 (= $x98 true)))
 (let (($x113 (and $x65 $x120)))
 (let (($x121 (and $x113 $x106)))
 (let (($x175 (and $x121 $x153)))
 (let (($x53 (and $x175 $x111)))
 (let (($x199 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x87 (and $x199 $x53)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x158 (and $x34 $x87)))
 (let (($x68 (forall ((Lambda32 (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x188 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x188 (_ bv1 32))))
 (=> $x119 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x63 (forall ((Lambda32 (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x188 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x188 (_ bv1 32))))
 (= $x119 false)))))
 ))
 (let (($x100 (forall ((Lambda32 (_ BitVec 32)) )(let (($x35 (= false false)))
 (let (($x52 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x188 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x188 (_ bv0 32))))
 (=> $x131 $x35))))))
 ))
 (let (($x5 (forall ((Lambda32 (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x188 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x188 (_ bv0 32))))
 (= $x131 true)))))
 ))
 (let (($x83 (and $x5 $x100)))
 (let (($x102 (and $x83 $x63)))
 (let (($x79 (and $x102 $x68)))
 (let (($x160 (and $x79 $x158)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x190 (and $x15 $x160)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x129 (and $x62 $x190)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x127 (and $x27 $x129)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x75 (and $x30 $x127)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x167 (and $x29 $x75)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x93 (and $x13 $x167)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x57 (and $x28 $x93)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x117 (and $x78 $x57)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x182 (and $x169 $x117)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x86 (and $x124 $x182)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x130 (and $x11 $x86)))
 (let (($x133 (=> $x130 $x72)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (not $x70)))
 (let (($x49 (= $x116 false)))
 (let (($x72 (= $x49 true)))
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x89)))
 (let (($x180 (= ?x172 input.dst.llvm-%n)))
 (let (($x111 (= $x180 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x43)))
 (let (($x25 (= ?x174 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x25 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x171)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x77 $x26)))
 (let (($x163 (and $x10 $x165)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x154 $x163)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x105)))))))
 (let (($x114 (and $x99 $x179)))
 (let (($x73 (= $x114 true)))
 (let (($x106 (= $x73 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x20)))
 (let (($x59 (= ?x14 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x59 true)))
 (let (($x98 (= ?x172 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x65 (= $x98 true)))
 (let (($x113 (and $x65 $x120)))
 (let (($x121 (and $x113 $x106)))
 (let (($x175 (and $x121 $x153)))
 (let (($x53 (and $x175 $x111)))
 (let (($x199 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x87 (and $x199 $x53)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x158 (and $x34 $x87)))
 (let (($x68 (forall ((Lambda32 (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x188 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x188 (_ bv1 32))))
 (=> $x119 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x63 (forall ((Lambda32 (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x188 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x188 (_ bv1 32))))
 (= $x119 false)))))
 ))
 (let (($x100 (forall ((Lambda32 (_ BitVec 32)) )(let (($x35 (= false false)))
 (let (($x52 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x188 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x188 (_ bv0 32))))
 (=> $x131 $x35))))))
 ))
 (let (($x5 (forall ((Lambda32 (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x188 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x188 (_ bv0 32))))
 (= $x131 true)))))
 ))
 (let (($x83 (and $x5 $x100)))
 (let (($x102 (and $x83 $x63)))
 (let (($x79 (and $x102 $x68)))
 (let (($x160 (and $x79 $x158)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x190 (and $x15 $x160)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x129 (and $x62 $x190)))
 (let (($x27 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x127 (and $x27 $x129)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x75 (and $x30 $x127)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x167 (and $x29 $x75)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x93 (and $x13 $x167)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x57 (and $x28 $x93)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x117 (and $x78 $x57)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x182 (and $x169 $x117)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x86 (and $x124 $x182)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x130 (and $x11 $x86)))
 (let (($x133 (=> $x130 $x72)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00080003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x006a8080)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x006a8083)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x006a8080)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x9 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x157 (or $x41 $x9)))
 (let (($x45 (= $x157 true)))
 (let (($x103 (= $x45 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x127)))
 (let (($x182 (= ?x75 input.dst.llvm-%n)))
 (let (($x86 (= $x182 true)))
 (let (($x167 (= ?x75 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x93 (= $x167 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x53)))
 (let (($x160 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x190 (= $x160 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x43)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x114 $x121)))
 (let (($x142 (and $x76 $x174)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x144 $x142)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x46)))))))
 (let (($x153 (and $x179 $x25)))
 (let (($x175 (= $x153 true)))
 (let (($x178 (= $x175 true)))
 (let ((?x186 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x186)))
 (let (($x173 (= ?x189 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x36 (= $x173 true)))
 (let (($x180 (and $x36 $x178)))
 (let (($x129 (and $x180 $x190)))
 (let (($x57 (and $x129 $x93)))
 (let (($x130 (and $x57 $x86)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x70 (and $x113 $x130)))
 (let (($x84 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x116 (and $x84 $x70)))
 (let (($x92 (forall ((Lambda32 (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x71 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x71 (_ bv1 32))))
 (=> $x79 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x34 (forall ((Lambda32 (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x71 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x71 (_ bv1 32))))
 (= $x79 false)))))
 ))
 (let (($x18 (forall ((Lambda32 (_ BitVec 32)) )(let (($x60 (= false false)))
 (let (($x188 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x71 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x71 (_ bv0 32))))
 (=> $x100 $x60))))))
 ))
 (let (($x119 (forall ((Lambda32 (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x71 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x71 (_ bv0 32))))
 (= $x100 true)))))
 ))
 (let (($x170 (and $x119 $x18)))
 (let (($x58 (and $x170 $x34)))
 (let (($x20 (and $x58 $x92)))
 (let (($x49 (and $x20 $x116)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x72 (and $x17 $x49)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x133 (and $x23 $x72)))
 (let (($x96 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x55 (and $x96 $x133)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x141 (and $x21 $x55)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x195 (and $x66 $x141)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x42 (and $x22 $x195)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x7 (and $x123 $x42)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x31 (and $x156 $x7)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x193 (and $x184 $x31)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x104 (and $x196 $x193)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x118 (and $x11 $x104)))
 (let (($x50 (=> $x118 $x103)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x9 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x157 (or $x41 $x9)))
 (let (($x45 (= $x157 true)))
 (let (($x103 (= $x45 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x127)))
 (let (($x182 (= ?x75 input.dst.llvm-%n)))
 (let (($x86 (= $x182 true)))
 (let (($x167 (= ?x75 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x93 (= $x167 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x53)))
 (let (($x160 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x190 (= $x160 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x43)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x114 $x121)))
 (let (($x142 (and $x76 $x174)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x144 $x142)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x46)))))))
 (let (($x153 (and $x179 $x25)))
 (let (($x175 (= $x153 true)))
 (let (($x178 (= $x175 true)))
 (let ((?x186 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x186)))
 (let (($x173 (= ?x189 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x36 (= $x173 true)))
 (let (($x180 (and $x36 $x178)))
 (let (($x129 (and $x180 $x190)))
 (let (($x57 (and $x129 $x93)))
 (let (($x130 (and $x57 $x86)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x70 (and $x113 $x130)))
 (let (($x84 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x116 (and $x84 $x70)))
 (let (($x92 (forall ((Lambda32 (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x71 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x71 (_ bv1 32))))
 (=> $x79 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x34 (forall ((Lambda32 (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x71 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x71 (_ bv1 32))))
 (= $x79 false)))))
 ))
 (let (($x18 (forall ((Lambda32 (_ BitVec 32)) )(let (($x60 (= false false)))
 (let (($x188 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x71 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x71 (_ bv0 32))))
 (=> $x100 $x60))))))
 ))
 (let (($x119 (forall ((Lambda32 (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x71 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x71 (_ bv0 32))))
 (= $x100 true)))))
 ))
 (let (($x170 (and $x119 $x18)))
 (let (($x58 (and $x170 $x34)))
 (let (($x20 (and $x58 $x92)))
 (let (($x49 (and $x20 $x116)))
 (let (($x17 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x72 (and $x17 $x49)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x133 (and $x23 $x72)))
 (let (($x96 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x55 (and $x96 $x133)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x141 (and $x21 $x55)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x195 (and $x66 $x141)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x42 (and $x22 $x195)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x7 (and $x123 $x42)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x31 (and $x156 $x7)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x193 (and $x184 $x31)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x104 (and $x196 $x193)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x118 (and $x11 $x104)))
 (let (($x50 (=> $x118 $x103)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 121 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x198 (= input.spec-%var-r-0.L2%7%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x64 (= $x198 true)))
 (let (($x101 (= $x64 true)))
 (let ((?x9 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x9)))
 (let (($x103 (= ?x157 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x103 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x141)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x116 $x133)))
 (let (($x42 (and $x55 $x195)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x158 $x42)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x93)))))))
 (let (($x31 (and $x70 $x7)))
 (let (($x193 (= $x31 true)))
 (let (($x104 (= $x193 true)))
 (let ((?x25 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x25)))
 (let (($x175 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x175 true)))
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x114)))
 (let (($x43 (= ?x73 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x174 (= $x43 true)))
 (let (($x106 (= ?x73 input.dst.llvm-%n)))
 (let (($x121 (= $x106 true)))
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x165 (not $x171)))
 (let (($x179 (= $x165 true)))
 (let (($x197 (= $x179 true)))
 (let (($x76 (and $x197 $x121)))
 (let (($x142 (and $x76 $x174)))
 (let (($x180 (and $x142 $x178)))
 (let (($x118 (and $x180 $x104)))
 (let (($x40 (and $x118 $x50)))
 (let (($x46 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x105 (and $x46 $x40)))
 (let (($x155 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x61 (and $x155 $x105)))
 (let (($x163 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x131 (and $x163 $x61)))
 (let (($x36 (forall ((Lambda32 (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x102 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x102 (_ bv1 32))))
 (=> $x20 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x84 (forall ((Lambda32 (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x102 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x102 (_ bv1 32))))
 (= $x20 false)))))
 ))
 (let (($x199 (forall ((Lambda32 (_ BitVec 32)) )(let (($x108 (= false false)))
 (let (($x71 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x102 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x102 (_ bv0 32))))
 (=> $x18 $x108))))))
 ))
 (let (($x79 (forall ((Lambda32 (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x102 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x102 (_ bv0 32))))
 (= $x18 true)))))
 ))
 (let (($x98 (and $x79 $x199)))
 (let (($x59 (and $x98 $x84)))
 (let (($x8 (and $x59 $x36)))
 (let (($x15 (and $x8 $x131)))
 (let (($x6 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x122 (and $x6 $x15)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x191 (and $x27 $x122)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x88 (and $x30 $x191)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x5 (and $x37 $x88)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x35 (and $x69 $x5)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x63 (and $x28 $x35)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x48 (and $x78 $x63)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x68 (and $x169 $x48)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x94 (and $x187 $x68)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x89 (and $x81 $x94)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x172 (and $x161 $x89)))
 (let (($x159 (=> $x172 $x101)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x198 (= input.spec-%var-r-0.L2%7%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x64 (= $x198 true)))
 (let (($x101 (= $x64 true)))
 (let ((?x9 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x9)))
 (let (($x103 (= ?x157 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x103 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x141)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x116 $x133)))
 (let (($x42 (and $x55 $x195)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x158 $x42)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x93)))))))
 (let (($x31 (and $x70 $x7)))
 (let (($x193 (= $x31 true)))
 (let (($x104 (= $x193 true)))
 (let ((?x25 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x25)))
 (let (($x175 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x175 true)))
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x114)))
 (let (($x43 (= ?x73 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x174 (= $x43 true)))
 (let (($x106 (= ?x73 input.dst.llvm-%n)))
 (let (($x121 (= $x106 true)))
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x165 (not $x171)))
 (let (($x179 (= $x165 true)))
 (let (($x197 (= $x179 true)))
 (let (($x76 (and $x197 $x121)))
 (let (($x142 (and $x76 $x174)))
 (let (($x180 (and $x142 $x178)))
 (let (($x118 (and $x180 $x104)))
 (let (($x40 (and $x118 $x50)))
 (let (($x46 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x105 (and $x46 $x40)))
 (let (($x155 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x61 (and $x155 $x105)))
 (let (($x163 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x131 (and $x163 $x61)))
 (let (($x36 (forall ((Lambda32 (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x102 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x102 (_ bv1 32))))
 (=> $x20 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x84 (forall ((Lambda32 (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x102 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x102 (_ bv1 32))))
 (= $x20 false)))))
 ))
 (let (($x199 (forall ((Lambda32 (_ BitVec 32)) )(let (($x108 (= false false)))
 (let (($x71 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x102 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x102 (_ bv0 32))))
 (=> $x18 $x108))))))
 ))
 (let (($x79 (forall ((Lambda32 (_ BitVec 32)) )(let (($x71 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x102 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x102 (_ bv0 32))))
 (= $x18 true)))))
 ))
 (let (($x98 (and $x79 $x199)))
 (let (($x59 (and $x98 $x84)))
 (let (($x8 (and $x59 $x36)))
 (let (($x15 (and $x8 $x131)))
 (let (($x6 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x122 (and $x6 $x15)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x191 (and $x27 $x122)))
 (let (($x30 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x88 (and $x30 $x191)))
 (let (($x37 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x5 (and $x37 $x88)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x35 (and $x69 $x5)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x63 (and $x28 $x35)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x48 (and $x78 $x63)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x68 (and $x169 $x48)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x94 (and $x187 $x68)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x89 (and $x81 $x94)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x172 (and $x161 $x89)))
 (let (($x159 (=> $x172 $x101)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 126 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (not $x17)))
 (let (($x52 (or $x17 $x54)))
 (let (($x83 (= $x52 true)))
 (let (($x119 (= $x83 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x76)))
 (let (($x191 (= ?x43 input.dst.llvm-%n)))
 (let (($x88 (= $x191 true)))
 (let ((?x50 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x50)))
 (let (($x61 (= ?x40 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x61 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x31)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x195)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x55 $x42)))
 (let (($x104 (and $x7 $x193)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x167 $x104)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x70)))))))
 (let (($x41 (and $x133 $x118)))
 (let (($x9 (= $x41 true)))
 (let (($x157 (= $x9 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x175 (bvneg ?x153)))
 (let (($x180 (= ?x175 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x180 true)))
 (let (($x174 (= ?x43 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x142 (= $x174 true)))
 (let (($x190 (and $x142 $x160)))
 (let (($x45 (and $x190 $x157)))
 (let (($x15 (and $x45 $x131)))
 (let (($x5 (and $x15 $x88)))
 (let (($x106 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x35 (and $x106 $x5)))
 (let (($x144 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x63 (and $x144 $x35)))
 (let (($x165 (forall ((Lambda32 (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x58 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x58 (_ bv1 32))))
 (=> $x8 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x163 (forall ((Lambda32 (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x58 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x58 (_ bv1 32))))
 (= $x8 false)))))
 ))
 (let (($x113 (forall ((Lambda32 (_ BitVec 32)) )(let (($x14 (= false false)))
 (let (($x102 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x58 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x58 (_ bv0 32))))
 (=> $x199 $x14))))))
 ))
 (let (($x20 (forall ((Lambda32 (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x58 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x58 (_ bv0 32))))
 (= $x199 true)))))
 ))
 (let (($x80 (and $x20 $x113)))
 (let (($x148 (and $x80 $x163)))
 (let (($x179 (and $x148 $x165)))
 (let (($x48 (and $x179 $x63)))
 (let (($x62 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x68 (and $x62 $x48)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x94 (and $x96 $x68)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x89 (and $x21 $x94)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x172 (and $x29 $x89)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x198 (and $x13 $x172)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x64 (and $x123 $x198)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x101 (and $x156 $x64)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x159 (and $x184 $x101)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x16 (and $x196 $x159)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x53 (and $x124 $x16)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x100 (and $x11 $x53)))
 (let (($x60 (=> $x100 $x119)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (not $x17)))
 (let (($x52 (or $x17 $x54)))
 (let (($x83 (= $x52 true)))
 (let (($x119 (= $x83 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x76)))
 (let (($x191 (= ?x43 input.dst.llvm-%n)))
 (let (($x88 (= $x191 true)))
 (let ((?x50 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x50)))
 (let (($x61 (= ?x40 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x61 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x31)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x195)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x55 $x42)))
 (let (($x104 (and $x7 $x193)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x167 $x104)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x70)))))))
 (let (($x41 (and $x133 $x118)))
 (let (($x9 (= $x41 true)))
 (let (($x157 (= $x9 true)))
 (let ((?x153 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x175 (bvneg ?x153)))
 (let (($x180 (= ?x175 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x180 true)))
 (let (($x174 (= ?x43 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x142 (= $x174 true)))
 (let (($x190 (and $x142 $x160)))
 (let (($x45 (and $x190 $x157)))
 (let (($x15 (and $x45 $x131)))
 (let (($x5 (and $x15 $x88)))
 (let (($x106 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x35 (and $x106 $x5)))
 (let (($x144 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x63 (and $x144 $x35)))
 (let (($x165 (forall ((Lambda32 (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x58 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x58 (_ bv1 32))))
 (=> $x8 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x163 (forall ((Lambda32 (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x58 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x58 (_ bv1 32))))
 (= $x8 false)))))
 ))
 (let (($x113 (forall ((Lambda32 (_ BitVec 32)) )(let (($x14 (= false false)))
 (let (($x102 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x58 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x58 (_ bv0 32))))
 (=> $x199 $x14))))))
 ))
 (let (($x20 (forall ((Lambda32 (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x58 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x58 (_ bv0 32))))
 (= $x199 true)))))
 ))
 (let (($x80 (and $x20 $x113)))
 (let (($x148 (and $x80 $x163)))
 (let (($x179 (and $x148 $x165)))
 (let (($x48 (and $x179 $x63)))
 (let (($x62 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x68 (and $x62 $x48)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x94 (and $x96 $x68)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x89 (and $x21 $x94)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x172 (and $x29 $x89)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x198 (and $x13 $x172)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x64 (and $x123 $x198)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x101 (and $x156 $x64)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x159 (and $x184 $x101)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x16 (and $x196 $x159)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x53 (and $x124 $x16)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x100 (and $x11 $x53)))
 (let (($x60 (=> $x100 $x119)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x9)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x31 $x118)))
 (let (($x45 (and $x41 $x157)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x7 $x45)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x49)))))))
 (let (($x188 (and $x195 $x103)))
 (let (($x170 (= $x188 true)))
 (let (($x79 (= $x170 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x63 (concat ?x88 (concat ?x131 ?x105)))))
 (let (($x101 (= ?x48 input.dst.llvm-%n)))
 (let (($x159 (= $x101 true)))
 (let (($x68 (= input.dst.llvm-%n ?x48)))
 (let (($x172 (and (and (and $x195 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x103) $x68)))
 (let (($x198 (= $x172 true)))
 (let (($x64 (= $x198 true)))
 (let (($x16 (and $x64 $x159)))
 (let (($x127 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x53 (and $x127 $x16)))
 (let (($x180 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x100 (and $x180 $x53)))
 (let (($x153 (forall ((Lambda32 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x113 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x113 (_ bv1 32))))
 (=> $x197 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x114 (forall ((Lambda32 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x113 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x113 (_ bv1 32))))
 (= $x197 false)))))
 ))
 (let (($x10 (forall ((Lambda32 (_ BitVec 32)) )(let (($x163 (= false false)))
 (let (($x199 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x113 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x113 (_ bv0 32))))
 (=> $x80 $x163))))))
 ))
 (let (($x99 (forall ((Lambda32 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x113 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x113 (_ bv0 32))))
 (= $x80 true)))))
 ))
 (let (($x171 (and $x99 $x10)))
 (let (($x73 (and $x171 $x114)))
 (let (($x175 (and $x73 $x153)))
 (let (($x17 (and $x175 $x100)))
 (let (($x62 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x54 (and $x62 $x17)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x52 (and $x96 $x54)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x83 (and $x21 $x52)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x119 (and $x29 $x83)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x60 (and $x13 $x119)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x34 (and $x123 $x60)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x130 (and $x156 $x34)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x129 (and $x184 $x130)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x18 (and $x196 $x129)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x6 (and $x124 $x18)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x154 (and $x11 $x6)))
 (let (($x108 (=> $x154 $x79)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x9)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x31 $x118)))
 (let (($x45 (and $x41 $x157)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x7 $x45)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x49)))))))
 (let (($x188 (and $x195 $x103)))
 (let (($x170 (= $x188 true)))
 (let (($x79 (= $x170 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x63 (concat ?x88 (concat ?x131 ?x105)))))
 (let (($x101 (= ?x48 input.dst.llvm-%n)))
 (let (($x159 (= $x101 true)))
 (let (($x68 (= input.dst.llvm-%n ?x48)))
 (let (($x172 (and (and (and $x195 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x103) $x68)))
 (let (($x198 (= $x172 true)))
 (let (($x64 (= $x198 true)))
 (let (($x16 (and $x64 $x159)))
 (let (($x127 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x53 (and $x127 $x16)))
 (let (($x180 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x100 (and $x180 $x53)))
 (let (($x153 (forall ((Lambda32 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x113 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x113 (_ bv1 32))))
 (=> $x197 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x114 (forall ((Lambda32 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x113 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x113 (_ bv1 32))))
 (= $x197 false)))))
 ))
 (let (($x10 (forall ((Lambda32 (_ BitVec 32)) )(let (($x163 (= false false)))
 (let (($x199 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x113 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x113 (_ bv0 32))))
 (=> $x80 $x163))))))
 ))
 (let (($x99 (forall ((Lambda32 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x113 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x113 (_ bv0 32))))
 (= $x80 true)))))
 ))
 (let (($x171 (and $x99 $x10)))
 (let (($x73 (and $x171 $x114)))
 (let (($x175 (and $x73 $x153)))
 (let (($x17 (and $x175 $x100)))
 (let (($x62 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x54 (and $x62 $x17)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x52 (and $x96 $x54)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x83 (and $x21 $x52)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x119 (and $x29 $x83)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x60 (and $x13 $x119)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x34 (and $x123 $x60)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x130 (and $x156 $x34)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x129 (and $x184 $x130)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x18 (and $x196 $x129)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x6 (and $x124 $x18)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x154 (and $x11 $x6)))
 (let (($x108 (=> $x154 $x79)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x179)))
 (let (($x43 (= ?x106 input.dst.llvm-%n)))
 (let (($x174 (= $x43 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x83 (concat ?x17 (concat ?x159 ?x64)))))
 (let (($x154 (= ?x119 input.dst.llvm-%n)))
 (let (($x188 (= $x154 true)))
 (let (($x60 (= input.dst.llvm-%n ?x119)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x15)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x191 $x131)))
 (let (($x48 (and $x105 $x5)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x122 $x48)))
 (let (($x42 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x9)))))))
 (let (($x129 (and (and (and $x35 $x42) $x68) $x60)))
 (let (($x18 (= $x129 true)))
 (let (($x6 (= $x18 true)))
 (let (($x170 (and $x6 $x188)))
 (let (($x195 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x79 (and $x195 $x170)))
 (let (($x75 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x108 (and $x75 $x79)))
 (let (($x87 (forall ((Lambda32 (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x10 (_ bv1 32))))
 (=> $x178 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x160 (forall ((Lambda32 (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x10 (_ bv1 32))))
 (= $x178 false)))))
 ))
 (let (($x142 (forall ((Lambda32 (_ BitVec 32)) )(let (($x114 (= false false)))
 (let (($x80 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x10 (_ bv0 32))))
 (=> $x171 $x114))))))
 ))
 (let (($x144 (forall ((Lambda32 (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x10 (_ bv0 32))))
 (= $x171 true)))))
 ))
 (let (($x25 (and $x144 $x142)))
 (let (($x190 (and $x25 $x160)))
 (let (($x49 (and $x190 $x87)))
 (let (($x84 (and $x49 $x108)))
 (let (($x62 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x93 (and $x62 $x84)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x72 (and $x96 $x93)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x40 (and $x21 $x72)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x98 (and $x29 $x40)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x71 (and $x13 $x98)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x76 (and $x123 $x71)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x102 (and $x156 $x76)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x20 (and $x184 $x102)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x14 (and $x196 $x20)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x59 (and $x124 $x14)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x148 (and $x11 $x59)))
 (let (($x173 (=> $x148 $x174)))
 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x179)))
 (let (($x43 (= ?x106 input.dst.llvm-%n)))
 (let (($x174 (= $x43 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x83 (concat ?x17 (concat ?x159 ?x64)))))
 (let (($x154 (= ?x119 input.dst.llvm-%n)))
 (let (($x188 (= $x154 true)))
 (let (($x60 (= input.dst.llvm-%n ?x119)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x15)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x191 $x131)))
 (let (($x48 (and $x105 $x5)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x122 $x48)))
 (let (($x42 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x9)))))))
 (let (($x129 (and (and (and $x35 $x42) $x68) $x60)))
 (let (($x18 (= $x129 true)))
 (let (($x6 (= $x18 true)))
 (let (($x170 (and $x6 $x188)))
 (let (($x195 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x79 (and $x195 $x170)))
 (let (($x75 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x108 (and $x75 $x79)))
 (let (($x87 (forall ((Lambda32 (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x10 (_ bv1 32))))
 (=> $x178 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x160 (forall ((Lambda32 (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x10 (_ bv1 32))))
 (= $x178 false)))))
 ))
 (let (($x142 (forall ((Lambda32 (_ BitVec 32)) )(let (($x114 (= false false)))
 (let (($x80 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x10 (_ bv0 32))))
 (=> $x171 $x114))))))
 ))
 (let (($x144 (forall ((Lambda32 (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x10 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x10 (_ bv0 32))))
 (= $x171 true)))))
 ))
 (let (($x25 (and $x144 $x142)))
 (let (($x190 (and $x25 $x160)))
 (let (($x49 (and $x190 $x87)))
 (let (($x84 (and $x49 $x108)))
 (let (($x62 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x93 (and $x62 $x84)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x72 (and $x96 $x93)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x40 (and $x21 $x72)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x98 (and $x29 $x40)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x71 (and $x13 $x98)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x76 (and $x123 $x71)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x102 (and $x156 $x76)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x20 (and $x184 $x102)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x14 (and $x196 $x20)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x59 (and $x124 $x14)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x148 (and $x11 $x59)))
 (let (($x173 (=> $x148 $x174)))
 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x73)))
 (let (($x175 (= ?x153 input.spec-%var-n-1)))
 (let (($x127 (= $x175 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x130 (concat ?x15 (concat ?x88 ?x122)))))
 (let (($x102 (= input.dst.llvm-%n ?x172)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x40)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x108 $x93)))
 (let (($x71 (and $x72 $x98)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x101 $x71)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x129)))))))
 (let (($x59 (and (and (and $x79 $x17) $x76) $x102)))
 (let (($x148 (= $x59 true)))
 (let (($x165 (= $x148 true)))
 (let (($x83 (= ?x172 input.dst.llvm-%n)))
 (let (($x53 (= $x83 true)))
 (let (($x179 (and $x53 $x165)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x106 (and $x35 $x179)))
 (let (($x45 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x43 (and $x45 $x106)))
 (let (($x104 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x142 (_ bv1 32))))
 (=> $x133 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x167 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x142 (_ bv1 32))))
 (= $x133 false)))))
 ))
 (let (($x158 (forall ((Lambda32 (_ BitVec 32)) )(let (($x160 (= false false)))
 (let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x142 (_ bv0 32))))
 (=> $x25 $x160))))))
 ))
 (let (($x180 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x142 (_ bv0 32))))
 (= $x25 true)))))
 ))
 (let (($x116 (and $x180 $x158)))
 (let (($x55 (and $x116 $x167)))
 (let (($x9 (and $x55 $x104)))
 (let (($x174 (and $x9 $x43)))
 (let (($x62 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x173 (and $x62 $x174)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x36 (and $x96 $x173)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x57 (and $x21 $x36)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x182 (and $x29 $x57)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x198 (and $x13 $x182)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x8 (and $x123 $x198)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x58 (and $x156 $x8)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x117 (and $x184 $x58)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x199 (and $x196 $x117)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x99 (and $x124 $x199)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x163 (and $x11 $x99)))
 (let (($x141 (=> $x163 $x127)))
 (not $x141))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%35%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L2%37%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x73)))
 (let (($x175 (= ?x153 input.spec-%var-n-1)))
 (let (($x127 (= $x175 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x130 (concat ?x15 (concat ?x88 ?x122)))))
 (let (($x102 (= input.dst.llvm-%n ?x172)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x40)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x108 $x93)))
 (let (($x71 (and $x72 $x98)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x101 $x71)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x129)))))))
 (let (($x59 (and (and (and $x79 $x17) $x76) $x102)))
 (let (($x148 (= $x59 true)))
 (let (($x165 (= $x148 true)))
 (let (($x83 (= ?x172 input.dst.llvm-%n)))
 (let (($x53 (= $x83 true)))
 (let (($x179 (and $x53 $x165)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x106 (and $x35 $x179)))
 (let (($x45 (= (_ bv4 32) input.spec-%tmpvar-12.L2%28%d)))
 (let (($x43 (and $x45 $x106)))
 (let (($x104 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x142 (_ bv1 32))))
 (=> $x133 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x167 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x142 (_ bv1 32))))
 (= $x133 false)))))
 ))
 (let (($x158 (forall ((Lambda32 (_ BitVec 32)) )(let (($x160 (= false false)))
 (let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x142 (_ bv0 32))))
 (=> $x25 $x160))))))
 ))
 (let (($x180 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x142 (_ bv0 32))))
 (= $x25 true)))))
 ))
 (let (($x116 (and $x180 $x158)))
 (let (($x55 (and $x116 $x167)))
 (let (($x9 (and $x55 $x104)))
 (let (($x174 (and $x9 $x43)))
 (let (($x62 (= (_ bv4 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x173 (and $x62 $x174)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x36 (and $x96 $x173)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x57 (and $x21 $x36)))
 (let (($x29 (= (_ bv10 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x182 (and $x29 $x57)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x198 (and $x13 $x182)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x8 (and $x123 $x198)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-11.L2%35%bbentry)))
 (let (($x58 (and $x156 $x8)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-17.L2%35%bbentry)))
 (let (($x117 (and $x184 $x58)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-14.L2%35%bbentry)))
 (let (($x199 (and $x196 $x117)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-16.L2%35%bbentry)))
 (let (($x99 (and $x124 $x199)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L2%37%bbentry)))
 (let (($x163 (and $x11 $x99)))
 (let (($x141 (=> $x163 $x127)))
 (not $x141))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460664/query
