==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x118 (= false true)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x99 (concat ?x96 (concat ?x92 ?x90)))))
 (let (($x101 (= ?x100 input.dst.llvm-%n)))
 (let (($x102 (= $x101 true)))
 (let (($x85 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x86 (= $x85 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x78)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x73 $x76)))
 (let (($x80 (and $x77 $x79)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x59 $x80)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x66)))))))
 (let (($x82 (and $x72 $x81)))
 (let (($x83 (= $x82 true)))
 (let (($x87 (and $x83 $x86)))
 (let (($x103 (and $x87 $x102)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x104 (and $x55 $x103)))
 (let (($x52 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x105 (and $x52 $x104)))
 (let (($x49 (forall ((input.ind-%var193X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var193X)))
 (=> $x28 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var193X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var192X)))
 (= $x28 false)))
 ))
 (let (($x50 (and $x11 $x49)))
 (let (($x106 (and $x50 $x105)))
 (let (($x42 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x107 (and $x42 $x106)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x108 (and $x31 $x107)))
 (let (($x43 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x109 (and $x43 $x108)))
 (let (($x26 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x110 (and $x26 $x109)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x111 (and $x30 $x110)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x112 (and $x46 $x111)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x113 (and $x5 $x112)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x114 (and $x25 $x113)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x115 (and $x18 $x114)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x116 (and $x20 $x115)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x117 (and $x6 $x116)))
 (let (($x119 (=> $x117 $x118)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x118 (= false true)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x99 (concat ?x96 (concat ?x92 ?x90)))))
 (let (($x101 (= ?x100 input.dst.llvm-%n)))
 (let (($x102 (= $x101 true)))
 (let (($x85 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x86 (= $x85 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x78)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x73 $x76)))
 (let (($x80 (and $x77 $x79)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x59 $x80)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x66)))))))
 (let (($x82 (and $x72 $x81)))
 (let (($x83 (= $x82 true)))
 (let (($x87 (and $x83 $x86)))
 (let (($x103 (and $x87 $x102)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x104 (and $x55 $x103)))
 (let (($x52 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x105 (and $x52 $x104)))
 (let (($x49 (forall ((input.ind-%var193X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var193X)))
 (=> $x28 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var193X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var192X)))
 (= $x28 false)))
 ))
 (let (($x50 (and $x11 $x49)))
 (let (($x106 (and $x50 $x105)))
 (let (($x42 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x107 (and $x42 $x106)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x108 (and $x31 $x107)))
 (let (($x43 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x109 (and $x43 $x108)))
 (let (($x26 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x110 (and $x26 $x109)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x111 (and $x30 $x110)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x112 (and $x46 $x111)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x113 (and $x5 $x112)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x114 (and $x25 $x113)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x115 (and $x18 $x114)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x116 (and $x20 $x115)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x117 (and $x6 $x116)))
 (let (($x119 (=> $x117 $x118)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb405964)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb405967)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb405964)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x94)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x86 $x98)))
 (let (($x96 (and $x99 $x95)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x85 $x96)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x77)))))))
 (let (($x22 (and $x83 $x91)))
 (let (($x9 (= $x22 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x107 (concat ?x104 (concat ?x100 ?x93)))))
 (let (($x109 (= input.dst.llvm-%n ?x108)))
 (let (($x112 (and (and (and $x83 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x91) $x109)))
 (let (($x113 (= $x112 true)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x45 $x113)))
 (let (($x50 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x115 (and $x50 $x114)))
 (let (($x51 (forall ((input.ind-%var211X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var211X)))
 (=> $x61 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var211X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var210X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var210X)))
 (= $x61 false)))
 ))
 (let (($x47 (and $x48 $x51)))
 (let (($x116 (and $x47 $x115)))
 (let (($x26 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x117 (and $x26 $x116)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x118 (and $x30 $x117)))
 (let (($x66 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x119 (and $x66 $x118)))
 (let (($x28 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x120 (and $x28 $x119)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x57 (and $x38 $x120)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x89 (and $x46 $x57)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x16 (and $x19 $x89)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x37 (and $x31 $x16)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x14 (and $x8 $x37)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x40 (and $x23 $x14)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x33 (and $x21 $x40)))
 (let (($x10 (=> $x33 $x9)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x94)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x86 $x98)))
 (let (($x96 (and $x99 $x95)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x85 $x96)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x76 $x77)))))))
 (let (($x22 (and $x83 $x91)))
 (let (($x9 (= $x22 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x107 (concat ?x104 (concat ?x100 ?x93)))))
 (let (($x109 (= input.dst.llvm-%n ?x108)))
 (let (($x112 (and (and (and $x83 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x91) $x109)))
 (let (($x113 (= $x112 true)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x45 $x113)))
 (let (($x50 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x115 (and $x50 $x114)))
 (let (($x51 (forall ((input.ind-%var211X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var211X)))
 (=> $x61 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var211X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var210X (_ BitVec 32)) )(let (($x61 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var210X)))
 (= $x61 false)))
 ))
 (let (($x47 (and $x48 $x51)))
 (let (($x116 (and $x47 $x115)))
 (let (($x26 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x117 (and $x26 $x116)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x118 (and $x30 $x117)))
 (let (($x66 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x119 (and $x66 $x118)))
 (let (($x28 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x120 (and $x28 $x119)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x57 (and $x38 $x120)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x89 (and $x46 $x57)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x16 (and $x19 $x89)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x37 (and $x31 $x16)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x14 (and $x8 $x37)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x40 (and $x23 $x14)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x33 (and $x21 $x40)))
 (let (($x10 (=> $x33 $x9)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x55 (= $x7 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x120 (concat ?x117 (concat ?x113 ?x109)))))
 (let (($x89 (= input.dst.llvm-%n ?x57)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x97)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x106 $x103)))
 (let (($x93 (and $x104 $x100)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x92 $x93)))
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x88)))))))
 (let (($x14 (and (and (and $x91 $x70) $x101) $x89)))
 (let (($x40 (= $x14 true)))
 (let (($x79 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and $x79 $x40)))
 (let (($x74 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x22 (and $x74 $x33)))
 (let (($x73 (forall ((input.ind-%var221X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var221X)))
 (=> $x48 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var221X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var220X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var220X)))
 (= $x48 false)))
 ))
 (let (($x75 (and $x51 $x73)))
 (let (($x9 (and $x75 $x22)))
 (let (($x26 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x10 (and $x26 $x9)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x39 (and $x30 $x10)))
 (let (($x66 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x68 (and $x66 $x39)))
 (let (($x28 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x69 (and $x28 $x68)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x90 (and $x38 $x69)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x62 (and $x46 $x90)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x65 (and $x19 $x62)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x64 (and $x31 $x65)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x67 (and $x8 $x64)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x35 (and $x23 $x67)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x36 (and $x21 $x35)))
 (let (($x49 (=> $x36 $x55)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x55 (= $x7 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x120 (concat ?x117 (concat ?x113 ?x109)))))
 (let (($x89 (= input.dst.llvm-%n ?x57)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x97)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x106 $x103)))
 (let (($x93 (and $x104 $x100)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x92 $x93)))
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x88)))))))
 (let (($x14 (and (and (and $x91 $x70) $x101) $x89)))
 (let (($x40 (= $x14 true)))
 (let (($x79 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and $x79 $x40)))
 (let (($x74 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x22 (and $x74 $x33)))
 (let (($x73 (forall ((input.ind-%var221X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var221X)))
 (=> $x48 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var221X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var220X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var220X)))
 (= $x48 false)))
 ))
 (let (($x75 (and $x51 $x73)))
 (let (($x9 (and $x75 $x22)))
 (let (($x26 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x10 (and $x26 $x9)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x39 (and $x30 $x10)))
 (let (($x66 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x68 (and $x66 $x39)))
 (let (($x28 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x69 (and $x28 $x68)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x90 (and $x38 $x69)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x62 (and $x46 $x90)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x65 (and $x19 $x62)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x64 (and $x31 $x65)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x67 (and $x8 $x64)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x35 (and $x23 $x67)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x36 (and $x21 $x35)))
 (let (($x49 (=> $x36 $x55)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x54)))
 (let (($x60 (= ?x58 input.dst.llvm-%n)))
 (let (($x12 (= $x60 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x69 (concat ?x10 (concat ?x40 ?x89)))))
 (let (($x62 (= input.dst.llvm-%n ?x90)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x119 $x116)))
 (let (($x109 (and $x117 $x113)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x105 $x109)))
 (let (($x83 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x102)))))))
 (let (($x67 (and (and (and $x101 $x83) $x114) $x62)))
 (let (($x35 (= $x67 true)))
 (let (($x99 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (and $x99 $x35)))
 (let (($x85 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x7 (and $x85 $x36)))
 (let (($x84 (forall ((input.ind-%var239X (_ BitVec 32)) )(let (($x41 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var239X)))
 (=> $x41 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var239X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var238X (_ BitVec 32)) )(let (($x41 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var238X)))
 (= $x41 false)))
 ))
 (let (($x86 (and $x82 $x84)))
 (let (($x55 (and $x86 $x7)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x49 (and $x24 $x55)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x17 (and $x27 $x49)))
 (let (($x63 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x80 (and $x63 $x17)))
 (let (($x13 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x81 (and $x13 $x80)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x108 (and $x42 $x81)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x71 (and $x15 $x108)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x43 (and $x44 $x71)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x50 (and $x20 $x43)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x5 (and $x56 $x50)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x61 (and $x21 $x5)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x11 (and $x77 $x61)))
 (let (($x121 (=> $x11 $x12)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x54)))
 (let (($x60 (= ?x58 input.dst.llvm-%n)))
 (let (($x12 (= $x60 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x69 (concat ?x10 (concat ?x40 ?x89)))))
 (let (($x62 (= input.dst.llvm-%n ?x90)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x119 $x116)))
 (let (($x109 (and $x117 $x113)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x105 $x109)))
 (let (($x83 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x102)))))))
 (let (($x67 (and (and (and $x101 $x83) $x114) $x62)))
 (let (($x35 (= $x67 true)))
 (let (($x99 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (and $x99 $x35)))
 (let (($x85 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x7 (and $x85 $x36)))
 (let (($x84 (forall ((input.ind-%var239X (_ BitVec 32)) )(let (($x41 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var239X)))
 (=> $x41 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var239X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var238X (_ BitVec 32)) )(let (($x41 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var238X)))
 (= $x41 false)))
 ))
 (let (($x86 (and $x82 $x84)))
 (let (($x55 (and $x86 $x7)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x49 (and $x24 $x55)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x17 (and $x27 $x49)))
 (let (($x63 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x80 (and $x63 $x17)))
 (let (($x13 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x81 (and $x13 $x80)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x108 (and $x42 $x81)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x71 (and $x15 $x108)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x43 (and $x44 $x71)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x50 (and $x20 $x43)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x5 (and $x56 $x50)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x61 (and $x21 $x5)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x11 (and $x77 $x61)))
 (let (($x121 (=> $x11 $x12)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x52)))
 (let (($x79 (= ?x32 input.spec-%var-n-1)))
 (let (($x75 (= $x79 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x81 (concat ?x49 (concat ?x35 ?x62)))))
 (let (($x71 (= input.dst.llvm-%n ?x108)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x14)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x68 $x9)))
 (let (($x89 (and $x10 $x40)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x118 $x89)))
 (let (($x91 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x115)))))))
 (let (($x5 (and (and (and $x114 $x91) $x33) $x71)))
 (let (($x61 (= $x5 true)))
 (let (($x104 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (and $x104 $x61)))
 (let (($x92 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x45 (and $x92 $x11)))
 (let (($x111 (forall ((input.ind-%var249X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var249X)))
 (=> $x82 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var249X) (_ bv0 32)))))
 ))
 (let (($x84 (forall ((input.ind-%var248X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var248X)))
 (= $x82 false)))
 ))
 (let (($x106 (and $x84 $x111)))
 (let (($x54 (and $x106 $x45)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x58 (and $x24 $x54)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x60 (and $x27 $x58)))
 (let (($x63 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x12 (and $x63 $x60)))
 (let (($x13 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x121 (and $x13 $x12)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x122 (and $x42 $x121)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x94 (and $x15 $x122)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x95 (and $x44 $x94)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x57 (and $x20 $x95)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x51 (and $x56 $x57)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x78 (and $x21 $x51)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x76 (and $x77 $x78)))
 (let (($x72 (=> $x76 $x75)))
 (not $x72))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x52)))
 (let (($x79 (= ?x32 input.spec-%var-n-1)))
 (let (($x75 (= $x79 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x81 (concat ?x49 (concat ?x35 ?x62)))))
 (let (($x71 (= input.dst.llvm-%n ?x108)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x14)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x68 $x9)))
 (let (($x89 (and $x10 $x40)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x118 $x89)))
 (let (($x91 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x115)))))))
 (let (($x5 (and (and (and $x114 $x91) $x33) $x71)))
 (let (($x61 (= $x5 true)))
 (let (($x104 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (and $x104 $x61)))
 (let (($x92 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x45 (and $x92 $x11)))
 (let (($x111 (forall ((input.ind-%var249X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var249X)))
 (=> $x82 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var249X) (_ bv0 32)))))
 ))
 (let (($x84 (forall ((input.ind-%var248X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var248X)))
 (= $x82 false)))
 ))
 (let (($x106 (and $x84 $x111)))
 (let (($x54 (and $x106 $x45)))
 (let (($x24 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x58 (and $x24 $x54)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x60 (and $x27 $x58)))
 (let (($x63 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x12 (and $x63 $x60)))
 (let (($x13 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x121 (and $x13 $x12)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x122 (and $x42 $x121)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x94 (and $x15 $x122)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x95 (and $x44 $x94)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x57 (and $x20 $x95)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x51 (and $x56 $x57)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x78 (and $x21 $x51)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x76 (and $x77 $x78)))
 (let (($x72 (=> $x76 $x75)))
 (not $x72))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x48 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x41 (= $x48 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x12 (concat ?x54 (concat ?x5 ?x108)))))
 (let (($x122 (= input.dst.llvm-%n ?x121)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x49)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x39 $x7)))
 (let (($x35 (and $x55 $x67)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x50 $x35)))
 (let (($x114 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x69)))))))
 (let (($x57 (and (and (and $x89 $x114) $x62) $x122)))
 (let (($x51 (= $x57 true)))
 (let (($x116 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x116 $x51)))
 (let (($x120 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x76 (and $x120 $x78)))
 (let (($x109 (forall ((input.ind-%var259X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var259X)))
 (=> $x96 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var259X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var258X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var258X)))
 (= $x96 false)))
 ))
 (let (($x37 (and $x93 $x109)))
 (let (($x26 (and $x37 $x76)))
 (let (($x29 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x52 (and $x29 $x26)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x32 (and $x66 $x52)))
 (let (($x28 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x79 (and $x28 $x32)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x75 (and $x18 $x79)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x72 (and $x53 $x75)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x47 (and $x19 $x72)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x100 (and $x31 $x47)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x90 (and $x8 $x100)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x74 (and $x6 $x90)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x98 (and $x25 $x74)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x85 (and $x34 $x98)))
 (let (($x110 (=> $x85 $x41)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x48 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x41 (= $x48 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x12 (concat ?x54 (concat ?x5 ?x108)))))
 (let (($x122 (= input.dst.llvm-%n ?x121)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x49)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x39 $x7)))
 (let (($x35 (and $x55 $x67)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x50 $x35)))
 (let (($x114 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x69)))))))
 (let (($x57 (and (and (and $x89 $x114) $x62) $x122)))
 (let (($x51 (= $x57 true)))
 (let (($x116 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x116 $x51)))
 (let (($x120 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x76 (and $x120 $x78)))
 (let (($x109 (forall ((input.ind-%var259X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var259X)))
 (=> $x96 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var259X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var258X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var258X)))
 (= $x96 false)))
 ))
 (let (($x37 (and $x93 $x109)))
 (let (($x26 (and $x37 $x76)))
 (let (($x29 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x52 (and $x29 $x26)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x32 (and $x66 $x52)))
 (let (($x28 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x79 (and $x28 $x32)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x75 (and $x18 $x79)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x72 (and $x53 $x75)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x47 (and $x19 $x72)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x100 (and $x31 $x47)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x90 (and $x8 $x100)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x74 (and $x6 $x90)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x98 (and $x25 $x74)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x85 (and $x34 $x98)))
 (let (($x110 (=> $x85 $x41)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x157 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x157 false)))
 (let (($x159 (= $x158 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x10)))
 (let (($x140 (= ?x14 input.dst.llvm-%n)))
 (let (($x141 (= $x140 true)))
 (let (($x136 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x137 (= $x136 true)))
 (let (($x133 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x134 (= $x133 true)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x127 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x128 (= $x127 true)))
 (let (($x124 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x125 (= $x124 true)))
 (let (($x87 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x70 (= $x87 true)))
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x106 true)))
 (let (($x24 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x59 (= $x24 true)))
 (let (($x84 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x102 (= $x84 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x85)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x47 $x74)))
 (let (($x41 (and $x98 $x48)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x61 $x41)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x76)))))))
 (let (($x99 (and $x72 $x110)))
 (let (($x112 (= $x99 true)))
 (let (($x11 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x45 (= $x11 true)))
 (let (($x36 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x60 (= $x36 true)))
 (let (($x35 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x62 (= $x35 true)))
 (let (($x7 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x55 (= $x7 true)))
 (let (($x39 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x80 (= $x39 true)))
 (let (($x94 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x33 (= $x94 true)))
 (let (($x89 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (= $x89 true)))
 (let (($x50 (and $x113 $x33)))
 (let (($x81 (and $x50 $x80)))
 (let (($x49 (and $x81 $x55)))
 (let (($x95 (and $x49 $x62)))
 (let (($x12 (and $x95 $x60)))
 (let (($x54 (and $x12 $x45)))
 (let (($x17 (and $x54 $x112)))
 (let (($x107 (and $x17 $x102)))
 (let (($x88 (and $x107 $x59)))
 (let (($x86 (and $x88 $x104)))
 (let (($x73 (and $x86 $x70)))
 (let (($x126 (and $x73 $x125)))
 (let (($x129 (and $x126 $x128)))
 (let (($x132 (and $x129 $x131)))
 (let (($x135 (and $x132 $x134)))
 (let (($x138 (and $x135 $x137)))
 (let (($x142 (and $x138 $x141)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x22 $x142)))
 (let (($x68 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x144 (and $x68 $x143)))
 (let (($x40 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var277X)))
 (=> $x16 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var277X) (_ bv0 32)))))
 ))
 (let (($x65 (forall ((input.ind-%var276X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var276X)))
 (= $x16 false)))
 ))
 (let (($x43 (and $x65 $x40)))
 (let (($x145 (and $x43 $x144)))
 (let (($x30 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x146 (and $x30 $x145)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x147 (and $x63 $x146)))
 (let (($x13 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x148 (and $x13 $x147)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x149 (and $x38 $x148)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x150 (and $x46 $x149)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x151 (and $x44 $x150)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x152 (and $x20 $x151)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x153 (and $x21 $x152)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x154 (and $x77 $x153)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x155 (and $x97 $x154)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x156 (and $x23 $x155)))
 (let (($x160 (=> $x156 $x159)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x157 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x157 false)))
 (let (($x159 (= $x158 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x10)))
 (let (($x140 (= ?x14 input.dst.llvm-%n)))
 (let (($x141 (= $x140 true)))
 (let (($x136 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x137 (= $x136 true)))
 (let (($x133 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x134 (= $x133 true)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x127 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x128 (= $x127 true)))
 (let (($x124 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x125 (= $x124 true)))
 (let (($x87 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x70 (= $x87 true)))
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x106 true)))
 (let (($x24 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x59 (= $x24 true)))
 (let (($x84 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x102 (= $x84 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x85)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x47 $x74)))
 (let (($x41 (and $x98 $x48)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x61 $x41)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x76)))))))
 (let (($x99 (and $x72 $x110)))
 (let (($x112 (= $x99 true)))
 (let (($x11 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x45 (= $x11 true)))
 (let (($x36 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x60 (= $x36 true)))
 (let (($x35 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x62 (= $x35 true)))
 (let (($x7 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x55 (= $x7 true)))
 (let (($x39 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x80 (= $x39 true)))
 (let (($x94 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x33 (= $x94 true)))
 (let (($x89 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (= $x89 true)))
 (let (($x50 (and $x113 $x33)))
 (let (($x81 (and $x50 $x80)))
 (let (($x49 (and $x81 $x55)))
 (let (($x95 (and $x49 $x62)))
 (let (($x12 (and $x95 $x60)))
 (let (($x54 (and $x12 $x45)))
 (let (($x17 (and $x54 $x112)))
 (let (($x107 (and $x17 $x102)))
 (let (($x88 (and $x107 $x59)))
 (let (($x86 (and $x88 $x104)))
 (let (($x73 (and $x86 $x70)))
 (let (($x126 (and $x73 $x125)))
 (let (($x129 (and $x126 $x128)))
 (let (($x132 (and $x129 $x131)))
 (let (($x135 (and $x132 $x134)))
 (let (($x138 (and $x135 $x137)))
 (let (($x142 (and $x138 $x141)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x22 $x142)))
 (let (($x68 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x144 (and $x68 $x143)))
 (let (($x40 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var277X)))
 (=> $x16 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var277X) (_ bv0 32)))))
 ))
 (let (($x65 (forall ((input.ind-%var276X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var276X)))
 (= $x16 false)))
 ))
 (let (($x43 (and $x65 $x40)))
 (let (($x145 (and $x43 $x144)))
 (let (($x30 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x146 (and $x30 $x145)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x147 (and $x63 $x146)))
 (let (($x13 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x148 (and $x13 $x147)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x149 (and $x38 $x148)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x150 (and $x46 $x149)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x151 (and $x44 $x150)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x152 (and $x20 $x151)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x153 (and $x21 $x152)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x154 (and $x77 $x153)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x155 (and $x97 $x154)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x156 (and $x23 $x155)))
 (let (($x160 (=> $x156 $x159)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (not $x92)))
 (let (($x29 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (not $x29)))
 (let (($x37 (or $x82 $x115)))
 (let (($x116 (= $x37 true)))
 (let ((?x143 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x143)))
 (let (($x149 (= ?x144 input.dst.llvm-%n)))
 (let (($x150 (= $x149 true)))
 (let (($x145 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (= $x145 true)))
 (let ((?x138 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x138)))
 (let (($x140 (= ?x139 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x140 true)))
 (let (($x135 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x132 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x133 (= $x132 true)))
 (let (($x129 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x130 (= $x129 true)))
 (let (($x126 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x127 (= $x126 true)))
 (let (($x123 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x124 (= $x123 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x70 (= $x87 true)))
 (let (($x106 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x104 (= $x106 true)))
 (let (($x24 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x59 (= $x24 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x41)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x74 $x85)))
 (let (($x99 (and $x48 $x110)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x51 $x99)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x79)))))))
 (let (($x17 (and $x90 $x112)))
 (let (($x84 (= $x17 true)))
 (let (($x45 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x54 (= $x45 true)))
 (let (($x60 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x12 (= $x60 true)))
 (let (($x62 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x95 (= $x62 true)))
 (let ((?x81 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x81)))
 (let (($x49 (= ?x7 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x49 true)))
 (let (($x36 (and $x67 $x95)))
 (let (($x11 (and $x36 $x12)))
 (let (($x58 (and $x11 $x54)))
 (let (($x102 (and $x58 $x84)))
 (let (($x88 (and $x102 $x59)))
 (let (($x86 (and $x88 $x104)))
 (let (($x73 (and $x86 $x70)))
 (let (($x125 (and $x73 $x124)))
 (let (($x128 (and $x125 $x127)))
 (let (($x131 (and $x128 $x130)))
 (let (($x134 (and $x131 $x133)))
 (let (($x137 (and $x134 $x136)))
 (let (($x142 (and $x137 $x141)))
 (let (($x147 (and $x142 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and $x50 $x151)))
 (let (($x114 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x153 (and $x114 $x152)))
 (let (($x14 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var772X)))
 (=> $x83 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var772X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var771X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var771X)))
 (= $x83 false)))
 ))
 (let (($x89 (and $x91 $x14)))
 (let (($x154 (and $x89 $x153)))
 (let (($x27 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x155 (and $x27 $x154)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x156 (and $x28 $x155)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x157 (and $x18 $x156)))
 (let (($x71 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x158 (and $x71 $x157)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x159 (and $x15 $x158)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x160 (and $x53 $x159)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x161 (and $x42 $x160)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x5 (and $x38 $x161)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x93 (and $x19 $x5)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x105 (and $x25 $x93)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x119 (and $x23 $x105)))
 (let (($x111 (=> $x119 $x116)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (not $x92)))
 (let (($x29 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (not $x29)))
 (let (($x37 (or $x82 $x115)))
 (let (($x116 (= $x37 true)))
 (let ((?x143 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x143)))
 (let (($x149 (= ?x144 input.dst.llvm-%n)))
 (let (($x150 (= $x149 true)))
 (let (($x145 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (= $x145 true)))
 (let ((?x138 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x138)))
 (let (($x140 (= ?x139 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x140 true)))
 (let (($x135 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x132 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x133 (= $x132 true)))
 (let (($x129 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x130 (= $x129 true)))
 (let (($x126 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x127 (= $x126 true)))
 (let (($x123 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x124 (= $x123 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x70 (= $x87 true)))
 (let (($x106 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x104 (= $x106 true)))
 (let (($x24 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x59 (= $x24 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x41)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x74 $x85)))
 (let (($x99 (and $x48 $x110)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x51 $x99)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x79)))))))
 (let (($x17 (and $x90 $x112)))
 (let (($x84 (= $x17 true)))
 (let (($x45 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x54 (= $x45 true)))
 (let (($x60 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x12 (= $x60 true)))
 (let (($x62 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x95 (= $x62 true)))
 (let ((?x81 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x81)))
 (let (($x49 (= ?x7 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x49 true)))
 (let (($x36 (and $x67 $x95)))
 (let (($x11 (and $x36 $x12)))
 (let (($x58 (and $x11 $x54)))
 (let (($x102 (and $x58 $x84)))
 (let (($x88 (and $x102 $x59)))
 (let (($x86 (and $x88 $x104)))
 (let (($x73 (and $x86 $x70)))
 (let (($x125 (and $x73 $x124)))
 (let (($x128 (and $x125 $x127)))
 (let (($x131 (and $x128 $x130)))
 (let (($x134 (and $x131 $x133)))
 (let (($x137 (and $x134 $x136)))
 (let (($x142 (and $x137 $x141)))
 (let (($x147 (and $x142 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and $x50 $x151)))
 (let (($x114 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x153 (and $x114 $x152)))
 (let (($x14 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var772X)))
 (=> $x83 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var772X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var771X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var771X)))
 (= $x83 false)))
 ))
 (let (($x89 (and $x91 $x14)))
 (let (($x154 (and $x89 $x153)))
 (let (($x27 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x155 (and $x27 $x154)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x156 (and $x28 $x155)))
 (let (($x18 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x157 (and $x18 $x156)))
 (let (($x71 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x158 (and $x71 $x157)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x159 (and $x15 $x158)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x160 (and $x53 $x159)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x161 (and $x42 $x160)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x5 (and $x38 $x161)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x93 (and $x19 $x5)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x105 (and $x25 $x93)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x119 (and $x23 $x105)))
 (let (($x111 (=> $x119 $x116)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 137 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x164 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x163 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x165 (ite $x163 ?x164 (_ bv0 32))))
 (let ((?x109 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x22 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x166 (ite $x22 ?x109 ?x165)))
 (let ((?x167 (bvmul (_ bv4294967295 32) ?x166)))
 (let ((?x168 (bvneg ?x167)))
 (let (($x170 (= ?x168 ?x169)))
 (let (($x171 (= $x170 true)))
 (let ((?x161 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x161)))
 (let (($x105 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x105 true)))
 (let ((?x156 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x156)))
 (let (($x158 (= ?x157 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x158 true)))
 (let (($x153 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x154 (= $x153 true)))
 (let (($x150 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x151 (= $x150 true)))
 (let (($x147 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x148 (= $x147 true)))
 (let (($x144 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x145 (= $x144 true)))
 (let (($x141 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x142 (= $x141 true)))
 (let (($x138 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x139 (= $x138 true)))
 (let (($x135 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x132 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x133 (= $x132 true)))
 (let (($x129 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x130 (= $x129 true)))
 (let (($x125 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x126 (= $x125 true)))
 (let (($x73 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x123 (= $x73 true)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x87 (= $x86 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x102)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x110 $x17)))
 (let (($x24 (and $x84 $x107)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x26 $x24)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x122)))))))
 (let (($x88 (and $x41 $x59)))
 (let (($x103 (= $x88 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x12)))
 (let (($x78 (= ?x11 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (= $x78 true)))
 (let (($x54 (= ?x11 input.dst.llvm-%n)))
 (let (($x58 (= $x54 true)))
 (let (($x100 (and $x58 $x57)))
 (let (($x106 (and $x100 $x103)))
 (let (($x70 (and $x106 $x87)))
 (let (($x124 (and $x70 $x123)))
 (let (($x127 (and $x124 $x126)))
 (let (($x131 (and $x127 $x130)))
 (let (($x134 (and $x131 $x133)))
 (let (($x137 (and $x134 $x136)))
 (let (($x140 (and $x137 $x139)))
 (let (($x143 (and $x140 $x142)))
 (let (($x146 (and $x143 $x145)))
 (let (($x149 (and $x146 $x148)))
 (let (($x152 (and $x149 $x151)))
 (let (($x155 (and $x152 $x154)))
 (let (($x160 (and $x155 $x159)))
 (let (($x29 (and $x160 $x119)))
 (let (($x36 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and (not $x36) $x29)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x62 $x92)))
 (let (($x49 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x37 (and $x49 $x115)))
 (let (($x81 (forall ((input.ind-%var817X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var817X)))
 (=> $x101 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var817X) (_ bv0 32)))))
 ))
 (let (($x10 (forall ((input.ind-%var816X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var816X)))
 (= $x101 false)))
 ))
 (let (($x7 (and $x10 $x81)))
 (let (($x116 (and $x7 $x37)))
 (let (($x66 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x111 (and $x66 $x116)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x162 (and $x13 $x111)))
 (let (($x34 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x75 (and $x34 $x162)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x65 (and $x21 $x75)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x64 (and $x56 $x65)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x118 (and $x117 $x64)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x30 (and $x77 $x118)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x96 (and $x20 $x30)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x120 (and $x31 $x96)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x69 (and $x97 $x120)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x43 (and $x23 $x69)))
 (let (($x172 (=> $x43 $x171)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x164 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x163 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x165 (ite $x163 ?x164 (_ bv0 32))))
 (let ((?x109 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x22 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x166 (ite $x22 ?x109 ?x165)))
 (let ((?x167 (bvmul (_ bv4294967295 32) ?x166)))
 (let ((?x168 (bvneg ?x167)))
 (let (($x170 (= ?x168 ?x169)))
 (let (($x171 (= $x170 true)))
 (let ((?x161 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x161)))
 (let (($x105 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x105 true)))
 (let ((?x156 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x156)))
 (let (($x158 (= ?x157 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x158 true)))
 (let (($x153 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x154 (= $x153 true)))
 (let (($x150 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x151 (= $x150 true)))
 (let (($x147 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x148 (= $x147 true)))
 (let (($x144 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x145 (= $x144 true)))
 (let (($x141 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x142 (= $x141 true)))
 (let (($x138 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x139 (= $x138 true)))
 (let (($x135 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x132 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x133 (= $x132 true)))
 (let (($x129 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x130 (= $x129 true)))
 (let (($x125 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x126 (= $x125 true)))
 (let (($x73 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x123 (= $x73 true)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x87 (= $x86 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x102)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x110 $x17)))
 (let (($x24 (and $x84 $x107)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x26 $x24)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x122)))))))
 (let (($x88 (and $x41 $x59)))
 (let (($x103 (= $x88 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x12)))
 (let (($x78 (= ?x11 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (= $x78 true)))
 (let (($x54 (= ?x11 input.dst.llvm-%n)))
 (let (($x58 (= $x54 true)))
 (let (($x100 (and $x58 $x57)))
 (let (($x106 (and $x100 $x103)))
 (let (($x70 (and $x106 $x87)))
 (let (($x124 (and $x70 $x123)))
 (let (($x127 (and $x124 $x126)))
 (let (($x131 (and $x127 $x130)))
 (let (($x134 (and $x131 $x133)))
 (let (($x137 (and $x134 $x136)))
 (let (($x140 (and $x137 $x139)))
 (let (($x143 (and $x140 $x142)))
 (let (($x146 (and $x143 $x145)))
 (let (($x149 (and $x146 $x148)))
 (let (($x152 (and $x149 $x151)))
 (let (($x155 (and $x152 $x154)))
 (let (($x160 (and $x155 $x159)))
 (let (($x29 (and $x160 $x119)))
 (let (($x36 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and (not $x36) $x29)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x62 $x92)))
 (let (($x49 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x37 (and $x49 $x115)))
 (let (($x81 (forall ((input.ind-%var817X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var817X)))
 (=> $x101 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var817X) (_ bv0 32)))))
 ))
 (let (($x10 (forall ((input.ind-%var816X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var816X)))
 (= $x101 false)))
 ))
 (let (($x7 (and $x10 $x81)))
 (let (($x116 (and $x7 $x37)))
 (let (($x66 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x111 (and $x66 $x116)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x162 (and $x13 $x111)))
 (let (($x34 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x75 (and $x34 $x162)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x65 (and $x21 $x75)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x64 (and $x56 $x65)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x118 (and $x117 $x64)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x30 (and $x77 $x118)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x96 (and $x20 $x30)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x120 (and $x31 $x96)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x69 (and $x97 $x120)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x43 (and $x23 $x69)))
 (let (($x172 (=> $x43 $x171)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 147 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x52 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x94 (ite $x52 ?x91 (_ bv0 32))))
 (let ((?x173 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x172 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x113 (ite $x172 ?x173 ?x94)))
 (let ((?x27 (bvmul (_ bv4294967295 32) ?x113)))
 (let ((?x16 (bvneg ?x27)))
 (let (($x33 (= ?x16 ?x68)))
 (let (($x89 (= $x33 true)))
 (let ((?x111 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x111)))
 (let (($x65 (= ?x162 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x64 (= $x65 true)))
 (let ((?x29 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x29)))
 (let (($x115 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x115 true)))
 (let (($x93 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x105 (= $x93 true)))
 (let (($x160 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x161 (= $x160 true)))
 (let (($x157 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x158 (= $x157 true)))
 (let (($x154 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x155 (= $x154 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x152 (= $x151 true)))
 (let (($x148 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x145 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x146 (= $x145 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x143 (= $x142 true)))
 (let (($x139 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x140 (= $x139 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x132 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x133 (= $x132 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (= $x129 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x70)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x103 $x86)))
 (let (($x123 (and $x87 $x73)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x85 $x123)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x17)))))))
 (let (($x125 (and $x88 $x124)))
 (let (($x126 (= $x125 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x79)))
 (let (($x90 (= ?x72 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x61 (= $x90 true)))
 (let (($x108 (= ?x72 input.dst.llvm-%n)))
 (let (($x47 (= $x108 true)))
 (let (($x122 (and $x47 $x61)))
 (let (($x127 (and $x122 $x126)))
 (let (($x131 (and $x127 $x130)))
 (let (($x134 (and $x131 $x133)))
 (let (($x137 (and $x134 $x136)))
 (let (($x141 (and $x137 $x140)))
 (let (($x144 (and $x141 $x143)))
 (let (($x147 (and $x144 $x146)))
 (let (($x150 (and $x147 $x149)))
 (let (($x153 (and $x150 $x152)))
 (let (($x156 (and $x153 $x155)))
 (let (($x159 (and $x156 $x158)))
 (let (($x5 (and $x159 $x161)))
 (let (($x119 (and $x5 $x105)))
 (let (($x116 (and $x119 $x37)))
 (let (($x118 (and $x116 $x64)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and (not $x57) $x118)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and $x58 $x96)))
 (let (($x11 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x69 (and $x11 $x120)))
 (let (($x82 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var897X)))
 (=> $x9 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var897X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var896X)))
 (= $x9 false)))
 ))
 (let (($x60 (and $x80 $x82)))
 (let (($x43 (and $x60 $x69)))
 (let (($x63 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x22 (and $x63 $x43)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x109 (and $x18 $x22)))
 (let (($x71 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x163 (and $x71 $x109)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x164 (and $x46 $x163)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x165 (and $x8 $x164)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x166 (and $x42 $x165)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x167 (and $x38 $x166)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x168 (and $x19 $x167)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x169 (and $x25 $x168)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x170 (and $x6 $x169)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x171 (and $x23 $x170)))
 (let (($x50 (=> $x171 $x89)))
 (not $x50))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x52 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x94 (ite $x52 ?x91 (_ bv0 32))))
 (let ((?x173 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x172 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x113 (ite $x172 ?x173 ?x94)))
 (let ((?x27 (bvmul (_ bv4294967295 32) ?x113)))
 (let ((?x16 (bvneg ?x27)))
 (let (($x33 (= ?x16 ?x68)))
 (let (($x89 (= $x33 true)))
 (let ((?x111 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x111)))
 (let (($x65 (= ?x162 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x64 (= $x65 true)))
 (let ((?x29 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x29)))
 (let (($x115 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x115 true)))
 (let (($x93 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x105 (= $x93 true)))
 (let (($x160 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x161 (= $x160 true)))
 (let (($x157 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x158 (= $x157 true)))
 (let (($x154 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x155 (= $x154 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x152 (= $x151 true)))
 (let (($x148 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x145 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x146 (= $x145 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x143 (= $x142 true)))
 (let (($x139 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x140 (= $x139 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x136 (= $x135 true)))
 (let (($x132 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x133 (= $x132 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (= $x129 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x70)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x103 $x86)))
 (let (($x123 (and $x87 $x73)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x85 $x123)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x17)))))))
 (let (($x125 (and $x88 $x124)))
 (let (($x126 (= $x125 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x79)))
 (let (($x90 (= ?x72 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x61 (= $x90 true)))
 (let (($x108 (= ?x72 input.dst.llvm-%n)))
 (let (($x47 (= $x108 true)))
 (let (($x122 (and $x47 $x61)))
 (let (($x127 (and $x122 $x126)))
 (let (($x131 (and $x127 $x130)))
 (let (($x134 (and $x131 $x133)))
 (let (($x137 (and $x134 $x136)))
 (let (($x141 (and $x137 $x140)))
 (let (($x144 (and $x141 $x143)))
 (let (($x147 (and $x144 $x146)))
 (let (($x150 (and $x147 $x149)))
 (let (($x153 (and $x150 $x152)))
 (let (($x156 (and $x153 $x155)))
 (let (($x159 (and $x156 $x158)))
 (let (($x5 (and $x159 $x161)))
 (let (($x119 (and $x5 $x105)))
 (let (($x116 (and $x119 $x37)))
 (let (($x118 (and $x116 $x64)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and (not $x57) $x118)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and $x58 $x96)))
 (let (($x11 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x69 (and $x11 $x120)))
 (let (($x82 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var897X)))
 (=> $x9 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var897X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var896X)))
 (= $x9 false)))
 ))
 (let (($x60 (and $x80 $x82)))
 (let (($x43 (and $x60 $x69)))
 (let (($x63 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x22 (and $x63 $x43)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x109 (and $x18 $x22)))
 (let (($x71 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x163 (and $x71 $x109)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x164 (and $x46 $x163)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x165 (and $x8 $x164)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x166 (and $x42 $x165)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x167 (and $x38 $x166)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x168 (and $x19 $x167)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x169 (and $x25 $x168)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x170 (and $x6 $x169)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x171 (and $x23 $x170)))
 (let (($x50 (=> $x171 $x89)))
 (not $x50))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 147 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x74 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x67 (ite $x74 ?x10 (_ bv0 32))))
 (let ((?x40 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x50 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x55 (ite $x50 ?x40 ?x67)))
 (let (($x66 (bvuge ?x55 (_ bv1 32))))
 (let (($x83 (= $x66 true)))
 (let ((?x22 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x22)))
 (let (($x164 (= ?x109 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x164 true)))
 (let ((?x118 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x118)))
 (let (($x120 (= ?x96 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x120 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x65 (= $x75 true)))
 (let (($x116 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x111 (= $x116 true)))
 (let (($x92 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x115 (= $x92 true)))
 (let (($x105 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x119 (= $x105 true)))
 (let (($x161 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x5 (= $x161 true)))
 (let (($x158 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x159 (= $x158 true)))
 (let (($x154 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x155 (= $x154 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x147)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x143 $x145)))
 (let (($x149 (and $x146 $x148)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x129 $x149)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x136)))))))
 (let (($x151 (and $x142 $x150)))
 (let (($x152 (= $x151 true)))
 (let (($x123 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x124 (= $x123 true)))
 (let (($x87 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x70 (= $x87 true)))
 (let (($x106 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x104 (= $x106 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x84)))
 (let (($x98 (= ?x102 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (= $x98 true)))
 (let (($x107 (= ?x102 input.dst.llvm-%n)))
 (let (($x24 (= $x107 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x112 (= $x99 true)))
 (let (($x32 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x32 true)))
 (let (($x110 (and $x59 $x112)))
 (let (($x88 (and $x110 $x24)))
 (let (($x103 (and $x88 $x85)))
 (let (($x86 (and $x103 $x104)))
 (let (($x73 (and $x86 $x70)))
 (let (($x125 (and $x73 $x124)))
 (let (($x153 (and $x125 $x152)))
 (let (($x156 (and $x153 $x155)))
 (let (($x160 (and $x156 $x159)))
 (let (($x93 (and $x160 $x5)))
 (let (($x29 (and $x93 $x119)))
 (let (($x37 (and $x29 $x115)))
 (let (($x162 (and $x37 $x111)))
 (let (($x64 (and $x162 $x65)))
 (let (($x43 (and $x64 $x69)))
 (let (($x166 (and $x43 $x165)))
 (let (($x61 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and (not $x61) $x166)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x47 $x168)))
 (let (($x72 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x170 (and $x72 $x169)))
 (let (($x30 (forall ((input.ind-%var942X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var942X)))
 (=> $x39 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var942X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var941X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var941X)))
 (= $x39 false)))
 ))
 (let (($x100 (and $x36 $x30)))
 (let (($x171 (and $x100 $x170)))
 (let (($x28 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x172 (and $x28 $x171)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x173 (and $x34 $x172)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x52 (and $x21 $x173)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x91 (and $x15 $x52)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x94 (and $x53 $x91)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x113 (and $x77 $x94)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x27 (and $x20 $x113)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x16 (and $x31 $x27)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x68 (and $x97 $x16)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x33 (and $x121 $x68)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x89 (and $x76 $x33)))
 (let (($x114 (=> $x89 $x83)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x74 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x67 (ite $x74 ?x10 (_ bv0 32))))
 (let ((?x40 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x50 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x55 (ite $x50 ?x40 ?x67)))
 (let (($x66 (bvuge ?x55 (_ bv1 32))))
 (let (($x83 (= $x66 true)))
 (let ((?x22 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x22)))
 (let (($x164 (= ?x109 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x164 true)))
 (let ((?x118 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x118)))
 (let (($x120 (= ?x96 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x120 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x65 (= $x75 true)))
 (let (($x116 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x111 (= $x116 true)))
 (let (($x92 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x115 (= $x92 true)))
 (let (($x105 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x119 (= $x105 true)))
 (let (($x161 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x5 (= $x161 true)))
 (let (($x158 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x159 (= $x158 true)))
 (let (($x154 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x155 (= $x154 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x147)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x143 $x145)))
 (let (($x149 (and $x146 $x148)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x129 $x149)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x136)))))))
 (let (($x151 (and $x142 $x150)))
 (let (($x152 (= $x151 true)))
 (let (($x123 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x124 (= $x123 true)))
 (let (($x87 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x70 (= $x87 true)))
 (let (($x106 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x104 (= $x106 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x84)))
 (let (($x98 (= ?x102 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (= $x98 true)))
 (let (($x107 (= ?x102 input.dst.llvm-%n)))
 (let (($x24 (= $x107 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x112 (= $x99 true)))
 (let (($x32 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x32 true)))
 (let (($x110 (and $x59 $x112)))
 (let (($x88 (and $x110 $x24)))
 (let (($x103 (and $x88 $x85)))
 (let (($x86 (and $x103 $x104)))
 (let (($x73 (and $x86 $x70)))
 (let (($x125 (and $x73 $x124)))
 (let (($x153 (and $x125 $x152)))
 (let (($x156 (and $x153 $x155)))
 (let (($x160 (and $x156 $x159)))
 (let (($x93 (and $x160 $x5)))
 (let (($x29 (and $x93 $x119)))
 (let (($x37 (and $x29 $x115)))
 (let (($x162 (and $x37 $x111)))
 (let (($x64 (and $x162 $x65)))
 (let (($x43 (and $x64 $x69)))
 (let (($x166 (and $x43 $x165)))
 (let (($x61 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and (not $x61) $x166)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x47 $x168)))
 (let (($x72 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x170 (and $x72 $x169)))
 (let (($x30 (forall ((input.ind-%var942X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var942X)))
 (=> $x39 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var942X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var941X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var941X)))
 (= $x39 false)))
 ))
 (let (($x100 (and $x36 $x30)))
 (let (($x171 (and $x100 $x170)))
 (let (($x28 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x172 (and $x28 $x171)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x173 (and $x34 $x172)))
 (let (($x21 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x52 (and $x21 $x173)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x91 (and $x15 $x52)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x94 (and $x53 $x91)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x113 (and $x77 $x94)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x27 (and $x20 $x113)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x16 (and $x31 $x27)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x68 (and $x97 $x16)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x33 (and $x121 $x68)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x89 (and $x76 $x33)))
 (let (($x114 (=> $x89 $x83)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 144 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x12 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x101 (ite $x12 ?x63 (_ bv0 32))))
 (let ((?x45 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x80 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x49 (ite $x80 ?x45 ?x101)))
 (let (($x54 (bvule ?x49 (_ bv3 32))))
 (let (($x60 (= $x54 true)))
 (let ((?x172 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x172)))
 (let (($x91 (= ?x173 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x91 true)))
 (let ((?x166 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x166)))
 (let (($x169 (= ?x168 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x169 true)))
 (let (($x163 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x164 (= $x163 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x22 (= $x43 true)))
 (let (($x96 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x120 (= $x96 true)))
 (let (($x65 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x64 (= $x65 true)))
 (let (($x111 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x162 (= $x111 true)))
 (let (($x115 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x37 (= $x115 true)))
 (let (($x105 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x119 (= $x105 true)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x157)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x153 $x155)))
 (let (($x159 (and $x156 $x158)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x140 $x159)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x146)))))))
 (let (($x161 (and $x152 $x160)))
 (let (($x5 (= $x161 true)))
 (let (($x135 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x133 (= $x135 true)))
 (let (($x141 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x132 (= $x141 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x130 (= $x125 true)))
 (let ((?x106 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x106)))
 (let (($x73 (= ?x104 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (= $x73 true)))
 (let (($x86 (= ?x104 input.dst.llvm-%n)))
 (let (($x87 (= $x86 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x98 (= $x88 true)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x102 true)))
 (let (($x85 (and $x107 $x98)))
 (let (($x70 (and $x85 $x87)))
 (let (($x124 (and $x70 $x123)))
 (let (($x131 (and $x124 $x130)))
 (let (($x134 (and $x131 $x132)))
 (let (($x136 (and $x134 $x133)))
 (let (($x93 (and $x136 $x5)))
 (let (($x29 (and $x93 $x119)))
 (let (($x116 (and $x29 $x37)))
 (let (($x75 (and $x116 $x162)))
 (let (($x118 (and $x75 $x64)))
 (let (($x69 (and $x118 $x120)))
 (let (($x109 (and $x69 $x22)))
 (let (($x165 (and $x109 $x164)))
 (let (($x171 (and $x165 $x170)))
 (let (($x113 (and $x171 $x94)))
 (let (($x110 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (and (not $x110) $x113)))
 (let (($x99 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (and $x99 $x16)))
 (let (($x32 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x33 (and $x32 $x68)))
 (let (($x167 (forall ((input.ind-%var987X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var987X)))
 (=> $x95 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var987X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var986X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var986X)))
 (= $x95 false)))
 ))
 (let (($x122 (and $x57 $x167)))
 (let (($x89 (and $x122 $x33)))
 (let (($x13 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x50 (and $x13 $x89)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x40 (and $x71 $x50)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x74 (and $x46 $x40)))
 (let (($x56 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x10 (and $x56 $x74)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x67 (and $x117 $x10)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x55 (and $x38 $x67)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x66 (and $x19 $x55)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x83 (and $x25 $x66)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x114 (and $x6 $x83)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x35 (and $x23 $x114)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x127 (and $x51 $x35)))
 (let (($x58 (=> $x127 $x60)))
 (not $x58)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x12 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x101 (ite $x12 ?x63 (_ bv0 32))))
 (let ((?x45 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x80 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x49 (ite $x80 ?x45 ?x101)))
 (let (($x54 (bvule ?x49 (_ bv3 32))))
 (let (($x60 (= $x54 true)))
 (let ((?x172 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x172)))
 (let (($x91 (= ?x173 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x91 true)))
 (let ((?x166 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x166)))
 (let (($x169 (= ?x168 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x169 true)))
 (let (($x163 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x164 (= $x163 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x22 (= $x43 true)))
 (let (($x96 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x120 (= $x96 true)))
 (let (($x65 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x64 (= $x65 true)))
 (let (($x111 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x162 (= $x111 true)))
 (let (($x115 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x37 (= $x115 true)))
 (let (($x105 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x119 (= $x105 true)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x157)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x153 $x155)))
 (let (($x159 (and $x156 $x158)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x140 $x159)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x146)))))))
 (let (($x161 (and $x152 $x160)))
 (let (($x5 (= $x161 true)))
 (let (($x135 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x133 (= $x135 true)))
 (let (($x141 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x132 (= $x141 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x130 (= $x125 true)))
 (let ((?x106 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x106)))
 (let (($x73 (= ?x104 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (= $x73 true)))
 (let (($x86 (= ?x104 input.dst.llvm-%n)))
 (let (($x87 (= $x86 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x98 (= $x88 true)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x102 true)))
 (let (($x85 (and $x107 $x98)))
 (let (($x70 (and $x85 $x87)))
 (let (($x124 (and $x70 $x123)))
 (let (($x131 (and $x124 $x130)))
 (let (($x134 (and $x131 $x132)))
 (let (($x136 (and $x134 $x133)))
 (let (($x93 (and $x136 $x5)))
 (let (($x29 (and $x93 $x119)))
 (let (($x116 (and $x29 $x37)))
 (let (($x75 (and $x116 $x162)))
 (let (($x118 (and $x75 $x64)))
 (let (($x69 (and $x118 $x120)))
 (let (($x109 (and $x69 $x22)))
 (let (($x165 (and $x109 $x164)))
 (let (($x171 (and $x165 $x170)))
 (let (($x113 (and $x171 $x94)))
 (let (($x110 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (and (not $x110) $x113)))
 (let (($x99 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (and $x99 $x16)))
 (let (($x32 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x33 (and $x32 $x68)))
 (let (($x167 (forall ((input.ind-%var987X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var987X)))
 (=> $x95 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var987X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var986X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var986X)))
 (= $x95 false)))
 ))
 (let (($x122 (and $x57 $x167)))
 (let (($x89 (and $x122 $x33)))
 (let (($x13 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x50 (and $x13 $x89)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x40 (and $x71 $x50)))
 (let (($x46 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x74 (and $x46 $x40)))
 (let (($x56 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x10 (and $x56 $x74)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x67 (and $x117 $x10)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x55 (and $x38 $x67)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x66 (and $x19 $x55)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x83 (and $x25 $x66)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x114 (and $x6 $x83)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x35 (and $x23 $x114)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x127 (and $x51 $x35)))
 (let (($x58 (=> $x127 $x60)))
 (not $x58)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x79 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x9 (ite $x79 ?x28 (_ bv0 32))))
 (let ((?x48 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x36 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x11 (ite $x36 ?x48 ?x9)))
 (let (($x108 (bvule ?x11 (_ bv4 32))))
 (let (($x100 (= $x108 true)))
 (let ((?x50 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x50)))
 (let (($x10 (= ?x40 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x10 true)))
 (let ((?x113 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x113)))
 (let (($x68 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x68 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x91 (= $x52 true)))
 (let (($x171 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x172 (= $x171 true)))
 (let (($x168 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x169 (= $x168 true)))
 (let (($x164 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x165 (= $x164 true)))
 (let (($x22 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x109 (= $x22 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x69 (= $x120 true)))
 (let (($x64 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x118 (= $x64 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x92)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x5 $x119)))
 (let (($x37 (and $x29 $x115)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x149 $x37)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x155)))))))
 (let (($x111 (and $x161 $x116)))
 (let (($x162 (= $x111 true)))
 (let (($x144 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x145 (= $x144 true)))
 (let (($x128 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x151 (= $x128 true)))
 (let (($x133 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x136 (= $x133 true)))
 (let (($x132 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x134 (= $x132 true)))
 (let ((?x70 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x70)))
 (let (($x130 (= ?x73 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x131 (= $x130 true)))
 (let (($x123 (= ?x73 input.dst.llvm-%n)))
 (let (($x124 (= $x123 true)))
 (let (($x104 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (= $x104 true)))
 (let (($x125 (and $x86 $x124)))
 (let (($x141 (and $x125 $x131)))
 (let (($x135 (and $x141 $x134)))
 (let (($x142 (and $x135 $x136)))
 (let (($x129 (and $x142 $x151)))
 (let (($x143 (and $x129 $x145)))
 (let (($x75 (and $x143 $x162)))
 (let (($x96 (and $x75 $x118)))
 (let (($x43 (and $x96 $x69)))
 (let (($x163 (and $x43 $x109)))
 (let (($x166 (and $x163 $x165)))
 (let (($x170 (and $x166 $x169)))
 (let (($x173 (and $x170 $x172)))
 (let (($x94 (and $x173 $x91)))
 (let (($x89 (and $x94 $x33)))
 (let (($x55 (and $x89 $x67)))
 (let (($x85 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (and (not $x85) $x55)))
 (let (($x88 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x88 $x83)))
 (let (($x102 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x35 (and $x102 $x114)))
 (let (($x27 (forall ((input.ind-%var1260X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1260X)))
 (=> $x78 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1260X) (_ bv0 32)))))
 ))
 (let (($x61 (forall ((input.ind-%var1259X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1259X)))
 (= $x78 false)))
 ))
 (let (($x17 (and $x61 $x27)))
 (let (($x127 (and $x17 $x35)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x80 (and $x18 $x127)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x45 (and $x21 $x80)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x12 (and $x15 $x45)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x63 (and $x8 $x12)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x101 (and $x42 $x63)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x49 (and $x20 $x101)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x54 (and $x31 $x49)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x60 (and $x97 $x54)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x58 (and $x121 $x60)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x81 (and $x76 $x58)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x138 (and $x126 $x81)))
 (let (($x47 (=> $x138 $x100)))
 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x79 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x9 (ite $x79 ?x28 (_ bv0 32))))
 (let ((?x48 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x36 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x11 (ite $x36 ?x48 ?x9)))
 (let (($x108 (bvule ?x11 (_ bv4 32))))
 (let (($x100 (= $x108 true)))
 (let ((?x50 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x50)))
 (let (($x10 (= ?x40 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x10 true)))
 (let ((?x113 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x113)))
 (let (($x68 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x68 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x91 (= $x52 true)))
 (let (($x171 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x172 (= $x171 true)))
 (let (($x168 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x169 (= $x168 true)))
 (let (($x164 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x165 (= $x164 true)))
 (let (($x22 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x109 (= $x22 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x69 (= $x120 true)))
 (let (($x64 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv3 32))))
 (let (($x118 (= $x64 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x92)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x5 $x119)))
 (let (($x37 (and $x29 $x115)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x149 $x37)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x155)))))))
 (let (($x111 (and $x161 $x116)))
 (let (($x162 (= $x111 true)))
 (let (($x144 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x145 (= $x144 true)))
 (let (($x128 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x151 (= $x128 true)))
 (let (($x133 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x136 (= $x133 true)))
 (let (($x132 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x134 (= $x132 true)))
 (let ((?x70 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x70)))
 (let (($x130 (= ?x73 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x131 (= $x130 true)))
 (let (($x123 (= ?x73 input.dst.llvm-%n)))
 (let (($x124 (= $x123 true)))
 (let (($x104 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (= $x104 true)))
 (let (($x125 (and $x86 $x124)))
 (let (($x141 (and $x125 $x131)))
 (let (($x135 (and $x141 $x134)))
 (let (($x142 (and $x135 $x136)))
 (let (($x129 (and $x142 $x151)))
 (let (($x143 (and $x129 $x145)))
 (let (($x75 (and $x143 $x162)))
 (let (($x96 (and $x75 $x118)))
 (let (($x43 (and $x96 $x69)))
 (let (($x163 (and $x43 $x109)))
 (let (($x166 (and $x163 $x165)))
 (let (($x170 (and $x166 $x169)))
 (let (($x173 (and $x170 $x172)))
 (let (($x94 (and $x173 $x91)))
 (let (($x89 (and $x94 $x33)))
 (let (($x55 (and $x89 $x67)))
 (let (($x85 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (and (not $x85) $x55)))
 (let (($x88 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x88 $x83)))
 (let (($x102 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x35 (and $x102 $x114)))
 (let (($x27 (forall ((input.ind-%var1260X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1260X)))
 (=> $x78 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1260X) (_ bv0 32)))))
 ))
 (let (($x61 (forall ((input.ind-%var1259X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1259X)))
 (= $x78 false)))
 ))
 (let (($x17 (and $x61 $x27)))
 (let (($x127 (and $x17 $x35)))
 (let (($x18 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x80 (and $x18 $x127)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x45 (and $x21 $x80)))
 (let (($x15 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x12 (and $x15 $x45)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x63 (and $x8 $x12)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x101 (and $x42 $x63)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x49 (and $x20 $x101)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x54 (and $x31 $x49)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x60 (and $x97 $x54)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x58 (and $x121 $x60)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x81 (and $x76 $x58)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x138 (and $x126 $x81)))
 (let (($x47 (=> $x138 $x100)))
 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x13 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x72 (ite $x13 ?x39 (_ bv0 32))))
 (let ((?x41 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x59 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x26 (ite $x59 ?x41 ?x72)))
 (let (($x122 (bvule ?x26 (_ bv9 32))))
 (let (($x99 (= $x122 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x45)))
 (let (($x101 (= ?x12 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x49 (= $x101 true)))
 (let ((?x83 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x83)))
 (let (($x35 (= ?x114 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x35 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x10 true)))
 (let (($x50 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x40 (= $x50 true)))
 (let (($x68 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x33 (= $x68 true)))
 (let (($x94 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x113 (= $x94 true)))
 (let (($x173 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x52 (= $x173 true)))
 (let (($x170 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x171 (= $x170 true)))
 (let (($x165 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x166 (= $x165 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x120)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x75 $x118)))
 (let (($x43 (and $x96 $x69)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x161 $x43)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x29)))))))
 (let (($x109 (and $x162 $x22)))
 (let (($x163 (= $x109 true)))
 (let (($x140 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x155 (= $x140 true)))
 (let (($x139 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x153 (= $x139 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x152 (= $x150 true)))
 (let ((?x136 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x136)))
 (let (($x144 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (= $x144 true)))
 (let (($x128 (= ?x142 input.dst.llvm-%n)))
 (let (($x151 (= $x128 true)))
 (let (($x132 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x134 (= $x132 true)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (= $x130 true)))
 (let (($x135 (and $x131 $x134)))
 (let (($x129 (and $x135 $x151)))
 (let (($x143 (and $x129 $x145)))
 (let (($x160 (and $x143 $x152)))
 (let (($x154 (and $x160 $x153)))
 (let (($x156 (and $x154 $x155)))
 (let (($x164 (and $x156 $x163)))
 (let (($x168 (and $x164 $x166)))
 (let (($x172 (and $x168 $x171)))
 (let (($x91 (and $x172 $x52)))
 (let (($x16 (and $x91 $x113)))
 (let (($x89 (and $x16 $x33)))
 (let (($x74 (and $x89 $x40)))
 (let (($x55 (and $x74 $x67)))
 (let (($x80 (and $x55 $x127)))
 (let (($x54 (and $x80 $x49)))
 (let (($x123 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and (not $x123) $x54)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x70 $x58)))
 (let (($x104 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x138 (and $x104 $x81)))
 (let (($x66 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1533X)))
 (=> $x90 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1533X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1532X)))
 (= $x90 false)))
 ))
 (let (($x103 (and $x110 $x66)))
 (let (($x36 (and $x103 $x138)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x48 (and $x34 $x36)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x79 (and $x46 $x48)))
 (let (($x56 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x28 (and $x56 $x79)))
 (let (($x53 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x9 (and $x53 $x28)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x11 (and $x77 $x9)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x108 (and $x19 $x11)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x100 (and $x25 $x108)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x47 (and $x6 $x100)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x82 (and $x23 $x47)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x147 (and $x51 $x82)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x57 (and $x137 $x147)))
 (let (($x30 (=> $x57 $x99)))
 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x13 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x72 (ite $x13 ?x39 (_ bv0 32))))
 (let ((?x41 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x59 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x26 (ite $x59 ?x41 ?x72)))
 (let (($x122 (bvule ?x26 (_ bv9 32))))
 (let (($x99 (= $x122 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x45)))
 (let (($x101 (= ?x12 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x49 (= $x101 true)))
 (let ((?x83 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x83)))
 (let (($x35 (= ?x114 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x35 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x10 true)))
 (let (($x50 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x40 (= $x50 true)))
 (let (($x68 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x33 (= $x68 true)))
 (let (($x94 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x113 (= $x94 true)))
 (let (($x173 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x52 (= $x173 true)))
 (let (($x170 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv4 32))))
 (let (($x171 (= $x170 true)))
 (let (($x165 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv9 32))))
 (let (($x166 (= $x165 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x120)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x75 $x118)))
 (let (($x43 (and $x96 $x69)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x161 $x43)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x29)))))))
 (let (($x109 (and $x162 $x22)))
 (let (($x163 (= $x109 true)))
 (let (($x140 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x155 (= $x140 true)))
 (let (($x139 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x153 (= $x139 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x152 (= $x150 true)))
 (let ((?x136 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x136)))
 (let (($x144 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (= $x144 true)))
 (let (($x128 (= ?x142 input.dst.llvm-%n)))
 (let (($x151 (= $x128 true)))
 (let (($x132 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv9 32))))
 (let (($x134 (= $x132 true)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (= $x130 true)))
 (let (($x135 (and $x131 $x134)))
 (let (($x129 (and $x135 $x151)))
 (let (($x143 (and $x129 $x145)))
 (let (($x160 (and $x143 $x152)))
 (let (($x154 (and $x160 $x153)))
 (let (($x156 (and $x154 $x155)))
 (let (($x164 (and $x156 $x163)))
 (let (($x168 (and $x164 $x166)))
 (let (($x172 (and $x168 $x171)))
 (let (($x91 (and $x172 $x52)))
 (let (($x16 (and $x91 $x113)))
 (let (($x89 (and $x16 $x33)))
 (let (($x74 (and $x89 $x40)))
 (let (($x55 (and $x74 $x67)))
 (let (($x80 (and $x55 $x127)))
 (let (($x54 (and $x80 $x49)))
 (let (($x123 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and (not $x123) $x54)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x70 $x58)))
 (let (($x104 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x138 (and $x104 $x81)))
 (let (($x66 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1533X)))
 (=> $x90 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1533X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1532X)))
 (= $x90 false)))
 ))
 (let (($x103 (and $x110 $x66)))
 (let (($x36 (and $x103 $x138)))
 (let (($x34 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x48 (and $x34 $x36)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x79 (and $x46 $x48)))
 (let (($x56 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x28 (and $x56 $x79)))
 (let (($x53 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x9 (and $x53 $x28)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x11 (and $x77 $x9)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x108 (and $x19 $x11)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x100 (and $x25 $x108)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x47 (and $x6 $x100)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x82 (and $x23 $x47)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x147 (and $x51 $x82)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x57 (and $x137 $x147)))
 (let (($x30 (=> $x57 $x99)))
 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000009)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x122 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x30 (ite $x122 ?x99 (_ bv0 32))))
 (let ((?x26 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x72 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x7 (ite $x72 ?x26 ?x30)))
 (let (($x158 (bvule ?x7 (_ bv10 32))))
 (let (($x61 (= $x158 true)))
 (let ((?x101 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x101)))
 (let (($x58 (= ?x49 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x58 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x127)))
 (let (($x45 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x45 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x114 (= $x83 true)))
 (let (($x10 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x10 true)))
 (let (($x50 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x40 (= $x50 true)))
 (let (($x68 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x33 (= $x68 true)))
 (let (($x91 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x94 (= $x91 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x173 (= $x172 true)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x164)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x69 $x109)))
 (let (($x166 (and $x163 $x165)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x29 $x166)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x161)))))))
 (let (($x169 (and $x120 $x168)))
 (let (($x170 (= $x169 true)))
 (let (($x149 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x111 (= $x149 true)))
 (let (($x155 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x156 (= $x155 true)))
 (let ((?x143 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x150 (bvneg ?x143)))
 (let (($x153 (= ?x150 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (= $x153 true)))
 (let (($x152 (= ?x150 input.dst.llvm-%n)))
 (let (($x160 (= $x152 true)))
 (let (($x151 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x129 (= $x151 true)))
 (let (($x142 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x128 (= $x142 true)))
 (let (($x144 (and $x128 $x129)))
 (let (($x139 (and $x144 $x160)))
 (let (($x140 (and $x139 $x154)))
 (let (($x148 (and $x140 $x156)))
 (let (($x5 (and $x148 $x111)))
 (let (($x171 (and $x5 $x170)))
 (let (($x52 (and $x171 $x173)))
 (let (($x113 (and $x52 $x94)))
 (let (($x89 (and $x113 $x33)))
 (let (($x74 (and $x89 $x40)))
 (let (($x55 (and $x74 $x67)))
 (let (($x35 (and $x55 $x114)))
 (let (($x63 (and $x35 $x12)))
 (let (($x138 (and $x63 $x81)))
 (let (($x135 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (and (not $x135) $x138)))
 (let (($x132 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (and $x132 $x48)))
 (let (($x130 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x28 (and $x130 $x79)))
 (let (($x60 (forall ((input.ind-%var1816X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1816X)))
 (=> $x112 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1816X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var1815X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1815X)))
 (= $x112 false)))
 ))
 (let (($x124 (and $x85 $x60)))
 (let (($x9 (and $x124 $x28)))
 (let (($x71 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x11 (and $x71 $x9)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x108 (and $x15 $x11)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x100 (and $x8 $x108)))
 (let (($x117 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x47 (and $x117 $x100)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x82 (and $x38 $x47)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x147 (and $x31 $x82)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x57 (and $x97 $x147)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x59 (and $x121 $x57)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x41 (and $x76 $x59)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x13 (and $x126 $x41)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x39 (and $x146 $x13)))
 (let (($x107 (=> $x39 $x61)))
 (not $x107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x122 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x30 (ite $x122 ?x99 (_ bv0 32))))
 (let ((?x26 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x72 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x7 (ite $x72 ?x26 ?x30)))
 (let (($x158 (bvule ?x7 (_ bv10 32))))
 (let (($x61 (= $x158 true)))
 (let ((?x101 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x101)))
 (let (($x58 (= ?x49 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x58 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x127)))
 (let (($x45 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x45 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x114 (= $x83 true)))
 (let (($x10 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x10 true)))
 (let (($x50 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x40 (= $x50 true)))
 (let (($x68 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x33 (= $x68 true)))
 (let (($x91 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv10 32))))
 (let (($x94 (= $x91 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x173 (= $x172 true)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x164)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x69 $x109)))
 (let (($x166 (and $x163 $x165)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x29 $x166)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x159 $x161)))))))
 (let (($x169 (and $x120 $x168)))
 (let (($x170 (= $x169 true)))
 (let (($x149 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x111 (= $x149 true)))
 (let (($x155 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x156 (= $x155 true)))
 (let ((?x143 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x150 (bvneg ?x143)))
 (let (($x153 (= ?x150 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (= $x153 true)))
 (let (($x152 (= ?x150 input.dst.llvm-%n)))
 (let (($x160 (= $x152 true)))
 (let (($x151 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv10 32))))
 (let (($x129 (= $x151 true)))
 (let (($x142 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x128 (= $x142 true)))
 (let (($x144 (and $x128 $x129)))
 (let (($x139 (and $x144 $x160)))
 (let (($x140 (and $x139 $x154)))
 (let (($x148 (and $x140 $x156)))
 (let (($x5 (and $x148 $x111)))
 (let (($x171 (and $x5 $x170)))
 (let (($x52 (and $x171 $x173)))
 (let (($x113 (and $x52 $x94)))
 (let (($x89 (and $x113 $x33)))
 (let (($x74 (and $x89 $x40)))
 (let (($x55 (and $x74 $x67)))
 (let (($x35 (and $x55 $x114)))
 (let (($x63 (and $x35 $x12)))
 (let (($x138 (and $x63 $x81)))
 (let (($x135 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (and (not $x135) $x138)))
 (let (($x132 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (and $x132 $x48)))
 (let (($x130 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x28 (and $x130 $x79)))
 (let (($x60 (forall ((input.ind-%var1816X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1816X)))
 (=> $x112 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1816X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var1815X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1815X)))
 (= $x112 false)))
 ))
 (let (($x124 (and $x85 $x60)))
 (let (($x9 (and $x124 $x28)))
 (let (($x71 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x11 (and $x71 $x9)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x108 (and $x15 $x11)))
 (let (($x8 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x100 (and $x8 $x108)))
 (let (($x117 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x47 (and $x117 $x100)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x82 (and $x38 $x47)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x147 (and $x31 $x82)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x57 (and $x97 $x147)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x59 (and $x121 $x57)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x41 (and $x76 $x59)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x13 (and $x126 $x41)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x39 (and $x146 $x13)))
 (let (($x107 (=> $x39 $x61)))
 (not $x107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x02000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x02000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0000000a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x26 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x99 (ite $x26 ?x122 (_ bv0 32))))
 (let ((?x72 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x39 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x30 (ite $x39 ?x72 ?x99)))
 (let (($x7 (bvsge ?x30 (_ bv1 32))))
 (let (($x158 (= $x7 true)))
 (let ((?x12 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x12)))
 (let (($x49 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x49 true)))
 (let ((?x114 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x114)))
 (let (($x127 (= ?x35 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x127 true)))
 (let (($x67 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x55 (= $x67 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x74 (= $x40 true)))
 (let (($x33 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x33 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x172)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x166 $x170)))
 (let (($x52 (and $x171 $x173)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x75 $x52)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x69)))))))
 (let (($x94 (and $x165 $x91)))
 (let (($x113 (= $x94 true)))
 (let (($x96 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x37 (= $x96 true)))
 (let (($x5 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x92 (= $x5 true)))
 (let ((?x153 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x153)))
 (let (($x148 (= ?x154 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (= ?x154 input.dst.llvm-%n)))
 (let (($x155 (= $x140 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x152 true)))
 (let (($x156 (and $x160 $x155)))
 (let (($x111 (and $x156 $x149)))
 (let (($x115 (and $x111 $x92)))
 (let (($x162 (and $x115 $x37)))
 (let (($x16 (and $x162 $x113)))
 (let (($x50 (and $x16 $x89)))
 (let (($x10 (and $x50 $x74)))
 (let (($x83 (and $x10 $x55)))
 (let (($x45 (and $x83 $x80)))
 (let (($x58 (and $x45 $x54)))
 (let (($x145 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (and (not $x145) $x58)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (and $x129 $x138)))
 (let (($x142 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x79 (and $x142 $x48)))
 (let (($x36 (forall ((input.ind-%var2089X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2089X)))
 (=> $x98 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2089X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var2088X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2088X)))
 (= $x98 false)))
 ))
 (let (($x133 (and $x123 $x36)))
 (let (($x28 (and $x133 $x79)))
 (let (($x21 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x9 (and $x21 $x28)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x11 (and $x56 $x9)))
 (let (($x53 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x108 (and $x53 $x11)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x100 (and $x42 $x108)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x47 (and $x20 $x100)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x82 (and $x25 $x47)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x147 (and $x6 $x82)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x57 (and $x23 $x147)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x59 (and $x51 $x57)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x41 (and $x137 $x59)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x13 (and $x157 $x41)))
 (let (($x61 (=> $x13 $x158)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x26 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x99 (ite $x26 ?x122 (_ bv0 32))))
 (let ((?x72 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x39 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x30 (ite $x39 ?x72 ?x99)))
 (let (($x7 (bvsge ?x30 (_ bv1 32))))
 (let (($x158 (= $x7 true)))
 (let ((?x12 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x12)))
 (let (($x49 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x49 true)))
 (let ((?x114 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x114)))
 (let (($x127 (= ?x35 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x127 true)))
 (let (($x67 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x55 (= $x67 true)))
 (let (($x40 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x74 (= $x40 true)))
 (let (($x33 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x33 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x172)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x166 $x170)))
 (let (($x52 (and $x171 $x173)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x75 $x52)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x69)))))))
 (let (($x94 (and $x165 $x91)))
 (let (($x113 (= $x94 true)))
 (let (($x96 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x37 (= $x96 true)))
 (let (($x5 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x92 (= $x5 true)))
 (let ((?x153 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x153)))
 (let (($x148 (= ?x154 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x148 true)))
 (let (($x140 (= ?x154 input.dst.llvm-%n)))
 (let (($x155 (= $x140 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x152 true)))
 (let (($x156 (and $x160 $x155)))
 (let (($x111 (and $x156 $x149)))
 (let (($x115 (and $x111 $x92)))
 (let (($x162 (and $x115 $x37)))
 (let (($x16 (and $x162 $x113)))
 (let (($x50 (and $x16 $x89)))
 (let (($x10 (and $x50 $x74)))
 (let (($x83 (and $x10 $x55)))
 (let (($x45 (and $x83 $x80)))
 (let (($x58 (and $x45 $x54)))
 (let (($x145 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (and (not $x145) $x58)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (and $x129 $x138)))
 (let (($x142 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x79 (and $x142 $x48)))
 (let (($x36 (forall ((input.ind-%var2089X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2089X)))
 (=> $x98 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2089X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var2088X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2088X)))
 (= $x98 false)))
 ))
 (let (($x133 (and $x123 $x36)))
 (let (($x28 (and $x133 $x79)))
 (let (($x21 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x9 (and $x21 $x28)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x11 (and $x56 $x9)))
 (let (($x53 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x108 (and $x53 $x11)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x100 (and $x42 $x108)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x47 (and $x20 $x100)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x82 (and $x25 $x47)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x147 (and $x6 $x82)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x57 (and $x23 $x147)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x59 (and $x51 $x57)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x41 (and $x137 $x59)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x13 (and $x157 $x41)))
 (let (($x61 (=> $x13 $x158)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x05480003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0139fde3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x158 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x107 (ite $x158 ?x61 (_ bv0 32))))
 (let ((?x7 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x30 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x116 (ite $x30 ?x7 ?x107)))
 (let (($x85 (bvsge ?x116 (_ bv0 32))))
 (let (($x131 (= $x85 true)))
 (let ((?x54 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x54)))
 (let (($x48 (= ?x58 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x48 true)))
 (let ((?x45 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x45)))
 (let (($x63 (= ?x12 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x63 true)))
 (let (($x35 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x127 (= $x35 true)))
 (let (($x55 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x83 (= $x55 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x68)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x52 $x113)))
 (let (($x89 (and $x16 $x33)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x43 $x89)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x166)))))))
 (let (($x40 (and $x173 $x50)))
 (let (($x74 (= $x40 true)))
 (let (($x164 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x118 (= $x164 true)))
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x5)))
 (let (($x162 (= ?x92 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (= $x162 true)))
 (let (($x115 (= ?x92 input.dst.llvm-%n)))
 (let (($x96 (= $x115 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x148 true)))
 (let (($x37 (and $x149 $x96)))
 (let (($x64 (and $x37 $x65)))
 (let (($x93 (and $x64 $x118)))
 (let (($x10 (and $x93 $x74)))
 (let (($x114 (and $x10 $x83)))
 (let (($x80 (and $x114 $x127)))
 (let (($x49 (and $x80 $x101)))
 (let (($x28 (and $x49 $x79)))
 (let (($x140 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (and (not $x140) $x28)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x153 $x11)))
 (let (($x152 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x100 (and $x152 $x108)))
 (let (($x81 (forall ((input.ind-%var2372X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2372X)))
 (=> $x73 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2372X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var2371X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2371X)))
 (= $x73 false)))
 ))
 (let (($x143 (and $x135 $x81)))
 (let (($x47 (and $x143 $x100)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x82 (and $x46 $x47)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x147 (and $x8 $x82)))
 (let (($x117 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x57 (and $x117 $x147)))
 (let (($x77 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x59 (and $x77 $x57)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x41 (and $x19 $x59)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x13 (and $x97 $x41)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x39 (and $x121 $x13)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x72 (and $x76 $x39)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x26 (and $x126 $x72)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x122 (and $x146 $x26)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x99 (and $x105 $x122)))
 (let (($x125 (=> $x99 $x131)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x158 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x107 (ite $x158 ?x61 (_ bv0 32))))
 (let ((?x7 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x30 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x116 (ite $x30 ?x7 ?x107)))
 (let (($x85 (bvsge ?x116 (_ bv0 32))))
 (let (($x131 (= $x85 true)))
 (let ((?x54 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x54)))
 (let (($x48 (= ?x58 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x48 true)))
 (let ((?x45 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x45)))
 (let (($x63 (= ?x12 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x63 true)))
 (let (($x35 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x127 (= $x35 true)))
 (let (($x55 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x83 (= $x55 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x68)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x52 $x113)))
 (let (($x89 (and $x16 $x33)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x43 $x89)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x166)))))))
 (let (($x40 (and $x173 $x50)))
 (let (($x74 (= $x40 true)))
 (let (($x164 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x118 (= $x164 true)))
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x5)))
 (let (($x162 (= ?x92 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (= $x162 true)))
 (let (($x115 (= ?x92 input.dst.llvm-%n)))
 (let (($x96 (= $x115 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (= $x148 true)))
 (let (($x37 (and $x149 $x96)))
 (let (($x64 (and $x37 $x65)))
 (let (($x93 (and $x64 $x118)))
 (let (($x10 (and $x93 $x74)))
 (let (($x114 (and $x10 $x83)))
 (let (($x80 (and $x114 $x127)))
 (let (($x49 (and $x80 $x101)))
 (let (($x28 (and $x49 $x79)))
 (let (($x140 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (and (not $x140) $x28)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x153 $x11)))
 (let (($x152 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x100 (and $x152 $x108)))
 (let (($x81 (forall ((input.ind-%var2372X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2372X)))
 (=> $x73 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2372X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var2371X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2371X)))
 (= $x73 false)))
 ))
 (let (($x143 (and $x135 $x81)))
 (let (($x47 (and $x143 $x100)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x82 (and $x46 $x47)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x147 (and $x8 $x82)))
 (let (($x117 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x57 (and $x117 $x147)))
 (let (($x77 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x59 (and $x77 $x57)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x41 (and $x19 $x59)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x13 (and $x97 $x41)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x39 (and $x121 $x13)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x72 (and $x76 $x39)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x26 (and $x126 $x72)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x122 (and $x146 $x26)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x99 (and $x105 $x122)))
 (let (($x125 (=> $x99 $x131)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00051e30)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00051e33)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00051e30)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x125 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x71 (bvuge ?x125 (_ bv1 32))))
 (let (($x120 (= $x71 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x100)))
 (let (($x82 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x82 true)))
 (let (($x28 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x11 (= $x28 true)))
 (let (($x138 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (= $x138 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x80)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x55 $x35)))
 (let (($x12 (and $x127 $x45)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x43 $x12)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x33)))))))
 (let (($x101 (and $x67 $x63)))
 (let (($x49 (= $x101 true)))
 (let (($x168 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x169 (= $x168 true)))
 (let ((?x93 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x93)))
 (let (($x75 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (= $x75 true)))
 (let (($x172 (= ?x22 input.dst.llvm-%n)))
 (let (($x163 (= $x172 true)))
 (let ((?x162 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x162)))
 (let (($x164 (= ?x65 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x164 true)))
 (let (($x161 (and $x118 $x163)))
 (let (($x166 (and $x161 $x165)))
 (let (($x170 (and $x166 $x169)))
 (let (($x54 (and $x170 $x49)))
 (let (($x79 (and $x54 $x48)))
 (let (($x108 (and $x79 $x11)))
 (let (($x57 (and $x108 $x147)))
 (let (($x115 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and (not $x115) $x57)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and $x5 $x41)))
 (let (($x148 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x39 (and $x148 $x13)))
 (let (($x9 (forall ((input.ind-%var2665X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2665X)))
 (=> $x134 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2665X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var2664X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2664X)))
 (= $x134 false)))
 ))
 (let (($x155 (and $x145 $x9)))
 (let (($x72 (and $x155 $x39)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x26 (and $x15 $x72)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x122 (and $x53 $x26)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x99 (and $x42 $x122)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x30 (and $x38 $x99)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x7 (and $x31 $x30)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x158 (and $x6 $x7)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x61 (and $x23 $x158)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x107 (and $x51 $x61)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x116 (and $x137 $x107)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x85 (and $x157 $x116)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x131 (and $x159 $x85)))
 (let (($x123 (=> $x131 $x120)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x125 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x71 (bvuge ?x125 (_ bv1 32))))
 (let (($x120 (= $x71 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x100)))
 (let (($x82 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x82 true)))
 (let (($x28 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x11 (= $x28 true)))
 (let (($x138 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (= $x138 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x80)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x55 $x35)))
 (let (($x12 (and $x127 $x45)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x43 $x12)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x33)))))))
 (let (($x101 (and $x67 $x63)))
 (let (($x49 (= $x101 true)))
 (let (($x168 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x169 (= $x168 true)))
 (let ((?x93 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x93)))
 (let (($x75 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (= $x75 true)))
 (let (($x172 (= ?x22 input.dst.llvm-%n)))
 (let (($x163 (= $x172 true)))
 (let ((?x162 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x162)))
 (let (($x164 (= ?x65 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x164 true)))
 (let (($x161 (and $x118 $x163)))
 (let (($x166 (and $x161 $x165)))
 (let (($x170 (and $x166 $x169)))
 (let (($x54 (and $x170 $x49)))
 (let (($x79 (and $x54 $x48)))
 (let (($x108 (and $x79 $x11)))
 (let (($x57 (and $x108 $x147)))
 (let (($x115 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and (not $x115) $x57)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and $x5 $x41)))
 (let (($x148 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x39 (and $x148 $x13)))
 (let (($x9 (forall ((input.ind-%var2665X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2665X)))
 (=> $x134 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2665X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var2664X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2664X)))
 (= $x134 false)))
 ))
 (let (($x155 (and $x145 $x9)))
 (let (($x72 (and $x155 $x39)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x26 (and $x15 $x72)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x122 (and $x53 $x26)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x99 (and $x42 $x122)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x30 (and $x38 $x99)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x7 (and $x31 $x30)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x158 (and $x6 $x7)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x61 (and $x23 $x158)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x107 (and $x51 $x61)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x116 (and $x137 $x107)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x85 (and $x157 $x116)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x131 (and $x159 $x85)))
 (let (($x123 (=> $x131 $x120)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000014)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000017)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000014)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x150 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x160 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x46 (ite $x160 ?x150 (_ bv0 32))))
 (let ((?x135 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x173 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x98 (ite $x173 ?x135 ?x46)))
 (let ((?x142 (bvmul (_ bv4294967295 32) ?x98)))
 (let ((?x139 (bvneg ?x142)))
 (let (($x153 (= ?x139 ?x143)))
 (let (($x36 (= $x153 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x57)))
 (let (($x39 (= ?x41 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x39 true)))
 (let ((?x11 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x11)))
 (let (($x100 (= ?x108 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x100 true)))
 (let (($x48 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x79 (= $x48 true)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x45)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x83 $x127)))
 (let (($x63 (and $x80 $x12)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x10 $x63)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x50)))))))
 (let (($x49 (and $x55 $x101)))
 (let (($x54 (= $x49 true)))
 (let ((?x172 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x172)))
 (let (($x166 (= ?x163 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (= $x166 true)))
 (let (($x75 (= ?x163 input.dst.llvm-%n)))
 (let (($x165 (= $x75 true)))
 (let (($x169 (and $x165 $x168)))
 (let (($x58 (and $x169 $x54)))
 (let (($x28 (and $x58 $x79)))
 (let (($x82 (and $x28 $x47)))
 (let (($x26 (and $x82 $x72)))
 (let (($x22 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and (not $x22) $x26)))
 (let (($x118 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (and $x118 $x99)))
 (let (($x65 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x7 (and $x65 $x30)))
 (let (($x96 (forall ((input.ind-%var2913X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2913X)))
 (=> $x145 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2913X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var2912X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2912X)))
 (= $x145 false)))
 ))
 (let (($x37 (and $x9 $x96)))
 (let (($x158 (and $x37 $x7)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x61 (and $x15 $x158)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x107 (and $x53 $x61)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x116 (and $x42 $x107)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x85 (and $x38 $x116)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x131 (and $x31 $x85)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x6 $x131)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x71 (and $x23 $x125)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x120 (and $x51 $x71)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x123 (and $x137 $x120)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x128 (and $x157 $x123)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x171 (and $x159 $x128)))
 (let (($x136 (=> $x171 $x36)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x150 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x160 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x46 (ite $x160 ?x150 (_ bv0 32))))
 (let ((?x135 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x173 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x98 (ite $x173 ?x135 ?x46)))
 (let ((?x142 (bvmul (_ bv4294967295 32) ?x98)))
 (let ((?x139 (bvneg ?x142)))
 (let (($x153 (= ?x139 ?x143)))
 (let (($x36 (= $x153 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x57)))
 (let (($x39 (= ?x41 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x39 true)))
 (let ((?x11 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x11)))
 (let (($x100 (= ?x108 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x100 true)))
 (let (($x48 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x79 (= $x48 true)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x45)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x83 $x127)))
 (let (($x63 (and $x80 $x12)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x10 $x63)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x50)))))))
 (let (($x49 (and $x55 $x101)))
 (let (($x54 (= $x49 true)))
 (let ((?x172 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x172)))
 (let (($x166 (= ?x163 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (= $x166 true)))
 (let (($x75 (= ?x163 input.dst.llvm-%n)))
 (let (($x165 (= $x75 true)))
 (let (($x169 (and $x165 $x168)))
 (let (($x58 (and $x169 $x54)))
 (let (($x28 (and $x58 $x79)))
 (let (($x82 (and $x28 $x47)))
 (let (($x26 (and $x82 $x72)))
 (let (($x22 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and (not $x22) $x26)))
 (let (($x118 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (and $x118 $x99)))
 (let (($x65 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x7 (and $x65 $x30)))
 (let (($x96 (forall ((input.ind-%var2913X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2913X)))
 (=> $x145 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2913X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var2912X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2912X)))
 (= $x145 false)))
 ))
 (let (($x37 (and $x9 $x96)))
 (let (($x158 (and $x37 $x7)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x61 (and $x15 $x158)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x107 (and $x53 $x61)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x116 (and $x42 $x107)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x85 (and $x38 $x116)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x131 (and $x31 $x85)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x6 $x131)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x71 (and $x23 $x125)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x120 (and $x51 $x71)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x123 (and $x137 $x120)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x128 (and $x157 $x123)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x171 (and $x159 $x128)))
 (let (($x136 (=> $x171 $x36)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x154 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x152 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x52 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x111 (ite $x52 ?x152 (_ bv0 32))))
 (let ((?x170 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x21 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x148 (ite $x21 ?x170 ?x111)))
 (let ((?x73 (bvmul (_ bv4294967295 32) ?x148)))
 (let ((?x134 (bvneg ?x73)))
 (let (($x5 (= ?x134 ?x154)))
 (let (($x156 (= $x5 true)))
 (let ((?x107 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x107)))
 (let (($x131 (= ?x116 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x131 true)))
 (let ((?x26 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x26)))
 (let (($x30 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x7 (= $x30 true)))
 (let (($x13 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x13 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x11)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x58 $x79)))
 (let (($x100 (and $x28 $x108)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x55 $x100)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x80)))))))
 (let (($x82 (and $x54 $x47)))
 (let (($x147 (= $x82 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x16)))
 (let (($x113 (= ?x43 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (= $x113 true)))
 (let (($x33 (= ?x43 input.dst.llvm-%n)))
 (let (($x89 (= $x33 true)))
 (let (($x40 (and $x89 $x50)))
 (let (($x57 (and $x40 $x147)))
 (let (($x72 (and $x57 $x39)))
 (let (($x158 (and $x72 $x7)))
 (let (($x71 (and $x158 $x125)))
 (let (($x169 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and (not $x169) $x71)))
 (let (($x166 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (and $x166 $x123)))
 (let (($x161 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x171 (and $x161 $x128)))
 (let (($x109 (forall ((input.ind-%var2958X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2958X)))
 (=> $x9 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2958X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var2957X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2957X)))
 (= $x9 false)))
 ))
 (let (($x172 (and $x96 $x109)))
 (let (($x173 (and $x172 $x171)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x135 (and $x15 $x173)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x160 (and $x53 $x135)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x150 (and $x42 $x160)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x46 (and $x38 $x150)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x98 (and $x31 $x46)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x142 (and $x6 $x98)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x139 (and $x23 $x142)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x143 (and $x51 $x139)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x153 (and $x137 $x143)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x36 (and $x157 $x153)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x136 (and $x159 $x36)))
 (let (($x92 (=> $x136 $x156)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x154 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x152 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x52 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x111 (ite $x52 ?x152 (_ bv0 32))))
 (let ((?x170 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x21 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x148 (ite $x21 ?x170 ?x111)))
 (let ((?x73 (bvmul (_ bv4294967295 32) ?x148)))
 (let ((?x134 (bvneg ?x73)))
 (let (($x5 (= ?x134 ?x154)))
 (let (($x156 (= $x5 true)))
 (let ((?x107 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x107)))
 (let (($x131 (= ?x116 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x131 true)))
 (let ((?x26 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x26)))
 (let (($x30 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x7 (= $x30 true)))
 (let (($x13 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x13 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x11)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x58 $x79)))
 (let (($x100 (and $x28 $x108)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x55 $x100)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x80)))))))
 (let (($x82 (and $x54 $x47)))
 (let (($x147 (= $x82 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x16)))
 (let (($x113 (= ?x43 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (= $x113 true)))
 (let (($x33 (= ?x43 input.dst.llvm-%n)))
 (let (($x89 (= $x33 true)))
 (let (($x40 (and $x89 $x50)))
 (let (($x57 (and $x40 $x147)))
 (let (($x72 (and $x57 $x39)))
 (let (($x158 (and $x72 $x7)))
 (let (($x71 (and $x158 $x125)))
 (let (($x169 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and (not $x169) $x71)))
 (let (($x166 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (and $x166 $x123)))
 (let (($x161 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x171 (and $x161 $x128)))
 (let (($x109 (forall ((input.ind-%var2958X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2958X)))
 (=> $x9 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2958X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var2957X (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2957X)))
 (= $x9 false)))
 ))
 (let (($x172 (and $x96 $x109)))
 (let (($x173 (and $x172 $x171)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x135 (and $x15 $x173)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x160 (and $x53 $x135)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x150 (and $x42 $x160)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x46 (and $x38 $x150)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x98 (and $x31 $x46)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x142 (and $x6 $x98)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x139 (and $x23 $x142)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x143 (and $x51 $x139)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x153 (and $x137 $x143)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x36 (and $x157 $x153)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x136 (and $x159 $x36)))
 (let (($x92 (=> $x136 $x156)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x5 (not $x154)))
 (let (($x73 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (not $x73)))
 (let (($x156 (or $x134 $x5)))
 (let (($x92 (= $x156 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x125)))
 (let (($x135 (= ?x71 input.dst.llvm-%n)))
 (let (($x160 (= $x135 true)))
 (let (($x123 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (= $x123 true)))
 (let ((?x158 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x158)))
 (let (($x116 (= ?x61 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x116 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x41)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x100 $x147)))
 (let (($x39 (and $x57 $x13)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x45 $x39)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x58)))))))
 (let (($x26 (and $x108 $x72)))
 (let (($x99 (= $x26 true)))
 (let ((?x91 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x91)))
 (let (($x83 (= ?x10 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x35 (= $x83 true)))
 (let (($x30 (and $x35 $x99)))
 (let (($x131 (and $x30 $x85)))
 (let (($x171 (and $x131 $x128)))
 (let (($x150 (and $x171 $x160)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (and $x113 $x150)))
 (let (($x68 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x98 (and $x68 $x46)))
 (let (($x94 (forall ((input.ind-%var3003X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3003X)))
 (=> $x96 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3003X) (_ bv0 32)))))
 ))
 (let (($x109 (forall ((input.ind-%var3002X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3002X)))
 (= $x96 false)))
 ))
 (let (($x16 (and $x109 $x94)))
 (let (($x142 (and $x16 $x98)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x139 (and $x15 $x142)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x143 (and $x53 $x139)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x153 (and $x42 $x143)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x36 (and $x38 $x153)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x136 (and $x31 $x36)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x21 (and $x6 $x136)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x170 (and $x23 $x21)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x52 (and $x51 $x170)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x152 (and $x137 $x52)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x111 (and $x157 $x152)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x148 (and $x159 $x111)))
 (let (($x81 (=> $x148 $x92)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x5 (not $x154)))
 (let (($x73 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (not $x73)))
 (let (($x156 (or $x134 $x5)))
 (let (($x92 (= $x156 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x125)))
 (let (($x135 (= ?x71 input.dst.llvm-%n)))
 (let (($x160 (= $x135 true)))
 (let (($x123 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (= $x123 true)))
 (let ((?x158 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x158)))
 (let (($x116 (= ?x61 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x116 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x41)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x100 $x147)))
 (let (($x39 (and $x57 $x13)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x45 $x39)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x58)))))))
 (let (($x26 (and $x108 $x72)))
 (let (($x99 (= $x26 true)))
 (let ((?x91 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x91)))
 (let (($x83 (= ?x10 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x35 (= $x83 true)))
 (let (($x30 (and $x35 $x99)))
 (let (($x131 (and $x30 $x85)))
 (let (($x171 (and $x131 $x128)))
 (let (($x150 (and $x171 $x160)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (and $x113 $x150)))
 (let (($x68 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x98 (and $x68 $x46)))
 (let (($x94 (forall ((input.ind-%var3003X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3003X)))
 (=> $x96 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3003X) (_ bv0 32)))))
 ))
 (let (($x109 (forall ((input.ind-%var3002X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3002X)))
 (= $x96 false)))
 ))
 (let (($x16 (and $x109 $x94)))
 (let (($x142 (and $x16 $x98)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x139 (and $x15 $x142)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x143 (and $x53 $x139)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x153 (and $x42 $x143)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x36 (and $x38 $x153)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x136 (and $x31 $x36)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x21 (and $x6 $x136)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x170 (and $x23 $x21)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x52 (and $x51 $x170)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x152 (and $x137 $x52)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x111 (and $x157 $x152)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x148 (and $x159 $x111)))
 (let (($x81 (=> $x148 $x92)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 104 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x67 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x164 (ite $x67 ?x149 (_ bv0 32))))
 (let ((?x37 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x168 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x65 (ite $x168 ?x37 ?x164)))
 (let ((?x144 (bvmul (_ bv4294967295 32) ?x65)))
 (let ((?x145 (bvneg ?x144)))
 (let (($x118 (= ?x145 ?x115)))
 (let (($x162 (= $x118 true)))
 (let ((?x52 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x152 (bvneg ?x52)))
 (let (($x148 (= ?x152 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x73 (= $x148 true)))
 (let ((?x143 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x143)))
 (let (($x36 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x136 (= $x36 true)))
 (let (($x98 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x98 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x123)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x116 $x125)))
 (let (($x171 (and $x71 $x128)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x82 $x171)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x26)))))))
 (let (($x135 (and $x107 $x173)))
 (let (($x160 (= $x135 true)))
 (let ((?x54 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x54)))
 (let (($x28 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x28 true)))
 (let (($x48 (= ?x58 input.dst.llvm-%n)))
 (let (($x79 (= $x48 true)))
 (let (($x80 (and $x79 $x108)))
 (let (($x150 (and $x80 $x160)))
 (let (($x139 (and $x150 $x142)))
 (let (($x21 (and $x139 $x136)))
 (let (($x134 (and $x21 $x73)))
 (let (($x69 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x5 (and (not $x69) $x134)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x11 $x5)))
 (let (($x35 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x92 (and $x35 $x156)))
 (let (($x10 (forall ((input.ind-%var3013X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3013X)))
 (=> $x109 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3013X) (_ bv0 32)))))
 ))
 (let (($x94 (forall ((input.ind-%var3012X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3012X)))
 (= $x109 false)))
 ))
 (let (($x49 (and $x94 $x10)))
 (let (($x81 (and $x49 $x92)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x74 (and $x15 $x81)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x127 (and $x53 $x74)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x114 (and $x42 $x127)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x64 (and $x38 $x114)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x165 (and $x31 $x64)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x161 (and $x6 $x165)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x140 (and $x23 $x161)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x9 (and $x51 $x140)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x22 (and $x137 $x9)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x166 (and $x157 $x22)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x163 (and $x159 $x166)))
 (let (($x93 (=> $x163 $x162)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x115 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x67 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x164 (ite $x67 ?x149 (_ bv0 32))))
 (let ((?x37 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x168 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x65 (ite $x168 ?x37 ?x164)))
 (let ((?x144 (bvmul (_ bv4294967295 32) ?x65)))
 (let ((?x145 (bvneg ?x144)))
 (let (($x118 (= ?x145 ?x115)))
 (let (($x162 (= $x118 true)))
 (let ((?x52 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x152 (bvneg ?x52)))
 (let (($x148 (= ?x152 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x73 (= $x148 true)))
 (let ((?x143 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x143)))
 (let (($x36 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x136 (= $x36 true)))
 (let (($x98 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x98 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x123)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x116 $x125)))
 (let (($x171 (and $x71 $x128)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x82 $x171)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x26)))))))
 (let (($x135 (and $x107 $x173)))
 (let (($x160 (= $x135 true)))
 (let ((?x54 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x54)))
 (let (($x28 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x28 true)))
 (let (($x48 (= ?x58 input.dst.llvm-%n)))
 (let (($x79 (= $x48 true)))
 (let (($x80 (and $x79 $x108)))
 (let (($x150 (and $x80 $x160)))
 (let (($x139 (and $x150 $x142)))
 (let (($x21 (and $x139 $x136)))
 (let (($x134 (and $x21 $x73)))
 (let (($x69 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x5 (and (not $x69) $x134)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x11 $x5)))
 (let (($x35 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x92 (and $x35 $x156)))
 (let (($x10 (forall ((input.ind-%var3013X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3013X)))
 (=> $x109 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3013X) (_ bv0 32)))))
 ))
 (let (($x94 (forall ((input.ind-%var3012X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3012X)))
 (= $x109 false)))
 ))
 (let (($x49 (and $x94 $x10)))
 (let (($x81 (and $x49 $x92)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x74 (and $x15 $x81)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x127 (and $x53 $x74)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x114 (and $x42 $x127)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x64 (and $x38 $x114)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x165 (and $x31 $x64)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x161 (and $x6 $x165)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x140 (and $x23 $x161)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x9 (and $x51 $x140)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x22 (and $x137 $x9)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x166 (and $x157 $x22)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x163 (and $x159 $x166)))
 (let (($x93 (=> $x163 $x162)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x75 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x100 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x89 (ite $x100 ?x75 (_ bv0 32))))
 (let ((?x45 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x155 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x68 (ite $x155 ?x45 ?x89)))
 (let ((?x59 (bvmul (_ bv4294967295 32) ?x68)))
 (let ((?x96 (bvneg ?x59)))
 (let (($x113 (= ?x96 ?x169)))
 (let (($x43 (= $x113 true)))
 (let ((?x127 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x127)))
 (let (($x165 (= ?x114 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x161 (= $x165 true)))
 (let ((?x134 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x134)))
 (let (($x156 (= ?x5 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x156 true)))
 (let (($x111 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x111 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x143)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x150 $x142)))
 (let (($x36 (and $x139 $x153)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x107 $x36)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x71)))))))
 (let (($x21 (and $x160 $x136)))
 (let (($x170 (= $x21 true)))
 (let ((?x57 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x57)))
 (let (($x13 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (= $x13 true)))
 (let (($x39 (= ?x61 input.dst.llvm-%n)))
 (let (($x72 (= $x39 true)))
 (let (($x99 (and $x72 $x26)))
 (let (($x52 (and $x99 $x170)))
 (let (($x73 (and $x52 $x148)))
 (let (($x81 (and $x73 $x92)))
 (let (($x140 (and $x81 $x161)))
 (let (($x80 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (and (not $x80) $x140)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and $x28 $x22)))
 (let (($x138 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x163 (and $x138 $x166)))
 (let (($x55 (forall ((input.ind-%var3058X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3058X)))
 (=> $x94 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3058X) (_ bv0 32)))))
 ))
 (let (($x10 (forall ((input.ind-%var3057X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3057X)))
 (= $x94 false)))
 ))
 (let (($x54 (and $x10 $x55)))
 (let (($x168 (and $x54 $x163)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x37 (and $x15 $x168)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x67 (and $x53 $x37)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x149 (and $x42 $x67)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x164 (and $x38 $x149)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x65 (and $x31 $x164)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x144 (and $x6 $x65)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x145 (and $x23 $x144)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x115 (and $x51 $x145)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x118 (and $x137 $x115)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x162 (and $x157 $x118)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x93 (and $x159 $x162)))
 (let (($x50 (=> $x93 $x43)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x75 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x100 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x89 (ite $x100 ?x75 (_ bv0 32))))
 (let ((?x45 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x155 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x68 (ite $x155 ?x45 ?x89)))
 (let ((?x59 (bvmul (_ bv4294967295 32) ?x68)))
 (let ((?x96 (bvneg ?x59)))
 (let (($x113 (= ?x96 ?x169)))
 (let (($x43 (= $x113 true)))
 (let ((?x127 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x127)))
 (let (($x165 (= ?x114 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x161 (= $x165 true)))
 (let ((?x134 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x134)))
 (let (($x156 (= ?x5 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x156 true)))
 (let (($x111 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x111 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x143)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x150 $x142)))
 (let (($x36 (and $x139 $x153)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x107 $x36)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x71)))))))
 (let (($x21 (and $x160 $x136)))
 (let (($x170 (= $x21 true)))
 (let ((?x57 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x57)))
 (let (($x13 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (= $x13 true)))
 (let (($x39 (= ?x61 input.dst.llvm-%n)))
 (let (($x72 (= $x39 true)))
 (let (($x99 (and $x72 $x26)))
 (let (($x52 (and $x99 $x170)))
 (let (($x73 (and $x52 $x148)))
 (let (($x81 (and $x73 $x92)))
 (let (($x140 (and $x81 $x161)))
 (let (($x80 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (and (not $x80) $x140)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and $x28 $x22)))
 (let (($x138 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x163 (and $x138 $x166)))
 (let (($x55 (forall ((input.ind-%var3058X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3058X)))
 (=> $x94 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3058X) (_ bv0 32)))))
 ))
 (let (($x10 (forall ((input.ind-%var3057X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3057X)))
 (= $x94 false)))
 ))
 (let (($x54 (and $x10 $x55)))
 (let (($x168 (and $x54 $x163)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x37 (and $x15 $x168)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x67 (and $x53 $x37)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x149 (and $x42 $x67)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x164 (and $x38 $x149)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x65 (and $x31 $x164)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x144 (and $x6 $x65)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x145 (and $x23 $x144)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x115 (and $x51 $x145)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x118 (and $x137 $x115)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x162 (and $x157 $x118)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x93 (and $x159 $x162)))
 (let (($x50 (=> $x93 $x43)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (not $x59)))
 (let (($x169 (= $x96 false)))
 (let (($x113 (= $x169 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x125)))
 (let (($x37 (= ?x85 input.dst.llvm-%n)))
 (let (($x67 (= $x37 true)))
 (let ((?x165 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x165)))
 (let (($x22 (= ?x161 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x166 (= $x22 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x5)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x152 $x73)))
 (let (($x92 (and $x134 $x156)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x158 $x92)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x139 $x143)))))))
 (let (($x74 (and $x52 $x81)))
 (let (($x127 (= $x74 true)))
 (let (($x71 (= ?x85 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (= $x71 true)))
 (let ((?x47 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x47)))
 (let (($x116 (= ?x82 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x116 true)))
 (let (($x128 (and $x131 $x123)))
 (let (($x114 (and $x128 $x127)))
 (let (($x163 (and $x114 $x166)))
 (let (($x149 (and $x163 $x67)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x13 $x149)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x65 (and $x41 $x164)))
 (let (($x147 (forall ((input.ind-%var3103X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3103X)))
 (=> $x10 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3103X) (_ bv0 32)))))
 ))
 (let (($x55 (forall ((input.ind-%var3102X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3102X)))
 (= $x10 false)))
 ))
 (let (($x57 (and $x55 $x147)))
 (let (($x144 (and $x57 $x65)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x145 (and $x15 $x144)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x115 (and $x53 $x145)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x118 (and $x42 $x115)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x162 (and $x38 $x118)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x93 (and $x31 $x162)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x155 (and $x6 $x93)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x45 (and $x23 $x155)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x100 (and $x51 $x45)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x75 (and $x137 $x100)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x89 (and $x157 $x75)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x68 (and $x159 $x89)))
 (let (($x43 (=> $x68 $x113)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (not $x59)))
 (let (($x169 (= $x96 false)))
 (let (($x113 (= $x169 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x125)))
 (let (($x37 (= ?x85 input.dst.llvm-%n)))
 (let (($x67 (= $x37 true)))
 (let ((?x165 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x165)))
 (let (($x22 (= ?x161 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x166 (= $x22 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x5)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x152 $x73)))
 (let (($x92 (and $x134 $x156)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x158 $x92)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x139 $x143)))))))
 (let (($x74 (and $x52 $x81)))
 (let (($x127 (= $x74 true)))
 (let (($x71 (= ?x85 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (= $x71 true)))
 (let ((?x47 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x47)))
 (let (($x116 (= ?x82 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x116 true)))
 (let (($x128 (and $x131 $x123)))
 (let (($x114 (and $x128 $x127)))
 (let (($x163 (and $x114 $x166)))
 (let (($x149 (and $x163 $x67)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x13 $x149)))
 (let (($x41 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x65 (and $x41 $x164)))
 (let (($x147 (forall ((input.ind-%var3103X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3103X)))
 (=> $x10 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3103X) (_ bv0 32)))))
 ))
 (let (($x55 (forall ((input.ind-%var3102X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3102X)))
 (= $x10 false)))
 ))
 (let (($x57 (and $x55 $x147)))
 (let (($x144 (and $x57 $x65)))
 (let (($x15 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x145 (and $x15 $x144)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x115 (and $x53 $x145)))
 (let (($x42 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x118 (and $x42 $x115)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x162 (and $x38 $x118)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x93 (and $x31 $x162)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x155 (and $x6 $x93)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x45 (and $x23 $x155)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x100 (and $x51 $x45)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x75 (and $x137 $x100)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x89 (and $x157 $x75)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x68 (and $x159 $x89)))
 (let (($x43 (=> $x68 $x113)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00064003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x28 (or $x94 $x69)))
 (let (($x58 (= $x28 true)))
 (let ((?x144 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x144)))
 (let (($x155 (= ?x145 input.dst.llvm-%n)))
 (let (($x45 (= $x155 true)))
 (let (($x115 (= ?x145 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (= $x115 true)))
 (let ((?x168 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x168)))
 (let (($x149 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x149 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x114)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x156 $x74)))
 (let (($x165 (and $x127 $x64)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x143 $x165)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x160 $x158)))))))
 (let (($x140 (and $x5 $x161)))
 (let (($x22 (= $x140 true)))
 (let ((?x128 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x128)))
 (let (($x170 (= ?x107 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x170 true)))
 (let (($x166 (and $x46 $x22)))
 (let (($x65 (and $x166 $x164)))
 (let (($x162 (and $x65 $x118)))
 (let (($x100 (and $x162 $x45)))
 (let (($x85 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (and $x85 $x100)))
 (let (($x116 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x89 (and $x116 $x75)))
 (let (($x47 (forall ((input.ind-%var3196X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3196X)))
 (=> $x154 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3196X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var3195X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3195X)))
 (= $x154 false)))
 ))
 (let (($x82 (and $x9 $x47)))
 (let (($x68 (and $x82 $x89)))
 (let (($x56 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x59 (and $x56 $x68)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x96 (and $x117 $x59)))
 (let (($x77 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x169 (and $x77 $x96)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x113 (and $x20 $x169)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x43 (and $x25 $x113)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x50 (and $x121 $x43)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x173 (and $x76 $x50)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x12 (and $x126 $x173)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x79 (and $x146 $x12)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x138 (and $x29 $x79)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x120 (and $x159 $x138)))
 (let (($x108 (=> $x120 $x58)))
 (not $x108)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x28 (or $x94 $x69)))
 (let (($x58 (= $x28 true)))
 (let ((?x144 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x144)))
 (let (($x155 (= ?x145 input.dst.llvm-%n)))
 (let (($x45 (= $x155 true)))
 (let (($x115 (= ?x145 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (= $x115 true)))
 (let ((?x168 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x168)))
 (let (($x149 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x149 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x114)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x156 $x74)))
 (let (($x165 (and $x127 $x64)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x143 $x165)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x160 $x158)))))))
 (let (($x140 (and $x5 $x161)))
 (let (($x22 (= $x140 true)))
 (let ((?x128 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x128)))
 (let (($x170 (= ?x107 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x170 true)))
 (let (($x166 (and $x46 $x22)))
 (let (($x65 (and $x166 $x164)))
 (let (($x162 (and $x65 $x118)))
 (let (($x100 (and $x162 $x45)))
 (let (($x85 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (and $x85 $x100)))
 (let (($x116 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x89 (and $x116 $x75)))
 (let (($x47 (forall ((input.ind-%var3196X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3196X)))
 (=> $x154 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3196X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var3195X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3195X)))
 (= $x154 false)))
 ))
 (let (($x82 (and $x9 $x47)))
 (let (($x68 (and $x82 $x89)))
 (let (($x56 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x59 (and $x56 $x68)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x96 (and $x117 $x59)))
 (let (($x77 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x169 (and $x77 $x96)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x113 (and $x20 $x169)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x43 (and $x25 $x113)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x50 (and $x121 $x43)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x173 (and $x76 $x50)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x12 (and $x126 $x173)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x79 (and $x146 $x12)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x138 (and $x29 $x79)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x120 (and $x159 $x138)))
 (let (($x108 (=> $x120 $x58)))
 (not $x108)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 102 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x30 (= $x172 true)))
 (let ((?x79 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x79)))
 (let (($x94 (= ?x138 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x94 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x59)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x45 $x89)))
 (let (($x169 (and $x68 $x96)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x163 $x169)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x144)))))))
 (let (($x43 (and $x155 $x113)))
 (let (($x50 (= $x43 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x127)))
 (let (($x64 (= ?x114 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x64 true)))
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x73)))
 (let (($x92 (= ?x5 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x92 true)))
 (let (($x98 (= ?x5 input.dst.llvm-%n)))
 (let (($x143 (= $x98 true)))
 (let (($x158 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (not $x158)))
 (let (($x111 (= $x152 true)))
 (let (($x156 (and $x111 $x143)))
 (let (($x74 (and $x156 $x81)))
 (let (($x161 (and $x74 $x165)))
 (let (($x173 (and $x161 $x50)))
 (let (($x28 (and $x173 $x69)))
 (let (($x52 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and $x52 $x28)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x134 $x58)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x49 (and $x46 $x108)))
 (let (($x107 (forall ((input.ind-%var3216X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3216X)))
 (=> $x80 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3216X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var3215X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3215X)))
 (= $x80 false)))
 ))
 (let (($x150 (and $x99 $x107)))
 (let (($x142 (and $x150 $x49)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x139 (and $x8 $x142)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x55 (and $x42 $x139)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x39 (and $x38 $x55)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x61 (and $x19 $x39)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x15 (and $x97 $x61)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x91 (and $x23 $x15)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x48 (and $x51 $x91)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x72 (and $x137 $x48)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x57 (and $x105 $x72)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x13 (and $x44 $x57)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x54 (and $x171 $x13)))
 (let (($x7 (=> $x54 $x30)))
 (not $x7)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x30 (= $x172 true)))
 (let ((?x79 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x79)))
 (let (($x94 (= ?x138 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x94 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x59)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x45 $x89)))
 (let (($x169 (and $x68 $x96)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x163 $x169)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x144)))))))
 (let (($x43 (and $x155 $x113)))
 (let (($x50 (= $x43 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x127)))
 (let (($x64 (= ?x114 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x64 true)))
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x73)))
 (let (($x92 (= ?x5 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x92 true)))
 (let (($x98 (= ?x5 input.dst.llvm-%n)))
 (let (($x143 (= $x98 true)))
 (let (($x158 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (not $x158)))
 (let (($x111 (= $x152 true)))
 (let (($x156 (and $x111 $x143)))
 (let (($x74 (and $x156 $x81)))
 (let (($x161 (and $x74 $x165)))
 (let (($x173 (and $x161 $x50)))
 (let (($x28 (and $x173 $x69)))
 (let (($x52 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and $x52 $x28)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x134 $x58)))
 (let (($x46 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x49 (and $x46 $x108)))
 (let (($x107 (forall ((input.ind-%var3216X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3216X)))
 (=> $x80 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3216X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var3215X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3215X)))
 (= $x80 false)))
 ))
 (let (($x150 (and $x99 $x107)))
 (let (($x142 (and $x150 $x49)))
 (let (($x8 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x139 (and $x8 $x142)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x55 (and $x42 $x139)))
 (let (($x38 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x39 (and $x38 $x55)))
 (let (($x19 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x61 (and $x19 $x39)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x15 (and $x97 $x61)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x91 (and $x23 $x15)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x48 (and $x51 $x91)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x72 (and $x137 $x48)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x57 (and $x105 $x72)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x13 (and $x44 $x57)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x54 (and $x171 $x13)))
 (let (($x7 (=> $x54 $x30)))
 (not $x7)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x9 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x9)))
 (let (($x135 (or $x9 $x131)))
 (let (($x56 (= $x135 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x127)))
 (let (($x142 (= ?x114 input.dst.llvm-%n)))
 (let (($x139 (= $x142 true)))
 (let ((?x120 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x120)))
 (let (($x28 (= ?x94 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x28 true)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x169)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x75 $x59)))
 (let (($x43 (and $x96 $x113)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x67 $x43)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x118)))))))
 (let (($x173 (and $x100 $x50)))
 (let (($x12 (= $x173 true)))
 (let (($x64 (= ?x114 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (= $x64 true)))
 (let ((?x143 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x143)))
 (let (($x81 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x81 true)))
 (let (($x161 (and $x74 $x165)))
 (let (($x79 (and $x161 $x12)))
 (let (($x108 (and $x79 $x58)))
 (let (($x55 (and $x108 $x139)))
 (let (($x73 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and $x73 $x55)))
 (let (($x152 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x61 (and $x152 $x39)))
 (let (($x160 (forall ((input.ind-%var3226X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3226X)))
 (=> $x26 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3226X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var3225X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3225X)))
 (= $x26 false)))
 ))
 (let (($x21 (and $x128 $x160)))
 (let (($x15 (and $x21 $x61)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x91 (and $x53 $x15)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x48 (and $x77 $x91)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x72 (and $x20 $x48)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x57 (and $x31 $x72)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x13 (and $x6 $x57)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x54 (and $x76 $x13)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x172 (and $x126 $x54)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x30 (and $x146 $x172)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x7 (and $x29 $x30)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x33 (and $x157 $x7)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x22 (and $x71 $x33)))
 (let (($x10 (=> $x22 $x56)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x9 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x9)))
 (let (($x135 (or $x9 $x131)))
 (let (($x56 (= $x135 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x127)))
 (let (($x142 (= ?x114 input.dst.llvm-%n)))
 (let (($x139 (= $x142 true)))
 (let ((?x120 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x120)))
 (let (($x28 (= ?x94 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x28 true)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x169)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x75 $x59)))
 (let (($x43 (and $x96 $x113)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x67 $x43)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x118)))))))
 (let (($x173 (and $x100 $x50)))
 (let (($x12 (= $x173 true)))
 (let (($x64 (= ?x114 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (= $x64 true)))
 (let ((?x143 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x143)))
 (let (($x81 (= ?x156 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x81 true)))
 (let (($x161 (and $x74 $x165)))
 (let (($x79 (and $x161 $x12)))
 (let (($x108 (and $x79 $x58)))
 (let (($x55 (and $x108 $x139)))
 (let (($x73 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and $x73 $x55)))
 (let (($x152 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x61 (and $x152 $x39)))
 (let (($x160 (forall ((input.ind-%var3226X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3226X)))
 (=> $x26 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3226X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var3225X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3225X)))
 (= $x26 false)))
 ))
 (let (($x21 (and $x128 $x160)))
 (let (($x15 (and $x21 $x61)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x91 (and $x53 $x15)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x48 (and $x77 $x91)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x72 (and $x20 $x48)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x57 (and $x31 $x72)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x13 (and $x6 $x57)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x54 (and $x76 $x13)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x172 (and $x126 $x54)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x30 (and $x146 $x172)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x7 (and $x29 $x30)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x33 (and $x157 $x7)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x22 (and $x71 $x33)))
 (let (($x10 (=> $x22 $x56)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 102 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x43)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x68 $x169)))
 (let (($x173 (and $x113 $x50)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x89 $x173)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x162)))))))
 (let (($x153 (and $x67 $x12)))
 (let (($x170 (= $x153 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x55 (concat ?x49 (concat ?x69 ?x120)))))
 (let (($x57 (= ?x39 input.dst.llvm-%n)))
 (let (($x13 (= $x57 true)))
 (let (($x61 (= input.dst.llvm-%n ?x39)))
 (let (($x48 (and (and (and $x67 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x12) $x61)))
 (let (($x72 (= $x48 true)))
 (let (($x54 (and $x72 $x13)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x64 $x54)))
 (let (($x74 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x30 (and $x74 $x172)))
 (let (($x156 (forall ((input.ind-%var3236X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3236X)))
 (=> $x128 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3236X) (_ bv0 32)))))
 ))
 (let (($x160 (forall ((input.ind-%var3235X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3235X)))
 (= $x128 false)))
 ))
 (let (($x92 (and $x160 $x156)))
 (let (($x7 (and $x92 $x30)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x33 (and $x53 $x7)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x22 (and $x77 $x33)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x9 (and $x20 $x22)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x131 (and $x31 $x9)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x135 (and $x6 $x131)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x56 (and $x76 $x135)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x10 (and $x126 $x56)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x41 (and $x146 $x10)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x168 (and $x29 $x41)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x37 (and $x157 $x168)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x99 (and $x71 $x37)))
 (let (($x8 (=> $x99 $x170)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x43)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x68 $x169)))
 (let (($x173 (and $x113 $x50)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x89 $x173)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x162)))))))
 (let (($x153 (and $x67 $x12)))
 (let (($x170 (= $x153 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x55 (concat ?x49 (concat ?x69 ?x120)))))
 (let (($x57 (= ?x39 input.dst.llvm-%n)))
 (let (($x13 (= $x57 true)))
 (let (($x61 (= input.dst.llvm-%n ?x39)))
 (let (($x48 (and (and (and $x67 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x12) $x61)))
 (let (($x72 (= $x48 true)))
 (let (($x54 (and $x72 $x13)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x64 $x54)))
 (let (($x74 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x30 (and $x74 $x172)))
 (let (($x156 (forall ((input.ind-%var3236X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3236X)))
 (=> $x128 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3236X) (_ bv0 32)))))
 ))
 (let (($x160 (forall ((input.ind-%var3235X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3235X)))
 (= $x128 false)))
 ))
 (let (($x92 (and $x160 $x156)))
 (let (($x7 (and $x92 $x30)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x33 (and $x53 $x7)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x22 (and $x77 $x33)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x9 (and $x20 $x22)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x131 (and $x31 $x9)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x135 (and $x6 $x131)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x56 (and $x76 $x135)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x10 (and $x126 $x56)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x41 (and $x146 $x10)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x168 (and $x29 $x41)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x37 (and $x157 $x168)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x99 (and $x71 $x37)))
 (let (($x8 (=> $x99 $x170)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x158)))
 (let (($x107 (= ?x5 input.dst.llvm-%n)))
 (let (($x116 (= $x107 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x33 (concat ?x172 (concat ?x72 ?x61)))))
 (let (($x41 (= ?x22 input.dst.llvm-%n)))
 (let (($x168 (= $x41 true)))
 (let (($x9 (= input.dst.llvm-%n ?x22)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x94)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x139 $x108)))
 (let (($x120 (and $x49 $x69)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x79 $x120)))
 (let (($x164 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x96)))))))
 (let (($x56 (and (and (and $x12 $x164) $x28) $x9)))
 (let (($x10 (= $x56 true)))
 (let (($x37 (and $x10 $x168)))
 (let (($x166 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x166 $x37)))
 (let (($x115 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x153 (and $x115 $x99)))
 (let (($x145 (forall ((input.ind-%var3246X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3246X)))
 (=> $x160 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3246X) (_ bv0 32)))))
 ))
 (let (($x156 (forall ((input.ind-%var3245X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3245X)))
 (= $x160 false)))
 ))
 (let (($x144 (and $x156 $x145)))
 (let (($x170 (and $x144 $x153)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x8 (and $x53 $x170)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x154 (and $x77 $x8)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x165 (and $x20 $x154)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x161 (and $x31 $x165)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x138 (and $x6 $x161)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x46 (and $x76 $x138)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x148 (and $x126 $x46)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x152 (and $x146 $x148)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x80 (and $x29 $x152)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x26 (and $x157 $x80)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x136 (and $x71 $x26)))
 (let (($x36 (=> $x136 $x116)))
 (not $x36)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x158)))
 (let (($x107 (= ?x5 input.dst.llvm-%n)))
 (let (($x116 (= $x107 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x33 (concat ?x172 (concat ?x72 ?x61)))))
 (let (($x41 (= ?x22 input.dst.llvm-%n)))
 (let (($x168 (= $x41 true)))
 (let (($x9 (= input.dst.llvm-%n ?x22)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x94)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x139 $x108)))
 (let (($x120 (and $x49 $x69)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x79 $x120)))
 (let (($x164 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x96)))))))
 (let (($x56 (and (and (and $x12 $x164) $x28) $x9)))
 (let (($x10 (= $x56 true)))
 (let (($x37 (and $x10 $x168)))
 (let (($x166 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x166 $x37)))
 (let (($x115 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x153 (and $x115 $x99)))
 (let (($x145 (forall ((input.ind-%var3246X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3246X)))
 (=> $x160 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3246X) (_ bv0 32)))))
 ))
 (let (($x156 (forall ((input.ind-%var3245X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3245X)))
 (= $x160 false)))
 ))
 (let (($x144 (and $x156 $x145)))
 (let (($x170 (and $x144 $x153)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x8 (and $x53 $x170)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x154 (and $x77 $x8)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x165 (and $x20 $x154)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x161 (and $x31 $x165)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x138 (and $x6 $x161)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x46 (and $x76 $x138)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x148 (and $x126 $x46)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x152 (and $x146 $x148)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x80 (and $x29 $x152)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x26 (and $x157 $x80)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x136 (and $x71 $x26)))
 (let (($x36 (=> $x136 $x116)))
 (not $x36)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x128)))
 (let (($x64 (= ?x98 input.spec-%var-n-1)))
 (let (($x81 (= $x64 true)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x69 (concat ?x58 (concat ?x91 ?x164)))))
 (let (($x138 (= input.dst.llvm-%n ?x120)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x8)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x37 $x153)))
 (let (($x165 (and $x170 $x154)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x13 $x165)))
 (let (($x33 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x30)))))))
 (let (($x152 (and (and (and $x168 $x33) $x161) $x138)))
 (let (($x80 (= $x152 true)))
 (let (($x135 (= ?x120 input.dst.llvm-%n)))
 (let (($x142 (= $x135 true)))
 (let (($x26 (and $x142 $x80)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x113 $x26)))
 (let (($x89 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x73 (and $x89 $x136)))
 (let (($x75 (forall ((input.ind-%var3256X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3256X)))
 (=> $x156 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3256X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var3255X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3255X)))
 (= $x156 false)))
 ))
 (let (($x68 (and $x145 $x75)))
 (let (($x158 (and $x68 $x73)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x5 (and $x53 $x158)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x107 (and $x77 $x5)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x116 (and $x20 $x107)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x36 (and $x31 $x116)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x150 (and $x6 $x36)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x163 (and $x76 $x150)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x100 (and $x126 $x163)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x39 (and $x146 $x100)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x111 (and $x29 $x39)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x114 (and $x157 $x111)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x74 (and $x71 $x114)))
 (let (($x45 (=> $x74 $x81)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x128)))
 (let (($x64 (= ?x98 input.spec-%var-n-1)))
 (let (($x81 (= $x64 true)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x69 (concat ?x58 (concat ?x91 ?x164)))))
 (let (($x138 (= input.dst.llvm-%n ?x120)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x8)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x37 $x153)))
 (let (($x165 (and $x170 $x154)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x13 $x165)))
 (let (($x33 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x30)))))))
 (let (($x152 (and (and (and $x168 $x33) $x161) $x138)))
 (let (($x80 (= $x152 true)))
 (let (($x135 (= ?x120 input.dst.llvm-%n)))
 (let (($x142 (= $x135 true)))
 (let (($x26 (and $x142 $x80)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x113 $x26)))
 (let (($x89 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x73 (and $x89 $x136)))
 (let (($x75 (forall ((input.ind-%var3256X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3256X)))
 (=> $x156 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3256X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var3255X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3255X)))
 (= $x156 false)))
 ))
 (let (($x68 (and $x145 $x75)))
 (let (($x158 (and $x68 $x73)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x5 (and $x53 $x158)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x107 (and $x77 $x5)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x116 (and $x20 $x107)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x36 (and $x31 $x116)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x150 (and $x6 $x36)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x163 (and $x76 $x150)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x100 (and $x126 $x163)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x39 (and $x146 $x100)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x111 (and $x29 $x39)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x114 (and $x157 $x111)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x74 (and $x71 $x114)))
 (let (($x45 (=> $x74 $x81)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x85 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x63 (ite $x85 ?x147 (_ bv0 32))))
 (let ((?x82 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x125 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x35 (ite $x125 ?x82 ?x63)))
 (let ((?x122 (bvmul (_ bv4294967295 32) ?x35)))
 (let ((?x109 (bvneg ?x122)))
 (let (($x11 (= ?x109 ?x40)))
 (let (($x83 (= $x11 true)))
 (let ((?x123 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x123)))
 (let (($x64 (= ?x128 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x64 true)))
 (let ((?x163 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x163)))
 (let (($x39 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x39 true)))
 (let (($x116 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (= $x116 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x152)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x154 $x148)))
 (let (($x26 (and $x138 $x80)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x30 $x26)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x46)))))))
 (let (($x73 (and $x8 $x136)))
 (let (($x158 (= $x73 true)))
 (let ((?x120 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x120)))
 (let (($x172 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x172 true)))
 (let (($x142 (= ?x28 input.dst.llvm-%n)))
 (let (($x54 (= $x142 true)))
 (let (($x48 (and $x54 $x41)))
 (let (($x5 (and $x48 $x158)))
 (let (($x150 (and $x5 $x36)))
 (let (($x114 (and $x150 $x111)))
 (let (($x45 (and $x114 $x81)))
 (let (($x79 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (and (not $x79) $x45)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x7 (and $x91 $x50)))
 (let (($x55 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x12 (and $x55 $x7)))
 (let (($x94 (forall ((input.ind-%var3266X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3266X)))
 (=> $x145 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3266X) (_ bv0 32)))))
 ))
 (let (($x75 (forall ((input.ind-%var3265X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3265X)))
 (= $x145 false)))
 ))
 (let (($x69 (and $x75 $x94)))
 (let (($x127 (and $x69 $x12)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x155 (and $x53 $x127)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x115 (and $x77 $x155)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x52 (and $x20 $x115)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x160 (and $x31 $x52)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x149 (and $x6 $x160)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x166 (and $x76 $x149)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x118 (and $x126 $x166)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x65 (and $x146 $x118)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x92 (and $x29 $x65)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x134 (and $x157 $x92)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x47 (and $x71 $x134)))
 (let (($x101 (=> $x47 $x83)))
 (not $x101)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x85 (= (_ bv4 32) (_ bv4 32))))
 (let ((?x63 (ite $x85 ?x147 (_ bv0 32))))
 (let ((?x82 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x125 (= (_ bv4 32) (_ bv10 32))))
 (let ((?x35 (ite $x125 ?x82 ?x63)))
 (let ((?x122 (bvmul (_ bv4294967295 32) ?x35)))
 (let ((?x109 (bvneg ?x122)))
 (let (($x11 (= ?x109 ?x40)))
 (let (($x83 (= $x11 true)))
 (let ((?x123 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x123)))
 (let (($x64 (= ?x128 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x64 true)))
 (let ((?x163 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x163)))
 (let (($x39 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x39 true)))
 (let (($x116 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (= $x116 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x152)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x154 $x148)))
 (let (($x26 (and $x138 $x80)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x30 $x26)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x46)))))))
 (let (($x73 (and $x8 $x136)))
 (let (($x158 (= $x73 true)))
 (let ((?x120 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x120)))
 (let (($x172 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x172 true)))
 (let (($x142 (= ?x28 input.dst.llvm-%n)))
 (let (($x54 (= $x142 true)))
 (let (($x48 (and $x54 $x41)))
 (let (($x5 (and $x48 $x158)))
 (let (($x150 (and $x5 $x36)))
 (let (($x114 (and $x150 $x111)))
 (let (($x45 (and $x114 $x81)))
 (let (($x79 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (and (not $x79) $x45)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x7 (and $x91 $x50)))
 (let (($x55 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x12 (and $x55 $x7)))
 (let (($x94 (forall ((input.ind-%var3266X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3266X)))
 (=> $x145 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3266X) (_ bv0 32)))))
 ))
 (let (($x75 (forall ((input.ind-%var3265X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3265X)))
 (= $x145 false)))
 ))
 (let (($x69 (and $x75 $x94)))
 (let (($x127 (and $x69 $x12)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x155 (and $x53 $x127)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x115 (and $x77 $x155)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x52 (and $x20 $x115)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x160 (and $x31 $x52)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x149 (and $x6 $x160)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x166 (and $x76 $x149)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x118 (and $x126 $x166)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x65 (and $x146 $x118)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x92 (and $x29 $x65)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x134 (and $x157 $x92)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x47 (and $x71 $x134)))
 (let (($x101 (=> $x47 $x83)))
 (not $x101)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x15 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x162 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x57 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x169 (ite $x57 ?x162 (_ bv0 32))))
 (let ((?x61 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x16 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x89 (ite $x16 ?x61 ?x169)))
 (let ((?x143 (bvmul (_ bv4294967295 32) ?x89)))
 (let ((?x156 (bvneg ?x143)))
 (let (($x113 (= ?x156 ?x15)))
 (let (($x59 (= $x113 true)))
 (let ((?x115 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x115)))
 (let (($x149 (= ?x52 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x166 (= $x149 true)))
 (let ((?x45 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x45)))
 (let (($x7 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x7 true)))
 (let (($x98 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x98 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x163)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x5 $x36)))
 (let (($x39 (and $x150 $x100)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x8 $x39)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x138)))))))
 (let (($x114 (and $x158 $x111)))
 (let (($x74 (= $x114 true)))
 (let ((?x9 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x9)))
 (let (($x10 (= ?x170 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (= $x10 true)))
 (let (($x168 (= ?x170 input.dst.llvm-%n)))
 (let (($x33 (= $x168 true)))
 (let (($x13 (and $x33 $x46)))
 (let (($x123 (and $x13 $x74)))
 (let (($x81 (and $x123 $x64)))
 (let (($x127 (and $x81 $x12)))
 (let (($x118 (and $x127 $x166)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and (not $x48) $x118)))
 (let (($x172 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x172 $x92)))
 (let (($x135 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x47 (and $x135 $x134)))
 (let (($x108 (forall ((input.ind-%var3311X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3311X)))
 (=> $x75 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3311X) (_ bv0 32)))))
 ))
 (let (($x94 (forall ((input.ind-%var3310X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3310X)))
 (= $x75 false)))
 ))
 (let (($x120 (and $x94 $x108)))
 (let (($x125 (and $x120 $x47)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x82 (and $x53 $x125)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x85 (and $x77 $x82)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x147 (and $x20 $x85)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x63 (and $x31 $x147)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x35 (and $x6 $x63)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x122 (and $x76 $x35)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x109 (and $x126 $x122)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x40 (and $x146 $x109)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x11 (and $x29 $x40)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x83 (and $x157 $x11)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x101 (and $x71 $x83)))
 (let (($x43 (=> $x101 $x59)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x15 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x162 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x57 (= (_ bv10 32) (_ bv4 32))))
 (let ((?x169 (ite $x57 ?x162 (_ bv0 32))))
 (let ((?x61 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x16 (= (_ bv10 32) (_ bv10 32))))
 (let ((?x89 (ite $x16 ?x61 ?x169)))
 (let ((?x143 (bvmul (_ bv4294967295 32) ?x89)))
 (let ((?x156 (bvneg ?x143)))
 (let (($x113 (= ?x156 ?x15)))
 (let (($x59 (= $x113 true)))
 (let ((?x115 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x115)))
 (let (($x149 (= ?x52 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x166 (= $x149 true)))
 (let ((?x45 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x45)))
 (let (($x7 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x7 true)))
 (let (($x98 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x98 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x163)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x5 $x36)))
 (let (($x39 (and $x150 $x100)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x8 $x39)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x138)))))))
 (let (($x114 (and $x158 $x111)))
 (let (($x74 (= $x114 true)))
 (let ((?x9 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x9)))
 (let (($x10 (= ?x170 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (= $x10 true)))
 (let (($x168 (= ?x170 input.dst.llvm-%n)))
 (let (($x33 (= $x168 true)))
 (let (($x13 (and $x33 $x46)))
 (let (($x123 (and $x13 $x74)))
 (let (($x81 (and $x123 $x64)))
 (let (($x127 (and $x81 $x12)))
 (let (($x118 (and $x127 $x166)))
 (let (($x48 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and (not $x48) $x118)))
 (let (($x172 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x172 $x92)))
 (let (($x135 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x47 (and $x135 $x134)))
 (let (($x108 (forall ((input.ind-%var3311X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3311X)))
 (=> $x75 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3311X) (_ bv0 32)))))
 ))
 (let (($x94 (forall ((input.ind-%var3310X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3310X)))
 (= $x75 false)))
 ))
 (let (($x120 (and $x94 $x108)))
 (let (($x125 (and $x120 $x47)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x82 (and $x53 $x125)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x85 (and $x77 $x82)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x147 (and $x20 $x85)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x63 (and $x31 $x147)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x35 (and $x6 $x63)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x122 (and $x76 $x35)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x109 (and $x126 $x122)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x40 (and $x146 $x109)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x11 (and $x29 $x40)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x83 (and $x157 $x11)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x101 (and $x71 $x83)))
 (let (($x43 (=> $x101 $x59)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x15 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (not $x15)))
 (let (($x143 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (not $x143)))
 (let (($x59 (or $x156 $x113)))
 (let (($x43 (= $x59 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x166)))
 (let (($x82 (= ?x118 input.dst.llvm-%n)))
 (let (($x85 (= $x82 true)))
 (let (($x92 (= ?x118 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (= $x92 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x127)))
 (let (($x52 (= ?x155 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x52 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x128)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x39 $x74)))
 (let (($x64 (and $x123 $x98)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x152 $x64)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x5)))))))
 (let (($x45 (and $x100 $x81)))
 (let (($x50 (= $x45 true)))
 (let ((?x72 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x72)))
 (let (($x154 (= ?x30 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x161 (= $x154 true)))
 (let (($x7 (and $x161 $x50)))
 (let (($x149 (and $x7 $x160)))
 (let (($x47 (and $x149 $x134)))
 (let (($x147 (and $x47 $x85)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (and $x10 $x147)))
 (let (($x56 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x35 (and $x56 $x63)))
 (let (($x22 (forall ((input.ind-%var3356X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3356X)))
 (=> $x94 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3356X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var3355X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3355X)))
 (= $x94 false)))
 ))
 (let (($x9 (and $x108 $x22)))
 (let (($x122 (and $x9 $x35)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x109 (and $x53 $x122)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x40 (and $x77 $x109)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x11 (and $x20 $x40)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x83 (and $x31 $x11)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x101 (and $x6 $x83)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x16 (and $x76 $x101)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x61 (and $x126 $x16)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x57 (and $x146 $x61)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x162 (and $x29 $x57)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x169 (and $x157 $x162)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x89 (and $x71 $x169)))
 (let (($x144 (=> $x89 $x43)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x15 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (not $x15)))
 (let (($x143 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (not $x143)))
 (let (($x59 (or $x156 $x113)))
 (let (($x43 (= $x59 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x166)))
 (let (($x82 (= ?x118 input.dst.llvm-%n)))
 (let (($x85 (= $x82 true)))
 (let (($x92 (= ?x118 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (= $x92 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x127)))
 (let (($x52 (= ?x155 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x52 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x128)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x39 $x74)))
 (let (($x64 (and $x123 $x98)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x152 $x64)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x5)))))))
 (let (($x45 (and $x100 $x81)))
 (let (($x50 (= $x45 true)))
 (let ((?x72 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x72)))
 (let (($x154 (= ?x30 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x161 (= $x154 true)))
 (let (($x7 (and $x161 $x50)))
 (let (($x149 (and $x7 $x160)))
 (let (($x47 (and $x149 $x134)))
 (let (($x147 (and $x47 $x85)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (and $x10 $x147)))
 (let (($x56 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x35 (and $x56 $x63)))
 (let (($x22 (forall ((input.ind-%var3356X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3356X)))
 (=> $x94 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3356X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var3355X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3355X)))
 (= $x94 false)))
 ))
 (let (($x9 (and $x108 $x22)))
 (let (($x122 (and $x9 $x35)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x109 (and $x53 $x122)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x40 (and $x77 $x109)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x11 (and $x20 $x40)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x83 (and $x31 $x11)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x101 (and $x6 $x83)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x16 (and $x76 $x101)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x61 (and $x126 $x16)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x57 (and $x146 $x61)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x162 (and $x29 $x57)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x169 (and $x157 $x162)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x89 (and $x71 $x169)))
 (let (($x144 (=> $x89 $x43)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x173 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (or $x135 $x173)))
 (let (($x79 (= $x75 true)))
 (let ((?x109 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x109)))
 (let (($x61 (= ?x40 input.dst.llvm-%n)))
 (let (($x57 (= $x61 true)))
 (let (($x11 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x11 true)))
 (let ((?x82 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x82)))
 (let (($x63 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x35 (= $x63 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x160)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x12 $x115)))
 (let (($x166 (and $x52 $x149)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x138 $x166)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x128)))))))
 (let (($x92 (and $x7 $x118)))
 (let (($x134 (= $x92 true)))
 (let ((?x8 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x8)))
 (let (($x107 (= ?x158 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x107 true)))
 (let (($x47 (and $x116 $x134)))
 (let (($x122 (and $x47 $x35)))
 (let (($x101 (and $x122 $x83)))
 (let (($x162 (and $x101 $x57)))
 (let (($x163 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x163 $x162)))
 (let (($x161 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x89 (and $x161 $x169)))
 (let (($x30 (forall ((input.ind-%var3366X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3366X)))
 (=> $x108 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3366X) (_ bv0 32)))))
 ))
 (let (($x22 (forall ((input.ind-%var3365X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3365X)))
 (= $x108 false)))
 ))
 (let (($x73 (and $x22 $x30)))
 (let (($x143 (and $x73 $x89)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x156 (and $x53 $x143)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x15 (and $x77 $x156)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x113 (and $x20 $x15)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x59 (and $x31 $x113)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x43 (and $x6 $x59)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x144 (and $x76 $x43)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x37 (and $x126 $x144)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x148 (and $x146 $x37)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x165 (and $x29 $x148)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x58 (and $x157 $x165)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x54 (and $x71 $x58)))
 (let (($x172 (=> $x54 $x79)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x173 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (or $x135 $x173)))
 (let (($x79 (= $x75 true)))
 (let ((?x109 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x109)))
 (let (($x61 (= ?x40 input.dst.llvm-%n)))
 (let (($x57 (= $x61 true)))
 (let (($x11 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x11 true)))
 (let ((?x82 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x82)))
 (let (($x63 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x35 (= $x63 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x160)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x12 $x115)))
 (let (($x166 (and $x52 $x149)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x138 $x166)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x128)))))))
 (let (($x92 (and $x7 $x118)))
 (let (($x134 (= $x92 true)))
 (let ((?x8 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x8)))
 (let (($x107 (= ?x158 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x107 true)))
 (let (($x47 (and $x116 $x134)))
 (let (($x122 (and $x47 $x35)))
 (let (($x101 (and $x122 $x83)))
 (let (($x162 (and $x101 $x57)))
 (let (($x163 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x163 $x162)))
 (let (($x161 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x89 (and $x161 $x169)))
 (let (($x30 (forall ((input.ind-%var3366X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3366X)))
 (=> $x108 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3366X) (_ bv0 32)))))
 ))
 (let (($x22 (forall ((input.ind-%var3365X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3365X)))
 (= $x108 false)))
 ))
 (let (($x73 (and $x22 $x30)))
 (let (($x143 (and $x73 $x89)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x156 (and $x53 $x143)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x15 (and $x77 $x156)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x113 (and $x20 $x15)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x59 (and $x31 $x113)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x43 (and $x6 $x59)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x144 (and $x76 $x43)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x37 (and $x126 $x144)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x148 (and $x146 $x37)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x165 (and $x29 $x148)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x58 (and $x157 $x165)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x54 (and $x71 $x58)))
 (let (($x172 (=> $x54 $x79)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x41 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x41 true)))
 (let ((?x165 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x165)))
 (let (($x135 (= ?x58 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x135 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x156)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x57 $x89)))
 (let (($x113 (and $x143 $x15)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x125 $x113)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x109)))))))
 (let (($x43 (and $x61 $x59)))
 (let (($x144 (= $x43 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x160 (bvneg ?x52)))
 (let (($x149 (= ?x160 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x166 (= $x149 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x45)))
 (let (($x127 (= ?x7 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (= $x127 true)))
 (let (($x100 (= ?x7 input.dst.llvm-%n)))
 (let (($x138 (= $x100 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (not $x128)))
 (let (($x64 (= $x98 true)))
 (let (($x12 (and $x64 $x138)))
 (let (($x115 (and $x12 $x155)))
 (let (($x118 (and $x115 $x166)))
 (let (($x37 (and $x118 $x144)))
 (let (($x75 (and $x37 $x173)))
 (let (($x74 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (and $x74 $x75)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x50 $x79)))
 (let (($x116 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x28 (and $x116 $x172)))
 (let (($x158 (forall ((input.ind-%var3386X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3386X)))
 (=> $x22 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3386X) (_ bv0 32)))))
 ))
 (let (($x30 (forall ((input.ind-%var3385X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3385X)))
 (= $x22 false)))
 ))
 (let (($x5 (and $x30 $x158)))
 (let (($x36 (and $x5 $x28)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x150 (and $x53 $x36)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x142 (and $x77 $x150)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x33 (and $x20 $x142)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x56 (and $x31 $x33)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x49 (and $x6 $x56)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x94 (and $x76 $x49)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x48 (and $x126 $x94)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x10 (and $x146 $x48)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x170 (and $x29 $x10)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x46 (and $x157 $x170)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x120 (and $x71 $x46)))
 (let (($x99 (=> $x120 $x69)))
 (not $x99)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%27%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%34%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%36%bbentry () (_ BitVec 32))
(assert
 (let (($x41 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x41 true)))
 (let ((?x165 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x165)))
 (let (($x135 (= ?x58 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x135 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x156)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x57 $x89)))
 (let (($x113 (and $x143 $x15)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x125 $x113)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x109)))))))
 (let (($x43 (and $x61 $x59)))
 (let (($x144 (= $x43 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x160 (bvneg ?x52)))
 (let (($x149 (= ?x160 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x166 (= $x149 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x45)))
 (let (($x127 (= ?x7 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (= $x127 true)))
 (let (($x100 (= ?x7 input.dst.llvm-%n)))
 (let (($x138 (= $x100 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (not $x128)))
 (let (($x64 (= $x98 true)))
 (let (($x12 (and $x64 $x138)))
 (let (($x115 (and $x12 $x155)))
 (let (($x118 (and $x115 $x166)))
 (let (($x37 (and $x118 $x144)))
 (let (($x75 (and $x37 $x173)))
 (let (($x74 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (and $x74 $x75)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x50 $x79)))
 (let (($x116 (= (_ bv4 32) input.spec-%tmpvar-12.L3%27%d)))
 (let (($x28 (and $x116 $x172)))
 (let (($x158 (forall ((input.ind-%var3386X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3386X)))
 (=> $x22 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var3386X) (_ bv0 32)))))
 ))
 (let (($x30 (forall ((input.ind-%var3385X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var3385X)))
 (= $x22 false)))
 ))
 (let (($x5 (and $x30 $x158)))
 (let (($x36 (and $x5 $x28)))
 (let (($x53 (= (_ bv4 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x150 (and $x53 $x36)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x142 (and $x77 $x150)))
 (let (($x20 (= (_ bv10 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x33 (and $x20 $x142)))
 (let (($x31 (= (_ bv10 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x56 (and $x31 $x33)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x49 (and $x6 $x56)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x94 (and $x76 $x49)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-11.L3%34%bbentry)))
 (let (($x48 (and $x126 $x94)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-17.L3%34%bbentry)))
 (let (($x10 (and $x146 $x48)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-14.L3%34%bbentry)))
 (let (($x170 (and $x29 $x10)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-16.L3%34%bbentry)))
 (let (($x46 (and $x157 $x170)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-18.L3%36%bbentry)))
 (let (($x120 (and $x71 $x46)))
 (let (($x99 (=> $x120 $x69)))
 (not $x99)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 106 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087284/query
