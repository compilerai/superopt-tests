=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1.B4.C1.D2.E1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%7%bbentry L3%8%d L3%9%bbentry L3%11%bbentry L3%19%bbentry L3%20%d L3%21%bbentry L3%23%bbentry E0%0%d
=Edges:
L0%0%d => L3%7%bbentry
L3%7%bbentry => L3%8%d
L3%8%d => L3%11%bbentry
L3%8%d => L3%9%bbentry
L3%9%bbentry => E0%0%d
L3%11%bbentry => L3%19%bbentry
L3%19%bbentry => L3%20%d
L3%20%d => L3%23%bbentry
L3%20%d => L3%21%bbentry
L3%21%bbentry => L3%7%bbentry (backedge) 
L3%23%bbentry => L3%19%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%7%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%8%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%11%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%19%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%20%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%21%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%23%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%7%bbentry => L3%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%8%d => L3%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%8%d => L3%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%9%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-13.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%11%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-9.L3%19%bbentry
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_bv)*(((intrinsic_app_bvadd*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%19%bbentry => L3%20%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%20%d => L3%23%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%20%d => L3%21%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%21%bbentry => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%7%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*((inline_exit*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%23%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-j-0.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 31 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 32 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 33 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L3%8%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 34 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%20%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%7%bbentry
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=Loc 36 in src.spec.foo.
REGMEM
spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 37 in src.spec.foo.
REGMEM
spec-%var-j-0.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=Loc 38 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-13.E0%0%d
1 : input.spec-%tmpvar-13.E0%0%d : BV:32
=Loc 40 in src.spec.foo.
REGMEM
spec-%tmpvar-14.E0%0%d
1 : input.spec-%tmpvar-14.E0%0%d : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%tmpvar-17.E0%0%d
1 : input.spec-%tmpvar-17.E0%0%d : BV:32
=Loc 42 in src.spec.foo.
REGMEM
spec-%tmpvar-18.E0%0%d
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=Loc 44 in src.spec.foo.
REGMEM
spec-%var-u-1.E0%0%d
1 : input.spec-%var-u-1.E0%0%d : UNIT
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-15.L3%7%bbentry
1 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-16.L3%7%bbentry
1 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=Loc 47 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%tmpvar-11.L3%7%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%tmpvar-5.L3%7%bbentry : BV:32
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%tmpvar-6.L3%7%bbentry : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L3%19%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-u-0.L3%7%bbentry
1 : input.spec-%var-u-0.L3%7%bbentry : UNIT
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%19%bbentry
1 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=Loc 56 in src.spec.foo.
REGMEM
spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 57 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%19%bbentry
1 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%19%bbentry
1 : input.spec-%tmpvar-2.L3%19%bbentry : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%tmpvar-3.L3%19%bbentry : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%var-x_ij-0.L3%19%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%7%bbentry
35, 36, 43, 
=live locs at L3%8%d
33, 35, 36, 43, 
=live locs at L3%9%bbentry
43, 
=live locs at L3%11%bbentry
33, 35, 36, 43, 
=live locs at L3%19%bbentry
36, 37, 38, 51, 52, 
=live locs at L3%20%d
34, 36, 37, 38, 51, 52, 
=live locs at L3%21%bbentry
36, 51, 52, 
=live locs at L3%23%bbentry
34, 36, 37, 38, 51, 52, 
=live locs at E0%0%d
42[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 31, 32
=loc definedness at L3%7%bbentry
1, 31, 32, 35, 36, 43, 45, 46, 47
=loc definedness at L3%8%d
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%9%bbentry
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%11%bbentry
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%19%bbentry
1, 31, 32, 33, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%20%d
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%21%bbentry
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%23%bbentry
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at E0%0%d
1, 31, 32, 33, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%7%bbentry
35, 36
=branch affecting variable locs at L3%8%d
33, 35, 36
=branch affecting variable locs at L3%9%bbentry

=branch affecting variable locs at L3%11%bbentry
33, 35, 36
=branch affecting variable locs at L3%19%bbentry
36, 37, 38, 51
=branch affecting variable locs at L3%20%d
34, 36, 37, 38, 51
=branch affecting variable locs at L3%21%bbentry
36, 51
=branch affecting variable locs at L3%23%bbentry
36, 37, 38, 51
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 35 {input.spec-%var-i-0.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 36 {input.spec-%var-x-0.L3%7%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 43 {input.spec-%var-ret-1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 45 {input.spec-%tmpvar-15.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 46 {input.spec-%tmpvar-16.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 47 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d for loc_id 33 {input.spec-%tmpvar-7.L3%8%d }
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 39 {input.spec-%tmpvar-13.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 40 {input.spec-%tmpvar-14.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 41 {input.spec-%tmpvar-17.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 42 {input.spec-%tmpvar-18.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 44 {input.spec-%var-u-1.E0%0%d }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 37 {input.spec-%var-j-0.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 38 {input.spec-%var-x_i-0.L3%19%bbentry }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 51 {input.spec-%tmpvar-9.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 52 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 54 {input.spec-%tmpvar-10.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 55 {input.spec-%tmpvar-8.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 56 {input.spec-%var-x_i-1.L3%19%bbentry }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 57 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d for loc_id 34 {input.spec-%tmpvar-0.L3%20%d }
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 35 {input.spec-%var-i-0.L3%7%bbentry }
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 43 {input.spec-%var-ret-1.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 47 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 48 {input.spec-%tmpvar-11.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 49 {input.spec-%tmpvar-5.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 50 {input.spec-%tmpvar-6.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 53 {input.spec-%var-u-0.L3%7%bbentry }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 37 {input.spec-%var-j-0.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 52 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 57 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 58 {input.spec-%tmpvar-1.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 59 {input.spec-%tmpvar-2.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 60 {input.spec-%tmpvar-3.L3%19%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 61 {input.spec-%var-x_ij-0.L3%19%bbentry }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%7%bbentry:
vacuous mls at L3%8%d:
vacuous mls at L3%9%bbentry:
vacuous mls at L3%11%bbentry:
vacuous mls at L3%19%bbentry:
vacuous mls at L3%20%d:
vacuous mls at L3%21%bbentry:
vacuous mls at L3%23%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%7%bbentry:
non-vacuous mls at L3%8%d:
non-vacuous mls at L3%9%bbentry:
non-vacuous mls at L3%11%bbentry:
non-vacuous mls at L3%19%bbentry:
non-vacuous mls at L3%20%d:
non-vacuous mls at L3%21%bbentry:
non-vacuous mls at L3%23%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 36
=loc_expr
140525 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 45
=loc_expr
140553 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 46
=loc_expr
140554 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 54
=loc_expr
140559 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 55
=loc_expr
140560 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 58
=loc_expr
140562 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 45 expr
1 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=loc 45 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 46 expr
1 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=loc 46 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 54 expr
1 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=loc 54 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 55 expr
1 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=loc 55 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 58 expr
1 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=loc 58 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 45 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%bbentry=>L3%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%9%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%11%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%9%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%11%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%19%bbentry=>L3%20%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%21%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%23%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%21%bbentry=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%23%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%7%bbentry
=spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%bbentry=>L3%8%d
=spec-%tmpvar-7.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%9%bbentry=>E0%0%d
=spec-%tmpvar-13.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%11%bbentry=>L3%19%bbentry
=spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%19%bbentry=>L3%20%d
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%21%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%23%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%21%bbentry=>L3%7%bbentry
=spec-%var-i-0.L3%7%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%23%bbentry=>L3%19%bbentry
=spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%7%bbentry for src.spec.foo
=suffixpath_at_L3%7%bbentry.graph_edge_composition
(L0%0%d=>L3%7%bbentry)
=suffixpath_at_L3%8%d for src.spec.foo
=suffixpath_at_L3%8%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*(L3%7%bbentry=>L3%8%d))
=suffixpath_at_L3%9%bbentry for src.spec.foo
=suffixpath_at_L3%9%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%9%bbentry)))
=suffixpath_at_L3%11%bbentry for src.spec.foo
=suffixpath_at_L3%11%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%11%bbentry)))
=suffixpath_at_L3%19%bbentry for src.spec.foo
=suffixpath_at_L3%19%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*(L3%11%bbentry=>L3%19%bbentry))))
=suffixpath_at_L3%20%d for src.spec.foo
=suffixpath_at_L3%20%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*(L3%19%bbentry=>L3%20%d)))))
=suffixpath_at_L3%21%bbentry for src.spec.foo
=suffixpath_at_L3%21%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%21%bbentry))))))
=suffixpath_at_L3%23%bbentry for src.spec.foo
=suffixpath_at_L3%23%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%23%bbentry))))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%9%bbentry)*(L3%9%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry done
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d done
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry done
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry done
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d done
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry done
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry done
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry done
tfg.assumes_around_edge at L3%23%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%23%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal0 Lfor.body3%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.cond1%1%bbentry Lfor.cond1%2%d Lfor.end7%1%d Lfor.inc5%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%intermediateVal0
Lfor.cond%2%d => Lfor.end7%1%d
Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
Lfor.cond1%1%bbentry => Lfor.cond1%2%d
Lfor.cond1%2%d => Lfor.body3%1%d
Lfor.cond1%2%d => Lfor.inc5%1%d
Lfor.body3%1%d => Lfor.cond1%1%bbentry (backedge) 
Lfor.inc5%1%d => Lfor.cond%1%bbentry (backedge) 
Lfor.end7%1%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end7%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc5%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 35 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !23)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc5 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc6, %for.inc5 ], !dbg !22*  br label %for.cond, !dbg !23))*  br label %for.cond, !dbg !23)*(  br label %for.cond, !dbg !23*  br label %for.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !25)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)*(  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br label %for.cond1, !dbg !32))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end7%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((((  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %add, %for.inc ], !dbg !16*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !32))*  br label %for.cond1, !dbg !32)*(  br label %for.cond1, !dbg !32*  br label %for.cond1, !dbg !32))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond1%1%bbentry => Lfor.cond1%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp2 = icmp ult i32 %j.0, %m, !dbg !33)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.body3%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.inc5%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br label %for.inc5, !dbg !44)*  br label %for.inc5, !dbg !44)*  br label %for.inc5, !dbg !44)
tfg_edge_comment end

=Edge: Lfor.body3%1%d => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.0 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36*(  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36*  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36))*(  %0 = load i32*, i32** %arrayidx, align 4, !dbg !36*  %0 = load i32*, i32** %arrayidx, align 4, !dbg !36))*(  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36*(  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36*  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36)))*((((  %1 = load i32, i32* %arrayidx4, align 4, !dbg !36*  %1 = load i32, i32* %arrayidx4, align 4, !dbg !36)*(((  %add = add i32 %ret.1, %1, !dbg !38*  br label %for.inc, !dbg !39)*  br label %for.inc, !dbg !39)*  br label %for.inc, !dbg !39))*(((((  %inc = add i32 %j.0, 1, !dbg !40*  br label %for.cond1, !dbg !41, !llvm.loop !42)*  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %add, %for.inc ], !dbg !16)*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !41, !llvm.loop !42))*  br label %for.cond1, !dbg !41, !llvm.loop !42)*(  br label %for.cond1, !dbg !41, !llvm.loop !42*  br label %for.cond1, !dbg !41, !llvm.loop !42)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: Lfor.inc5%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:((((((  %inc6 = add i32 %i.0, 1, !dbg !45*  br label %for.cond, !dbg !46, !llvm.loop !47)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc5 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc6, %for.inc5 ], !dbg !22*  br label %for.cond, !dbg !46, !llvm.loop !47))*  br label %for.cond, !dbg !46, !llvm.loop !47)*(  br label %for.cond, !dbg !46, !llvm.loop !47*  br label %for.cond, !dbg !46, !llvm.loop !47))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.end7%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !49
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100015 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100046 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100047 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100048 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100049 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
=Loc 100050 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100051 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100052 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.2
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100055 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100060 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=Loc 100061 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100062 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100063 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100064 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=Loc 100065 in dst.llvm.foo.
REGMEM
dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=Loc 100066 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=Loc 100067 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=Loc 100068 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100069 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100070 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=Loc 100071 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=Loc 100072 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=Loc 100073 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100074 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100075 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100076 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=Loc 100077 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=Loc 100078 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=Loc 100079 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100080 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100081 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100082 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100083 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100084 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100085 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100086 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 
=live locs at Lfor.body%1%intermediateVal0
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055, 100059, 
=live locs at Lfor.body3%1%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100060, 100067, 
=live locs at Lfor.cond%1%bbentry
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055[f], 100059, 
=live locs at Lfor.cond%2%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055[f], 100057, 100059, 
=live locs at Lfor.cond1%1%bbentry
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100060, 100067, 
=live locs at Lfor.cond1%2%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100058, 100059, 100060, 100067, 
=live locs at Lfor.end7%1%d
100050, 100055[f], 
=live locs at Lfor.inc5%1%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100067, 
=live locs at E0%0%d
100050, 100055[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052
=loc definedness at Lfor.body%1%intermediateVal0
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.body3%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.cond%1%bbentry
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.cond%2%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.cond1%1%bbentry
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.cond1%2%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.end7%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.inc5%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at E0%0%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100059, 100061, 100062, 100063, 100085, 100086

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006, 100012
=branch affecting variable locs at Lfor.body%1%intermediateVal0
100006, 100012, 100059
=branch affecting variable locs at Lfor.body3%1%d
100006, 100012, 100059, 100060
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100012, 100059
=branch affecting variable locs at Lfor.cond%2%d
100006, 100012, 100057, 100059
=branch affecting variable locs at Lfor.cond1%1%bbentry
100006, 100012, 100059, 100060
=branch affecting variable locs at Lfor.cond1%2%d
100006, 100012, 100058, 100059, 100060
=branch affecting variable locs at Lfor.end7%1%d

=branch affecting variable locs at Lfor.inc5%1%d
100006, 100012, 100059
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100059 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100061 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100063 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100085 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100086 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100060 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100067 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100068 {input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100069 {input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100060 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100067 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100071 {input.dst.llvm-%0.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100072 {input.dst.llvm-%1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100073 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100074 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100075 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100076 {input.dst.llvm-%add.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100077 {input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100078 {input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100079 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100080 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100081 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100082 {input.dst.llvm-%inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100084 {input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100057 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end7%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end7%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d for loc_id 100058 {input.dst.llvm-%cmp2.Lfor.cond1%2%d }
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc5%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc5%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100053 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100054 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100056 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100059 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100063 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100065 {input.dst.llvm-%inc6.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100066 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal0:
vacuous mls at Lfor.body3%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.cond1%1%bbentry:
vacuous mls at Lfor.cond1%2%d:
vacuous mls at Lfor.end7%1%d:
vacuous mls at Lfor.inc5%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal0:
non-vacuous mls at Lfor.body3%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.cond1%1%bbentry:
non-vacuous mls at Lfor.cond1%2%d:
non-vacuous mls at Lfor.end7%1%d:
non-vacuous mls at Lfor.inc5%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140383 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140381 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140385 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100031
=loc_expr
140459 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140460 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140462 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140464 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100036
=loc_expr
140466 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100041
=loc_expr
140390 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100042
=loc_expr
140380 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100043
=loc_expr
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100044
=loc_expr
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100053
=loc_expr
140659 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140660 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100056
=loc_expr
140661 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100061
=loc_expr
140662 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100062
=loc_expr
140663 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100066
=loc_expr
140666 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100068
=loc_expr
140667 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100085
=loc_expr
140683 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100086
=loc_expr
140684 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100056 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100056 spreled-expr
140267 : retaddr_const : BV:32
=loc 100061 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100061 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100062 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100062 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100068 expr
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=loc 100068 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100085 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100085 spreled-expr
140390 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100086 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100086 spreled-expr
140389 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100015 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100055 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100070 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100072 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100073 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100074 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100075 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100076 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100077 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100078 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100079 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100081 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100083 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100085 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100086 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100056 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100068 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100086 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end7%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.body3%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.inc5%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end7%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end7%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.body3%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.inc5%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end7%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end7%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end7%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc5%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc5%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end7%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end7%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
2
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lfor.body%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)))
=suffixpath_at_Lfor.body3%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.body3%1%d))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.cond1%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond1%1%bbentry.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry))))
=suffixpath_at_Lfor.cond1%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond1%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*(Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)))))
=suffixpath_at_Lfor.end7%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end7%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end7%1%d)))
=suffixpath_at_Lfor.inc5%1%d for dst.llvm.foo
=suffixpath_at_Lfor.inc5%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.inc5%1%d))))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end7%1%d)*(Lfor.end7%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140385 : input.dst.llvm-%x : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140391 : islangaligned(140385, 140364) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=LhsExpr
140507 : 4 { 0x4 +1.0e1025 } : BV:64
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140409 : 32 { 0x20 +1.0e1025 } : INT
140633 : bvsign_ext(140612, 140409) : BV:64
140752 : bvmul(140507, 140633) : BV:64
140413 : 63 { 0x3f +1.0e1025 } : INT
140753 : bvextract(140752, 140413, 140409) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140632 : bvslt(140612, 140276) : BOOL
140415 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140766 : ite(140632, 140415, 140276) : BV:32
140768 : eq(140753, 140766) : BOOL
140364 : 4 { 0x4 +1.0e1025 } : INT
140770 : isindexforsize(140768, 140364) : BOOL
140385 : input.dst.llvm-%x : BV:32
140361 : 4 { 0x4 +1.47e129 } : BV:32
140699 : bvmul(140361, 140612) : BV:32
140702 : bvadd(140385, 140699) : BV:32
140772 : isgepoffset(140702, 140699) : BOOL
140776 : islangaligned(140702, 140364) : BOOL
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140493 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140365 : 0 { 0x0 } : BOOL
140708 : select(140378, 140379, 140493, 140702, 140364, 140365) : BV:32
140778 : islangaligned(140708, 140364) : BOOL
140781 : and(140776, 140778) : BOOL
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140648 : bvsign_ext(140614, 140409) : BV:64
140794 : bvmul(140507, 140648) : BV:64
140795 : bvextract(140794, 140413, 140409) : BV:32
140647 : bvslt(140614, 140276) : BOOL
140808 : ite(140647, 140415, 140276) : BV:32
140810 : eq(140795, 140808) : BOOL
140812 : isindexforsize(140810, 140364) : BOOL
140711 : bvmul(140361, 140614) : BV:32
140713 : bvadd(140708, 140711) : BV:32
140814 : isgepoffset(140713, 140711) : BOOL
140819 : and(140770, 140772, 140776, 140781, 140812, 140814) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140493 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140385 : input.dst.llvm-%x : BV:32
140361 : 4 { 0x4 +1.47e129 } : BV:32
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140699 : bvmul(140361, 140612) : BV:32
140702 : bvadd(140385, 140699) : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140708 : select(140378, 140379, 140493, 140702, 140364, 140365) : BV:32
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140711 : bvmul(140361, 140614) : BV:32
140713 : bvadd(140708, 140711) : BV:32
140734 : islangaligned(140713, 140364) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end7%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end7%1%d done
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc5%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc5%1%d done
tfg.assumes_around_edge at Lfor.end7%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end7%1%d=>E0%0%d done
tfg.assumes_around_edge at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body3%1%d
=linename
line 5
=pc
Lfor.body3%2%d
=linename
line 5
=pc
Lfor.body3%3%d
=linename
line 5
=pc
Lfor.body3%4%d
=linename
line 5
=pc
Lfor.body3%5%d
=linename
line 5
=pc
Lfor.body3%6%d
=linename
line 6
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.cond1%1%d
=linename
line 4
=pc
Lfor.cond1%2%d
=linename
line 4
=pc
Lfor.end%1%d
=linename
line 7
=pc
Lfor.end7%1%d
=linename
line 8
=pc
Lfor.inc%1%d
=linename
line 4
=pc
Lfor.inc%2%d
=linename
line 4
=pc
Lfor.inc5%1%d
=linename
line 3
=pc
Lfor.inc5%2%d
=linename
line 3
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 10
=pc
Lfor.body3%1%d
=column_name
 at column 14
=pc
Lfor.body3%2%d
=column_name
 at column 14
=pc
Lfor.body3%3%d
=column_name
 at column 14
=pc
Lfor.body3%4%d
=column_name
 at column 14
=pc
Lfor.body3%5%d
=column_name
 at column 11
=pc
Lfor.body3%6%d
=column_name
 at column 5
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.cond1%1%d
=column_name
 at column 28
=pc
Lfor.cond1%2%d
=column_name
 at column 5
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.end7%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 33
=pc
Lfor.inc%2%d
=column_name
 at column 5
=pc
Lfor.inc5%1%d
=column_name
 at column 31
=pc
Lfor.inc5%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 10)
=pc
Lfor.body3%1%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%2%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%3%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%4%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%5%d
=line_and_column
(line 5 at column 11)
=pc
Lfor.body3%6%d
=line_and_column
line 6
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.cond1%1%d
=line_and_column
(line 4 at column 28)
=pc
Lfor.cond1%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.end%1%d
=line_and_column
line 7
=pc
Lfor.end7%1%d
=line_and_column
line 8
=pc
Lfor.inc%1%d
=line_and_column
(line 4 at column 33)
=pc
Lfor.inc%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.inc5%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc5%2%d
=line_and_column
(line 3 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum2=/
input.dst.llvm-%m : L0%0%d : m'
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%j.0.phi.tmpvar.for.body : L0%0%d : 0
input.dst.llvm-%j.0 : Lfor.cond1%1%bbentry : j'
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%ret.1 : Lfor.cond1%1%bbentry : ret'
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx4]_4
input.dst.llvm-%add : Lfor.body3%6%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : j'
input.dst.llvm-%inc6 : Lfor.inc5%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset
input.dst.llvm-%arrayidx4 : L0%0%d : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset
input.dst.llvm-%ret.1.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%j.0
=dst.llvm-%j.0 loop pc: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb
=dst.llvm-%j.0 val_scevb scev
=dst.llvm-%j.0 val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 val_scevb scev scev_expr done
=dst.llvm-%j.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb
=dst.llvm-%j.0 atuse_scevb scev
=dst.llvm-%j.0 atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 atuse_scevb scev scev_expr done
=dst.llvm-%j.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atexit_scev
=dst.llvm-%j.0 atexit_scev loop: L0%0%d
=dst.llvm-%j.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%j.0 atexit_scev scev_expr
7 : input.dst.llvm-%m : BV32
=dst.llvm-%j.0 atexit_scev scev_expr done
=dst.llvm-%ret.1
=dst.llvm-%ret.1 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.1 val_scevb
=dst.llvm-%ret.1 val_scevb scev
=dst.llvm-%ret.1 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 val_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 val_scevb scev scev_expr done
=dst.llvm-%ret.1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb
=dst.llvm-%ret.1 atuse_scevb scev
=dst.llvm-%ret.1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 atuse_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atuse_scevb scev scev_expr done
=dst.llvm-%ret.1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atexit_scev
=dst.llvm-%ret.1 atexit_scev loop: L0%0%d
=dst.llvm-%ret.1 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.1 atexit_scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond1%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx4
=dst.llvm-%arrayidx4 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx4 val_scevb
=dst.llvm-%arrayidx4 val_scevb scev
=dst.llvm-%arrayidx4 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx4 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 val_scevb scev scev_expr done
=dst.llvm-%arrayidx4 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb
=dst.llvm-%arrayidx4 atuse_scevb scev
=dst.llvm-%arrayidx4 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx4 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx4 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atexit_scev
=dst.llvm-%arrayidx4 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx4 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
12 : input.dst.llvm-%0 : BV32
16 : scev_op_add(15, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond1%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond1%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
19 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
19 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
7 : input.dst.llvm-%m : BV32
20 : scev_op_add(2, 7) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=dst.llvm-%inc6
=dst.llvm-%inc6 loop pc: Lfor.cond%1%d
=dst.llvm-%inc6 val_scevb
=dst.llvm-%inc6 val_scevb scev
=dst.llvm-%inc6 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc6 val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc6 val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
21 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc6 val_scevb scev scev_expr done
=dst.llvm-%inc6 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc6 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc6 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc6 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb
=dst.llvm-%inc6 atuse_scevb scev
=dst.llvm-%inc6 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc6 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc6 atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
21 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc6 atuse_scevb scev scev_expr done
=dst.llvm-%inc6 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc6 atexit_scev
=dst.llvm-%inc6 atexit_scev loop: L0%0%d
=dst.llvm-%inc6 atexit_scev scev_overflow_flag: 
=dst.llvm-%inc6 atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
22 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc6 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.end7%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc5%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 18 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 19 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 20 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum2=/
lr_status_top
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp2.Lfor.cond1%2%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc6.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple7.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : $llvm-arg-2 : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : $llvm-md : ARRAY[BV:32 -> BV:8]
16 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : $llvm-arg-0 : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(2, 19) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvmul(9, 19) : BV:32
26 : bvadd(24, 25) : BV:32
27 : select(15, 16, 17, 26, 22, 23) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%7%bbentry_Lfor.cond%1%bbentry L3%19%bbentry_Lfor.cond1%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 35 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%7%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%intermediateVal0#{0,0})*(Lfor.body%1%intermediateVal0#{0,0}=>Lfor.cond1%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*(L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.inc5%1%d#{0,0})*(Lfor.inc5%1%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*(((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*((L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})*((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{1,0})))))+((L3%20%d#{0,0}=>L3%23%bbentry#{0,0})*(L3%23%bbentry#{0,0}=>L3%19%bbentry#{1,0}))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.body3%1%d#{0,0})*(Lfor.body3%1%d#{0,0}=>Lfor.cond1%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%9%bbentry#{0,0})*(L3%9%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end7%1%d#{0,0})*(Lfor.end7%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1.B4.C1.D2.E1
=Locs end
=Liveness in foo.A1.B4.C1.D2.E1
=live locs at L0%0%d_L0%0%d

=live locs at L3%7%bbentry_Lfor.cond%1%bbentry

=live locs at L3%19%bbentry_Lfor.cond1%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1.B4.C1.D2.E1

=Branch affecting variable locs in foo.A1.B4.C1.D2.E1

=Relevant Memlabels in foo.A1.B4.C1.D2.E1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1.B4.C1.D2.E1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1.B4.C1.D2.E1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 2cbd2d1cd5cfdfc168ece22a45c63
=input.spec-%var-x-1
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 137962127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 137962128; 137962131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 137962132; 807997699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 807997700; 807997703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 807997704; 1512563519 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1512563520; 1512563523 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1512563524; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 807997703 { 0x30291107 +1.32083213e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 137962131 { 0x8392293 +1.44636762e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1512563523 { 0x5a27e343 +1.31162297e53 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1700232902
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 128d2f26205d5146566fa26de1d942b
=input.spec-%var-x-1
1 : Lambda214Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda215Var : BV:32
11 : Lambda216Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda217Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda231Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda232Var : BV:32
11 : Lambda233Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda234Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 62985987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 62985988; 62985991 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 62985992; 1082155007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1082155008; 1082155011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1082155012; 1279275583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1279275584; 1279275587 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1279275588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1082155008 { 0x40806000 +1.292968e2 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 62985988 { 0x3c11704 +1.50851488e136 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1279275584 { 0x4c403240 +1.50153350e25 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 62985988 { 0x3c11704 +1.50851488e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 62985991 { 0x3c11707 +1.50851523e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1279275584 { 0x4c403240 +1.50153350e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1279275587 { 0x4c403243 +1.50153386e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1082155008 { 0x40806000 +1.292968e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1082155011 { 0x40806003 +1.293004e2 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1368629833
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3v487.ce27.num_edges_traversed2
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3v487.ce27 6c8b61b69ec21d3b41e6471185189f5
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4613Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4614Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 14, 17) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 14, 17) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(5, 7, 37) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 15) : BOOL
41 : ite(40, 14, 17) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : bvadd(20, 7, 37) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : ite(45, 14, 17) : BV:8
47 : ite(44, 14, 46) : BV:8
48 : bvadd(26, 7, 37) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : ite(50, 14, 17) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : bvadd(7, 37) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 15) : BOOL
56 : ite(55, 14, 17) : BV:8
57 : ite(54, 14, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : lambda(4, 58) : FUNCTION[BV:32 -> BV:32]
60 : map(3, 59) : MAP[BV:32 -> BV:32]
61 : sym_const(60) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4603Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda4604Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 1) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : bvadd(15, 24, 25) : BV:32
42 : eq(41, 27) : BOOL
43 : eq(41, 30) : BOOL
44 : ite(43, 29, 32) : BV:8
45 : ite(42, 29, 44) : BV:8
46 : bvadd(24, 25) : BV:32
47 : eq(46, 27) : BOOL
48 : eq(46, 30) : BOOL
49 : ite(48, 29, 32) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : bvconcat(34, 40, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 27) : BOOL
54 : eq(52, 30) : BOOL
55 : ite(54, 29, 32) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : bvadd(35, 23, 51) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : ite(59, 29, 32) : BV:8
61 : ite(58, 29, 60) : BV:8
62 : bvadd(15, 23, 51) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : ite(64, 29, 32) : BV:8
66 : ite(63, 29, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : ite(69, 29, 32) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : sum(16, 17, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4619Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4620Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 14, 17) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 14, 17) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(5, 7, 37) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 15) : BOOL
41 : ite(40, 14, 17) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : bvadd(20, 7, 37) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : ite(45, 14, 17) : BV:8
47 : ite(44, 14, 46) : BV:8
48 : bvadd(26, 7, 37) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : ite(50, 14, 17) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : bvadd(7, 37) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 15) : BOOL
56 : ite(55, 14, 17) : BV:8
57 : ite(54, 14, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : lambda(4, 58) : FUNCTION[BV:32 -> BV:32]
60 : map(3, 59) : MAP[BV:32 -> BV:32]
61 : sym_const(60) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 2 num_edges_traversed 2
=global nodece 2 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 3
=global nodece 3 nodece z3.ce28.num_edges_traversed2
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce28 9ca224dca232c2ccd76b6c30d0dadfe
=input.spec-%var-x-1
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 177223351 ] -> 0, [ 177223352; 177223352 ] -> 32, [ 177223353; 3269441524 ] -> 0, [ 3269441525; 3269441525 ] -> 1, [ 3269441526; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 177223351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 177223352; 177223355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 177223356; 1249769175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1249769176; 1249769179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1249769180; 3269441523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3269441524; 3269441527 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3269441528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.llvm-%x
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4565Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4566Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 32 { 0x20 +1.381e129 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
16 : eq(11, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : 1 { 0x1 +1.11e129 } : BV:32
28 : bvadd(27, 9, 10) : BV:32
29 : eq(28, 12) : BOOL
30 : eq(28, 15) : BOOL
31 : ite(30, 17, 18) : BV:8
32 : ite(29, 14, 31) : BV:8
33 : bvadd(9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : ite(35, 17, 18) : BV:8
37 : ite(34, 14, 36) : BV:8
38 : bvconcat(20, 26, 32, 37) : BV:32
39 : bvadd(5, 7, 38) : BV:32
40 : eq(39, 12) : BOOL
41 : eq(39, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : bvadd(21, 7, 38) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : ite(46, 17, 18) : BV:8
48 : ite(45, 14, 47) : BV:8
49 : bvadd(27, 7, 38) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : ite(51, 17, 18) : BV:8
53 : ite(50, 14, 52) : BV:8
54 : bvadd(7, 38) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : ite(56, 17, 18) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : bvconcat(43, 48, 53, 58) : BV:32
60 : lambda(4, 59) : FUNCTION[BV:32 -> BV:32]
61 : map(3, 60) : MAP[BV:32 -> BV:32]
62 : sym_const(61) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 255 { 0xff +1.3039e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 256 { 0x100 +1.3051e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4555Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda4556Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 1) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : bvadd(15, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 32, 33) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(35, 41, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 32, 33) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(36, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 32, 33) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(15, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 32, 33) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 32, 33) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : sum(16, 17, 75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
77 : sym_const(76) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4571Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4572Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 32 { 0x20 +1.381e129 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
16 : eq(11, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : 1 { 0x1 +1.11e129 } : BV:32
28 : bvadd(27, 9, 10) : BV:32
29 : eq(28, 12) : BOOL
30 : eq(28, 15) : BOOL
31 : ite(30, 17, 18) : BV:8
32 : ite(29, 14, 31) : BV:8
33 : bvadd(9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : ite(35, 17, 18) : BV:8
37 : ite(34, 14, 36) : BV:8
38 : bvconcat(20, 26, 32, 37) : BV:32
39 : bvadd(5, 7, 38) : BV:32
40 : eq(39, 12) : BOOL
41 : eq(39, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : bvadd(21, 7, 38) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : ite(46, 17, 18) : BV:8
48 : ite(45, 14, 47) : BV:8
49 : bvadd(27, 7, 38) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : ite(51, 17, 18) : BV:8
53 : ite(50, 14, 52) : BV:8
54 : bvadd(7, 38) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : ite(56, 17, 18) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : bvconcat(43, 48, 53, 58) : BV:32
60 : lambda(4, 59) : FUNCTION[BV:32 -> BV:32]
61 : map(3, 60) : MAP[BV:32 -> BV:32]
62 : sym_const(61) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3269441527 { 0xc2dfb7f7 -1025525769 -1.74780166e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 177223355 { 0xa9036bb +1.12667024e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1249769179 { 0x4a7df6db +1.98409593e21 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda439Var : BV:32
2 : Lambda440Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda449Var : BV:32
2 : Lambda450Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3955501958
=counter_example_end
=global nodece 3 num_edges_traversed 2
=global nodece 3 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 4
=global nodece 4 nodece z3v487.ce51.num_edges_traversed2
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce51 d070a3ca52ee751bf50275ab41c29d
=input.spec-%var-x-1
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 79 ] -> 0, [ 80; 80 ] -> 1, [ 81; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 79 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 80; 83 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 84; 16419 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16420; 16423 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 16424; 105279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 105280; 105283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 105284; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4517Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4518Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 80 { 0x50 +1.953e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 8) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 8) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 8) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : bvadd(5, 7, 27) : BV:32
29 : eq(28, 11) : BOOL
30 : ite(29, 13, 14) : BV:8
31 : bvadd(16, 7, 27) : BV:32
32 : eq(31, 11) : BOOL
33 : ite(32, 13, 14) : BV:8
34 : bvadd(20, 7, 27) : BV:32
35 : eq(34, 11) : BOOL
36 : ite(35, 13, 14) : BV:8
37 : bvadd(7, 27) : BV:32
38 : eq(37, 11) : BOOL
39 : ite(38, 13, 14) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : lambda(4, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(3, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : and(2, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(1, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(3, 4, 11) : BOOL
13 : ite(12, 5, 1) : BV:32
14 : unit : UNIT
15 : Lambda4507Var : BV:32
16 : lambda(15, 10) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4508Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvmul(19, 1) : BV:32
22 : bvadd(18, 21, 1) : BV:32
23 : 80 { 0x50 +1.953e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 21, 1) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : bvadd(5, 21, 1) : BV:32
33 : eq(32, 23) : BOOL
34 : ite(33, 25, 26) : BV:8
35 : bvadd(21, 1) : BV:32
36 : eq(35, 23) : BOOL
37 : ite(36, 25, 26) : BV:8
38 : bvconcat(27, 31, 34, 37) : BV:32
39 : bvadd(18, 20, 38) : BV:32
40 : eq(39, 23) : BOOL
41 : ite(40, 25, 26) : BV:8
42 : bvadd(28, 20, 38) : BV:32
43 : eq(42, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : bvadd(5, 20, 38) : BV:32
46 : eq(45, 23) : BOOL
47 : ite(46, 25, 26) : BV:8
48 : bvadd(20, 38) : BV:32
49 : eq(48, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : bvconcat(41, 44, 47, 50) : BV:32
52 : lambda(17, 51) : FUNCTION[BV:32 -> BV:32]
53 : map(16, 52) : MAP[BV:32 -> BV:32]
54 : sum(13, 14, 53) : SUM[UNIT,MAP[BV:32 -> BV:32]]
55 : sym_const(54) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4523Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4524Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 80 { 0x50 +1.953e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 8) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 8) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 8) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : bvadd(5, 7, 27) : BV:32
29 : eq(28, 11) : BOOL
30 : ite(29, 13, 14) : BV:8
31 : bvadd(16, 7, 27) : BV:32
32 : eq(31, 11) : BOOL
33 : ite(32, 13, 14) : BV:8
34 : bvadd(20, 7, 27) : BV:32
35 : eq(34, 11) : BOOL
36 : ite(35, 13, 14) : BV:8
37 : bvadd(7, 27) : BV:32
38 : eq(37, 11) : BOOL
39 : ite(38, 13, 14) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : lambda(4, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(3, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 83 { 0x53 +1.989e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 105283 { 0x19b43 +1.1255071e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 16423 { 0x4027 +1.195777e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda655Var : BV:32
2 : Lambda656Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda665Var : BV:32
2 : Lambda666Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3185644373
=counter_example_end
=global nodece 4 num_edges_traversed 2
=global nodece 4 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 5
=global nodece 5 nodece z3.ce63.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3.ce63 4292896fa34b5557df8dd0f133319dc2
=input.spec-%var-x-1
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 645922815 ] -> 8, [ 645922816; 645922819 ] -> 0, [ 645922820; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 645922815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 645922816; 645922819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 645922820; 2820053559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2820053560; 2820053563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2820053564; 3494369115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3494369116; 3494369119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3494369120; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.llvm-%m
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.llvm-%x
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 973936699 { 0x3a0d183b +1.10230195e245 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 973936699 { 0x3a0d183b +1.10230195e245 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 645922819 { 0x26800003 +1.35e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2820053563 { 0xa8169a3b -1474913733 -1.17658174e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3494369119 { 0xd047d75f -800598177 -1.56126010e33 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda817Var : BV:32
2 : Lambda818Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda825Var : BV:32
2 : Lambda826Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2151377258
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3v487.ce64.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3v487.ce64 9d4d07c73cafe3ffadda4a998eed
=input.spec-%var-x-1
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 7603007 ] -> 0, [ 7603008; 7603008 ] -> 4, [ 7603009; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2052; 2055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2056; 7603007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 7603008; 7603011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 7603012; 438370319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 438370320; 438370323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 438370324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 639868110 { 0x26239cce +1.27822279e205 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 639868110 { 0x26239cce +1.27822279e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2055 { 0x807 +1.24497e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7603011 { 0x740343 +1.90634953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 438370323 { 0x1a210013 +1.25781476e181 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda828Var : BV:32
2 : Lambda829Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda836Var : BV:32
2 : Lambda837Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2295244487
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce87.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce87 a2cf34ffb2d97f6a4f8a57afc987344a
=input.spec-%var-x-1
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4247212035 ] -> 0, [ 4247212036; 4247212036 ] -> 2, [ 4247212037; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3094625979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3094625980; 3094625983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3094625984; 3103785023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3103785024; 3103785027 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3103785028; 4247212035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4247212036; 4247212039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4247212040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3103785024 { 0xb9000040 -1191182272 -1.762e243 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3094625980 { 0xb8743ebc -1200341316 -1.90816450e241 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1143910515 { 0x442eb073 +1.36475980e9 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1143910515 { 0x442eb073 +1.36475980e9 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3103785024 { 0xb9000040 -1191182272 -1.762e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3103785027 { 0xb9000043 -1191182269 -1.798e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3094625980 { 0xb8743ebc -1200341316 -1.90816450e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3094625983 { 0xb8743ebf -1200341313 -1.90816485e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4247212039 { 0xfd275007 -47755257 -1.30712974e123 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1137Var : BV:32
2 : Lambda1138Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1145Var : BV:32
2 : Lambda1146Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1483938286
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce111.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce111 81edd33563f849812c16a728931dd37a
=input.spec-%var-x-1
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 942134971 ] -> 0, [ 942134972; 942134972 ] -> 1, [ 942134973; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 942134971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 942134972; 942134975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 942134976; 1084194647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1084194648; 1084194651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1084194652; 3425107883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3425107884; 3425107887 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3425107888; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1084194648 { 0x409f7f58 +1.24607372e2 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3425107884 { 0xcc26ffac -869859412 -1.30467748e25 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1406855773 { 0x53daea5d +1.71027719e40 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1406855773 { 0x53daea5d +1.71027719e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1084194648 { 0x409f7f58 +1.24607372e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1084194651 { 0x409f7f5b +1.24607408e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3425107884 { 0xcc26ffac -869859412 -1.30467748e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3425107887 { 0xcc26ffaf -869859409 -1.30467784e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 942134975 { 0x3827d6bf +1.31124103e241 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1362Var : BV:32
2 : Lambda1363Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1370Var : BV:32
2 : Lambda1371Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1314779067
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce135.num_edges_traversed2
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce135 438524fa939663352745b9b2ea07e
=input.spec-%var-x-1
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1438450687 ] -> 0, [ 1438450688; 1438450691 ] -> 255, [ 1438450692; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 163504131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 163504132; 163504135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 163504136; 901515891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 901515892; 901515895 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 901515896; 1438450687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1438450688; 1438450691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1438450692; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 901515892 { 0x35bc0a74 +1.46906900e236 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 163504132 { 0x9bee004 +1.49121141e148 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4397Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4398Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
15 : eq(10, 14) : BOOL
16 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
17 : eq(10, 16) : BOOL
18 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 8) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 8) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 8) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : bvadd(5, 7, 54) : BV:32
56 : eq(55, 11) : BOOL
57 : eq(55, 14) : BOOL
58 : eq(55, 16) : BOOL
59 : eq(55, 18) : BOOL
60 : ite(59, 13, 20) : BV:8
61 : ite(58, 13, 60) : BV:8
62 : ite(57, 13, 61) : BV:8
63 : ite(56, 13, 62) : BV:8
64 : bvadd(25, 7, 54) : BV:32
65 : eq(64, 11) : BOOL
66 : eq(64, 14) : BOOL
67 : eq(64, 16) : BOOL
68 : eq(64, 18) : BOOL
69 : ite(68, 13, 20) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 13, 70) : BV:8
72 : ite(65, 13, 71) : BV:8
73 : bvadd(35, 7, 54) : BV:32
74 : eq(73, 11) : BOOL
75 : eq(73, 14) : BOOL
76 : eq(73, 16) : BOOL
77 : eq(73, 18) : BOOL
78 : ite(77, 13, 20) : BV:8
79 : ite(76, 13, 78) : BV:8
80 : ite(75, 13, 79) : BV:8
81 : ite(74, 13, 80) : BV:8
82 : bvadd(7, 54) : BV:32
83 : eq(82, 11) : BOOL
84 : eq(82, 14) : BOOL
85 : eq(82, 16) : BOOL
86 : eq(82, 18) : BOOL
87 : ite(86, 13, 20) : BV:8
88 : ite(85, 13, 87) : BV:8
89 : ite(84, 13, 88) : BV:8
90 : ite(83, 13, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : lambda(4, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(3, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 0 { 0x0 } : BOOL
12 : ite(10, 11, 11) : BOOL
13 : ite(5, 6, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : ite(13, 14, 1) : BV:32
16 : unit : UNIT
17 : Lambda4387Var : BV:32
18 : lambda(17, 11) : FUNCTION[BV:32 -> BOOL]
19 : Lambda4388Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 1) : BV:32
24 : bvadd(20, 23, 1) : BV:32
25 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 1) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : bvadd(14, 23, 1) : BV:32
50 : eq(49, 25) : BOOL
51 : eq(49, 28) : BOOL
52 : eq(49, 30) : BOOL
53 : eq(49, 32) : BOOL
54 : ite(53, 27, 34) : BV:8
55 : ite(52, 27, 54) : BV:8
56 : ite(51, 27, 55) : BV:8
57 : ite(50, 27, 56) : BV:8
58 : bvadd(23, 1) : BV:32
59 : eq(58, 25) : BOOL
60 : eq(58, 28) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 32) : BOOL
63 : ite(62, 27, 34) : BV:8
64 : ite(61, 27, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : ite(59, 27, 65) : BV:8
67 : bvconcat(38, 48, 57, 66) : BV:32
68 : bvadd(20, 22, 67) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 30) : BOOL
72 : eq(68, 32) : BOOL
73 : ite(72, 27, 34) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 27, 74) : BV:8
76 : ite(69, 27, 75) : BV:8
77 : bvadd(39, 22, 67) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 32) : BOOL
82 : ite(81, 27, 34) : BV:8
83 : ite(80, 27, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 27, 84) : BV:8
86 : bvadd(14, 22, 67) : BV:32
87 : eq(86, 25) : BOOL
88 : eq(86, 28) : BOOL
89 : eq(86, 30) : BOOL
90 : eq(86, 32) : BOOL
91 : ite(90, 27, 34) : BV:8
92 : ite(89, 27, 91) : BV:8
93 : ite(88, 27, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : bvadd(22, 67) : BV:32
96 : eq(95, 25) : BOOL
97 : eq(95, 28) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : ite(99, 27, 34) : BV:8
101 : ite(98, 27, 100) : BV:8
102 : ite(97, 27, 101) : BV:8
103 : ite(96, 27, 102) : BV:8
104 : bvconcat(76, 85, 94, 103) : BV:32
105 : lambda(19, 104) : FUNCTION[BV:32 -> BV:32]
106 : map(18, 105) : MAP[BV:32 -> BV:32]
107 : sum(15, 16, 106) : SUM[UNIT,MAP[BV:32 -> BV:32]]
108 : sym_const(107) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4403Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4404Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
15 : eq(10, 14) : BOOL
16 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
17 : eq(10, 16) : BOOL
18 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 8) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 8) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 8) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : bvadd(5, 7, 54) : BV:32
56 : eq(55, 11) : BOOL
57 : eq(55, 14) : BOOL
58 : eq(55, 16) : BOOL
59 : eq(55, 18) : BOOL
60 : ite(59, 13, 20) : BV:8
61 : ite(58, 13, 60) : BV:8
62 : ite(57, 13, 61) : BV:8
63 : ite(56, 13, 62) : BV:8
64 : bvadd(25, 7, 54) : BV:32
65 : eq(64, 11) : BOOL
66 : eq(64, 14) : BOOL
67 : eq(64, 16) : BOOL
68 : eq(64, 18) : BOOL
69 : ite(68, 13, 20) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 13, 70) : BV:8
72 : ite(65, 13, 71) : BV:8
73 : bvadd(35, 7, 54) : BV:32
74 : eq(73, 11) : BOOL
75 : eq(73, 14) : BOOL
76 : eq(73, 16) : BOOL
77 : eq(73, 18) : BOOL
78 : ite(77, 13, 20) : BV:8
79 : ite(76, 13, 78) : BV:8
80 : ite(75, 13, 79) : BV:8
81 : ite(74, 13, 80) : BV:8
82 : bvadd(7, 54) : BV:32
83 : eq(82, 11) : BOOL
84 : eq(82, 14) : BOOL
85 : eq(82, 16) : BOOL
86 : eq(82, 18) : BOOL
87 : ite(86, 13, 20) : BV:8
88 : ite(85, 13, 87) : BV:8
89 : ite(84, 13, 88) : BV:8
90 : ite(83, 13, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : lambda(4, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(3, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 163504132 { 0x9bee004 +1.49121141e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 163504135 { 0x9bee007 +1.49121177e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 901515892 { 0x35bc0a74 +1.46906900e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 901515895 { 0x35bc0a77 +1.46906936e236 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1587Var : BV:32
2 : Lambda1588Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1597Var : BV:32
2 : Lambda1598Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3980301472
=counter_example_end
=global nodece 9 num_edges_traversed 2
=global nodece 9 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 10
=global nodece 10 nodece z3v487.ce159.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce159 85fab380f8d360d4c276a7fcde23c8
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce183.num_edges_traversed1
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce183 581cbf307c751aba52f9ebc75aa7575
=input.spec-%var-x-1
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3129957035 ] -> 0, [ 3129957036; 3129957039 ] -> 255, [ 3129957040; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2231376759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2231376760; 2231376763 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2231376764; 3129483643 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129483644; 3129483647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3129483648; 3129957035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129957036; 3129957039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3129957040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1335717614 { 0x4f9d6eee +1.22994780e32 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1335717614 { 0x4f9d6eee +1.22994780e32 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2231376763 { 0x85001b7b -2063590533 -1.83863e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3129483647 { 0xba88217f -1165483649 -1.6352221e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda2046Var : BV:32
2 : Lambda2047Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2054Var : BV:32
2 : Lambda2055Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1928214307
=counter_example_end
=global nodece 11 num_edges_traversed 1
=global nodece 11 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce338.num_edges_traversed1
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce338 10cf4114c958763691b5f238f98616
=input.spec-%var-x-1
1 : Lambda3760Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3761Var : BV:32
18 : Lambda3762Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4097 { 0x1001 +1.48840e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3763Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 2) : BOOL
81 : 242 { 0xf2 -14 } : BV:8
82 : eq(79, 75) : BOOL
83 : 241 { 0xf1 -15 } : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : eq(79, 84) : BOOL
86 : 127 { 0x7f } : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 253 { 0xfd -3 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : bvadd(87, 78) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 75) : BOOL
98 : eq(95, 84) : BOOL
99 : eq(95, 87) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : ite(97, 83, 101) : BV:8
103 : ite(96, 81, 102) : BV:8
104 : bvadd(84, 78) : BV:32
105 : eq(104, 2) : BOOL
106 : eq(104, 75) : BOOL
107 : eq(104, 84) : BOOL
108 : eq(104, 87) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 86, 109) : BV:8
111 : ite(106, 83, 110) : BV:8
112 : ite(105, 81, 111) : BV:8
113 : eq(78, 2) : BOOL
114 : eq(78, 75) : BOOL
115 : eq(78, 84) : BOOL
116 : eq(78, 87) : BOOL
117 : ite(116, 89, 90) : BV:8
118 : ite(115, 86, 117) : BV:8
119 : ite(114, 83, 118) : BV:8
120 : ite(113, 81, 119) : BV:8
121 : bvconcat(94, 103, 112, 120) : BV:32
122 : bvadd(75, 77, 121) : BV:32
123 : eq(122, 2) : BOOL
124 : eq(122, 75) : BOOL
125 : eq(122, 84) : BOOL
126 : eq(122, 87) : BOOL
127 : ite(126, 89, 90) : BV:8
128 : ite(125, 86, 127) : BV:8
129 : ite(124, 83, 128) : BV:8
130 : ite(123, 81, 129) : BV:8
131 : bvadd(87, 77, 121) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 75) : BOOL
134 : eq(131, 84) : BOOL
135 : eq(131, 87) : BOOL
136 : ite(135, 89, 90) : BV:8
137 : ite(134, 86, 136) : BV:8
138 : ite(133, 83, 137) : BV:8
139 : ite(132, 81, 138) : BV:8
140 : bvadd(84, 77, 121) : BV:32
141 : eq(140, 2) : BOOL
142 : eq(140, 75) : BOOL
143 : eq(140, 84) : BOOL
144 : eq(140, 87) : BOOL
145 : ite(144, 89, 90) : BV:8
146 : ite(143, 86, 145) : BV:8
147 : ite(142, 83, 146) : BV:8
148 : ite(141, 81, 147) : BV:8
149 : bvadd(77, 121) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 75) : BOOL
152 : eq(149, 84) : BOOL
153 : eq(149, 87) : BOOL
154 : ite(153, 89, 90) : BV:8
155 : ite(152, 86, 154) : BV:8
156 : ite(151, 83, 155) : BV:8
157 : ite(150, 81, 156) : BV:8
158 : bvconcat(130, 139, 148, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : ite(74, 158, 159) : BV:32
161 : ite(55, 2, 160) : BV:32
162 : lambda(52, 161) : FUNCTION[BV:32 -> BV:32]
163 : map(51, 162) : MAP[BV:32 -> BV:32]
164 : lambda(17, 163) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
165 : map(16, 164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
166 : sym_const(165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3773Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3774Var : BV:32
18 : Lambda3775Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4097 { 0x1001 +1.48840e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3776Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : 242 { 0xf2 -14 } : BV:8
63 : eq(60, 56) : BOOL
64 : 241 { 0xf1 -15 } : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : 127 { 0x7f } : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 253 { 0xfd -3 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : bvadd(68, 59) : BV:32
77 : eq(76, 2) : BOOL
78 : eq(76, 56) : BOOL
79 : eq(76, 65) : BOOL
80 : eq(76, 68) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 67, 81) : BV:8
83 : ite(78, 64, 82) : BV:8
84 : ite(77, 62, 83) : BV:8
85 : bvadd(65, 59) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 65) : BOOL
89 : eq(85, 68) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 67, 90) : BV:8
92 : ite(87, 64, 91) : BV:8
93 : ite(86, 62, 92) : BV:8
94 : eq(59, 2) : BOOL
95 : eq(59, 56) : BOOL
96 : eq(59, 65) : BOOL
97 : eq(59, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 62, 100) : BV:8
102 : bvconcat(75, 84, 93, 101) : BV:32
103 : bvadd(56, 58, 102) : BV:32
104 : eq(103, 2) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 65) : BOOL
107 : eq(103, 68) : BOOL
108 : ite(107, 70, 71) : BV:8
109 : ite(106, 67, 108) : BV:8
110 : ite(105, 64, 109) : BV:8
111 : ite(104, 62, 110) : BV:8
112 : bvadd(68, 58, 102) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 65) : BOOL
116 : eq(112, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : bvadd(65, 58, 102) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 56) : BOOL
124 : eq(121, 65) : BOOL
125 : eq(121, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : ite(122, 62, 128) : BV:8
130 : bvadd(58, 102) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 56) : BOOL
133 : eq(130, 65) : BOOL
134 : eq(130, 68) : BOOL
135 : ite(134, 70, 71) : BV:8
136 : ite(133, 67, 135) : BV:8
137 : ite(132, 64, 136) : BV:8
138 : ite(131, 62, 137) : BV:8
139 : bvconcat(111, 120, 129, 138) : BV:32
140 : ite(55, 2, 139) : BV:32
141 : lambda(52, 140) : FUNCTION[BV:32 -> BV:32]
142 : map(51, 141) : MAP[BV:32 -> BV:32]
143 : lambda(17, 142) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
144 : map(16, 143) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
145 : sym_const(144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 242, [ 1; 1 ] -> 127, [ 2; 2 ] -> 253, [ 3; 3 ] -> 241, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 408417167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 408417168; 408417171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 408417172; 2044707699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2044707700; 2044707703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2044707704; 3493055215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3493055216; 3493055219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3493055220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.llvm-%m
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4283Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 67108865 { 0x4000001 +1.11e137 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4095 { 0xfff +1.48816e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4096 { 0x1000 +1.48828e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 4097 { 0x1001 +1.48840e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4284Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 242 { 0xf2 -14 } : BV:8
52 : eq(49, 45) : BOOL
53 : 241 { 0xf1 -15 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4273Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 67108865 { 0x4000001 +1.11e137 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4095 { 0xfff +1.48816e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 4096 { 0x1000 +1.48828e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 4097 { 0x1001 +1.48840e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4274Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 1) : BOOL
57 : 242 { 0xf2 -14 } : BV:8
58 : eq(55, 51) : BOOL
59 : 241 { 0xf1 -15 } : BV:8
60 : eq(55, 15) : BOOL
61 : 127 { 0x7f } : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : eq(55, 62) : BOOL
64 : 253 { 0xfd -3 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(58, 59, 67) : BV:8
69 : ite(56, 57, 68) : BV:8
70 : bvadd(62, 54) : BV:32
71 : eq(70, 1) : BOOL
72 : eq(70, 51) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 64, 65) : BV:8
76 : ite(73, 61, 75) : BV:8
77 : ite(72, 59, 76) : BV:8
78 : ite(71, 57, 77) : BV:8
79 : bvadd(15, 54) : BV:32
80 : eq(79, 1) : BOOL
81 : eq(79, 51) : BOOL
82 : eq(79, 15) : BOOL
83 : eq(79, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : ite(82, 61, 84) : BV:8
86 : ite(81, 59, 85) : BV:8
87 : ite(80, 57, 86) : BV:8
88 : eq(54, 1) : BOOL
89 : eq(54, 51) : BOOL
90 : eq(54, 15) : BOOL
91 : eq(54, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : ite(90, 61, 92) : BV:8
94 : ite(89, 59, 93) : BV:8
95 : ite(88, 57, 94) : BV:8
96 : bvconcat(69, 78, 87, 95) : BV:32
97 : bvadd(51, 53, 96) : BV:32
98 : eq(97, 1) : BOOL
99 : eq(97, 51) : BOOL
100 : eq(97, 15) : BOOL
101 : eq(97, 62) : BOOL
102 : ite(101, 64, 65) : BV:8
103 : ite(100, 61, 102) : BV:8
104 : ite(99, 59, 103) : BV:8
105 : ite(98, 57, 104) : BV:8
106 : bvadd(62, 53, 96) : BV:32
107 : eq(106, 1) : BOOL
108 : eq(106, 51) : BOOL
109 : eq(106, 15) : BOOL
110 : eq(106, 62) : BOOL
111 : ite(110, 64, 65) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 59, 112) : BV:8
114 : ite(107, 57, 113) : BV:8
115 : bvadd(15, 53, 96) : BV:32
116 : eq(115, 1) : BOOL
117 : eq(115, 51) : BOOL
118 : eq(115, 15) : BOOL
119 : eq(115, 62) : BOOL
120 : ite(119, 64, 65) : BV:8
121 : ite(118, 61, 120) : BV:8
122 : ite(117, 59, 121) : BV:8
123 : ite(116, 57, 122) : BV:8
124 : bvadd(53, 96) : BV:32
125 : eq(124, 1) : BOOL
126 : eq(124, 51) : BOOL
127 : eq(124, 15) : BOOL
128 : eq(124, 62) : BOOL
129 : ite(128, 64, 65) : BV:8
130 : ite(127, 61, 129) : BV:8
131 : ite(126, 59, 130) : BV:8
132 : ite(125, 57, 131) : BV:8
133 : bvconcat(105, 114, 123, 132) : BV:32
134 : ite(50, 1, 133) : BV:32
135 : lambda(47, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(46, 135) : MAP[BV:32 -> BV:32]
137 : sum(16, 17, 136) : SUM[UNIT,MAP[BV:32 -> BV:32]]
138 : sym_const(137) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4289Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 67108865 { 0x4000001 +1.11e137 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4095 { 0xfff +1.48816e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4096 { 0x1000 +1.48828e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 4097 { 0x1001 +1.48840e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4290Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 242 { 0xf2 -14 } : BV:8
52 : eq(49, 45) : BOOL
53 : 241 { 0xf1 -15 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3493055219 { 0xd033caf3 -801912077 -1.40463101e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2044707703 { 0x79dfc377 +1.74815261e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 408417171 { 0x1857f393 +1.68712079e177 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda3695Var : BV:32
2 : Lambda3696Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 67108864 { 0x4000000 +1.0e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4095 { 0xfff +1.48816e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4096 { 0x1000 +1.48828e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 3) : BOOL
54 : 242 { 0xf2 -14 } : BV:8
55 : eq(52, 48) : BOOL
56 : 241 { 0xf1 -15 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(52, 57) : BOOL
59 : 127 { 0x7f } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 253 { 0xfd -3 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(53, 54, 66) : BV:8
68 : bvadd(60, 51) : BV:32
69 : eq(68, 3) : BOOL
70 : eq(68, 48) : BOOL
71 : eq(68, 57) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 56, 74) : BV:8
76 : ite(69, 54, 75) : BV:8
77 : bvadd(57, 51) : BV:32
78 : eq(77, 3) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 57) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 56, 83) : BV:8
85 : ite(78, 54, 84) : BV:8
86 : eq(51, 3) : BOOL
87 : eq(51, 48) : BOOL
88 : eq(51, 57) : BOOL
89 : eq(51, 60) : BOOL
90 : ite(89, 62, 63) : BV:8
91 : ite(88, 59, 90) : BV:8
92 : ite(87, 56, 91) : BV:8
93 : ite(86, 54, 92) : BV:8
94 : bvconcat(67, 76, 85, 93) : BV:32
95 : bvadd(48, 50, 94) : BV:32
96 : eq(95, 3) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 57) : BOOL
99 : eq(95, 60) : BOOL
100 : ite(99, 62, 63) : BV:8
101 : ite(98, 59, 100) : BV:8
102 : ite(97, 56, 101) : BV:8
103 : ite(96, 54, 102) : BV:8
104 : bvadd(60, 50, 94) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 57) : BOOL
108 : eq(104, 60) : BOOL
109 : ite(108, 62, 63) : BV:8
110 : ite(107, 59, 109) : BV:8
111 : ite(106, 56, 110) : BV:8
112 : ite(105, 54, 111) : BV:8
113 : bvadd(57, 50, 94) : BV:32
114 : eq(113, 3) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 56, 119) : BV:8
121 : ite(114, 54, 120) : BV:8
122 : bvadd(50, 94) : BV:32
123 : eq(122, 3) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 57) : BOOL
126 : eq(122, 60) : BOOL
127 : ite(126, 62, 63) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 56, 128) : BV:8
130 : ite(123, 54, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(47, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda3700Var : BV:32
2 : Lambda3701Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4096 { 0x1000 +1.48828e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4097 { 0x1001 +1.48840e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda3709Var : BV:32
2 : Lambda3710Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4096 { 0x1000 +1.48828e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4097 { 0x1001 +1.48840e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda3705Var : BV:32
2 : Lambda3706Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 242 { 0xf2 -14 } : BV:8
14 : eq(11, 7) : BOOL
15 : 241 { 0xf1 -15 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 127 { 0x7f } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 253 { 0xfd -3 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1626471087
=counter_example_end
=global nodece 12 num_edges_traversed 1
=global nodece 12 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 13
=global nodece 13 nodece z3v487.ce339.num_edges_traversed0
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce339 85b1c7e763f5aab67620ab5752dbeb26
=input.spec-%var-x-1
1 : Lambda3814Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3815Var : BV:32
18 : Lambda3816Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3817Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3831Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3832Var : BV:32
18 : Lambda3833Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3834Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 1048579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048580; 1048583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1048584; 33554439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554440; 33554443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 33554444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 33554443 { 0x200000b +1.131e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1048583 { 0x100007 +1.12500083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1802347510
=counter_example_end
=global nodece 13 num_edges_traversed 0
=global nodece 13 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3v487.ce1739.num_edges_traversed1
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce1739 f802ea1a9b89a85845b5b95a308663
=input.spec-%var-x-1
1 : Lambda11574Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11575Var : BV:32
18 : Lambda11576Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11577Var : BV:32
52 : lambda(51, 2) : FUNCTION[BV:32 -> BV:32]
53 : map(50, 52) : MAP[BV:32 -> BV:32]
54 : lambda(17, 53) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
55 : map(16, 54) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
56 : sym_const(55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11587Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11588Var : BV:32
18 : Lambda11589Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11590Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : ite(54, 2, 2) : BV:32
75 : ite(73, 2, 74) : BV:32
76 : ite(54, 2, 75) : BV:32
77 : lambda(51, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(50, 77) : MAP[BV:32 -> BV:32]
79 : lambda(17, 78) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
80 : map(16, 79) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
81 : sym_const(80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 494115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 494116; 494119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 494120; 155483431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 155483432; 155483435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 155483436; 3645973127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3645973128; 3645973131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3645973132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.llvm-%n
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16089Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 129 { 0x81 +1.1537e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16090Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : and(8, 14) : BOOL
45 : ite(44, 37, 37) : BOOL
46 : ite(6, 36, 45) : BOOL
47 : bvule(2, 40) : BOOL
48 : bvule(40, 2) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(23, 40) : BOOL
51 : bvule(40, 23) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(27, 40) : BOOL
54 : bvule(40, 13) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 27, 27) : BV:32
57 : ite(52, 23, 56) : BV:32
58 : ite(49, 2, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : and(19, 59) : BOOL
61 : ite(60, 36, 37) : BOOL
62 : and(46, 61) : BOOL
63 : ite(43, 2, 2) : BV:32
64 : ite(62, 2, 63) : BV:32
65 : ite(43, 2, 64) : BV:32
66 : lambda(40, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(39, 66) : MAP[BV:32 -> BV:32]
68 : sym_const(67) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 127 { 0x7f +1.1513e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16079Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 129 { 0x81 +1.1537e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda16080Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(1, 45) : BOOL
50 : bvule(45, 1) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(15, 45) : BOOL
53 : bvule(45, 15) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(34, 45) : BOOL
56 : bvule(45, 9) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 34, 34) : BV:32
59 : ite(54, 15, 58) : BV:32
60 : ite(51, 1, 59) : BV:32
61 : eq(60, 1) : BOOL
62 : and(27, 61) : BOOL
63 : ite(62, 6, 12) : BOOL
64 : and(14, 63) : BOOL
65 : ite(48, 1, 1) : BV:32
66 : ite(64, 1, 65) : BV:32
67 : ite(48, 1, 66) : BV:32
68 : lambda(45, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(44, 68) : MAP[BV:32 -> BV:32]
70 : sum(16, 17, 69) : SUM[UNIT,MAP[BV:32 -> BV:32]]
71 : sym_const(70) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16095Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 129 { 0x81 +1.1537e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16096Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : and(8, 14) : BOOL
45 : ite(44, 37, 37) : BOOL
46 : ite(6, 36, 45) : BOOL
47 : bvule(2, 40) : BOOL
48 : bvule(40, 2) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(23, 40) : BOOL
51 : bvule(40, 23) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(27, 40) : BOOL
54 : bvule(40, 13) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 27, 27) : BV:32
57 : ite(52, 23, 56) : BV:32
58 : ite(49, 2, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : and(19, 59) : BOOL
61 : ite(60, 36, 37) : BOOL
62 : and(46, 61) : BOOL
63 : ite(43, 2, 2) : BV:32
64 : ite(62, 2, 63) : BV:32
65 : ite(43, 2, 64) : BV:32
66 : lambda(40, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(39, 66) : MAP[BV:32 -> BV:32]
68 : sym_const(67) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 494119 { 0x78a27 +1.5890357e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3645973131 { 0xd951228b -648994165 -1.63386666e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 155483435 { 0x9447d2b +1.53506982e147 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11509Var : BV:32
2 : Lambda11510Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11519Var : BV:32
2 : Lambda11520Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11523Var : BV:32
2 : Lambda11524Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 127 { 0x7f +1.1513e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 128 { 0x80 +1.1525e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 129 { 0x81 +1.1537e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : ite(6, 3, 3) : BV:32
48 : ite(46, 3, 47) : BV:32
49 : ite(6, 3, 48) : BV:32
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3997393353
=counter_example_end
=global nodece 14 num_edges_traversed 1
=global nodece 14 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce1740.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce1740 899b1ad22bb2aa9ed7a804d32456a
=input.spec-%var-x-1
1 : Lambda11626Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11627Var : BV:32
18 : Lambda11628Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda11629Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11641Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11642Var : BV:32
18 : Lambda11643Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda11644Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 251, [ 4; 4 ] -> 246, [ 5; 5 ] -> 127, [ 6; 6 ] -> 99, [ 7; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 615784447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 615784448; 615784451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 615784452; 3875037915 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3875037916; 3875037919 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3875037920; 4101381719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4101381720; 4101381723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4101381724; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16137Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda16138Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : 0 { 0x0 +1.0e129 } : BV:32
10 : bvmul(6, 9) : BV:32
11 : bvadd(8, 10) : BV:32
12 : eq(11, 6) : BOOL
13 : 246 { 0xf6 -10 } : BV:8
14 : 6 { 0x6 +1.71e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 99 { 0x63 } : BV:8
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 127 { 0x7f } : BV:8
20 : 251 { 0xfb -5 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(14, 10) : BV:32
25 : eq(24, 6) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(17, 10) : BV:32
32 : eq(31, 6) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : bvadd(6, 10) : BV:32
39 : eq(38, 6) : BOOL
40 : eq(38, 14) : BOOL
41 : eq(38, 17) : BOOL
42 : ite(41, 19, 20) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 13, 43) : BV:8
45 : bvconcat(23, 30, 37, 44) : BV:32
46 : bvadd(5, 7, 45) : BV:32
47 : eq(46, 6) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : ite(49, 19, 20) : BV:8
51 : ite(48, 16, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 7, 45) : BV:32
55 : eq(54, 6) : BOOL
56 : eq(54, 14) : BOOL
57 : eq(54, 17) : BOOL
58 : ite(57, 19, 20) : BV:8
59 : ite(56, 16, 58) : BV:8
60 : ite(55, 13, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 45) : BV:32
63 : eq(62, 6) : BOOL
64 : eq(62, 14) : BOOL
65 : eq(62, 17) : BOOL
66 : ite(65, 19, 20) : BV:8
67 : ite(64, 16, 66) : BV:8
68 : ite(63, 13, 67) : BV:8
69 : bvadd(7, 45) : BV:32
70 : eq(69, 6) : BOOL
71 : eq(69, 14) : BOOL
72 : eq(69, 17) : BOOL
73 : ite(72, 19, 20) : BV:8
74 : ite(71, 16, 73) : BV:8
75 : ite(70, 13, 74) : BV:8
76 : bvconcat(52, 60, 68, 75) : BV:32
77 : lambda(4, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(3, 77) : MAP[BV:32 -> BV:32]
79 : sym_const(78) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16127Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda16128Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 1) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : bvadd(15, 23, 60) : BV:32
77 : eq(76, 22) : BOOL
78 : eq(76, 29) : BOOL
79 : eq(76, 32) : BOOL
80 : ite(79, 34, 35) : BV:8
81 : ite(78, 31, 80) : BV:8
82 : ite(77, 28, 81) : BV:8
83 : bvadd(23, 60) : BV:32
84 : eq(83, 22) : BOOL
85 : eq(83, 29) : BOOL
86 : eq(83, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 28, 88) : BV:8
90 : bvconcat(67, 75, 82, 89) : BV:32
91 : lambda(20, 90) : FUNCTION[BV:32 -> BV:32]
92 : map(19, 91) : MAP[BV:32 -> BV:32]
93 : sum(16, 17, 92) : SUM[UNIT,MAP[BV:32 -> BV:32]]
94 : sym_const(93) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16143Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda16144Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : 0 { 0x0 +1.0e129 } : BV:32
10 : bvmul(6, 9) : BV:32
11 : bvadd(8, 10) : BV:32
12 : eq(11, 6) : BOOL
13 : 246 { 0xf6 -10 } : BV:8
14 : 6 { 0x6 +1.71e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 99 { 0x63 } : BV:8
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 127 { 0x7f } : BV:8
20 : 251 { 0xfb -5 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(14, 10) : BV:32
25 : eq(24, 6) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(17, 10) : BV:32
32 : eq(31, 6) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : bvadd(6, 10) : BV:32
39 : eq(38, 6) : BOOL
40 : eq(38, 14) : BOOL
41 : eq(38, 17) : BOOL
42 : ite(41, 19, 20) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 13, 43) : BV:8
45 : bvconcat(23, 30, 37, 44) : BV:32
46 : bvadd(5, 7, 45) : BV:32
47 : eq(46, 6) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : ite(49, 19, 20) : BV:8
51 : ite(48, 16, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 7, 45) : BV:32
55 : eq(54, 6) : BOOL
56 : eq(54, 14) : BOOL
57 : eq(54, 17) : BOOL
58 : ite(57, 19, 20) : BV:8
59 : ite(56, 16, 58) : BV:8
60 : ite(55, 13, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 45) : BV:32
63 : eq(62, 6) : BOOL
64 : eq(62, 14) : BOOL
65 : eq(62, 17) : BOOL
66 : ite(65, 19, 20) : BV:8
67 : ite(64, 16, 66) : BV:8
68 : ite(63, 13, 67) : BV:8
69 : bvadd(7, 45) : BV:32
70 : eq(69, 6) : BOOL
71 : eq(69, 14) : BOOL
72 : eq(69, 17) : BOOL
73 : ite(72, 19, 20) : BV:8
74 : ite(71, 16, 73) : BV:8
75 : ite(70, 13, 74) : BV:8
76 : bvconcat(52, 60, 68, 75) : BV:32
77 : lambda(4, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(3, 77) : MAP[BV:32 -> BV:32]
79 : sym_const(78) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 615784451 { 0x24b42003 +1.40722692e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3875037919 { 0xe6f862df -419929377 -1.94051730e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4101381723 { 0xf4761e5b -193585573 -1.92280137e105 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11526Var : BV:32
2 : Lambda11527Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11533Var : BV:32
2 : Lambda11534Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
404778011
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce1779.num_edges_traversed1
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce1779 e63feed32118566f2ea66db39b78546
=input.spec-%var-x-1
1 : Lambda11996Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11997Var : BV:32
18 : Lambda11998Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda11999Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12009Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12010Var : BV:32
18 : Lambda12011Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12012Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16613Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16614Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16603Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16604Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16619Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16620Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11926Var : BV:32
2 : Lambda11927Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11931Var : BV:32
2 : Lambda11932Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11940Var : BV:32
2 : Lambda11941Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11936Var : BV:32
2 : Lambda11937Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2944669951
=counter_example_end
=global nodece 16 num_edges_traversed 1
=global nodece 16 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 17
=global nodece 17 nodece z3v487.ce2985.num_edges_traversed0
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3v487.ce2985 ad3f7be82429a7e461ed0d41822832f
=input.spec-%var-x-1
1 : Lambda25517Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25518Var : BV:32
18 : Lambda25519Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25520Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda25542Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25543Var : BV:32
18 : Lambda25544Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25545Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 3145727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3145728; 3145731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3145732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda25550Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25551Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda25527Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda25528Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda25556Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25557Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3145731 { 0x300003 +1.37500035e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
509320196
=counter_example_end
=global nodece 17 num_edges_traversed 0
=global nodece 17 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce2986.num_edges_traversed0
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce2986 c13fb4ddfc4a60f4a7d763271b14b6
=input.spec-%var-x-1
1 : Lambda25609Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25610Var : BV:32
18 : Lambda25611Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25612Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda25634Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25635Var : BV:32
18 : Lambda25636Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25637Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1539336499 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1539336500; 1539336503 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1539336504; 2201937839 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2201937840; 2201937843 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2201937844; 3399132051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3399132052; 3399132055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3399132056; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1539336500 { 0x5bc06934 +1.50321054e56 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2201937840 { 0x833ee7b0 -2093029456 -1.49144554e135 } : BV:32
=input.dst.llvm-%n
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3399132052 { 0xca9aa394 -895835244 -1.20811700e22 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda25642Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25643Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1024 { 0x400 +1.12207e129 } : BV:32
2 : unit : UNIT
3 : Lambda25619Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda25620Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda25648Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25649Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2201937840 { 0x833ee7b0 -2093029456 -1.49144554e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2201937843 { 0x833ee7b3 -2093029453 -1.49144589e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3399132052 { 0xca9aa394 -895835244 -1.20811700e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3399132055 { 0xca9aa397 -895835241 -1.20811736e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1539336500 { 0x5bc06934 +1.50321054e56 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1539336503 { 0x5bc06937 +1.50321090e56 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
559337982
=counter_example_end
=global nodece 18 num_edges_traversed 0
=global nodece 18 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 19
=global nodece 19 nodece z3v487.ce3072.num_edges_traversed4
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3v487.ce3072 4f817a7e7a44b7dfb15b760e59c6d3
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda25780Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25781Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : bvadd(8, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 25, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(20, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(8, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : ite(15, 2, 1) : BV:32
17 : unit : UNIT
18 : Lambda25770Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25771Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 2) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : bvadd(2, 24, 25) : BV:32
42 : eq(41, 27) : BOOL
43 : eq(41, 30) : BOOL
44 : ite(43, 29, 32) : BV:8
45 : ite(42, 29, 44) : BV:8
46 : bvadd(24, 25) : BV:32
47 : eq(46, 27) : BOOL
48 : eq(46, 30) : BOOL
49 : ite(48, 29, 32) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : bvconcat(34, 40, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 27) : BOOL
54 : eq(52, 30) : BOOL
55 : ite(54, 29, 32) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : bvadd(35, 23, 51) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : ite(59, 29, 32) : BV:8
61 : ite(58, 29, 60) : BV:8
62 : bvadd(2, 23, 51) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : ite(64, 29, 32) : BV:8
66 : ite(63, 29, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : ite(69, 29, 32) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : sum(16, 17, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda25786Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25787Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : bvadd(8, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 25, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(20, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(8, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 19 num_edges_traversed 4
=global nodece 19 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 20
=global nodece 20 nodece z3v487.ce3107.num_edges_traversed6
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3v487.ce3107 1077cf51f91951aae845e2ad666ce857
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda25858Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25859Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : bvadd(8, 9, 10) : BV:32
21 : eq(20, 12) : BOOL
22 : eq(20, 15) : BOOL
23 : ite(22, 14, 17) : BV:8
24 : ite(21, 14, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 24, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(8, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(25, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda25848Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda25849Var : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 21) : BV:32
25 : bvmul(23, 2) : BV:32
26 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
27 : bvadd(22, 25, 26) : BV:32
28 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
29 : eq(27, 28) : BOOL
30 : 64 { 0x40 } : BV:8
31 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
32 : eq(27, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : ite(32, 30, 33) : BV:8
35 : ite(29, 30, 34) : BV:8
36 : bvadd(2, 25, 26) : BV:32
37 : eq(36, 28) : BOOL
38 : eq(36, 31) : BOOL
39 : ite(38, 30, 33) : BV:8
40 : ite(37, 30, 39) : BV:8
41 : bvadd(16, 25, 26) : BV:32
42 : eq(41, 28) : BOOL
43 : eq(41, 31) : BOOL
44 : ite(43, 30, 33) : BV:8
45 : ite(42, 30, 44) : BV:8
46 : bvadd(25, 26) : BV:32
47 : eq(46, 28) : BOOL
48 : eq(46, 31) : BOOL
49 : ite(48, 30, 33) : BV:8
50 : ite(47, 30, 49) : BV:8
51 : bvconcat(35, 40, 45, 50) : BV:32
52 : bvadd(22, 24, 51) : BV:32
53 : eq(52, 28) : BOOL
54 : eq(52, 31) : BOOL
55 : ite(54, 30, 33) : BV:8
56 : ite(53, 30, 55) : BV:8
57 : bvadd(2, 24, 51) : BV:32
58 : eq(57, 28) : BOOL
59 : eq(57, 31) : BOOL
60 : ite(59, 30, 33) : BV:8
61 : ite(58, 30, 60) : BV:8
62 : bvadd(16, 24, 51) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : ite(64, 30, 33) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : bvadd(24, 51) : BV:32
68 : eq(67, 28) : BOOL
69 : eq(67, 31) : BOOL
70 : ite(69, 30, 33) : BV:8
71 : ite(68, 30, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(21, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(20, 73) : MAP[BV:32 -> BV:32]
75 : sum(17, 18, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda25864Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25865Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : bvadd(8, 9, 10) : BV:32
21 : eq(20, 12) : BOOL
22 : eq(20, 15) : BOOL
23 : ite(22, 14, 17) : BV:8
24 : ite(21, 14, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 24, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(8, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(25, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 20 num_edges_traversed 6
=global nodece 20 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 21
=global nodece 21 nodece z3v487.ce3142.num_edges_traversed7
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3v487.ce3142 6e7e9e2b76cf23e18179f1881f3ed5f
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 21 num_edges_traversed 7
=global nodece 21 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 22
=global nodece 22 nodece z3.ce3062.num_edges_traversed3
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3.ce3062 1c6d944c124231743e58f1a10d0cf
=input.spec-%var-x-1
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 177223351 ] -> 0, [ 177223352; 177223352 ] -> 32, [ 177223353; 3269441524 ] -> 0, [ 3269441525; 3269441525 ] -> 1, [ 3269441526; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 177223351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 177223352; 177223355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 177223356; 1249769175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1249769176; 1249769179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1249769180; 3269441523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3269441524; 3269441527 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3269441528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.llvm-%x
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3269441527 { 0xc2dfb7f7 -1025525769 -1.74780166e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 177223355 { 0xa9036bb +1.12667024e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1249769179 { 0x4a7df6db +1.98409593e21 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda439Var : BV:32
2 : Lambda440Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda449Var : BV:32
2 : Lambda450Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3955501958
=counter_example_end
=global nodece 22 num_edges_traversed 3
=global nodece 22 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 23
=global nodece 23 nodece z3v487.ce3052.num_edges_traversed3
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3v487.ce3052 8c7da4226e3f0a42b35b717a3184252
=input.spec-%var-x-1
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 79 ] -> 0, [ 80; 80 ] -> 1, [ 81; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 79 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 80; 83 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 84; 16419 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16420; 16423 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 16424; 105279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 105280; 105283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 105284; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 83 { 0x53 +1.989e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 105283 { 0x19b43 +1.1255071e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 16423 { 0x4027 +1.195777e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda655Var : BV:32
2 : Lambda656Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda665Var : BV:32
2 : Lambda666Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3185644373
=counter_example_end
=global nodece 23 num_edges_traversed 3
=global nodece 23 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece z3.ce3042.num_edges_traversed3
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce3042 36e4282362eb9913ce8adbcbe7e8bb2
=input.spec-%var-x-1
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 1438450687 ] -> 0, [ 1438450688; 1438450691 ] -> 255, [ 1438450692; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 163504131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 163504132; 163504135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 163504136; 901515891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 901515892; 901515895 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 901515896; 1438450687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1438450688; 1438450691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1438450692; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 901515892 { 0x35bc0a74 +1.46906900e236 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 163504132 { 0x9bee004 +1.49121141e148 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 163504132 { 0x9bee004 +1.49121141e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 163504135 { 0x9bee007 +1.49121177e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 901515892 { 0x35bc0a74 +1.46906900e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 901515895 { 0x35bc0a77 +1.46906936e236 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1587Var : BV:32
2 : Lambda1588Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1597Var : BV:32
2 : Lambda1598Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3980301472
=counter_example_end
=global nodece 24 num_edges_traversed 3
=global nodece 24 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce3020.num_edges_traversed2
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce3020 eaae5f59fe3fe58411487c56dbc03ba9
=input.spec-%var-x-1
1 : Lambda11626Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11627Var : BV:32
18 : Lambda11628Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda11629Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11641Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11642Var : BV:32
18 : Lambda11643Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda11644Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 251, [ 4; 4 ] -> 246, [ 5; 5 ] -> 127, [ 6; 6 ] -> 99, [ 7; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 615784447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 615784448; 615784451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 615784452; 3875037915 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3875037916; 3875037919 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3875037920; 4101381719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4101381720; 4101381723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4101381724; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 903415781 { 0x35d907e5 +1.69555342e236 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1778719364 { 0x6a051a84 +1.3987169e85 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 615784451 { 0x24b42003 +1.40722692e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3875037919 { 0xe6f862df -419929377 -1.94051730e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4101381723 { 0xf4761e5b -193585573 -1.92280137e105 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11526Var : BV:32
2 : Lambda11527Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11533Var : BV:32
2 : Lambda11534Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2153199491
=counter_example_end
=global nodece 25 num_edges_traversed 2
=global nodece 25 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 26
=global nodece 26 nodece z3v487.ce3006.num_edges_traversed1
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3v487.ce3006 83cdb6b0e55261e5a229bbc59de439de
=input.spec-%var-x-1
1 : Lambda25517Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25518Var : BV:32
18 : Lambda25519Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25520Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda25542Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25543Var : BV:32
18 : Lambda25544Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25545Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 3145727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3145728; 3145731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3145732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1119045627 { 0x42b347fb +1.40063416e6 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1512523345 { 0x5a274651 +1.30683338e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3145731 { 0x300003 +1.37500035e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1103294412
=counter_example_end
=global nodece 26 num_edges_traversed 1
=global nodece 26 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 27
=global nodece 27 nodece z3v487.ce3273.num_edges_traversed1
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3v487.ce3273 b56789aaf41ec77c98852dcd7cdc16bb
=input.spec-%var-x-1
1 : Lambda28676Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28677Var : BV:32
18 : Lambda28678Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28679Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda28701Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28702Var : BV:32
18 : Lambda28703Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28704Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 1795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1796; 1799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1800; 1048831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048832; 1048835 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1048836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1796 { 0x704 +1.21409e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1048832 { 0x100100 +1.12503051e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1203433657 { 0x47baf0b9 +1.46047127e16 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda28709Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda28710Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda28686Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda28687Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda28715Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda28716Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 806925716 { 0x3018b594 +1.19304132e225 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1048832 { 0x100100 +1.12503051e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1048835 { 0x100103 +1.12503087e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1796 { 0x704 +1.21409e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1799 { 0x707 +1.21445e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1950562733
=counter_example_end
=global nodece 27 num_edges_traversed 1
=global nodece 27 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 28
=global nodece 28 nodece z3v487.ce3319.num_edges_traversed1
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce3319 a389b46c784bcc3bc56b73a81c3942
=input.spec-%var-x-1
1 : Lambda30240Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda30241Var : BV:32
18 : Lambda30242Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 7 { 0x7 +1.83e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 8 { 0x8 +1.95e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 9 { 0x9 +1.107e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda30243Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : 4 { 0x4 +1.47e129 } : BV:32
68 : bvmul(67, 61) : BV:32
69 : bvmul(67, 17) : BV:32
70 : bvadd(23, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : 1 { 0x1 } : BV:8
73 : 14 { 0xe +1.166e129 } : BV:32
74 : eq(70, 73) : BOOL
75 : 0 { 0x0 } : BV:8
76 : ite(74, 72, 75) : BV:8
77 : ite(71, 72, 76) : BV:8
78 : bvadd(20, 69) : BV:32
79 : eq(78, 2) : BOOL
80 : eq(78, 73) : BOOL
81 : ite(80, 72, 75) : BV:8
82 : ite(79, 72, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 69) : BV:32
85 : eq(84, 2) : BOOL
86 : eq(84, 73) : BOOL
87 : ite(86, 72, 75) : BV:8
88 : ite(85, 72, 87) : BV:8
89 : eq(69, 2) : BOOL
90 : eq(69, 73) : BOOL
91 : ite(90, 72, 75) : BV:8
92 : ite(89, 72, 91) : BV:8
93 : bvconcat(77, 82, 88, 92) : BV:32
94 : bvadd(23, 68, 93) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 73) : BOOL
97 : ite(96, 72, 75) : BV:8
98 : ite(95, 72, 97) : BV:8
99 : bvadd(20, 68, 93) : BV:32
100 : eq(99, 2) : BOOL
101 : eq(99, 73) : BOOL
102 : ite(101, 72, 75) : BV:8
103 : ite(100, 72, 102) : BV:8
104 : bvadd(83, 68, 93) : BV:32
105 : eq(104, 2) : BOOL
106 : eq(104, 73) : BOOL
107 : ite(106, 72, 75) : BV:8
108 : ite(105, 72, 107) : BV:8
109 : bvadd(68, 93) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 73) : BOOL
112 : ite(111, 72, 75) : BV:8
113 : ite(110, 72, 112) : BV:8
114 : bvconcat(98, 103, 108, 113) : BV:32
115 : ite(66, 2, 114) : BV:32
116 : ite(64, 2, 115) : BV:32
117 : lambda(61, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(60, 117) : MAP[BV:32 -> BV:32]
119 : lambda(17, 118) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
120 : map(16, 119) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
121 : sym_const(120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda30253Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda30254Var : BV:32
18 : Lambda30255Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 7 { 0x7 +1.83e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 8 { 0x8 +1.95e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 9 { 0x9 +1.107e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda30256Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : or(84, 85) : BOOL
87 : ite(86, 7, 13) : BOOL
88 : and(70, 87) : BOOL
89 : 4 { 0x4 +1.47e129 } : BV:32
90 : bvmul(89, 61) : BV:32
91 : bvmul(89, 17) : BV:32
92 : bvadd(23, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : 1 { 0x1 } : BV:8
95 : 14 { 0xe +1.166e129 } : BV:32
96 : eq(92, 95) : BOOL
97 : 0 { 0x0 } : BV:8
98 : ite(96, 94, 97) : BV:8
99 : ite(93, 94, 98) : BV:8
100 : bvadd(20, 91) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 95) : BOOL
103 : ite(102, 94, 97) : BV:8
104 : ite(101, 94, 103) : BV:8
105 : 1 { 0x1 +1.11e129 } : BV:32
106 : bvadd(105, 91) : BV:32
107 : eq(106, 2) : BOOL
108 : eq(106, 95) : BOOL
109 : ite(108, 94, 97) : BV:8
110 : ite(107, 94, 109) : BV:8
111 : eq(91, 2) : BOOL
112 : eq(91, 95) : BOOL
113 : ite(112, 94, 97) : BV:8
114 : ite(111, 94, 113) : BV:8
115 : bvconcat(99, 104, 110, 114) : BV:32
116 : bvadd(23, 90, 115) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 95) : BOOL
119 : ite(118, 94, 97) : BV:8
120 : ite(117, 94, 119) : BV:8
121 : bvadd(20, 90, 115) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 95) : BOOL
124 : ite(123, 94, 97) : BV:8
125 : ite(122, 94, 124) : BV:8
126 : bvadd(105, 90, 115) : BV:32
127 : eq(126, 2) : BOOL
128 : eq(126, 95) : BOOL
129 : ite(128, 94, 97) : BV:8
130 : ite(127, 94, 129) : BV:8
131 : bvadd(90, 115) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 95) : BOOL
134 : ite(133, 94, 97) : BV:8
135 : ite(132, 94, 134) : BV:8
136 : bvconcat(120, 125, 130, 135) : BV:32
137 : ite(66, 2, 136) : BV:32
138 : ite(64, 2, 137) : BV:32
139 : ite(88, 136, 138) : BV:32
140 : ite(66, 2, 139) : BV:32
141 : ite(64, 2, 140) : BV:32
142 : lambda(61, 141) : FUNCTION[BV:32 -> BV:32]
143 : map(60, 142) : MAP[BV:32 -> BV:32]
144 : lambda(17, 143) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
145 : map(16, 144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
146 : sym_const(145) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 1, [ 1; 13 ] -> 0, [ 14; 14 ] -> 1, [ 15; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 2957049919 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2957049920; 2957049923 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2957049924; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2957049920 { 0xb0410040 -1337917376 -1.50782012e225 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda30351Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 33554432 { 0x2000000 +1.0e133 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 33554433 { 0x2000001 +1.11e133 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 9 { 0x9 +1.107e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda30352Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : 4 { 0x4 +1.47e129 } : BV:32
79 : bvmul(78, 50) : BV:32
80 : bvmul(78, 3) : BV:32
81 : bvadd(3, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : 1 { 0x1 } : BV:8
84 : 14 { 0xe +1.166e129 } : BV:32
85 : eq(81, 84) : BOOL
86 : 0 { 0x0 } : BV:8
87 : ite(85, 83, 86) : BV:8
88 : ite(82, 83, 87) : BV:8
89 : bvadd(5, 80) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 84) : BOOL
92 : ite(91, 83, 86) : BV:8
93 : ite(90, 83, 92) : BV:8
94 : 1 { 0x1 +1.11e129 } : BV:32
95 : bvadd(94, 80) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 84) : BOOL
98 : ite(97, 83, 86) : BV:8
99 : ite(96, 83, 98) : BV:8
100 : eq(80, 2) : BOOL
101 : eq(80, 84) : BOOL
102 : ite(101, 83, 86) : BV:8
103 : ite(100, 83, 102) : BV:8
104 : bvconcat(88, 93, 99, 103) : BV:32
105 : bvadd(3, 79, 104) : BV:32
106 : eq(105, 2) : BOOL
107 : eq(105, 84) : BOOL
108 : ite(107, 83, 86) : BV:8
109 : ite(106, 83, 108) : BV:8
110 : bvadd(5, 79, 104) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 84) : BOOL
113 : ite(112, 83, 86) : BV:8
114 : ite(111, 83, 113) : BV:8
115 : bvadd(94, 79, 104) : BV:32
116 : eq(115, 2) : BOOL
117 : eq(115, 84) : BOOL
118 : ite(117, 83, 86) : BV:8
119 : ite(116, 83, 118) : BV:8
120 : bvadd(79, 104) : BV:32
121 : eq(120, 2) : BOOL
122 : eq(120, 84) : BOOL
123 : ite(122, 83, 86) : BV:8
124 : ite(121, 83, 123) : BV:8
125 : bvconcat(109, 114, 119, 124) : BV:32
126 : ite(55, 2, 125) : BV:32
127 : ite(53, 2, 126) : BV:32
128 : ite(77, 125, 127) : BV:32
129 : ite(55, 2, 128) : BV:32
130 : ite(53, 2, 129) : BV:32
131 : lambda(50, 130) : FUNCTION[BV:32 -> BV:32]
132 : map(49, 131) : MAP[BV:32 -> BV:32]
133 : sym_const(132) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda30341Var : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 33554433 { 0x2000001 +1.11e133 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : bvule(1, 19) : BOOL
36 : 7 { 0x7 +1.83e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 8 { 0x8 +1.95e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 9 { 0x9 +1.107e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 1) : BOOL
53 : and(52, 50) : BOOL
54 : or(51, 53) : BOOL
55 : ite(54, 7, 13) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda30342Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : bvule(1, 57) : BOOL
64 : bvule(57, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(39, 57) : BOOL
67 : bvule(57, 39) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(43, 57) : BOOL
70 : bvule(57, 10) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 43, 43) : BV:32
73 : ite(68, 39, 72) : BV:32
74 : ite(65, 1, 73) : BV:32
75 : eq(74, 1) : BOOL
76 : and(34, 75) : BOOL
77 : and(52, 75) : BOOL
78 : or(76, 77) : BOOL
79 : ite(78, 7, 13) : BOOL
80 : and(15, 79) : BOOL
81 : 4 { 0x4 +1.47e129 } : BV:32
82 : bvmul(81, 57) : BV:32
83 : bvmul(81, 2) : BV:32
84 : bvadd(2, 83) : BV:32
85 : eq(84, 1) : BOOL
86 : 1 { 0x1 } : BV:8
87 : 14 { 0xe +1.166e129 } : BV:32
88 : eq(84, 87) : BOOL
89 : 0 { 0x0 } : BV:8
90 : ite(88, 86, 89) : BV:8
91 : ite(85, 86, 90) : BV:8
92 : bvadd(20, 83) : BV:32
93 : eq(92, 1) : BOOL
94 : eq(92, 87) : BOOL
95 : ite(94, 86, 89) : BV:8
96 : ite(93, 86, 95) : BV:8
97 : bvadd(16, 83) : BV:32
98 : eq(97, 1) : BOOL
99 : eq(97, 87) : BOOL
100 : ite(99, 86, 89) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : eq(83, 1) : BOOL
103 : eq(83, 87) : BOOL
104 : ite(103, 86, 89) : BV:8
105 : ite(102, 86, 104) : BV:8
106 : bvconcat(91, 96, 101, 105) : BV:32
107 : bvadd(2, 82, 106) : BV:32
108 : eq(107, 1) : BOOL
109 : eq(107, 87) : BOOL
110 : ite(109, 86, 89) : BV:8
111 : ite(108, 86, 110) : BV:8
112 : bvadd(20, 82, 106) : BV:32
113 : eq(112, 1) : BOOL
114 : eq(112, 87) : BOOL
115 : ite(114, 86, 89) : BV:8
116 : ite(113, 86, 115) : BV:8
117 : bvadd(16, 82, 106) : BV:32
118 : eq(117, 1) : BOOL
119 : eq(117, 87) : BOOL
120 : ite(119, 86, 89) : BV:8
121 : ite(118, 86, 120) : BV:8
122 : bvadd(82, 106) : BV:32
123 : eq(122, 1) : BOOL
124 : eq(122, 87) : BOOL
125 : ite(124, 86, 89) : BV:8
126 : ite(123, 86, 125) : BV:8
127 : bvconcat(111, 116, 121, 126) : BV:32
128 : ite(62, 1, 127) : BV:32
129 : ite(60, 1, 128) : BV:32
130 : ite(80, 127, 129) : BV:32
131 : ite(62, 1, 130) : BV:32
132 : ite(60, 1, 131) : BV:32
133 : lambda(57, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(56, 133) : MAP[BV:32 -> BV:32]
135 : sum(17, 18, 134) : SUM[UNIT,MAP[BV:32 -> BV:32]]
136 : sym_const(135) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda30357Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 33554432 { 0x2000000 +1.0e133 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 33554433 { 0x2000001 +1.11e133 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 9 { 0x9 +1.107e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda30358Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : 4 { 0x4 +1.47e129 } : BV:32
79 : bvmul(78, 50) : BV:32
80 : bvmul(78, 3) : BV:32
81 : bvadd(3, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : 1 { 0x1 } : BV:8
84 : 14 { 0xe +1.166e129 } : BV:32
85 : eq(81, 84) : BOOL
86 : 0 { 0x0 } : BV:8
87 : ite(85, 83, 86) : BV:8
88 : ite(82, 83, 87) : BV:8
89 : bvadd(5, 80) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 84) : BOOL
92 : ite(91, 83, 86) : BV:8
93 : ite(90, 83, 92) : BV:8
94 : 1 { 0x1 +1.11e129 } : BV:32
95 : bvadd(94, 80) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 84) : BOOL
98 : ite(97, 83, 86) : BV:8
99 : ite(96, 83, 98) : BV:8
100 : eq(80, 2) : BOOL
101 : eq(80, 84) : BOOL
102 : ite(101, 83, 86) : BV:8
103 : ite(100, 83, 102) : BV:8
104 : bvconcat(88, 93, 99, 103) : BV:32
105 : bvadd(3, 79, 104) : BV:32
106 : eq(105, 2) : BOOL
107 : eq(105, 84) : BOOL
108 : ite(107, 83, 86) : BV:8
109 : ite(106, 83, 108) : BV:8
110 : bvadd(5, 79, 104) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 84) : BOOL
113 : ite(112, 83, 86) : BV:8
114 : ite(111, 83, 113) : BV:8
115 : bvadd(94, 79, 104) : BV:32
116 : eq(115, 2) : BOOL
117 : eq(115, 84) : BOOL
118 : ite(117, 83, 86) : BV:8
119 : ite(116, 83, 118) : BV:8
120 : bvadd(79, 104) : BV:32
121 : eq(120, 2) : BOOL
122 : eq(120, 84) : BOOL
123 : ite(122, 83, 86) : BV:8
124 : ite(121, 83, 123) : BV:8
125 : bvconcat(109, 114, 119, 124) : BV:32
126 : ite(55, 2, 125) : BV:32
127 : ite(53, 2, 126) : BV:32
128 : ite(77, 125, 127) : BV:32
129 : ite(55, 2, 128) : BV:32
130 : ite(53, 2, 129) : BV:32
131 : lambda(50, 130) : FUNCTION[BV:32 -> BV:32]
132 : map(49, 131) : MAP[BV:32 -> BV:32]
133 : sym_const(132) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2957049920 { 0xb0410040 -1337917376 -1.50782012e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2957049923 { 0xb0410043 -1337917373 -1.50782048e225 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda30175Var : BV:32
2 : Lambda30176Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 2) : BV:32
12 : bvmul(10, 1) : BV:32
13 : bvadd(3, 12) : BV:32
14 : eq(13, 5) : BOOL
15 : 1 { 0x1 } : BV:8
16 : 14 { 0xe +1.166e129 } : BV:32
17 : eq(13, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 15, 18) : BV:8
20 : ite(14, 15, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 12) : BV:32
23 : eq(22, 5) : BOOL
24 : eq(22, 16) : BOOL
25 : ite(24, 15, 18) : BV:8
26 : ite(23, 15, 25) : BV:8
27 : 1 { 0x1 +1.11e129 } : BV:32
28 : bvadd(27, 12) : BV:32
29 : eq(28, 5) : BOOL
30 : eq(28, 16) : BOOL
31 : ite(30, 15, 18) : BV:8
32 : ite(29, 15, 31) : BV:8
33 : eq(12, 5) : BOOL
34 : eq(12, 16) : BOOL
35 : ite(34, 15, 18) : BV:8
36 : ite(33, 15, 35) : BV:8
37 : bvconcat(20, 26, 32, 36) : BV:32
38 : bvadd(3, 11, 37) : BV:32
39 : eq(38, 5) : BOOL
40 : eq(38, 16) : BOOL
41 : ite(40, 15, 18) : BV:8
42 : ite(39, 15, 41) : BV:8
43 : bvadd(21, 11, 37) : BV:32
44 : eq(43, 5) : BOOL
45 : eq(43, 16) : BOOL
46 : ite(45, 15, 18) : BV:8
47 : ite(44, 15, 46) : BV:8
48 : bvadd(27, 11, 37) : BV:32
49 : eq(48, 5) : BOOL
50 : eq(48, 16) : BOOL
51 : ite(50, 15, 18) : BV:8
52 : ite(49, 15, 51) : BV:8
53 : bvadd(11, 37) : BV:32
54 : eq(53, 5) : BOOL
55 : eq(53, 16) : BOOL
56 : ite(55, 15, 18) : BV:8
57 : ite(54, 15, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : ite(9, 5, 58) : BV:32
60 : ite(7, 5, 59) : BV:32
61 : lambda(1, 2, 60) : FUNCTION[BV:32,BV:32 -> BV:32]
62 : sym_const(61) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda30177Var : BV:32
2 : Lambda30178Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33554432 { 0x2000000 +1.0e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 33554433 { 0x2000001 +1.11e133 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 7 { 0x7 +1.83e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 8 { 0x8 +1.95e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 9 { 0x9 +1.107e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda30187Var : BV:32
2 : Lambda30188Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33554432 { 0x2000000 +1.0e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 33554433 { 0x2000001 +1.11e133 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 7 { 0x7 +1.83e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 8 { 0x8 +1.95e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 9 { 0x9 +1.107e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda30191Var : BV:32
2 : Lambda30192Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 33554432 { 0x2000000 +1.0e133 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : bvule(5, 2) : BOOL
39 : 7 { 0x7 +1.83e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 8 { 0x8 +1.95e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 9 { 0x9 +1.107e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 5) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 14, 20) : BOOL
59 : and(22, 58) : BOOL
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 2) : BV:32
62 : bvmul(60, 1) : BV:32
63 : bvadd(3, 62) : BV:32
64 : eq(63, 5) : BOOL
65 : 1 { 0x1 } : BV:8
66 : 14 { 0xe +1.166e129 } : BV:32
67 : eq(63, 66) : BOOL
68 : 0 { 0x0 } : BV:8
69 : ite(67, 65, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : bvadd(23, 62) : BV:32
72 : eq(71, 5) : BOOL
73 : eq(71, 66) : BOOL
74 : ite(73, 65, 68) : BV:8
75 : ite(72, 65, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 62) : BV:32
78 : eq(77, 5) : BOOL
79 : eq(77, 66) : BOOL
80 : ite(79, 65, 68) : BV:8
81 : ite(78, 65, 80) : BV:8
82 : eq(62, 5) : BOOL
83 : eq(62, 66) : BOOL
84 : ite(83, 65, 68) : BV:8
85 : ite(82, 65, 84) : BV:8
86 : bvconcat(70, 75, 81, 85) : BV:32
87 : bvadd(3, 61, 86) : BV:32
88 : eq(87, 5) : BOOL
89 : eq(87, 66) : BOOL
90 : ite(89, 65, 68) : BV:8
91 : ite(88, 65, 90) : BV:8
92 : bvadd(23, 61, 86) : BV:32
93 : eq(92, 5) : BOOL
94 : eq(92, 66) : BOOL
95 : ite(94, 65, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : bvadd(76, 61, 86) : BV:32
98 : eq(97, 5) : BOOL
99 : eq(97, 66) : BOOL
100 : ite(99, 65, 68) : BV:8
101 : ite(98, 65, 100) : BV:8
102 : bvadd(61, 86) : BV:32
103 : eq(102, 5) : BOOL
104 : eq(102, 66) : BOOL
105 : ite(104, 65, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : bvconcat(91, 96, 101, 106) : BV:32
108 : ite(9, 5, 107) : BV:32
109 : ite(7, 5, 108) : BV:32
110 : ite(59, 107, 109) : BV:32
111 : ite(9, 5, 110) : BV:32
112 : ite(7, 5, 111) : BV:32
113 : lambda(1, 2, 112) : FUNCTION[BV:32,BV:32 -> BV:32]
114 : sym_const(113) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3272985466
=counter_example_end
=global nodece 28 num_edges_traversed 1
=global nodece 28 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 29
=global nodece 29 nodece z3v487.ce3369.num_edges_traversed1
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3v487.ce3369 8cc84dfb9ede76c156bffd20dde785
=input.spec-%var-x-1
1 : Lambda32438Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32439Var : BV:32
18 : Lambda32440Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda32441Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda32463Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32464Var : BV:32
18 : Lambda32465Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda32466Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 1048579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048580; 1048583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1048584; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1559192439 { 0x5cef6377 +1.87022292e58 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda32471Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda32472Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : Lambda32448Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda32449Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda32477Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda32478Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1307693327 { 0x4df1d10f +1.88919246e28 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1048583 { 0x100007 +1.12500083e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1416653247
=counter_example_end
=global nodece 29 num_edges_traversed 1
=global nodece 29 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 30
=global nodece 30 nodece z3v487.ce3415.num_edges_traversed1
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3v487.ce3415 9f42e6fa7aae2ce30f89b58dad120
=input.spec-%var-x-1
1 : Lambda33987Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33988Var : BV:32
18 : Lambda33989Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33990Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda34004Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34005Var : BV:32
18 : Lambda34006Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda34007Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 12; 511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 512; 515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 516; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda34048Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34049Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda34038Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda34039Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda34054Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34055Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 515 { 0x203 +1.6139e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2373384602
=counter_example_end
=global nodece 30 num_edges_traversed 1
=global nodece 30 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 31
=global nodece 31 nodece z3v487.ce3447.num_edges_traversed3
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3v487.ce3447 34f160856bfc37e5d19323f128ca59de
=input.spec-%var-x-1
1 : Lambda33987Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33988Var : BV:32
18 : Lambda33989Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33990Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda34004Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34005Var : BV:32
18 : Lambda34006Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda34007Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 12; 511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 512; 515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 516; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1266152425 { 0x4b77f3e9 +1.93713104e23 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda34126Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34127Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda34116Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda34117Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda34132Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34133Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 756879266 { 0x2d1d0fa2 +1.22703957e219 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 515 { 0x203 +1.6139e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2912152482
=counter_example_end
=global nodece 31 num_edges_traversed 3
=global nodece 31 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 32
=global nodece 32 nodece z3v487.ce3482.num_edges_traversed4
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(epsilon)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3v487.ce3482 7dcaed7117cdf5bb32f3f7bda619c9a
=input.spec-%var-x-1
1 : Lambda33987Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33988Var : BV:32
18 : Lambda33989Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33990Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda34004Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34005Var : BV:32
18 : Lambda34006Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda34007Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 12; 511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 512; 515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 516; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1266152426 { 0x4b77f3ea +1.93713116e23 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 756879267 { 0x2d1d0fa3 +1.22703969e219 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 515 { 0x203 +1.6139e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2912152482
=counter_example_end
=global nodece 32 num_edges_traversed 4
=global nodece 32 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 33
=global nodece 33 nodece z3v487.ce3486.num_edges_traversed1
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3v487.ce3486 6ad9254fbd5fc0d67af8bfdb9d499bc
=input.spec-%var-x-1
1 : Lambda36183Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4202495 { 0x401fff +1.50097644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4202496 { 0x402000 +1.50097656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36184Var : BV:32
18 : Lambda36185Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36186Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda36208Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4202495 { 0x401fff +1.50097644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4202496 { 0x402000 +1.50097656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36209Var : BV:32
18 : Lambda36210Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36211Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 131075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131076; 131079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 131080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4202496 { 0x402000 +1.50097656e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 131076 { 0x20004 +1.1562547e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 678623774 { 0x2872fa1e +1.89825797e209 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda36216Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda36217Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda36193Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda36194Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda36222Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda36223Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 106431794 { 0x6580532 +1.68765854e141 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 131076 { 0x20004 +1.1562547e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131079 { 0x20007 +1.1562583e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4202495 ] -> true, [ 4202496; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4202495 ] -> true, [ 4202496; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3197057752
=counter_example_end
=global nodece 33 num_edges_traversed 1
=global nodece 33 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 34
=global nodece 34 nodece z3.ce3551.num_edges_traversed1
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3.ce3551 cfe749dc8f5883504ef48289a35f73
=input.spec-%var-x-1
1 : Lambda37820Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3059709807 { 0xb65f776f -1235257489 -1.74583232e237 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3059709808 { 0xb65f7770 -1235257488 -1.74583244e237 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37821Var : BV:32
18 : Lambda37822Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 3059709809 { 0xb65f7771 -1235257487 -1.74583256e237 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 511 { 0x1ff +1.6091e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 512 { 0x200 +1.6103e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 513 { 0x201 +1.6115e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda37823Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : ite(84, 7, 86) : BOOL
88 : and(70, 87) : BOOL
89 : 3 { 0x3 +1.35e129 } : BV:32
90 : 4 { 0x4 +1.47e129 } : BV:32
91 : bvmul(90, 61) : BV:32
92 : bvmul(90, 17) : BV:32
93 : bvadd(89, 92) : BV:32
94 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
95 : eq(93, 94) : BOOL
96 : 142 { 0x8e -114 } : BV:8
97 : eq(93, 89) : BOOL
98 : 207 { 0xcf -49 } : BV:8
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : eq(93, 99) : BOOL
101 : 143 { 0x8f -113 } : BV:8
102 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
103 : eq(93, 102) : BOOL
104 : 255 { 0xff -1 } : BV:8
105 : eq(93, 10) : BOOL
106 : 253 { 0xfd -3 } : BV:8
107 : eq(93, 2) : BOOL
108 : 233 { 0xe9 -23 } : BV:8
109 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
110 : eq(93, 109) : BOOL
111 : 238 { 0xee -18 } : BV:8
112 : 2 { 0x2 +1.23e129 } : BV:32
113 : eq(93, 112) : BOOL
114 : 197 { 0xc5 -59 } : BV:8
115 : 0 { 0x0 } : BV:8
116 : ite(113, 114, 115) : BV:8
117 : ite(110, 111, 116) : BV:8
118 : ite(107, 108, 117) : BV:8
119 : ite(105, 106, 118) : BV:8
120 : ite(103, 104, 119) : BV:8
121 : ite(100, 101, 120) : BV:8
122 : ite(97, 98, 121) : BV:8
123 : ite(95, 96, 122) : BV:8
124 : bvadd(112, 92) : BV:32
125 : eq(124, 94) : BOOL
126 : eq(124, 89) : BOOL
127 : eq(124, 99) : BOOL
128 : eq(124, 102) : BOOL
129 : eq(124, 10) : BOOL
130 : eq(124, 2) : BOOL
131 : eq(124, 109) : BOOL
132 : eq(124, 112) : BOOL
133 : ite(132, 114, 115) : BV:8
134 : ite(131, 111, 133) : BV:8
135 : ite(130, 108, 134) : BV:8
136 : ite(129, 106, 135) : BV:8
137 : ite(128, 104, 136) : BV:8
138 : ite(127, 101, 137) : BV:8
139 : ite(126, 98, 138) : BV:8
140 : ite(125, 96, 139) : BV:8
141 : bvadd(99, 92) : BV:32
142 : eq(141, 94) : BOOL
143 : eq(141, 89) : BOOL
144 : eq(141, 99) : BOOL
145 : eq(141, 102) : BOOL
146 : eq(141, 10) : BOOL
147 : eq(141, 2) : BOOL
148 : eq(141, 109) : BOOL
149 : eq(141, 112) : BOOL
150 : ite(149, 114, 115) : BV:8
151 : ite(148, 111, 150) : BV:8
152 : ite(147, 108, 151) : BV:8
153 : ite(146, 106, 152) : BV:8
154 : ite(145, 104, 153) : BV:8
155 : ite(144, 101, 154) : BV:8
156 : ite(143, 98, 155) : BV:8
157 : ite(142, 96, 156) : BV:8
158 : eq(92, 94) : BOOL
159 : eq(92, 89) : BOOL
160 : eq(92, 99) : BOOL
161 : eq(92, 102) : BOOL
162 : eq(92, 10) : BOOL
163 : eq(92, 2) : BOOL
164 : eq(92, 109) : BOOL
165 : eq(92, 112) : BOOL
166 : ite(165, 114, 115) : BV:8
167 : ite(164, 111, 166) : BV:8
168 : ite(163, 108, 167) : BV:8
169 : ite(162, 106, 168) : BV:8
170 : ite(161, 104, 169) : BV:8
171 : ite(160, 101, 170) : BV:8
172 : ite(159, 98, 171) : BV:8
173 : ite(158, 96, 172) : BV:8
174 : bvconcat(123, 140, 157, 173) : BV:32
175 : bvadd(89, 91, 174) : BV:32
176 : eq(175, 94) : BOOL
177 : eq(175, 89) : BOOL
178 : eq(175, 99) : BOOL
179 : eq(175, 102) : BOOL
180 : eq(175, 10) : BOOL
181 : eq(175, 2) : BOOL
182 : eq(175, 109) : BOOL
183 : eq(175, 112) : BOOL
184 : ite(183, 114, 115) : BV:8
185 : ite(182, 111, 184) : BV:8
186 : ite(181, 108, 185) : BV:8
187 : ite(180, 106, 186) : BV:8
188 : ite(179, 104, 187) : BV:8
189 : ite(178, 101, 188) : BV:8
190 : ite(177, 98, 189) : BV:8
191 : ite(176, 96, 190) : BV:8
192 : bvadd(112, 91, 174) : BV:32
193 : eq(192, 94) : BOOL
194 : eq(192, 89) : BOOL
195 : eq(192, 99) : BOOL
196 : eq(192, 102) : BOOL
197 : eq(192, 10) : BOOL
198 : eq(192, 2) : BOOL
199 : eq(192, 109) : BOOL
200 : eq(192, 112) : BOOL
201 : ite(200, 114, 115) : BV:8
202 : ite(199, 111, 201) : BV:8
203 : ite(198, 108, 202) : BV:8
204 : ite(197, 106, 203) : BV:8
205 : ite(196, 104, 204) : BV:8
206 : ite(195, 101, 205) : BV:8
207 : ite(194, 98, 206) : BV:8
208 : ite(193, 96, 207) : BV:8
209 : bvadd(99, 91, 174) : BV:32
210 : eq(209, 94) : BOOL
211 : eq(209, 89) : BOOL
212 : eq(209, 99) : BOOL
213 : eq(209, 102) : BOOL
214 : eq(209, 10) : BOOL
215 : eq(209, 2) : BOOL
216 : eq(209, 109) : BOOL
217 : eq(209, 112) : BOOL
218 : ite(217, 114, 115) : BV:8
219 : ite(216, 111, 218) : BV:8
220 : ite(215, 108, 219) : BV:8
221 : ite(214, 106, 220) : BV:8
222 : ite(213, 104, 221) : BV:8
223 : ite(212, 101, 222) : BV:8
224 : ite(211, 98, 223) : BV:8
225 : ite(210, 96, 224) : BV:8
226 : bvadd(91, 174) : BV:32
227 : eq(226, 94) : BOOL
228 : eq(226, 89) : BOOL
229 : eq(226, 99) : BOOL
230 : eq(226, 102) : BOOL
231 : eq(226, 10) : BOOL
232 : eq(226, 2) : BOOL
233 : eq(226, 109) : BOOL
234 : eq(226, 112) : BOOL
235 : ite(234, 114, 115) : BV:8
236 : ite(233, 111, 235) : BV:8
237 : ite(232, 108, 236) : BV:8
238 : ite(231, 106, 237) : BV:8
239 : ite(230, 104, 238) : BV:8
240 : ite(229, 101, 239) : BV:8
241 : ite(228, 98, 240) : BV:8
242 : ite(227, 96, 241) : BV:8
243 : bvconcat(191, 208, 225, 242) : BV:32
244 : ite(66, 2, 243) : BV:32
245 : ite(64, 2, 244) : BV:32
246 : ite(88, 243, 245) : BV:32
247 : ite(66, 2, 246) : BV:32
248 : ite(64, 2, 247) : BV:32
249 : lambda(61, 248) : FUNCTION[BV:32 -> BV:32]
250 : map(60, 249) : MAP[BV:32 -> BV:32]
251 : lambda(17, 250) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
252 : map(16, 251) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
253 : sym_const(252) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda37833Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3059709807 { 0xb65f776f -1235257489 -1.74583232e237 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3059709808 { 0xb65f7770 -1235257488 -1.74583244e237 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37834Var : BV:32
18 : Lambda37835Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 3059709809 { 0xb65f7771 -1235257487 -1.74583256e237 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 511 { 0x1ff +1.6091e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 512 { 0x200 +1.6103e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 513 { 0x201 +1.6115e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda37836Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : 3 { 0x3 +1.35e129 } : BV:32
68 : 4 { 0x4 +1.47e129 } : BV:32
69 : bvmul(68, 61) : BV:32
70 : bvmul(68, 17) : BV:32
71 : bvadd(67, 70) : BV:32
72 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
73 : eq(71, 72) : BOOL
74 : 142 { 0x8e -114 } : BV:8
75 : eq(71, 67) : BOOL
76 : 207 { 0xcf -49 } : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : eq(71, 77) : BOOL
79 : 143 { 0x8f -113 } : BV:8
80 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
81 : eq(71, 80) : BOOL
82 : 255 { 0xff -1 } : BV:8
83 : eq(71, 10) : BOOL
84 : 253 { 0xfd -3 } : BV:8
85 : eq(71, 2) : BOOL
86 : 233 { 0xe9 -23 } : BV:8
87 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
88 : eq(71, 87) : BOOL
89 : 238 { 0xee -18 } : BV:8
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : eq(71, 90) : BOOL
92 : 197 { 0xc5 -59 } : BV:8
93 : 0 { 0x0 } : BV:8
94 : ite(91, 92, 93) : BV:8
95 : ite(88, 89, 94) : BV:8
96 : ite(85, 86, 95) : BV:8
97 : ite(83, 84, 96) : BV:8
98 : ite(81, 82, 97) : BV:8
99 : ite(78, 79, 98) : BV:8
100 : ite(75, 76, 99) : BV:8
101 : ite(73, 74, 100) : BV:8
102 : bvadd(90, 70) : BV:32
103 : eq(102, 72) : BOOL
104 : eq(102, 67) : BOOL
105 : eq(102, 77) : BOOL
106 : eq(102, 80) : BOOL
107 : eq(102, 10) : BOOL
108 : eq(102, 2) : BOOL
109 : eq(102, 87) : BOOL
110 : eq(102, 90) : BOOL
111 : ite(110, 92, 93) : BV:8
112 : ite(109, 89, 111) : BV:8
113 : ite(108, 86, 112) : BV:8
114 : ite(107, 84, 113) : BV:8
115 : ite(106, 82, 114) : BV:8
116 : ite(105, 79, 115) : BV:8
117 : ite(104, 76, 116) : BV:8
118 : ite(103, 74, 117) : BV:8
119 : bvadd(77, 70) : BV:32
120 : eq(119, 72) : BOOL
121 : eq(119, 67) : BOOL
122 : eq(119, 77) : BOOL
123 : eq(119, 80) : BOOL
124 : eq(119, 10) : BOOL
125 : eq(119, 2) : BOOL
126 : eq(119, 87) : BOOL
127 : eq(119, 90) : BOOL
128 : ite(127, 92, 93) : BV:8
129 : ite(126, 89, 128) : BV:8
130 : ite(125, 86, 129) : BV:8
131 : ite(124, 84, 130) : BV:8
132 : ite(123, 82, 131) : BV:8
133 : ite(122, 79, 132) : BV:8
134 : ite(121, 76, 133) : BV:8
135 : ite(120, 74, 134) : BV:8
136 : eq(70, 72) : BOOL
137 : eq(70, 67) : BOOL
138 : eq(70, 77) : BOOL
139 : eq(70, 80) : BOOL
140 : eq(70, 10) : BOOL
141 : eq(70, 2) : BOOL
142 : eq(70, 87) : BOOL
143 : eq(70, 90) : BOOL
144 : ite(143, 92, 93) : BV:8
145 : ite(142, 89, 144) : BV:8
146 : ite(141, 86, 145) : BV:8
147 : ite(140, 84, 146) : BV:8
148 : ite(139, 82, 147) : BV:8
149 : ite(138, 79, 148) : BV:8
150 : ite(137, 76, 149) : BV:8
151 : ite(136, 74, 150) : BV:8
152 : bvconcat(101, 118, 135, 151) : BV:32
153 : bvadd(67, 69, 152) : BV:32
154 : eq(153, 72) : BOOL
155 : eq(153, 67) : BOOL
156 : eq(153, 77) : BOOL
157 : eq(153, 80) : BOOL
158 : eq(153, 10) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 87) : BOOL
161 : eq(153, 90) : BOOL
162 : ite(161, 92, 93) : BV:8
163 : ite(160, 89, 162) : BV:8
164 : ite(159, 86, 163) : BV:8
165 : ite(158, 84, 164) : BV:8
166 : ite(157, 82, 165) : BV:8
167 : ite(156, 79, 166) : BV:8
168 : ite(155, 76, 167) : BV:8
169 : ite(154, 74, 168) : BV:8
170 : bvadd(90, 69, 152) : BV:32
171 : eq(170, 72) : BOOL
172 : eq(170, 67) : BOOL
173 : eq(170, 77) : BOOL
174 : eq(170, 80) : BOOL
175 : eq(170, 10) : BOOL
176 : eq(170, 2) : BOOL
177 : eq(170, 87) : BOOL
178 : eq(170, 90) : BOOL
179 : ite(178, 92, 93) : BV:8
180 : ite(177, 89, 179) : BV:8
181 : ite(176, 86, 180) : BV:8
182 : ite(175, 84, 181) : BV:8
183 : ite(174, 82, 182) : BV:8
184 : ite(173, 79, 183) : BV:8
185 : ite(172, 76, 184) : BV:8
186 : ite(171, 74, 185) : BV:8
187 : bvadd(77, 69, 152) : BV:32
188 : eq(187, 72) : BOOL
189 : eq(187, 67) : BOOL
190 : eq(187, 77) : BOOL
191 : eq(187, 80) : BOOL
192 : eq(187, 10) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 87) : BOOL
195 : eq(187, 90) : BOOL
196 : ite(195, 92, 93) : BV:8
197 : ite(194, 89, 196) : BV:8
198 : ite(193, 86, 197) : BV:8
199 : ite(192, 84, 198) : BV:8
200 : ite(191, 82, 199) : BV:8
201 : ite(190, 79, 200) : BV:8
202 : ite(189, 76, 201) : BV:8
203 : ite(188, 74, 202) : BV:8
204 : bvadd(69, 152) : BV:32
205 : eq(204, 72) : BOOL
206 : eq(204, 67) : BOOL
207 : eq(204, 77) : BOOL
208 : eq(204, 80) : BOOL
209 : eq(204, 10) : BOOL
210 : eq(204, 2) : BOOL
211 : eq(204, 87) : BOOL
212 : eq(204, 90) : BOOL
213 : ite(212, 92, 93) : BV:8
214 : ite(211, 89, 213) : BV:8
215 : ite(210, 86, 214) : BV:8
216 : ite(209, 84, 215) : BV:8
217 : ite(208, 82, 216) : BV:8
218 : ite(207, 79, 217) : BV:8
219 : ite(206, 76, 218) : BV:8
220 : ite(205, 74, 219) : BV:8
221 : bvconcat(169, 186, 203, 220) : BV:32
222 : ite(66, 2, 221) : BV:32
223 : ite(64, 2, 222) : BV:32
224 : lambda(61, 223) : FUNCTION[BV:32 -> BV:32]
225 : map(60, 224) : MAP[BV:32 -> BV:32]
226 : lambda(17, 225) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
227 : map(16, 226) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
228 : sym_const(227) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 233, [ 1; 1 ] -> 143, [ 2; 2 ] -> 197, [ 3; 3 ] -> 207, [ 4; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 142, [ 4294967293; 4294967293 ] -> 255, [ 4294967294; 4294967294 ] -> 238, [ 4294967295; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1124895791 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1124895792; 1124895795 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1124895796; 1154470095 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1154470096; 1154470099 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1154470100; 2646552771 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2646552772; 2646552775 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2646552776; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2646552772 { 0x9dbf30c4 -1648414524 -1.49367570e188 } : BV:32
=input.dst.llvm-%m
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1154470096 { 0x44cfd0d0 +1.62355995e10 } : BV:32
=input.dst.llvm-%n
1 : 3059709808 { 0xb65f7770 -1235257488 -1.74583244e237 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1124895792 { 0x430c8c30 +1.9802818e7 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda37929Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 3059709807 { 0xb65f776f -1235257489 -1.74583232e237 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 3059709808 { 0xb65f7770 -1235257488 -1.74583244e237 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 3059709809 { 0xb65f7771 -1235257487 -1.74583256e237 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 511 { 0x1ff +1.6091e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 512 { 0x200 +1.6103e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 513 { 0x201 +1.6115e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda37930Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 50) : BV:32
59 : bvmul(57, 3) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
62 : eq(60, 61) : BOOL
63 : 142 { 0x8e -114 } : BV:8
64 : eq(60, 56) : BOOL
65 : 207 { 0xcf -49 } : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 143 { 0x8f -113 } : BV:8
69 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
70 : eq(60, 69) : BOOL
71 : 255 { 0xff -1 } : BV:8
72 : eq(60, 18) : BOOL
73 : 253 { 0xfd -3 } : BV:8
74 : eq(60, 2) : BOOL
75 : 233 { 0xe9 -23 } : BV:8
76 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
77 : eq(60, 76) : BOOL
78 : 238 { 0xee -18 } : BV:8
79 : 2 { 0x2 +1.23e129 } : BV:32
80 : eq(60, 79) : BOOL
81 : 197 { 0xc5 -59 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(72, 73, 85) : BV:8
87 : ite(70, 71, 86) : BV:8
88 : ite(67, 68, 87) : BV:8
89 : ite(64, 65, 88) : BV:8
90 : ite(62, 63, 89) : BV:8
91 : bvadd(79, 59) : BV:32
92 : eq(91, 61) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 66) : BOOL
95 : eq(91, 69) : BOOL
96 : eq(91, 18) : BOOL
97 : eq(91, 2) : BOOL
98 : eq(91, 76) : BOOL
99 : eq(91, 79) : BOOL
100 : ite(99, 81, 82) : BV:8
101 : ite(98, 78, 100) : BV:8
102 : ite(97, 75, 101) : BV:8
103 : ite(96, 73, 102) : BV:8
104 : ite(95, 71, 103) : BV:8
105 : ite(94, 68, 104) : BV:8
106 : ite(93, 65, 105) : BV:8
107 : ite(92, 63, 106) : BV:8
108 : bvadd(66, 59) : BV:32
109 : eq(108, 61) : BOOL
110 : eq(108, 56) : BOOL
111 : eq(108, 66) : BOOL
112 : eq(108, 69) : BOOL
113 : eq(108, 18) : BOOL
114 : eq(108, 2) : BOOL
115 : eq(108, 76) : BOOL
116 : eq(108, 79) : BOOL
117 : ite(116, 81, 82) : BV:8
118 : ite(115, 78, 117) : BV:8
119 : ite(114, 75, 118) : BV:8
120 : ite(113, 73, 119) : BV:8
121 : ite(112, 71, 120) : BV:8
122 : ite(111, 68, 121) : BV:8
123 : ite(110, 65, 122) : BV:8
124 : ite(109, 63, 123) : BV:8
125 : eq(59, 61) : BOOL
126 : eq(59, 56) : BOOL
127 : eq(59, 66) : BOOL
128 : eq(59, 69) : BOOL
129 : eq(59, 18) : BOOL
130 : eq(59, 2) : BOOL
131 : eq(59, 76) : BOOL
132 : eq(59, 79) : BOOL
133 : ite(132, 81, 82) : BV:8
134 : ite(131, 78, 133) : BV:8
135 : ite(130, 75, 134) : BV:8
136 : ite(129, 73, 135) : BV:8
137 : ite(128, 71, 136) : BV:8
138 : ite(127, 68, 137) : BV:8
139 : ite(126, 65, 138) : BV:8
140 : ite(125, 63, 139) : BV:8
141 : bvconcat(90, 107, 124, 140) : BV:32
142 : bvadd(56, 58, 141) : BV:32
143 : eq(142, 61) : BOOL
144 : eq(142, 56) : BOOL
145 : eq(142, 66) : BOOL
146 : eq(142, 69) : BOOL
147 : eq(142, 18) : BOOL
148 : eq(142, 2) : BOOL
149 : eq(142, 76) : BOOL
150 : eq(142, 79) : BOOL
151 : ite(150, 81, 82) : BV:8
152 : ite(149, 78, 151) : BV:8
153 : ite(148, 75, 152) : BV:8
154 : ite(147, 73, 153) : BV:8
155 : ite(146, 71, 154) : BV:8
156 : ite(145, 68, 155) : BV:8
157 : ite(144, 65, 156) : BV:8
158 : ite(143, 63, 157) : BV:8
159 : bvadd(79, 58, 141) : BV:32
160 : eq(159, 61) : BOOL
161 : eq(159, 56) : BOOL
162 : eq(159, 66) : BOOL
163 : eq(159, 69) : BOOL
164 : eq(159, 18) : BOOL
165 : eq(159, 2) : BOOL
166 : eq(159, 76) : BOOL
167 : eq(159, 79) : BOOL
168 : ite(167, 81, 82) : BV:8
169 : ite(166, 78, 168) : BV:8
170 : ite(165, 75, 169) : BV:8
171 : ite(164, 73, 170) : BV:8
172 : ite(163, 71, 171) : BV:8
173 : ite(162, 68, 172) : BV:8
174 : ite(161, 65, 173) : BV:8
175 : ite(160, 63, 174) : BV:8
176 : bvadd(66, 58, 141) : BV:32
177 : eq(176, 61) : BOOL
178 : eq(176, 56) : BOOL
179 : eq(176, 66) : BOOL
180 : eq(176, 69) : BOOL
181 : eq(176, 18) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 76) : BOOL
184 : eq(176, 79) : BOOL
185 : ite(184, 81, 82) : BV:8
186 : ite(183, 78, 185) : BV:8
187 : ite(182, 75, 186) : BV:8
188 : ite(181, 73, 187) : BV:8
189 : ite(180, 71, 188) : BV:8
190 : ite(179, 68, 189) : BV:8
191 : ite(178, 65, 190) : BV:8
192 : ite(177, 63, 191) : BV:8
193 : bvadd(58, 141) : BV:32
194 : eq(193, 61) : BOOL
195 : eq(193, 56) : BOOL
196 : eq(193, 66) : BOOL
197 : eq(193, 69) : BOOL
198 : eq(193, 18) : BOOL
199 : eq(193, 2) : BOOL
200 : eq(193, 76) : BOOL
201 : eq(193, 79) : BOOL
202 : ite(201, 81, 82) : BV:8
203 : ite(200, 78, 202) : BV:8
204 : ite(199, 75, 203) : BV:8
205 : ite(198, 73, 204) : BV:8
206 : ite(197, 71, 205) : BV:8
207 : ite(196, 68, 206) : BV:8
208 : ite(195, 65, 207) : BV:8
209 : ite(194, 63, 208) : BV:8
210 : bvconcat(158, 175, 192, 209) : BV:32
211 : ite(55, 2, 210) : BV:32
212 : ite(53, 2, 211) : BV:32
213 : lambda(50, 212) : FUNCTION[BV:32 -> BV:32]
214 : map(49, 213) : MAP[BV:32 -> BV:32]
215 : sym_const(214) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 3059709807 { 0xb65f776f -1235257489 -1.74583232e237 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3059709808 { 0xb65f7770 -1235257488 -1.74583244e237 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda37919Var : BV:32
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 3059709809 { 0xb65f7771 -1235257487 -1.74583256e237 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 1) : BOOL
35 : bvule(1, 19) : BOOL
36 : 511 { 0x1ff +1.6091e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 512 { 0x200 +1.6103e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 513 { 0x201 +1.6115e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 2) : BOOL
53 : and(52, 50) : BOOL
54 : ite(53, 7, 13) : BOOL
55 : ite(51, 7, 54) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda37920Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : 3 { 0x3 +1.35e129 } : BV:32
64 : 4 { 0x4 +1.47e129 } : BV:32
65 : bvmul(64, 57) : BV:32
66 : bvmul(64, 2) : BV:32
67 : bvadd(63, 66) : BV:32
68 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
69 : eq(67, 68) : BOOL
70 : 142 { 0x8e -114 } : BV:8
71 : eq(67, 63) : BOOL
72 : 207 { 0xcf -49 } : BV:8
73 : eq(67, 16) : BOOL
74 : 143 { 0x8f -113 } : BV:8
75 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
76 : eq(67, 75) : BOOL
77 : 255 { 0xff -1 } : BV:8
78 : eq(67, 10) : BOOL
79 : 253 { 0xfd -3 } : BV:8
80 : eq(67, 1) : BOOL
81 : 233 { 0xe9 -23 } : BV:8
82 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
83 : eq(67, 82) : BOOL
84 : 238 { 0xee -18 } : BV:8
85 : 2 { 0x2 +1.23e129 } : BV:32
86 : eq(67, 85) : BOOL
87 : 197 { 0xc5 -59 } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(80, 81, 90) : BV:8
92 : ite(78, 79, 91) : BV:8
93 : ite(76, 77, 92) : BV:8
94 : ite(73, 74, 93) : BV:8
95 : ite(71, 72, 94) : BV:8
96 : ite(69, 70, 95) : BV:8
97 : bvadd(85, 66) : BV:32
98 : eq(97, 68) : BOOL
99 : eq(97, 63) : BOOL
100 : eq(97, 16) : BOOL
101 : eq(97, 75) : BOOL
102 : eq(97, 10) : BOOL
103 : eq(97, 1) : BOOL
104 : eq(97, 82) : BOOL
105 : eq(97, 85) : BOOL
106 : ite(105, 87, 88) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 81, 107) : BV:8
109 : ite(102, 79, 108) : BV:8
110 : ite(101, 77, 109) : BV:8
111 : ite(100, 74, 110) : BV:8
112 : ite(99, 72, 111) : BV:8
113 : ite(98, 70, 112) : BV:8
114 : bvadd(16, 66) : BV:32
115 : eq(114, 68) : BOOL
116 : eq(114, 63) : BOOL
117 : eq(114, 16) : BOOL
118 : eq(114, 75) : BOOL
119 : eq(114, 10) : BOOL
120 : eq(114, 1) : BOOL
121 : eq(114, 82) : BOOL
122 : eq(114, 85) : BOOL
123 : ite(122, 87, 88) : BV:8
124 : ite(121, 84, 123) : BV:8
125 : ite(120, 81, 124) : BV:8
126 : ite(119, 79, 125) : BV:8
127 : ite(118, 77, 126) : BV:8
128 : ite(117, 74, 127) : BV:8
129 : ite(116, 72, 128) : BV:8
130 : ite(115, 70, 129) : BV:8
131 : eq(66, 68) : BOOL
132 : eq(66, 63) : BOOL
133 : eq(66, 16) : BOOL
134 : eq(66, 75) : BOOL
135 : eq(66, 10) : BOOL
136 : eq(66, 1) : BOOL
137 : eq(66, 82) : BOOL
138 : eq(66, 85) : BOOL
139 : ite(138, 87, 88) : BV:8
140 : ite(137, 84, 139) : BV:8
141 : ite(136, 81, 140) : BV:8
142 : ite(135, 79, 141) : BV:8
143 : ite(134, 77, 142) : BV:8
144 : ite(133, 74, 143) : BV:8
145 : ite(132, 72, 144) : BV:8
146 : ite(131, 70, 145) : BV:8
147 : bvconcat(96, 113, 130, 146) : BV:32
148 : bvadd(63, 65, 147) : BV:32
149 : eq(148, 68) : BOOL
150 : eq(148, 63) : BOOL
151 : eq(148, 16) : BOOL
152 : eq(148, 75) : BOOL
153 : eq(148, 10) : BOOL
154 : eq(148, 1) : BOOL
155 : eq(148, 82) : BOOL
156 : eq(148, 85) : BOOL
157 : ite(156, 87, 88) : BV:8
158 : ite(155, 84, 157) : BV:8
159 : ite(154, 81, 158) : BV:8
160 : ite(153, 79, 159) : BV:8
161 : ite(152, 77, 160) : BV:8
162 : ite(151, 74, 161) : BV:8
163 : ite(150, 72, 162) : BV:8
164 : ite(149, 70, 163) : BV:8
165 : bvadd(85, 65, 147) : BV:32
166 : eq(165, 68) : BOOL
167 : eq(165, 63) : BOOL
168 : eq(165, 16) : BOOL
169 : eq(165, 75) : BOOL
170 : eq(165, 10) : BOOL
171 : eq(165, 1) : BOOL
172 : eq(165, 82) : BOOL
173 : eq(165, 85) : BOOL
174 : ite(173, 87, 88) : BV:8
175 : ite(172, 84, 174) : BV:8
176 : ite(171, 81, 175) : BV:8
177 : ite(170, 79, 176) : BV:8
178 : ite(169, 77, 177) : BV:8
179 : ite(168, 74, 178) : BV:8
180 : ite(167, 72, 179) : BV:8
181 : ite(166, 70, 180) : BV:8
182 : bvadd(16, 65, 147) : BV:32
183 : eq(182, 68) : BOOL
184 : eq(182, 63) : BOOL
185 : eq(182, 16) : BOOL
186 : eq(182, 75) : BOOL
187 : eq(182, 10) : BOOL
188 : eq(182, 1) : BOOL
189 : eq(182, 82) : BOOL
190 : eq(182, 85) : BOOL
191 : ite(190, 87, 88) : BV:8
192 : ite(189, 84, 191) : BV:8
193 : ite(188, 81, 192) : BV:8
194 : ite(187, 79, 193) : BV:8
195 : ite(186, 77, 194) : BV:8
196 : ite(185, 74, 195) : BV:8
197 : ite(184, 72, 196) : BV:8
198 : ite(183, 70, 197) : BV:8
199 : bvadd(65, 147) : BV:32
200 : eq(199, 68) : BOOL
201 : eq(199, 63) : BOOL
202 : eq(199, 16) : BOOL
203 : eq(199, 75) : BOOL
204 : eq(199, 10) : BOOL
205 : eq(199, 1) : BOOL
206 : eq(199, 82) : BOOL
207 : eq(199, 85) : BOOL
208 : ite(207, 87, 88) : BV:8
209 : ite(206, 84, 208) : BV:8
210 : ite(205, 81, 209) : BV:8
211 : ite(204, 79, 210) : BV:8
212 : ite(203, 77, 211) : BV:8
213 : ite(202, 74, 212) : BV:8
214 : ite(201, 72, 213) : BV:8
215 : ite(200, 70, 214) : BV:8
216 : bvconcat(164, 181, 198, 215) : BV:32
217 : ite(62, 1, 216) : BV:32
218 : ite(60, 1, 217) : BV:32
219 : lambda(57, 218) : FUNCTION[BV:32 -> BV:32]
220 : map(56, 219) : MAP[BV:32 -> BV:32]
221 : sum(17, 18, 220) : SUM[UNIT,MAP[BV:32 -> BV:32]]
222 : sym_const(221) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda37935Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 3059709807 { 0xb65f776f -1235257489 -1.74583232e237 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 3059709808 { 0xb65f7770 -1235257488 -1.74583244e237 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 3059709809 { 0xb65f7771 -1235257487 -1.74583256e237 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 511 { 0x1ff +1.6091e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 512 { 0x200 +1.6103e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 513 { 0x201 +1.6115e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda37936Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 50) : BV:32
59 : bvmul(57, 3) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
62 : eq(60, 61) : BOOL
63 : 142 { 0x8e -114 } : BV:8
64 : eq(60, 56) : BOOL
65 : 207 { 0xcf -49 } : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 143 { 0x8f -113 } : BV:8
69 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
70 : eq(60, 69) : BOOL
71 : 255 { 0xff -1 } : BV:8
72 : eq(60, 18) : BOOL
73 : 253 { 0xfd -3 } : BV:8
74 : eq(60, 2) : BOOL
75 : 233 { 0xe9 -23 } : BV:8
76 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
77 : eq(60, 76) : BOOL
78 : 238 { 0xee -18 } : BV:8
79 : 2 { 0x2 +1.23e129 } : BV:32
80 : eq(60, 79) : BOOL
81 : 197 { 0xc5 -59 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(72, 73, 85) : BV:8
87 : ite(70, 71, 86) : BV:8
88 : ite(67, 68, 87) : BV:8
89 : ite(64, 65, 88) : BV:8
90 : ite(62, 63, 89) : BV:8
91 : bvadd(79, 59) : BV:32
92 : eq(91, 61) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 66) : BOOL
95 : eq(91, 69) : BOOL
96 : eq(91, 18) : BOOL
97 : eq(91, 2) : BOOL
98 : eq(91, 76) : BOOL
99 : eq(91, 79) : BOOL
100 : ite(99, 81, 82) : BV:8
101 : ite(98, 78, 100) : BV:8
102 : ite(97, 75, 101) : BV:8
103 : ite(96, 73, 102) : BV:8
104 : ite(95, 71, 103) : BV:8
105 : ite(94, 68, 104) : BV:8
106 : ite(93, 65, 105) : BV:8
107 : ite(92, 63, 106) : BV:8
108 : bvadd(66, 59) : BV:32
109 : eq(108, 61) : BOOL
110 : eq(108, 56) : BOOL
111 : eq(108, 66) : BOOL
112 : eq(108, 69) : BOOL
113 : eq(108, 18) : BOOL
114 : eq(108, 2) : BOOL
115 : eq(108, 76) : BOOL
116 : eq(108, 79) : BOOL
117 : ite(116, 81, 82) : BV:8
118 : ite(115, 78, 117) : BV:8
119 : ite(114, 75, 118) : BV:8
120 : ite(113, 73, 119) : BV:8
121 : ite(112, 71, 120) : BV:8
122 : ite(111, 68, 121) : BV:8
123 : ite(110, 65, 122) : BV:8
124 : ite(109, 63, 123) : BV:8
125 : eq(59, 61) : BOOL
126 : eq(59, 56) : BOOL
127 : eq(59, 66) : BOOL
128 : eq(59, 69) : BOOL
129 : eq(59, 18) : BOOL
130 : eq(59, 2) : BOOL
131 : eq(59, 76) : BOOL
132 : eq(59, 79) : BOOL
133 : ite(132, 81, 82) : BV:8
134 : ite(131, 78, 133) : BV:8
135 : ite(130, 75, 134) : BV:8
136 : ite(129, 73, 135) : BV:8
137 : ite(128, 71, 136) : BV:8
138 : ite(127, 68, 137) : BV:8
139 : ite(126, 65, 138) : BV:8
140 : ite(125, 63, 139) : BV:8
141 : bvconcat(90, 107, 124, 140) : BV:32
142 : bvadd(56, 58, 141) : BV:32
143 : eq(142, 61) : BOOL
144 : eq(142, 56) : BOOL
145 : eq(142, 66) : BOOL
146 : eq(142, 69) : BOOL
147 : eq(142, 18) : BOOL
148 : eq(142, 2) : BOOL
149 : eq(142, 76) : BOOL
150 : eq(142, 79) : BOOL
151 : ite(150, 81, 82) : BV:8
152 : ite(149, 78, 151) : BV:8
153 : ite(148, 75, 152) : BV:8
154 : ite(147, 73, 153) : BV:8
155 : ite(146, 71, 154) : BV:8
156 : ite(145, 68, 155) : BV:8
157 : ite(144, 65, 156) : BV:8
158 : ite(143, 63, 157) : BV:8
159 : bvadd(79, 58, 141) : BV:32
160 : eq(159, 61) : BOOL
161 : eq(159, 56) : BOOL
162 : eq(159, 66) : BOOL
163 : eq(159, 69) : BOOL
164 : eq(159, 18) : BOOL
165 : eq(159, 2) : BOOL
166 : eq(159, 76) : BOOL
167 : eq(159, 79) : BOOL
168 : ite(167, 81, 82) : BV:8
169 : ite(166, 78, 168) : BV:8
170 : ite(165, 75, 169) : BV:8
171 : ite(164, 73, 170) : BV:8
172 : ite(163, 71, 171) : BV:8
173 : ite(162, 68, 172) : BV:8
174 : ite(161, 65, 173) : BV:8
175 : ite(160, 63, 174) : BV:8
176 : bvadd(66, 58, 141) : BV:32
177 : eq(176, 61) : BOOL
178 : eq(176, 56) : BOOL
179 : eq(176, 66) : BOOL
180 : eq(176, 69) : BOOL
181 : eq(176, 18) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 76) : BOOL
184 : eq(176, 79) : BOOL
185 : ite(184, 81, 82) : BV:8
186 : ite(183, 78, 185) : BV:8
187 : ite(182, 75, 186) : BV:8
188 : ite(181, 73, 187) : BV:8
189 : ite(180, 71, 188) : BV:8
190 : ite(179, 68, 189) : BV:8
191 : ite(178, 65, 190) : BV:8
192 : ite(177, 63, 191) : BV:8
193 : bvadd(58, 141) : BV:32
194 : eq(193, 61) : BOOL
195 : eq(193, 56) : BOOL
196 : eq(193, 66) : BOOL
197 : eq(193, 69) : BOOL
198 : eq(193, 18) : BOOL
199 : eq(193, 2) : BOOL
200 : eq(193, 76) : BOOL
201 : eq(193, 79) : BOOL
202 : ite(201, 81, 82) : BV:8
203 : ite(200, 78, 202) : BV:8
204 : ite(199, 75, 203) : BV:8
205 : ite(198, 73, 204) : BV:8
206 : ite(197, 71, 205) : BV:8
207 : ite(196, 68, 206) : BV:8
208 : ite(195, 65, 207) : BV:8
209 : ite(194, 63, 208) : BV:8
210 : bvconcat(158, 175, 192, 209) : BV:32
211 : ite(55, 2, 210) : BV:32
212 : ite(53, 2, 211) : BV:32
213 : lambda(50, 212) : FUNCTION[BV:32 -> BV:32]
214 : map(49, 213) : MAP[BV:32 -> BV:32]
215 : sym_const(214) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1154470096 { 0x44cfd0d0 +1.62355995e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1154470099 { 0x44cfd0d3 +1.62356030e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1124895792 { 0x430c8c30 +1.9802818e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1124895795 { 0x430c8c33 +1.9802854e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2646552772 { 0x9dbf30c4 -1648414524 -1.49367570e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2646552775 { 0x9dbf30c7 -1648414521 -1.49367606e188 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda37750Var : BV:32
2 : Lambda37751Var : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 3059709807 { 0xb65f776f -1235257489 -1.74583232e237 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 3059709808 { 0xb65f7770 -1235257488 -1.74583244e237 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 3059709809 { 0xb65f7771 -1235257487 -1.74583256e237 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 5) : BOOL
38 : bvule(5, 2) : BOOL
39 : 511 { 0x1ff +1.6091e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 512 { 0x200 +1.6103e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 513 { 0x201 +1.6115e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 3) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : ite(54, 14, 57) : BOOL
59 : and(22, 58) : BOOL
60 : 3 { 0x3 +1.35e129 } : BV:32
61 : 4 { 0x4 +1.47e129 } : BV:32
62 : bvmul(61, 2) : BV:32
63 : bvmul(61, 1) : BV:32
64 : bvadd(60, 63) : BV:32
65 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
66 : eq(64, 65) : BOOL
67 : 142 { 0x8e -114 } : BV:8
68 : eq(64, 60) : BOOL
69 : 207 { 0xcf -49 } : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : eq(64, 70) : BOOL
72 : 143 { 0x8f -113 } : BV:8
73 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
74 : eq(64, 73) : BOOL
75 : 255 { 0xff -1 } : BV:8
76 : eq(64, 17) : BOOL
77 : 253 { 0xfd -3 } : BV:8
78 : eq(64, 5) : BOOL
79 : 233 { 0xe9 -23 } : BV:8
80 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
81 : eq(64, 80) : BOOL
82 : 238 { 0xee -18 } : BV:8
83 : 2 { 0x2 +1.23e129 } : BV:32
84 : eq(64, 83) : BOOL
85 : 197 { 0xc5 -59 } : BV:8
86 : 0 { 0x0 } : BV:8
87 : ite(84, 85, 86) : BV:8
88 : ite(81, 82, 87) : BV:8
89 : ite(78, 79, 88) : BV:8
90 : ite(76, 77, 89) : BV:8
91 : ite(74, 75, 90) : BV:8
92 : ite(71, 72, 91) : BV:8
93 : ite(68, 69, 92) : BV:8
94 : ite(66, 67, 93) : BV:8
95 : bvadd(83, 63) : BV:32
96 : eq(95, 65) : BOOL
97 : eq(95, 60) : BOOL
98 : eq(95, 70) : BOOL
99 : eq(95, 73) : BOOL
100 : eq(95, 17) : BOOL
101 : eq(95, 5) : BOOL
102 : eq(95, 80) : BOOL
103 : eq(95, 83) : BOOL
104 : ite(103, 85, 86) : BV:8
105 : ite(102, 82, 104) : BV:8
106 : ite(101, 79, 105) : BV:8
107 : ite(100, 77, 106) : BV:8
108 : ite(99, 75, 107) : BV:8
109 : ite(98, 72, 108) : BV:8
110 : ite(97, 69, 109) : BV:8
111 : ite(96, 67, 110) : BV:8
112 : bvadd(70, 63) : BV:32
113 : eq(112, 65) : BOOL
114 : eq(112, 60) : BOOL
115 : eq(112, 70) : BOOL
116 : eq(112, 73) : BOOL
117 : eq(112, 17) : BOOL
118 : eq(112, 5) : BOOL
119 : eq(112, 80) : BOOL
120 : eq(112, 83) : BOOL
121 : ite(120, 85, 86) : BV:8
122 : ite(119, 82, 121) : BV:8
123 : ite(118, 79, 122) : BV:8
124 : ite(117, 77, 123) : BV:8
125 : ite(116, 75, 124) : BV:8
126 : ite(115, 72, 125) : BV:8
127 : ite(114, 69, 126) : BV:8
128 : ite(113, 67, 127) : BV:8
129 : eq(63, 65) : BOOL
130 : eq(63, 60) : BOOL
131 : eq(63, 70) : BOOL
132 : eq(63, 73) : BOOL
133 : eq(63, 17) : BOOL
134 : eq(63, 5) : BOOL
135 : eq(63, 80) : BOOL
136 : eq(63, 83) : BOOL
137 : ite(136, 85, 86) : BV:8
138 : ite(135, 82, 137) : BV:8
139 : ite(134, 79, 138) : BV:8
140 : ite(133, 77, 139) : BV:8
141 : ite(132, 75, 140) : BV:8
142 : ite(131, 72, 141) : BV:8
143 : ite(130, 69, 142) : BV:8
144 : ite(129, 67, 143) : BV:8
145 : bvconcat(94, 111, 128, 144) : BV:32
146 : bvadd(60, 62, 145) : BV:32
147 : eq(146, 65) : BOOL
148 : eq(146, 60) : BOOL
149 : eq(146, 70) : BOOL
150 : eq(146, 73) : BOOL
151 : eq(146, 17) : BOOL
152 : eq(146, 5) : BOOL
153 : eq(146, 80) : BOOL
154 : eq(146, 83) : BOOL
155 : ite(154, 85, 86) : BV:8
156 : ite(153, 82, 155) : BV:8
157 : ite(152, 79, 156) : BV:8
158 : ite(151, 77, 157) : BV:8
159 : ite(150, 75, 158) : BV:8
160 : ite(149, 72, 159) : BV:8
161 : ite(148, 69, 160) : BV:8
162 : ite(147, 67, 161) : BV:8
163 : bvadd(83, 62, 145) : BV:32
164 : eq(163, 65) : BOOL
165 : eq(163, 60) : BOOL
166 : eq(163, 70) : BOOL
167 : eq(163, 73) : BOOL
168 : eq(163, 17) : BOOL
169 : eq(163, 5) : BOOL
170 : eq(163, 80) : BOOL
171 : eq(163, 83) : BOOL
172 : ite(171, 85, 86) : BV:8
173 : ite(170, 82, 172) : BV:8
174 : ite(169, 79, 173) : BV:8
175 : ite(168, 77, 174) : BV:8
176 : ite(167, 75, 175) : BV:8
177 : ite(166, 72, 176) : BV:8
178 : ite(165, 69, 177) : BV:8
179 : ite(164, 67, 178) : BV:8
180 : bvadd(70, 62, 145) : BV:32
181 : eq(180, 65) : BOOL
182 : eq(180, 60) : BOOL
183 : eq(180, 70) : BOOL
184 : eq(180, 73) : BOOL
185 : eq(180, 17) : BOOL
186 : eq(180, 5) : BOOL
187 : eq(180, 80) : BOOL
188 : eq(180, 83) : BOOL
189 : ite(188, 85, 86) : BV:8
190 : ite(187, 82, 189) : BV:8
191 : ite(186, 79, 190) : BV:8
192 : ite(185, 77, 191) : BV:8
193 : ite(184, 75, 192) : BV:8
194 : ite(183, 72, 193) : BV:8
195 : ite(182, 69, 194) : BV:8
196 : ite(181, 67, 195) : BV:8
197 : bvadd(62, 145) : BV:32
198 : eq(197, 65) : BOOL
199 : eq(197, 60) : BOOL
200 : eq(197, 70) : BOOL
201 : eq(197, 73) : BOOL
202 : eq(197, 17) : BOOL
203 : eq(197, 5) : BOOL
204 : eq(197, 80) : BOOL
205 : eq(197, 83) : BOOL
206 : ite(205, 85, 86) : BV:8
207 : ite(204, 82, 206) : BV:8
208 : ite(203, 79, 207) : BV:8
209 : ite(202, 77, 208) : BV:8
210 : ite(201, 75, 209) : BV:8
211 : ite(200, 72, 210) : BV:8
212 : ite(199, 69, 211) : BV:8
213 : ite(198, 67, 212) : BV:8
214 : bvconcat(162, 179, 196, 213) : BV:32
215 : ite(9, 5, 214) : BV:32
216 : ite(7, 5, 215) : BV:32
217 : ite(59, 214, 216) : BV:32
218 : ite(9, 5, 217) : BV:32
219 : ite(7, 5, 218) : BV:32
220 : lambda(1, 2, 219) : FUNCTION[BV:32,BV:32 -> BV:32]
221 : sym_const(220) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda37755Var : BV:32
2 : Lambda37756Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 3059709807 { 0xb65f776f -1235257489 -1.74583232e237 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3059709808 { 0xb65f7770 -1235257488 -1.74583244e237 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 3059709809 { 0xb65f7771 -1235257487 -1.74583256e237 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 511 { 0x1ff +1.6091e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 512 { 0x200 +1.6103e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 513 { 0x201 +1.6115e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3059709807 ] -> true, [ 3059709808; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3059709807 ] -> true, [ 3059709808; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda37764Var : BV:32
2 : Lambda37765Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 3059709807 { 0xb65f776f -1235257489 -1.74583232e237 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3059709808 { 0xb65f7770 -1235257488 -1.74583244e237 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 3059709809 { 0xb65f7771 -1235257487 -1.74583256e237 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 511 { 0x1ff +1.6091e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 512 { 0x200 +1.6103e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 513 { 0x201 +1.6115e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda37760Var : BV:32
2 : Lambda37761Var : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
16 : eq(14, 15) : BOOL
17 : 142 { 0x8e -114 } : BV:8
18 : eq(14, 10) : BOOL
19 : 207 { 0xcf -49 } : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(14, 20) : BOOL
22 : 143 { 0x8f -113 } : BV:8
23 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
24 : eq(14, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
27 : eq(14, 26) : BOOL
28 : 253 { 0xfd -3 } : BV:8
29 : eq(14, 5) : BOOL
30 : 233 { 0xe9 -23 } : BV:8
31 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
32 : eq(14, 31) : BOOL
33 : 238 { 0xee -18 } : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : eq(14, 34) : BOOL
36 : 197 { 0xc5 -59 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : ite(21, 22, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(16, 17, 44) : BV:8
46 : bvadd(34, 13) : BV:32
47 : eq(46, 15) : BOOL
48 : eq(46, 10) : BOOL
49 : eq(46, 20) : BOOL
50 : eq(46, 23) : BOOL
51 : eq(46, 26) : BOOL
52 : eq(46, 5) : BOOL
53 : eq(46, 31) : BOOL
54 : eq(46, 34) : BOOL
55 : ite(54, 36, 37) : BV:8
56 : ite(53, 33, 55) : BV:8
57 : ite(52, 30, 56) : BV:8
58 : ite(51, 28, 57) : BV:8
59 : ite(50, 25, 58) : BV:8
60 : ite(49, 22, 59) : BV:8
61 : ite(48, 19, 60) : BV:8
62 : ite(47, 17, 61) : BV:8
63 : bvadd(20, 13) : BV:32
64 : eq(63, 15) : BOOL
65 : eq(63, 10) : BOOL
66 : eq(63, 20) : BOOL
67 : eq(63, 23) : BOOL
68 : eq(63, 26) : BOOL
69 : eq(63, 5) : BOOL
70 : eq(63, 31) : BOOL
71 : eq(63, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 28, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : ite(66, 22, 76) : BV:8
78 : ite(65, 19, 77) : BV:8
79 : ite(64, 17, 78) : BV:8
80 : eq(13, 15) : BOOL
81 : eq(13, 10) : BOOL
82 : eq(13, 20) : BOOL
83 : eq(13, 23) : BOOL
84 : eq(13, 26) : BOOL
85 : eq(13, 5) : BOOL
86 : eq(13, 31) : BOOL
87 : eq(13, 34) : BOOL
88 : ite(87, 36, 37) : BV:8
89 : ite(86, 33, 88) : BV:8
90 : ite(85, 30, 89) : BV:8
91 : ite(84, 28, 90) : BV:8
92 : ite(83, 25, 91) : BV:8
93 : ite(82, 22, 92) : BV:8
94 : ite(81, 19, 93) : BV:8
95 : ite(80, 17, 94) : BV:8
96 : bvconcat(45, 62, 79, 95) : BV:32
97 : bvadd(10, 12, 96) : BV:32
98 : eq(97, 15) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 20) : BOOL
101 : eq(97, 23) : BOOL
102 : eq(97, 26) : BOOL
103 : eq(97, 5) : BOOL
104 : eq(97, 31) : BOOL
105 : eq(97, 34) : BOOL
106 : ite(105, 36, 37) : BV:8
107 : ite(104, 33, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 28, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 22, 110) : BV:8
112 : ite(99, 19, 111) : BV:8
113 : ite(98, 17, 112) : BV:8
114 : bvadd(34, 12, 96) : BV:32
115 : eq(114, 15) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 20) : BOOL
118 : eq(114, 23) : BOOL
119 : eq(114, 26) : BOOL
120 : eq(114, 5) : BOOL
121 : eq(114, 31) : BOOL
122 : eq(114, 34) : BOOL
123 : ite(122, 36, 37) : BV:8
124 : ite(121, 33, 123) : BV:8
125 : ite(120, 30, 124) : BV:8
126 : ite(119, 28, 125) : BV:8
127 : ite(118, 25, 126) : BV:8
128 : ite(117, 22, 127) : BV:8
129 : ite(116, 19, 128) : BV:8
130 : ite(115, 17, 129) : BV:8
131 : bvadd(20, 12, 96) : BV:32
132 : eq(131, 15) : BOOL
133 : eq(131, 10) : BOOL
134 : eq(131, 20) : BOOL
135 : eq(131, 23) : BOOL
136 : eq(131, 26) : BOOL
137 : eq(131, 5) : BOOL
138 : eq(131, 31) : BOOL
139 : eq(131, 34) : BOOL
140 : ite(139, 36, 37) : BV:8
141 : ite(138, 33, 140) : BV:8
142 : ite(137, 30, 141) : BV:8
143 : ite(136, 28, 142) : BV:8
144 : ite(135, 25, 143) : BV:8
145 : ite(134, 22, 144) : BV:8
146 : ite(133, 19, 145) : BV:8
147 : ite(132, 17, 146) : BV:8
148 : bvadd(12, 96) : BV:32
149 : eq(148, 15) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 20) : BOOL
152 : eq(148, 23) : BOOL
153 : eq(148, 26) : BOOL
154 : eq(148, 5) : BOOL
155 : eq(148, 31) : BOOL
156 : eq(148, 34) : BOOL
157 : ite(156, 36, 37) : BV:8
158 : ite(155, 33, 157) : BV:8
159 : ite(154, 30, 158) : BV:8
160 : ite(153, 28, 159) : BV:8
161 : ite(152, 25, 160) : BV:8
162 : ite(151, 22, 161) : BV:8
163 : ite(150, 19, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : bvconcat(113, 130, 147, 164) : BV:32
166 : ite(9, 5, 165) : BV:32
167 : ite(7, 5, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
505303343
=counter_example_end
=global nodece 34 num_edges_traversed 1
=global nodece 34 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 35
=global nodece 35 nodece z3v487.ce3601.num_edges_traversed1
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3v487.ce3601 c7ff4efdf4ba1254ffdd5fff7fa931b
=input.spec-%var-x-1
1 : Lambda39588Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39589Var : BV:32
18 : Lambda39590Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda39591Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39613Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39614Var : BV:32
18 : Lambda39615Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda39616Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 134217727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 134217728; 134217731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 134217732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 218838602 { 0xd0b364a +1.8759427e155 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda39621Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39622Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda39598Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda39599Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda39627Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39628Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1154632828 { 0x44d24c7c +1.64295911e10 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 134217731 { 0x8000003 +1.35e145 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1739766525
=counter_example_end
=global nodece 35 num_edges_traversed 1
=global nodece 35 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 36
=global nodece 36 nodece z3.ce3647.num_edges_traversed1
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3.ce3647 169e13d237fd6b50bcb351973c9913ea
=input.spec-%var-x-1
1 : Lambda40635Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda40636Var : BV:32
17 : Lambda40637Var : BV:32
18 : bvule(2, 16) : BOOL
19 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
20 : bvule(16, 19) : BOOL
21 : and(18, 20) : BOOL
22 : bvule(8, 16) : BOOL
23 : bvule(16, 8) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(4, 16) : BOOL
26 : bvule(16, 4) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 4, 4) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(21, 2, 29) : BV:32
31 : eq(30, 4) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvule(35, 17) : BOOL
37 : bvule(17, 35) : BOOL
38 : and(36, 37) : BOOL
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvule(39, 17) : BOOL
41 : bvule(17, 8) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 39, 39) : BV:32
44 : ite(38, 35, 43) : BV:32
45 : ite(34, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(31, 46) : BOOL
48 : eq(30, 2) : BOOL
49 : and(48, 46) : BOOL
50 : ite(49, 7, 12) : BOOL
51 : ite(47, 7, 50) : BOOL
52 : lambda(17, 51) : FUNCTION[BV:32 -> BOOL]
53 : Lambda40638Var : BV:32
54 : eq(16, 4) : BOOL
55 : eq(53, 2) : BOOL
56 : and(54, 55) : BOOL
57 : eq(16, 2) : BOOL
58 : and(57, 55) : BOOL
59 : and(18, 26) : BOOL
60 : ite(24, 12, 12) : BOOL
61 : ite(59, 7, 60) : BOOL
62 : bvule(2, 53) : BOOL
63 : bvule(53, 2) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(35, 53) : BOOL
66 : bvule(53, 35) : BOOL
67 : and(65, 66) : BOOL
68 : bvule(39, 53) : BOOL
69 : bvule(53, 8) : BOOL
70 : and(68, 69) : BOOL
71 : ite(70, 39, 39) : BV:32
72 : ite(67, 35, 71) : BV:32
73 : ite(64, 2, 72) : BV:32
74 : eq(73, 2) : BOOL
75 : and(31, 74) : BOOL
76 : and(48, 74) : BOOL
77 : ite(76, 7, 12) : BOOL
78 : ite(75, 7, 77) : BOOL
79 : and(61, 78) : BOOL
80 : 3 { 0x3 +1.35e129 } : BV:32
81 : 4 { 0x4 +1.47e129 } : BV:32
82 : bvmul(81, 53) : BV:32
83 : bvmul(81, 16) : BV:32
84 : bvadd(80, 83) : BV:32
85 : eq(84, 2) : BOOL
86 : 208 { 0xd0 -48 } : BV:8
87 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
88 : eq(84, 87) : BOOL
89 : 235 { 0xeb -21 } : BV:8
90 : eq(84, 80) : BOOL
91 : 247 { 0xf7 -9 } : BV:8
92 : eq(84, 35) : BOOL
93 : 207 { 0xcf -49 } : BV:8
94 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
95 : eq(84, 94) : BOOL
96 : 68 { 0x44 } : BV:8
97 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
98 : eq(84, 97) : BOOL
99 : 114 { 0x72 } : BV:8
100 : eq(84, 39) : BOOL
101 : 250 { 0xfa -6 } : BV:8
102 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
103 : eq(84, 102) : BOOL
104 : 164 { 0xa4 -92 } : BV:8
105 : 0 { 0x0 } : BV:8
106 : ite(103, 104, 105) : BV:8
107 : ite(100, 101, 106) : BV:8
108 : ite(98, 99, 107) : BV:8
109 : ite(95, 96, 108) : BV:8
110 : ite(92, 93, 109) : BV:8
111 : ite(90, 91, 110) : BV:8
112 : ite(88, 89, 111) : BV:8
113 : ite(85, 86, 112) : BV:8
114 : bvadd(39, 83) : BV:32
115 : eq(114, 2) : BOOL
116 : eq(114, 87) : BOOL
117 : eq(114, 80) : BOOL
118 : eq(114, 35) : BOOL
119 : eq(114, 94) : BOOL
120 : eq(114, 97) : BOOL
121 : eq(114, 39) : BOOL
122 : eq(114, 102) : BOOL
123 : ite(122, 104, 105) : BV:8
124 : ite(121, 101, 123) : BV:8
125 : ite(120, 99, 124) : BV:8
126 : ite(119, 96, 125) : BV:8
127 : ite(118, 93, 126) : BV:8
128 : ite(117, 91, 127) : BV:8
129 : ite(116, 89, 128) : BV:8
130 : ite(115, 86, 129) : BV:8
131 : bvadd(35, 83) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 87) : BOOL
134 : eq(131, 80) : BOOL
135 : eq(131, 35) : BOOL
136 : eq(131, 94) : BOOL
137 : eq(131, 97) : BOOL
138 : eq(131, 39) : BOOL
139 : eq(131, 102) : BOOL
140 : ite(139, 104, 105) : BV:8
141 : ite(138, 101, 140) : BV:8
142 : ite(137, 99, 141) : BV:8
143 : ite(136, 96, 142) : BV:8
144 : ite(135, 93, 143) : BV:8
145 : ite(134, 91, 144) : BV:8
146 : ite(133, 89, 145) : BV:8
147 : ite(132, 86, 146) : BV:8
148 : eq(83, 2) : BOOL
149 : eq(83, 87) : BOOL
150 : eq(83, 80) : BOOL
151 : eq(83, 35) : BOOL
152 : eq(83, 94) : BOOL
153 : eq(83, 97) : BOOL
154 : eq(83, 39) : BOOL
155 : eq(83, 102) : BOOL
156 : ite(155, 104, 105) : BV:8
157 : ite(154, 101, 156) : BV:8
158 : ite(153, 99, 157) : BV:8
159 : ite(152, 96, 158) : BV:8
160 : ite(151, 93, 159) : BV:8
161 : ite(150, 91, 160) : BV:8
162 : ite(149, 89, 161) : BV:8
163 : ite(148, 86, 162) : BV:8
164 : bvconcat(113, 130, 147, 163) : BV:32
165 : bvadd(80, 82, 164) : BV:32
166 : eq(165, 2) : BOOL
167 : eq(165, 87) : BOOL
168 : eq(165, 80) : BOOL
169 : eq(165, 35) : BOOL
170 : eq(165, 94) : BOOL
171 : eq(165, 97) : BOOL
172 : eq(165, 39) : BOOL
173 : eq(165, 102) : BOOL
174 : ite(173, 104, 105) : BV:8
175 : ite(172, 101, 174) : BV:8
176 : ite(171, 99, 175) : BV:8
177 : ite(170, 96, 176) : BV:8
178 : ite(169, 93, 177) : BV:8
179 : ite(168, 91, 178) : BV:8
180 : ite(167, 89, 179) : BV:8
181 : ite(166, 86, 180) : BV:8
182 : bvadd(39, 82, 164) : BV:32
183 : eq(182, 2) : BOOL
184 : eq(182, 87) : BOOL
185 : eq(182, 80) : BOOL
186 : eq(182, 35) : BOOL
187 : eq(182, 94) : BOOL
188 : eq(182, 97) : BOOL
189 : eq(182, 39) : BOOL
190 : eq(182, 102) : BOOL
191 : ite(190, 104, 105) : BV:8
192 : ite(189, 101, 191) : BV:8
193 : ite(188, 99, 192) : BV:8
194 : ite(187, 96, 193) : BV:8
195 : ite(186, 93, 194) : BV:8
196 : ite(185, 91, 195) : BV:8
197 : ite(184, 89, 196) : BV:8
198 : ite(183, 86, 197) : BV:8
199 : bvadd(35, 82, 164) : BV:32
200 : eq(199, 2) : BOOL
201 : eq(199, 87) : BOOL
202 : eq(199, 80) : BOOL
203 : eq(199, 35) : BOOL
204 : eq(199, 94) : BOOL
205 : eq(199, 97) : BOOL
206 : eq(199, 39) : BOOL
207 : eq(199, 102) : BOOL
208 : ite(207, 104, 105) : BV:8
209 : ite(206, 101, 208) : BV:8
210 : ite(205, 99, 209) : BV:8
211 : ite(204, 96, 210) : BV:8
212 : ite(203, 93, 211) : BV:8
213 : ite(202, 91, 212) : BV:8
214 : ite(201, 89, 213) : BV:8
215 : ite(200, 86, 214) : BV:8
216 : bvadd(82, 164) : BV:32
217 : eq(216, 2) : BOOL
218 : eq(216, 87) : BOOL
219 : eq(216, 80) : BOOL
220 : eq(216, 35) : BOOL
221 : eq(216, 94) : BOOL
222 : eq(216, 97) : BOOL
223 : eq(216, 39) : BOOL
224 : eq(216, 102) : BOOL
225 : ite(224, 104, 105) : BV:8
226 : ite(223, 101, 225) : BV:8
227 : ite(222, 99, 226) : BV:8
228 : ite(221, 96, 227) : BV:8
229 : ite(220, 93, 228) : BV:8
230 : ite(219, 91, 229) : BV:8
231 : ite(218, 89, 230) : BV:8
232 : ite(217, 86, 231) : BV:8
233 : bvconcat(181, 198, 215, 232) : BV:32
234 : ite(58, 2, 233) : BV:32
235 : ite(56, 2, 234) : BV:32
236 : ite(79, 233, 235) : BV:32
237 : ite(58, 2, 236) : BV:32
238 : ite(56, 2, 237) : BV:32
239 : lambda(53, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(52, 239) : MAP[BV:32 -> BV:32]
241 : lambda(16, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(15, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda40648Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda40649Var : BV:32
17 : Lambda40650Var : BV:32
18 : bvule(2, 16) : BOOL
19 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
20 : bvule(16, 19) : BOOL
21 : and(18, 20) : BOOL
22 : bvule(8, 16) : BOOL
23 : bvule(16, 8) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(4, 16) : BOOL
26 : bvule(16, 4) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 4, 4) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(21, 2, 29) : BV:32
31 : eq(30, 4) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvule(35, 17) : BOOL
37 : bvule(17, 35) : BOOL
38 : and(36, 37) : BOOL
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvule(39, 17) : BOOL
41 : bvule(17, 8) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 39, 39) : BV:32
44 : ite(38, 35, 43) : BV:32
45 : ite(34, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(31, 46) : BOOL
48 : eq(30, 2) : BOOL
49 : and(48, 46) : BOOL
50 : ite(49, 7, 12) : BOOL
51 : ite(47, 7, 50) : BOOL
52 : lambda(17, 51) : FUNCTION[BV:32 -> BOOL]
53 : Lambda40651Var : BV:32
54 : eq(16, 4) : BOOL
55 : eq(53, 2) : BOOL
56 : and(54, 55) : BOOL
57 : eq(16, 2) : BOOL
58 : and(57, 55) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 53) : BV:32
62 : bvmul(60, 16) : BV:32
63 : bvadd(59, 62) : BV:32
64 : eq(63, 2) : BOOL
65 : 208 { 0xd0 -48 } : BV:8
66 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
67 : eq(63, 66) : BOOL
68 : 235 { 0xeb -21 } : BV:8
69 : eq(63, 59) : BOOL
70 : 247 { 0xf7 -9 } : BV:8
71 : eq(63, 35) : BOOL
72 : 207 { 0xcf -49 } : BV:8
73 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
74 : eq(63, 73) : BOOL
75 : 68 { 0x44 } : BV:8
76 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
77 : eq(63, 76) : BOOL
78 : 114 { 0x72 } : BV:8
79 : eq(63, 39) : BOOL
80 : 250 { 0xfa -6 } : BV:8
81 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
82 : eq(63, 81) : BOOL
83 : 164 { 0xa4 -92 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(67, 68, 90) : BV:8
92 : ite(64, 65, 91) : BV:8
93 : bvadd(39, 62) : BV:32
94 : eq(93, 2) : BOOL
95 : eq(93, 66) : BOOL
96 : eq(93, 59) : BOOL
97 : eq(93, 35) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 39) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 70, 106) : BV:8
108 : ite(95, 68, 107) : BV:8
109 : ite(94, 65, 108) : BV:8
110 : bvadd(35, 62) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 66) : BOOL
113 : eq(110, 59) : BOOL
114 : eq(110, 35) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 39) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 70, 123) : BV:8
125 : ite(112, 68, 124) : BV:8
126 : ite(111, 65, 125) : BV:8
127 : eq(62, 2) : BOOL
128 : eq(62, 66) : BOOL
129 : eq(62, 59) : BOOL
130 : eq(62, 35) : BOOL
131 : eq(62, 73) : BOOL
132 : eq(62, 76) : BOOL
133 : eq(62, 39) : BOOL
134 : eq(62, 81) : BOOL
135 : ite(134, 83, 84) : BV:8
136 : ite(133, 80, 135) : BV:8
137 : ite(132, 78, 136) : BV:8
138 : ite(131, 75, 137) : BV:8
139 : ite(130, 72, 138) : BV:8
140 : ite(129, 70, 139) : BV:8
141 : ite(128, 68, 140) : BV:8
142 : ite(127, 65, 141) : BV:8
143 : bvconcat(92, 109, 126, 142) : BV:32
144 : bvadd(59, 61, 143) : BV:32
145 : eq(144, 2) : BOOL
146 : eq(144, 66) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 35) : BOOL
149 : eq(144, 73) : BOOL
150 : eq(144, 76) : BOOL
151 : eq(144, 39) : BOOL
152 : eq(144, 81) : BOOL
153 : ite(152, 83, 84) : BV:8
154 : ite(151, 80, 153) : BV:8
155 : ite(150, 78, 154) : BV:8
156 : ite(149, 75, 155) : BV:8
157 : ite(148, 72, 156) : BV:8
158 : ite(147, 70, 157) : BV:8
159 : ite(146, 68, 158) : BV:8
160 : ite(145, 65, 159) : BV:8
161 : bvadd(39, 61, 143) : BV:32
162 : eq(161, 2) : BOOL
163 : eq(161, 66) : BOOL
164 : eq(161, 59) : BOOL
165 : eq(161, 35) : BOOL
166 : eq(161, 73) : BOOL
167 : eq(161, 76) : BOOL
168 : eq(161, 39) : BOOL
169 : eq(161, 81) : BOOL
170 : ite(169, 83, 84) : BV:8
171 : ite(168, 80, 170) : BV:8
172 : ite(167, 78, 171) : BV:8
173 : ite(166, 75, 172) : BV:8
174 : ite(165, 72, 173) : BV:8
175 : ite(164, 70, 174) : BV:8
176 : ite(163, 68, 175) : BV:8
177 : ite(162, 65, 176) : BV:8
178 : bvadd(35, 61, 143) : BV:32
179 : eq(178, 2) : BOOL
180 : eq(178, 66) : BOOL
181 : eq(178, 59) : BOOL
182 : eq(178, 35) : BOOL
183 : eq(178, 73) : BOOL
184 : eq(178, 76) : BOOL
185 : eq(178, 39) : BOOL
186 : eq(178, 81) : BOOL
187 : ite(186, 83, 84) : BV:8
188 : ite(185, 80, 187) : BV:8
189 : ite(184, 78, 188) : BV:8
190 : ite(183, 75, 189) : BV:8
191 : ite(182, 72, 190) : BV:8
192 : ite(181, 70, 191) : BV:8
193 : ite(180, 68, 192) : BV:8
194 : ite(179, 65, 193) : BV:8
195 : bvadd(61, 143) : BV:32
196 : eq(195, 2) : BOOL
197 : eq(195, 66) : BOOL
198 : eq(195, 59) : BOOL
199 : eq(195, 35) : BOOL
200 : eq(195, 73) : BOOL
201 : eq(195, 76) : BOOL
202 : eq(195, 39) : BOOL
203 : eq(195, 81) : BOOL
204 : ite(203, 83, 84) : BV:8
205 : ite(202, 80, 204) : BV:8
206 : ite(201, 78, 205) : BV:8
207 : ite(200, 75, 206) : BV:8
208 : ite(199, 72, 207) : BV:8
209 : ite(198, 70, 208) : BV:8
210 : ite(197, 68, 209) : BV:8
211 : ite(196, 65, 210) : BV:8
212 : bvconcat(160, 177, 194, 211) : BV:32
213 : ite(58, 2, 212) : BV:32
214 : ite(56, 2, 213) : BV:32
215 : lambda(53, 214) : FUNCTION[BV:32 -> BV:32]
216 : map(52, 215) : MAP[BV:32 -> BV:32]
217 : lambda(16, 216) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
218 : map(15, 217) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
219 : sym_const(218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 208, [ 1; 1 ] -> 207, [ 2; 2 ] -> 250, [ 3; 3 ] -> 247, [ 4; 4294967287 ] -> 0, [ 4294967288; 4294967288 ] -> 164, [ 4294967289; 4294967289 ] -> 114, [ 4294967290; 4294967290 ] -> 235, [ 4294967291; 4294967291 ] -> 68, [ 4294967292; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1028227331 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1028227332; 1028227335 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1028227336; 2755312747 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2755312748; 2755312751 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2755312752; 3066432979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3066432980; 3066432983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3066432984; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1028227332 { 0x3d498104 +1.57424974e251 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2755312748 { 0xa43abc6c -1539654548 -1.45887517e201 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3066432980 { 0xb6c60dd4 -1228534316 -1.54729700e238 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda40742Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : bvule(3, 3) : BOOL
13 : and(12, 12) : BOOL
14 : ite(13, 3, 3) : BV:32
15 : ite(11, 8, 14) : BV:32
16 : ite(7, 2, 15) : BV:32
17 : eq(16, 3) : BOOL
18 : bvule(2, 1) : BOOL
19 : bvule(1, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : bvule(1, 21) : BOOL
24 : and(22, 23) : BOOL
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 21, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(17, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : eq(16, 2) : BOOL
36 : and(35, 32) : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(36, 34, 37) : BOOL
39 : ite(33, 34, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda40743Var : BV:32
42 : eq(3, 3) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : eq(3, 2) : BOOL
46 : and(45, 43) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 41) : BV:32
50 : bvmul(48, 3) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 2) : BOOL
53 : 208 { 0xd0 -48 } : BV:8
54 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
55 : eq(51, 54) : BOOL
56 : 235 { 0xeb -21 } : BV:8
57 : eq(51, 47) : BOOL
58 : 247 { 0xf7 -9 } : BV:8
59 : eq(51, 21) : BOOL
60 : 207 { 0xcf -49 } : BV:8
61 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
62 : eq(51, 61) : BOOL
63 : 68 { 0x44 } : BV:8
64 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
65 : eq(51, 64) : BOOL
66 : 114 { 0x72 } : BV:8
67 : eq(51, 25) : BOOL
68 : 250 { 0xfa -6 } : BV:8
69 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 164 { 0xa4 -92 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(65, 66, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(57, 58, 77) : BV:8
79 : ite(55, 56, 78) : BV:8
80 : ite(52, 53, 79) : BV:8
81 : bvadd(25, 50) : BV:32
82 : eq(81, 2) : BOOL
83 : eq(81, 54) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 61) : BOOL
87 : eq(81, 64) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 69) : BOOL
90 : ite(89, 71, 72) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : ite(85, 60, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : ite(82, 53, 96) : BV:8
98 : bvadd(21, 50) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 54) : BOOL
101 : eq(98, 47) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 61) : BOOL
104 : eq(98, 64) : BOOL
105 : eq(98, 25) : BOOL
106 : eq(98, 69) : BOOL
107 : ite(106, 71, 72) : BV:8
108 : ite(105, 68, 107) : BV:8
109 : ite(104, 66, 108) : BV:8
110 : ite(103, 63, 109) : BV:8
111 : ite(102, 60, 110) : BV:8
112 : ite(101, 58, 111) : BV:8
113 : ite(100, 56, 112) : BV:8
114 : ite(99, 53, 113) : BV:8
115 : eq(50, 2) : BOOL
116 : eq(50, 54) : BOOL
117 : eq(50, 47) : BOOL
118 : eq(50, 21) : BOOL
119 : eq(50, 61) : BOOL
120 : eq(50, 64) : BOOL
121 : eq(50, 25) : BOOL
122 : eq(50, 69) : BOOL
123 : ite(122, 71, 72) : BV:8
124 : ite(121, 68, 123) : BV:8
125 : ite(120, 66, 124) : BV:8
126 : ite(119, 63, 125) : BV:8
127 : ite(118, 60, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 56, 128) : BV:8
130 : ite(115, 53, 129) : BV:8
131 : bvconcat(80, 97, 114, 130) : BV:32
132 : bvadd(47, 49, 131) : BV:32
133 : eq(132, 2) : BOOL
134 : eq(132, 54) : BOOL
135 : eq(132, 47) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 61) : BOOL
138 : eq(132, 64) : BOOL
139 : eq(132, 25) : BOOL
140 : eq(132, 69) : BOOL
141 : ite(140, 71, 72) : BV:8
142 : ite(139, 68, 141) : BV:8
143 : ite(138, 66, 142) : BV:8
144 : ite(137, 63, 143) : BV:8
145 : ite(136, 60, 144) : BV:8
146 : ite(135, 58, 145) : BV:8
147 : ite(134, 56, 146) : BV:8
148 : ite(133, 53, 147) : BV:8
149 : bvadd(25, 49, 131) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 54) : BOOL
152 : eq(149, 47) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 61) : BOOL
155 : eq(149, 64) : BOOL
156 : eq(149, 25) : BOOL
157 : eq(149, 69) : BOOL
158 : ite(157, 71, 72) : BV:8
159 : ite(156, 68, 158) : BV:8
160 : ite(155, 66, 159) : BV:8
161 : ite(154, 63, 160) : BV:8
162 : ite(153, 60, 161) : BV:8
163 : ite(152, 58, 162) : BV:8
164 : ite(151, 56, 163) : BV:8
165 : ite(150, 53, 164) : BV:8
166 : bvadd(21, 49, 131) : BV:32
167 : eq(166, 2) : BOOL
168 : eq(166, 54) : BOOL
169 : eq(166, 47) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 61) : BOOL
172 : eq(166, 64) : BOOL
173 : eq(166, 25) : BOOL
174 : eq(166, 69) : BOOL
175 : ite(174, 71, 72) : BV:8
176 : ite(173, 68, 175) : BV:8
177 : ite(172, 66, 176) : BV:8
178 : ite(171, 63, 177) : BV:8
179 : ite(170, 60, 178) : BV:8
180 : ite(169, 58, 179) : BV:8
181 : ite(168, 56, 180) : BV:8
182 : ite(167, 53, 181) : BV:8
183 : bvadd(49, 131) : BV:32
184 : eq(183, 2) : BOOL
185 : eq(183, 54) : BOOL
186 : eq(183, 47) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 61) : BOOL
189 : eq(183, 64) : BOOL
190 : eq(183, 25) : BOOL
191 : eq(183, 69) : BOOL
192 : ite(191, 71, 72) : BV:8
193 : ite(190, 68, 192) : BV:8
194 : ite(189, 66, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 60, 195) : BV:8
197 : ite(186, 58, 196) : BV:8
198 : ite(185, 56, 197) : BV:8
199 : ite(184, 53, 198) : BV:8
200 : bvconcat(148, 165, 182, 199) : BV:32
201 : ite(46, 2, 200) : BV:32
202 : ite(44, 2, 201) : BV:32
203 : lambda(41, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(40, 203) : MAP[BV:32 -> BV:32]
205 : sym_const(204) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : bvule(2, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 0 { 0x0 } : BOOL
12 : ite(10, 11, 11) : BOOL
13 : ite(5, 6, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : ite(13, 14, 1) : BV:32
16 : unit : UNIT
17 : Lambda40732Var : BV:32
18 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
19 : bvule(2, 18) : BOOL
20 : and(3, 19) : BOOL
21 : and(4, 4) : BOOL
22 : ite(21, 2, 2) : BV:32
23 : ite(10, 7, 22) : BV:32
24 : ite(20, 1, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(1, 17) : BOOL
27 : bvule(17, 1) : BOOL
28 : and(26, 27) : BOOL
29 : bvule(14, 17) : BOOL
30 : bvule(17, 14) : BOOL
31 : and(29, 30) : BOOL
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvule(32, 17) : BOOL
34 : bvule(17, 7) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 32, 32) : BV:32
37 : ite(31, 14, 36) : BV:32
38 : ite(28, 1, 37) : BV:32
39 : eq(38, 1) : BOOL
40 : and(25, 39) : BOOL
41 : eq(24, 1) : BOOL
42 : and(41, 39) : BOOL
43 : ite(42, 6, 11) : BOOL
44 : ite(40, 6, 43) : BOOL
45 : lambda(17, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda40733Var : BV:32
47 : eq(2, 2) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : eq(2, 1) : BOOL
51 : and(50, 48) : BOOL
52 : 3 { 0x3 +1.35e129 } : BV:32
53 : 4 { 0x4 +1.47e129 } : BV:32
54 : bvmul(53, 46) : BV:32
55 : bvmul(53, 2) : BV:32
56 : bvadd(52, 55) : BV:32
57 : eq(56, 1) : BOOL
58 : 208 { 0xd0 -48 } : BV:8
59 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
60 : eq(56, 59) : BOOL
61 : 235 { 0xeb -21 } : BV:8
62 : eq(56, 52) : BOOL
63 : 247 { 0xf7 -9 } : BV:8
64 : eq(56, 14) : BOOL
65 : 207 { 0xcf -49 } : BV:8
66 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
67 : eq(56, 66) : BOOL
68 : 68 { 0x44 } : BV:8
69 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
70 : eq(56, 69) : BOOL
71 : 114 { 0x72 } : BV:8
72 : eq(56, 32) : BOOL
73 : 250 { 0xfa -6 } : BV:8
74 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
75 : eq(56, 74) : BOOL
76 : 164 { 0xa4 -92 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(70, 71, 79) : BV:8
81 : ite(67, 68, 80) : BV:8
82 : ite(64, 65, 81) : BV:8
83 : ite(62, 63, 82) : BV:8
84 : ite(60, 61, 83) : BV:8
85 : ite(57, 58, 84) : BV:8
86 : bvadd(32, 55) : BV:32
87 : eq(86, 1) : BOOL
88 : eq(86, 59) : BOOL
89 : eq(86, 52) : BOOL
90 : eq(86, 14) : BOOL
91 : eq(86, 66) : BOOL
92 : eq(86, 69) : BOOL
93 : eq(86, 32) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 71, 96) : BV:8
98 : ite(91, 68, 97) : BV:8
99 : ite(90, 65, 98) : BV:8
100 : ite(89, 63, 99) : BV:8
101 : ite(88, 61, 100) : BV:8
102 : ite(87, 58, 101) : BV:8
103 : bvadd(14, 55) : BV:32
104 : eq(103, 1) : BOOL
105 : eq(103, 59) : BOOL
106 : eq(103, 52) : BOOL
107 : eq(103, 14) : BOOL
108 : eq(103, 66) : BOOL
109 : eq(103, 69) : BOOL
110 : eq(103, 32) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 71, 113) : BV:8
115 : ite(108, 68, 114) : BV:8
116 : ite(107, 65, 115) : BV:8
117 : ite(106, 63, 116) : BV:8
118 : ite(105, 61, 117) : BV:8
119 : ite(104, 58, 118) : BV:8
120 : eq(55, 1) : BOOL
121 : eq(55, 59) : BOOL
122 : eq(55, 52) : BOOL
123 : eq(55, 14) : BOOL
124 : eq(55, 66) : BOOL
125 : eq(55, 69) : BOOL
126 : eq(55, 32) : BOOL
127 : eq(55, 74) : BOOL
128 : ite(127, 76, 77) : BV:8
129 : ite(126, 73, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : ite(124, 68, 130) : BV:8
132 : ite(123, 65, 131) : BV:8
133 : ite(122, 63, 132) : BV:8
134 : ite(121, 61, 133) : BV:8
135 : ite(120, 58, 134) : BV:8
136 : bvconcat(85, 102, 119, 135) : BV:32
137 : bvadd(52, 54, 136) : BV:32
138 : eq(137, 1) : BOOL
139 : eq(137, 59) : BOOL
140 : eq(137, 52) : BOOL
141 : eq(137, 14) : BOOL
142 : eq(137, 66) : BOOL
143 : eq(137, 69) : BOOL
144 : eq(137, 32) : BOOL
145 : eq(137, 74) : BOOL
146 : ite(145, 76, 77) : BV:8
147 : ite(144, 73, 146) : BV:8
148 : ite(143, 71, 147) : BV:8
149 : ite(142, 68, 148) : BV:8
150 : ite(141, 65, 149) : BV:8
151 : ite(140, 63, 150) : BV:8
152 : ite(139, 61, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : bvadd(32, 54, 136) : BV:32
155 : eq(154, 1) : BOOL
156 : eq(154, 59) : BOOL
157 : eq(154, 52) : BOOL
158 : eq(154, 14) : BOOL
159 : eq(154, 66) : BOOL
160 : eq(154, 69) : BOOL
161 : eq(154, 32) : BOOL
162 : eq(154, 74) : BOOL
163 : ite(162, 76, 77) : BV:8
164 : ite(161, 73, 163) : BV:8
165 : ite(160, 71, 164) : BV:8
166 : ite(159, 68, 165) : BV:8
167 : ite(158, 65, 166) : BV:8
168 : ite(157, 63, 167) : BV:8
169 : ite(156, 61, 168) : BV:8
170 : ite(155, 58, 169) : BV:8
171 : bvadd(14, 54, 136) : BV:32
172 : eq(171, 1) : BOOL
173 : eq(171, 59) : BOOL
174 : eq(171, 52) : BOOL
175 : eq(171, 14) : BOOL
176 : eq(171, 66) : BOOL
177 : eq(171, 69) : BOOL
178 : eq(171, 32) : BOOL
179 : eq(171, 74) : BOOL
180 : ite(179, 76, 77) : BV:8
181 : ite(178, 73, 180) : BV:8
182 : ite(177, 71, 181) : BV:8
183 : ite(176, 68, 182) : BV:8
184 : ite(175, 65, 183) : BV:8
185 : ite(174, 63, 184) : BV:8
186 : ite(173, 61, 185) : BV:8
187 : ite(172, 58, 186) : BV:8
188 : bvadd(54, 136) : BV:32
189 : eq(188, 1) : BOOL
190 : eq(188, 59) : BOOL
191 : eq(188, 52) : BOOL
192 : eq(188, 14) : BOOL
193 : eq(188, 66) : BOOL
194 : eq(188, 69) : BOOL
195 : eq(188, 32) : BOOL
196 : eq(188, 74) : BOOL
197 : ite(196, 76, 77) : BV:8
198 : ite(195, 73, 197) : BV:8
199 : ite(194, 71, 198) : BV:8
200 : ite(193, 68, 199) : BV:8
201 : ite(192, 65, 200) : BV:8
202 : ite(191, 63, 201) : BV:8
203 : ite(190, 61, 202) : BV:8
204 : ite(189, 58, 203) : BV:8
205 : bvconcat(153, 170, 187, 204) : BV:32
206 : ite(51, 1, 205) : BV:32
207 : ite(49, 1, 206) : BV:32
208 : lambda(46, 207) : FUNCTION[BV:32 -> BV:32]
209 : map(45, 208) : MAP[BV:32 -> BV:32]
210 : sum(15, 16, 209) : SUM[UNIT,MAP[BV:32 -> BV:32]]
211 : sym_const(210) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda40748Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : bvule(3, 3) : BOOL
13 : and(12, 12) : BOOL
14 : ite(13, 3, 3) : BV:32
15 : ite(11, 8, 14) : BV:32
16 : ite(7, 2, 15) : BV:32
17 : eq(16, 3) : BOOL
18 : bvule(2, 1) : BOOL
19 : bvule(1, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : bvule(1, 21) : BOOL
24 : and(22, 23) : BOOL
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 21, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(17, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : eq(16, 2) : BOOL
36 : and(35, 32) : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(36, 34, 37) : BOOL
39 : ite(33, 34, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda40749Var : BV:32
42 : eq(3, 3) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : eq(3, 2) : BOOL
46 : and(45, 43) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 41) : BV:32
50 : bvmul(48, 3) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 2) : BOOL
53 : 208 { 0xd0 -48 } : BV:8
54 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
55 : eq(51, 54) : BOOL
56 : 235 { 0xeb -21 } : BV:8
57 : eq(51, 47) : BOOL
58 : 247 { 0xf7 -9 } : BV:8
59 : eq(51, 21) : BOOL
60 : 207 { 0xcf -49 } : BV:8
61 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
62 : eq(51, 61) : BOOL
63 : 68 { 0x44 } : BV:8
64 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
65 : eq(51, 64) : BOOL
66 : 114 { 0x72 } : BV:8
67 : eq(51, 25) : BOOL
68 : 250 { 0xfa -6 } : BV:8
69 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 164 { 0xa4 -92 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(65, 66, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(57, 58, 77) : BV:8
79 : ite(55, 56, 78) : BV:8
80 : ite(52, 53, 79) : BV:8
81 : bvadd(25, 50) : BV:32
82 : eq(81, 2) : BOOL
83 : eq(81, 54) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 61) : BOOL
87 : eq(81, 64) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 69) : BOOL
90 : ite(89, 71, 72) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : ite(85, 60, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : ite(82, 53, 96) : BV:8
98 : bvadd(21, 50) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 54) : BOOL
101 : eq(98, 47) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 61) : BOOL
104 : eq(98, 64) : BOOL
105 : eq(98, 25) : BOOL
106 : eq(98, 69) : BOOL
107 : ite(106, 71, 72) : BV:8
108 : ite(105, 68, 107) : BV:8
109 : ite(104, 66, 108) : BV:8
110 : ite(103, 63, 109) : BV:8
111 : ite(102, 60, 110) : BV:8
112 : ite(101, 58, 111) : BV:8
113 : ite(100, 56, 112) : BV:8
114 : ite(99, 53, 113) : BV:8
115 : eq(50, 2) : BOOL
116 : eq(50, 54) : BOOL
117 : eq(50, 47) : BOOL
118 : eq(50, 21) : BOOL
119 : eq(50, 61) : BOOL
120 : eq(50, 64) : BOOL
121 : eq(50, 25) : BOOL
122 : eq(50, 69) : BOOL
123 : ite(122, 71, 72) : BV:8
124 : ite(121, 68, 123) : BV:8
125 : ite(120, 66, 124) : BV:8
126 : ite(119, 63, 125) : BV:8
127 : ite(118, 60, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 56, 128) : BV:8
130 : ite(115, 53, 129) : BV:8
131 : bvconcat(80, 97, 114, 130) : BV:32
132 : bvadd(47, 49, 131) : BV:32
133 : eq(132, 2) : BOOL
134 : eq(132, 54) : BOOL
135 : eq(132, 47) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 61) : BOOL
138 : eq(132, 64) : BOOL
139 : eq(132, 25) : BOOL
140 : eq(132, 69) : BOOL
141 : ite(140, 71, 72) : BV:8
142 : ite(139, 68, 141) : BV:8
143 : ite(138, 66, 142) : BV:8
144 : ite(137, 63, 143) : BV:8
145 : ite(136, 60, 144) : BV:8
146 : ite(135, 58, 145) : BV:8
147 : ite(134, 56, 146) : BV:8
148 : ite(133, 53, 147) : BV:8
149 : bvadd(25, 49, 131) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 54) : BOOL
152 : eq(149, 47) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 61) : BOOL
155 : eq(149, 64) : BOOL
156 : eq(149, 25) : BOOL
157 : eq(149, 69) : BOOL
158 : ite(157, 71, 72) : BV:8
159 : ite(156, 68, 158) : BV:8
160 : ite(155, 66, 159) : BV:8
161 : ite(154, 63, 160) : BV:8
162 : ite(153, 60, 161) : BV:8
163 : ite(152, 58, 162) : BV:8
164 : ite(151, 56, 163) : BV:8
165 : ite(150, 53, 164) : BV:8
166 : bvadd(21, 49, 131) : BV:32
167 : eq(166, 2) : BOOL
168 : eq(166, 54) : BOOL
169 : eq(166, 47) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 61) : BOOL
172 : eq(166, 64) : BOOL
173 : eq(166, 25) : BOOL
174 : eq(166, 69) : BOOL
175 : ite(174, 71, 72) : BV:8
176 : ite(173, 68, 175) : BV:8
177 : ite(172, 66, 176) : BV:8
178 : ite(171, 63, 177) : BV:8
179 : ite(170, 60, 178) : BV:8
180 : ite(169, 58, 179) : BV:8
181 : ite(168, 56, 180) : BV:8
182 : ite(167, 53, 181) : BV:8
183 : bvadd(49, 131) : BV:32
184 : eq(183, 2) : BOOL
185 : eq(183, 54) : BOOL
186 : eq(183, 47) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 61) : BOOL
189 : eq(183, 64) : BOOL
190 : eq(183, 25) : BOOL
191 : eq(183, 69) : BOOL
192 : ite(191, 71, 72) : BV:8
193 : ite(190, 68, 192) : BV:8
194 : ite(189, 66, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 60, 195) : BV:8
197 : ite(186, 58, 196) : BV:8
198 : ite(185, 56, 197) : BV:8
199 : ite(184, 53, 198) : BV:8
200 : bvconcat(148, 165, 182, 199) : BV:32
201 : ite(46, 2, 200) : BV:32
202 : ite(44, 2, 201) : BV:32
203 : lambda(41, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(40, 203) : MAP[BV:32 -> BV:32]
205 : sym_const(204) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2755312748 { 0xa43abc6c -1539654548 -1.45887517e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2755312751 { 0xa43abc6f -1539654545 -1.45887553e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3066432980 { 0xb6c60dd4 -1228534316 -1.54729700e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3066432983 { 0xb6c60dd7 -1228534313 -1.54729735e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1028227332 { 0x3d498104 +1.57424974e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1028227335 { 0x3d498107 +1.57425010e251 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda40565Var : BV:32
2 : Lambda40566Var : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : bvule(1, 3) : BOOL
12 : and(10, 11) : BOOL
13 : 1 { 0x1 } : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(14, 1) : BOOL
16 : bvule(1, 14) : BOOL
17 : and(15, 16) : BOOL
18 : 0 { 0x0 } : BOOL
19 : ite(17, 18, 18) : BOOL
20 : ite(12, 13, 19) : BOOL
21 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(10, 22) : BOOL
24 : bvule(3, 1) : BOOL
25 : and(24, 11) : BOOL
26 : ite(25, 3, 3) : BV:32
27 : ite(17, 14, 26) : BV:32
28 : ite(23, 5, 27) : BV:32
29 : eq(28, 3) : BOOL
30 : bvule(5, 2) : BOOL
31 : bvule(2, 5) : BOOL
32 : and(30, 31) : BOOL
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 5, 42) : BV:32
44 : eq(43, 5) : BOOL
45 : and(29, 44) : BOOL
46 : eq(28, 5) : BOOL
47 : and(46, 44) : BOOL
48 : ite(47, 13, 18) : BOOL
49 : ite(45, 13, 48) : BOOL
50 : and(20, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 2) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 5) : BOOL
57 : 208 { 0xd0 -48 } : BV:8
58 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
59 : eq(55, 58) : BOOL
60 : 235 { 0xeb -21 } : BV:8
61 : eq(55, 51) : BOOL
62 : 247 { 0xf7 -9 } : BV:8
63 : eq(55, 33) : BOOL
64 : 207 { 0xcf -49 } : BV:8
65 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
66 : eq(55, 65) : BOOL
67 : 68 { 0x44 } : BV:8
68 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
69 : eq(55, 68) : BOOL
70 : 114 { 0x72 } : BV:8
71 : eq(55, 37) : BOOL
72 : 250 { 0xfa -6 } : BV:8
73 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
74 : eq(55, 73) : BOOL
75 : 164 { 0xa4 -92 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(61, 62, 81) : BV:8
83 : ite(59, 60, 82) : BV:8
84 : ite(56, 57, 83) : BV:8
85 : bvadd(37, 54) : BV:32
86 : eq(85, 5) : BOOL
87 : eq(85, 58) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 37) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 72, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 62, 98) : BV:8
100 : ite(87, 60, 99) : BV:8
101 : ite(86, 57, 100) : BV:8
102 : bvadd(33, 54) : BV:32
103 : eq(102, 5) : BOOL
104 : eq(102, 58) : BOOL
105 : eq(102, 51) : BOOL
106 : eq(102, 33) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 37) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 72, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 62, 115) : BV:8
117 : ite(104, 60, 116) : BV:8
118 : ite(103, 57, 117) : BV:8
119 : eq(54, 5) : BOOL
120 : eq(54, 58) : BOOL
121 : eq(54, 51) : BOOL
122 : eq(54, 33) : BOOL
123 : eq(54, 65) : BOOL
124 : eq(54, 68) : BOOL
125 : eq(54, 37) : BOOL
126 : eq(54, 73) : BOOL
127 : ite(126, 75, 76) : BV:8
128 : ite(125, 72, 127) : BV:8
129 : ite(124, 70, 128) : BV:8
130 : ite(123, 67, 129) : BV:8
131 : ite(122, 64, 130) : BV:8
132 : ite(121, 62, 131) : BV:8
133 : ite(120, 60, 132) : BV:8
134 : ite(119, 57, 133) : BV:8
135 : bvconcat(84, 101, 118, 134) : BV:32
136 : bvadd(51, 53, 135) : BV:32
137 : eq(136, 5) : BOOL
138 : eq(136, 58) : BOOL
139 : eq(136, 51) : BOOL
140 : eq(136, 33) : BOOL
141 : eq(136, 65) : BOOL
142 : eq(136, 68) : BOOL
143 : eq(136, 37) : BOOL
144 : eq(136, 73) : BOOL
145 : ite(144, 75, 76) : BV:8
146 : ite(143, 72, 145) : BV:8
147 : ite(142, 70, 146) : BV:8
148 : ite(141, 67, 147) : BV:8
149 : ite(140, 64, 148) : BV:8
150 : ite(139, 62, 149) : BV:8
151 : ite(138, 60, 150) : BV:8
152 : ite(137, 57, 151) : BV:8
153 : bvadd(37, 53, 135) : BV:32
154 : eq(153, 5) : BOOL
155 : eq(153, 58) : BOOL
156 : eq(153, 51) : BOOL
157 : eq(153, 33) : BOOL
158 : eq(153, 65) : BOOL
159 : eq(153, 68) : BOOL
160 : eq(153, 37) : BOOL
161 : eq(153, 73) : BOOL
162 : ite(161, 75, 76) : BV:8
163 : ite(160, 72, 162) : BV:8
164 : ite(159, 70, 163) : BV:8
165 : ite(158, 67, 164) : BV:8
166 : ite(157, 64, 165) : BV:8
167 : ite(156, 62, 166) : BV:8
168 : ite(155, 60, 167) : BV:8
169 : ite(154, 57, 168) : BV:8
170 : bvadd(33, 53, 135) : BV:32
171 : eq(170, 5) : BOOL
172 : eq(170, 58) : BOOL
173 : eq(170, 51) : BOOL
174 : eq(170, 33) : BOOL
175 : eq(170, 65) : BOOL
176 : eq(170, 68) : BOOL
177 : eq(170, 37) : BOOL
178 : eq(170, 73) : BOOL
179 : ite(178, 75, 76) : BV:8
180 : ite(177, 72, 179) : BV:8
181 : ite(176, 70, 180) : BV:8
182 : ite(175, 67, 181) : BV:8
183 : ite(174, 64, 182) : BV:8
184 : ite(173, 62, 183) : BV:8
185 : ite(172, 60, 184) : BV:8
186 : ite(171, 57, 185) : BV:8
187 : bvadd(53, 135) : BV:32
188 : eq(187, 5) : BOOL
189 : eq(187, 58) : BOOL
190 : eq(187, 51) : BOOL
191 : eq(187, 33) : BOOL
192 : eq(187, 65) : BOOL
193 : eq(187, 68) : BOOL
194 : eq(187, 37) : BOOL
195 : eq(187, 73) : BOOL
196 : ite(195, 75, 76) : BV:8
197 : ite(194, 72, 196) : BV:8
198 : ite(193, 70, 197) : BV:8
199 : ite(192, 67, 198) : BV:8
200 : ite(191, 64, 199) : BV:8
201 : ite(190, 62, 200) : BV:8
202 : ite(189, 60, 201) : BV:8
203 : ite(188, 57, 202) : BV:8
204 : bvconcat(152, 169, 186, 203) : BV:32
205 : ite(9, 5, 204) : BV:32
206 : ite(7, 5, 205) : BV:32
207 : ite(50, 204, 206) : BV:32
208 : ite(9, 5, 207) : BV:32
209 : ite(7, 5, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda40570Var : BV:32
2 : Lambda40571Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
13 : bvule(12, 1) : BOOL
14 : bvule(1, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 8, 16) : BV:32
18 : ite(7, 3, 17) : BV:32
19 : eq(18, 12) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 2) : BOOL
25 : bvule(2, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : bvule(2, 8) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : eq(18, 3) : BOOL
38 : and(37, 34) : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(38, 36, 39) : BOOL
41 : ite(35, 36, 40) : BOOL
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BOOL]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda40579Var : BV:32
2 : Lambda40580Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
13 : bvule(12, 1) : BOOL
14 : bvule(1, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 8, 16) : BV:32
18 : ite(7, 3, 17) : BV:32
19 : eq(18, 12) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 2) : BOOL
25 : bvule(2, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : bvule(2, 8) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : eq(18, 3) : BOOL
38 : and(37, 34) : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(38, 36, 39) : BOOL
41 : ite(35, 36, 40) : BOOL
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BOOL]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda40575Var : BV:32
2 : Lambda40576Var : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : eq(14, 5) : BOOL
16 : 208 { 0xd0 -48 } : BV:8
17 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
18 : eq(14, 17) : BOOL
19 : 235 { 0xeb -21 } : BV:8
20 : eq(14, 10) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(14, 22) : BOOL
24 : 207 { 0xcf -49 } : BV:8
25 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
26 : eq(14, 25) : BOOL
27 : 68 { 0x44 } : BV:8
28 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
29 : eq(14, 28) : BOOL
30 : 114 { 0x72 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 250 { 0xfa -6 } : BV:8
34 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
35 : eq(14, 34) : BOOL
36 : 164 { 0xa4 -92 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : bvadd(31, 13) : BV:32
47 : eq(46, 5) : BOOL
48 : eq(46, 17) : BOOL
49 : eq(46, 10) : BOOL
50 : eq(46, 22) : BOOL
51 : eq(46, 25) : BOOL
52 : eq(46, 28) : BOOL
53 : eq(46, 31) : BOOL
54 : eq(46, 34) : BOOL
55 : ite(54, 36, 37) : BV:8
56 : ite(53, 33, 55) : BV:8
57 : ite(52, 30, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : ite(50, 24, 58) : BV:8
60 : ite(49, 21, 59) : BV:8
61 : ite(48, 19, 60) : BV:8
62 : ite(47, 16, 61) : BV:8
63 : bvadd(22, 13) : BV:32
64 : eq(63, 5) : BOOL
65 : eq(63, 17) : BOOL
66 : eq(63, 10) : BOOL
67 : eq(63, 22) : BOOL
68 : eq(63, 25) : BOOL
69 : eq(63, 28) : BOOL
70 : eq(63, 31) : BOOL
71 : eq(63, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 27, 74) : BV:8
76 : ite(67, 24, 75) : BV:8
77 : ite(66, 21, 76) : BV:8
78 : ite(65, 19, 77) : BV:8
79 : ite(64, 16, 78) : BV:8
80 : eq(13, 5) : BOOL
81 : eq(13, 17) : BOOL
82 : eq(13, 10) : BOOL
83 : eq(13, 22) : BOOL
84 : eq(13, 25) : BOOL
85 : eq(13, 28) : BOOL
86 : eq(13, 31) : BOOL
87 : eq(13, 34) : BOOL
88 : ite(87, 36, 37) : BV:8
89 : ite(86, 33, 88) : BV:8
90 : ite(85, 30, 89) : BV:8
91 : ite(84, 27, 90) : BV:8
92 : ite(83, 24, 91) : BV:8
93 : ite(82, 21, 92) : BV:8
94 : ite(81, 19, 93) : BV:8
95 : ite(80, 16, 94) : BV:8
96 : bvconcat(45, 62, 79, 95) : BV:32
97 : bvadd(10, 12, 96) : BV:32
98 : eq(97, 5) : BOOL
99 : eq(97, 17) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 22) : BOOL
102 : eq(97, 25) : BOOL
103 : eq(97, 28) : BOOL
104 : eq(97, 31) : BOOL
105 : eq(97, 34) : BOOL
106 : ite(105, 36, 37) : BV:8
107 : ite(104, 33, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 27, 108) : BV:8
110 : ite(101, 24, 109) : BV:8
111 : ite(100, 21, 110) : BV:8
112 : ite(99, 19, 111) : BV:8
113 : ite(98, 16, 112) : BV:8
114 : bvadd(31, 12, 96) : BV:32
115 : eq(114, 5) : BOOL
116 : eq(114, 17) : BOOL
117 : eq(114, 10) : BOOL
118 : eq(114, 22) : BOOL
119 : eq(114, 25) : BOOL
120 : eq(114, 28) : BOOL
121 : eq(114, 31) : BOOL
122 : eq(114, 34) : BOOL
123 : ite(122, 36, 37) : BV:8
124 : ite(121, 33, 123) : BV:8
125 : ite(120, 30, 124) : BV:8
126 : ite(119, 27, 125) : BV:8
127 : ite(118, 24, 126) : BV:8
128 : ite(117, 21, 127) : BV:8
129 : ite(116, 19, 128) : BV:8
130 : ite(115, 16, 129) : BV:8
131 : bvadd(22, 12, 96) : BV:32
132 : eq(131, 5) : BOOL
133 : eq(131, 17) : BOOL
134 : eq(131, 10) : BOOL
135 : eq(131, 22) : BOOL
136 : eq(131, 25) : BOOL
137 : eq(131, 28) : BOOL
138 : eq(131, 31) : BOOL
139 : eq(131, 34) : BOOL
140 : ite(139, 36, 37) : BV:8
141 : ite(138, 33, 140) : BV:8
142 : ite(137, 30, 141) : BV:8
143 : ite(136, 27, 142) : BV:8
144 : ite(135, 24, 143) : BV:8
145 : ite(134, 21, 144) : BV:8
146 : ite(133, 19, 145) : BV:8
147 : ite(132, 16, 146) : BV:8
148 : bvadd(12, 96) : BV:32
149 : eq(148, 5) : BOOL
150 : eq(148, 17) : BOOL
151 : eq(148, 10) : BOOL
152 : eq(148, 22) : BOOL
153 : eq(148, 25) : BOOL
154 : eq(148, 28) : BOOL
155 : eq(148, 31) : BOOL
156 : eq(148, 34) : BOOL
157 : ite(156, 36, 37) : BV:8
158 : ite(155, 33, 157) : BV:8
159 : ite(154, 30, 158) : BV:8
160 : ite(153, 27, 159) : BV:8
161 : ite(152, 24, 160) : BV:8
162 : ite(151, 21, 161) : BV:8
163 : ite(150, 19, 162) : BV:8
164 : ite(149, 16, 163) : BV:8
165 : bvconcat(113, 130, 147, 164) : BV:32
166 : ite(9, 5, 165) : BV:32
167 : ite(7, 5, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2340562054
=counter_example_end
=global nodece 36 num_edges_traversed 1
=global nodece 36 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 37
=global nodece 37 nodece z3.ce3697.num_edges_traversed1
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3.ce3697 957b532f885cdf46bce5b40b4e3c544
=input.spec-%var-x-1
1 : Lambda41174Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3591639112 { 0xd6141048 -703328184 -1.15674686e45 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3591639113 { 0xd6141049 -703328183 -1.15674698e45 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41175Var : BV:32
18 : Lambda41176Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2919768209 { 0xae082091 -1375199087 -1.6349384e221 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3591639114 { 0xd614104a -703328182 -1.15674710e45 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2919768210 { 0xae082092 -1375199086 -1.6349396e221 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 4) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 30) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 7, 13) : BOOL
58 : ite(54, 7, 57) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda41177Var : BV:32
61 : eq(17, 30) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 2) : BOOL
65 : and(64, 62) : BOOL
66 : and(19, 32) : BOOL
67 : and(27, 25) : BOOL
68 : ite(67, 13, 13) : BOOL
69 : ite(66, 7, 68) : BOOL
70 : bvule(2, 60) : BOOL
71 : bvule(60, 2) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(42, 60) : BOOL
74 : bvule(60, 42) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(46, 60) : BOOL
77 : bvule(60, 10) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 46, 46) : BV:32
80 : ite(75, 42, 79) : BV:32
81 : ite(72, 2, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : and(38, 82) : BOOL
84 : and(55, 82) : BOOL
85 : ite(84, 7, 13) : BOOL
86 : ite(83, 7, 85) : BOOL
87 : and(69, 86) : BOOL
88 : 3 { 0x3 +1.35e129 } : BV:32
89 : 4 { 0x4 +1.47e129 } : BV:32
90 : bvmul(89, 60) : BV:32
91 : bvmul(89, 17) : BV:32
92 : bvadd(88, 91) : BV:32
93 : 3089138248 { 0xb8208248 -1205829048 -1.25397586e241 } : BV:32
94 : eq(92, 93) : BOOL
95 : 61 { 0x3d } : BV:8
96 : eq(92, 88) : BOOL
97 : 218 { 0xda -38 } : BV:8
98 : 3089138249 { 0xb8208249 -1205829047 -1.25397598e241 } : BV:32
99 : eq(92, 98) : BOOL
100 : 70 { 0x46 } : BV:8
101 : eq(92, 42) : BOOL
102 : 95 { 0x5f } : BV:8
103 : 3089138251 { 0xb820824b -1205829045 -1.25397622e241 } : BV:32
104 : eq(92, 103) : BOOL
105 : 254 { 0xfe -2 } : BV:8
106 : eq(92, 2) : BOOL
107 : 233 { 0xe9 -23 } : BV:8
108 : eq(92, 46) : BOOL
109 : 185 { 0xb9 -71 } : BV:8
110 : 3089138250 { 0xb820824a -1205829046 -1.25397610e241 } : BV:32
111 : eq(92, 110) : BOOL
112 : 194 { 0xc2 -62 } : BV:8
113 : 0 { 0x0 } : BV:8
114 : ite(111, 112, 113) : BV:8
115 : ite(108, 109, 114) : BV:8
116 : ite(106, 107, 115) : BV:8
117 : ite(104, 105, 116) : BV:8
118 : ite(101, 102, 117) : BV:8
119 : ite(99, 100, 118) : BV:8
120 : ite(96, 97, 119) : BV:8
121 : ite(94, 95, 120) : BV:8
122 : bvadd(46, 91) : BV:32
123 : eq(122, 93) : BOOL
124 : eq(122, 88) : BOOL
125 : eq(122, 98) : BOOL
126 : eq(122, 42) : BOOL
127 : eq(122, 103) : BOOL
128 : eq(122, 2) : BOOL
129 : eq(122, 46) : BOOL
130 : eq(122, 110) : BOOL
131 : ite(130, 112, 113) : BV:8
132 : ite(129, 109, 131) : BV:8
133 : ite(128, 107, 132) : BV:8
134 : ite(127, 105, 133) : BV:8
135 : ite(126, 102, 134) : BV:8
136 : ite(125, 100, 135) : BV:8
137 : ite(124, 97, 136) : BV:8
138 : ite(123, 95, 137) : BV:8
139 : bvadd(42, 91) : BV:32
140 : eq(139, 93) : BOOL
141 : eq(139, 88) : BOOL
142 : eq(139, 98) : BOOL
143 : eq(139, 42) : BOOL
144 : eq(139, 103) : BOOL
145 : eq(139, 2) : BOOL
146 : eq(139, 46) : BOOL
147 : eq(139, 110) : BOOL
148 : ite(147, 112, 113) : BV:8
149 : ite(146, 109, 148) : BV:8
150 : ite(145, 107, 149) : BV:8
151 : ite(144, 105, 150) : BV:8
152 : ite(143, 102, 151) : BV:8
153 : ite(142, 100, 152) : BV:8
154 : ite(141, 97, 153) : BV:8
155 : ite(140, 95, 154) : BV:8
156 : eq(91, 93) : BOOL
157 : eq(91, 88) : BOOL
158 : eq(91, 98) : BOOL
159 : eq(91, 42) : BOOL
160 : eq(91, 103) : BOOL
161 : eq(91, 2) : BOOL
162 : eq(91, 46) : BOOL
163 : eq(91, 110) : BOOL
164 : ite(163, 112, 113) : BV:8
165 : ite(162, 109, 164) : BV:8
166 : ite(161, 107, 165) : BV:8
167 : ite(160, 105, 166) : BV:8
168 : ite(159, 102, 167) : BV:8
169 : ite(158, 100, 168) : BV:8
170 : ite(157, 97, 169) : BV:8
171 : ite(156, 95, 170) : BV:8
172 : bvconcat(121, 138, 155, 171) : BV:32
173 : bvadd(88, 90, 172) : BV:32
174 : eq(173, 93) : BOOL
175 : eq(173, 88) : BOOL
176 : eq(173, 98) : BOOL
177 : eq(173, 42) : BOOL
178 : eq(173, 103) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 46) : BOOL
181 : eq(173, 110) : BOOL
182 : ite(181, 112, 113) : BV:8
183 : ite(180, 109, 182) : BV:8
184 : ite(179, 107, 183) : BV:8
185 : ite(178, 105, 184) : BV:8
186 : ite(177, 102, 185) : BV:8
187 : ite(176, 100, 186) : BV:8
188 : ite(175, 97, 187) : BV:8
189 : ite(174, 95, 188) : BV:8
190 : bvadd(46, 90, 172) : BV:32
191 : eq(190, 93) : BOOL
192 : eq(190, 88) : BOOL
193 : eq(190, 98) : BOOL
194 : eq(190, 42) : BOOL
195 : eq(190, 103) : BOOL
196 : eq(190, 2) : BOOL
197 : eq(190, 46) : BOOL
198 : eq(190, 110) : BOOL
199 : ite(198, 112, 113) : BV:8
200 : ite(197, 109, 199) : BV:8
201 : ite(196, 107, 200) : BV:8
202 : ite(195, 105, 201) : BV:8
203 : ite(194, 102, 202) : BV:8
204 : ite(193, 100, 203) : BV:8
205 : ite(192, 97, 204) : BV:8
206 : ite(191, 95, 205) : BV:8
207 : bvadd(42, 90, 172) : BV:32
208 : eq(207, 93) : BOOL
209 : eq(207, 88) : BOOL
210 : eq(207, 98) : BOOL
211 : eq(207, 42) : BOOL
212 : eq(207, 103) : BOOL
213 : eq(207, 2) : BOOL
214 : eq(207, 46) : BOOL
215 : eq(207, 110) : BOOL
216 : ite(215, 112, 113) : BV:8
217 : ite(214, 109, 216) : BV:8
218 : ite(213, 107, 217) : BV:8
219 : ite(212, 105, 218) : BV:8
220 : ite(211, 102, 219) : BV:8
221 : ite(210, 100, 220) : BV:8
222 : ite(209, 97, 221) : BV:8
223 : ite(208, 95, 222) : BV:8
224 : bvadd(90, 172) : BV:32
225 : eq(224, 93) : BOOL
226 : eq(224, 88) : BOOL
227 : eq(224, 98) : BOOL
228 : eq(224, 42) : BOOL
229 : eq(224, 103) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 46) : BOOL
232 : eq(224, 110) : BOOL
233 : ite(232, 112, 113) : BV:8
234 : ite(231, 109, 233) : BV:8
235 : ite(230, 107, 234) : BV:8
236 : ite(229, 105, 235) : BV:8
237 : ite(228, 102, 236) : BV:8
238 : ite(227, 100, 237) : BV:8
239 : ite(226, 97, 238) : BV:8
240 : ite(225, 95, 239) : BV:8
241 : bvconcat(189, 206, 223, 240) : BV:32
242 : ite(65, 2, 241) : BV:32
243 : ite(63, 2, 242) : BV:32
244 : ite(87, 241, 243) : BV:32
245 : ite(65, 2, 244) : BV:32
246 : ite(63, 2, 245) : BV:32
247 : lambda(60, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(59, 247) : MAP[BV:32 -> BV:32]
249 : lambda(17, 248) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
250 : map(16, 249) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
251 : sym_const(250) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda41187Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3591639112 { 0xd6141048 -703328184 -1.15674686e45 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3591639113 { 0xd6141049 -703328183 -1.15674698e45 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41188Var : BV:32
18 : Lambda41189Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2919768209 { 0xae082091 -1375199087 -1.6349384e221 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3591639114 { 0xd614104a -703328182 -1.15674710e45 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2919768210 { 0xae082092 -1375199086 -1.6349396e221 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 4) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 30) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 7, 13) : BOOL
58 : ite(54, 7, 57) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda41190Var : BV:32
61 : eq(17, 30) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 2) : BOOL
65 : and(64, 62) : BOOL
66 : 3 { 0x3 +1.35e129 } : BV:32
67 : 4 { 0x4 +1.47e129 } : BV:32
68 : bvmul(67, 60) : BV:32
69 : bvmul(67, 17) : BV:32
70 : bvadd(66, 69) : BV:32
71 : 3089138248 { 0xb8208248 -1205829048 -1.25397586e241 } : BV:32
72 : eq(70, 71) : BOOL
73 : 61 { 0x3d } : BV:8
74 : eq(70, 66) : BOOL
75 : 218 { 0xda -38 } : BV:8
76 : 3089138249 { 0xb8208249 -1205829047 -1.25397598e241 } : BV:32
77 : eq(70, 76) : BOOL
78 : 70 { 0x46 } : BV:8
79 : eq(70, 42) : BOOL
80 : 95 { 0x5f } : BV:8
81 : 3089138251 { 0xb820824b -1205829045 -1.25397622e241 } : BV:32
82 : eq(70, 81) : BOOL
83 : 254 { 0xfe -2 } : BV:8
84 : eq(70, 2) : BOOL
85 : 233 { 0xe9 -23 } : BV:8
86 : eq(70, 46) : BOOL
87 : 185 { 0xb9 -71 } : BV:8
88 : 3089138250 { 0xb820824a -1205829046 -1.25397610e241 } : BV:32
89 : eq(70, 88) : BOOL
90 : 194 { 0xc2 -62 } : BV:8
91 : 0 { 0x0 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(86, 87, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 83, 94) : BV:8
96 : ite(79, 80, 95) : BV:8
97 : ite(77, 78, 96) : BV:8
98 : ite(74, 75, 97) : BV:8
99 : ite(72, 73, 98) : BV:8
100 : bvadd(46, 69) : BV:32
101 : eq(100, 71) : BOOL
102 : eq(100, 66) : BOOL
103 : eq(100, 76) : BOOL
104 : eq(100, 42) : BOOL
105 : eq(100, 81) : BOOL
106 : eq(100, 2) : BOOL
107 : eq(100, 46) : BOOL
108 : eq(100, 88) : BOOL
109 : ite(108, 90, 91) : BV:8
110 : ite(107, 87, 109) : BV:8
111 : ite(106, 85, 110) : BV:8
112 : ite(105, 83, 111) : BV:8
113 : ite(104, 80, 112) : BV:8
114 : ite(103, 78, 113) : BV:8
115 : ite(102, 75, 114) : BV:8
116 : ite(101, 73, 115) : BV:8
117 : bvadd(42, 69) : BV:32
118 : eq(117, 71) : BOOL
119 : eq(117, 66) : BOOL
120 : eq(117, 76) : BOOL
121 : eq(117, 42) : BOOL
122 : eq(117, 81) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 46) : BOOL
125 : eq(117, 88) : BOOL
126 : ite(125, 90, 91) : BV:8
127 : ite(124, 87, 126) : BV:8
128 : ite(123, 85, 127) : BV:8
129 : ite(122, 83, 128) : BV:8
130 : ite(121, 80, 129) : BV:8
131 : ite(120, 78, 130) : BV:8
132 : ite(119, 75, 131) : BV:8
133 : ite(118, 73, 132) : BV:8
134 : eq(69, 71) : BOOL
135 : eq(69, 66) : BOOL
136 : eq(69, 76) : BOOL
137 : eq(69, 42) : BOOL
138 : eq(69, 81) : BOOL
139 : eq(69, 2) : BOOL
140 : eq(69, 46) : BOOL
141 : eq(69, 88) : BOOL
142 : ite(141, 90, 91) : BV:8
143 : ite(140, 87, 142) : BV:8
144 : ite(139, 85, 143) : BV:8
145 : ite(138, 83, 144) : BV:8
146 : ite(137, 80, 145) : BV:8
147 : ite(136, 78, 146) : BV:8
148 : ite(135, 75, 147) : BV:8
149 : ite(134, 73, 148) : BV:8
150 : bvconcat(99, 116, 133, 149) : BV:32
151 : bvadd(66, 68, 150) : BV:32
152 : eq(151, 71) : BOOL
153 : eq(151, 66) : BOOL
154 : eq(151, 76) : BOOL
155 : eq(151, 42) : BOOL
156 : eq(151, 81) : BOOL
157 : eq(151, 2) : BOOL
158 : eq(151, 46) : BOOL
159 : eq(151, 88) : BOOL
160 : ite(159, 90, 91) : BV:8
161 : ite(158, 87, 160) : BV:8
162 : ite(157, 85, 161) : BV:8
163 : ite(156, 83, 162) : BV:8
164 : ite(155, 80, 163) : BV:8
165 : ite(154, 78, 164) : BV:8
166 : ite(153, 75, 165) : BV:8
167 : ite(152, 73, 166) : BV:8
168 : bvadd(46, 68, 150) : BV:32
169 : eq(168, 71) : BOOL
170 : eq(168, 66) : BOOL
171 : eq(168, 76) : BOOL
172 : eq(168, 42) : BOOL
173 : eq(168, 81) : BOOL
174 : eq(168, 2) : BOOL
175 : eq(168, 46) : BOOL
176 : eq(168, 88) : BOOL
177 : ite(176, 90, 91) : BV:8
178 : ite(175, 87, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 83, 179) : BV:8
181 : ite(172, 80, 180) : BV:8
182 : ite(171, 78, 181) : BV:8
183 : ite(170, 75, 182) : BV:8
184 : ite(169, 73, 183) : BV:8
185 : bvadd(42, 68, 150) : BV:32
186 : eq(185, 71) : BOOL
187 : eq(185, 66) : BOOL
188 : eq(185, 76) : BOOL
189 : eq(185, 42) : BOOL
190 : eq(185, 81) : BOOL
191 : eq(185, 2) : BOOL
192 : eq(185, 46) : BOOL
193 : eq(185, 88) : BOOL
194 : ite(193, 90, 91) : BV:8
195 : ite(192, 87, 194) : BV:8
196 : ite(191, 85, 195) : BV:8
197 : ite(190, 83, 196) : BV:8
198 : ite(189, 80, 197) : BV:8
199 : ite(188, 78, 198) : BV:8
200 : ite(187, 75, 199) : BV:8
201 : ite(186, 73, 200) : BV:8
202 : bvadd(68, 150) : BV:32
203 : eq(202, 71) : BOOL
204 : eq(202, 66) : BOOL
205 : eq(202, 76) : BOOL
206 : eq(202, 42) : BOOL
207 : eq(202, 81) : BOOL
208 : eq(202, 2) : BOOL
209 : eq(202, 46) : BOOL
210 : eq(202, 88) : BOOL
211 : ite(210, 90, 91) : BV:8
212 : ite(209, 87, 211) : BV:8
213 : ite(208, 85, 212) : BV:8
214 : ite(207, 83, 213) : BV:8
215 : ite(206, 80, 214) : BV:8
216 : ite(205, 78, 215) : BV:8
217 : ite(204, 75, 216) : BV:8
218 : ite(203, 73, 217) : BV:8
219 : bvconcat(167, 184, 201, 218) : BV:32
220 : ite(65, 2, 219) : BV:32
221 : ite(63, 2, 220) : BV:32
222 : lambda(60, 221) : FUNCTION[BV:32 -> BV:32]
223 : map(59, 222) : MAP[BV:32 -> BV:32]
224 : lambda(17, 223) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
225 : map(16, 224) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
226 : sym_const(225) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 233, [ 1; 1 ] -> 95, [ 2; 2 ] -> 185, [ 3; 3 ] -> 218, [ 4; 3089138247 ] -> 0, [ 3089138248; 3089138248 ] -> 61, [ 3089138249; 3089138249 ] -> 70, [ 3089138250; 3089138250 ] -> 194, [ 3089138251; 3089138251 ] -> 254, [ 3089138252; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2063737467 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2063737468; 2063737471 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2063737472; 3076299771 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3076299772; 3076299775 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3076299776; 4260883831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4260883832; 4260883835 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4260883836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2063737468 { 0x7b02227c +1.1667737e119 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3076299772 { 0xb75c9bfc -1218667524 -1.72351026e239 } : BV:32
=input.dst.llvm-%n
1 : 3591639113 { 0xd6141049 -703328183 -1.15674698e45 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4260883832 { 0xfdf7ed78 -34083464 -1.93693447e124 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2919768210 { 0xae082092 -1375199086 -1.6349396e221 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda41231Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2919768210 { 0xae082092 -1375199086 -1.6349396e221 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2919768209 { 0xae082091 -1375199087 -1.6349384e221 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3591639114 { 0xd614104a -703328182 -1.15674710e45 } : BV:32
9 : bvule(8, 3) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(3, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3591639113 { 0xd6141049 -703328183 -1.15674698e45 } : BV:32
14 : bvule(13, 3) : BOOL
15 : bvule(3, 13) : BOOL
16 : and(14, 15) : BOOL
17 : bvule(3, 3) : BOOL
18 : 3591639112 { 0xd6141048 -703328184 -1.15674686e45 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 3, 3) : BV:32
22 : ite(16, 13, 21) : BV:32
23 : ite(12, 8, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : bvule(1, 2) : BOOL
28 : and(26, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 29) : BOOL
32 : and(30, 31) : BOOL
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvule(33, 1) : BOOL
35 : bvule(1, 10) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 33, 33) : BV:32
38 : ite(32, 29, 37) : BV:32
39 : ite(28, 2, 38) : BV:32
40 : eq(39, 2) : BOOL
41 : and(25, 40) : BOOL
42 : 1 { 0x1 } : BOOL
43 : eq(24, 3) : BOOL
44 : and(43, 40) : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(44, 42, 45) : BOOL
47 : ite(41, 42, 46) : BOOL
48 : lambda(1, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda41232Var : BV:32
50 : eq(3, 3) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : eq(3, 2) : BOOL
54 : and(53, 51) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 49) : BV:32
58 : bvmul(56, 3) : BV:32
59 : bvadd(55, 58) : BV:32
60 : 3089138248 { 0xb8208248 -1205829048 -1.25397586e241 } : BV:32
61 : eq(59, 60) : BOOL
62 : 61 { 0x3d } : BV:8
63 : eq(59, 55) : BOOL
64 : 218 { 0xda -38 } : BV:8
65 : 3089138249 { 0xb8208249 -1205829047 -1.25397598e241 } : BV:32
66 : eq(59, 65) : BOOL
67 : 70 { 0x46 } : BV:8
68 : eq(59, 29) : BOOL
69 : 95 { 0x5f } : BV:8
70 : 3089138251 { 0xb820824b -1205829045 -1.25397622e241 } : BV:32
71 : eq(59, 70) : BOOL
72 : 254 { 0xfe -2 } : BV:8
73 : eq(59, 2) : BOOL
74 : 233 { 0xe9 -23 } : BV:8
75 : eq(59, 33) : BOOL
76 : 185 { 0xb9 -71 } : BV:8
77 : 3089138250 { 0xb820824a -1205829046 -1.25397610e241 } : BV:32
78 : eq(59, 77) : BOOL
79 : 194 { 0xc2 -62 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 74, 82) : BV:8
84 : ite(71, 72, 83) : BV:8
85 : ite(68, 69, 84) : BV:8
86 : ite(66, 67, 85) : BV:8
87 : ite(63, 64, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(33, 58) : BV:32
90 : eq(89, 60) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 65) : BOOL
93 : eq(89, 29) : BOOL
94 : eq(89, 70) : BOOL
95 : eq(89, 2) : BOOL
96 : eq(89, 33) : BOOL
97 : eq(89, 77) : BOOL
98 : ite(97, 79, 80) : BV:8
99 : ite(96, 76, 98) : BV:8
100 : ite(95, 74, 99) : BV:8
101 : ite(94, 72, 100) : BV:8
102 : ite(93, 69, 101) : BV:8
103 : ite(92, 67, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : ite(90, 62, 104) : BV:8
106 : bvadd(29, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 55) : BOOL
109 : eq(106, 65) : BOOL
110 : eq(106, 29) : BOOL
111 : eq(106, 70) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 33) : BOOL
114 : eq(106, 77) : BOOL
115 : ite(114, 79, 80) : BV:8
116 : ite(113, 76, 115) : BV:8
117 : ite(112, 74, 116) : BV:8
118 : ite(111, 72, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 67, 119) : BV:8
121 : ite(108, 64, 120) : BV:8
122 : ite(107, 62, 121) : BV:8
123 : eq(58, 60) : BOOL
124 : eq(58, 55) : BOOL
125 : eq(58, 65) : BOOL
126 : eq(58, 29) : BOOL
127 : eq(58, 70) : BOOL
128 : eq(58, 2) : BOOL
129 : eq(58, 33) : BOOL
130 : eq(58, 77) : BOOL
131 : ite(130, 79, 80) : BV:8
132 : ite(129, 76, 131) : BV:8
133 : ite(128, 74, 132) : BV:8
134 : ite(127, 72, 133) : BV:8
135 : ite(126, 69, 134) : BV:8
136 : ite(125, 67, 135) : BV:8
137 : ite(124, 64, 136) : BV:8
138 : ite(123, 62, 137) : BV:8
139 : bvconcat(88, 105, 122, 138) : BV:32
140 : bvadd(55, 57, 139) : BV:32
141 : eq(140, 60) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 65) : BOOL
144 : eq(140, 29) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 33) : BOOL
148 : eq(140, 77) : BOOL
149 : ite(148, 79, 80) : BV:8
150 : ite(147, 76, 149) : BV:8
151 : ite(146, 74, 150) : BV:8
152 : ite(145, 72, 151) : BV:8
153 : ite(144, 69, 152) : BV:8
154 : ite(143, 67, 153) : BV:8
155 : ite(142, 64, 154) : BV:8
156 : ite(141, 62, 155) : BV:8
157 : bvadd(33, 57, 139) : BV:32
158 : eq(157, 60) : BOOL
159 : eq(157, 55) : BOOL
160 : eq(157, 65) : BOOL
161 : eq(157, 29) : BOOL
162 : eq(157, 70) : BOOL
163 : eq(157, 2) : BOOL
164 : eq(157, 33) : BOOL
165 : eq(157, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 74, 167) : BV:8
169 : ite(162, 72, 168) : BV:8
170 : ite(161, 69, 169) : BV:8
171 : ite(160, 67, 170) : BV:8
172 : ite(159, 64, 171) : BV:8
173 : ite(158, 62, 172) : BV:8
174 : bvadd(29, 57, 139) : BV:32
175 : eq(174, 60) : BOOL
176 : eq(174, 55) : BOOL
177 : eq(174, 65) : BOOL
178 : eq(174, 29) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 33) : BOOL
182 : eq(174, 77) : BOOL
183 : ite(182, 79, 80) : BV:8
184 : ite(181, 76, 183) : BV:8
185 : ite(180, 74, 184) : BV:8
186 : ite(179, 72, 185) : BV:8
187 : ite(178, 69, 186) : BV:8
188 : ite(177, 67, 187) : BV:8
189 : ite(176, 64, 188) : BV:8
190 : ite(175, 62, 189) : BV:8
191 : bvadd(57, 139) : BV:32
192 : eq(191, 60) : BOOL
193 : eq(191, 55) : BOOL
194 : eq(191, 65) : BOOL
195 : eq(191, 29) : BOOL
196 : eq(191, 70) : BOOL
197 : eq(191, 2) : BOOL
198 : eq(191, 33) : BOOL
199 : eq(191, 77) : BOOL
200 : ite(199, 79, 80) : BV:8
201 : ite(198, 76, 200) : BV:8
202 : ite(197, 74, 201) : BV:8
203 : ite(196, 72, 202) : BV:8
204 : ite(195, 69, 203) : BV:8
205 : ite(194, 67, 204) : BV:8
206 : ite(193, 64, 205) : BV:8
207 : ite(192, 62, 206) : BV:8
208 : bvconcat(156, 173, 190, 207) : BV:32
209 : ite(54, 2, 208) : BV:32
210 : ite(52, 2, 209) : BV:32
211 : lambda(49, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(48, 211) : MAP[BV:32 -> BV:32]
213 : sym_const(212) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2919768211 { 0xae082093 -1375199085 -1.6349408e221 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2919768210 { 0xae082092 -1375199086 -1.6349396e221 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 3591639112 { 0xd6141048 -703328184 -1.15674686e45 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3591639113 { 0xd6141049 -703328183 -1.15674698e45 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda41221Var : BV:32
20 : 2919768209 { 0xae082091 -1375199087 -1.6349384e221 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : 3591639114 { 0xd614104a -703328182 -1.15674710e45 } : BV:32
24 : bvule(23, 2) : BOOL
25 : and(24, 11) : BOOL
26 : bvule(2, 8) : BOOL
27 : and(9, 26) : BOOL
28 : bvule(2, 2) : BOOL
29 : and(28, 5) : BOOL
30 : ite(29, 2, 2) : BV:32
31 : ite(27, 8, 30) : BV:32
32 : ite(25, 23, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 1) : BOOL
35 : bvule(1, 19) : BOOL
36 : bvule(19, 1) : BOOL
37 : and(35, 36) : BOOL
38 : bvule(16, 19) : BOOL
39 : bvule(19, 16) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 19) : BOOL
43 : bvule(19, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 16, 45) : BV:32
47 : ite(37, 1, 46) : BV:32
48 : eq(47, 1) : BOOL
49 : and(34, 48) : BOOL
50 : eq(33, 2) : BOOL
51 : and(50, 48) : BOOL
52 : ite(51, 7, 13) : BOOL
53 : ite(49, 7, 52) : BOOL
54 : lambda(19, 53) : FUNCTION[BV:32 -> BOOL]
55 : Lambda41222Var : BV:32
56 : eq(2, 2) : BOOL
57 : eq(55, 1) : BOOL
58 : and(56, 57) : BOOL
59 : eq(2, 1) : BOOL
60 : and(59, 57) : BOOL
61 : 3 { 0x3 +1.35e129 } : BV:32
62 : 4 { 0x4 +1.47e129 } : BV:32
63 : bvmul(62, 55) : BV:32
64 : bvmul(62, 2) : BV:32
65 : bvadd(61, 64) : BV:32
66 : 3089138248 { 0xb8208248 -1205829048 -1.25397586e241 } : BV:32
67 : eq(65, 66) : BOOL
68 : 61 { 0x3d } : BV:8
69 : eq(65, 61) : BOOL
70 : 218 { 0xda -38 } : BV:8
71 : 3089138249 { 0xb8208249 -1205829047 -1.25397598e241 } : BV:32
72 : eq(65, 71) : BOOL
73 : 70 { 0x46 } : BV:8
74 : eq(65, 16) : BOOL
75 : 95 { 0x5f } : BV:8
76 : 3089138251 { 0xb820824b -1205829045 -1.25397622e241 } : BV:32
77 : eq(65, 76) : BOOL
78 : 254 { 0xfe -2 } : BV:8
79 : eq(65, 1) : BOOL
80 : 233 { 0xe9 -23 } : BV:8
81 : eq(65, 41) : BOOL
82 : 185 { 0xb9 -71 } : BV:8
83 : 3089138250 { 0xb820824a -1205829046 -1.25397610e241 } : BV:32
84 : eq(65, 83) : BOOL
85 : 194 { 0xc2 -62 } : BV:8
86 : 0 { 0x0 } : BV:8
87 : ite(84, 85, 86) : BV:8
88 : ite(81, 82, 87) : BV:8
89 : ite(79, 80, 88) : BV:8
90 : ite(77, 78, 89) : BV:8
91 : ite(74, 75, 90) : BV:8
92 : ite(72, 73, 91) : BV:8
93 : ite(69, 70, 92) : BV:8
94 : ite(67, 68, 93) : BV:8
95 : bvadd(41, 64) : BV:32
96 : eq(95, 66) : BOOL
97 : eq(95, 61) : BOOL
98 : eq(95, 71) : BOOL
99 : eq(95, 16) : BOOL
100 : eq(95, 76) : BOOL
101 : eq(95, 1) : BOOL
102 : eq(95, 41) : BOOL
103 : eq(95, 83) : BOOL
104 : ite(103, 85, 86) : BV:8
105 : ite(102, 82, 104) : BV:8
106 : ite(101, 80, 105) : BV:8
107 : ite(100, 78, 106) : BV:8
108 : ite(99, 75, 107) : BV:8
109 : ite(98, 73, 108) : BV:8
110 : ite(97, 70, 109) : BV:8
111 : ite(96, 68, 110) : BV:8
112 : bvadd(16, 64) : BV:32
113 : eq(112, 66) : BOOL
114 : eq(112, 61) : BOOL
115 : eq(112, 71) : BOOL
116 : eq(112, 16) : BOOL
117 : eq(112, 76) : BOOL
118 : eq(112, 1) : BOOL
119 : eq(112, 41) : BOOL
120 : eq(112, 83) : BOOL
121 : ite(120, 85, 86) : BV:8
122 : ite(119, 82, 121) : BV:8
123 : ite(118, 80, 122) : BV:8
124 : ite(117, 78, 123) : BV:8
125 : ite(116, 75, 124) : BV:8
126 : ite(115, 73, 125) : BV:8
127 : ite(114, 70, 126) : BV:8
128 : ite(113, 68, 127) : BV:8
129 : eq(64, 66) : BOOL
130 : eq(64, 61) : BOOL
131 : eq(64, 71) : BOOL
132 : eq(64, 16) : BOOL
133 : eq(64, 76) : BOOL
134 : eq(64, 1) : BOOL
135 : eq(64, 41) : BOOL
136 : eq(64, 83) : BOOL
137 : ite(136, 85, 86) : BV:8
138 : ite(135, 82, 137) : BV:8
139 : ite(134, 80, 138) : BV:8
140 : ite(133, 78, 139) : BV:8
141 : ite(132, 75, 140) : BV:8
142 : ite(131, 73, 141) : BV:8
143 : ite(130, 70, 142) : BV:8
144 : ite(129, 68, 143) : BV:8
145 : bvconcat(94, 111, 128, 144) : BV:32
146 : bvadd(61, 63, 145) : BV:32
147 : eq(146, 66) : BOOL
148 : eq(146, 61) : BOOL
149 : eq(146, 71) : BOOL
150 : eq(146, 16) : BOOL
151 : eq(146, 76) : BOOL
152 : eq(146, 1) : BOOL
153 : eq(146, 41) : BOOL
154 : eq(146, 83) : BOOL
155 : ite(154, 85, 86) : BV:8
156 : ite(153, 82, 155) : BV:8
157 : ite(152, 80, 156) : BV:8
158 : ite(151, 78, 157) : BV:8
159 : ite(150, 75, 158) : BV:8
160 : ite(149, 73, 159) : BV:8
161 : ite(148, 70, 160) : BV:8
162 : ite(147, 68, 161) : BV:8
163 : bvadd(41, 63, 145) : BV:32
164 : eq(163, 66) : BOOL
165 : eq(163, 61) : BOOL
166 : eq(163, 71) : BOOL
167 : eq(163, 16) : BOOL
168 : eq(163, 76) : BOOL
169 : eq(163, 1) : BOOL
170 : eq(163, 41) : BOOL
171 : eq(163, 83) : BOOL
172 : ite(171, 85, 86) : BV:8
173 : ite(170, 82, 172) : BV:8
174 : ite(169, 80, 173) : BV:8
175 : ite(168, 78, 174) : BV:8
176 : ite(167, 75, 175) : BV:8
177 : ite(166, 73, 176) : BV:8
178 : ite(165, 70, 177) : BV:8
179 : ite(164, 68, 178) : BV:8
180 : bvadd(16, 63, 145) : BV:32
181 : eq(180, 66) : BOOL
182 : eq(180, 61) : BOOL
183 : eq(180, 71) : BOOL
184 : eq(180, 16) : BOOL
185 : eq(180, 76) : BOOL
186 : eq(180, 1) : BOOL
187 : eq(180, 41) : BOOL
188 : eq(180, 83) : BOOL
189 : ite(188, 85, 86) : BV:8
190 : ite(187, 82, 189) : BV:8
191 : ite(186, 80, 190) : BV:8
192 : ite(185, 78, 191) : BV:8
193 : ite(184, 75, 192) : BV:8
194 : ite(183, 73, 193) : BV:8
195 : ite(182, 70, 194) : BV:8
196 : ite(181, 68, 195) : BV:8
197 : bvadd(63, 145) : BV:32
198 : eq(197, 66) : BOOL
199 : eq(197, 61) : BOOL
200 : eq(197, 71) : BOOL
201 : eq(197, 16) : BOOL
202 : eq(197, 76) : BOOL
203 : eq(197, 1) : BOOL
204 : eq(197, 41) : BOOL
205 : eq(197, 83) : BOOL
206 : ite(205, 85, 86) : BV:8
207 : ite(204, 82, 206) : BV:8
208 : ite(203, 80, 207) : BV:8
209 : ite(202, 78, 208) : BV:8
210 : ite(201, 75, 209) : BV:8
211 : ite(200, 73, 210) : BV:8
212 : ite(199, 70, 211) : BV:8
213 : ite(198, 68, 212) : BV:8
214 : bvconcat(162, 179, 196, 213) : BV:32
215 : ite(60, 1, 214) : BV:32
216 : ite(58, 1, 215) : BV:32
217 : lambda(55, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(54, 217) : MAP[BV:32 -> BV:32]
219 : sum(17, 18, 218) : SUM[UNIT,MAP[BV:32 -> BV:32]]
220 : sym_const(219) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda41237Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2919768210 { 0xae082092 -1375199086 -1.6349396e221 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2919768209 { 0xae082091 -1375199087 -1.6349384e221 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3591639114 { 0xd614104a -703328182 -1.15674710e45 } : BV:32
9 : bvule(8, 3) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(3, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3591639113 { 0xd6141049 -703328183 -1.15674698e45 } : BV:32
14 : bvule(13, 3) : BOOL
15 : bvule(3, 13) : BOOL
16 : and(14, 15) : BOOL
17 : bvule(3, 3) : BOOL
18 : 3591639112 { 0xd6141048 -703328184 -1.15674686e45 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 3, 3) : BV:32
22 : ite(16, 13, 21) : BV:32
23 : ite(12, 8, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : bvule(1, 2) : BOOL
28 : and(26, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 29) : BOOL
32 : and(30, 31) : BOOL
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvule(33, 1) : BOOL
35 : bvule(1, 10) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 33, 33) : BV:32
38 : ite(32, 29, 37) : BV:32
39 : ite(28, 2, 38) : BV:32
40 : eq(39, 2) : BOOL
41 : and(25, 40) : BOOL
42 : 1 { 0x1 } : BOOL
43 : eq(24, 3) : BOOL
44 : and(43, 40) : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(44, 42, 45) : BOOL
47 : ite(41, 42, 46) : BOOL
48 : lambda(1, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda41238Var : BV:32
50 : eq(3, 3) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : eq(3, 2) : BOOL
54 : and(53, 51) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 49) : BV:32
58 : bvmul(56, 3) : BV:32
59 : bvadd(55, 58) : BV:32
60 : 3089138248 { 0xb8208248 -1205829048 -1.25397586e241 } : BV:32
61 : eq(59, 60) : BOOL
62 : 61 { 0x3d } : BV:8
63 : eq(59, 55) : BOOL
64 : 218 { 0xda -38 } : BV:8
65 : 3089138249 { 0xb8208249 -1205829047 -1.25397598e241 } : BV:32
66 : eq(59, 65) : BOOL
67 : 70 { 0x46 } : BV:8
68 : eq(59, 29) : BOOL
69 : 95 { 0x5f } : BV:8
70 : 3089138251 { 0xb820824b -1205829045 -1.25397622e241 } : BV:32
71 : eq(59, 70) : BOOL
72 : 254 { 0xfe -2 } : BV:8
73 : eq(59, 2) : BOOL
74 : 233 { 0xe9 -23 } : BV:8
75 : eq(59, 33) : BOOL
76 : 185 { 0xb9 -71 } : BV:8
77 : 3089138250 { 0xb820824a -1205829046 -1.25397610e241 } : BV:32
78 : eq(59, 77) : BOOL
79 : 194 { 0xc2 -62 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 74, 82) : BV:8
84 : ite(71, 72, 83) : BV:8
85 : ite(68, 69, 84) : BV:8
86 : ite(66, 67, 85) : BV:8
87 : ite(63, 64, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(33, 58) : BV:32
90 : eq(89, 60) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 65) : BOOL
93 : eq(89, 29) : BOOL
94 : eq(89, 70) : BOOL
95 : eq(89, 2) : BOOL
96 : eq(89, 33) : BOOL
97 : eq(89, 77) : BOOL
98 : ite(97, 79, 80) : BV:8
99 : ite(96, 76, 98) : BV:8
100 : ite(95, 74, 99) : BV:8
101 : ite(94, 72, 100) : BV:8
102 : ite(93, 69, 101) : BV:8
103 : ite(92, 67, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : ite(90, 62, 104) : BV:8
106 : bvadd(29, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 55) : BOOL
109 : eq(106, 65) : BOOL
110 : eq(106, 29) : BOOL
111 : eq(106, 70) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 33) : BOOL
114 : eq(106, 77) : BOOL
115 : ite(114, 79, 80) : BV:8
116 : ite(113, 76, 115) : BV:8
117 : ite(112, 74, 116) : BV:8
118 : ite(111, 72, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 67, 119) : BV:8
121 : ite(108, 64, 120) : BV:8
122 : ite(107, 62, 121) : BV:8
123 : eq(58, 60) : BOOL
124 : eq(58, 55) : BOOL
125 : eq(58, 65) : BOOL
126 : eq(58, 29) : BOOL
127 : eq(58, 70) : BOOL
128 : eq(58, 2) : BOOL
129 : eq(58, 33) : BOOL
130 : eq(58, 77) : BOOL
131 : ite(130, 79, 80) : BV:8
132 : ite(129, 76, 131) : BV:8
133 : ite(128, 74, 132) : BV:8
134 : ite(127, 72, 133) : BV:8
135 : ite(126, 69, 134) : BV:8
136 : ite(125, 67, 135) : BV:8
137 : ite(124, 64, 136) : BV:8
138 : ite(123, 62, 137) : BV:8
139 : bvconcat(88, 105, 122, 138) : BV:32
140 : bvadd(55, 57, 139) : BV:32
141 : eq(140, 60) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 65) : BOOL
144 : eq(140, 29) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 33) : BOOL
148 : eq(140, 77) : BOOL
149 : ite(148, 79, 80) : BV:8
150 : ite(147, 76, 149) : BV:8
151 : ite(146, 74, 150) : BV:8
152 : ite(145, 72, 151) : BV:8
153 : ite(144, 69, 152) : BV:8
154 : ite(143, 67, 153) : BV:8
155 : ite(142, 64, 154) : BV:8
156 : ite(141, 62, 155) : BV:8
157 : bvadd(33, 57, 139) : BV:32
158 : eq(157, 60) : BOOL
159 : eq(157, 55) : BOOL
160 : eq(157, 65) : BOOL
161 : eq(157, 29) : BOOL
162 : eq(157, 70) : BOOL
163 : eq(157, 2) : BOOL
164 : eq(157, 33) : BOOL
165 : eq(157, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 74, 167) : BV:8
169 : ite(162, 72, 168) : BV:8
170 : ite(161, 69, 169) : BV:8
171 : ite(160, 67, 170) : BV:8
172 : ite(159, 64, 171) : BV:8
173 : ite(158, 62, 172) : BV:8
174 : bvadd(29, 57, 139) : BV:32
175 : eq(174, 60) : BOOL
176 : eq(174, 55) : BOOL
177 : eq(174, 65) : BOOL
178 : eq(174, 29) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 33) : BOOL
182 : eq(174, 77) : BOOL
183 : ite(182, 79, 80) : BV:8
184 : ite(181, 76, 183) : BV:8
185 : ite(180, 74, 184) : BV:8
186 : ite(179, 72, 185) : BV:8
187 : ite(178, 69, 186) : BV:8
188 : ite(177, 67, 187) : BV:8
189 : ite(176, 64, 188) : BV:8
190 : ite(175, 62, 189) : BV:8
191 : bvadd(57, 139) : BV:32
192 : eq(191, 60) : BOOL
193 : eq(191, 55) : BOOL
194 : eq(191, 65) : BOOL
195 : eq(191, 29) : BOOL
196 : eq(191, 70) : BOOL
197 : eq(191, 2) : BOOL
198 : eq(191, 33) : BOOL
199 : eq(191, 77) : BOOL
200 : ite(199, 79, 80) : BV:8
201 : ite(198, 76, 200) : BV:8
202 : ite(197, 74, 201) : BV:8
203 : ite(196, 72, 202) : BV:8
204 : ite(195, 69, 203) : BV:8
205 : ite(194, 67, 204) : BV:8
206 : ite(193, 64, 205) : BV:8
207 : ite(192, 62, 206) : BV:8
208 : bvconcat(156, 173, 190, 207) : BV:32
209 : ite(54, 2, 208) : BV:32
210 : ite(52, 2, 209) : BV:32
211 : lambda(49, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(48, 211) : MAP[BV:32 -> BV:32]
213 : sym_const(212) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2919768210 { 0xae082092 -1375199086 -1.6349396e221 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3076299772 { 0xb75c9bfc -1218667524 -1.72351026e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3076299775 { 0xb75c9bff -1218667521 -1.72351062e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4260883832 { 0xfdf7ed78 -34083464 -1.93693447e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4260883835 { 0xfdf7ed7b -34083461 -1.93693482e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2063737468 { 0x7b02227c +1.1667737e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2063737471 { 0x7b02227f +1.1667773e119 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda41123Var : BV:32
2 : Lambda41124Var : BV:32
3 : 2919768210 { 0xae082092 -1375199086 -1.6349396e221 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 3591639112 { 0xd6141048 -703328184 -1.15674686e45 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 3591639113 { 0xd6141049 -703328183 -1.15674698e45 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2919768209 { 0xae082091 -1375199087 -1.6349384e221 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : 3591639114 { 0xd614104a -703328182 -1.15674710e45 } : BV:32
27 : bvule(26, 1) : BOOL
28 : and(27, 18) : BOOL
29 : bvule(1, 15) : BOOL
30 : and(16, 29) : BOOL
31 : bvule(3, 1) : BOOL
32 : and(31, 12) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(30, 15, 33) : BV:32
35 : ite(28, 26, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 5) : BOOL
38 : bvule(5, 2) : BOOL
39 : bvule(2, 5) : BOOL
40 : and(38, 39) : BOOL
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvule(41, 2) : BOOL
43 : bvule(2, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvule(45, 2) : BOOL
47 : bvule(2, 17) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 45, 45) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 5, 50) : BV:32
52 : eq(51, 5) : BOOL
53 : and(37, 52) : BOOL
54 : eq(36, 3) : BOOL
55 : and(54, 52) : BOOL
56 : ite(55, 14, 20) : BOOL
57 : ite(53, 14, 56) : BOOL
58 : and(22, 57) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 2) : BV:32
62 : bvmul(60, 1) : BV:32
63 : bvadd(59, 62) : BV:32
64 : 3089138248 { 0xb8208248 -1205829048 -1.25397586e241 } : BV:32
65 : eq(63, 64) : BOOL
66 : 61 { 0x3d } : BV:8
67 : eq(63, 59) : BOOL
68 : 218 { 0xda -38 } : BV:8
69 : 3089138249 { 0xb8208249 -1205829047 -1.25397598e241 } : BV:32
70 : eq(63, 69) : BOOL
71 : 70 { 0x46 } : BV:8
72 : eq(63, 41) : BOOL
73 : 95 { 0x5f } : BV:8
74 : 3089138251 { 0xb820824b -1205829045 -1.25397622e241 } : BV:32
75 : eq(63, 74) : BOOL
76 : 254 { 0xfe -2 } : BV:8
77 : eq(63, 5) : BOOL
78 : 233 { 0xe9 -23 } : BV:8
79 : eq(63, 45) : BOOL
80 : 185 { 0xb9 -71 } : BV:8
81 : 3089138250 { 0xb820824a -1205829046 -1.25397610e241 } : BV:32
82 : eq(63, 81) : BOOL
83 : 194 { 0xc2 -62 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(75, 76, 87) : BV:8
89 : ite(72, 73, 88) : BV:8
90 : ite(70, 71, 89) : BV:8
91 : ite(67, 68, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : bvadd(45, 62) : BV:32
94 : eq(93, 64) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 69) : BOOL
97 : eq(93, 41) : BOOL
98 : eq(93, 74) : BOOL
99 : eq(93, 5) : BOOL
100 : eq(93, 45) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 76, 104) : BV:8
106 : ite(97, 73, 105) : BV:8
107 : ite(96, 71, 106) : BV:8
108 : ite(95, 68, 107) : BV:8
109 : ite(94, 66, 108) : BV:8
110 : bvadd(41, 62) : BV:32
111 : eq(110, 64) : BOOL
112 : eq(110, 59) : BOOL
113 : eq(110, 69) : BOOL
114 : eq(110, 41) : BOOL
115 : eq(110, 74) : BOOL
116 : eq(110, 5) : BOOL
117 : eq(110, 45) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 76, 121) : BV:8
123 : ite(114, 73, 122) : BV:8
124 : ite(113, 71, 123) : BV:8
125 : ite(112, 68, 124) : BV:8
126 : ite(111, 66, 125) : BV:8
127 : eq(62, 64) : BOOL
128 : eq(62, 59) : BOOL
129 : eq(62, 69) : BOOL
130 : eq(62, 41) : BOOL
131 : eq(62, 74) : BOOL
132 : eq(62, 5) : BOOL
133 : eq(62, 45) : BOOL
134 : eq(62, 81) : BOOL
135 : ite(134, 83, 84) : BV:8
136 : ite(133, 80, 135) : BV:8
137 : ite(132, 78, 136) : BV:8
138 : ite(131, 76, 137) : BV:8
139 : ite(130, 73, 138) : BV:8
140 : ite(129, 71, 139) : BV:8
141 : ite(128, 68, 140) : BV:8
142 : ite(127, 66, 141) : BV:8
143 : bvconcat(92, 109, 126, 142) : BV:32
144 : bvadd(59, 61, 143) : BV:32
145 : eq(144, 64) : BOOL
146 : eq(144, 59) : BOOL
147 : eq(144, 69) : BOOL
148 : eq(144, 41) : BOOL
149 : eq(144, 74) : BOOL
150 : eq(144, 5) : BOOL
151 : eq(144, 45) : BOOL
152 : eq(144, 81) : BOOL
153 : ite(152, 83, 84) : BV:8
154 : ite(151, 80, 153) : BV:8
155 : ite(150, 78, 154) : BV:8
156 : ite(149, 76, 155) : BV:8
157 : ite(148, 73, 156) : BV:8
158 : ite(147, 71, 157) : BV:8
159 : ite(146, 68, 158) : BV:8
160 : ite(145, 66, 159) : BV:8
161 : bvadd(45, 61, 143) : BV:32
162 : eq(161, 64) : BOOL
163 : eq(161, 59) : BOOL
164 : eq(161, 69) : BOOL
165 : eq(161, 41) : BOOL
166 : eq(161, 74) : BOOL
167 : eq(161, 5) : BOOL
168 : eq(161, 45) : BOOL
169 : eq(161, 81) : BOOL
170 : ite(169, 83, 84) : BV:8
171 : ite(168, 80, 170) : BV:8
172 : ite(167, 78, 171) : BV:8
173 : ite(166, 76, 172) : BV:8
174 : ite(165, 73, 173) : BV:8
175 : ite(164, 71, 174) : BV:8
176 : ite(163, 68, 175) : BV:8
177 : ite(162, 66, 176) : BV:8
178 : bvadd(41, 61, 143) : BV:32
179 : eq(178, 64) : BOOL
180 : eq(178, 59) : BOOL
181 : eq(178, 69) : BOOL
182 : eq(178, 41) : BOOL
183 : eq(178, 74) : BOOL
184 : eq(178, 5) : BOOL
185 : eq(178, 45) : BOOL
186 : eq(178, 81) : BOOL
187 : ite(186, 83, 84) : BV:8
188 : ite(185, 80, 187) : BV:8
189 : ite(184, 78, 188) : BV:8
190 : ite(183, 76, 189) : BV:8
191 : ite(182, 73, 190) : BV:8
192 : ite(181, 71, 191) : BV:8
193 : ite(180, 68, 192) : BV:8
194 : ite(179, 66, 193) : BV:8
195 : bvadd(61, 143) : BV:32
196 : eq(195, 64) : BOOL
197 : eq(195, 59) : BOOL
198 : eq(195, 69) : BOOL
199 : eq(195, 41) : BOOL
200 : eq(195, 74) : BOOL
201 : eq(195, 5) : BOOL
202 : eq(195, 45) : BOOL
203 : eq(195, 81) : BOOL
204 : ite(203, 83, 84) : BV:8
205 : ite(202, 80, 204) : BV:8
206 : ite(201, 78, 205) : BV:8
207 : ite(200, 76, 206) : BV:8
208 : ite(199, 73, 207) : BV:8
209 : ite(198, 71, 208) : BV:8
210 : ite(197, 68, 209) : BV:8
211 : ite(196, 66, 210) : BV:8
212 : bvconcat(160, 177, 194, 211) : BV:32
213 : ite(9, 5, 212) : BV:32
214 : ite(7, 5, 213) : BV:32
215 : ite(58, 212, 214) : BV:32
216 : ite(9, 5, 215) : BV:32
217 : ite(7, 5, 216) : BV:32
218 : lambda(1, 2, 217) : FUNCTION[BV:32,BV:32 -> BV:32]
219 : sym_const(218) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda41128Var : BV:32
2 : Lambda41129Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2919768209 { 0xae082091 -1375199087 -1.6349384e221 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3591639114 { 0xd614104a -703328182 -1.15674710e45 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3591639113 { 0xd6141049 -703328183 -1.15674698e45 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2919768210 { 0xae082092 -1375199086 -1.6349396e221 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 3591639112 { 0xd6141048 -703328184 -1.15674686e45 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 10) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(25, 17) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3591639112 ] -> true, [ 3591639113; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3591639112 ] -> true, [ 3591639113; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda41137Var : BV:32
2 : Lambda41138Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2919768209 { 0xae082091 -1375199087 -1.6349384e221 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3591639114 { 0xd614104a -703328182 -1.15674710e45 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3591639113 { 0xd6141049 -703328183 -1.15674698e45 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2919768210 { 0xae082092 -1375199086 -1.6349396e221 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 3591639112 { 0xd6141048 -703328184 -1.15674686e45 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 10) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(25, 17) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda41133Var : BV:32
2 : Lambda41134Var : BV:32
3 : 2919768210 { 0xae082092 -1375199086 -1.6349396e221 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : 3089138248 { 0xb8208248 -1205829048 -1.25397586e241 } : BV:32
16 : eq(14, 15) : BOOL
17 : 61 { 0x3d } : BV:8
18 : eq(14, 10) : BOOL
19 : 218 { 0xda -38 } : BV:8
20 : 3089138249 { 0xb8208249 -1205829047 -1.25397598e241 } : BV:32
21 : eq(14, 20) : BOOL
22 : 70 { 0x46 } : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(14, 23) : BOOL
25 : 95 { 0x5f } : BV:8
26 : 3089138251 { 0xb820824b -1205829045 -1.25397622e241 } : BV:32
27 : eq(14, 26) : BOOL
28 : 254 { 0xfe -2 } : BV:8
29 : eq(14, 5) : BOOL
30 : 233 { 0xe9 -23 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 185 { 0xb9 -71 } : BV:8
34 : 3089138250 { 0xb820824a -1205829046 -1.25397610e241 } : BV:32
35 : eq(14, 34) : BOOL
36 : 194 { 0xc2 -62 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : ite(21, 22, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(16, 17, 44) : BV:8
46 : bvadd(31, 13) : BV:32
47 : eq(46, 15) : BOOL
48 : eq(46, 10) : BOOL
49 : eq(46, 20) : BOOL
50 : eq(46, 23) : BOOL
51 : eq(46, 26) : BOOL
52 : eq(46, 5) : BOOL
53 : eq(46, 31) : BOOL
54 : eq(46, 34) : BOOL
55 : ite(54, 36, 37) : BV:8
56 : ite(53, 33, 55) : BV:8
57 : ite(52, 30, 56) : BV:8
58 : ite(51, 28, 57) : BV:8
59 : ite(50, 25, 58) : BV:8
60 : ite(49, 22, 59) : BV:8
61 : ite(48, 19, 60) : BV:8
62 : ite(47, 17, 61) : BV:8
63 : bvadd(23, 13) : BV:32
64 : eq(63, 15) : BOOL
65 : eq(63, 10) : BOOL
66 : eq(63, 20) : BOOL
67 : eq(63, 23) : BOOL
68 : eq(63, 26) : BOOL
69 : eq(63, 5) : BOOL
70 : eq(63, 31) : BOOL
71 : eq(63, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 28, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : ite(66, 22, 76) : BV:8
78 : ite(65, 19, 77) : BV:8
79 : ite(64, 17, 78) : BV:8
80 : eq(13, 15) : BOOL
81 : eq(13, 10) : BOOL
82 : eq(13, 20) : BOOL
83 : eq(13, 23) : BOOL
84 : eq(13, 26) : BOOL
85 : eq(13, 5) : BOOL
86 : eq(13, 31) : BOOL
87 : eq(13, 34) : BOOL
88 : ite(87, 36, 37) : BV:8
89 : ite(86, 33, 88) : BV:8
90 : ite(85, 30, 89) : BV:8
91 : ite(84, 28, 90) : BV:8
92 : ite(83, 25, 91) : BV:8
93 : ite(82, 22, 92) : BV:8
94 : ite(81, 19, 93) : BV:8
95 : ite(80, 17, 94) : BV:8
96 : bvconcat(45, 62, 79, 95) : BV:32
97 : bvadd(10, 12, 96) : BV:32
98 : eq(97, 15) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 20) : BOOL
101 : eq(97, 23) : BOOL
102 : eq(97, 26) : BOOL
103 : eq(97, 5) : BOOL
104 : eq(97, 31) : BOOL
105 : eq(97, 34) : BOOL
106 : ite(105, 36, 37) : BV:8
107 : ite(104, 33, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 28, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 22, 110) : BV:8
112 : ite(99, 19, 111) : BV:8
113 : ite(98, 17, 112) : BV:8
114 : bvadd(31, 12, 96) : BV:32
115 : eq(114, 15) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 20) : BOOL
118 : eq(114, 23) : BOOL
119 : eq(114, 26) : BOOL
120 : eq(114, 5) : BOOL
121 : eq(114, 31) : BOOL
122 : eq(114, 34) : BOOL
123 : ite(122, 36, 37) : BV:8
124 : ite(121, 33, 123) : BV:8
125 : ite(120, 30, 124) : BV:8
126 : ite(119, 28, 125) : BV:8
127 : ite(118, 25, 126) : BV:8
128 : ite(117, 22, 127) : BV:8
129 : ite(116, 19, 128) : BV:8
130 : ite(115, 17, 129) : BV:8
131 : bvadd(23, 12, 96) : BV:32
132 : eq(131, 15) : BOOL
133 : eq(131, 10) : BOOL
134 : eq(131, 20) : BOOL
135 : eq(131, 23) : BOOL
136 : eq(131, 26) : BOOL
137 : eq(131, 5) : BOOL
138 : eq(131, 31) : BOOL
139 : eq(131, 34) : BOOL
140 : ite(139, 36, 37) : BV:8
141 : ite(138, 33, 140) : BV:8
142 : ite(137, 30, 141) : BV:8
143 : ite(136, 28, 142) : BV:8
144 : ite(135, 25, 143) : BV:8
145 : ite(134, 22, 144) : BV:8
146 : ite(133, 19, 145) : BV:8
147 : ite(132, 17, 146) : BV:8
148 : bvadd(12, 96) : BV:32
149 : eq(148, 15) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 20) : BOOL
152 : eq(148, 23) : BOOL
153 : eq(148, 26) : BOOL
154 : eq(148, 5) : BOOL
155 : eq(148, 31) : BOOL
156 : eq(148, 34) : BOOL
157 : ite(156, 36, 37) : BV:8
158 : ite(155, 33, 157) : BV:8
159 : ite(154, 30, 158) : BV:8
160 : ite(153, 28, 159) : BV:8
161 : ite(152, 25, 160) : BV:8
162 : ite(151, 22, 161) : BV:8
163 : ite(150, 19, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : bvconcat(113, 130, 147, 164) : BV:32
166 : ite(9, 5, 165) : BV:32
167 : ite(7, 5, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
990734917
=counter_example_end
=global nodece 37 num_edges_traversed 1
=global nodece 37 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 38
=global nodece 38 nodece z3v487.ce3724.num_edges_traversed1
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3v487.ce3724 6a21238dec8d047eb66212f0ce267
=input.spec-%var-x-1
1 : Lambda42618Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda42619Var : BV:32
17 : Lambda42620Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda42621Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda42643Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda42644Var : BV:32
17 : Lambda42645Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda42646Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 171929603 { 0xa3f7003 +1.49560582e149 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda42651Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda42652Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda42628Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda42629Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda42657Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda42658Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 386246974 { 0x1705a93e +1.4422736e175 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
167570401
=counter_example_end
=global nodece 38 num_edges_traversed 1
=global nodece 38 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 39
=global nodece 39 nodece z3.ce3770.num_edges_traversed0
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(epsilon)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3.ce3770 708aa08a1963cb6f81de7b5af42fca4
=input.spec-%var-x-1
1 : Lambda43690Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43691Var : BV:32
18 : Lambda43692Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43693Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 157 { 0x9d -99 } : BV:8
83 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
84 : eq(80, 83) : BOOL
85 : 64 { 0x40 } : BV:8
86 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
87 : eq(80, 86) : BOOL
88 : 90 { 0x5a } : BV:8
89 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
90 : eq(80, 89) : BOOL
91 : 224 { 0xe0 -32 } : BV:8
92 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
93 : eq(80, 92) : BOOL
94 : 247 { 0xf7 -9 } : BV:8
95 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
96 : eq(80, 95) : BOOL
97 : 85 { 0x55 } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(93, 94, 99) : BV:8
101 : ite(90, 91, 100) : BV:8
102 : ite(87, 88, 101) : BV:8
103 : ite(84, 85, 102) : BV:8
104 : ite(81, 82, 103) : BV:8
105 : bvadd(92, 79) : BV:32
106 : eq(105, 78) : BOOL
107 : eq(105, 83) : BOOL
108 : eq(105, 86) : BOOL
109 : eq(105, 89) : BOOL
110 : eq(105, 92) : BOOL
111 : eq(105, 95) : BOOL
112 : ite(111, 97, 98) : BV:8
113 : ite(110, 94, 112) : BV:8
114 : ite(109, 91, 113) : BV:8
115 : ite(108, 88, 114) : BV:8
116 : ite(107, 85, 115) : BV:8
117 : ite(106, 82, 116) : BV:8
118 : bvadd(95, 79) : BV:32
119 : eq(118, 78) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 89) : BOOL
123 : eq(118, 92) : BOOL
124 : eq(118, 95) : BOOL
125 : ite(124, 97, 98) : BV:8
126 : ite(123, 94, 125) : BV:8
127 : ite(122, 91, 126) : BV:8
128 : ite(121, 88, 127) : BV:8
129 : ite(120, 85, 128) : BV:8
130 : ite(119, 82, 129) : BV:8
131 : bvadd(86, 79) : BV:32
132 : eq(131, 78) : BOOL
133 : eq(131, 83) : BOOL
134 : eq(131, 86) : BOOL
135 : eq(131, 89) : BOOL
136 : eq(131, 92) : BOOL
137 : eq(131, 95) : BOOL
138 : ite(137, 97, 98) : BV:8
139 : ite(136, 94, 138) : BV:8
140 : ite(135, 91, 139) : BV:8
141 : ite(134, 88, 140) : BV:8
142 : ite(133, 85, 141) : BV:8
143 : ite(132, 82, 142) : BV:8
144 : bvconcat(104, 117, 130, 143) : BV:32
145 : bvadd(75, 77, 144) : BV:32
146 : eq(145, 78) : BOOL
147 : eq(145, 83) : BOOL
148 : eq(145, 86) : BOOL
149 : eq(145, 89) : BOOL
150 : eq(145, 92) : BOOL
151 : eq(145, 95) : BOOL
152 : ite(151, 97, 98) : BV:8
153 : ite(150, 94, 152) : BV:8
154 : ite(149, 91, 153) : BV:8
155 : ite(148, 88, 154) : BV:8
156 : ite(147, 85, 155) : BV:8
157 : ite(146, 82, 156) : BV:8
158 : 2 { 0x2 +1.23e129 } : BV:32
159 : bvadd(158, 77, 144) : BV:32
160 : eq(159, 78) : BOOL
161 : eq(159, 83) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : eq(159, 95) : BOOL
166 : ite(165, 97, 98) : BV:8
167 : ite(164, 94, 166) : BV:8
168 : ite(163, 91, 167) : BV:8
169 : ite(162, 88, 168) : BV:8
170 : ite(161, 85, 169) : BV:8
171 : ite(160, 82, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 77, 144) : BV:32
174 : eq(173, 78) : BOOL
175 : eq(173, 83) : BOOL
176 : eq(173, 86) : BOOL
177 : eq(173, 89) : BOOL
178 : eq(173, 92) : BOOL
179 : eq(173, 95) : BOOL
180 : ite(179, 97, 98) : BV:8
181 : ite(178, 94, 180) : BV:8
182 : ite(177, 91, 181) : BV:8
183 : ite(176, 88, 182) : BV:8
184 : ite(175, 85, 183) : BV:8
185 : ite(174, 82, 184) : BV:8
186 : bvadd(77, 144) : BV:32
187 : eq(186, 78) : BOOL
188 : eq(186, 83) : BOOL
189 : eq(186, 86) : BOOL
190 : eq(186, 89) : BOOL
191 : eq(186, 92) : BOOL
192 : eq(186, 95) : BOOL
193 : ite(192, 97, 98) : BV:8
194 : ite(191, 94, 193) : BV:8
195 : ite(190, 91, 194) : BV:8
196 : ite(189, 88, 195) : BV:8
197 : ite(188, 85, 196) : BV:8
198 : ite(187, 82, 197) : BV:8
199 : bvconcat(157, 171, 185, 198) : BV:32
200 : ite(55, 2, 199) : BV:32
201 : ite(74, 199, 200) : BV:32
202 : ite(55, 2, 201) : BV:32
203 : lambda(52, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(51, 203) : MAP[BV:32 -> BV:32]
205 : lambda(17, 204) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
206 : map(16, 205) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
207 : sym_const(206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43710Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43711Var : BV:32
18 : Lambda43712Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43713Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 157 { 0x9d -99 } : BV:8
64 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
65 : eq(61, 64) : BOOL
66 : 64 { 0x40 } : BV:8
67 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
68 : eq(61, 67) : BOOL
69 : 90 { 0x5a } : BV:8
70 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
71 : eq(61, 70) : BOOL
72 : 224 { 0xe0 -32 } : BV:8
73 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
74 : eq(61, 73) : BOOL
75 : 247 { 0xf7 -9 } : BV:8
76 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
77 : eq(61, 76) : BOOL
78 : 85 { 0x55 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : bvadd(73, 60) : BV:32
87 : eq(86, 59) : BOOL
88 : eq(86, 64) : BOOL
89 : eq(86, 67) : BOOL
90 : eq(86, 70) : BOOL
91 : eq(86, 73) : BOOL
92 : eq(86, 76) : BOOL
93 : ite(92, 78, 79) : BV:8
94 : ite(91, 75, 93) : BV:8
95 : ite(90, 72, 94) : BV:8
96 : ite(89, 69, 95) : BV:8
97 : ite(88, 66, 96) : BV:8
98 : ite(87, 63, 97) : BV:8
99 : bvadd(76, 60) : BV:32
100 : eq(99, 59) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 67) : BOOL
103 : eq(99, 70) : BOOL
104 : eq(99, 73) : BOOL
105 : eq(99, 76) : BOOL
106 : ite(105, 78, 79) : BV:8
107 : ite(104, 75, 106) : BV:8
108 : ite(103, 72, 107) : BV:8
109 : ite(102, 69, 108) : BV:8
110 : ite(101, 66, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : bvadd(67, 60) : BV:32
113 : eq(112, 59) : BOOL
114 : eq(112, 64) : BOOL
115 : eq(112, 67) : BOOL
116 : eq(112, 70) : BOOL
117 : eq(112, 73) : BOOL
118 : eq(112, 76) : BOOL
119 : ite(118, 78, 79) : BV:8
120 : ite(117, 75, 119) : BV:8
121 : ite(116, 72, 120) : BV:8
122 : ite(115, 69, 121) : BV:8
123 : ite(114, 66, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : bvconcat(85, 98, 111, 124) : BV:32
126 : bvadd(56, 58, 125) : BV:32
127 : eq(126, 59) : BOOL
128 : eq(126, 64) : BOOL
129 : eq(126, 67) : BOOL
130 : eq(126, 70) : BOOL
131 : eq(126, 73) : BOOL
132 : eq(126, 76) : BOOL
133 : ite(132, 78, 79) : BV:8
134 : ite(131, 75, 133) : BV:8
135 : ite(130, 72, 134) : BV:8
136 : ite(129, 69, 135) : BV:8
137 : ite(128, 66, 136) : BV:8
138 : ite(127, 63, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 58, 125) : BV:32
141 : eq(140, 59) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : eq(140, 76) : BOOL
147 : ite(146, 78, 79) : BV:8
148 : ite(145, 75, 147) : BV:8
149 : ite(144, 72, 148) : BV:8
150 : ite(143, 69, 149) : BV:8
151 : ite(142, 66, 150) : BV:8
152 : ite(141, 63, 151) : BV:8
153 : 1 { 0x1 +1.11e129 } : BV:32
154 : bvadd(153, 58, 125) : BV:32
155 : eq(154, 59) : BOOL
156 : eq(154, 64) : BOOL
157 : eq(154, 67) : BOOL
158 : eq(154, 70) : BOOL
159 : eq(154, 73) : BOOL
160 : eq(154, 76) : BOOL
161 : ite(160, 78, 79) : BV:8
162 : ite(159, 75, 161) : BV:8
163 : ite(158, 72, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 66, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : bvadd(58, 125) : BV:32
168 : eq(167, 59) : BOOL
169 : eq(167, 64) : BOOL
170 : eq(167, 67) : BOOL
171 : eq(167, 70) : BOOL
172 : eq(167, 73) : BOOL
173 : eq(167, 76) : BOOL
174 : ite(173, 78, 79) : BV:8
175 : ite(172, 75, 174) : BV:8
176 : ite(171, 72, 175) : BV:8
177 : ite(170, 69, 176) : BV:8
178 : ite(169, 66, 177) : BV:8
179 : ite(168, 63, 178) : BV:8
180 : bvconcat(138, 152, 166, 179) : BV:32
181 : ite(55, 2, 180) : BV:32
182 : lambda(52, 181) : FUNCTION[BV:32 -> BV:32]
183 : map(51, 182) : MAP[BV:32 -> BV:32]
184 : lambda(17, 183) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
185 : map(16, 184) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
186 : sym_const(185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 164093951 ] -> 0, [ 164093952; 164093952 ] -> 90, [ 164093953; 164093953 ] -> 85, [ 164093954; 164093954 ] -> 247, [ 164093955; 164093955 ] -> 157, [ 164093956; 1929379837 ] -> 0, [ 1929379838; 1929379838 ] -> 64, [ 1929379839; 1929379839 ] -> 224, [ 1929379840; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 367490807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 367490808; 367490811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 367490812; 1993719035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1993719036; 1993719039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1993719040; 3774884359 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3774884360; 3774884363 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3774884364; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3774884360 { 0xe1002a08 -520082936 -1.128269e67 } : BV:32
=input.dst.llvm-%m
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1993719036 { 0x76d5bcfc +1.66982984e110 } : BV:32
=input.dst.llvm-%n
1 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 367490808 { 0x15e776f8 +1.80831813e172 } : BV:32
=input.dst.llvm-%x
1 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 441321471 { 0x1a4e07ff +1.60961902e181 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43717Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43718Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
25 : eq(23, 24) : BOOL
26 : 157 { 0x9d -99 } : BV:8
27 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
31 : eq(23, 30) : BOOL
32 : 90 { 0x5a } : BV:8
33 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
34 : eq(23, 33) : BOOL
35 : 224 { 0xe0 -32 } : BV:8
36 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
37 : eq(23, 36) : BOOL
38 : 247 { 0xf7 -9 } : BV:8
39 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
40 : eq(23, 39) : BOOL
41 : 85 { 0x55 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 441321472 { 0x1a4e0800 +1.60961914e181 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
2 : unit : UNIT
3 : Lambda43699Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 511 { 0x1ff +1.6091e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 512 { 0x200 +1.6103e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43700Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
27 : eq(25, 26) : BOOL
28 : 157 { 0x9d -99 } : BV:8
29 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
30 : eq(25, 29) : BOOL
31 : 64 { 0x40 } : BV:8
32 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
33 : eq(25, 32) : BOOL
34 : 90 { 0x5a } : BV:8
35 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
36 : eq(25, 35) : BOOL
37 : 224 { 0xe0 -32 } : BV:8
38 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
39 : eq(25, 38) : BOOL
40 : 247 { 0xf7 -9 } : BV:8
41 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
42 : eq(25, 41) : BOOL
43 : 85 { 0x55 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 23, 24) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : eq(52, 32) : BOOL
56 : eq(52, 35) : BOOL
57 : eq(52, 38) : BOOL
58 : eq(52, 41) : BOOL
59 : ite(58, 43, 44) : BV:8
60 : ite(57, 40, 59) : BV:8
61 : ite(56, 37, 60) : BV:8
62 : ite(55, 34, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 23, 24) : BV:32
67 : eq(66, 26) : BOOL
68 : eq(66, 29) : BOOL
69 : eq(66, 32) : BOOL
70 : eq(66, 35) : BOOL
71 : eq(66, 38) : BOOL
72 : eq(66, 41) : BOOL
73 : ite(72, 43, 44) : BV:8
74 : ite(71, 40, 73) : BV:8
75 : ite(70, 37, 74) : BV:8
76 : ite(69, 34, 75) : BV:8
77 : ite(68, 31, 76) : BV:8
78 : ite(67, 28, 77) : BV:8
79 : bvadd(23, 24) : BV:32
80 : eq(79, 26) : BOOL
81 : eq(79, 29) : BOOL
82 : eq(79, 32) : BOOL
83 : eq(79, 35) : BOOL
84 : eq(79, 38) : BOOL
85 : eq(79, 41) : BOOL
86 : ite(85, 43, 44) : BV:8
87 : ite(84, 40, 86) : BV:8
88 : ite(83, 37, 87) : BV:8
89 : ite(82, 34, 88) : BV:8
90 : ite(81, 31, 89) : BV:8
91 : ite(80, 28, 90) : BV:8
92 : bvconcat(50, 64, 78, 91) : BV:32
93 : ite(20, 4, 92) : BV:32
94 : lambda(19, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(18, 94) : MAP[BV:32 -> BV:32]
96 : sum(1, 2, 95) : SUM[UNIT,MAP[BV:32 -> BV:32]]
97 : sym_const(96) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43722Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43723Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
25 : eq(23, 24) : BOOL
26 : 157 { 0x9d -99 } : BV:8
27 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
31 : eq(23, 30) : BOOL
32 : 90 { 0x5a } : BV:8
33 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
34 : eq(23, 33) : BOOL
35 : 224 { 0xe0 -32 } : BV:8
36 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
37 : eq(23, 36) : BOOL
38 : 247 { 0xf7 -9 } : BV:8
39 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
40 : eq(23, 39) : BOOL
41 : 85 { 0x55 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 441321471 { 0x1a4e07ff +1.60961902e181 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1993719036 { 0x76d5bcfc +1.66982984e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1993719039 { 0x76d5bcff +1.66983020e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 367490808 { 0x15e776f8 +1.80831813e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 367490811 { 0x15e776fb +1.80831849e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3774884360 { 0xe1002a08 -520082936 -1.128269e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3774884363 { 0xe1002a0b -520082933 -1.128304e67 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda43582Var : BV:32
2 : Lambda43583Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 511 { 0x1ff +1.6091e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 512 { 0x200 +1.6103e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 513 { 0x201 +1.6115e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 157 { 0x9d -99 } : BV:8
56 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
57 : eq(53, 56) : BOOL
58 : 64 { 0x40 } : BV:8
59 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
60 : eq(53, 59) : BOOL
61 : 90 { 0x5a } : BV:8
62 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
63 : eq(53, 62) : BOOL
64 : 224 { 0xe0 -32 } : BV:8
65 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
66 : eq(53, 65) : BOOL
67 : 247 { 0xf7 -9 } : BV:8
68 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
69 : eq(53, 68) : BOOL
70 : 85 { 0x55 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(57, 58, 75) : BV:8
77 : ite(54, 55, 76) : BV:8
78 : bvadd(65, 52) : BV:32
79 : eq(78, 51) : BOOL
80 : eq(78, 56) : BOOL
81 : eq(78, 59) : BOOL
82 : eq(78, 62) : BOOL
83 : eq(78, 65) : BOOL
84 : eq(78, 68) : BOOL
85 : ite(84, 70, 71) : BV:8
86 : ite(83, 67, 85) : BV:8
87 : ite(82, 64, 86) : BV:8
88 : ite(81, 61, 87) : BV:8
89 : ite(80, 58, 88) : BV:8
90 : ite(79, 55, 89) : BV:8
91 : bvadd(68, 52) : BV:32
92 : eq(91, 51) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 62) : BOOL
96 : eq(91, 65) : BOOL
97 : eq(91, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : ite(93, 58, 101) : BV:8
103 : ite(92, 55, 102) : BV:8
104 : bvadd(59, 52) : BV:32
105 : eq(104, 51) : BOOL
106 : eq(104, 56) : BOOL
107 : eq(104, 59) : BOOL
108 : eq(104, 62) : BOOL
109 : eq(104, 65) : BOOL
110 : eq(104, 68) : BOOL
111 : ite(110, 70, 71) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 64, 112) : BV:8
114 : ite(107, 61, 113) : BV:8
115 : ite(106, 58, 114) : BV:8
116 : ite(105, 55, 115) : BV:8
117 : bvconcat(77, 90, 103, 116) : BV:32
118 : bvadd(48, 50, 117) : BV:32
119 : eq(118, 51) : BOOL
120 : eq(118, 56) : BOOL
121 : eq(118, 59) : BOOL
122 : eq(118, 62) : BOOL
123 : eq(118, 65) : BOOL
124 : eq(118, 68) : BOOL
125 : ite(124, 70, 71) : BV:8
126 : ite(123, 67, 125) : BV:8
127 : ite(122, 64, 126) : BV:8
128 : ite(121, 61, 127) : BV:8
129 : ite(120, 58, 128) : BV:8
130 : ite(119, 55, 129) : BV:8
131 : 2 { 0x2 +1.23e129 } : BV:32
132 : bvadd(131, 50, 117) : BV:32
133 : eq(132, 51) : BOOL
134 : eq(132, 56) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : eq(132, 68) : BOOL
139 : ite(138, 70, 71) : BV:8
140 : ite(137, 67, 139) : BV:8
141 : ite(136, 64, 140) : BV:8
142 : ite(135, 61, 141) : BV:8
143 : ite(134, 58, 142) : BV:8
144 : ite(133, 55, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 50, 117) : BV:32
147 : eq(146, 51) : BOOL
148 : eq(146, 56) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 62) : BOOL
151 : eq(146, 65) : BOOL
152 : eq(146, 68) : BOOL
153 : ite(152, 70, 71) : BV:8
154 : ite(151, 67, 153) : BV:8
155 : ite(150, 64, 154) : BV:8
156 : ite(149, 61, 155) : BV:8
157 : ite(148, 58, 156) : BV:8
158 : ite(147, 55, 157) : BV:8
159 : bvadd(50, 117) : BV:32
160 : eq(159, 51) : BOOL
161 : eq(159, 56) : BOOL
162 : eq(159, 59) : BOOL
163 : eq(159, 62) : BOOL
164 : eq(159, 65) : BOOL
165 : eq(159, 68) : BOOL
166 : ite(165, 70, 71) : BV:8
167 : ite(164, 67, 166) : BV:8
168 : ite(163, 64, 167) : BV:8
169 : ite(162, 61, 168) : BV:8
170 : ite(161, 58, 169) : BV:8
171 : ite(160, 55, 170) : BV:8
172 : bvconcat(130, 144, 158, 171) : BV:32
173 : ite(6, 3, 172) : BV:32
174 : ite(47, 172, 173) : BV:32
175 : ite(6, 3, 174) : BV:32
176 : lambda(1, 2, 175) : FUNCTION[BV:32,BV:32 -> BV:32]
177 : sym_const(176) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda43587Var : BV:32
2 : Lambda43588Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 957746151 ] -> true, [ 957746152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 957746151 ] -> true, [ 957746152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda43596Var : BV:32
2 : Lambda43597Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda43592Var : BV:32
2 : Lambda43593Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 157 { 0x9d -99 } : BV:8
15 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
19 : eq(12, 18) : BOOL
20 : 90 { 0x5a } : BV:8
21 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
22 : eq(12, 21) : BOOL
23 : 224 { 0xe0 -32 } : BV:8
24 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
25 : eq(12, 24) : BOOL
26 : 247 { 0xf7 -9 } : BV:8
27 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
28 : eq(12, 27) : BOOL
29 : 85 { 0x55 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : bvadd(24, 11) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 15) : BOOL
40 : eq(37, 18) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 17, 47) : BV:8
49 : ite(38, 14, 48) : BV:8
50 : bvadd(27, 11) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 15) : BOOL
53 : eq(50, 18) : BOOL
54 : eq(50, 21) : BOOL
55 : eq(50, 24) : BOOL
56 : eq(50, 27) : BOOL
57 : ite(56, 29, 30) : BV:8
58 : ite(55, 26, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 20, 59) : BV:8
61 : ite(52, 17, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : bvadd(18, 11) : BV:32
64 : eq(63, 10) : BOOL
65 : eq(63, 15) : BOOL
66 : eq(63, 18) : BOOL
67 : eq(63, 21) : BOOL
68 : eq(63, 24) : BOOL
69 : eq(63, 27) : BOOL
70 : ite(69, 29, 30) : BV:8
71 : ite(68, 26, 70) : BV:8
72 : ite(67, 23, 71) : BV:8
73 : ite(66, 20, 72) : BV:8
74 : ite(65, 17, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : bvconcat(36, 49, 62, 75) : BV:32
77 : bvadd(7, 9, 76) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 15) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 24) : BOOL
83 : eq(77, 27) : BOOL
84 : ite(83, 29, 30) : BV:8
85 : ite(82, 26, 84) : BV:8
86 : ite(81, 23, 85) : BV:8
87 : ite(80, 20, 86) : BV:8
88 : ite(79, 17, 87) : BV:8
89 : ite(78, 14, 88) : BV:8
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : bvadd(90, 9, 76) : BV:32
92 : eq(91, 10) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : eq(91, 27) : BOOL
98 : ite(97, 29, 30) : BV:8
99 : ite(96, 26, 98) : BV:8
100 : ite(95, 23, 99) : BV:8
101 : ite(94, 20, 100) : BV:8
102 : ite(93, 17, 101) : BV:8
103 : ite(92, 14, 102) : BV:8
104 : 1 { 0x1 +1.11e129 } : BV:32
105 : bvadd(104, 9, 76) : BV:32
106 : eq(105, 10) : BOOL
107 : eq(105, 15) : BOOL
108 : eq(105, 18) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : eq(105, 27) : BOOL
112 : ite(111, 29, 30) : BV:8
113 : ite(110, 26, 112) : BV:8
114 : ite(109, 23, 113) : BV:8
115 : ite(108, 20, 114) : BV:8
116 : ite(107, 17, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : bvadd(9, 76) : BV:32
119 : eq(118, 10) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 18) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : ite(124, 29, 30) : BV:8
126 : ite(123, 26, 125) : BV:8
127 : ite(122, 23, 126) : BV:8
128 : ite(121, 20, 127) : BV:8
129 : ite(120, 17, 128) : BV:8
130 : ite(119, 14, 129) : BV:8
131 : bvconcat(89, 103, 117, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : lambda(1, 2, 132) : FUNCTION[BV:32,BV:32 -> BV:32]
134 : sym_const(133) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43603Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 157 { 0x9d -99 } : BV:8
12 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
16 : eq(8, 15) : BOOL
17 : 90 { 0x5a } : BV:8
18 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
19 : eq(8, 18) : BOOL
20 : 224 { 0xe0 -32 } : BV:8
21 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
22 : eq(8, 21) : BOOL
23 : 247 { 0xf7 -9 } : BV:8
24 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
25 : eq(8, 24) : BOOL
26 : 85 { 0x55 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda43604Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 157 { 0x9d -99 } : BV:8
12 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
16 : eq(8, 15) : BOOL
17 : 90 { 0x5a } : BV:8
18 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
19 : eq(8, 18) : BOOL
20 : 224 { 0xe0 -32 } : BV:8
21 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
22 : eq(8, 21) : BOOL
23 : 247 { 0xf7 -9 } : BV:8
24 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
25 : eq(8, 24) : BOOL
26 : 85 { 0x55 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43611Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 157 { 0x9d -99 } : BV:8
12 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
16 : eq(8, 15) : BOOL
17 : 90 { 0x5a } : BV:8
18 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
19 : eq(8, 18) : BOOL
20 : 224 { 0xe0 -32 } : BV:8
21 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
22 : eq(8, 21) : BOOL
23 : 247 { 0xf7 -9 } : BV:8
24 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
25 : eq(8, 24) : BOOL
26 : 85 { 0x55 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2951189257
=counter_example_end
=global nodece 39 num_edges_traversed 0
=global nodece 39 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 40
=global nodece 40 nodece z3v487.ce3771.num_edges_traversed0
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(epsilon)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3v487.ce3771 11c7e510817f9e8f310d5ece597a959
=input.spec-%var-x-1
1 : Lambda43771Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1129611263 { 0x43547fff +1.66015613e7 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1129611264 { 0x43548000 +1.66015625e7 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43772Var : BV:32
18 : Lambda43773Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1129611265 { 0x43548001 +1.66015636e7 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43774Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : 2151153667 { 0x80380003 -2143813629 -1.43750035e129 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2325217276 { 0x8a97fffc -1969750020 -1.18749952e150 } : BV:32
62 : eq(60, 61) : BOOL
63 : 16 { 0x10 } : BV:8
64 : 2325217277 { 0x8a97fffd -1969750019 -1.18749964e150 } : BV:32
65 : eq(60, 64) : BOOL
66 : 152 { 0x98 -104 } : BV:8
67 : 2325217278 { 0x8a97fffe -1969750018 -1.18749976e150 } : BV:32
68 : eq(60, 67) : BOOL
69 : 33 { 0x21 } : BV:8
70 : 0 { 0x0 } : BV:8
71 : ite(68, 69, 70) : BV:8
72 : ite(65, 66, 71) : BV:8
73 : ite(62, 63, 72) : BV:8
74 : 2151153666 { 0x80380002 -2143813630 -1.43750023e129 } : BV:32
75 : bvadd(74, 59) : BV:32
76 : eq(75, 61) : BOOL
77 : eq(75, 64) : BOOL
78 : eq(75, 67) : BOOL
79 : ite(78, 69, 70) : BV:8
80 : ite(77, 66, 79) : BV:8
81 : ite(76, 63, 80) : BV:8
82 : 2151153665 { 0x80380001 -2143813631 -1.43750011e129 } : BV:32
83 : bvadd(82, 59) : BV:32
84 : eq(83, 61) : BOOL
85 : eq(83, 64) : BOOL
86 : eq(83, 67) : BOOL
87 : ite(86, 69, 70) : BV:8
88 : ite(85, 66, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : 2151153664 { 0x80380000 -2143813632 -1.43750000e129 } : BV:32
91 : bvadd(90, 59) : BV:32
92 : eq(91, 61) : BOOL
93 : eq(91, 64) : BOOL
94 : eq(91, 67) : BOOL
95 : ite(94, 69, 70) : BV:8
96 : ite(93, 66, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : bvconcat(73, 81, 89, 97) : BV:32
99 : bvadd(37, 57, 98) : BV:32
100 : eq(99, 61) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 67) : BOOL
103 : ite(102, 69, 70) : BV:8
104 : ite(101, 66, 103) : BV:8
105 : ite(100, 63, 104) : BV:8
106 : bvadd(41, 57, 98) : BV:32
107 : eq(106, 61) : BOOL
108 : eq(106, 64) : BOOL
109 : eq(106, 67) : BOOL
110 : ite(109, 69, 70) : BV:8
111 : ite(108, 66, 110) : BV:8
112 : ite(107, 63, 111) : BV:8
113 : bvadd(34, 57, 98) : BV:32
114 : eq(113, 61) : BOOL
115 : eq(113, 64) : BOOL
116 : eq(113, 67) : BOOL
117 : ite(116, 69, 70) : BV:8
118 : ite(115, 66, 117) : BV:8
119 : ite(114, 63, 118) : BV:8
120 : bvadd(57, 98) : BV:32
121 : eq(120, 61) : BOOL
122 : eq(120, 64) : BOOL
123 : eq(120, 67) : BOOL
124 : ite(123, 69, 70) : BV:8
125 : ite(122, 66, 124) : BV:8
126 : ite(121, 63, 125) : BV:8
127 : bvconcat(105, 112, 119, 126) : BV:32
128 : ite(55, 2, 127) : BV:32
129 : lambda(52, 128) : FUNCTION[BV:32 -> BV:32]
130 : map(51, 129) : MAP[BV:32 -> BV:32]
131 : lambda(17, 130) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
132 : map(16, 131) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
133 : sym_const(132) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43791Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1129611263 { 0x43547fff +1.66015613e7 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1129611264 { 0x43548000 +1.66015625e7 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43792Var : BV:32
18 : Lambda43793Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1129611265 { 0x43548001 +1.66015636e7 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43794Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : 2151153667 { 0x80380003 -2143813629 -1.43750035e129 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2325217276 { 0x8a97fffc -1969750020 -1.18749952e150 } : BV:32
81 : eq(79, 80) : BOOL
82 : 16 { 0x10 } : BV:8
83 : 2325217277 { 0x8a97fffd -1969750019 -1.18749964e150 } : BV:32
84 : eq(79, 83) : BOOL
85 : 152 { 0x98 -104 } : BV:8
86 : 2325217278 { 0x8a97fffe -1969750018 -1.18749976e150 } : BV:32
87 : eq(79, 86) : BOOL
88 : 33 { 0x21 } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : 2151153666 { 0x80380002 -2143813630 -1.43750023e129 } : BV:32
94 : bvadd(93, 78) : BV:32
95 : eq(94, 80) : BOOL
96 : eq(94, 83) : BOOL
97 : eq(94, 86) : BOOL
98 : ite(97, 88, 89) : BV:8
99 : ite(96, 85, 98) : BV:8
100 : ite(95, 82, 99) : BV:8
101 : 2151153665 { 0x80380001 -2143813631 -1.43750011e129 } : BV:32
102 : bvadd(101, 78) : BV:32
103 : eq(102, 80) : BOOL
104 : eq(102, 83) : BOOL
105 : eq(102, 86) : BOOL
106 : ite(105, 88, 89) : BV:8
107 : ite(104, 85, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : 2151153664 { 0x80380000 -2143813632 -1.43750000e129 } : BV:32
110 : bvadd(109, 78) : BV:32
111 : eq(110, 80) : BOOL
112 : eq(110, 83) : BOOL
113 : eq(110, 86) : BOOL
114 : ite(113, 88, 89) : BV:8
115 : ite(112, 85, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : bvconcat(92, 100, 108, 116) : BV:32
118 : bvadd(37, 76, 117) : BV:32
119 : eq(118, 80) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 86) : BOOL
122 : ite(121, 88, 89) : BV:8
123 : ite(120, 85, 122) : BV:8
124 : ite(119, 82, 123) : BV:8
125 : bvadd(41, 76, 117) : BV:32
126 : eq(125, 80) : BOOL
127 : eq(125, 83) : BOOL
128 : eq(125, 86) : BOOL
129 : ite(128, 88, 89) : BV:8
130 : ite(127, 85, 129) : BV:8
131 : ite(126, 82, 130) : BV:8
132 : bvadd(34, 76, 117) : BV:32
133 : eq(132, 80) : BOOL
134 : eq(132, 83) : BOOL
135 : eq(132, 86) : BOOL
136 : ite(135, 88, 89) : BV:8
137 : ite(134, 85, 136) : BV:8
138 : ite(133, 82, 137) : BV:8
139 : bvadd(76, 117) : BV:32
140 : eq(139, 80) : BOOL
141 : eq(139, 83) : BOOL
142 : eq(139, 86) : BOOL
143 : ite(142, 88, 89) : BV:8
144 : ite(141, 85, 143) : BV:8
145 : ite(140, 82, 144) : BV:8
146 : bvconcat(124, 131, 138, 145) : BV:32
147 : ite(55, 2, 146) : BV:32
148 : ite(74, 146, 147) : BV:32
149 : ite(55, 2, 148) : BV:32
150 : lambda(52, 149) : FUNCTION[BV:32 -> BV:32]
151 : map(51, 150) : MAP[BV:32 -> BV:32]
152 : lambda(17, 151) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
153 : map(16, 152) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
154 : sym_const(153) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2325217275 ] -> 0, [ 2325217276; 2325217276 ] -> 16, [ 2325217277; 2325217277 ] -> 152, [ 2325217278; 2325217278 ] -> 33, [ 2325217279; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 339083263 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 339083264; 339083267 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 339083268; 540409859 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 540409860; 540409863 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 540409864; 2091909375 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2091909376; 2091909379 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2091909380; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2091909376 { 0x7cb00100 +1.37503051e122 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 540409860 { 0x20360004 +1.42187547e193 } : BV:32
=input.dst.llvm-%n
1 : 1129611264 { 0x43548000 +1.66015625e7 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 339083264 { 0x14360000 +1.42187500e169 } : BV:32
=input.dst.llvm-%x
1 : 2151153664 { 0x80380000 -2143813632 -1.43750000e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1117257727 { 0x4297ffff +1.18749988e6 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43798Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43799Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2201616 { 0x219810 +1.26245307e129 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2325217276 { 0x8a97fffc -1969750020 -1.18749952e150 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 2325217277 { 0x8a97fffd -1969750019 -1.18749964e150 } : BV:32
28 : eq(23, 27) : BOOL
29 : 152 { 0x98 -104 } : BV:8
30 : 2325217278 { 0x8a97fffe -1969750018 -1.18749976e150 } : BV:32
31 : eq(23, 30) : BOOL
32 : 33 { 0x21 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : bvadd(8, 21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : eq(37, 27) : BOOL
40 : eq(37, 30) : BOOL
41 : ite(40, 32, 33) : BV:8
42 : ite(39, 29, 41) : BV:8
43 : ite(38, 26, 42) : BV:8
44 : bvadd(4, 21, 22) : BV:32
45 : eq(44, 24) : BOOL
46 : eq(44, 27) : BOOL
47 : eq(44, 30) : BOOL
48 : ite(47, 32, 33) : BV:8
49 : ite(46, 29, 48) : BV:8
50 : ite(45, 26, 49) : BV:8
51 : bvadd(21, 22) : BV:32
52 : eq(51, 24) : BOOL
53 : eq(51, 27) : BOOL
54 : eq(51, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 26, 56) : BV:8
58 : bvconcat(36, 43, 50, 57) : BV:32
59 : ite(18, 2, 58) : BV:32
60 : lambda(17, 59) : FUNCTION[BV:32 -> BV:32]
61 : map(16, 60) : MAP[BV:32 -> BV:32]
62 : sym_const(61) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1117257728 { 0x42980000 +1.18750000e6 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
2 : unit : UNIT
3 : Lambda43780Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2 { 0x2 +1.23e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43781Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 2201616 { 0x219810 +1.26245307e129 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 2325217276 { 0x8a97fffc -1969750020 -1.18749952e150 } : BV:32
27 : eq(25, 26) : BOOL
28 : 16 { 0x10 } : BV:8
29 : 2325217277 { 0x8a97fffd -1969750019 -1.18749964e150 } : BV:32
30 : eq(25, 29) : BOOL
31 : 152 { 0x98 -104 } : BV:8
32 : 2325217278 { 0x8a97fffe -1969750018 -1.18749976e150 } : BV:32
33 : eq(25, 32) : BOOL
34 : 33 { 0x21 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(10, 23, 24) : BV:32
40 : eq(39, 26) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(6, 23, 24) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(23, 24) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : ite(20, 4, 60) : BV:32
62 : lambda(19, 61) : FUNCTION[BV:32 -> BV:32]
63 : map(18, 62) : MAP[BV:32 -> BV:32]
64 : sum(1, 2, 63) : SUM[UNIT,MAP[BV:32 -> BV:32]]
65 : sym_const(64) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43803Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43804Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2201616 { 0x219810 +1.26245307e129 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2325217276 { 0x8a97fffc -1969750020 -1.18749952e150 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 2325217277 { 0x8a97fffd -1969750019 -1.18749964e150 } : BV:32
28 : eq(23, 27) : BOOL
29 : 152 { 0x98 -104 } : BV:8
30 : 2325217278 { 0x8a97fffe -1969750018 -1.18749976e150 } : BV:32
31 : eq(23, 30) : BOOL
32 : 33 { 0x21 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : bvadd(8, 21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : eq(37, 27) : BOOL
40 : eq(37, 30) : BOOL
41 : ite(40, 32, 33) : BV:8
42 : ite(39, 29, 41) : BV:8
43 : ite(38, 26, 42) : BV:8
44 : bvadd(4, 21, 22) : BV:32
45 : eq(44, 24) : BOOL
46 : eq(44, 27) : BOOL
47 : eq(44, 30) : BOOL
48 : ite(47, 32, 33) : BV:8
49 : ite(46, 29, 48) : BV:8
50 : ite(45, 26, 49) : BV:8
51 : bvadd(21, 22) : BV:32
52 : eq(51, 24) : BOOL
53 : eq(51, 27) : BOOL
54 : eq(51, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 26, 56) : BV:8
58 : bvconcat(36, 43, 50, 57) : BV:32
59 : ite(18, 2, 58) : BV:32
60 : lambda(17, 59) : FUNCTION[BV:32 -> BV:32]
61 : map(16, 60) : MAP[BV:32 -> BV:32]
62 : sym_const(61) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1117257727 { 0x4297ffff +1.18749988e6 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 540409860 { 0x20360004 +1.42187547e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 540409863 { 0x20360007 +1.42187583e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 339083264 { 0x14360000 +1.42187500e169 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 339083267 { 0x14360003 +1.42187535e169 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2091909376 { 0x7cb00100 +1.37503051e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2091909379 { 0x7cb00103 +1.37503087e122 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda43613Var : BV:32
2 : Lambda43614Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2151153667 { 0x80380003 -2143813629 -1.43750035e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2325217276 { 0x8a97fffc -1969750020 -1.18749952e150 } : BV:32
14 : eq(12, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 2325217277 { 0x8a97fffd -1969750019 -1.18749964e150 } : BV:32
17 : eq(12, 16) : BOOL
18 : 152 { 0x98 -104 } : BV:8
19 : 2325217278 { 0x8a97fffe -1969750018 -1.18749976e150 } : BV:32
20 : eq(12, 19) : BOOL
21 : 33 { 0x21 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : 2151153666 { 0x80380002 -2143813630 -1.43750023e129 } : BV:32
27 : bvadd(26, 11) : BV:32
28 : eq(27, 13) : BOOL
29 : eq(27, 16) : BOOL
30 : eq(27, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : ite(29, 18, 31) : BV:8
33 : ite(28, 15, 32) : BV:8
34 : 2151153665 { 0x80380001 -2143813631 -1.43750011e129 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : ite(38, 21, 22) : BV:8
40 : ite(37, 18, 39) : BV:8
41 : ite(36, 15, 40) : BV:8
42 : 2151153664 { 0x80380000 -2143813632 -1.43750000e129 } : BV:32
43 : bvadd(42, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : ite(45, 18, 47) : BV:8
49 : ite(44, 15, 48) : BV:8
50 : bvconcat(25, 33, 41, 49) : BV:32
51 : bvadd(7, 9, 50) : BV:32
52 : eq(51, 13) : BOOL
53 : eq(51, 16) : BOOL
54 : eq(51, 19) : BOOL
55 : ite(54, 21, 22) : BV:8
56 : ite(53, 18, 55) : BV:8
57 : ite(52, 15, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 9, 50) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : ite(62, 21, 22) : BV:8
64 : ite(61, 18, 63) : BV:8
65 : ite(60, 15, 64) : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : bvadd(66, 9, 50) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 16) : BOOL
70 : eq(67, 19) : BOOL
71 : ite(70, 21, 22) : BV:8
72 : ite(69, 18, 71) : BV:8
73 : ite(68, 15, 72) : BV:8
74 : bvadd(9, 50) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : ite(77, 21, 22) : BV:8
79 : ite(76, 18, 78) : BV:8
80 : ite(75, 15, 79) : BV:8
81 : bvconcat(57, 65, 73, 80) : BV:32
82 : ite(6, 3, 81) : BV:32
83 : lambda(1, 2, 82) : FUNCTION[BV:32,BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda43615Var : BV:32
2 : Lambda43616Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1129611263 { 0x43547fff +1.66015613e7 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1129611264 { 0x43548000 +1.66015625e7 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1129611265 { 0x43548001 +1.66015636e7 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1129611263 ] -> true, [ 1129611264; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1129611263 ] -> true, [ 1129611264; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda43625Var : BV:32
2 : Lambda43626Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1129611263 { 0x43547fff +1.66015613e7 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1129611264 { 0x43548000 +1.66015625e7 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1129611265 { 0x43548001 +1.66015636e7 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda43629Var : BV:32
2 : Lambda43630Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1129611263 { 0x43547fff +1.66015613e7 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1129611264 { 0x43548000 +1.66015625e7 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1129611265 { 0x43548001 +1.66015636e7 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 2151153667 { 0x80380003 -2143813629 -1.43750035e129 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2325217276 { 0x8a97fffc -1969750020 -1.18749952e150 } : BV:32
54 : eq(52, 53) : BOOL
55 : 16 { 0x10 } : BV:8
56 : 2325217277 { 0x8a97fffd -1969750019 -1.18749964e150 } : BV:32
57 : eq(52, 56) : BOOL
58 : 152 { 0x98 -104 } : BV:8
59 : 2325217278 { 0x8a97fffe -1969750018 -1.18749976e150 } : BV:32
60 : eq(52, 59) : BOOL
61 : 33 { 0x21 } : BV:8
62 : 0 { 0x0 } : BV:8
63 : ite(60, 61, 62) : BV:8
64 : ite(57, 58, 63) : BV:8
65 : ite(54, 55, 64) : BV:8
66 : 2151153666 { 0x80380002 -2143813630 -1.43750023e129 } : BV:32
67 : bvadd(66, 51) : BV:32
68 : eq(67, 53) : BOOL
69 : eq(67, 56) : BOOL
70 : eq(67, 59) : BOOL
71 : ite(70, 61, 62) : BV:8
72 : ite(69, 58, 71) : BV:8
73 : ite(68, 55, 72) : BV:8
74 : 2151153665 { 0x80380001 -2143813631 -1.43750011e129 } : BV:32
75 : bvadd(74, 51) : BV:32
76 : eq(75, 53) : BOOL
77 : eq(75, 56) : BOOL
78 : eq(75, 59) : BOOL
79 : ite(78, 61, 62) : BV:8
80 : ite(77, 58, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : 2151153664 { 0x80380000 -2143813632 -1.43750000e129 } : BV:32
83 : bvadd(82, 51) : BV:32
84 : eq(83, 53) : BOOL
85 : eq(83, 56) : BOOL
86 : eq(83, 59) : BOOL
87 : ite(86, 61, 62) : BV:8
88 : ite(85, 58, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : bvconcat(65, 73, 81, 89) : BV:32
91 : bvadd(33, 49, 90) : BV:32
92 : eq(91, 53) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 59) : BOOL
95 : ite(94, 61, 62) : BV:8
96 : ite(93, 58, 95) : BV:8
97 : ite(92, 55, 96) : BV:8
98 : bvadd(37, 49, 90) : BV:32
99 : eq(98, 53) : BOOL
100 : eq(98, 56) : BOOL
101 : eq(98, 59) : BOOL
102 : ite(101, 61, 62) : BV:8
103 : ite(100, 58, 102) : BV:8
104 : ite(99, 55, 103) : BV:8
105 : bvadd(30, 49, 90) : BV:32
106 : eq(105, 53) : BOOL
107 : eq(105, 56) : BOOL
108 : eq(105, 59) : BOOL
109 : ite(108, 61, 62) : BV:8
110 : ite(107, 58, 109) : BV:8
111 : ite(106, 55, 110) : BV:8
112 : bvadd(49, 90) : BV:32
113 : eq(112, 53) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 59) : BOOL
116 : ite(115, 61, 62) : BV:8
117 : ite(114, 58, 116) : BV:8
118 : ite(113, 55, 117) : BV:8
119 : bvconcat(97, 104, 111, 118) : BV:32
120 : ite(6, 3, 119) : BV:32
121 : ite(47, 119, 120) : BV:32
122 : ite(6, 3, 121) : BV:32
123 : lambda(1, 2, 122) : FUNCTION[BV:32,BV:32 -> BV:32]
124 : sym_const(123) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43634Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2201616 { 0x219810 +1.26245307e129 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2325217276 { 0x8a97fffc -1969750020 -1.18749952e150 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 2325217277 { 0x8a97fffd -1969750019 -1.18749964e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 152 { 0x98 -104 } : BV:8
15 : 2325217278 { 0x8a97fffe -1969750018 -1.18749976e150 } : BV:32
16 : eq(8, 15) : BOOL
17 : 33 { 0x21 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 11, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : ite(32, 11, 36) : BV:8
38 : bvadd(6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : ite(39, 11, 43) : BV:8
45 : bvconcat(21, 29, 37, 44) : BV:32
46 : ite(3, 2, 45) : BV:32
47 : lambda(1, 46) : FUNCTION[BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda43635Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2201616 { 0x219810 +1.26245307e129 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2325217276 { 0x8a97fffc -1969750020 -1.18749952e150 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 2325217277 { 0x8a97fffd -1969750019 -1.18749964e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 152 { 0x98 -104 } : BV:8
15 : 2325217278 { 0x8a97fffe -1969750018 -1.18749976e150 } : BV:32
16 : eq(8, 15) : BOOL
17 : 33 { 0x21 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 11, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : ite(32, 11, 36) : BV:8
38 : bvadd(6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : ite(39, 11, 43) : BV:8
45 : bvconcat(21, 29, 37, 44) : BV:32
46 : ite(3, 2, 45) : BV:32
47 : lambda(1, 46) : FUNCTION[BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43642Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2201616 { 0x219810 +1.26245307e129 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2325217276 { 0x8a97fffc -1969750020 -1.18749952e150 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 2325217277 { 0x8a97fffd -1969750019 -1.18749964e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 152 { 0x98 -104 } : BV:8
15 : 2325217278 { 0x8a97fffe -1969750018 -1.18749976e150 } : BV:32
16 : eq(8, 15) : BOOL
17 : 33 { 0x21 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 11, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : ite(32, 11, 36) : BV:8
38 : bvadd(6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : ite(39, 11, 43) : BV:8
45 : bvconcat(21, 29, 37, 44) : BV:32
46 : ite(3, 2, 45) : BV:32
47 : lambda(1, 46) : FUNCTION[BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3489953614
=counter_example_end
=global nodece 40 num_edges_traversed 0
=global nodece 40 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 41
=global nodece 41 nodece z3v487.ce3888.num_edges_traversed3
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(epsilon)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3v487.ce3888 e20765e381e7253e739082614fa73d
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 41 num_edges_traversed 3
=global nodece 41 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 42
=global nodece 42 nodece z3v487.ce3924.num_edges_traversed4
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3v487.ce3924 168236f1282ba9e87fb28d374756cc6
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 42 num_edges_traversed 4
=global nodece 42 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 43
=global nodece 43 nodece z3v487.ce3954.num_edges_traversed5
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(epsilon)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3v487.ce3954 e418c2f45ac4fd53dd113e8ac3476a39
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 16843008 { 0x1010100 +1.784301e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 16843008 { 0x1010100 +1.784301e131 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 43 num_edges_traversed 5
=global nodece 43 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 44
=global nodece 44 nodece z3v487.ce3873.num_edges_traversed2
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(epsilon)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3v487.ce3873 698653c7de94f0a6f917389582ac5d82
=input.spec-%var-x-1
1 : Lambda11574Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11575Var : BV:32
18 : Lambda11576Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11577Var : BV:32
52 : lambda(51, 2) : FUNCTION[BV:32 -> BV:32]
53 : map(50, 52) : MAP[BV:32 -> BV:32]
54 : lambda(17, 53) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
55 : map(16, 54) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
56 : sym_const(55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11587Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11588Var : BV:32
18 : Lambda11589Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11590Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : ite(54, 2, 2) : BV:32
75 : ite(73, 2, 74) : BV:32
76 : ite(54, 2, 75) : BV:32
77 : lambda(51, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(50, 77) : MAP[BV:32 -> BV:32]
79 : lambda(17, 78) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
80 : map(16, 79) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
81 : sym_const(80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 494115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 494116; 494119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 494120; 155483431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 155483432; 155483435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 155483436; 3645973127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3645973128; 3645973131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3645973132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.llvm-%n
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16089Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 129 { 0x81 +1.1537e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16090Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : and(8, 14) : BOOL
45 : ite(44, 37, 37) : BOOL
46 : ite(6, 36, 45) : BOOL
47 : bvule(2, 40) : BOOL
48 : bvule(40, 2) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(23, 40) : BOOL
51 : bvule(40, 23) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(27, 40) : BOOL
54 : bvule(40, 13) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 27, 27) : BV:32
57 : ite(52, 23, 56) : BV:32
58 : ite(49, 2, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : and(19, 59) : BOOL
61 : ite(60, 36, 37) : BOOL
62 : and(46, 61) : BOOL
63 : ite(43, 2, 2) : BV:32
64 : ite(62, 2, 63) : BV:32
65 : ite(43, 2, 64) : BV:32
66 : lambda(40, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(39, 66) : MAP[BV:32 -> BV:32]
68 : sym_const(67) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 127 { 0x7f +1.1513e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16079Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 129 { 0x81 +1.1537e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda16080Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(1, 45) : BOOL
50 : bvule(45, 1) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(15, 45) : BOOL
53 : bvule(45, 15) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(34, 45) : BOOL
56 : bvule(45, 9) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 34, 34) : BV:32
59 : ite(54, 15, 58) : BV:32
60 : ite(51, 1, 59) : BV:32
61 : eq(60, 1) : BOOL
62 : and(27, 61) : BOOL
63 : ite(62, 6, 12) : BOOL
64 : and(14, 63) : BOOL
65 : ite(48, 1, 1) : BV:32
66 : ite(64, 1, 65) : BV:32
67 : ite(48, 1, 66) : BV:32
68 : lambda(45, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(44, 68) : MAP[BV:32 -> BV:32]
70 : sum(16, 17, 69) : SUM[UNIT,MAP[BV:32 -> BV:32]]
71 : sym_const(70) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16095Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 129 { 0x81 +1.1537e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16096Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : and(8, 14) : BOOL
45 : ite(44, 37, 37) : BOOL
46 : ite(6, 36, 45) : BOOL
47 : bvule(2, 40) : BOOL
48 : bvule(40, 2) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(23, 40) : BOOL
51 : bvule(40, 23) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(27, 40) : BOOL
54 : bvule(40, 13) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 27, 27) : BV:32
57 : ite(52, 23, 56) : BV:32
58 : ite(49, 2, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : and(19, 59) : BOOL
61 : ite(60, 36, 37) : BOOL
62 : and(46, 61) : BOOL
63 : ite(43, 2, 2) : BV:32
64 : ite(62, 2, 63) : BV:32
65 : ite(43, 2, 64) : BV:32
66 : lambda(40, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(39, 66) : MAP[BV:32 -> BV:32]
68 : sym_const(67) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 494119 { 0x78a27 +1.5890357e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3645973131 { 0xd951228b -648994165 -1.63386666e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 155483435 { 0x9447d2b +1.53506982e147 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11509Var : BV:32
2 : Lambda11510Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11519Var : BV:32
2 : Lambda11520Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11523Var : BV:32
2 : Lambda11524Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 127 { 0x7f +1.1513e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 128 { 0x80 +1.1525e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 129 { 0x81 +1.1537e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : ite(6, 3, 3) : BV:32
48 : ite(46, 3, 47) : BV:32
49 : ite(6, 3, 48) : BV:32
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3997393353
=counter_example_end
=global nodece 44 num_edges_traversed 2
=global nodece 44 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 45
=global nodece 45 nodece z3.ce3859.num_edges_traversed2
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(epsilon)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3.ce3859 1cba735f8165f4654589817a22122d2
=input.spec-%var-x-1
1 : Lambda11996Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11997Var : BV:32
18 : Lambda11998Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda11999Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12009Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12010Var : BV:32
18 : Lambda12011Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12012Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16613Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16614Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16603Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16604Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16619Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16620Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11926Var : BV:32
2 : Lambda11927Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11931Var : BV:32
2 : Lambda11932Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11940Var : BV:32
2 : Lambda11941Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11936Var : BV:32
2 : Lambda11937Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2944669951
=counter_example_end
=global nodece 45 num_edges_traversed 2
=global nodece 45 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 46
=global nodece 46 nodece z3.ce4011.num_edges_traversed3
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3.ce4011 142dd1a2479051c925bd3425b9d81aa6
=input.spec-%var-x-1
1 : Lambda11996Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11997Var : BV:32
18 : Lambda11998Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda11999Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12009Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12010Var : BV:32
18 : Lambda12011Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12012Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16613Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16614Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16603Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16604Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16619Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16620Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11926Var : BV:32
2 : Lambda11927Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11931Var : BV:32
2 : Lambda11932Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11940Var : BV:32
2 : Lambda11941Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11936Var : BV:32
2 : Lambda11937Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2944669951
=counter_example_end
=global nodece 46 num_edges_traversed 3
=global nodece 46 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 47
=global nodece 47 nodece z3.ce4041.num_edges_traversed4
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(epsilon)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3.ce4041 738a5b4f453739de476dd1464b091
=input.spec-%var-x-1
1 : Lambda11996Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11997Var : BV:32
18 : Lambda11998Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda11999Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12009Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12010Var : BV:32
18 : Lambda12011Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12012Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16613Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16614Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16603Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16604Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16619Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16620Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11926Var : BV:32
2 : Lambda11927Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11931Var : BV:32
2 : Lambda11932Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11940Var : BV:32
2 : Lambda11941Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11936Var : BV:32
2 : Lambda11937Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2944669951
=counter_example_end
=global nodece 47 num_edges_traversed 4
=global nodece 47 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 48
=global nodece 48 nodece z3v487.ce3833.num_edges_traversed2
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(epsilon)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3v487.ce3833 36b15098daded6891160ce2f46c6380
=input.spec-%var-x-1
1 : Lambda30240Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda30241Var : BV:32
18 : Lambda30242Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 7 { 0x7 +1.83e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 8 { 0x8 +1.95e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 9 { 0x9 +1.107e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda30243Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : 4 { 0x4 +1.47e129 } : BV:32
68 : bvmul(67, 61) : BV:32
69 : bvmul(67, 17) : BV:32
70 : bvadd(23, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : 1 { 0x1 } : BV:8
73 : 14 { 0xe +1.166e129 } : BV:32
74 : eq(70, 73) : BOOL
75 : 0 { 0x0 } : BV:8
76 : ite(74, 72, 75) : BV:8
77 : ite(71, 72, 76) : BV:8
78 : bvadd(20, 69) : BV:32
79 : eq(78, 2) : BOOL
80 : eq(78, 73) : BOOL
81 : ite(80, 72, 75) : BV:8
82 : ite(79, 72, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 69) : BV:32
85 : eq(84, 2) : BOOL
86 : eq(84, 73) : BOOL
87 : ite(86, 72, 75) : BV:8
88 : ite(85, 72, 87) : BV:8
89 : eq(69, 2) : BOOL
90 : eq(69, 73) : BOOL
91 : ite(90, 72, 75) : BV:8
92 : ite(89, 72, 91) : BV:8
93 : bvconcat(77, 82, 88, 92) : BV:32
94 : bvadd(23, 68, 93) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 73) : BOOL
97 : ite(96, 72, 75) : BV:8
98 : ite(95, 72, 97) : BV:8
99 : bvadd(20, 68, 93) : BV:32
100 : eq(99, 2) : BOOL
101 : eq(99, 73) : BOOL
102 : ite(101, 72, 75) : BV:8
103 : ite(100, 72, 102) : BV:8
104 : bvadd(83, 68, 93) : BV:32
105 : eq(104, 2) : BOOL
106 : eq(104, 73) : BOOL
107 : ite(106, 72, 75) : BV:8
108 : ite(105, 72, 107) : BV:8
109 : bvadd(68, 93) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 73) : BOOL
112 : ite(111, 72, 75) : BV:8
113 : ite(110, 72, 112) : BV:8
114 : bvconcat(98, 103, 108, 113) : BV:32
115 : ite(66, 2, 114) : BV:32
116 : ite(64, 2, 115) : BV:32
117 : lambda(61, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(60, 117) : MAP[BV:32 -> BV:32]
119 : lambda(17, 118) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
120 : map(16, 119) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
121 : sym_const(120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda30253Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda30254Var : BV:32
18 : Lambda30255Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 7 { 0x7 +1.83e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 8 { 0x8 +1.95e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 9 { 0x9 +1.107e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda30256Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : or(84, 85) : BOOL
87 : ite(86, 7, 13) : BOOL
88 : and(70, 87) : BOOL
89 : 4 { 0x4 +1.47e129 } : BV:32
90 : bvmul(89, 61) : BV:32
91 : bvmul(89, 17) : BV:32
92 : bvadd(23, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : 1 { 0x1 } : BV:8
95 : 14 { 0xe +1.166e129 } : BV:32
96 : eq(92, 95) : BOOL
97 : 0 { 0x0 } : BV:8
98 : ite(96, 94, 97) : BV:8
99 : ite(93, 94, 98) : BV:8
100 : bvadd(20, 91) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 95) : BOOL
103 : ite(102, 94, 97) : BV:8
104 : ite(101, 94, 103) : BV:8
105 : 1 { 0x1 +1.11e129 } : BV:32
106 : bvadd(105, 91) : BV:32
107 : eq(106, 2) : BOOL
108 : eq(106, 95) : BOOL
109 : ite(108, 94, 97) : BV:8
110 : ite(107, 94, 109) : BV:8
111 : eq(91, 2) : BOOL
112 : eq(91, 95) : BOOL
113 : ite(112, 94, 97) : BV:8
114 : ite(111, 94, 113) : BV:8
115 : bvconcat(99, 104, 110, 114) : BV:32
116 : bvadd(23, 90, 115) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 95) : BOOL
119 : ite(118, 94, 97) : BV:8
120 : ite(117, 94, 119) : BV:8
121 : bvadd(20, 90, 115) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 95) : BOOL
124 : ite(123, 94, 97) : BV:8
125 : ite(122, 94, 124) : BV:8
126 : bvadd(105, 90, 115) : BV:32
127 : eq(126, 2) : BOOL
128 : eq(126, 95) : BOOL
129 : ite(128, 94, 97) : BV:8
130 : ite(127, 94, 129) : BV:8
131 : bvadd(90, 115) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 95) : BOOL
134 : ite(133, 94, 97) : BV:8
135 : ite(132, 94, 134) : BV:8
136 : bvconcat(120, 125, 130, 135) : BV:32
137 : ite(66, 2, 136) : BV:32
138 : ite(64, 2, 137) : BV:32
139 : ite(88, 136, 138) : BV:32
140 : ite(66, 2, 139) : BV:32
141 : ite(64, 2, 140) : BV:32
142 : lambda(61, 141) : FUNCTION[BV:32 -> BV:32]
143 : map(60, 142) : MAP[BV:32 -> BV:32]
144 : lambda(17, 143) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
145 : map(16, 144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
146 : sym_const(145) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 1, [ 1; 13 ] -> 0, [ 14; 14 ] -> 1, [ 15; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 2957049919 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2957049920; 2957049923 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2957049924; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2957049920 { 0xb0410040 -1337917376 -1.50782012e225 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda30351Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 33554432 { 0x2000000 +1.0e133 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 33554433 { 0x2000001 +1.11e133 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 9 { 0x9 +1.107e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda30352Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : 4 { 0x4 +1.47e129 } : BV:32
79 : bvmul(78, 50) : BV:32
80 : bvmul(78, 3) : BV:32
81 : bvadd(3, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : 1 { 0x1 } : BV:8
84 : 14 { 0xe +1.166e129 } : BV:32
85 : eq(81, 84) : BOOL
86 : 0 { 0x0 } : BV:8
87 : ite(85, 83, 86) : BV:8
88 : ite(82, 83, 87) : BV:8
89 : bvadd(5, 80) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 84) : BOOL
92 : ite(91, 83, 86) : BV:8
93 : ite(90, 83, 92) : BV:8
94 : 1 { 0x1 +1.11e129 } : BV:32
95 : bvadd(94, 80) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 84) : BOOL
98 : ite(97, 83, 86) : BV:8
99 : ite(96, 83, 98) : BV:8
100 : eq(80, 2) : BOOL
101 : eq(80, 84) : BOOL
102 : ite(101, 83, 86) : BV:8
103 : ite(100, 83, 102) : BV:8
104 : bvconcat(88, 93, 99, 103) : BV:32
105 : bvadd(3, 79, 104) : BV:32
106 : eq(105, 2) : BOOL
107 : eq(105, 84) : BOOL
108 : ite(107, 83, 86) : BV:8
109 : ite(106, 83, 108) : BV:8
110 : bvadd(5, 79, 104) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 84) : BOOL
113 : ite(112, 83, 86) : BV:8
114 : ite(111, 83, 113) : BV:8
115 : bvadd(94, 79, 104) : BV:32
116 : eq(115, 2) : BOOL
117 : eq(115, 84) : BOOL
118 : ite(117, 83, 86) : BV:8
119 : ite(116, 83, 118) : BV:8
120 : bvadd(79, 104) : BV:32
121 : eq(120, 2) : BOOL
122 : eq(120, 84) : BOOL
123 : ite(122, 83, 86) : BV:8
124 : ite(121, 83, 123) : BV:8
125 : bvconcat(109, 114, 119, 124) : BV:32
126 : ite(55, 2, 125) : BV:32
127 : ite(53, 2, 126) : BV:32
128 : ite(77, 125, 127) : BV:32
129 : ite(55, 2, 128) : BV:32
130 : ite(53, 2, 129) : BV:32
131 : lambda(50, 130) : FUNCTION[BV:32 -> BV:32]
132 : map(49, 131) : MAP[BV:32 -> BV:32]
133 : sym_const(132) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda30341Var : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 33554433 { 0x2000001 +1.11e133 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : bvule(1, 19) : BOOL
36 : 7 { 0x7 +1.83e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 8 { 0x8 +1.95e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 9 { 0x9 +1.107e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 1) : BOOL
53 : and(52, 50) : BOOL
54 : or(51, 53) : BOOL
55 : ite(54, 7, 13) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda30342Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : bvule(1, 57) : BOOL
64 : bvule(57, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(39, 57) : BOOL
67 : bvule(57, 39) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(43, 57) : BOOL
70 : bvule(57, 10) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 43, 43) : BV:32
73 : ite(68, 39, 72) : BV:32
74 : ite(65, 1, 73) : BV:32
75 : eq(74, 1) : BOOL
76 : and(34, 75) : BOOL
77 : and(52, 75) : BOOL
78 : or(76, 77) : BOOL
79 : ite(78, 7, 13) : BOOL
80 : and(15, 79) : BOOL
81 : 4 { 0x4 +1.47e129 } : BV:32
82 : bvmul(81, 57) : BV:32
83 : bvmul(81, 2) : BV:32
84 : bvadd(2, 83) : BV:32
85 : eq(84, 1) : BOOL
86 : 1 { 0x1 } : BV:8
87 : 14 { 0xe +1.166e129 } : BV:32
88 : eq(84, 87) : BOOL
89 : 0 { 0x0 } : BV:8
90 : ite(88, 86, 89) : BV:8
91 : ite(85, 86, 90) : BV:8
92 : bvadd(20, 83) : BV:32
93 : eq(92, 1) : BOOL
94 : eq(92, 87) : BOOL
95 : ite(94, 86, 89) : BV:8
96 : ite(93, 86, 95) : BV:8
97 : bvadd(16, 83) : BV:32
98 : eq(97, 1) : BOOL
99 : eq(97, 87) : BOOL
100 : ite(99, 86, 89) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : eq(83, 1) : BOOL
103 : eq(83, 87) : BOOL
104 : ite(103, 86, 89) : BV:8
105 : ite(102, 86, 104) : BV:8
106 : bvconcat(91, 96, 101, 105) : BV:32
107 : bvadd(2, 82, 106) : BV:32
108 : eq(107, 1) : BOOL
109 : eq(107, 87) : BOOL
110 : ite(109, 86, 89) : BV:8
111 : ite(108, 86, 110) : BV:8
112 : bvadd(20, 82, 106) : BV:32
113 : eq(112, 1) : BOOL
114 : eq(112, 87) : BOOL
115 : ite(114, 86, 89) : BV:8
116 : ite(113, 86, 115) : BV:8
117 : bvadd(16, 82, 106) : BV:32
118 : eq(117, 1) : BOOL
119 : eq(117, 87) : BOOL
120 : ite(119, 86, 89) : BV:8
121 : ite(118, 86, 120) : BV:8
122 : bvadd(82, 106) : BV:32
123 : eq(122, 1) : BOOL
124 : eq(122, 87) : BOOL
125 : ite(124, 86, 89) : BV:8
126 : ite(123, 86, 125) : BV:8
127 : bvconcat(111, 116, 121, 126) : BV:32
128 : ite(62, 1, 127) : BV:32
129 : ite(60, 1, 128) : BV:32
130 : ite(80, 127, 129) : BV:32
131 : ite(62, 1, 130) : BV:32
132 : ite(60, 1, 131) : BV:32
133 : lambda(57, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(56, 133) : MAP[BV:32 -> BV:32]
135 : sum(17, 18, 134) : SUM[UNIT,MAP[BV:32 -> BV:32]]
136 : sym_const(135) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda30357Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 33554432 { 0x2000000 +1.0e133 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 33554433 { 0x2000001 +1.11e133 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 9 { 0x9 +1.107e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda30358Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : 4 { 0x4 +1.47e129 } : BV:32
79 : bvmul(78, 50) : BV:32
80 : bvmul(78, 3) : BV:32
81 : bvadd(3, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : 1 { 0x1 } : BV:8
84 : 14 { 0xe +1.166e129 } : BV:32
85 : eq(81, 84) : BOOL
86 : 0 { 0x0 } : BV:8
87 : ite(85, 83, 86) : BV:8
88 : ite(82, 83, 87) : BV:8
89 : bvadd(5, 80) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 84) : BOOL
92 : ite(91, 83, 86) : BV:8
93 : ite(90, 83, 92) : BV:8
94 : 1 { 0x1 +1.11e129 } : BV:32
95 : bvadd(94, 80) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 84) : BOOL
98 : ite(97, 83, 86) : BV:8
99 : ite(96, 83, 98) : BV:8
100 : eq(80, 2) : BOOL
101 : eq(80, 84) : BOOL
102 : ite(101, 83, 86) : BV:8
103 : ite(100, 83, 102) : BV:8
104 : bvconcat(88, 93, 99, 103) : BV:32
105 : bvadd(3, 79, 104) : BV:32
106 : eq(105, 2) : BOOL
107 : eq(105, 84) : BOOL
108 : ite(107, 83, 86) : BV:8
109 : ite(106, 83, 108) : BV:8
110 : bvadd(5, 79, 104) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 84) : BOOL
113 : ite(112, 83, 86) : BV:8
114 : ite(111, 83, 113) : BV:8
115 : bvadd(94, 79, 104) : BV:32
116 : eq(115, 2) : BOOL
117 : eq(115, 84) : BOOL
118 : ite(117, 83, 86) : BV:8
119 : ite(116, 83, 118) : BV:8
120 : bvadd(79, 104) : BV:32
121 : eq(120, 2) : BOOL
122 : eq(120, 84) : BOOL
123 : ite(122, 83, 86) : BV:8
124 : ite(121, 83, 123) : BV:8
125 : bvconcat(109, 114, 119, 124) : BV:32
126 : ite(55, 2, 125) : BV:32
127 : ite(53, 2, 126) : BV:32
128 : ite(77, 125, 127) : BV:32
129 : ite(55, 2, 128) : BV:32
130 : ite(53, 2, 129) : BV:32
131 : lambda(50, 130) : FUNCTION[BV:32 -> BV:32]
132 : map(49, 131) : MAP[BV:32 -> BV:32]
133 : sym_const(132) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2957049920 { 0xb0410040 -1337917376 -1.50782012e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2957049923 { 0xb0410043 -1337917373 -1.50782048e225 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda30175Var : BV:32
2 : Lambda30176Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 2) : BV:32
12 : bvmul(10, 1) : BV:32
13 : bvadd(3, 12) : BV:32
14 : eq(13, 5) : BOOL
15 : 1 { 0x1 } : BV:8
16 : 14 { 0xe +1.166e129 } : BV:32
17 : eq(13, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 15, 18) : BV:8
20 : ite(14, 15, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 12) : BV:32
23 : eq(22, 5) : BOOL
24 : eq(22, 16) : BOOL
25 : ite(24, 15, 18) : BV:8
26 : ite(23, 15, 25) : BV:8
27 : 1 { 0x1 +1.11e129 } : BV:32
28 : bvadd(27, 12) : BV:32
29 : eq(28, 5) : BOOL
30 : eq(28, 16) : BOOL
31 : ite(30, 15, 18) : BV:8
32 : ite(29, 15, 31) : BV:8
33 : eq(12, 5) : BOOL
34 : eq(12, 16) : BOOL
35 : ite(34, 15, 18) : BV:8
36 : ite(33, 15, 35) : BV:8
37 : bvconcat(20, 26, 32, 36) : BV:32
38 : bvadd(3, 11, 37) : BV:32
39 : eq(38, 5) : BOOL
40 : eq(38, 16) : BOOL
41 : ite(40, 15, 18) : BV:8
42 : ite(39, 15, 41) : BV:8
43 : bvadd(21, 11, 37) : BV:32
44 : eq(43, 5) : BOOL
45 : eq(43, 16) : BOOL
46 : ite(45, 15, 18) : BV:8
47 : ite(44, 15, 46) : BV:8
48 : bvadd(27, 11, 37) : BV:32
49 : eq(48, 5) : BOOL
50 : eq(48, 16) : BOOL
51 : ite(50, 15, 18) : BV:8
52 : ite(49, 15, 51) : BV:8
53 : bvadd(11, 37) : BV:32
54 : eq(53, 5) : BOOL
55 : eq(53, 16) : BOOL
56 : ite(55, 15, 18) : BV:8
57 : ite(54, 15, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : ite(9, 5, 58) : BV:32
60 : ite(7, 5, 59) : BV:32
61 : lambda(1, 2, 60) : FUNCTION[BV:32,BV:32 -> BV:32]
62 : sym_const(61) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda30177Var : BV:32
2 : Lambda30178Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33554432 { 0x2000000 +1.0e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 33554433 { 0x2000001 +1.11e133 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 7 { 0x7 +1.83e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 8 { 0x8 +1.95e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 9 { 0x9 +1.107e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda30187Var : BV:32
2 : Lambda30188Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33554432 { 0x2000000 +1.0e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 33554433 { 0x2000001 +1.11e133 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 7 { 0x7 +1.83e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 8 { 0x8 +1.95e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 9 { 0x9 +1.107e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda30191Var : BV:32
2 : Lambda30192Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 33554432 { 0x2000000 +1.0e133 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : bvule(5, 2) : BOOL
39 : 7 { 0x7 +1.83e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 8 { 0x8 +1.95e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 9 { 0x9 +1.107e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 5) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 14, 20) : BOOL
59 : and(22, 58) : BOOL
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 2) : BV:32
62 : bvmul(60, 1) : BV:32
63 : bvadd(3, 62) : BV:32
64 : eq(63, 5) : BOOL
65 : 1 { 0x1 } : BV:8
66 : 14 { 0xe +1.166e129 } : BV:32
67 : eq(63, 66) : BOOL
68 : 0 { 0x0 } : BV:8
69 : ite(67, 65, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : bvadd(23, 62) : BV:32
72 : eq(71, 5) : BOOL
73 : eq(71, 66) : BOOL
74 : ite(73, 65, 68) : BV:8
75 : ite(72, 65, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 62) : BV:32
78 : eq(77, 5) : BOOL
79 : eq(77, 66) : BOOL
80 : ite(79, 65, 68) : BV:8
81 : ite(78, 65, 80) : BV:8
82 : eq(62, 5) : BOOL
83 : eq(62, 66) : BOOL
84 : ite(83, 65, 68) : BV:8
85 : ite(82, 65, 84) : BV:8
86 : bvconcat(70, 75, 81, 85) : BV:32
87 : bvadd(3, 61, 86) : BV:32
88 : eq(87, 5) : BOOL
89 : eq(87, 66) : BOOL
90 : ite(89, 65, 68) : BV:8
91 : ite(88, 65, 90) : BV:8
92 : bvadd(23, 61, 86) : BV:32
93 : eq(92, 5) : BOOL
94 : eq(92, 66) : BOOL
95 : ite(94, 65, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : bvadd(76, 61, 86) : BV:32
98 : eq(97, 5) : BOOL
99 : eq(97, 66) : BOOL
100 : ite(99, 65, 68) : BV:8
101 : ite(98, 65, 100) : BV:8
102 : bvadd(61, 86) : BV:32
103 : eq(102, 5) : BOOL
104 : eq(102, 66) : BOOL
105 : ite(104, 65, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : bvconcat(91, 96, 101, 106) : BV:32
108 : ite(9, 5, 107) : BV:32
109 : ite(7, 5, 108) : BV:32
110 : ite(59, 107, 109) : BV:32
111 : ite(9, 5, 110) : BV:32
112 : ite(7, 5, 111) : BV:32
113 : lambda(1, 2, 112) : FUNCTION[BV:32,BV:32 -> BV:32]
114 : sym_const(113) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3272985466
=counter_example_end
=global nodece 48 num_edges_traversed 2
=global nodece 48 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 49
=global nodece 49 nodece z3.ce3800.num_edges_traversed1
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3.ce3800 4b8d3ce62881c1944fbb62e162a31d4e
=input.spec-%var-x-1
1 : Lambda43690Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43691Var : BV:32
18 : Lambda43692Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43693Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 157 { 0x9d -99 } : BV:8
83 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
84 : eq(80, 83) : BOOL
85 : 64 { 0x40 } : BV:8
86 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
87 : eq(80, 86) : BOOL
88 : 90 { 0x5a } : BV:8
89 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
90 : eq(80, 89) : BOOL
91 : 224 { 0xe0 -32 } : BV:8
92 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
93 : eq(80, 92) : BOOL
94 : 247 { 0xf7 -9 } : BV:8
95 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
96 : eq(80, 95) : BOOL
97 : 85 { 0x55 } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(93, 94, 99) : BV:8
101 : ite(90, 91, 100) : BV:8
102 : ite(87, 88, 101) : BV:8
103 : ite(84, 85, 102) : BV:8
104 : ite(81, 82, 103) : BV:8
105 : bvadd(92, 79) : BV:32
106 : eq(105, 78) : BOOL
107 : eq(105, 83) : BOOL
108 : eq(105, 86) : BOOL
109 : eq(105, 89) : BOOL
110 : eq(105, 92) : BOOL
111 : eq(105, 95) : BOOL
112 : ite(111, 97, 98) : BV:8
113 : ite(110, 94, 112) : BV:8
114 : ite(109, 91, 113) : BV:8
115 : ite(108, 88, 114) : BV:8
116 : ite(107, 85, 115) : BV:8
117 : ite(106, 82, 116) : BV:8
118 : bvadd(95, 79) : BV:32
119 : eq(118, 78) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 89) : BOOL
123 : eq(118, 92) : BOOL
124 : eq(118, 95) : BOOL
125 : ite(124, 97, 98) : BV:8
126 : ite(123, 94, 125) : BV:8
127 : ite(122, 91, 126) : BV:8
128 : ite(121, 88, 127) : BV:8
129 : ite(120, 85, 128) : BV:8
130 : ite(119, 82, 129) : BV:8
131 : bvadd(86, 79) : BV:32
132 : eq(131, 78) : BOOL
133 : eq(131, 83) : BOOL
134 : eq(131, 86) : BOOL
135 : eq(131, 89) : BOOL
136 : eq(131, 92) : BOOL
137 : eq(131, 95) : BOOL
138 : ite(137, 97, 98) : BV:8
139 : ite(136, 94, 138) : BV:8
140 : ite(135, 91, 139) : BV:8
141 : ite(134, 88, 140) : BV:8
142 : ite(133, 85, 141) : BV:8
143 : ite(132, 82, 142) : BV:8
144 : bvconcat(104, 117, 130, 143) : BV:32
145 : bvadd(75, 77, 144) : BV:32
146 : eq(145, 78) : BOOL
147 : eq(145, 83) : BOOL
148 : eq(145, 86) : BOOL
149 : eq(145, 89) : BOOL
150 : eq(145, 92) : BOOL
151 : eq(145, 95) : BOOL
152 : ite(151, 97, 98) : BV:8
153 : ite(150, 94, 152) : BV:8
154 : ite(149, 91, 153) : BV:8
155 : ite(148, 88, 154) : BV:8
156 : ite(147, 85, 155) : BV:8
157 : ite(146, 82, 156) : BV:8
158 : 2 { 0x2 +1.23e129 } : BV:32
159 : bvadd(158, 77, 144) : BV:32
160 : eq(159, 78) : BOOL
161 : eq(159, 83) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : eq(159, 95) : BOOL
166 : ite(165, 97, 98) : BV:8
167 : ite(164, 94, 166) : BV:8
168 : ite(163, 91, 167) : BV:8
169 : ite(162, 88, 168) : BV:8
170 : ite(161, 85, 169) : BV:8
171 : ite(160, 82, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 77, 144) : BV:32
174 : eq(173, 78) : BOOL
175 : eq(173, 83) : BOOL
176 : eq(173, 86) : BOOL
177 : eq(173, 89) : BOOL
178 : eq(173, 92) : BOOL
179 : eq(173, 95) : BOOL
180 : ite(179, 97, 98) : BV:8
181 : ite(178, 94, 180) : BV:8
182 : ite(177, 91, 181) : BV:8
183 : ite(176, 88, 182) : BV:8
184 : ite(175, 85, 183) : BV:8
185 : ite(174, 82, 184) : BV:8
186 : bvadd(77, 144) : BV:32
187 : eq(186, 78) : BOOL
188 : eq(186, 83) : BOOL
189 : eq(186, 86) : BOOL
190 : eq(186, 89) : BOOL
191 : eq(186, 92) : BOOL
192 : eq(186, 95) : BOOL
193 : ite(192, 97, 98) : BV:8
194 : ite(191, 94, 193) : BV:8
195 : ite(190, 91, 194) : BV:8
196 : ite(189, 88, 195) : BV:8
197 : ite(188, 85, 196) : BV:8
198 : ite(187, 82, 197) : BV:8
199 : bvconcat(157, 171, 185, 198) : BV:32
200 : ite(55, 2, 199) : BV:32
201 : ite(74, 199, 200) : BV:32
202 : ite(55, 2, 201) : BV:32
203 : lambda(52, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(51, 203) : MAP[BV:32 -> BV:32]
205 : lambda(17, 204) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
206 : map(16, 205) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
207 : sym_const(206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43710Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43711Var : BV:32
18 : Lambda43712Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43713Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 157 { 0x9d -99 } : BV:8
64 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
65 : eq(61, 64) : BOOL
66 : 64 { 0x40 } : BV:8
67 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
68 : eq(61, 67) : BOOL
69 : 90 { 0x5a } : BV:8
70 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
71 : eq(61, 70) : BOOL
72 : 224 { 0xe0 -32 } : BV:8
73 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
74 : eq(61, 73) : BOOL
75 : 247 { 0xf7 -9 } : BV:8
76 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
77 : eq(61, 76) : BOOL
78 : 85 { 0x55 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : bvadd(73, 60) : BV:32
87 : eq(86, 59) : BOOL
88 : eq(86, 64) : BOOL
89 : eq(86, 67) : BOOL
90 : eq(86, 70) : BOOL
91 : eq(86, 73) : BOOL
92 : eq(86, 76) : BOOL
93 : ite(92, 78, 79) : BV:8
94 : ite(91, 75, 93) : BV:8
95 : ite(90, 72, 94) : BV:8
96 : ite(89, 69, 95) : BV:8
97 : ite(88, 66, 96) : BV:8
98 : ite(87, 63, 97) : BV:8
99 : bvadd(76, 60) : BV:32
100 : eq(99, 59) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 67) : BOOL
103 : eq(99, 70) : BOOL
104 : eq(99, 73) : BOOL
105 : eq(99, 76) : BOOL
106 : ite(105, 78, 79) : BV:8
107 : ite(104, 75, 106) : BV:8
108 : ite(103, 72, 107) : BV:8
109 : ite(102, 69, 108) : BV:8
110 : ite(101, 66, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : bvadd(67, 60) : BV:32
113 : eq(112, 59) : BOOL
114 : eq(112, 64) : BOOL
115 : eq(112, 67) : BOOL
116 : eq(112, 70) : BOOL
117 : eq(112, 73) : BOOL
118 : eq(112, 76) : BOOL
119 : ite(118, 78, 79) : BV:8
120 : ite(117, 75, 119) : BV:8
121 : ite(116, 72, 120) : BV:8
122 : ite(115, 69, 121) : BV:8
123 : ite(114, 66, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : bvconcat(85, 98, 111, 124) : BV:32
126 : bvadd(56, 58, 125) : BV:32
127 : eq(126, 59) : BOOL
128 : eq(126, 64) : BOOL
129 : eq(126, 67) : BOOL
130 : eq(126, 70) : BOOL
131 : eq(126, 73) : BOOL
132 : eq(126, 76) : BOOL
133 : ite(132, 78, 79) : BV:8
134 : ite(131, 75, 133) : BV:8
135 : ite(130, 72, 134) : BV:8
136 : ite(129, 69, 135) : BV:8
137 : ite(128, 66, 136) : BV:8
138 : ite(127, 63, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 58, 125) : BV:32
141 : eq(140, 59) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : eq(140, 76) : BOOL
147 : ite(146, 78, 79) : BV:8
148 : ite(145, 75, 147) : BV:8
149 : ite(144, 72, 148) : BV:8
150 : ite(143, 69, 149) : BV:8
151 : ite(142, 66, 150) : BV:8
152 : ite(141, 63, 151) : BV:8
153 : 1 { 0x1 +1.11e129 } : BV:32
154 : bvadd(153, 58, 125) : BV:32
155 : eq(154, 59) : BOOL
156 : eq(154, 64) : BOOL
157 : eq(154, 67) : BOOL
158 : eq(154, 70) : BOOL
159 : eq(154, 73) : BOOL
160 : eq(154, 76) : BOOL
161 : ite(160, 78, 79) : BV:8
162 : ite(159, 75, 161) : BV:8
163 : ite(158, 72, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 66, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : bvadd(58, 125) : BV:32
168 : eq(167, 59) : BOOL
169 : eq(167, 64) : BOOL
170 : eq(167, 67) : BOOL
171 : eq(167, 70) : BOOL
172 : eq(167, 73) : BOOL
173 : eq(167, 76) : BOOL
174 : ite(173, 78, 79) : BV:8
175 : ite(172, 75, 174) : BV:8
176 : ite(171, 72, 175) : BV:8
177 : ite(170, 69, 176) : BV:8
178 : ite(169, 66, 177) : BV:8
179 : ite(168, 63, 178) : BV:8
180 : bvconcat(138, 152, 166, 179) : BV:32
181 : ite(55, 2, 180) : BV:32
182 : lambda(52, 181) : FUNCTION[BV:32 -> BV:32]
183 : map(51, 182) : MAP[BV:32 -> BV:32]
184 : lambda(17, 183) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
185 : map(16, 184) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
186 : sym_const(185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 164093951 ] -> 0, [ 164093952; 164093952 ] -> 90, [ 164093953; 164093953 ] -> 85, [ 164093954; 164093954 ] -> 247, [ 164093955; 164093955 ] -> 157, [ 164093956; 1929379837 ] -> 0, [ 1929379838; 1929379838 ] -> 64, [ 1929379839; 1929379839 ] -> 224, [ 1929379840; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 367490807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 367490808; 367490811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 367490812; 1993719035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1993719036; 1993719039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1993719040; 3774884359 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3774884360; 3774884363 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3774884364; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3774884360 { 0xe1002a08 -520082936 -1.128269e67 } : BV:32
=input.dst.llvm-%m
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1993719036 { 0x76d5bcfc +1.66982984e110 } : BV:32
=input.dst.llvm-%n
1 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 367490808 { 0x15e776f8 +1.80831813e172 } : BV:32
=input.dst.llvm-%x
1 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 441321471 { 0x1a4e07ff +1.60961902e181 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43717Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43718Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
25 : eq(23, 24) : BOOL
26 : 157 { 0x9d -99 } : BV:8
27 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
31 : eq(23, 30) : BOOL
32 : 90 { 0x5a } : BV:8
33 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
34 : eq(23, 33) : BOOL
35 : 224 { 0xe0 -32 } : BV:8
36 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
37 : eq(23, 36) : BOOL
38 : 247 { 0xf7 -9 } : BV:8
39 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
40 : eq(23, 39) : BOOL
41 : 85 { 0x55 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 441321472 { 0x1a4e0800 +1.60961914e181 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
2 : unit : UNIT
3 : Lambda43699Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 511 { 0x1ff +1.6091e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 512 { 0x200 +1.6103e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43700Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
27 : eq(25, 26) : BOOL
28 : 157 { 0x9d -99 } : BV:8
29 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
30 : eq(25, 29) : BOOL
31 : 64 { 0x40 } : BV:8
32 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
33 : eq(25, 32) : BOOL
34 : 90 { 0x5a } : BV:8
35 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
36 : eq(25, 35) : BOOL
37 : 224 { 0xe0 -32 } : BV:8
38 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
39 : eq(25, 38) : BOOL
40 : 247 { 0xf7 -9 } : BV:8
41 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
42 : eq(25, 41) : BOOL
43 : 85 { 0x55 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 23, 24) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : eq(52, 32) : BOOL
56 : eq(52, 35) : BOOL
57 : eq(52, 38) : BOOL
58 : eq(52, 41) : BOOL
59 : ite(58, 43, 44) : BV:8
60 : ite(57, 40, 59) : BV:8
61 : ite(56, 37, 60) : BV:8
62 : ite(55, 34, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 23, 24) : BV:32
67 : eq(66, 26) : BOOL
68 : eq(66, 29) : BOOL
69 : eq(66, 32) : BOOL
70 : eq(66, 35) : BOOL
71 : eq(66, 38) : BOOL
72 : eq(66, 41) : BOOL
73 : ite(72, 43, 44) : BV:8
74 : ite(71, 40, 73) : BV:8
75 : ite(70, 37, 74) : BV:8
76 : ite(69, 34, 75) : BV:8
77 : ite(68, 31, 76) : BV:8
78 : ite(67, 28, 77) : BV:8
79 : bvadd(23, 24) : BV:32
80 : eq(79, 26) : BOOL
81 : eq(79, 29) : BOOL
82 : eq(79, 32) : BOOL
83 : eq(79, 35) : BOOL
84 : eq(79, 38) : BOOL
85 : eq(79, 41) : BOOL
86 : ite(85, 43, 44) : BV:8
87 : ite(84, 40, 86) : BV:8
88 : ite(83, 37, 87) : BV:8
89 : ite(82, 34, 88) : BV:8
90 : ite(81, 31, 89) : BV:8
91 : ite(80, 28, 90) : BV:8
92 : bvconcat(50, 64, 78, 91) : BV:32
93 : ite(20, 4, 92) : BV:32
94 : lambda(19, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(18, 94) : MAP[BV:32 -> BV:32]
96 : sum(1, 2, 95) : SUM[UNIT,MAP[BV:32 -> BV:32]]
97 : sym_const(96) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 233904702 { 0xdf11a3e +1.88361334e156 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43722Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43723Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
25 : eq(23, 24) : BOOL
26 : 157 { 0x9d -99 } : BV:8
27 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
31 : eq(23, 30) : BOOL
32 : 90 { 0x5a } : BV:8
33 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
34 : eq(23, 33) : BOOL
35 : 224 { 0xe0 -32 } : BV:8
36 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
37 : eq(23, 36) : BOOL
38 : 247 { 0xf7 -9 } : BV:8
39 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
40 : eq(23, 39) : BOOL
41 : 85 { 0x55 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 441321471 { 0x1a4e07ff +1.60961902e181 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1707602207 { 0x65c7f11f +1.56204593e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1993719036 { 0x76d5bcfc +1.66982984e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1993719039 { 0x76d5bcff +1.66983020e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 367490808 { 0x15e776f8 +1.80831813e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 367490811 { 0x15e776fb +1.80831849e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3774884360 { 0xe1002a08 -520082936 -1.128269e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3774884363 { 0xe1002a0b -520082933 -1.128304e67 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda43582Var : BV:32
2 : Lambda43583Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 511 { 0x1ff +1.6091e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 512 { 0x200 +1.6103e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 513 { 0x201 +1.6115e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 157 { 0x9d -99 } : BV:8
56 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
57 : eq(53, 56) : BOOL
58 : 64 { 0x40 } : BV:8
59 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
60 : eq(53, 59) : BOOL
61 : 90 { 0x5a } : BV:8
62 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
63 : eq(53, 62) : BOOL
64 : 224 { 0xe0 -32 } : BV:8
65 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
66 : eq(53, 65) : BOOL
67 : 247 { 0xf7 -9 } : BV:8
68 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
69 : eq(53, 68) : BOOL
70 : 85 { 0x55 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(57, 58, 75) : BV:8
77 : ite(54, 55, 76) : BV:8
78 : bvadd(65, 52) : BV:32
79 : eq(78, 51) : BOOL
80 : eq(78, 56) : BOOL
81 : eq(78, 59) : BOOL
82 : eq(78, 62) : BOOL
83 : eq(78, 65) : BOOL
84 : eq(78, 68) : BOOL
85 : ite(84, 70, 71) : BV:8
86 : ite(83, 67, 85) : BV:8
87 : ite(82, 64, 86) : BV:8
88 : ite(81, 61, 87) : BV:8
89 : ite(80, 58, 88) : BV:8
90 : ite(79, 55, 89) : BV:8
91 : bvadd(68, 52) : BV:32
92 : eq(91, 51) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 62) : BOOL
96 : eq(91, 65) : BOOL
97 : eq(91, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : ite(93, 58, 101) : BV:8
103 : ite(92, 55, 102) : BV:8
104 : bvadd(59, 52) : BV:32
105 : eq(104, 51) : BOOL
106 : eq(104, 56) : BOOL
107 : eq(104, 59) : BOOL
108 : eq(104, 62) : BOOL
109 : eq(104, 65) : BOOL
110 : eq(104, 68) : BOOL
111 : ite(110, 70, 71) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 64, 112) : BV:8
114 : ite(107, 61, 113) : BV:8
115 : ite(106, 58, 114) : BV:8
116 : ite(105, 55, 115) : BV:8
117 : bvconcat(77, 90, 103, 116) : BV:32
118 : bvadd(48, 50, 117) : BV:32
119 : eq(118, 51) : BOOL
120 : eq(118, 56) : BOOL
121 : eq(118, 59) : BOOL
122 : eq(118, 62) : BOOL
123 : eq(118, 65) : BOOL
124 : eq(118, 68) : BOOL
125 : ite(124, 70, 71) : BV:8
126 : ite(123, 67, 125) : BV:8
127 : ite(122, 64, 126) : BV:8
128 : ite(121, 61, 127) : BV:8
129 : ite(120, 58, 128) : BV:8
130 : ite(119, 55, 129) : BV:8
131 : 2 { 0x2 +1.23e129 } : BV:32
132 : bvadd(131, 50, 117) : BV:32
133 : eq(132, 51) : BOOL
134 : eq(132, 56) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : eq(132, 68) : BOOL
139 : ite(138, 70, 71) : BV:8
140 : ite(137, 67, 139) : BV:8
141 : ite(136, 64, 140) : BV:8
142 : ite(135, 61, 141) : BV:8
143 : ite(134, 58, 142) : BV:8
144 : ite(133, 55, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 50, 117) : BV:32
147 : eq(146, 51) : BOOL
148 : eq(146, 56) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 62) : BOOL
151 : eq(146, 65) : BOOL
152 : eq(146, 68) : BOOL
153 : ite(152, 70, 71) : BV:8
154 : ite(151, 67, 153) : BV:8
155 : ite(150, 64, 154) : BV:8
156 : ite(149, 61, 155) : BV:8
157 : ite(148, 58, 156) : BV:8
158 : ite(147, 55, 157) : BV:8
159 : bvadd(50, 117) : BV:32
160 : eq(159, 51) : BOOL
161 : eq(159, 56) : BOOL
162 : eq(159, 59) : BOOL
163 : eq(159, 62) : BOOL
164 : eq(159, 65) : BOOL
165 : eq(159, 68) : BOOL
166 : ite(165, 70, 71) : BV:8
167 : ite(164, 67, 166) : BV:8
168 : ite(163, 64, 167) : BV:8
169 : ite(162, 61, 168) : BV:8
170 : ite(161, 58, 169) : BV:8
171 : ite(160, 55, 170) : BV:8
172 : bvconcat(130, 144, 158, 171) : BV:32
173 : ite(6, 3, 172) : BV:32
174 : ite(47, 172, 173) : BV:32
175 : ite(6, 3, 174) : BV:32
176 : lambda(1, 2, 175) : FUNCTION[BV:32,BV:32 -> BV:32]
177 : sym_const(176) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda43587Var : BV:32
2 : Lambda43588Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 957746151 ] -> true, [ 957746152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 957746151 ] -> true, [ 957746152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda43596Var : BV:32
2 : Lambda43597Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda43592Var : BV:32
2 : Lambda43593Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 157 { 0x9d -99 } : BV:8
15 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
19 : eq(12, 18) : BOOL
20 : 90 { 0x5a } : BV:8
21 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
22 : eq(12, 21) : BOOL
23 : 224 { 0xe0 -32 } : BV:8
24 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
25 : eq(12, 24) : BOOL
26 : 247 { 0xf7 -9 } : BV:8
27 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
28 : eq(12, 27) : BOOL
29 : 85 { 0x55 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : bvadd(24, 11) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 15) : BOOL
40 : eq(37, 18) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 17, 47) : BV:8
49 : ite(38, 14, 48) : BV:8
50 : bvadd(27, 11) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 15) : BOOL
53 : eq(50, 18) : BOOL
54 : eq(50, 21) : BOOL
55 : eq(50, 24) : BOOL
56 : eq(50, 27) : BOOL
57 : ite(56, 29, 30) : BV:8
58 : ite(55, 26, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 20, 59) : BV:8
61 : ite(52, 17, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : bvadd(18, 11) : BV:32
64 : eq(63, 10) : BOOL
65 : eq(63, 15) : BOOL
66 : eq(63, 18) : BOOL
67 : eq(63, 21) : BOOL
68 : eq(63, 24) : BOOL
69 : eq(63, 27) : BOOL
70 : ite(69, 29, 30) : BV:8
71 : ite(68, 26, 70) : BV:8
72 : ite(67, 23, 71) : BV:8
73 : ite(66, 20, 72) : BV:8
74 : ite(65, 17, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : bvconcat(36, 49, 62, 75) : BV:32
77 : bvadd(7, 9, 76) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 15) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 24) : BOOL
83 : eq(77, 27) : BOOL
84 : ite(83, 29, 30) : BV:8
85 : ite(82, 26, 84) : BV:8
86 : ite(81, 23, 85) : BV:8
87 : ite(80, 20, 86) : BV:8
88 : ite(79, 17, 87) : BV:8
89 : ite(78, 14, 88) : BV:8
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : bvadd(90, 9, 76) : BV:32
92 : eq(91, 10) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : eq(91, 27) : BOOL
98 : ite(97, 29, 30) : BV:8
99 : ite(96, 26, 98) : BV:8
100 : ite(95, 23, 99) : BV:8
101 : ite(94, 20, 100) : BV:8
102 : ite(93, 17, 101) : BV:8
103 : ite(92, 14, 102) : BV:8
104 : 1 { 0x1 +1.11e129 } : BV:32
105 : bvadd(104, 9, 76) : BV:32
106 : eq(105, 10) : BOOL
107 : eq(105, 15) : BOOL
108 : eq(105, 18) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : eq(105, 27) : BOOL
112 : ite(111, 29, 30) : BV:8
113 : ite(110, 26, 112) : BV:8
114 : ite(109, 23, 113) : BV:8
115 : ite(108, 20, 114) : BV:8
116 : ite(107, 17, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : bvadd(9, 76) : BV:32
119 : eq(118, 10) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 18) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : ite(124, 29, 30) : BV:8
126 : ite(123, 26, 125) : BV:8
127 : ite(122, 23, 126) : BV:8
128 : ite(121, 20, 127) : BV:8
129 : ite(120, 17, 128) : BV:8
130 : ite(119, 14, 129) : BV:8
131 : bvconcat(89, 103, 117, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : lambda(1, 2, 132) : FUNCTION[BV:32,BV:32 -> BV:32]
134 : sym_const(133) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43603Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 157 { 0x9d -99 } : BV:8
12 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
16 : eq(8, 15) : BOOL
17 : 90 { 0x5a } : BV:8
18 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
19 : eq(8, 18) : BOOL
20 : 224 { 0xe0 -32 } : BV:8
21 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
22 : eq(8, 21) : BOOL
23 : 247 { 0xf7 -9 } : BV:8
24 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
25 : eq(8, 24) : BOOL
26 : 85 { 0x55 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda43604Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 157 { 0x9d -99 } : BV:8
12 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
16 : eq(8, 15) : BOOL
17 : 90 { 0x5a } : BV:8
18 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
19 : eq(8, 18) : BOOL
20 : 224 { 0xe0 -32 } : BV:8
21 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
22 : eq(8, 21) : BOOL
23 : 247 { 0xf7 -9 } : BV:8
24 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
25 : eq(8, 24) : BOOL
26 : 85 { 0x55 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43611Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 157 { 0x9d -99 } : BV:8
12 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
16 : eq(8, 15) : BOOL
17 : 90 { 0x5a } : BV:8
18 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
19 : eq(8, 18) : BOOL
20 : 224 { 0xe0 -32 } : BV:8
21 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
22 : eq(8, 21) : BOOL
23 : 247 { 0xf7 -9 } : BV:8
24 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
25 : eq(8, 24) : BOOL
26 : 85 { 0x55 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1997837745
=counter_example_end
=global nodece 49 num_edges_traversed 1
=global nodece 49 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 50
=global nodece 50 nodece z3.ce4117.num_edges_traversed2
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(epsilon)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3.ce4117 d0bcdba8d29cb5f68d3b2f77c8698615
=input.spec-%var-x-1
1 : Lambda43690Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43691Var : BV:32
18 : Lambda43692Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43693Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 157 { 0x9d -99 } : BV:8
83 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
84 : eq(80, 83) : BOOL
85 : 64 { 0x40 } : BV:8
86 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
87 : eq(80, 86) : BOOL
88 : 90 { 0x5a } : BV:8
89 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
90 : eq(80, 89) : BOOL
91 : 224 { 0xe0 -32 } : BV:8
92 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
93 : eq(80, 92) : BOOL
94 : 247 { 0xf7 -9 } : BV:8
95 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
96 : eq(80, 95) : BOOL
97 : 85 { 0x55 } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(93, 94, 99) : BV:8
101 : ite(90, 91, 100) : BV:8
102 : ite(87, 88, 101) : BV:8
103 : ite(84, 85, 102) : BV:8
104 : ite(81, 82, 103) : BV:8
105 : bvadd(92, 79) : BV:32
106 : eq(105, 78) : BOOL
107 : eq(105, 83) : BOOL
108 : eq(105, 86) : BOOL
109 : eq(105, 89) : BOOL
110 : eq(105, 92) : BOOL
111 : eq(105, 95) : BOOL
112 : ite(111, 97, 98) : BV:8
113 : ite(110, 94, 112) : BV:8
114 : ite(109, 91, 113) : BV:8
115 : ite(108, 88, 114) : BV:8
116 : ite(107, 85, 115) : BV:8
117 : ite(106, 82, 116) : BV:8
118 : bvadd(95, 79) : BV:32
119 : eq(118, 78) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 89) : BOOL
123 : eq(118, 92) : BOOL
124 : eq(118, 95) : BOOL
125 : ite(124, 97, 98) : BV:8
126 : ite(123, 94, 125) : BV:8
127 : ite(122, 91, 126) : BV:8
128 : ite(121, 88, 127) : BV:8
129 : ite(120, 85, 128) : BV:8
130 : ite(119, 82, 129) : BV:8
131 : bvadd(86, 79) : BV:32
132 : eq(131, 78) : BOOL
133 : eq(131, 83) : BOOL
134 : eq(131, 86) : BOOL
135 : eq(131, 89) : BOOL
136 : eq(131, 92) : BOOL
137 : eq(131, 95) : BOOL
138 : ite(137, 97, 98) : BV:8
139 : ite(136, 94, 138) : BV:8
140 : ite(135, 91, 139) : BV:8
141 : ite(134, 88, 140) : BV:8
142 : ite(133, 85, 141) : BV:8
143 : ite(132, 82, 142) : BV:8
144 : bvconcat(104, 117, 130, 143) : BV:32
145 : bvadd(75, 77, 144) : BV:32
146 : eq(145, 78) : BOOL
147 : eq(145, 83) : BOOL
148 : eq(145, 86) : BOOL
149 : eq(145, 89) : BOOL
150 : eq(145, 92) : BOOL
151 : eq(145, 95) : BOOL
152 : ite(151, 97, 98) : BV:8
153 : ite(150, 94, 152) : BV:8
154 : ite(149, 91, 153) : BV:8
155 : ite(148, 88, 154) : BV:8
156 : ite(147, 85, 155) : BV:8
157 : ite(146, 82, 156) : BV:8
158 : 2 { 0x2 +1.23e129 } : BV:32
159 : bvadd(158, 77, 144) : BV:32
160 : eq(159, 78) : BOOL
161 : eq(159, 83) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : eq(159, 95) : BOOL
166 : ite(165, 97, 98) : BV:8
167 : ite(164, 94, 166) : BV:8
168 : ite(163, 91, 167) : BV:8
169 : ite(162, 88, 168) : BV:8
170 : ite(161, 85, 169) : BV:8
171 : ite(160, 82, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 77, 144) : BV:32
174 : eq(173, 78) : BOOL
175 : eq(173, 83) : BOOL
176 : eq(173, 86) : BOOL
177 : eq(173, 89) : BOOL
178 : eq(173, 92) : BOOL
179 : eq(173, 95) : BOOL
180 : ite(179, 97, 98) : BV:8
181 : ite(178, 94, 180) : BV:8
182 : ite(177, 91, 181) : BV:8
183 : ite(176, 88, 182) : BV:8
184 : ite(175, 85, 183) : BV:8
185 : ite(174, 82, 184) : BV:8
186 : bvadd(77, 144) : BV:32
187 : eq(186, 78) : BOOL
188 : eq(186, 83) : BOOL
189 : eq(186, 86) : BOOL
190 : eq(186, 89) : BOOL
191 : eq(186, 92) : BOOL
192 : eq(186, 95) : BOOL
193 : ite(192, 97, 98) : BV:8
194 : ite(191, 94, 193) : BV:8
195 : ite(190, 91, 194) : BV:8
196 : ite(189, 88, 195) : BV:8
197 : ite(188, 85, 196) : BV:8
198 : ite(187, 82, 197) : BV:8
199 : bvconcat(157, 171, 185, 198) : BV:32
200 : ite(55, 2, 199) : BV:32
201 : ite(74, 199, 200) : BV:32
202 : ite(55, 2, 201) : BV:32
203 : lambda(52, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(51, 203) : MAP[BV:32 -> BV:32]
205 : lambda(17, 204) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
206 : map(16, 205) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
207 : sym_const(206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43710Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43711Var : BV:32
18 : Lambda43712Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43713Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 157 { 0x9d -99 } : BV:8
64 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
65 : eq(61, 64) : BOOL
66 : 64 { 0x40 } : BV:8
67 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
68 : eq(61, 67) : BOOL
69 : 90 { 0x5a } : BV:8
70 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
71 : eq(61, 70) : BOOL
72 : 224 { 0xe0 -32 } : BV:8
73 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
74 : eq(61, 73) : BOOL
75 : 247 { 0xf7 -9 } : BV:8
76 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
77 : eq(61, 76) : BOOL
78 : 85 { 0x55 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : bvadd(73, 60) : BV:32
87 : eq(86, 59) : BOOL
88 : eq(86, 64) : BOOL
89 : eq(86, 67) : BOOL
90 : eq(86, 70) : BOOL
91 : eq(86, 73) : BOOL
92 : eq(86, 76) : BOOL
93 : ite(92, 78, 79) : BV:8
94 : ite(91, 75, 93) : BV:8
95 : ite(90, 72, 94) : BV:8
96 : ite(89, 69, 95) : BV:8
97 : ite(88, 66, 96) : BV:8
98 : ite(87, 63, 97) : BV:8
99 : bvadd(76, 60) : BV:32
100 : eq(99, 59) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 67) : BOOL
103 : eq(99, 70) : BOOL
104 : eq(99, 73) : BOOL
105 : eq(99, 76) : BOOL
106 : ite(105, 78, 79) : BV:8
107 : ite(104, 75, 106) : BV:8
108 : ite(103, 72, 107) : BV:8
109 : ite(102, 69, 108) : BV:8
110 : ite(101, 66, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : bvadd(67, 60) : BV:32
113 : eq(112, 59) : BOOL
114 : eq(112, 64) : BOOL
115 : eq(112, 67) : BOOL
116 : eq(112, 70) : BOOL
117 : eq(112, 73) : BOOL
118 : eq(112, 76) : BOOL
119 : ite(118, 78, 79) : BV:8
120 : ite(117, 75, 119) : BV:8
121 : ite(116, 72, 120) : BV:8
122 : ite(115, 69, 121) : BV:8
123 : ite(114, 66, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : bvconcat(85, 98, 111, 124) : BV:32
126 : bvadd(56, 58, 125) : BV:32
127 : eq(126, 59) : BOOL
128 : eq(126, 64) : BOOL
129 : eq(126, 67) : BOOL
130 : eq(126, 70) : BOOL
131 : eq(126, 73) : BOOL
132 : eq(126, 76) : BOOL
133 : ite(132, 78, 79) : BV:8
134 : ite(131, 75, 133) : BV:8
135 : ite(130, 72, 134) : BV:8
136 : ite(129, 69, 135) : BV:8
137 : ite(128, 66, 136) : BV:8
138 : ite(127, 63, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 58, 125) : BV:32
141 : eq(140, 59) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : eq(140, 76) : BOOL
147 : ite(146, 78, 79) : BV:8
148 : ite(145, 75, 147) : BV:8
149 : ite(144, 72, 148) : BV:8
150 : ite(143, 69, 149) : BV:8
151 : ite(142, 66, 150) : BV:8
152 : ite(141, 63, 151) : BV:8
153 : 1 { 0x1 +1.11e129 } : BV:32
154 : bvadd(153, 58, 125) : BV:32
155 : eq(154, 59) : BOOL
156 : eq(154, 64) : BOOL
157 : eq(154, 67) : BOOL
158 : eq(154, 70) : BOOL
159 : eq(154, 73) : BOOL
160 : eq(154, 76) : BOOL
161 : ite(160, 78, 79) : BV:8
162 : ite(159, 75, 161) : BV:8
163 : ite(158, 72, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 66, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : bvadd(58, 125) : BV:32
168 : eq(167, 59) : BOOL
169 : eq(167, 64) : BOOL
170 : eq(167, 67) : BOOL
171 : eq(167, 70) : BOOL
172 : eq(167, 73) : BOOL
173 : eq(167, 76) : BOOL
174 : ite(173, 78, 79) : BV:8
175 : ite(172, 75, 174) : BV:8
176 : ite(171, 72, 175) : BV:8
177 : ite(170, 69, 176) : BV:8
178 : ite(169, 66, 177) : BV:8
179 : ite(168, 63, 178) : BV:8
180 : bvconcat(138, 152, 166, 179) : BV:32
181 : ite(55, 2, 180) : BV:32
182 : lambda(52, 181) : FUNCTION[BV:32 -> BV:32]
183 : map(51, 182) : MAP[BV:32 -> BV:32]
184 : lambda(17, 183) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
185 : map(16, 184) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
186 : sym_const(185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 164093951 ] -> 0, [ 164093952; 164093952 ] -> 90, [ 164093953; 164093953 ] -> 85, [ 164093954; 164093954 ] -> 247, [ 164093955; 164093955 ] -> 157, [ 164093956; 1929379837 ] -> 0, [ 1929379838; 1929379838 ] -> 64, [ 1929379839; 1929379839 ] -> 224, [ 1929379840; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 367490807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 367490808; 367490811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 367490812; 1993719035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1993719036; 1993719039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1993719040; 3774884359 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3774884360; 3774884363 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3774884364; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3774884360 { 0xe1002a08 -520082936 -1.128269e67 } : BV:32
=input.dst.llvm-%m
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1993719036 { 0x76d5bcfc +1.66982984e110 } : BV:32
=input.dst.llvm-%n
1 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 367490808 { 0x15e776f8 +1.80831813e172 } : BV:32
=input.dst.llvm-%x
1 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 441321471 { 0x1a4e07ff +1.60961902e181 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43717Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43718Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
25 : eq(23, 24) : BOOL
26 : 157 { 0x9d -99 } : BV:8
27 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
31 : eq(23, 30) : BOOL
32 : 90 { 0x5a } : BV:8
33 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
34 : eq(23, 33) : BOOL
35 : 224 { 0xe0 -32 } : BV:8
36 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
37 : eq(23, 36) : BOOL
38 : 247 { 0xf7 -9 } : BV:8
39 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
40 : eq(23, 39) : BOOL
41 : 85 { 0x55 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 441321472 { 0x1a4e0800 +1.60961914e181 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
2 : unit : UNIT
3 : Lambda43699Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 511 { 0x1ff +1.6091e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 512 { 0x200 +1.6103e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43700Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
27 : eq(25, 26) : BOOL
28 : 157 { 0x9d -99 } : BV:8
29 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
30 : eq(25, 29) : BOOL
31 : 64 { 0x40 } : BV:8
32 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
33 : eq(25, 32) : BOOL
34 : 90 { 0x5a } : BV:8
35 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
36 : eq(25, 35) : BOOL
37 : 224 { 0xe0 -32 } : BV:8
38 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
39 : eq(25, 38) : BOOL
40 : 247 { 0xf7 -9 } : BV:8
41 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
42 : eq(25, 41) : BOOL
43 : 85 { 0x55 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 23, 24) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : eq(52, 32) : BOOL
56 : eq(52, 35) : BOOL
57 : eq(52, 38) : BOOL
58 : eq(52, 41) : BOOL
59 : ite(58, 43, 44) : BV:8
60 : ite(57, 40, 59) : BV:8
61 : ite(56, 37, 60) : BV:8
62 : ite(55, 34, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 23, 24) : BV:32
67 : eq(66, 26) : BOOL
68 : eq(66, 29) : BOOL
69 : eq(66, 32) : BOOL
70 : eq(66, 35) : BOOL
71 : eq(66, 38) : BOOL
72 : eq(66, 41) : BOOL
73 : ite(72, 43, 44) : BV:8
74 : ite(71, 40, 73) : BV:8
75 : ite(70, 37, 74) : BV:8
76 : ite(69, 34, 75) : BV:8
77 : ite(68, 31, 76) : BV:8
78 : ite(67, 28, 77) : BV:8
79 : bvadd(23, 24) : BV:32
80 : eq(79, 26) : BOOL
81 : eq(79, 29) : BOOL
82 : eq(79, 32) : BOOL
83 : eq(79, 35) : BOOL
84 : eq(79, 38) : BOOL
85 : eq(79, 41) : BOOL
86 : ite(85, 43, 44) : BV:8
87 : ite(84, 40, 86) : BV:8
88 : ite(83, 37, 87) : BV:8
89 : ite(82, 34, 88) : BV:8
90 : ite(81, 31, 89) : BV:8
91 : ite(80, 28, 90) : BV:8
92 : bvconcat(50, 64, 78, 91) : BV:32
93 : ite(20, 4, 92) : BV:32
94 : lambda(19, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(18, 94) : MAP[BV:32 -> BV:32]
96 : sum(1, 2, 95) : SUM[UNIT,MAP[BV:32 -> BV:32]]
97 : sym_const(96) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 233904703 { 0xdf11a3f +1.88361346e156 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43722Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43723Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
25 : eq(23, 24) : BOOL
26 : 157 { 0x9d -99 } : BV:8
27 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
31 : eq(23, 30) : BOOL
32 : 90 { 0x5a } : BV:8
33 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
34 : eq(23, 33) : BOOL
35 : 224 { 0xe0 -32 } : BV:8
36 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
37 : eq(23, 36) : BOOL
38 : 247 { 0xf7 -9 } : BV:8
39 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
40 : eq(23, 39) : BOOL
41 : 85 { 0x55 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 441321471 { 0x1a4e07ff +1.60961902e181 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1707602208 { 0x65c7f120 +1.56204605e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1993719036 { 0x76d5bcfc +1.66982984e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1993719039 { 0x76d5bcff +1.66983020e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 367490808 { 0x15e776f8 +1.80831813e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 367490811 { 0x15e776fb +1.80831849e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3774884360 { 0xe1002a08 -520082936 -1.128269e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3774884363 { 0xe1002a0b -520082933 -1.128304e67 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda43582Var : BV:32
2 : Lambda43583Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 511 { 0x1ff +1.6091e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 512 { 0x200 +1.6103e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 513 { 0x201 +1.6115e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 157 { 0x9d -99 } : BV:8
56 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
57 : eq(53, 56) : BOOL
58 : 64 { 0x40 } : BV:8
59 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
60 : eq(53, 59) : BOOL
61 : 90 { 0x5a } : BV:8
62 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
63 : eq(53, 62) : BOOL
64 : 224 { 0xe0 -32 } : BV:8
65 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
66 : eq(53, 65) : BOOL
67 : 247 { 0xf7 -9 } : BV:8
68 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
69 : eq(53, 68) : BOOL
70 : 85 { 0x55 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(57, 58, 75) : BV:8
77 : ite(54, 55, 76) : BV:8
78 : bvadd(65, 52) : BV:32
79 : eq(78, 51) : BOOL
80 : eq(78, 56) : BOOL
81 : eq(78, 59) : BOOL
82 : eq(78, 62) : BOOL
83 : eq(78, 65) : BOOL
84 : eq(78, 68) : BOOL
85 : ite(84, 70, 71) : BV:8
86 : ite(83, 67, 85) : BV:8
87 : ite(82, 64, 86) : BV:8
88 : ite(81, 61, 87) : BV:8
89 : ite(80, 58, 88) : BV:8
90 : ite(79, 55, 89) : BV:8
91 : bvadd(68, 52) : BV:32
92 : eq(91, 51) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 62) : BOOL
96 : eq(91, 65) : BOOL
97 : eq(91, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : ite(93, 58, 101) : BV:8
103 : ite(92, 55, 102) : BV:8
104 : bvadd(59, 52) : BV:32
105 : eq(104, 51) : BOOL
106 : eq(104, 56) : BOOL
107 : eq(104, 59) : BOOL
108 : eq(104, 62) : BOOL
109 : eq(104, 65) : BOOL
110 : eq(104, 68) : BOOL
111 : ite(110, 70, 71) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 64, 112) : BV:8
114 : ite(107, 61, 113) : BV:8
115 : ite(106, 58, 114) : BV:8
116 : ite(105, 55, 115) : BV:8
117 : bvconcat(77, 90, 103, 116) : BV:32
118 : bvadd(48, 50, 117) : BV:32
119 : eq(118, 51) : BOOL
120 : eq(118, 56) : BOOL
121 : eq(118, 59) : BOOL
122 : eq(118, 62) : BOOL
123 : eq(118, 65) : BOOL
124 : eq(118, 68) : BOOL
125 : ite(124, 70, 71) : BV:8
126 : ite(123, 67, 125) : BV:8
127 : ite(122, 64, 126) : BV:8
128 : ite(121, 61, 127) : BV:8
129 : ite(120, 58, 128) : BV:8
130 : ite(119, 55, 129) : BV:8
131 : 2 { 0x2 +1.23e129 } : BV:32
132 : bvadd(131, 50, 117) : BV:32
133 : eq(132, 51) : BOOL
134 : eq(132, 56) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : eq(132, 68) : BOOL
139 : ite(138, 70, 71) : BV:8
140 : ite(137, 67, 139) : BV:8
141 : ite(136, 64, 140) : BV:8
142 : ite(135, 61, 141) : BV:8
143 : ite(134, 58, 142) : BV:8
144 : ite(133, 55, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 50, 117) : BV:32
147 : eq(146, 51) : BOOL
148 : eq(146, 56) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 62) : BOOL
151 : eq(146, 65) : BOOL
152 : eq(146, 68) : BOOL
153 : ite(152, 70, 71) : BV:8
154 : ite(151, 67, 153) : BV:8
155 : ite(150, 64, 154) : BV:8
156 : ite(149, 61, 155) : BV:8
157 : ite(148, 58, 156) : BV:8
158 : ite(147, 55, 157) : BV:8
159 : bvadd(50, 117) : BV:32
160 : eq(159, 51) : BOOL
161 : eq(159, 56) : BOOL
162 : eq(159, 59) : BOOL
163 : eq(159, 62) : BOOL
164 : eq(159, 65) : BOOL
165 : eq(159, 68) : BOOL
166 : ite(165, 70, 71) : BV:8
167 : ite(164, 67, 166) : BV:8
168 : ite(163, 64, 167) : BV:8
169 : ite(162, 61, 168) : BV:8
170 : ite(161, 58, 169) : BV:8
171 : ite(160, 55, 170) : BV:8
172 : bvconcat(130, 144, 158, 171) : BV:32
173 : ite(6, 3, 172) : BV:32
174 : ite(47, 172, 173) : BV:32
175 : ite(6, 3, 174) : BV:32
176 : lambda(1, 2, 175) : FUNCTION[BV:32,BV:32 -> BV:32]
177 : sym_const(176) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda43587Var : BV:32
2 : Lambda43588Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 957746151 ] -> true, [ 957746152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 957746151 ] -> true, [ 957746152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda43596Var : BV:32
2 : Lambda43597Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 957746151 { 0x39160be7 +1.17223823e243 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 957746152 { 0x39160be8 +1.17223834e243 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 957746153 { 0x39160be9 +1.17223846e243 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda43592Var : BV:32
2 : Lambda43593Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 157 { 0x9d -99 } : BV:8
15 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
19 : eq(12, 18) : BOOL
20 : 90 { 0x5a } : BV:8
21 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
22 : eq(12, 21) : BOOL
23 : 224 { 0xe0 -32 } : BV:8
24 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
25 : eq(12, 24) : BOOL
26 : 247 { 0xf7 -9 } : BV:8
27 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
28 : eq(12, 27) : BOOL
29 : 85 { 0x55 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : bvadd(24, 11) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 15) : BOOL
40 : eq(37, 18) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 17, 47) : BV:8
49 : ite(38, 14, 48) : BV:8
50 : bvadd(27, 11) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 15) : BOOL
53 : eq(50, 18) : BOOL
54 : eq(50, 21) : BOOL
55 : eq(50, 24) : BOOL
56 : eq(50, 27) : BOOL
57 : ite(56, 29, 30) : BV:8
58 : ite(55, 26, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 20, 59) : BV:8
61 : ite(52, 17, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : bvadd(18, 11) : BV:32
64 : eq(63, 10) : BOOL
65 : eq(63, 15) : BOOL
66 : eq(63, 18) : BOOL
67 : eq(63, 21) : BOOL
68 : eq(63, 24) : BOOL
69 : eq(63, 27) : BOOL
70 : ite(69, 29, 30) : BV:8
71 : ite(68, 26, 70) : BV:8
72 : ite(67, 23, 71) : BV:8
73 : ite(66, 20, 72) : BV:8
74 : ite(65, 17, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : bvconcat(36, 49, 62, 75) : BV:32
77 : bvadd(7, 9, 76) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 15) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 24) : BOOL
83 : eq(77, 27) : BOOL
84 : ite(83, 29, 30) : BV:8
85 : ite(82, 26, 84) : BV:8
86 : ite(81, 23, 85) : BV:8
87 : ite(80, 20, 86) : BV:8
88 : ite(79, 17, 87) : BV:8
89 : ite(78, 14, 88) : BV:8
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : bvadd(90, 9, 76) : BV:32
92 : eq(91, 10) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : eq(91, 27) : BOOL
98 : ite(97, 29, 30) : BV:8
99 : ite(96, 26, 98) : BV:8
100 : ite(95, 23, 99) : BV:8
101 : ite(94, 20, 100) : BV:8
102 : ite(93, 17, 101) : BV:8
103 : ite(92, 14, 102) : BV:8
104 : 1 { 0x1 +1.11e129 } : BV:32
105 : bvadd(104, 9, 76) : BV:32
106 : eq(105, 10) : BOOL
107 : eq(105, 15) : BOOL
108 : eq(105, 18) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : eq(105, 27) : BOOL
112 : ite(111, 29, 30) : BV:8
113 : ite(110, 26, 112) : BV:8
114 : ite(109, 23, 113) : BV:8
115 : ite(108, 20, 114) : BV:8
116 : ite(107, 17, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : bvadd(9, 76) : BV:32
119 : eq(118, 10) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 18) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : ite(124, 29, 30) : BV:8
126 : ite(123, 26, 125) : BV:8
127 : ite(122, 23, 126) : BV:8
128 : ite(121, 20, 127) : BV:8
129 : ite(120, 17, 128) : BV:8
130 : ite(119, 14, 129) : BV:8
131 : bvconcat(89, 103, 117, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : lambda(1, 2, 132) : FUNCTION[BV:32,BV:32 -> BV:32]
134 : sym_const(133) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43603Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 157 { 0x9d -99 } : BV:8
12 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
16 : eq(8, 15) : BOOL
17 : 90 { 0x5a } : BV:8
18 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
19 : eq(8, 18) : BOOL
20 : 224 { 0xe0 -32 } : BV:8
21 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
22 : eq(8, 21) : BOOL
23 : 247 { 0xf7 -9 } : BV:8
24 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
25 : eq(8, 24) : BOOL
26 : 85 { 0x55 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda43604Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 157 { 0x9d -99 } : BV:8
12 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
16 : eq(8, 15) : BOOL
17 : 90 { 0x5a } : BV:8
18 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
19 : eq(8, 18) : BOOL
20 : 224 { 0xe0 -32 } : BV:8
21 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
22 : eq(8, 21) : BOOL
23 : 247 { 0xf7 -9 } : BV:8
24 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
25 : eq(8, 24) : BOOL
26 : 85 { 0x55 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43611Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3762290688 { 0xe0400000 -532676608 -1.50000000e65 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 164093955 { 0x9c7e003 +1.56152379e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 157 { 0x9d -99 } : BV:8
12 : 1929379838 { 0x72fffffe +1.99999976e102 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 164093952 { 0x9c7e000 +1.56152343e148 } : BV:32
16 : eq(8, 15) : BOOL
17 : 90 { 0x5a } : BV:8
18 : 1929379839 { 0x72ffffff +1.99999988e102 } : BV:32
19 : eq(8, 18) : BOOL
20 : 224 { 0xe0 -32 } : BV:8
21 : 164093954 { 0x9c7e002 +1.56152367e148 } : BV:32
22 : eq(8, 21) : BOOL
23 : 247 { 0xf7 -9 } : BV:8
24 : 164093953 { 0x9c7e001 +1.56152355e148 } : BV:32
25 : eq(8, 24) : BOOL
26 : 85 { 0x55 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1997837745
=counter_example_end
=global nodece 50 num_edges_traversed 2
=global nodece 50 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 51
=global nodece 51 nodece z3.ce4128.num_edges_traversed1
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3.ce4128 b5daf1778dfe35fce5c546629bf8ad52
=input.spec-%var-x-1
1 : Lambda46274Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46275Var : BV:32
18 : Lambda46276Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46277Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
81 : eq(79, 80) : BOOL
82 : 229 { 0xe5 -27 } : BV:8
83 : eq(79, 77) : BOOL
84 : 190 { 0xbe -66 } : BV:8
85 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
89 : eq(79, 88) : BOOL
90 : 125 { 0x7d } : BV:8
91 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
92 : eq(79, 91) : BOOL
93 : 4 { 0x4 } : BV:8
94 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
95 : eq(79, 94) : BOOL
96 : 255 { 0xff -1 } : BV:8
97 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
98 : eq(79, 97) : BOOL
99 : 122 { 0x7a } : BV:8
100 : 0 { 0x0 } : BV:8
101 : ite(98, 99, 100) : BV:8
102 : ite(95, 96, 101) : BV:8
103 : ite(92, 93, 102) : BV:8
104 : ite(89, 90, 103) : BV:8
105 : ite(86, 87, 104) : BV:8
106 : ite(83, 84, 105) : BV:8
107 : ite(81, 82, 106) : BV:8
108 : bvadd(94, 78) : BV:32
109 : eq(108, 80) : BOOL
110 : eq(108, 77) : BOOL
111 : eq(108, 85) : BOOL
112 : eq(108, 88) : BOOL
113 : eq(108, 91) : BOOL
114 : eq(108, 94) : BOOL
115 : eq(108, 97) : BOOL
116 : ite(115, 99, 100) : BV:8
117 : ite(114, 96, 116) : BV:8
118 : ite(113, 93, 117) : BV:8
119 : ite(112, 90, 118) : BV:8
120 : ite(111, 87, 119) : BV:8
121 : ite(110, 84, 120) : BV:8
122 : ite(109, 82, 121) : BV:8
123 : bvadd(97, 78) : BV:32
124 : eq(123, 80) : BOOL
125 : eq(123, 77) : BOOL
126 : eq(123, 85) : BOOL
127 : eq(123, 88) : BOOL
128 : eq(123, 91) : BOOL
129 : eq(123, 94) : BOOL
130 : eq(123, 97) : BOOL
131 : ite(130, 99, 100) : BV:8
132 : ite(129, 96, 131) : BV:8
133 : ite(128, 93, 132) : BV:8
134 : ite(127, 90, 133) : BV:8
135 : ite(126, 87, 134) : BV:8
136 : ite(125, 84, 135) : BV:8
137 : ite(124, 82, 136) : BV:8
138 : bvadd(88, 78) : BV:32
139 : eq(138, 80) : BOOL
140 : eq(138, 77) : BOOL
141 : eq(138, 85) : BOOL
142 : eq(138, 88) : BOOL
143 : eq(138, 91) : BOOL
144 : eq(138, 94) : BOOL
145 : eq(138, 97) : BOOL
146 : ite(145, 99, 100) : BV:8
147 : ite(144, 96, 146) : BV:8
148 : ite(143, 93, 147) : BV:8
149 : ite(142, 90, 148) : BV:8
150 : ite(141, 87, 149) : BV:8
151 : ite(140, 84, 150) : BV:8
152 : ite(139, 82, 151) : BV:8
153 : bvconcat(107, 122, 137, 152) : BV:32
154 : bvadd(74, 76, 153) : BV:32
155 : eq(154, 80) : BOOL
156 : eq(154, 77) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : ite(161, 99, 100) : BV:8
163 : ite(160, 96, 162) : BV:8
164 : ite(159, 93, 163) : BV:8
165 : ite(158, 90, 164) : BV:8
166 : ite(157, 87, 165) : BV:8
167 : ite(156, 84, 166) : BV:8
168 : ite(155, 82, 167) : BV:8
169 : bvadd(40, 76, 153) : BV:32
170 : eq(169, 80) : BOOL
171 : eq(169, 77) : BOOL
172 : eq(169, 85) : BOOL
173 : eq(169, 88) : BOOL
174 : eq(169, 91) : BOOL
175 : eq(169, 94) : BOOL
176 : eq(169, 97) : BOOL
177 : ite(176, 99, 100) : BV:8
178 : ite(175, 96, 177) : BV:8
179 : ite(174, 93, 178) : BV:8
180 : ite(173, 90, 179) : BV:8
181 : ite(172, 87, 180) : BV:8
182 : ite(171, 84, 181) : BV:8
183 : ite(170, 82, 182) : BV:8
184 : bvadd(36, 76, 153) : BV:32
185 : eq(184, 80) : BOOL
186 : eq(184, 77) : BOOL
187 : eq(184, 85) : BOOL
188 : eq(184, 88) : BOOL
189 : eq(184, 91) : BOOL
190 : eq(184, 94) : BOOL
191 : eq(184, 97) : BOOL
192 : ite(191, 99, 100) : BV:8
193 : ite(190, 96, 192) : BV:8
194 : ite(189, 93, 193) : BV:8
195 : ite(188, 90, 194) : BV:8
196 : ite(187, 87, 195) : BV:8
197 : ite(186, 84, 196) : BV:8
198 : ite(185, 82, 197) : BV:8
199 : bvadd(76, 153) : BV:32
200 : eq(199, 80) : BOOL
201 : eq(199, 77) : BOOL
202 : eq(199, 85) : BOOL
203 : eq(199, 88) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : ite(206, 99, 100) : BV:8
208 : ite(205, 96, 207) : BV:8
209 : ite(204, 93, 208) : BV:8
210 : ite(203, 90, 209) : BV:8
211 : ite(202, 87, 210) : BV:8
212 : ite(201, 84, 211) : BV:8
213 : ite(200, 82, 212) : BV:8
214 : bvconcat(168, 183, 198, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : ite(73, 214, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : lambda(51, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(50, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 2150629376 { 0x80300000 -2144337920 -1.37500000e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46294Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46295Var : BV:32
18 : Lambda46296Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46297Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 229 { 0xe5 -27 } : BV:8
64 : eq(60, 58) : BOOL
65 : 190 { 0xbe -66 } : BV:8
66 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
70 : eq(60, 69) : BOOL
71 : 125 { 0x7d } : BV:8
72 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
73 : eq(60, 72) : BOOL
74 : 4 { 0x4 } : BV:8
75 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
76 : eq(60, 75) : BOOL
77 : 255 { 0xff -1 } : BV:8
78 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
79 : eq(60, 78) : BOOL
80 : 122 { 0x7a } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(62, 63, 87) : BV:8
89 : bvadd(75, 59) : BV:32
90 : eq(89, 61) : BOOL
91 : eq(89, 58) : BOOL
92 : eq(89, 66) : BOOL
93 : eq(89, 69) : BOOL
94 : eq(89, 72) : BOOL
95 : eq(89, 75) : BOOL
96 : eq(89, 78) : BOOL
97 : ite(96, 80, 81) : BV:8
98 : ite(95, 77, 97) : BV:8
99 : ite(94, 74, 98) : BV:8
100 : ite(93, 71, 99) : BV:8
101 : ite(92, 68, 100) : BV:8
102 : ite(91, 65, 101) : BV:8
103 : ite(90, 63, 102) : BV:8
104 : bvadd(78, 59) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 58) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 72) : BOOL
110 : eq(104, 75) : BOOL
111 : eq(104, 78) : BOOL
112 : ite(111, 80, 81) : BV:8
113 : ite(110, 77, 112) : BV:8
114 : ite(109, 74, 113) : BV:8
115 : ite(108, 71, 114) : BV:8
116 : ite(107, 68, 115) : BV:8
117 : ite(106, 65, 116) : BV:8
118 : ite(105, 63, 117) : BV:8
119 : bvadd(69, 59) : BV:32
120 : eq(119, 61) : BOOL
121 : eq(119, 58) : BOOL
122 : eq(119, 66) : BOOL
123 : eq(119, 69) : BOOL
124 : eq(119, 72) : BOOL
125 : eq(119, 75) : BOOL
126 : eq(119, 78) : BOOL
127 : ite(126, 80, 81) : BV:8
128 : ite(125, 77, 127) : BV:8
129 : ite(124, 74, 128) : BV:8
130 : ite(123, 71, 129) : BV:8
131 : ite(122, 68, 130) : BV:8
132 : ite(121, 65, 131) : BV:8
133 : ite(120, 63, 132) : BV:8
134 : bvconcat(88, 103, 118, 133) : BV:32
135 : bvadd(55, 57, 134) : BV:32
136 : eq(135, 61) : BOOL
137 : eq(135, 58) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : ite(142, 80, 81) : BV:8
144 : ite(141, 77, 143) : BV:8
145 : ite(140, 74, 144) : BV:8
146 : ite(139, 71, 145) : BV:8
147 : ite(138, 68, 146) : BV:8
148 : ite(137, 65, 147) : BV:8
149 : ite(136, 63, 148) : BV:8
150 : bvadd(40, 57, 134) : BV:32
151 : eq(150, 61) : BOOL
152 : eq(150, 58) : BOOL
153 : eq(150, 66) : BOOL
154 : eq(150, 69) : BOOL
155 : eq(150, 72) : BOOL
156 : eq(150, 75) : BOOL
157 : eq(150, 78) : BOOL
158 : ite(157, 80, 81) : BV:8
159 : ite(156, 77, 158) : BV:8
160 : ite(155, 74, 159) : BV:8
161 : ite(154, 71, 160) : BV:8
162 : ite(153, 68, 161) : BV:8
163 : ite(152, 65, 162) : BV:8
164 : ite(151, 63, 163) : BV:8
165 : bvadd(36, 57, 134) : BV:32
166 : eq(165, 61) : BOOL
167 : eq(165, 58) : BOOL
168 : eq(165, 66) : BOOL
169 : eq(165, 69) : BOOL
170 : eq(165, 72) : BOOL
171 : eq(165, 75) : BOOL
172 : eq(165, 78) : BOOL
173 : ite(172, 80, 81) : BV:8
174 : ite(171, 77, 173) : BV:8
175 : ite(170, 74, 174) : BV:8
176 : ite(169, 71, 175) : BV:8
177 : ite(168, 68, 176) : BV:8
178 : ite(167, 65, 177) : BV:8
179 : ite(166, 63, 178) : BV:8
180 : bvadd(57, 134) : BV:32
181 : eq(180, 61) : BOOL
182 : eq(180, 58) : BOOL
183 : eq(180, 66) : BOOL
184 : eq(180, 69) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : ite(187, 80, 81) : BV:8
189 : ite(186, 77, 188) : BV:8
190 : ite(185, 74, 189) : BV:8
191 : ite(184, 71, 190) : BV:8
192 : ite(183, 68, 191) : BV:8
193 : ite(182, 65, 192) : BV:8
194 : ite(181, 63, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(54, 2, 195) : BV:32
197 : lambda(51, 196) : FUNCTION[BV:32 -> BV:32]
198 : map(50, 197) : MAP[BV:32 -> BV:32]
199 : lambda(17, 198) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
200 : map(16, 199) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
201 : sym_const(200) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1044840451 ] -> 0, [ 1044840452; 1044840452 ] -> 125, [ 1044840453; 1044840453 ] -> 122, [ 1044840454; 1044840454 ] -> 255, [ 1044840455; 1044840455 ] -> 190, [ 1044840456; 2150629377 ] -> 0, [ 2150629378; 2150629378 ] -> 1, [ 2150629379; 2150629379 ] -> 229, [ 2150629380; 3842047999 ] -> 0, [ 3842048000; 3842048000 ] -> 4, [ 3842048001; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 160063779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 160063780; 160063783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 160063784; 2302812351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2302812352; 2302812355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2302812356; 3373052047 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3373052048; 3373052051 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3373052052; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3373052048 { 0xc90cb090 -921915248 -1.9913825e19 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 160063780 { 0x98a6124 +1.8108949e148 } : BV:32
=input.dst.llvm-%n
1 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2302812352 { 0x894220c0 -1992154944 -1.51662445e147 } : BV:32
=input.dst.llvm-%x
1 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 1105788924 { 0x41e8fffc +1.82031202e4 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 276447231 { 0x107a3fff +1.95507800e161 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46301Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda46302Var : BV:32
17 : eq(16, 2) : BOOL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : bvmul(18, 16) : BV:32
21 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
22 : bvadd(19, 20, 21) : BV:32
23 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 229 { 0xe5 -27 } : BV:8
26 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
27 : eq(22, 26) : BOOL
28 : 190 { 0xbe -66 } : BV:8
29 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
33 : eq(22, 32) : BOOL
34 : 125 { 0x7d } : BV:8
35 : eq(22, 21) : BOOL
36 : 4 { 0x4 } : BV:8
37 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
38 : eq(22, 37) : BOOL
39 : 255 { 0xff -1 } : BV:8
40 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
41 : eq(22, 40) : BOOL
42 : 122 { 0x7a } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(33, 34, 46) : BV:8
48 : ite(30, 31, 47) : BV:8
49 : ite(27, 28, 48) : BV:8
50 : ite(24, 25, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 20, 21) : BV:32
53 : eq(52, 23) : BOOL
54 : eq(52, 26) : BOOL
55 : eq(52, 29) : BOOL
56 : eq(52, 32) : BOOL
57 : eq(52, 21) : BOOL
58 : eq(52, 37) : BOOL
59 : eq(52, 40) : BOOL
60 : ite(59, 42, 43) : BV:8
61 : ite(58, 39, 60) : BV:8
62 : ite(57, 36, 61) : BV:8
63 : ite(56, 34, 62) : BV:8
64 : ite(55, 31, 63) : BV:8
65 : ite(54, 28, 64) : BV:8
66 : ite(53, 25, 65) : BV:8
67 : bvadd(7, 20, 21) : BV:32
68 : eq(67, 23) : BOOL
69 : eq(67, 26) : BOOL
70 : eq(67, 29) : BOOL
71 : eq(67, 32) : BOOL
72 : eq(67, 21) : BOOL
73 : eq(67, 37) : BOOL
74 : eq(67, 40) : BOOL
75 : ite(74, 42, 43) : BV:8
76 : ite(73, 39, 75) : BV:8
77 : ite(72, 36, 76) : BV:8
78 : ite(71, 34, 77) : BV:8
79 : ite(70, 31, 78) : BV:8
80 : ite(69, 28, 79) : BV:8
81 : ite(68, 25, 80) : BV:8
82 : bvadd(20, 21) : BV:32
83 : eq(82, 23) : BOOL
84 : eq(82, 26) : BOOL
85 : eq(82, 29) : BOOL
86 : eq(82, 32) : BOOL
87 : eq(82, 21) : BOOL
88 : eq(82, 37) : BOOL
89 : eq(82, 40) : BOOL
90 : ite(89, 42, 43) : BV:8
91 : ite(88, 39, 90) : BV:8
92 : ite(87, 36, 91) : BV:8
93 : ite(86, 34, 92) : BV:8
94 : ite(85, 31, 93) : BV:8
95 : ite(84, 28, 94) : BV:8
96 : ite(83, 25, 95) : BV:8
97 : bvconcat(50, 66, 81, 96) : BV:32
98 : ite(17, 18, 97) : BV:32
99 : lambda(16, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(15, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 276447232 { 0x107a4000 +1.95507812e161 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
2 : unit : UNIT
3 : Lambda46283Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : bvule(3, 4) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1 { 0x1 +1.11e129 } : BV:32
10 : bvule(9, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda46284Var : BV:32
19 : eq(18, 4) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(20, 18) : BV:32
23 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 229 { 0xe5 -27 } : BV:8
28 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
29 : eq(24, 28) : BOOL
30 : 190 { 0xbe -66 } : BV:8
31 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
32 : eq(24, 31) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
35 : eq(24, 34) : BOOL
36 : 125 { 0x7d } : BV:8
37 : eq(24, 23) : BOOL
38 : 4 { 0x4 } : BV:8
39 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
40 : eq(24, 39) : BOOL
41 : 255 { 0xff -1 } : BV:8
42 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
43 : eq(24, 42) : BOOL
44 : 122 { 0x7a } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(35, 36, 48) : BV:8
50 : ite(32, 33, 49) : BV:8
51 : ite(29, 30, 50) : BV:8
52 : ite(26, 27, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 22, 23) : BV:32
55 : eq(54, 25) : BOOL
56 : eq(54, 28) : BOOL
57 : eq(54, 31) : BOOL
58 : eq(54, 34) : BOOL
59 : eq(54, 23) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 36, 64) : BV:8
66 : ite(57, 33, 65) : BV:8
67 : ite(56, 30, 66) : BV:8
68 : ite(55, 27, 67) : BV:8
69 : bvadd(9, 22, 23) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 31) : BOOL
73 : eq(69, 34) : BOOL
74 : eq(69, 23) : BOOL
75 : eq(69, 39) : BOOL
76 : eq(69, 42) : BOOL
77 : ite(76, 44, 45) : BV:8
78 : ite(75, 41, 77) : BV:8
79 : ite(74, 38, 78) : BV:8
80 : ite(73, 36, 79) : BV:8
81 : ite(72, 33, 80) : BV:8
82 : ite(71, 30, 81) : BV:8
83 : ite(70, 27, 82) : BV:8
84 : bvadd(22, 23) : BV:32
85 : eq(84, 25) : BOOL
86 : eq(84, 28) : BOOL
87 : eq(84, 31) : BOOL
88 : eq(84, 34) : BOOL
89 : eq(84, 23) : BOOL
90 : eq(84, 39) : BOOL
91 : eq(84, 42) : BOOL
92 : ite(91, 44, 45) : BV:8
93 : ite(90, 41, 92) : BV:8
94 : ite(89, 38, 93) : BV:8
95 : ite(88, 36, 94) : BV:8
96 : ite(87, 33, 95) : BV:8
97 : ite(86, 30, 96) : BV:8
98 : ite(85, 27, 97) : BV:8
99 : bvconcat(52, 68, 83, 98) : BV:32
100 : ite(19, 20, 99) : BV:32
101 : lambda(18, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(17, 101) : MAP[BV:32 -> BV:32]
103 : sum(1, 2, 102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
104 : sym_const(103) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : and(2, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(1, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(3, 4, 11) : BOOL
13 : ite(12, 5, 1) : BV:32
14 : unit : UNIT
15 : eq(1, 1) : BOOL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : 3 { 0x3 +1.35e129 } : BV:32
18 : bvmul(16, 1) : BV:32
19 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
20 : bvadd(17, 18, 19) : BV:32
21 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
22 : eq(20, 21) : BOOL
23 : 229 { 0xe5 -27 } : BV:8
24 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
25 : eq(20, 24) : BOOL
26 : 190 { 0xbe -66 } : BV:8
27 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
28 : eq(20, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
31 : eq(20, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : eq(20, 19) : BOOL
34 : 4 { 0x4 } : BV:8
35 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
36 : eq(20, 35) : BOOL
37 : 255 { 0xff -1 } : BV:8
38 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
39 : eq(20, 38) : BOOL
40 : 122 { 0x7a } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : ite(25, 26, 46) : BV:8
48 : ite(22, 23, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 18, 19) : BV:32
51 : eq(50, 21) : BOOL
52 : eq(50, 24) : BOOL
53 : eq(50, 27) : BOOL
54 : eq(50, 30) : BOOL
55 : eq(50, 19) : BOOL
56 : eq(50, 35) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 37, 58) : BV:8
60 : ite(55, 34, 59) : BV:8
61 : ite(54, 32, 60) : BV:8
62 : ite(53, 29, 61) : BV:8
63 : ite(52, 26, 62) : BV:8
64 : ite(51, 23, 63) : BV:8
65 : bvadd(5, 18, 19) : BV:32
66 : eq(65, 21) : BOOL
67 : eq(65, 24) : BOOL
68 : eq(65, 27) : BOOL
69 : eq(65, 30) : BOOL
70 : eq(65, 19) : BOOL
71 : eq(65, 35) : BOOL
72 : eq(65, 38) : BOOL
73 : ite(72, 40, 41) : BV:8
74 : ite(71, 37, 73) : BV:8
75 : ite(70, 34, 74) : BV:8
76 : ite(69, 32, 75) : BV:8
77 : ite(68, 29, 76) : BV:8
78 : ite(67, 26, 77) : BV:8
79 : ite(66, 23, 78) : BV:8
80 : bvadd(18, 19) : BV:32
81 : eq(80, 21) : BOOL
82 : eq(80, 24) : BOOL
83 : eq(80, 27) : BOOL
84 : eq(80, 30) : BOOL
85 : eq(80, 19) : BOOL
86 : eq(80, 35) : BOOL
87 : eq(80, 38) : BOOL
88 : ite(87, 40, 41) : BV:8
89 : ite(86, 37, 88) : BV:8
90 : ite(85, 34, 89) : BV:8
91 : ite(84, 32, 90) : BV:8
92 : ite(83, 29, 91) : BV:8
93 : ite(82, 26, 92) : BV:8
94 : ite(81, 23, 93) : BV:8
95 : bvconcat(48, 64, 79, 94) : BV:32
96 : ite(15, 16, 95) : BV:32
97 : sum(13, 14, 96) : SUM[UNIT,BV:32]
98 : sym_const(97) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1586101966 { 0x5e89fece +1.7808852e62 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46306Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda46307Var : BV:32
17 : eq(16, 2) : BOOL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : bvmul(18, 16) : BV:32
21 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
22 : bvadd(19, 20, 21) : BV:32
23 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 229 { 0xe5 -27 } : BV:8
26 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
27 : eq(22, 26) : BOOL
28 : 190 { 0xbe -66 } : BV:8
29 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
33 : eq(22, 32) : BOOL
34 : 125 { 0x7d } : BV:8
35 : eq(22, 21) : BOOL
36 : 4 { 0x4 } : BV:8
37 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
38 : eq(22, 37) : BOOL
39 : 255 { 0xff -1 } : BV:8
40 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
41 : eq(22, 40) : BOOL
42 : 122 { 0x7a } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(33, 34, 46) : BV:8
48 : ite(30, 31, 47) : BV:8
49 : ite(27, 28, 48) : BV:8
50 : ite(24, 25, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 20, 21) : BV:32
53 : eq(52, 23) : BOOL
54 : eq(52, 26) : BOOL
55 : eq(52, 29) : BOOL
56 : eq(52, 32) : BOOL
57 : eq(52, 21) : BOOL
58 : eq(52, 37) : BOOL
59 : eq(52, 40) : BOOL
60 : ite(59, 42, 43) : BV:8
61 : ite(58, 39, 60) : BV:8
62 : ite(57, 36, 61) : BV:8
63 : ite(56, 34, 62) : BV:8
64 : ite(55, 31, 63) : BV:8
65 : ite(54, 28, 64) : BV:8
66 : ite(53, 25, 65) : BV:8
67 : bvadd(7, 20, 21) : BV:32
68 : eq(67, 23) : BOOL
69 : eq(67, 26) : BOOL
70 : eq(67, 29) : BOOL
71 : eq(67, 32) : BOOL
72 : eq(67, 21) : BOOL
73 : eq(67, 37) : BOOL
74 : eq(67, 40) : BOOL
75 : ite(74, 42, 43) : BV:8
76 : ite(73, 39, 75) : BV:8
77 : ite(72, 36, 76) : BV:8
78 : ite(71, 34, 77) : BV:8
79 : ite(70, 31, 78) : BV:8
80 : ite(69, 28, 79) : BV:8
81 : ite(68, 25, 80) : BV:8
82 : bvadd(20, 21) : BV:32
83 : eq(82, 23) : BOOL
84 : eq(82, 26) : BOOL
85 : eq(82, 29) : BOOL
86 : eq(82, 32) : BOOL
87 : eq(82, 21) : BOOL
88 : eq(82, 37) : BOOL
89 : eq(82, 40) : BOOL
90 : ite(89, 42, 43) : BV:8
91 : ite(88, 39, 90) : BV:8
92 : ite(87, 36, 91) : BV:8
93 : ite(86, 34, 92) : BV:8
94 : ite(85, 31, 93) : BV:8
95 : ite(84, 28, 94) : BV:8
96 : ite(83, 25, 95) : BV:8
97 : bvconcat(50, 66, 81, 96) : BV:32
98 : ite(17, 18, 97) : BV:32
99 : lambda(16, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(15, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 276447231 { 0x107a3fff +1.95507800e161 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1310539343 { 0x4e1d3e4f +1.22846400e29 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 2150629376 { 0x80300000 -2144337920 -1.37500000e129 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 1105788924 { 0x41e8fffc +1.82031202e4 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 160063780 { 0x98a6124 +1.8108949e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 160063783 { 0x98a6127 +1.8108985e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2302812352 { 0x894220c0 -1992154944 -1.51662445e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2302812355 { 0x894220c3 -1992154941 -1.51662480e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3373052048 { 0xc90cb090 -921915248 -1.9913825e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3373052051 { 0xc90cb093 -921915245 -1.9913861e19 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46166Var : BV:32
2 : Lambda46167Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
54 : eq(52, 53) : BOOL
55 : 229 { 0xe5 -27 } : BV:8
56 : eq(52, 50) : BOOL
57 : 190 { 0xbe -66 } : BV:8
58 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
62 : eq(52, 61) : BOOL
63 : 125 { 0x7d } : BV:8
64 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
65 : eq(52, 64) : BOOL
66 : 4 { 0x4 } : BV:8
67 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
68 : eq(52, 67) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
71 : eq(52, 70) : BOOL
72 : 122 { 0x7a } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(65, 66, 75) : BV:8
77 : ite(62, 63, 76) : BV:8
78 : ite(59, 60, 77) : BV:8
79 : ite(56, 57, 78) : BV:8
80 : ite(54, 55, 79) : BV:8
81 : bvadd(67, 51) : BV:32
82 : eq(81, 53) : BOOL
83 : eq(81, 50) : BOOL
84 : eq(81, 58) : BOOL
85 : eq(81, 61) : BOOL
86 : eq(81, 64) : BOOL
87 : eq(81, 67) : BOOL
88 : eq(81, 70) : BOOL
89 : ite(88, 72, 73) : BV:8
90 : ite(87, 69, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 63, 91) : BV:8
93 : ite(84, 60, 92) : BV:8
94 : ite(83, 57, 93) : BV:8
95 : ite(82, 55, 94) : BV:8
96 : bvadd(70, 51) : BV:32
97 : eq(96, 53) : BOOL
98 : eq(96, 50) : BOOL
99 : eq(96, 58) : BOOL
100 : eq(96, 61) : BOOL
101 : eq(96, 64) : BOOL
102 : eq(96, 67) : BOOL
103 : eq(96, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 66, 105) : BV:8
107 : ite(100, 63, 106) : BV:8
108 : ite(99, 60, 107) : BV:8
109 : ite(98, 57, 108) : BV:8
110 : ite(97, 55, 109) : BV:8
111 : bvadd(61, 51) : BV:32
112 : eq(111, 53) : BOOL
113 : eq(111, 50) : BOOL
114 : eq(111, 58) : BOOL
115 : eq(111, 61) : BOOL
116 : eq(111, 64) : BOOL
117 : eq(111, 67) : BOOL
118 : eq(111, 70) : BOOL
119 : ite(118, 72, 73) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 60, 122) : BV:8
124 : ite(113, 57, 123) : BV:8
125 : ite(112, 55, 124) : BV:8
126 : bvconcat(80, 95, 110, 125) : BV:32
127 : bvadd(47, 49, 126) : BV:32
128 : eq(127, 53) : BOOL
129 : eq(127, 50) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : ite(134, 72, 73) : BV:8
136 : ite(133, 69, 135) : BV:8
137 : ite(132, 66, 136) : BV:8
138 : ite(131, 63, 137) : BV:8
139 : ite(130, 60, 138) : BV:8
140 : ite(129, 57, 139) : BV:8
141 : ite(128, 55, 140) : BV:8
142 : bvadd(36, 49, 126) : BV:32
143 : eq(142, 53) : BOOL
144 : eq(142, 50) : BOOL
145 : eq(142, 58) : BOOL
146 : eq(142, 61) : BOOL
147 : eq(142, 64) : BOOL
148 : eq(142, 67) : BOOL
149 : eq(142, 70) : BOOL
150 : ite(149, 72, 73) : BV:8
151 : ite(148, 69, 150) : BV:8
152 : ite(147, 66, 151) : BV:8
153 : ite(146, 63, 152) : BV:8
154 : ite(145, 60, 153) : BV:8
155 : ite(144, 57, 154) : BV:8
156 : ite(143, 55, 155) : BV:8
157 : bvadd(32, 49, 126) : BV:32
158 : eq(157, 53) : BOOL
159 : eq(157, 50) : BOOL
160 : eq(157, 58) : BOOL
161 : eq(157, 61) : BOOL
162 : eq(157, 64) : BOOL
163 : eq(157, 67) : BOOL
164 : eq(157, 70) : BOOL
165 : ite(164, 72, 73) : BV:8
166 : ite(163, 69, 165) : BV:8
167 : ite(162, 66, 166) : BV:8
168 : ite(161, 63, 167) : BV:8
169 : ite(160, 60, 168) : BV:8
170 : ite(159, 57, 169) : BV:8
171 : ite(158, 55, 170) : BV:8
172 : bvadd(49, 126) : BV:32
173 : eq(172, 53) : BOOL
174 : eq(172, 50) : BOOL
175 : eq(172, 58) : BOOL
176 : eq(172, 61) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : ite(179, 72, 73) : BV:8
181 : ite(178, 69, 180) : BV:8
182 : ite(177, 66, 181) : BV:8
183 : ite(176, 63, 182) : BV:8
184 : ite(175, 60, 183) : BV:8
185 : ite(174, 57, 184) : BV:8
186 : ite(173, 55, 185) : BV:8
187 : bvconcat(141, 156, 171, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : ite(46, 187, 188) : BV:32
190 : ite(6, 3, 189) : BV:32
191 : lambda(1, 2, 190) : FUNCTION[BV:32,BV:32 -> BV:32]
192 : sym_const(191) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46171Var : BV:32
2 : Lambda46172Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 542932887 ] -> true, [ 542932888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 542932887 ] -> true, [ 542932888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46180Var : BV:32
2 : Lambda46181Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46176Var : BV:32
2 : Lambda46177Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 229 { 0xe5 -27 } : BV:8
16 : eq(12, 10) : BOOL
17 : 190 { 0xbe -66 } : BV:8
18 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
22 : eq(12, 21) : BOOL
23 : 125 { 0x7d } : BV:8
24 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
25 : eq(12, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
28 : eq(12, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
31 : eq(12, 30) : BOOL
32 : 122 { 0x7a } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 15, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 15, 69) : BV:8
71 : bvadd(21, 11) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 10) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 15, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 13) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 15, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 13) : BOOL
105 : eq(103, 10) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 15, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 10) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 15, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 15, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46187Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46188Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46195Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3799895050
=counter_example_end
=global nodece 51 num_edges_traversed 1
=global nodece 51 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 52
=global nodece 52 nodece z3.ce4164.num_edges_traversed3
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3.ce4164 64aab8cd4b4e8ce0f9eb741e5943b3fe
=input.spec-%var-x-1
1 : Lambda46274Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46275Var : BV:32
18 : Lambda46276Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46277Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
81 : eq(79, 80) : BOOL
82 : 229 { 0xe5 -27 } : BV:8
83 : eq(79, 77) : BOOL
84 : 190 { 0xbe -66 } : BV:8
85 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
89 : eq(79, 88) : BOOL
90 : 125 { 0x7d } : BV:8
91 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
92 : eq(79, 91) : BOOL
93 : 4 { 0x4 } : BV:8
94 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
95 : eq(79, 94) : BOOL
96 : 255 { 0xff -1 } : BV:8
97 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
98 : eq(79, 97) : BOOL
99 : 122 { 0x7a } : BV:8
100 : 0 { 0x0 } : BV:8
101 : ite(98, 99, 100) : BV:8
102 : ite(95, 96, 101) : BV:8
103 : ite(92, 93, 102) : BV:8
104 : ite(89, 90, 103) : BV:8
105 : ite(86, 87, 104) : BV:8
106 : ite(83, 84, 105) : BV:8
107 : ite(81, 82, 106) : BV:8
108 : bvadd(94, 78) : BV:32
109 : eq(108, 80) : BOOL
110 : eq(108, 77) : BOOL
111 : eq(108, 85) : BOOL
112 : eq(108, 88) : BOOL
113 : eq(108, 91) : BOOL
114 : eq(108, 94) : BOOL
115 : eq(108, 97) : BOOL
116 : ite(115, 99, 100) : BV:8
117 : ite(114, 96, 116) : BV:8
118 : ite(113, 93, 117) : BV:8
119 : ite(112, 90, 118) : BV:8
120 : ite(111, 87, 119) : BV:8
121 : ite(110, 84, 120) : BV:8
122 : ite(109, 82, 121) : BV:8
123 : bvadd(97, 78) : BV:32
124 : eq(123, 80) : BOOL
125 : eq(123, 77) : BOOL
126 : eq(123, 85) : BOOL
127 : eq(123, 88) : BOOL
128 : eq(123, 91) : BOOL
129 : eq(123, 94) : BOOL
130 : eq(123, 97) : BOOL
131 : ite(130, 99, 100) : BV:8
132 : ite(129, 96, 131) : BV:8
133 : ite(128, 93, 132) : BV:8
134 : ite(127, 90, 133) : BV:8
135 : ite(126, 87, 134) : BV:8
136 : ite(125, 84, 135) : BV:8
137 : ite(124, 82, 136) : BV:8
138 : bvadd(88, 78) : BV:32
139 : eq(138, 80) : BOOL
140 : eq(138, 77) : BOOL
141 : eq(138, 85) : BOOL
142 : eq(138, 88) : BOOL
143 : eq(138, 91) : BOOL
144 : eq(138, 94) : BOOL
145 : eq(138, 97) : BOOL
146 : ite(145, 99, 100) : BV:8
147 : ite(144, 96, 146) : BV:8
148 : ite(143, 93, 147) : BV:8
149 : ite(142, 90, 148) : BV:8
150 : ite(141, 87, 149) : BV:8
151 : ite(140, 84, 150) : BV:8
152 : ite(139, 82, 151) : BV:8
153 : bvconcat(107, 122, 137, 152) : BV:32
154 : bvadd(74, 76, 153) : BV:32
155 : eq(154, 80) : BOOL
156 : eq(154, 77) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : ite(161, 99, 100) : BV:8
163 : ite(160, 96, 162) : BV:8
164 : ite(159, 93, 163) : BV:8
165 : ite(158, 90, 164) : BV:8
166 : ite(157, 87, 165) : BV:8
167 : ite(156, 84, 166) : BV:8
168 : ite(155, 82, 167) : BV:8
169 : bvadd(40, 76, 153) : BV:32
170 : eq(169, 80) : BOOL
171 : eq(169, 77) : BOOL
172 : eq(169, 85) : BOOL
173 : eq(169, 88) : BOOL
174 : eq(169, 91) : BOOL
175 : eq(169, 94) : BOOL
176 : eq(169, 97) : BOOL
177 : ite(176, 99, 100) : BV:8
178 : ite(175, 96, 177) : BV:8
179 : ite(174, 93, 178) : BV:8
180 : ite(173, 90, 179) : BV:8
181 : ite(172, 87, 180) : BV:8
182 : ite(171, 84, 181) : BV:8
183 : ite(170, 82, 182) : BV:8
184 : bvadd(36, 76, 153) : BV:32
185 : eq(184, 80) : BOOL
186 : eq(184, 77) : BOOL
187 : eq(184, 85) : BOOL
188 : eq(184, 88) : BOOL
189 : eq(184, 91) : BOOL
190 : eq(184, 94) : BOOL
191 : eq(184, 97) : BOOL
192 : ite(191, 99, 100) : BV:8
193 : ite(190, 96, 192) : BV:8
194 : ite(189, 93, 193) : BV:8
195 : ite(188, 90, 194) : BV:8
196 : ite(187, 87, 195) : BV:8
197 : ite(186, 84, 196) : BV:8
198 : ite(185, 82, 197) : BV:8
199 : bvadd(76, 153) : BV:32
200 : eq(199, 80) : BOOL
201 : eq(199, 77) : BOOL
202 : eq(199, 85) : BOOL
203 : eq(199, 88) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : ite(206, 99, 100) : BV:8
208 : ite(205, 96, 207) : BV:8
209 : ite(204, 93, 208) : BV:8
210 : ite(203, 90, 209) : BV:8
211 : ite(202, 87, 210) : BV:8
212 : ite(201, 84, 211) : BV:8
213 : ite(200, 82, 212) : BV:8
214 : bvconcat(168, 183, 198, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : ite(73, 214, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : lambda(51, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(50, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46294Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46295Var : BV:32
18 : Lambda46296Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46297Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 229 { 0xe5 -27 } : BV:8
64 : eq(60, 58) : BOOL
65 : 190 { 0xbe -66 } : BV:8
66 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
70 : eq(60, 69) : BOOL
71 : 125 { 0x7d } : BV:8
72 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
73 : eq(60, 72) : BOOL
74 : 4 { 0x4 } : BV:8
75 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
76 : eq(60, 75) : BOOL
77 : 255 { 0xff -1 } : BV:8
78 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
79 : eq(60, 78) : BOOL
80 : 122 { 0x7a } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(62, 63, 87) : BV:8
89 : bvadd(75, 59) : BV:32
90 : eq(89, 61) : BOOL
91 : eq(89, 58) : BOOL
92 : eq(89, 66) : BOOL
93 : eq(89, 69) : BOOL
94 : eq(89, 72) : BOOL
95 : eq(89, 75) : BOOL
96 : eq(89, 78) : BOOL
97 : ite(96, 80, 81) : BV:8
98 : ite(95, 77, 97) : BV:8
99 : ite(94, 74, 98) : BV:8
100 : ite(93, 71, 99) : BV:8
101 : ite(92, 68, 100) : BV:8
102 : ite(91, 65, 101) : BV:8
103 : ite(90, 63, 102) : BV:8
104 : bvadd(78, 59) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 58) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 72) : BOOL
110 : eq(104, 75) : BOOL
111 : eq(104, 78) : BOOL
112 : ite(111, 80, 81) : BV:8
113 : ite(110, 77, 112) : BV:8
114 : ite(109, 74, 113) : BV:8
115 : ite(108, 71, 114) : BV:8
116 : ite(107, 68, 115) : BV:8
117 : ite(106, 65, 116) : BV:8
118 : ite(105, 63, 117) : BV:8
119 : bvadd(69, 59) : BV:32
120 : eq(119, 61) : BOOL
121 : eq(119, 58) : BOOL
122 : eq(119, 66) : BOOL
123 : eq(119, 69) : BOOL
124 : eq(119, 72) : BOOL
125 : eq(119, 75) : BOOL
126 : eq(119, 78) : BOOL
127 : ite(126, 80, 81) : BV:8
128 : ite(125, 77, 127) : BV:8
129 : ite(124, 74, 128) : BV:8
130 : ite(123, 71, 129) : BV:8
131 : ite(122, 68, 130) : BV:8
132 : ite(121, 65, 131) : BV:8
133 : ite(120, 63, 132) : BV:8
134 : bvconcat(88, 103, 118, 133) : BV:32
135 : bvadd(55, 57, 134) : BV:32
136 : eq(135, 61) : BOOL
137 : eq(135, 58) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : ite(142, 80, 81) : BV:8
144 : ite(141, 77, 143) : BV:8
145 : ite(140, 74, 144) : BV:8
146 : ite(139, 71, 145) : BV:8
147 : ite(138, 68, 146) : BV:8
148 : ite(137, 65, 147) : BV:8
149 : ite(136, 63, 148) : BV:8
150 : bvadd(40, 57, 134) : BV:32
151 : eq(150, 61) : BOOL
152 : eq(150, 58) : BOOL
153 : eq(150, 66) : BOOL
154 : eq(150, 69) : BOOL
155 : eq(150, 72) : BOOL
156 : eq(150, 75) : BOOL
157 : eq(150, 78) : BOOL
158 : ite(157, 80, 81) : BV:8
159 : ite(156, 77, 158) : BV:8
160 : ite(155, 74, 159) : BV:8
161 : ite(154, 71, 160) : BV:8
162 : ite(153, 68, 161) : BV:8
163 : ite(152, 65, 162) : BV:8
164 : ite(151, 63, 163) : BV:8
165 : bvadd(36, 57, 134) : BV:32
166 : eq(165, 61) : BOOL
167 : eq(165, 58) : BOOL
168 : eq(165, 66) : BOOL
169 : eq(165, 69) : BOOL
170 : eq(165, 72) : BOOL
171 : eq(165, 75) : BOOL
172 : eq(165, 78) : BOOL
173 : ite(172, 80, 81) : BV:8
174 : ite(171, 77, 173) : BV:8
175 : ite(170, 74, 174) : BV:8
176 : ite(169, 71, 175) : BV:8
177 : ite(168, 68, 176) : BV:8
178 : ite(167, 65, 177) : BV:8
179 : ite(166, 63, 178) : BV:8
180 : bvadd(57, 134) : BV:32
181 : eq(180, 61) : BOOL
182 : eq(180, 58) : BOOL
183 : eq(180, 66) : BOOL
184 : eq(180, 69) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : ite(187, 80, 81) : BV:8
189 : ite(186, 77, 188) : BV:8
190 : ite(185, 74, 189) : BV:8
191 : ite(184, 71, 190) : BV:8
192 : ite(183, 68, 191) : BV:8
193 : ite(182, 65, 192) : BV:8
194 : ite(181, 63, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(54, 2, 195) : BV:32
197 : lambda(51, 196) : FUNCTION[BV:32 -> BV:32]
198 : map(50, 197) : MAP[BV:32 -> BV:32]
199 : lambda(17, 198) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
200 : map(16, 199) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
201 : sym_const(200) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1044840451 ] -> 0, [ 1044840452; 1044840452 ] -> 125, [ 1044840453; 1044840453 ] -> 122, [ 1044840454; 1044840454 ] -> 255, [ 1044840455; 1044840455 ] -> 190, [ 1044840456; 2150629377 ] -> 0, [ 2150629378; 2150629378 ] -> 1, [ 2150629379; 2150629379 ] -> 229, [ 2150629380; 3842047999 ] -> 0, [ 3842048000; 3842048000 ] -> 4, [ 3842048001; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 160063779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 160063780; 160063783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 160063784; 2302812351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2302812352; 2302812355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2302812356; 3373052047 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3373052048; 3373052051 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3373052052; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3373052048 { 0xc90cb090 -921915248 -1.9913825e19 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 160063780 { 0x98a6124 +1.8108949e148 } : BV:32
=input.dst.llvm-%n
1 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2302812352 { 0x894220c0 -1992154944 -1.51662445e147 } : BV:32
=input.dst.llvm-%x
1 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 276447232 { 0x107a4000 +1.95507812e161 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1964439985 { 0x7516f9b1 +1.17949497e107 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46507Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 276447232 { 0x107a4000 +1.95507812e161 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : bvule(1, 2) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda46508Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 229 { 0xe5 -27 } : BV:8
54 : eq(50, 48) : BOOL
55 : 190 { 0xbe -66 } : BV:8
56 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
57 : eq(50, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
60 : eq(50, 59) : BOOL
61 : 125 { 0x7d } : BV:8
62 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
63 : eq(50, 62) : BOOL
64 : 4 { 0x4 } : BV:8
65 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
66 : eq(50, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
69 : eq(50, 68) : BOOL
70 : 122 { 0x7a } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(57, 58, 75) : BV:8
77 : ite(54, 55, 76) : BV:8
78 : ite(52, 53, 77) : BV:8
79 : bvadd(65, 49) : BV:32
80 : eq(79, 51) : BOOL
81 : eq(79, 48) : BOOL
82 : eq(79, 56) : BOOL
83 : eq(79, 59) : BOOL
84 : eq(79, 62) : BOOL
85 : eq(79, 65) : BOOL
86 : eq(79, 68) : BOOL
87 : ite(86, 70, 71) : BV:8
88 : ite(85, 67, 87) : BV:8
89 : ite(84, 64, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : ite(82, 58, 90) : BV:8
92 : ite(81, 55, 91) : BV:8
93 : ite(80, 53, 92) : BV:8
94 : bvadd(68, 49) : BV:32
95 : eq(94, 51) : BOOL
96 : eq(94, 48) : BOOL
97 : eq(94, 56) : BOOL
98 : eq(94, 59) : BOOL
99 : eq(94, 62) : BOOL
100 : eq(94, 65) : BOOL
101 : eq(94, 68) : BOOL
102 : ite(101, 70, 71) : BV:8
103 : ite(100, 67, 102) : BV:8
104 : ite(99, 64, 103) : BV:8
105 : ite(98, 61, 104) : BV:8
106 : ite(97, 58, 105) : BV:8
107 : ite(96, 55, 106) : BV:8
108 : ite(95, 53, 107) : BV:8
109 : bvadd(59, 49) : BV:32
110 : eq(109, 51) : BOOL
111 : eq(109, 48) : BOOL
112 : eq(109, 56) : BOOL
113 : eq(109, 59) : BOOL
114 : eq(109, 62) : BOOL
115 : eq(109, 65) : BOOL
116 : eq(109, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 61, 119) : BV:8
121 : ite(112, 58, 120) : BV:8
122 : ite(111, 55, 121) : BV:8
123 : ite(110, 53, 122) : BV:8
124 : bvconcat(78, 93, 108, 123) : BV:32
125 : bvadd(45, 47, 124) : BV:32
126 : eq(125, 51) : BOOL
127 : eq(125, 48) : BOOL
128 : eq(125, 56) : BOOL
129 : eq(125, 59) : BOOL
130 : eq(125, 62) : BOOL
131 : eq(125, 65) : BOOL
132 : eq(125, 68) : BOOL
133 : ite(132, 70, 71) : BV:8
134 : ite(131, 67, 133) : BV:8
135 : ite(130, 64, 134) : BV:8
136 : ite(129, 61, 135) : BV:8
137 : ite(128, 58, 136) : BV:8
138 : ite(127, 55, 137) : BV:8
139 : ite(126, 53, 138) : BV:8
140 : bvadd(28, 47, 124) : BV:32
141 : eq(140, 51) : BOOL
142 : eq(140, 48) : BOOL
143 : eq(140, 56) : BOOL
144 : eq(140, 59) : BOOL
145 : eq(140, 62) : BOOL
146 : eq(140, 65) : BOOL
147 : eq(140, 68) : BOOL
148 : ite(147, 70, 71) : BV:8
149 : ite(146, 67, 148) : BV:8
150 : ite(145, 64, 149) : BV:8
151 : ite(144, 61, 150) : BV:8
152 : ite(143, 58, 151) : BV:8
153 : ite(142, 55, 152) : BV:8
154 : ite(141, 53, 153) : BV:8
155 : bvadd(24, 47, 124) : BV:32
156 : eq(155, 51) : BOOL
157 : eq(155, 48) : BOOL
158 : eq(155, 56) : BOOL
159 : eq(155, 59) : BOOL
160 : eq(155, 62) : BOOL
161 : eq(155, 65) : BOOL
162 : eq(155, 68) : BOOL
163 : ite(162, 70, 71) : BV:8
164 : ite(161, 67, 163) : BV:8
165 : ite(160, 64, 164) : BV:8
166 : ite(159, 61, 165) : BV:8
167 : ite(158, 58, 166) : BV:8
168 : ite(157, 55, 167) : BV:8
169 : ite(156, 53, 168) : BV:8
170 : bvadd(47, 124) : BV:32
171 : eq(170, 51) : BOOL
172 : eq(170, 48) : BOOL
173 : eq(170, 56) : BOOL
174 : eq(170, 59) : BOOL
175 : eq(170, 62) : BOOL
176 : eq(170, 65) : BOOL
177 : eq(170, 68) : BOOL
178 : ite(177, 70, 71) : BV:8
179 : ite(176, 67, 178) : BV:8
180 : ite(175, 64, 179) : BV:8
181 : ite(174, 61, 180) : BV:8
182 : ite(173, 58, 181) : BV:8
183 : ite(172, 55, 182) : BV:8
184 : ite(171, 53, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(44, 2, 185) : BV:32
187 : lambda(41, 186) : FUNCTION[BV:32 -> BV:32]
188 : map(40, 187) : MAP[BV:32 -> BV:32]
189 : sym_const(188) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 276447233 { 0x107a4001 +1.95507824e161 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 276447232 { 0x107a4000 +1.95507812e161 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda46497Var : BV:32
20 : bvule(2, 8) : BOOL
21 : and(9, 20) : BOOL
22 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
23 : bvule(22, 2) : BOOL
24 : and(23, 11) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 8, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : bvule(19, 1) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(16, 19) : BOOL
33 : bvule(19, 16) : BOOL
34 : and(32, 33) : BOOL
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvule(35, 19) : BOOL
37 : bvule(19, 10) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 16, 39) : BV:32
41 : ite(31, 1, 40) : BV:32
42 : eq(41, 1) : BOOL
43 : and(28, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(19, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda46498Var : BV:32
47 : eq(2, 1) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
54 : bvmul(51, 2) : BV:32
55 : bvadd(53, 54) : BV:32
56 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
57 : eq(55, 56) : BOOL
58 : 229 { 0xe5 -27 } : BV:8
59 : eq(55, 53) : BOOL
60 : 190 { 0xbe -66 } : BV:8
61 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
62 : eq(55, 61) : BOOL
63 : 1 { 0x1 } : BV:8
64 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
65 : eq(55, 64) : BOOL
66 : 125 { 0x7d } : BV:8
67 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
68 : eq(55, 67) : BOOL
69 : 4 { 0x4 } : BV:8
70 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
71 : eq(55, 70) : BOOL
72 : 255 { 0xff -1 } : BV:8
73 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
74 : eq(55, 73) : BOOL
75 : 122 { 0x7a } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : ite(59, 60, 81) : BV:8
83 : ite(57, 58, 82) : BV:8
84 : bvadd(70, 54) : BV:32
85 : eq(84, 56) : BOOL
86 : eq(84, 53) : BOOL
87 : eq(84, 61) : BOOL
88 : eq(84, 64) : BOOL
89 : eq(84, 67) : BOOL
90 : eq(84, 70) : BOOL
91 : eq(84, 73) : BOOL
92 : ite(91, 75, 76) : BV:8
93 : ite(90, 72, 92) : BV:8
94 : ite(89, 69, 93) : BV:8
95 : ite(88, 66, 94) : BV:8
96 : ite(87, 63, 95) : BV:8
97 : ite(86, 60, 96) : BV:8
98 : ite(85, 58, 97) : BV:8
99 : bvadd(73, 54) : BV:32
100 : eq(99, 56) : BOOL
101 : eq(99, 53) : BOOL
102 : eq(99, 61) : BOOL
103 : eq(99, 64) : BOOL
104 : eq(99, 67) : BOOL
105 : eq(99, 70) : BOOL
106 : eq(99, 73) : BOOL
107 : ite(106, 75, 76) : BV:8
108 : ite(105, 72, 107) : BV:8
109 : ite(104, 69, 108) : BV:8
110 : ite(103, 66, 109) : BV:8
111 : ite(102, 63, 110) : BV:8
112 : ite(101, 60, 111) : BV:8
113 : ite(100, 58, 112) : BV:8
114 : bvadd(64, 54) : BV:32
115 : eq(114, 56) : BOOL
116 : eq(114, 53) : BOOL
117 : eq(114, 61) : BOOL
118 : eq(114, 64) : BOOL
119 : eq(114, 67) : BOOL
120 : eq(114, 70) : BOOL
121 : eq(114, 73) : BOOL
122 : ite(121, 75, 76) : BV:8
123 : ite(120, 72, 122) : BV:8
124 : ite(119, 69, 123) : BV:8
125 : ite(118, 66, 124) : BV:8
126 : ite(117, 63, 125) : BV:8
127 : ite(116, 60, 126) : BV:8
128 : ite(115, 58, 127) : BV:8
129 : bvconcat(83, 98, 113, 128) : BV:32
130 : bvadd(50, 52, 129) : BV:32
131 : eq(130, 56) : BOOL
132 : eq(130, 53) : BOOL
133 : eq(130, 61) : BOOL
134 : eq(130, 64) : BOOL
135 : eq(130, 67) : BOOL
136 : eq(130, 70) : BOOL
137 : eq(130, 73) : BOOL
138 : ite(137, 75, 76) : BV:8
139 : ite(136, 72, 138) : BV:8
140 : ite(135, 69, 139) : BV:8
141 : ite(134, 66, 140) : BV:8
142 : ite(133, 63, 141) : BV:8
143 : ite(132, 60, 142) : BV:8
144 : ite(131, 58, 143) : BV:8
145 : bvadd(35, 52, 129) : BV:32
146 : eq(145, 56) : BOOL
147 : eq(145, 53) : BOOL
148 : eq(145, 61) : BOOL
149 : eq(145, 64) : BOOL
150 : eq(145, 67) : BOOL
151 : eq(145, 70) : BOOL
152 : eq(145, 73) : BOOL
153 : ite(152, 75, 76) : BV:8
154 : ite(151, 72, 153) : BV:8
155 : ite(150, 69, 154) : BV:8
156 : ite(149, 66, 155) : BV:8
157 : ite(148, 63, 156) : BV:8
158 : ite(147, 60, 157) : BV:8
159 : ite(146, 58, 158) : BV:8
160 : bvadd(16, 52, 129) : BV:32
161 : eq(160, 56) : BOOL
162 : eq(160, 53) : BOOL
163 : eq(160, 61) : BOOL
164 : eq(160, 64) : BOOL
165 : eq(160, 67) : BOOL
166 : eq(160, 70) : BOOL
167 : eq(160, 73) : BOOL
168 : ite(167, 75, 76) : BV:8
169 : ite(166, 72, 168) : BV:8
170 : ite(165, 69, 169) : BV:8
171 : ite(164, 66, 170) : BV:8
172 : ite(163, 63, 171) : BV:8
173 : ite(162, 60, 172) : BV:8
174 : ite(161, 58, 173) : BV:8
175 : bvadd(52, 129) : BV:32
176 : eq(175, 56) : BOOL
177 : eq(175, 53) : BOOL
178 : eq(175, 61) : BOOL
179 : eq(175, 64) : BOOL
180 : eq(175, 67) : BOOL
181 : eq(175, 70) : BOOL
182 : eq(175, 73) : BOOL
183 : ite(182, 75, 76) : BV:8
184 : ite(181, 72, 183) : BV:8
185 : ite(180, 69, 184) : BV:8
186 : ite(179, 66, 185) : BV:8
187 : ite(178, 63, 186) : BV:8
188 : ite(177, 60, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : bvconcat(144, 159, 174, 189) : BV:32
191 : ite(49, 1, 190) : BV:32
192 : lambda(46, 191) : FUNCTION[BV:32 -> BV:32]
193 : map(45, 192) : MAP[BV:32 -> BV:32]
194 : sum(17, 18, 193) : SUM[UNIT,MAP[BV:32 -> BV:32]]
195 : sym_const(194) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46513Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 276447232 { 0x107a4000 +1.95507812e161 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : bvule(1, 2) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda46514Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 229 { 0xe5 -27 } : BV:8
54 : eq(50, 48) : BOOL
55 : 190 { 0xbe -66 } : BV:8
56 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
57 : eq(50, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
60 : eq(50, 59) : BOOL
61 : 125 { 0x7d } : BV:8
62 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
63 : eq(50, 62) : BOOL
64 : 4 { 0x4 } : BV:8
65 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
66 : eq(50, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
69 : eq(50, 68) : BOOL
70 : 122 { 0x7a } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(57, 58, 75) : BV:8
77 : ite(54, 55, 76) : BV:8
78 : ite(52, 53, 77) : BV:8
79 : bvadd(65, 49) : BV:32
80 : eq(79, 51) : BOOL
81 : eq(79, 48) : BOOL
82 : eq(79, 56) : BOOL
83 : eq(79, 59) : BOOL
84 : eq(79, 62) : BOOL
85 : eq(79, 65) : BOOL
86 : eq(79, 68) : BOOL
87 : ite(86, 70, 71) : BV:8
88 : ite(85, 67, 87) : BV:8
89 : ite(84, 64, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : ite(82, 58, 90) : BV:8
92 : ite(81, 55, 91) : BV:8
93 : ite(80, 53, 92) : BV:8
94 : bvadd(68, 49) : BV:32
95 : eq(94, 51) : BOOL
96 : eq(94, 48) : BOOL
97 : eq(94, 56) : BOOL
98 : eq(94, 59) : BOOL
99 : eq(94, 62) : BOOL
100 : eq(94, 65) : BOOL
101 : eq(94, 68) : BOOL
102 : ite(101, 70, 71) : BV:8
103 : ite(100, 67, 102) : BV:8
104 : ite(99, 64, 103) : BV:8
105 : ite(98, 61, 104) : BV:8
106 : ite(97, 58, 105) : BV:8
107 : ite(96, 55, 106) : BV:8
108 : ite(95, 53, 107) : BV:8
109 : bvadd(59, 49) : BV:32
110 : eq(109, 51) : BOOL
111 : eq(109, 48) : BOOL
112 : eq(109, 56) : BOOL
113 : eq(109, 59) : BOOL
114 : eq(109, 62) : BOOL
115 : eq(109, 65) : BOOL
116 : eq(109, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 61, 119) : BV:8
121 : ite(112, 58, 120) : BV:8
122 : ite(111, 55, 121) : BV:8
123 : ite(110, 53, 122) : BV:8
124 : bvconcat(78, 93, 108, 123) : BV:32
125 : bvadd(45, 47, 124) : BV:32
126 : eq(125, 51) : BOOL
127 : eq(125, 48) : BOOL
128 : eq(125, 56) : BOOL
129 : eq(125, 59) : BOOL
130 : eq(125, 62) : BOOL
131 : eq(125, 65) : BOOL
132 : eq(125, 68) : BOOL
133 : ite(132, 70, 71) : BV:8
134 : ite(131, 67, 133) : BV:8
135 : ite(130, 64, 134) : BV:8
136 : ite(129, 61, 135) : BV:8
137 : ite(128, 58, 136) : BV:8
138 : ite(127, 55, 137) : BV:8
139 : ite(126, 53, 138) : BV:8
140 : bvadd(28, 47, 124) : BV:32
141 : eq(140, 51) : BOOL
142 : eq(140, 48) : BOOL
143 : eq(140, 56) : BOOL
144 : eq(140, 59) : BOOL
145 : eq(140, 62) : BOOL
146 : eq(140, 65) : BOOL
147 : eq(140, 68) : BOOL
148 : ite(147, 70, 71) : BV:8
149 : ite(146, 67, 148) : BV:8
150 : ite(145, 64, 149) : BV:8
151 : ite(144, 61, 150) : BV:8
152 : ite(143, 58, 151) : BV:8
153 : ite(142, 55, 152) : BV:8
154 : ite(141, 53, 153) : BV:8
155 : bvadd(24, 47, 124) : BV:32
156 : eq(155, 51) : BOOL
157 : eq(155, 48) : BOOL
158 : eq(155, 56) : BOOL
159 : eq(155, 59) : BOOL
160 : eq(155, 62) : BOOL
161 : eq(155, 65) : BOOL
162 : eq(155, 68) : BOOL
163 : ite(162, 70, 71) : BV:8
164 : ite(161, 67, 163) : BV:8
165 : ite(160, 64, 164) : BV:8
166 : ite(159, 61, 165) : BV:8
167 : ite(158, 58, 166) : BV:8
168 : ite(157, 55, 167) : BV:8
169 : ite(156, 53, 168) : BV:8
170 : bvadd(47, 124) : BV:32
171 : eq(170, 51) : BOOL
172 : eq(170, 48) : BOOL
173 : eq(170, 56) : BOOL
174 : eq(170, 59) : BOOL
175 : eq(170, 62) : BOOL
176 : eq(170, 65) : BOOL
177 : eq(170, 68) : BOOL
178 : ite(177, 70, 71) : BV:8
179 : ite(176, 67, 178) : BV:8
180 : ite(175, 64, 179) : BV:8
181 : ite(174, 61, 180) : BV:8
182 : ite(173, 58, 181) : BV:8
183 : ite(172, 55, 182) : BV:8
184 : ite(171, 53, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(44, 2, 185) : BV:32
187 : lambda(41, 186) : FUNCTION[BV:32 -> BV:32]
188 : map(40, 187) : MAP[BV:32 -> BV:32]
189 : sym_const(188) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 276447232 { 0x107a4000 +1.95507812e161 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1467095215 { 0x577218af +1.89137828e47 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 160063780 { 0x98a6124 +1.8108949e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 160063783 { 0x98a6127 +1.8108985e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2302812352 { 0x894220c0 -1992154944 -1.51662445e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2302812355 { 0x894220c3 -1992154941 -1.51662480e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3373052048 { 0xc90cb090 -921915248 -1.9913825e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3373052051 { 0xc90cb093 -921915245 -1.9913861e19 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46166Var : BV:32
2 : Lambda46167Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
54 : eq(52, 53) : BOOL
55 : 229 { 0xe5 -27 } : BV:8
56 : eq(52, 50) : BOOL
57 : 190 { 0xbe -66 } : BV:8
58 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
62 : eq(52, 61) : BOOL
63 : 125 { 0x7d } : BV:8
64 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
65 : eq(52, 64) : BOOL
66 : 4 { 0x4 } : BV:8
67 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
68 : eq(52, 67) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
71 : eq(52, 70) : BOOL
72 : 122 { 0x7a } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(65, 66, 75) : BV:8
77 : ite(62, 63, 76) : BV:8
78 : ite(59, 60, 77) : BV:8
79 : ite(56, 57, 78) : BV:8
80 : ite(54, 55, 79) : BV:8
81 : bvadd(67, 51) : BV:32
82 : eq(81, 53) : BOOL
83 : eq(81, 50) : BOOL
84 : eq(81, 58) : BOOL
85 : eq(81, 61) : BOOL
86 : eq(81, 64) : BOOL
87 : eq(81, 67) : BOOL
88 : eq(81, 70) : BOOL
89 : ite(88, 72, 73) : BV:8
90 : ite(87, 69, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 63, 91) : BV:8
93 : ite(84, 60, 92) : BV:8
94 : ite(83, 57, 93) : BV:8
95 : ite(82, 55, 94) : BV:8
96 : bvadd(70, 51) : BV:32
97 : eq(96, 53) : BOOL
98 : eq(96, 50) : BOOL
99 : eq(96, 58) : BOOL
100 : eq(96, 61) : BOOL
101 : eq(96, 64) : BOOL
102 : eq(96, 67) : BOOL
103 : eq(96, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 66, 105) : BV:8
107 : ite(100, 63, 106) : BV:8
108 : ite(99, 60, 107) : BV:8
109 : ite(98, 57, 108) : BV:8
110 : ite(97, 55, 109) : BV:8
111 : bvadd(61, 51) : BV:32
112 : eq(111, 53) : BOOL
113 : eq(111, 50) : BOOL
114 : eq(111, 58) : BOOL
115 : eq(111, 61) : BOOL
116 : eq(111, 64) : BOOL
117 : eq(111, 67) : BOOL
118 : eq(111, 70) : BOOL
119 : ite(118, 72, 73) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 60, 122) : BV:8
124 : ite(113, 57, 123) : BV:8
125 : ite(112, 55, 124) : BV:8
126 : bvconcat(80, 95, 110, 125) : BV:32
127 : bvadd(47, 49, 126) : BV:32
128 : eq(127, 53) : BOOL
129 : eq(127, 50) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : ite(134, 72, 73) : BV:8
136 : ite(133, 69, 135) : BV:8
137 : ite(132, 66, 136) : BV:8
138 : ite(131, 63, 137) : BV:8
139 : ite(130, 60, 138) : BV:8
140 : ite(129, 57, 139) : BV:8
141 : ite(128, 55, 140) : BV:8
142 : bvadd(36, 49, 126) : BV:32
143 : eq(142, 53) : BOOL
144 : eq(142, 50) : BOOL
145 : eq(142, 58) : BOOL
146 : eq(142, 61) : BOOL
147 : eq(142, 64) : BOOL
148 : eq(142, 67) : BOOL
149 : eq(142, 70) : BOOL
150 : ite(149, 72, 73) : BV:8
151 : ite(148, 69, 150) : BV:8
152 : ite(147, 66, 151) : BV:8
153 : ite(146, 63, 152) : BV:8
154 : ite(145, 60, 153) : BV:8
155 : ite(144, 57, 154) : BV:8
156 : ite(143, 55, 155) : BV:8
157 : bvadd(32, 49, 126) : BV:32
158 : eq(157, 53) : BOOL
159 : eq(157, 50) : BOOL
160 : eq(157, 58) : BOOL
161 : eq(157, 61) : BOOL
162 : eq(157, 64) : BOOL
163 : eq(157, 67) : BOOL
164 : eq(157, 70) : BOOL
165 : ite(164, 72, 73) : BV:8
166 : ite(163, 69, 165) : BV:8
167 : ite(162, 66, 166) : BV:8
168 : ite(161, 63, 167) : BV:8
169 : ite(160, 60, 168) : BV:8
170 : ite(159, 57, 169) : BV:8
171 : ite(158, 55, 170) : BV:8
172 : bvadd(49, 126) : BV:32
173 : eq(172, 53) : BOOL
174 : eq(172, 50) : BOOL
175 : eq(172, 58) : BOOL
176 : eq(172, 61) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : ite(179, 72, 73) : BV:8
181 : ite(178, 69, 180) : BV:8
182 : ite(177, 66, 181) : BV:8
183 : ite(176, 63, 182) : BV:8
184 : ite(175, 60, 183) : BV:8
185 : ite(174, 57, 184) : BV:8
186 : ite(173, 55, 185) : BV:8
187 : bvconcat(141, 156, 171, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : ite(46, 187, 188) : BV:32
190 : ite(6, 3, 189) : BV:32
191 : lambda(1, 2, 190) : FUNCTION[BV:32,BV:32 -> BV:32]
192 : sym_const(191) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46171Var : BV:32
2 : Lambda46172Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 542932887 ] -> true, [ 542932888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 542932887 ] -> true, [ 542932888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46180Var : BV:32
2 : Lambda46181Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46176Var : BV:32
2 : Lambda46177Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 229 { 0xe5 -27 } : BV:8
16 : eq(12, 10) : BOOL
17 : 190 { 0xbe -66 } : BV:8
18 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
22 : eq(12, 21) : BOOL
23 : 125 { 0x7d } : BV:8
24 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
25 : eq(12, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
28 : eq(12, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
31 : eq(12, 30) : BOOL
32 : 122 { 0x7a } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 15, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 15, 69) : BV:8
71 : bvadd(21, 11) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 10) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 15, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 13) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 15, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 13) : BOOL
105 : eq(103, 10) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 15, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 10) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 15, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 15, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46187Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46188Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46195Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3824785426
=counter_example_end
=global nodece 52 num_edges_traversed 3
=global nodece 52 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 53
=global nodece 53 nodece z3.ce4206.num_edges_traversed4
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(epsilon)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3.ce4206 b157321398116eb65004c329affb3fc
=input.spec-%var-x-1
1 : Lambda46274Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46275Var : BV:32
18 : Lambda46276Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46277Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
81 : eq(79, 80) : BOOL
82 : 229 { 0xe5 -27 } : BV:8
83 : eq(79, 77) : BOOL
84 : 190 { 0xbe -66 } : BV:8
85 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
89 : eq(79, 88) : BOOL
90 : 125 { 0x7d } : BV:8
91 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
92 : eq(79, 91) : BOOL
93 : 4 { 0x4 } : BV:8
94 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
95 : eq(79, 94) : BOOL
96 : 255 { 0xff -1 } : BV:8
97 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
98 : eq(79, 97) : BOOL
99 : 122 { 0x7a } : BV:8
100 : 0 { 0x0 } : BV:8
101 : ite(98, 99, 100) : BV:8
102 : ite(95, 96, 101) : BV:8
103 : ite(92, 93, 102) : BV:8
104 : ite(89, 90, 103) : BV:8
105 : ite(86, 87, 104) : BV:8
106 : ite(83, 84, 105) : BV:8
107 : ite(81, 82, 106) : BV:8
108 : bvadd(94, 78) : BV:32
109 : eq(108, 80) : BOOL
110 : eq(108, 77) : BOOL
111 : eq(108, 85) : BOOL
112 : eq(108, 88) : BOOL
113 : eq(108, 91) : BOOL
114 : eq(108, 94) : BOOL
115 : eq(108, 97) : BOOL
116 : ite(115, 99, 100) : BV:8
117 : ite(114, 96, 116) : BV:8
118 : ite(113, 93, 117) : BV:8
119 : ite(112, 90, 118) : BV:8
120 : ite(111, 87, 119) : BV:8
121 : ite(110, 84, 120) : BV:8
122 : ite(109, 82, 121) : BV:8
123 : bvadd(97, 78) : BV:32
124 : eq(123, 80) : BOOL
125 : eq(123, 77) : BOOL
126 : eq(123, 85) : BOOL
127 : eq(123, 88) : BOOL
128 : eq(123, 91) : BOOL
129 : eq(123, 94) : BOOL
130 : eq(123, 97) : BOOL
131 : ite(130, 99, 100) : BV:8
132 : ite(129, 96, 131) : BV:8
133 : ite(128, 93, 132) : BV:8
134 : ite(127, 90, 133) : BV:8
135 : ite(126, 87, 134) : BV:8
136 : ite(125, 84, 135) : BV:8
137 : ite(124, 82, 136) : BV:8
138 : bvadd(88, 78) : BV:32
139 : eq(138, 80) : BOOL
140 : eq(138, 77) : BOOL
141 : eq(138, 85) : BOOL
142 : eq(138, 88) : BOOL
143 : eq(138, 91) : BOOL
144 : eq(138, 94) : BOOL
145 : eq(138, 97) : BOOL
146 : ite(145, 99, 100) : BV:8
147 : ite(144, 96, 146) : BV:8
148 : ite(143, 93, 147) : BV:8
149 : ite(142, 90, 148) : BV:8
150 : ite(141, 87, 149) : BV:8
151 : ite(140, 84, 150) : BV:8
152 : ite(139, 82, 151) : BV:8
153 : bvconcat(107, 122, 137, 152) : BV:32
154 : bvadd(74, 76, 153) : BV:32
155 : eq(154, 80) : BOOL
156 : eq(154, 77) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : ite(161, 99, 100) : BV:8
163 : ite(160, 96, 162) : BV:8
164 : ite(159, 93, 163) : BV:8
165 : ite(158, 90, 164) : BV:8
166 : ite(157, 87, 165) : BV:8
167 : ite(156, 84, 166) : BV:8
168 : ite(155, 82, 167) : BV:8
169 : bvadd(40, 76, 153) : BV:32
170 : eq(169, 80) : BOOL
171 : eq(169, 77) : BOOL
172 : eq(169, 85) : BOOL
173 : eq(169, 88) : BOOL
174 : eq(169, 91) : BOOL
175 : eq(169, 94) : BOOL
176 : eq(169, 97) : BOOL
177 : ite(176, 99, 100) : BV:8
178 : ite(175, 96, 177) : BV:8
179 : ite(174, 93, 178) : BV:8
180 : ite(173, 90, 179) : BV:8
181 : ite(172, 87, 180) : BV:8
182 : ite(171, 84, 181) : BV:8
183 : ite(170, 82, 182) : BV:8
184 : bvadd(36, 76, 153) : BV:32
185 : eq(184, 80) : BOOL
186 : eq(184, 77) : BOOL
187 : eq(184, 85) : BOOL
188 : eq(184, 88) : BOOL
189 : eq(184, 91) : BOOL
190 : eq(184, 94) : BOOL
191 : eq(184, 97) : BOOL
192 : ite(191, 99, 100) : BV:8
193 : ite(190, 96, 192) : BV:8
194 : ite(189, 93, 193) : BV:8
195 : ite(188, 90, 194) : BV:8
196 : ite(187, 87, 195) : BV:8
197 : ite(186, 84, 196) : BV:8
198 : ite(185, 82, 197) : BV:8
199 : bvadd(76, 153) : BV:32
200 : eq(199, 80) : BOOL
201 : eq(199, 77) : BOOL
202 : eq(199, 85) : BOOL
203 : eq(199, 88) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : ite(206, 99, 100) : BV:8
208 : ite(205, 96, 207) : BV:8
209 : ite(204, 93, 208) : BV:8
210 : ite(203, 90, 209) : BV:8
211 : ite(202, 87, 210) : BV:8
212 : ite(201, 84, 211) : BV:8
213 : ite(200, 82, 212) : BV:8
214 : bvconcat(168, 183, 198, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : ite(73, 214, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : lambda(51, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(50, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46294Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46295Var : BV:32
18 : Lambda46296Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46297Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 229 { 0xe5 -27 } : BV:8
64 : eq(60, 58) : BOOL
65 : 190 { 0xbe -66 } : BV:8
66 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
70 : eq(60, 69) : BOOL
71 : 125 { 0x7d } : BV:8
72 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
73 : eq(60, 72) : BOOL
74 : 4 { 0x4 } : BV:8
75 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
76 : eq(60, 75) : BOOL
77 : 255 { 0xff -1 } : BV:8
78 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
79 : eq(60, 78) : BOOL
80 : 122 { 0x7a } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(62, 63, 87) : BV:8
89 : bvadd(75, 59) : BV:32
90 : eq(89, 61) : BOOL
91 : eq(89, 58) : BOOL
92 : eq(89, 66) : BOOL
93 : eq(89, 69) : BOOL
94 : eq(89, 72) : BOOL
95 : eq(89, 75) : BOOL
96 : eq(89, 78) : BOOL
97 : ite(96, 80, 81) : BV:8
98 : ite(95, 77, 97) : BV:8
99 : ite(94, 74, 98) : BV:8
100 : ite(93, 71, 99) : BV:8
101 : ite(92, 68, 100) : BV:8
102 : ite(91, 65, 101) : BV:8
103 : ite(90, 63, 102) : BV:8
104 : bvadd(78, 59) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 58) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 72) : BOOL
110 : eq(104, 75) : BOOL
111 : eq(104, 78) : BOOL
112 : ite(111, 80, 81) : BV:8
113 : ite(110, 77, 112) : BV:8
114 : ite(109, 74, 113) : BV:8
115 : ite(108, 71, 114) : BV:8
116 : ite(107, 68, 115) : BV:8
117 : ite(106, 65, 116) : BV:8
118 : ite(105, 63, 117) : BV:8
119 : bvadd(69, 59) : BV:32
120 : eq(119, 61) : BOOL
121 : eq(119, 58) : BOOL
122 : eq(119, 66) : BOOL
123 : eq(119, 69) : BOOL
124 : eq(119, 72) : BOOL
125 : eq(119, 75) : BOOL
126 : eq(119, 78) : BOOL
127 : ite(126, 80, 81) : BV:8
128 : ite(125, 77, 127) : BV:8
129 : ite(124, 74, 128) : BV:8
130 : ite(123, 71, 129) : BV:8
131 : ite(122, 68, 130) : BV:8
132 : ite(121, 65, 131) : BV:8
133 : ite(120, 63, 132) : BV:8
134 : bvconcat(88, 103, 118, 133) : BV:32
135 : bvadd(55, 57, 134) : BV:32
136 : eq(135, 61) : BOOL
137 : eq(135, 58) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : ite(142, 80, 81) : BV:8
144 : ite(141, 77, 143) : BV:8
145 : ite(140, 74, 144) : BV:8
146 : ite(139, 71, 145) : BV:8
147 : ite(138, 68, 146) : BV:8
148 : ite(137, 65, 147) : BV:8
149 : ite(136, 63, 148) : BV:8
150 : bvadd(40, 57, 134) : BV:32
151 : eq(150, 61) : BOOL
152 : eq(150, 58) : BOOL
153 : eq(150, 66) : BOOL
154 : eq(150, 69) : BOOL
155 : eq(150, 72) : BOOL
156 : eq(150, 75) : BOOL
157 : eq(150, 78) : BOOL
158 : ite(157, 80, 81) : BV:8
159 : ite(156, 77, 158) : BV:8
160 : ite(155, 74, 159) : BV:8
161 : ite(154, 71, 160) : BV:8
162 : ite(153, 68, 161) : BV:8
163 : ite(152, 65, 162) : BV:8
164 : ite(151, 63, 163) : BV:8
165 : bvadd(36, 57, 134) : BV:32
166 : eq(165, 61) : BOOL
167 : eq(165, 58) : BOOL
168 : eq(165, 66) : BOOL
169 : eq(165, 69) : BOOL
170 : eq(165, 72) : BOOL
171 : eq(165, 75) : BOOL
172 : eq(165, 78) : BOOL
173 : ite(172, 80, 81) : BV:8
174 : ite(171, 77, 173) : BV:8
175 : ite(170, 74, 174) : BV:8
176 : ite(169, 71, 175) : BV:8
177 : ite(168, 68, 176) : BV:8
178 : ite(167, 65, 177) : BV:8
179 : ite(166, 63, 178) : BV:8
180 : bvadd(57, 134) : BV:32
181 : eq(180, 61) : BOOL
182 : eq(180, 58) : BOOL
183 : eq(180, 66) : BOOL
184 : eq(180, 69) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : ite(187, 80, 81) : BV:8
189 : ite(186, 77, 188) : BV:8
190 : ite(185, 74, 189) : BV:8
191 : ite(184, 71, 190) : BV:8
192 : ite(183, 68, 191) : BV:8
193 : ite(182, 65, 192) : BV:8
194 : ite(181, 63, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(54, 2, 195) : BV:32
197 : lambda(51, 196) : FUNCTION[BV:32 -> BV:32]
198 : map(50, 197) : MAP[BV:32 -> BV:32]
199 : lambda(17, 198) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
200 : map(16, 199) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
201 : sym_const(200) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1044840451 ] -> 0, [ 1044840452; 1044840452 ] -> 125, [ 1044840453; 1044840453 ] -> 122, [ 1044840454; 1044840454 ] -> 255, [ 1044840455; 1044840455 ] -> 190, [ 1044840456; 2150629377 ] -> 0, [ 2150629378; 2150629378 ] -> 1, [ 2150629379; 2150629379 ] -> 229, [ 2150629380; 3842047999 ] -> 0, [ 3842048000; 3842048000 ] -> 4, [ 3842048001; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 160063779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 160063780; 160063783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 160063784; 2302812351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2302812352; 2302812355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2302812356; 3373052047 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3373052048; 3373052051 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3373052052; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3373052048 { 0xc90cb090 -921915248 -1.9913825e19 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 160063780 { 0x98a6124 +1.8108949e148 } : BV:32
=input.dst.llvm-%n
1 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2302812352 { 0x894220c0 -1992154944 -1.51662445e147 } : BV:32
=input.dst.llvm-%x
1 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 276447232 { 0x107a4000 +1.95507812e161 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1964439985 { 0x7516f9b1 +1.17949497e107 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46507Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 276447232 { 0x107a4000 +1.95507812e161 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : bvule(1, 2) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda46508Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 229 { 0xe5 -27 } : BV:8
54 : eq(50, 48) : BOOL
55 : 190 { 0xbe -66 } : BV:8
56 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
57 : eq(50, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
60 : eq(50, 59) : BOOL
61 : 125 { 0x7d } : BV:8
62 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
63 : eq(50, 62) : BOOL
64 : 4 { 0x4 } : BV:8
65 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
66 : eq(50, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
69 : eq(50, 68) : BOOL
70 : 122 { 0x7a } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(57, 58, 75) : BV:8
77 : ite(54, 55, 76) : BV:8
78 : ite(52, 53, 77) : BV:8
79 : bvadd(65, 49) : BV:32
80 : eq(79, 51) : BOOL
81 : eq(79, 48) : BOOL
82 : eq(79, 56) : BOOL
83 : eq(79, 59) : BOOL
84 : eq(79, 62) : BOOL
85 : eq(79, 65) : BOOL
86 : eq(79, 68) : BOOL
87 : ite(86, 70, 71) : BV:8
88 : ite(85, 67, 87) : BV:8
89 : ite(84, 64, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : ite(82, 58, 90) : BV:8
92 : ite(81, 55, 91) : BV:8
93 : ite(80, 53, 92) : BV:8
94 : bvadd(68, 49) : BV:32
95 : eq(94, 51) : BOOL
96 : eq(94, 48) : BOOL
97 : eq(94, 56) : BOOL
98 : eq(94, 59) : BOOL
99 : eq(94, 62) : BOOL
100 : eq(94, 65) : BOOL
101 : eq(94, 68) : BOOL
102 : ite(101, 70, 71) : BV:8
103 : ite(100, 67, 102) : BV:8
104 : ite(99, 64, 103) : BV:8
105 : ite(98, 61, 104) : BV:8
106 : ite(97, 58, 105) : BV:8
107 : ite(96, 55, 106) : BV:8
108 : ite(95, 53, 107) : BV:8
109 : bvadd(59, 49) : BV:32
110 : eq(109, 51) : BOOL
111 : eq(109, 48) : BOOL
112 : eq(109, 56) : BOOL
113 : eq(109, 59) : BOOL
114 : eq(109, 62) : BOOL
115 : eq(109, 65) : BOOL
116 : eq(109, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 61, 119) : BV:8
121 : ite(112, 58, 120) : BV:8
122 : ite(111, 55, 121) : BV:8
123 : ite(110, 53, 122) : BV:8
124 : bvconcat(78, 93, 108, 123) : BV:32
125 : bvadd(45, 47, 124) : BV:32
126 : eq(125, 51) : BOOL
127 : eq(125, 48) : BOOL
128 : eq(125, 56) : BOOL
129 : eq(125, 59) : BOOL
130 : eq(125, 62) : BOOL
131 : eq(125, 65) : BOOL
132 : eq(125, 68) : BOOL
133 : ite(132, 70, 71) : BV:8
134 : ite(131, 67, 133) : BV:8
135 : ite(130, 64, 134) : BV:8
136 : ite(129, 61, 135) : BV:8
137 : ite(128, 58, 136) : BV:8
138 : ite(127, 55, 137) : BV:8
139 : ite(126, 53, 138) : BV:8
140 : bvadd(28, 47, 124) : BV:32
141 : eq(140, 51) : BOOL
142 : eq(140, 48) : BOOL
143 : eq(140, 56) : BOOL
144 : eq(140, 59) : BOOL
145 : eq(140, 62) : BOOL
146 : eq(140, 65) : BOOL
147 : eq(140, 68) : BOOL
148 : ite(147, 70, 71) : BV:8
149 : ite(146, 67, 148) : BV:8
150 : ite(145, 64, 149) : BV:8
151 : ite(144, 61, 150) : BV:8
152 : ite(143, 58, 151) : BV:8
153 : ite(142, 55, 152) : BV:8
154 : ite(141, 53, 153) : BV:8
155 : bvadd(24, 47, 124) : BV:32
156 : eq(155, 51) : BOOL
157 : eq(155, 48) : BOOL
158 : eq(155, 56) : BOOL
159 : eq(155, 59) : BOOL
160 : eq(155, 62) : BOOL
161 : eq(155, 65) : BOOL
162 : eq(155, 68) : BOOL
163 : ite(162, 70, 71) : BV:8
164 : ite(161, 67, 163) : BV:8
165 : ite(160, 64, 164) : BV:8
166 : ite(159, 61, 165) : BV:8
167 : ite(158, 58, 166) : BV:8
168 : ite(157, 55, 167) : BV:8
169 : ite(156, 53, 168) : BV:8
170 : bvadd(47, 124) : BV:32
171 : eq(170, 51) : BOOL
172 : eq(170, 48) : BOOL
173 : eq(170, 56) : BOOL
174 : eq(170, 59) : BOOL
175 : eq(170, 62) : BOOL
176 : eq(170, 65) : BOOL
177 : eq(170, 68) : BOOL
178 : ite(177, 70, 71) : BV:8
179 : ite(176, 67, 178) : BV:8
180 : ite(175, 64, 179) : BV:8
181 : ite(174, 61, 180) : BV:8
182 : ite(173, 58, 181) : BV:8
183 : ite(172, 55, 182) : BV:8
184 : ite(171, 53, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(44, 2, 185) : BV:32
187 : lambda(41, 186) : FUNCTION[BV:32 -> BV:32]
188 : map(40, 187) : MAP[BV:32 -> BV:32]
189 : sym_const(188) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 276447233 { 0x107a4001 +1.95507824e161 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 276447232 { 0x107a4000 +1.95507812e161 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda46497Var : BV:32
20 : bvule(2, 8) : BOOL
21 : and(9, 20) : BOOL
22 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
23 : bvule(22, 2) : BOOL
24 : and(23, 11) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 8, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : bvule(19, 1) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(16, 19) : BOOL
33 : bvule(19, 16) : BOOL
34 : and(32, 33) : BOOL
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvule(35, 19) : BOOL
37 : bvule(19, 10) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 16, 39) : BV:32
41 : ite(31, 1, 40) : BV:32
42 : eq(41, 1) : BOOL
43 : and(28, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(19, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda46498Var : BV:32
47 : eq(2, 1) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
54 : bvmul(51, 2) : BV:32
55 : bvadd(53, 54) : BV:32
56 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
57 : eq(55, 56) : BOOL
58 : 229 { 0xe5 -27 } : BV:8
59 : eq(55, 53) : BOOL
60 : 190 { 0xbe -66 } : BV:8
61 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
62 : eq(55, 61) : BOOL
63 : 1 { 0x1 } : BV:8
64 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
65 : eq(55, 64) : BOOL
66 : 125 { 0x7d } : BV:8
67 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
68 : eq(55, 67) : BOOL
69 : 4 { 0x4 } : BV:8
70 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
71 : eq(55, 70) : BOOL
72 : 255 { 0xff -1 } : BV:8
73 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
74 : eq(55, 73) : BOOL
75 : 122 { 0x7a } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : ite(59, 60, 81) : BV:8
83 : ite(57, 58, 82) : BV:8
84 : bvadd(70, 54) : BV:32
85 : eq(84, 56) : BOOL
86 : eq(84, 53) : BOOL
87 : eq(84, 61) : BOOL
88 : eq(84, 64) : BOOL
89 : eq(84, 67) : BOOL
90 : eq(84, 70) : BOOL
91 : eq(84, 73) : BOOL
92 : ite(91, 75, 76) : BV:8
93 : ite(90, 72, 92) : BV:8
94 : ite(89, 69, 93) : BV:8
95 : ite(88, 66, 94) : BV:8
96 : ite(87, 63, 95) : BV:8
97 : ite(86, 60, 96) : BV:8
98 : ite(85, 58, 97) : BV:8
99 : bvadd(73, 54) : BV:32
100 : eq(99, 56) : BOOL
101 : eq(99, 53) : BOOL
102 : eq(99, 61) : BOOL
103 : eq(99, 64) : BOOL
104 : eq(99, 67) : BOOL
105 : eq(99, 70) : BOOL
106 : eq(99, 73) : BOOL
107 : ite(106, 75, 76) : BV:8
108 : ite(105, 72, 107) : BV:8
109 : ite(104, 69, 108) : BV:8
110 : ite(103, 66, 109) : BV:8
111 : ite(102, 63, 110) : BV:8
112 : ite(101, 60, 111) : BV:8
113 : ite(100, 58, 112) : BV:8
114 : bvadd(64, 54) : BV:32
115 : eq(114, 56) : BOOL
116 : eq(114, 53) : BOOL
117 : eq(114, 61) : BOOL
118 : eq(114, 64) : BOOL
119 : eq(114, 67) : BOOL
120 : eq(114, 70) : BOOL
121 : eq(114, 73) : BOOL
122 : ite(121, 75, 76) : BV:8
123 : ite(120, 72, 122) : BV:8
124 : ite(119, 69, 123) : BV:8
125 : ite(118, 66, 124) : BV:8
126 : ite(117, 63, 125) : BV:8
127 : ite(116, 60, 126) : BV:8
128 : ite(115, 58, 127) : BV:8
129 : bvconcat(83, 98, 113, 128) : BV:32
130 : bvadd(50, 52, 129) : BV:32
131 : eq(130, 56) : BOOL
132 : eq(130, 53) : BOOL
133 : eq(130, 61) : BOOL
134 : eq(130, 64) : BOOL
135 : eq(130, 67) : BOOL
136 : eq(130, 70) : BOOL
137 : eq(130, 73) : BOOL
138 : ite(137, 75, 76) : BV:8
139 : ite(136, 72, 138) : BV:8
140 : ite(135, 69, 139) : BV:8
141 : ite(134, 66, 140) : BV:8
142 : ite(133, 63, 141) : BV:8
143 : ite(132, 60, 142) : BV:8
144 : ite(131, 58, 143) : BV:8
145 : bvadd(35, 52, 129) : BV:32
146 : eq(145, 56) : BOOL
147 : eq(145, 53) : BOOL
148 : eq(145, 61) : BOOL
149 : eq(145, 64) : BOOL
150 : eq(145, 67) : BOOL
151 : eq(145, 70) : BOOL
152 : eq(145, 73) : BOOL
153 : ite(152, 75, 76) : BV:8
154 : ite(151, 72, 153) : BV:8
155 : ite(150, 69, 154) : BV:8
156 : ite(149, 66, 155) : BV:8
157 : ite(148, 63, 156) : BV:8
158 : ite(147, 60, 157) : BV:8
159 : ite(146, 58, 158) : BV:8
160 : bvadd(16, 52, 129) : BV:32
161 : eq(160, 56) : BOOL
162 : eq(160, 53) : BOOL
163 : eq(160, 61) : BOOL
164 : eq(160, 64) : BOOL
165 : eq(160, 67) : BOOL
166 : eq(160, 70) : BOOL
167 : eq(160, 73) : BOOL
168 : ite(167, 75, 76) : BV:8
169 : ite(166, 72, 168) : BV:8
170 : ite(165, 69, 169) : BV:8
171 : ite(164, 66, 170) : BV:8
172 : ite(163, 63, 171) : BV:8
173 : ite(162, 60, 172) : BV:8
174 : ite(161, 58, 173) : BV:8
175 : bvadd(52, 129) : BV:32
176 : eq(175, 56) : BOOL
177 : eq(175, 53) : BOOL
178 : eq(175, 61) : BOOL
179 : eq(175, 64) : BOOL
180 : eq(175, 67) : BOOL
181 : eq(175, 70) : BOOL
182 : eq(175, 73) : BOOL
183 : ite(182, 75, 76) : BV:8
184 : ite(181, 72, 183) : BV:8
185 : ite(180, 69, 184) : BV:8
186 : ite(179, 66, 185) : BV:8
187 : ite(178, 63, 186) : BV:8
188 : ite(177, 60, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : bvconcat(144, 159, 174, 189) : BV:32
191 : ite(49, 1, 190) : BV:32
192 : lambda(46, 191) : FUNCTION[BV:32 -> BV:32]
193 : map(45, 192) : MAP[BV:32 -> BV:32]
194 : sum(17, 18, 193) : SUM[UNIT,MAP[BV:32 -> BV:32]]
195 : sym_const(194) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46513Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 276447232 { 0x107a4000 +1.95507812e161 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : bvule(1, 2) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda46514Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 229 { 0xe5 -27 } : BV:8
54 : eq(50, 48) : BOOL
55 : 190 { 0xbe -66 } : BV:8
56 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
57 : eq(50, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
60 : eq(50, 59) : BOOL
61 : 125 { 0x7d } : BV:8
62 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
63 : eq(50, 62) : BOOL
64 : 4 { 0x4 } : BV:8
65 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
66 : eq(50, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
69 : eq(50, 68) : BOOL
70 : 122 { 0x7a } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(57, 58, 75) : BV:8
77 : ite(54, 55, 76) : BV:8
78 : ite(52, 53, 77) : BV:8
79 : bvadd(65, 49) : BV:32
80 : eq(79, 51) : BOOL
81 : eq(79, 48) : BOOL
82 : eq(79, 56) : BOOL
83 : eq(79, 59) : BOOL
84 : eq(79, 62) : BOOL
85 : eq(79, 65) : BOOL
86 : eq(79, 68) : BOOL
87 : ite(86, 70, 71) : BV:8
88 : ite(85, 67, 87) : BV:8
89 : ite(84, 64, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : ite(82, 58, 90) : BV:8
92 : ite(81, 55, 91) : BV:8
93 : ite(80, 53, 92) : BV:8
94 : bvadd(68, 49) : BV:32
95 : eq(94, 51) : BOOL
96 : eq(94, 48) : BOOL
97 : eq(94, 56) : BOOL
98 : eq(94, 59) : BOOL
99 : eq(94, 62) : BOOL
100 : eq(94, 65) : BOOL
101 : eq(94, 68) : BOOL
102 : ite(101, 70, 71) : BV:8
103 : ite(100, 67, 102) : BV:8
104 : ite(99, 64, 103) : BV:8
105 : ite(98, 61, 104) : BV:8
106 : ite(97, 58, 105) : BV:8
107 : ite(96, 55, 106) : BV:8
108 : ite(95, 53, 107) : BV:8
109 : bvadd(59, 49) : BV:32
110 : eq(109, 51) : BOOL
111 : eq(109, 48) : BOOL
112 : eq(109, 56) : BOOL
113 : eq(109, 59) : BOOL
114 : eq(109, 62) : BOOL
115 : eq(109, 65) : BOOL
116 : eq(109, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 61, 119) : BV:8
121 : ite(112, 58, 120) : BV:8
122 : ite(111, 55, 121) : BV:8
123 : ite(110, 53, 122) : BV:8
124 : bvconcat(78, 93, 108, 123) : BV:32
125 : bvadd(45, 47, 124) : BV:32
126 : eq(125, 51) : BOOL
127 : eq(125, 48) : BOOL
128 : eq(125, 56) : BOOL
129 : eq(125, 59) : BOOL
130 : eq(125, 62) : BOOL
131 : eq(125, 65) : BOOL
132 : eq(125, 68) : BOOL
133 : ite(132, 70, 71) : BV:8
134 : ite(131, 67, 133) : BV:8
135 : ite(130, 64, 134) : BV:8
136 : ite(129, 61, 135) : BV:8
137 : ite(128, 58, 136) : BV:8
138 : ite(127, 55, 137) : BV:8
139 : ite(126, 53, 138) : BV:8
140 : bvadd(28, 47, 124) : BV:32
141 : eq(140, 51) : BOOL
142 : eq(140, 48) : BOOL
143 : eq(140, 56) : BOOL
144 : eq(140, 59) : BOOL
145 : eq(140, 62) : BOOL
146 : eq(140, 65) : BOOL
147 : eq(140, 68) : BOOL
148 : ite(147, 70, 71) : BV:8
149 : ite(146, 67, 148) : BV:8
150 : ite(145, 64, 149) : BV:8
151 : ite(144, 61, 150) : BV:8
152 : ite(143, 58, 151) : BV:8
153 : ite(142, 55, 152) : BV:8
154 : ite(141, 53, 153) : BV:8
155 : bvadd(24, 47, 124) : BV:32
156 : eq(155, 51) : BOOL
157 : eq(155, 48) : BOOL
158 : eq(155, 56) : BOOL
159 : eq(155, 59) : BOOL
160 : eq(155, 62) : BOOL
161 : eq(155, 65) : BOOL
162 : eq(155, 68) : BOOL
163 : ite(162, 70, 71) : BV:8
164 : ite(161, 67, 163) : BV:8
165 : ite(160, 64, 164) : BV:8
166 : ite(159, 61, 165) : BV:8
167 : ite(158, 58, 166) : BV:8
168 : ite(157, 55, 167) : BV:8
169 : ite(156, 53, 168) : BV:8
170 : bvadd(47, 124) : BV:32
171 : eq(170, 51) : BOOL
172 : eq(170, 48) : BOOL
173 : eq(170, 56) : BOOL
174 : eq(170, 59) : BOOL
175 : eq(170, 62) : BOOL
176 : eq(170, 65) : BOOL
177 : eq(170, 68) : BOOL
178 : ite(177, 70, 71) : BV:8
179 : ite(176, 67, 178) : BV:8
180 : ite(175, 64, 179) : BV:8
181 : ite(174, 61, 180) : BV:8
182 : ite(173, 58, 181) : BV:8
183 : ite(172, 55, 182) : BV:8
184 : ite(171, 53, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(44, 2, 185) : BV:32
187 : lambda(41, 186) : FUNCTION[BV:32 -> BV:32]
188 : map(40, 187) : MAP[BV:32 -> BV:32]
189 : sym_const(188) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 276447232 { 0x107a4000 +1.95507812e161 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1467095215 { 0x577218af +1.89137828e47 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 160063780 { 0x98a6124 +1.8108949e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 160063783 { 0x98a6127 +1.8108985e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2302812352 { 0x894220c0 -1992154944 -1.51662445e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2302812355 { 0x894220c3 -1992154941 -1.51662480e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3373052048 { 0xc90cb090 -921915248 -1.9913825e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3373052051 { 0xc90cb093 -921915245 -1.9913861e19 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46166Var : BV:32
2 : Lambda46167Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
54 : eq(52, 53) : BOOL
55 : 229 { 0xe5 -27 } : BV:8
56 : eq(52, 50) : BOOL
57 : 190 { 0xbe -66 } : BV:8
58 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
62 : eq(52, 61) : BOOL
63 : 125 { 0x7d } : BV:8
64 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
65 : eq(52, 64) : BOOL
66 : 4 { 0x4 } : BV:8
67 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
68 : eq(52, 67) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
71 : eq(52, 70) : BOOL
72 : 122 { 0x7a } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(65, 66, 75) : BV:8
77 : ite(62, 63, 76) : BV:8
78 : ite(59, 60, 77) : BV:8
79 : ite(56, 57, 78) : BV:8
80 : ite(54, 55, 79) : BV:8
81 : bvadd(67, 51) : BV:32
82 : eq(81, 53) : BOOL
83 : eq(81, 50) : BOOL
84 : eq(81, 58) : BOOL
85 : eq(81, 61) : BOOL
86 : eq(81, 64) : BOOL
87 : eq(81, 67) : BOOL
88 : eq(81, 70) : BOOL
89 : ite(88, 72, 73) : BV:8
90 : ite(87, 69, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 63, 91) : BV:8
93 : ite(84, 60, 92) : BV:8
94 : ite(83, 57, 93) : BV:8
95 : ite(82, 55, 94) : BV:8
96 : bvadd(70, 51) : BV:32
97 : eq(96, 53) : BOOL
98 : eq(96, 50) : BOOL
99 : eq(96, 58) : BOOL
100 : eq(96, 61) : BOOL
101 : eq(96, 64) : BOOL
102 : eq(96, 67) : BOOL
103 : eq(96, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 66, 105) : BV:8
107 : ite(100, 63, 106) : BV:8
108 : ite(99, 60, 107) : BV:8
109 : ite(98, 57, 108) : BV:8
110 : ite(97, 55, 109) : BV:8
111 : bvadd(61, 51) : BV:32
112 : eq(111, 53) : BOOL
113 : eq(111, 50) : BOOL
114 : eq(111, 58) : BOOL
115 : eq(111, 61) : BOOL
116 : eq(111, 64) : BOOL
117 : eq(111, 67) : BOOL
118 : eq(111, 70) : BOOL
119 : ite(118, 72, 73) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 60, 122) : BV:8
124 : ite(113, 57, 123) : BV:8
125 : ite(112, 55, 124) : BV:8
126 : bvconcat(80, 95, 110, 125) : BV:32
127 : bvadd(47, 49, 126) : BV:32
128 : eq(127, 53) : BOOL
129 : eq(127, 50) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : ite(134, 72, 73) : BV:8
136 : ite(133, 69, 135) : BV:8
137 : ite(132, 66, 136) : BV:8
138 : ite(131, 63, 137) : BV:8
139 : ite(130, 60, 138) : BV:8
140 : ite(129, 57, 139) : BV:8
141 : ite(128, 55, 140) : BV:8
142 : bvadd(36, 49, 126) : BV:32
143 : eq(142, 53) : BOOL
144 : eq(142, 50) : BOOL
145 : eq(142, 58) : BOOL
146 : eq(142, 61) : BOOL
147 : eq(142, 64) : BOOL
148 : eq(142, 67) : BOOL
149 : eq(142, 70) : BOOL
150 : ite(149, 72, 73) : BV:8
151 : ite(148, 69, 150) : BV:8
152 : ite(147, 66, 151) : BV:8
153 : ite(146, 63, 152) : BV:8
154 : ite(145, 60, 153) : BV:8
155 : ite(144, 57, 154) : BV:8
156 : ite(143, 55, 155) : BV:8
157 : bvadd(32, 49, 126) : BV:32
158 : eq(157, 53) : BOOL
159 : eq(157, 50) : BOOL
160 : eq(157, 58) : BOOL
161 : eq(157, 61) : BOOL
162 : eq(157, 64) : BOOL
163 : eq(157, 67) : BOOL
164 : eq(157, 70) : BOOL
165 : ite(164, 72, 73) : BV:8
166 : ite(163, 69, 165) : BV:8
167 : ite(162, 66, 166) : BV:8
168 : ite(161, 63, 167) : BV:8
169 : ite(160, 60, 168) : BV:8
170 : ite(159, 57, 169) : BV:8
171 : ite(158, 55, 170) : BV:8
172 : bvadd(49, 126) : BV:32
173 : eq(172, 53) : BOOL
174 : eq(172, 50) : BOOL
175 : eq(172, 58) : BOOL
176 : eq(172, 61) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : ite(179, 72, 73) : BV:8
181 : ite(178, 69, 180) : BV:8
182 : ite(177, 66, 181) : BV:8
183 : ite(176, 63, 182) : BV:8
184 : ite(175, 60, 183) : BV:8
185 : ite(174, 57, 184) : BV:8
186 : ite(173, 55, 185) : BV:8
187 : bvconcat(141, 156, 171, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : ite(46, 187, 188) : BV:32
190 : ite(6, 3, 189) : BV:32
191 : lambda(1, 2, 190) : FUNCTION[BV:32,BV:32 -> BV:32]
192 : sym_const(191) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46171Var : BV:32
2 : Lambda46172Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 542932887 ] -> true, [ 542932888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 542932887 ] -> true, [ 542932888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46180Var : BV:32
2 : Lambda46181Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46176Var : BV:32
2 : Lambda46177Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 229 { 0xe5 -27 } : BV:8
16 : eq(12, 10) : BOOL
17 : 190 { 0xbe -66 } : BV:8
18 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
22 : eq(12, 21) : BOOL
23 : 125 { 0x7d } : BV:8
24 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
25 : eq(12, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
28 : eq(12, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
31 : eq(12, 30) : BOOL
32 : 122 { 0x7a } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 15, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 15, 69) : BV:8
71 : bvadd(21, 11) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 10) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 15, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 13) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 15, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 13) : BOOL
105 : eq(103, 10) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 15, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 10) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 15, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 15, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46187Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46188Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46195Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3824785426
=counter_example_end
=global nodece 53 num_edges_traversed 4
=global nodece 53 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 54
=global nodece 54 nodece z3.ce4222.num_edges_traversed5
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3.ce4222 a4b4d27fbe92c75a2e288bbdd7211393
=input.spec-%var-x-1
1 : Lambda46274Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46275Var : BV:32
18 : Lambda46276Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46277Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
81 : eq(79, 80) : BOOL
82 : 229 { 0xe5 -27 } : BV:8
83 : eq(79, 77) : BOOL
84 : 190 { 0xbe -66 } : BV:8
85 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
89 : eq(79, 88) : BOOL
90 : 125 { 0x7d } : BV:8
91 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
92 : eq(79, 91) : BOOL
93 : 4 { 0x4 } : BV:8
94 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
95 : eq(79, 94) : BOOL
96 : 255 { 0xff -1 } : BV:8
97 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
98 : eq(79, 97) : BOOL
99 : 122 { 0x7a } : BV:8
100 : 0 { 0x0 } : BV:8
101 : ite(98, 99, 100) : BV:8
102 : ite(95, 96, 101) : BV:8
103 : ite(92, 93, 102) : BV:8
104 : ite(89, 90, 103) : BV:8
105 : ite(86, 87, 104) : BV:8
106 : ite(83, 84, 105) : BV:8
107 : ite(81, 82, 106) : BV:8
108 : bvadd(94, 78) : BV:32
109 : eq(108, 80) : BOOL
110 : eq(108, 77) : BOOL
111 : eq(108, 85) : BOOL
112 : eq(108, 88) : BOOL
113 : eq(108, 91) : BOOL
114 : eq(108, 94) : BOOL
115 : eq(108, 97) : BOOL
116 : ite(115, 99, 100) : BV:8
117 : ite(114, 96, 116) : BV:8
118 : ite(113, 93, 117) : BV:8
119 : ite(112, 90, 118) : BV:8
120 : ite(111, 87, 119) : BV:8
121 : ite(110, 84, 120) : BV:8
122 : ite(109, 82, 121) : BV:8
123 : bvadd(97, 78) : BV:32
124 : eq(123, 80) : BOOL
125 : eq(123, 77) : BOOL
126 : eq(123, 85) : BOOL
127 : eq(123, 88) : BOOL
128 : eq(123, 91) : BOOL
129 : eq(123, 94) : BOOL
130 : eq(123, 97) : BOOL
131 : ite(130, 99, 100) : BV:8
132 : ite(129, 96, 131) : BV:8
133 : ite(128, 93, 132) : BV:8
134 : ite(127, 90, 133) : BV:8
135 : ite(126, 87, 134) : BV:8
136 : ite(125, 84, 135) : BV:8
137 : ite(124, 82, 136) : BV:8
138 : bvadd(88, 78) : BV:32
139 : eq(138, 80) : BOOL
140 : eq(138, 77) : BOOL
141 : eq(138, 85) : BOOL
142 : eq(138, 88) : BOOL
143 : eq(138, 91) : BOOL
144 : eq(138, 94) : BOOL
145 : eq(138, 97) : BOOL
146 : ite(145, 99, 100) : BV:8
147 : ite(144, 96, 146) : BV:8
148 : ite(143, 93, 147) : BV:8
149 : ite(142, 90, 148) : BV:8
150 : ite(141, 87, 149) : BV:8
151 : ite(140, 84, 150) : BV:8
152 : ite(139, 82, 151) : BV:8
153 : bvconcat(107, 122, 137, 152) : BV:32
154 : bvadd(74, 76, 153) : BV:32
155 : eq(154, 80) : BOOL
156 : eq(154, 77) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : ite(161, 99, 100) : BV:8
163 : ite(160, 96, 162) : BV:8
164 : ite(159, 93, 163) : BV:8
165 : ite(158, 90, 164) : BV:8
166 : ite(157, 87, 165) : BV:8
167 : ite(156, 84, 166) : BV:8
168 : ite(155, 82, 167) : BV:8
169 : bvadd(40, 76, 153) : BV:32
170 : eq(169, 80) : BOOL
171 : eq(169, 77) : BOOL
172 : eq(169, 85) : BOOL
173 : eq(169, 88) : BOOL
174 : eq(169, 91) : BOOL
175 : eq(169, 94) : BOOL
176 : eq(169, 97) : BOOL
177 : ite(176, 99, 100) : BV:8
178 : ite(175, 96, 177) : BV:8
179 : ite(174, 93, 178) : BV:8
180 : ite(173, 90, 179) : BV:8
181 : ite(172, 87, 180) : BV:8
182 : ite(171, 84, 181) : BV:8
183 : ite(170, 82, 182) : BV:8
184 : bvadd(36, 76, 153) : BV:32
185 : eq(184, 80) : BOOL
186 : eq(184, 77) : BOOL
187 : eq(184, 85) : BOOL
188 : eq(184, 88) : BOOL
189 : eq(184, 91) : BOOL
190 : eq(184, 94) : BOOL
191 : eq(184, 97) : BOOL
192 : ite(191, 99, 100) : BV:8
193 : ite(190, 96, 192) : BV:8
194 : ite(189, 93, 193) : BV:8
195 : ite(188, 90, 194) : BV:8
196 : ite(187, 87, 195) : BV:8
197 : ite(186, 84, 196) : BV:8
198 : ite(185, 82, 197) : BV:8
199 : bvadd(76, 153) : BV:32
200 : eq(199, 80) : BOOL
201 : eq(199, 77) : BOOL
202 : eq(199, 85) : BOOL
203 : eq(199, 88) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : ite(206, 99, 100) : BV:8
208 : ite(205, 96, 207) : BV:8
209 : ite(204, 93, 208) : BV:8
210 : ite(203, 90, 209) : BV:8
211 : ite(202, 87, 210) : BV:8
212 : ite(201, 84, 211) : BV:8
213 : ite(200, 82, 212) : BV:8
214 : bvconcat(168, 183, 198, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : ite(73, 214, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : lambda(51, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(50, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46294Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46295Var : BV:32
18 : Lambda46296Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46297Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 229 { 0xe5 -27 } : BV:8
64 : eq(60, 58) : BOOL
65 : 190 { 0xbe -66 } : BV:8
66 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
70 : eq(60, 69) : BOOL
71 : 125 { 0x7d } : BV:8
72 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
73 : eq(60, 72) : BOOL
74 : 4 { 0x4 } : BV:8
75 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
76 : eq(60, 75) : BOOL
77 : 255 { 0xff -1 } : BV:8
78 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
79 : eq(60, 78) : BOOL
80 : 122 { 0x7a } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(62, 63, 87) : BV:8
89 : bvadd(75, 59) : BV:32
90 : eq(89, 61) : BOOL
91 : eq(89, 58) : BOOL
92 : eq(89, 66) : BOOL
93 : eq(89, 69) : BOOL
94 : eq(89, 72) : BOOL
95 : eq(89, 75) : BOOL
96 : eq(89, 78) : BOOL
97 : ite(96, 80, 81) : BV:8
98 : ite(95, 77, 97) : BV:8
99 : ite(94, 74, 98) : BV:8
100 : ite(93, 71, 99) : BV:8
101 : ite(92, 68, 100) : BV:8
102 : ite(91, 65, 101) : BV:8
103 : ite(90, 63, 102) : BV:8
104 : bvadd(78, 59) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 58) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 72) : BOOL
110 : eq(104, 75) : BOOL
111 : eq(104, 78) : BOOL
112 : ite(111, 80, 81) : BV:8
113 : ite(110, 77, 112) : BV:8
114 : ite(109, 74, 113) : BV:8
115 : ite(108, 71, 114) : BV:8
116 : ite(107, 68, 115) : BV:8
117 : ite(106, 65, 116) : BV:8
118 : ite(105, 63, 117) : BV:8
119 : bvadd(69, 59) : BV:32
120 : eq(119, 61) : BOOL
121 : eq(119, 58) : BOOL
122 : eq(119, 66) : BOOL
123 : eq(119, 69) : BOOL
124 : eq(119, 72) : BOOL
125 : eq(119, 75) : BOOL
126 : eq(119, 78) : BOOL
127 : ite(126, 80, 81) : BV:8
128 : ite(125, 77, 127) : BV:8
129 : ite(124, 74, 128) : BV:8
130 : ite(123, 71, 129) : BV:8
131 : ite(122, 68, 130) : BV:8
132 : ite(121, 65, 131) : BV:8
133 : ite(120, 63, 132) : BV:8
134 : bvconcat(88, 103, 118, 133) : BV:32
135 : bvadd(55, 57, 134) : BV:32
136 : eq(135, 61) : BOOL
137 : eq(135, 58) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : ite(142, 80, 81) : BV:8
144 : ite(141, 77, 143) : BV:8
145 : ite(140, 74, 144) : BV:8
146 : ite(139, 71, 145) : BV:8
147 : ite(138, 68, 146) : BV:8
148 : ite(137, 65, 147) : BV:8
149 : ite(136, 63, 148) : BV:8
150 : bvadd(40, 57, 134) : BV:32
151 : eq(150, 61) : BOOL
152 : eq(150, 58) : BOOL
153 : eq(150, 66) : BOOL
154 : eq(150, 69) : BOOL
155 : eq(150, 72) : BOOL
156 : eq(150, 75) : BOOL
157 : eq(150, 78) : BOOL
158 : ite(157, 80, 81) : BV:8
159 : ite(156, 77, 158) : BV:8
160 : ite(155, 74, 159) : BV:8
161 : ite(154, 71, 160) : BV:8
162 : ite(153, 68, 161) : BV:8
163 : ite(152, 65, 162) : BV:8
164 : ite(151, 63, 163) : BV:8
165 : bvadd(36, 57, 134) : BV:32
166 : eq(165, 61) : BOOL
167 : eq(165, 58) : BOOL
168 : eq(165, 66) : BOOL
169 : eq(165, 69) : BOOL
170 : eq(165, 72) : BOOL
171 : eq(165, 75) : BOOL
172 : eq(165, 78) : BOOL
173 : ite(172, 80, 81) : BV:8
174 : ite(171, 77, 173) : BV:8
175 : ite(170, 74, 174) : BV:8
176 : ite(169, 71, 175) : BV:8
177 : ite(168, 68, 176) : BV:8
178 : ite(167, 65, 177) : BV:8
179 : ite(166, 63, 178) : BV:8
180 : bvadd(57, 134) : BV:32
181 : eq(180, 61) : BOOL
182 : eq(180, 58) : BOOL
183 : eq(180, 66) : BOOL
184 : eq(180, 69) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : ite(187, 80, 81) : BV:8
189 : ite(186, 77, 188) : BV:8
190 : ite(185, 74, 189) : BV:8
191 : ite(184, 71, 190) : BV:8
192 : ite(183, 68, 191) : BV:8
193 : ite(182, 65, 192) : BV:8
194 : ite(181, 63, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(54, 2, 195) : BV:32
197 : lambda(51, 196) : FUNCTION[BV:32 -> BV:32]
198 : map(50, 197) : MAP[BV:32 -> BV:32]
199 : lambda(17, 198) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
200 : map(16, 199) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
201 : sym_const(200) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 1044840451 ] -> 0, [ 1044840452; 1044840452 ] -> 125, [ 1044840453; 1044840453 ] -> 122, [ 1044840454; 1044840454 ] -> 255, [ 1044840455; 1044840455 ] -> 190, [ 1044840456; 2150629377 ] -> 0, [ 2150629378; 2150629378 ] -> 1, [ 2150629379; 2150629379 ] -> 229, [ 2150629380; 3842047999 ] -> 0, [ 3842048000; 3842048000 ] -> 4, [ 3842048001; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 160063779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 160063780; 160063783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 160063784; 2302812351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2302812352; 2302812355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2302812356; 3373052047 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3373052048; 3373052051 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3373052052; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3373052048 { 0xc90cb090 -921915248 -1.9913825e19 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 160063780 { 0x98a6124 +1.8108949e148 } : BV:32
=input.dst.llvm-%n
1 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2302812352 { 0x894220c0 -1992154944 -1.51662445e147 } : BV:32
=input.dst.llvm-%x
1 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 276447233 { 0x107a4001 +1.95507824e161 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1964439986 { 0x7516f9b2 +1.17949509e107 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 276447233 { 0x107a4001 +1.95507824e161 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1467095216 { 0x577218b0 +1.89137840e47 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 160063780 { 0x98a6124 +1.8108949e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 160063783 { 0x98a6127 +1.8108985e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2302812352 { 0x894220c0 -1992154944 -1.51662445e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2302812355 { 0x894220c3 -1992154941 -1.51662480e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3373052048 { 0xc90cb090 -921915248 -1.9913825e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3373052051 { 0xc90cb093 -921915245 -1.9913861e19 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46166Var : BV:32
2 : Lambda46167Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
54 : eq(52, 53) : BOOL
55 : 229 { 0xe5 -27 } : BV:8
56 : eq(52, 50) : BOOL
57 : 190 { 0xbe -66 } : BV:8
58 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
62 : eq(52, 61) : BOOL
63 : 125 { 0x7d } : BV:8
64 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
65 : eq(52, 64) : BOOL
66 : 4 { 0x4 } : BV:8
67 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
68 : eq(52, 67) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
71 : eq(52, 70) : BOOL
72 : 122 { 0x7a } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(65, 66, 75) : BV:8
77 : ite(62, 63, 76) : BV:8
78 : ite(59, 60, 77) : BV:8
79 : ite(56, 57, 78) : BV:8
80 : ite(54, 55, 79) : BV:8
81 : bvadd(67, 51) : BV:32
82 : eq(81, 53) : BOOL
83 : eq(81, 50) : BOOL
84 : eq(81, 58) : BOOL
85 : eq(81, 61) : BOOL
86 : eq(81, 64) : BOOL
87 : eq(81, 67) : BOOL
88 : eq(81, 70) : BOOL
89 : ite(88, 72, 73) : BV:8
90 : ite(87, 69, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 63, 91) : BV:8
93 : ite(84, 60, 92) : BV:8
94 : ite(83, 57, 93) : BV:8
95 : ite(82, 55, 94) : BV:8
96 : bvadd(70, 51) : BV:32
97 : eq(96, 53) : BOOL
98 : eq(96, 50) : BOOL
99 : eq(96, 58) : BOOL
100 : eq(96, 61) : BOOL
101 : eq(96, 64) : BOOL
102 : eq(96, 67) : BOOL
103 : eq(96, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 66, 105) : BV:8
107 : ite(100, 63, 106) : BV:8
108 : ite(99, 60, 107) : BV:8
109 : ite(98, 57, 108) : BV:8
110 : ite(97, 55, 109) : BV:8
111 : bvadd(61, 51) : BV:32
112 : eq(111, 53) : BOOL
113 : eq(111, 50) : BOOL
114 : eq(111, 58) : BOOL
115 : eq(111, 61) : BOOL
116 : eq(111, 64) : BOOL
117 : eq(111, 67) : BOOL
118 : eq(111, 70) : BOOL
119 : ite(118, 72, 73) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 60, 122) : BV:8
124 : ite(113, 57, 123) : BV:8
125 : ite(112, 55, 124) : BV:8
126 : bvconcat(80, 95, 110, 125) : BV:32
127 : bvadd(47, 49, 126) : BV:32
128 : eq(127, 53) : BOOL
129 : eq(127, 50) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : ite(134, 72, 73) : BV:8
136 : ite(133, 69, 135) : BV:8
137 : ite(132, 66, 136) : BV:8
138 : ite(131, 63, 137) : BV:8
139 : ite(130, 60, 138) : BV:8
140 : ite(129, 57, 139) : BV:8
141 : ite(128, 55, 140) : BV:8
142 : bvadd(36, 49, 126) : BV:32
143 : eq(142, 53) : BOOL
144 : eq(142, 50) : BOOL
145 : eq(142, 58) : BOOL
146 : eq(142, 61) : BOOL
147 : eq(142, 64) : BOOL
148 : eq(142, 67) : BOOL
149 : eq(142, 70) : BOOL
150 : ite(149, 72, 73) : BV:8
151 : ite(148, 69, 150) : BV:8
152 : ite(147, 66, 151) : BV:8
153 : ite(146, 63, 152) : BV:8
154 : ite(145, 60, 153) : BV:8
155 : ite(144, 57, 154) : BV:8
156 : ite(143, 55, 155) : BV:8
157 : bvadd(32, 49, 126) : BV:32
158 : eq(157, 53) : BOOL
159 : eq(157, 50) : BOOL
160 : eq(157, 58) : BOOL
161 : eq(157, 61) : BOOL
162 : eq(157, 64) : BOOL
163 : eq(157, 67) : BOOL
164 : eq(157, 70) : BOOL
165 : ite(164, 72, 73) : BV:8
166 : ite(163, 69, 165) : BV:8
167 : ite(162, 66, 166) : BV:8
168 : ite(161, 63, 167) : BV:8
169 : ite(160, 60, 168) : BV:8
170 : ite(159, 57, 169) : BV:8
171 : ite(158, 55, 170) : BV:8
172 : bvadd(49, 126) : BV:32
173 : eq(172, 53) : BOOL
174 : eq(172, 50) : BOOL
175 : eq(172, 58) : BOOL
176 : eq(172, 61) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : ite(179, 72, 73) : BV:8
181 : ite(178, 69, 180) : BV:8
182 : ite(177, 66, 181) : BV:8
183 : ite(176, 63, 182) : BV:8
184 : ite(175, 60, 183) : BV:8
185 : ite(174, 57, 184) : BV:8
186 : ite(173, 55, 185) : BV:8
187 : bvconcat(141, 156, 171, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : ite(46, 187, 188) : BV:32
190 : ite(6, 3, 189) : BV:32
191 : lambda(1, 2, 190) : FUNCTION[BV:32,BV:32 -> BV:32]
192 : sym_const(191) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46171Var : BV:32
2 : Lambda46172Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 542932887 ] -> true, [ 542932888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 542932887 ] -> true, [ 542932888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46180Var : BV:32
2 : Lambda46181Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 542932887 { 0x205c7f97 +1.72264373e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 542932888 { 0x205c7f98 +1.72264385e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 542932889 { 0x205c7f99 +1.72264397e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46176Var : BV:32
2 : Lambda46177Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 229 { 0xe5 -27 } : BV:8
16 : eq(12, 10) : BOOL
17 : 190 { 0xbe -66 } : BV:8
18 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
22 : eq(12, 21) : BOOL
23 : 125 { 0x7d } : BV:8
24 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
25 : eq(12, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
28 : eq(12, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
31 : eq(12, 30) : BOOL
32 : 122 { 0x7a } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 15, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 15, 69) : BV:8
71 : bvadd(21, 11) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 10) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 15, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 13) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 15, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 13) : BOOL
105 : eq(103, 10) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 15, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 10) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 15, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 15, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46187Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46188Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46195Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 3842048000 { 0xe5010000 -452919296 -1.781250e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2150629379 { 0x80300003 -2144337917 -1.37500035e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 1044840455 { 0x3e470007 +1.55468833e253 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 2150629378 { 0x80300002 -2144337918 -1.37500023e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1044840452 { 0x3e470004 +1.55468797e253 } : BV:32
19 : eq(8, 18) : BOOL
20 : 125 { 0x7d } : BV:8
21 : eq(8, 7) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1044840454 { 0x3e470006 +1.55468821e253 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 1044840453 { 0x3e470005 +1.55468809e253 } : BV:32
27 : eq(8, 26) : BOOL
28 : 122 { 0x7a } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(13, 14, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 7) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 14, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 7) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 12) : BOOL
72 : eq(69, 15) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 7) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 14, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3824785426
=counter_example_end
=global nodece 54 num_edges_traversed 5
=global nodece 54 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 55
=global nodece 55 nodece z3v487.ce4129.num_edges_traversed1
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3v487.ce4129 94df7aa111cb9c37b63722c97a9957d
=input.spec-%var-x-1
1 : Lambda46355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1947313567 { 0x7411a59f +1.13786685e105 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46356Var : BV:32
18 : Lambda46357Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1947313569 { 0x7411a5a1 +1.13786709e105 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46358Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 405399299 { 0x1829e703 +1.32736241e177 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
61 : eq(59, 60) : BOOL
62 : 67 { 0x43 } : BV:8
63 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
64 : eq(59, 63) : BOOL
65 : 137 { 0x89 -119 } : BV:8
66 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
67 : eq(59, 66) : BOOL
68 : 184 { 0xb8 -72 } : BV:8
69 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
70 : eq(59, 69) : BOOL
71 : 20 { 0x14 } : BV:8
72 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
73 : eq(59, 72) : BOOL
74 : 1 { 0x1 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : 405399298 { 0x1829e702 +1.32736229e177 } : BV:32
82 : bvadd(81, 58) : BV:32
83 : eq(82, 60) : BOOL
84 : eq(82, 63) : BOOL
85 : eq(82, 66) : BOOL
86 : eq(82, 69) : BOOL
87 : eq(82, 72) : BOOL
88 : ite(87, 74, 75) : BV:8
89 : ite(86, 71, 88) : BV:8
90 : ite(85, 68, 89) : BV:8
91 : ite(84, 65, 90) : BV:8
92 : ite(83, 62, 91) : BV:8
93 : 405399297 { 0x1829e701 +1.32736217e177 } : BV:32
94 : bvadd(93, 58) : BV:32
95 : eq(94, 60) : BOOL
96 : eq(94, 63) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 69) : BOOL
99 : eq(94, 72) : BOOL
100 : ite(99, 74, 75) : BV:8
101 : ite(98, 71, 100) : BV:8
102 : ite(97, 68, 101) : BV:8
103 : ite(96, 65, 102) : BV:8
104 : ite(95, 62, 103) : BV:8
105 : 405399296 { 0x1829e700 +1.32736206e177 } : BV:32
106 : bvadd(105, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 63) : BOOL
109 : eq(106, 66) : BOOL
110 : eq(106, 69) : BOOL
111 : eq(106, 72) : BOOL
112 : ite(111, 74, 75) : BV:8
113 : ite(110, 71, 112) : BV:8
114 : ite(109, 68, 113) : BV:8
115 : ite(108, 65, 114) : BV:8
116 : ite(107, 62, 115) : BV:8
117 : bvconcat(80, 92, 104, 116) : BV:32
118 : bvadd(34, 56, 117) : BV:32
119 : eq(118, 60) : BOOL
120 : eq(118, 63) : BOOL
121 : eq(118, 66) : BOOL
122 : eq(118, 69) : BOOL
123 : eq(118, 72) : BOOL
124 : ite(123, 74, 75) : BV:8
125 : ite(122, 71, 124) : BV:8
126 : ite(121, 68, 125) : BV:8
127 : ite(120, 65, 126) : BV:8
128 : ite(119, 62, 127) : BV:8
129 : 2 { 0x2 +1.23e129 } : BV:32
130 : bvadd(129, 56, 117) : BV:32
131 : eq(130, 60) : BOOL
132 : eq(130, 63) : BOOL
133 : eq(130, 66) : BOOL
134 : eq(130, 69) : BOOL
135 : eq(130, 72) : BOOL
136 : ite(135, 74, 75) : BV:8
137 : ite(134, 71, 136) : BV:8
138 : ite(133, 68, 137) : BV:8
139 : ite(132, 65, 138) : BV:8
140 : ite(131, 62, 139) : BV:8
141 : 1 { 0x1 +1.11e129 } : BV:32
142 : bvadd(141, 56, 117) : BV:32
143 : eq(142, 60) : BOOL
144 : eq(142, 63) : BOOL
145 : eq(142, 66) : BOOL
146 : eq(142, 69) : BOOL
147 : eq(142, 72) : BOOL
148 : ite(147, 74, 75) : BV:8
149 : ite(146, 71, 148) : BV:8
150 : ite(145, 68, 149) : BV:8
151 : ite(144, 65, 150) : BV:8
152 : ite(143, 62, 151) : BV:8
153 : bvadd(56, 117) : BV:32
154 : eq(153, 60) : BOOL
155 : eq(153, 63) : BOOL
156 : eq(153, 66) : BOOL
157 : eq(153, 69) : BOOL
158 : eq(153, 72) : BOOL
159 : ite(158, 74, 75) : BV:8
160 : ite(157, 71, 159) : BV:8
161 : ite(156, 68, 160) : BV:8
162 : ite(155, 65, 161) : BV:8
163 : ite(154, 62, 162) : BV:8
164 : bvconcat(128, 140, 152, 163) : BV:32
165 : ite(55, 2, 164) : BV:32
166 : lambda(52, 165) : FUNCTION[BV:32 -> BV:32]
167 : map(51, 166) : MAP[BV:32 -> BV:32]
168 : lambda(17, 167) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
169 : map(16, 168) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
170 : sym_const(169) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46375Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1947313567 { 0x7411a59f +1.13786685e105 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46376Var : BV:32
18 : Lambda46377Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1947313569 { 0x7411a5a1 +1.13786709e105 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46378Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 405399299 { 0x1829e703 +1.32736241e177 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
80 : eq(78, 79) : BOOL
81 : 67 { 0x43 } : BV:8
82 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
83 : eq(78, 82) : BOOL
84 : 137 { 0x89 -119 } : BV:8
85 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
86 : eq(78, 85) : BOOL
87 : 184 { 0xb8 -72 } : BV:8
88 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
89 : eq(78, 88) : BOOL
90 : 20 { 0x14 } : BV:8
91 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
92 : eq(78, 91) : BOOL
93 : 1 { 0x1 } : BV:8
94 : 0 { 0x0 } : BV:8
95 : ite(92, 93, 94) : BV:8
96 : ite(89, 90, 95) : BV:8
97 : ite(86, 87, 96) : BV:8
98 : ite(83, 84, 97) : BV:8
99 : ite(80, 81, 98) : BV:8
100 : 405399298 { 0x1829e702 +1.32736229e177 } : BV:32
101 : bvadd(100, 77) : BV:32
102 : eq(101, 79) : BOOL
103 : eq(101, 82) : BOOL
104 : eq(101, 85) : BOOL
105 : eq(101, 88) : BOOL
106 : eq(101, 91) : BOOL
107 : ite(106, 93, 94) : BV:8
108 : ite(105, 90, 107) : BV:8
109 : ite(104, 87, 108) : BV:8
110 : ite(103, 84, 109) : BV:8
111 : ite(102, 81, 110) : BV:8
112 : 405399297 { 0x1829e701 +1.32736217e177 } : BV:32
113 : bvadd(112, 77) : BV:32
114 : eq(113, 79) : BOOL
115 : eq(113, 82) : BOOL
116 : eq(113, 85) : BOOL
117 : eq(113, 88) : BOOL
118 : eq(113, 91) : BOOL
119 : ite(118, 93, 94) : BV:8
120 : ite(117, 90, 119) : BV:8
121 : ite(116, 87, 120) : BV:8
122 : ite(115, 84, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : 405399296 { 0x1829e700 +1.32736206e177 } : BV:32
125 : bvadd(124, 77) : BV:32
126 : eq(125, 79) : BOOL
127 : eq(125, 82) : BOOL
128 : eq(125, 85) : BOOL
129 : eq(125, 88) : BOOL
130 : eq(125, 91) : BOOL
131 : ite(130, 93, 94) : BV:8
132 : ite(129, 90, 131) : BV:8
133 : ite(128, 87, 132) : BV:8
134 : ite(127, 84, 133) : BV:8
135 : ite(126, 81, 134) : BV:8
136 : bvconcat(99, 111, 123, 135) : BV:32
137 : bvadd(34, 75, 136) : BV:32
138 : eq(137, 79) : BOOL
139 : eq(137, 82) : BOOL
140 : eq(137, 85) : BOOL
141 : eq(137, 88) : BOOL
142 : eq(137, 91) : BOOL
143 : ite(142, 93, 94) : BV:8
144 : ite(141, 90, 143) : BV:8
145 : ite(140, 87, 144) : BV:8
146 : ite(139, 84, 145) : BV:8
147 : ite(138, 81, 146) : BV:8
148 : 2 { 0x2 +1.23e129 } : BV:32
149 : bvadd(148, 75, 136) : BV:32
150 : eq(149, 79) : BOOL
151 : eq(149, 82) : BOOL
152 : eq(149, 85) : BOOL
153 : eq(149, 88) : BOOL
154 : eq(149, 91) : BOOL
155 : ite(154, 93, 94) : BV:8
156 : ite(153, 90, 155) : BV:8
157 : ite(152, 87, 156) : BV:8
158 : ite(151, 84, 157) : BV:8
159 : ite(150, 81, 158) : BV:8
160 : 1 { 0x1 +1.11e129 } : BV:32
161 : bvadd(160, 75, 136) : BV:32
162 : eq(161, 79) : BOOL
163 : eq(161, 82) : BOOL
164 : eq(161, 85) : BOOL
165 : eq(161, 88) : BOOL
166 : eq(161, 91) : BOOL
167 : ite(166, 93, 94) : BV:8
168 : ite(165, 90, 167) : BV:8
169 : ite(164, 87, 168) : BV:8
170 : ite(163, 84, 169) : BV:8
171 : ite(162, 81, 170) : BV:8
172 : bvadd(75, 136) : BV:32
173 : eq(172, 79) : BOOL
174 : eq(172, 82) : BOOL
175 : eq(172, 85) : BOOL
176 : eq(172, 88) : BOOL
177 : eq(172, 91) : BOOL
178 : ite(177, 93, 94) : BV:8
179 : ite(176, 90, 178) : BV:8
180 : ite(175, 87, 179) : BV:8
181 : ite(174, 84, 180) : BV:8
182 : ite(173, 81, 181) : BV:8
183 : bvconcat(147, 159, 171, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : ite(74, 183, 184) : BV:32
186 : ite(55, 2, 185) : BV:32
187 : lambda(52, 186) : FUNCTION[BV:32 -> BV:32]
188 : map(51, 187) : MAP[BV:32 -> BV:32]
189 : lambda(17, 188) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
190 : map(16, 189) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
191 : sym_const(190) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 339970487 ] -> 0, [ 339970488; 339970488 ] -> 1, [ 339970489; 405399291 ] -> 0, [ 405399292; 405399292 ] -> 184, [ 405399293; 405399293 ] -> 137, [ 405399294; 405399294 ] -> 67, [ 405399295; 405399295 ] -> 20, [ 405399296; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 260; 263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 264; 287 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 288; 291 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 292; 2969567235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2969567236; 2969567239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2969567240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 288 { 0x120 +1.3433e129 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2969567236 { 0xb1000004 -1325400060 -1.47e227 } : BV:32
=input.dst.llvm-%n
1 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.llvm-%x
1 : 405399296 { 0x1829e700 +1.32736206e177 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46382Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46383Var : BV:32
18 : eq(17, 2) : BOOL
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvmul(8, 17) : BV:32
21 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
22 : bvadd(4, 20, 21) : BV:32
23 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
24 : eq(22, 23) : BOOL
25 : 67 { 0x43 } : BV:8
26 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
27 : eq(22, 26) : BOOL
28 : 137 { 0x89 -119 } : BV:8
29 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
30 : eq(22, 29) : BOOL
31 : 184 { 0xb8 -72 } : BV:8
32 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
33 : eq(22, 32) : BOOL
34 : 20 { 0x14 } : BV:8
35 : eq(22, 21) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 34, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 20, 21) : BV:32
45 : eq(44, 23) : BOOL
46 : eq(44, 26) : BOOL
47 : eq(44, 29) : BOOL
48 : eq(44, 32) : BOOL
49 : eq(44, 21) : BOOL
50 : ite(49, 36, 37) : BV:8
51 : ite(48, 34, 50) : BV:8
52 : ite(47, 31, 51) : BV:8
53 : ite(46, 28, 52) : BV:8
54 : ite(45, 25, 53) : BV:8
55 : bvadd(19, 20, 21) : BV:32
56 : eq(55, 23) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 21) : BOOL
61 : ite(60, 36, 37) : BV:8
62 : ite(59, 34, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 28, 63) : BV:8
65 : ite(56, 25, 64) : BV:8
66 : bvadd(20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 21) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 31, 73) : BV:8
75 : ite(68, 28, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : bvconcat(42, 54, 65, 76) : BV:32
78 : ite(18, 19, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda46364Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda46365Var : BV:32
20 : eq(19, 4) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvmul(10, 19) : BV:32
23 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
24 : bvadd(6, 22, 23) : BV:32
25 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
26 : eq(24, 25) : BOOL
27 : 67 { 0x43 } : BV:8
28 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
29 : eq(24, 28) : BOOL
30 : 137 { 0x89 -119 } : BV:8
31 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
32 : eq(24, 31) : BOOL
33 : 184 { 0xb8 -72 } : BV:8
34 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
35 : eq(24, 34) : BOOL
36 : 20 { 0x14 } : BV:8
37 : eq(24, 23) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(35, 36, 40) : BV:8
42 : ite(32, 33, 41) : BV:8
43 : ite(29, 30, 42) : BV:8
44 : ite(26, 27, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 22, 23) : BV:32
47 : eq(46, 25) : BOOL
48 : eq(46, 28) : BOOL
49 : eq(46, 31) : BOOL
50 : eq(46, 34) : BOOL
51 : eq(46, 23) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 36, 52) : BV:8
54 : ite(49, 33, 53) : BV:8
55 : ite(48, 30, 54) : BV:8
56 : ite(47, 27, 55) : BV:8
57 : bvadd(21, 22, 23) : BV:32
58 : eq(57, 25) : BOOL
59 : eq(57, 28) : BOOL
60 : eq(57, 31) : BOOL
61 : eq(57, 34) : BOOL
62 : eq(57, 23) : BOOL
63 : ite(62, 38, 39) : BV:8
64 : ite(61, 36, 63) : BV:8
65 : ite(60, 33, 64) : BV:8
66 : ite(59, 30, 65) : BV:8
67 : ite(58, 27, 66) : BV:8
68 : bvadd(22, 23) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : eq(68, 34) : BOOL
73 : eq(68, 23) : BOOL
74 : ite(73, 38, 39) : BV:8
75 : ite(72, 36, 74) : BV:8
76 : ite(71, 33, 75) : BV:8
77 : ite(70, 30, 76) : BV:8
78 : ite(69, 27, 77) : BV:8
79 : bvconcat(44, 56, 67, 78) : BV:32
80 : ite(20, 21, 79) : BV:32
81 : lambda(19, 80) : FUNCTION[BV:32 -> BV:32]
82 : map(18, 81) : MAP[BV:32 -> BV:32]
83 : sum(1, 2, 82) : SUM[UNIT,MAP[BV:32 -> BV:32]]
84 : sym_const(83) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : eq(1, 1) : BOOL
19 : bvmul(7, 1) : BV:32
20 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
21 : bvadd(3, 19, 20) : BV:32
22 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
23 : eq(21, 22) : BOOL
24 : 67 { 0x43 } : BV:8
25 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
26 : eq(21, 25) : BOOL
27 : 137 { 0x89 -119 } : BV:8
28 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
29 : eq(21, 28) : BOOL
30 : 184 { 0xb8 -72 } : BV:8
31 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
32 : eq(21, 31) : BOOL
33 : 20 { 0x14 } : BV:8
34 : eq(21, 20) : BOOL
35 : 1 { 0x1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 33, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(26, 27, 39) : BV:8
41 : ite(23, 24, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 19, 20) : BV:32
44 : eq(43, 22) : BOOL
45 : eq(43, 25) : BOOL
46 : eq(43, 28) : BOOL
47 : eq(43, 31) : BOOL
48 : eq(43, 20) : BOOL
49 : ite(48, 35, 36) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 30, 50) : BV:8
52 : ite(45, 27, 51) : BV:8
53 : ite(44, 24, 52) : BV:8
54 : bvadd(15, 19, 20) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 25) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 31) : BOOL
59 : eq(54, 20) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 33, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 27, 62) : BV:8
64 : ite(55, 24, 63) : BV:8
65 : bvadd(19, 20) : BV:32
66 : eq(65, 22) : BOOL
67 : eq(65, 25) : BOOL
68 : eq(65, 28) : BOOL
69 : eq(65, 31) : BOOL
70 : eq(65, 20) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 33, 71) : BV:8
73 : ite(68, 30, 72) : BV:8
74 : ite(67, 27, 73) : BV:8
75 : ite(66, 24, 74) : BV:8
76 : bvconcat(41, 53, 64, 75) : BV:32
77 : ite(18, 15, 76) : BV:32
78 : sum(16, 17, 77) : SUM[UNIT,BV:32]
79 : sym_const(78) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 705377943 { 0x2a0b3697 +1.8760344e213 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46387Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46388Var : BV:32
18 : eq(17, 2) : BOOL
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvmul(8, 17) : BV:32
21 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
22 : bvadd(4, 20, 21) : BV:32
23 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
24 : eq(22, 23) : BOOL
25 : 67 { 0x43 } : BV:8
26 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
27 : eq(22, 26) : BOOL
28 : 137 { 0x89 -119 } : BV:8
29 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
30 : eq(22, 29) : BOOL
31 : 184 { 0xb8 -72 } : BV:8
32 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
33 : eq(22, 32) : BOOL
34 : 20 { 0x14 } : BV:8
35 : eq(22, 21) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 34, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 20, 21) : BV:32
45 : eq(44, 23) : BOOL
46 : eq(44, 26) : BOOL
47 : eq(44, 29) : BOOL
48 : eq(44, 32) : BOOL
49 : eq(44, 21) : BOOL
50 : ite(49, 36, 37) : BV:8
51 : ite(48, 34, 50) : BV:8
52 : ite(47, 31, 51) : BV:8
53 : ite(46, 28, 52) : BV:8
54 : ite(45, 25, 53) : BV:8
55 : bvadd(19, 20, 21) : BV:32
56 : eq(55, 23) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 21) : BOOL
61 : ite(60, 36, 37) : BV:8
62 : ite(59, 34, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 28, 63) : BV:8
65 : ite(56, 25, 64) : BV:8
66 : bvadd(20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 21) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 31, 73) : BV:8
75 : ite(68, 28, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : bvconcat(42, 54, 65, 76) : BV:32
78 : ite(18, 19, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2016495344 { 0x783146f0 +1.38497734e113 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2969567236 { 0xb1000004 -1325400060 -1.47e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2969567239 { 0xb1000007 -1325400057 -1.83e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 263 { 0x107 +1.3135e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 288 { 0x120 +1.3433e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 291 { 0x123 +1.3468e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46197Var : BV:32
2 : Lambda46198Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 405399299 { 0x1829e703 +1.32736241e177 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
14 : eq(12, 13) : BOOL
15 : 67 { 0x43 } : BV:8
16 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
17 : eq(12, 16) : BOOL
18 : 137 { 0x89 -119 } : BV:8
19 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
20 : eq(12, 19) : BOOL
21 : 184 { 0xb8 -72 } : BV:8
22 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
23 : eq(12, 22) : BOOL
24 : 20 { 0x14 } : BV:8
25 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
26 : eq(12, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : 405399298 { 0x1829e702 +1.32736229e177 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : eq(35, 22) : BOOL
40 : eq(35, 25) : BOOL
41 : ite(40, 27, 28) : BV:8
42 : ite(39, 24, 41) : BV:8
43 : ite(38, 21, 42) : BV:8
44 : ite(37, 18, 43) : BV:8
45 : ite(36, 15, 44) : BV:8
46 : 405399297 { 0x1829e701 +1.32736217e177 } : BV:32
47 : bvadd(46, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : ite(52, 27, 28) : BV:8
54 : ite(51, 24, 53) : BV:8
55 : ite(50, 21, 54) : BV:8
56 : ite(49, 18, 55) : BV:8
57 : ite(48, 15, 56) : BV:8
58 : 405399296 { 0x1829e700 +1.32736206e177 } : BV:32
59 : bvadd(58, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 24, 65) : BV:8
67 : ite(62, 21, 66) : BV:8
68 : ite(61, 18, 67) : BV:8
69 : ite(60, 15, 68) : BV:8
70 : bvconcat(33, 45, 57, 69) : BV:32
71 : bvadd(7, 9, 70) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 16) : BOOL
74 : eq(71, 19) : BOOL
75 : eq(71, 22) : BOOL
76 : eq(71, 25) : BOOL
77 : ite(76, 27, 28) : BV:8
78 : ite(75, 24, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 18, 79) : BV:8
81 : ite(72, 15, 80) : BV:8
82 : 2 { 0x2 +1.23e129 } : BV:32
83 : bvadd(82, 9, 70) : BV:32
84 : eq(83, 13) : BOOL
85 : eq(83, 16) : BOOL
86 : eq(83, 19) : BOOL
87 : eq(83, 22) : BOOL
88 : eq(83, 25) : BOOL
89 : ite(88, 27, 28) : BV:8
90 : ite(87, 24, 89) : BV:8
91 : ite(86, 21, 90) : BV:8
92 : ite(85, 18, 91) : BV:8
93 : ite(84, 15, 92) : BV:8
94 : 1 { 0x1 +1.11e129 } : BV:32
95 : bvadd(94, 9, 70) : BV:32
96 : eq(95, 13) : BOOL
97 : eq(95, 16) : BOOL
98 : eq(95, 19) : BOOL
99 : eq(95, 22) : BOOL
100 : eq(95, 25) : BOOL
101 : ite(100, 27, 28) : BV:8
102 : ite(99, 24, 101) : BV:8
103 : ite(98, 21, 102) : BV:8
104 : ite(97, 18, 103) : BV:8
105 : ite(96, 15, 104) : BV:8
106 : bvadd(9, 70) : BV:32
107 : eq(106, 13) : BOOL
108 : eq(106, 16) : BOOL
109 : eq(106, 19) : BOOL
110 : eq(106, 22) : BOOL
111 : eq(106, 25) : BOOL
112 : ite(111, 27, 28) : BV:8
113 : ite(110, 24, 112) : BV:8
114 : ite(109, 21, 113) : BV:8
115 : ite(108, 18, 114) : BV:8
116 : ite(107, 15, 115) : BV:8
117 : bvconcat(81, 93, 105, 116) : BV:32
118 : ite(6, 3, 117) : BV:32
119 : lambda(1, 2, 118) : FUNCTION[BV:32,BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46199Var : BV:32
2 : Lambda46200Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1947313567 { 0x7411a59f +1.13786685e105 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1947313569 { 0x7411a5a1 +1.13786709e105 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1947313567 ] -> true, [ 1947313568; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1947313567 ] -> true, [ 1947313568; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46209Var : BV:32
2 : Lambda46210Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1947313567 { 0x7411a59f +1.13786685e105 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1947313569 { 0x7411a5a1 +1.13786709e105 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46213Var : BV:32
2 : Lambda46214Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1947313567 { 0x7411a59f +1.13786685e105 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1947313569 { 0x7411a5a1 +1.13786709e105 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : 405399299 { 0x1829e703 +1.32736241e177 } : BV:32
50 : bvmul(33, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
53 : eq(51, 52) : BOOL
54 : 67 { 0x43 } : BV:8
55 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
56 : eq(51, 55) : BOOL
57 : 137 { 0x89 -119 } : BV:8
58 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
59 : eq(51, 58) : BOOL
60 : 184 { 0xb8 -72 } : BV:8
61 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
62 : eq(51, 61) : BOOL
63 : 20 { 0x14 } : BV:8
64 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
65 : eq(51, 64) : BOOL
66 : 1 { 0x1 } : BV:8
67 : 0 { 0x0 } : BV:8
68 : ite(65, 66, 67) : BV:8
69 : ite(62, 63, 68) : BV:8
70 : ite(59, 60, 69) : BV:8
71 : ite(56, 57, 70) : BV:8
72 : ite(53, 54, 71) : BV:8
73 : 405399298 { 0x1829e702 +1.32736229e177 } : BV:32
74 : bvadd(73, 50) : BV:32
75 : eq(74, 52) : BOOL
76 : eq(74, 55) : BOOL
77 : eq(74, 58) : BOOL
78 : eq(74, 61) : BOOL
79 : eq(74, 64) : BOOL
80 : ite(79, 66, 67) : BV:8
81 : ite(78, 63, 80) : BV:8
82 : ite(77, 60, 81) : BV:8
83 : ite(76, 57, 82) : BV:8
84 : ite(75, 54, 83) : BV:8
85 : 405399297 { 0x1829e701 +1.32736217e177 } : BV:32
86 : bvadd(85, 50) : BV:32
87 : eq(86, 52) : BOOL
88 : eq(86, 55) : BOOL
89 : eq(86, 58) : BOOL
90 : eq(86, 61) : BOOL
91 : eq(86, 64) : BOOL
92 : ite(91, 66, 67) : BV:8
93 : ite(90, 63, 92) : BV:8
94 : ite(89, 60, 93) : BV:8
95 : ite(88, 57, 94) : BV:8
96 : ite(87, 54, 95) : BV:8
97 : 405399296 { 0x1829e700 +1.32736206e177 } : BV:32
98 : bvadd(97, 50) : BV:32
99 : eq(98, 52) : BOOL
100 : eq(98, 55) : BOOL
101 : eq(98, 58) : BOOL
102 : eq(98, 61) : BOOL
103 : eq(98, 64) : BOOL
104 : ite(103, 66, 67) : BV:8
105 : ite(102, 63, 104) : BV:8
106 : ite(101, 60, 105) : BV:8
107 : ite(100, 57, 106) : BV:8
108 : ite(99, 54, 107) : BV:8
109 : bvconcat(72, 84, 96, 108) : BV:32
110 : bvadd(30, 48, 109) : BV:32
111 : eq(110, 52) : BOOL
112 : eq(110, 55) : BOOL
113 : eq(110, 58) : BOOL
114 : eq(110, 61) : BOOL
115 : eq(110, 64) : BOOL
116 : ite(115, 66, 67) : BV:8
117 : ite(114, 63, 116) : BV:8
118 : ite(113, 60, 117) : BV:8
119 : ite(112, 57, 118) : BV:8
120 : ite(111, 54, 119) : BV:8
121 : 2 { 0x2 +1.23e129 } : BV:32
122 : bvadd(121, 48, 109) : BV:32
123 : eq(122, 52) : BOOL
124 : eq(122, 55) : BOOL
125 : eq(122, 58) : BOOL
126 : eq(122, 61) : BOOL
127 : eq(122, 64) : BOOL
128 : ite(127, 66, 67) : BV:8
129 : ite(126, 63, 128) : BV:8
130 : ite(125, 60, 129) : BV:8
131 : ite(124, 57, 130) : BV:8
132 : ite(123, 54, 131) : BV:8
133 : 1 { 0x1 +1.11e129 } : BV:32
134 : bvadd(133, 48, 109) : BV:32
135 : eq(134, 52) : BOOL
136 : eq(134, 55) : BOOL
137 : eq(134, 58) : BOOL
138 : eq(134, 61) : BOOL
139 : eq(134, 64) : BOOL
140 : ite(139, 66, 67) : BV:8
141 : ite(138, 63, 140) : BV:8
142 : ite(137, 60, 141) : BV:8
143 : ite(136, 57, 142) : BV:8
144 : ite(135, 54, 143) : BV:8
145 : bvadd(48, 109) : BV:32
146 : eq(145, 52) : BOOL
147 : eq(145, 55) : BOOL
148 : eq(145, 58) : BOOL
149 : eq(145, 61) : BOOL
150 : eq(145, 64) : BOOL
151 : ite(150, 66, 67) : BV:8
152 : ite(149, 63, 151) : BV:8
153 : ite(148, 60, 152) : BV:8
154 : ite(147, 57, 153) : BV:8
155 : ite(146, 54, 154) : BV:8
156 : bvconcat(120, 132, 144, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : ite(47, 156, 157) : BV:32
159 : ite(6, 3, 158) : BV:32
160 : lambda(1, 2, 159) : FUNCTION[BV:32,BV:32 -> BV:32]
161 : sym_const(160) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46218Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
11 : eq(9, 10) : BOOL
12 : 67 { 0x43 } : BV:8
13 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
14 : eq(9, 13) : BOOL
15 : 137 { 0x89 -119 } : BV:8
16 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
17 : eq(9, 16) : BOOL
18 : 184 { 0xb8 -72 } : BV:8
19 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
20 : eq(9, 19) : BOOL
21 : 20 { 0x14 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46219Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
11 : eq(9, 10) : BOOL
12 : 67 { 0x43 } : BV:8
13 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
14 : eq(9, 13) : BOOL
15 : 137 { 0x89 -119 } : BV:8
16 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
17 : eq(9, 16) : BOOL
18 : 184 { 0xb8 -72 } : BV:8
19 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
20 : eq(9, 19) : BOOL
21 : 20 { 0x14 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46226Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
11 : eq(9, 10) : BOOL
12 : 67 { 0x43 } : BV:8
13 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
14 : eq(9, 13) : BOOL
15 : 137 { 0x89 -119 } : BV:8
16 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
17 : eq(9, 16) : BOOL
18 : 184 { 0xb8 -72 } : BV:8
19 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
20 : eq(9, 19) : BOOL
21 : 20 { 0x14 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
546297313
=counter_example_end
=global nodece 55 num_edges_traversed 1
=global nodece 55 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 56
=global nodece 56 nodece z3v487.ce4298.num_edges_traversed2
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(epsilon)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3v487.ce4298 a9757abefed245f17e5aca6dca3182a
=input.spec-%var-x-1
1 : Lambda46355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1947313567 { 0x7411a59f +1.13786685e105 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46356Var : BV:32
18 : Lambda46357Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1947313569 { 0x7411a5a1 +1.13786709e105 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46358Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 405399299 { 0x1829e703 +1.32736241e177 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
61 : eq(59, 60) : BOOL
62 : 67 { 0x43 } : BV:8
63 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
64 : eq(59, 63) : BOOL
65 : 137 { 0x89 -119 } : BV:8
66 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
67 : eq(59, 66) : BOOL
68 : 184 { 0xb8 -72 } : BV:8
69 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
70 : eq(59, 69) : BOOL
71 : 20 { 0x14 } : BV:8
72 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
73 : eq(59, 72) : BOOL
74 : 1 { 0x1 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : 405399298 { 0x1829e702 +1.32736229e177 } : BV:32
82 : bvadd(81, 58) : BV:32
83 : eq(82, 60) : BOOL
84 : eq(82, 63) : BOOL
85 : eq(82, 66) : BOOL
86 : eq(82, 69) : BOOL
87 : eq(82, 72) : BOOL
88 : ite(87, 74, 75) : BV:8
89 : ite(86, 71, 88) : BV:8
90 : ite(85, 68, 89) : BV:8
91 : ite(84, 65, 90) : BV:8
92 : ite(83, 62, 91) : BV:8
93 : 405399297 { 0x1829e701 +1.32736217e177 } : BV:32
94 : bvadd(93, 58) : BV:32
95 : eq(94, 60) : BOOL
96 : eq(94, 63) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 69) : BOOL
99 : eq(94, 72) : BOOL
100 : ite(99, 74, 75) : BV:8
101 : ite(98, 71, 100) : BV:8
102 : ite(97, 68, 101) : BV:8
103 : ite(96, 65, 102) : BV:8
104 : ite(95, 62, 103) : BV:8
105 : 405399296 { 0x1829e700 +1.32736206e177 } : BV:32
106 : bvadd(105, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 63) : BOOL
109 : eq(106, 66) : BOOL
110 : eq(106, 69) : BOOL
111 : eq(106, 72) : BOOL
112 : ite(111, 74, 75) : BV:8
113 : ite(110, 71, 112) : BV:8
114 : ite(109, 68, 113) : BV:8
115 : ite(108, 65, 114) : BV:8
116 : ite(107, 62, 115) : BV:8
117 : bvconcat(80, 92, 104, 116) : BV:32
118 : bvadd(34, 56, 117) : BV:32
119 : eq(118, 60) : BOOL
120 : eq(118, 63) : BOOL
121 : eq(118, 66) : BOOL
122 : eq(118, 69) : BOOL
123 : eq(118, 72) : BOOL
124 : ite(123, 74, 75) : BV:8
125 : ite(122, 71, 124) : BV:8
126 : ite(121, 68, 125) : BV:8
127 : ite(120, 65, 126) : BV:8
128 : ite(119, 62, 127) : BV:8
129 : 2 { 0x2 +1.23e129 } : BV:32
130 : bvadd(129, 56, 117) : BV:32
131 : eq(130, 60) : BOOL
132 : eq(130, 63) : BOOL
133 : eq(130, 66) : BOOL
134 : eq(130, 69) : BOOL
135 : eq(130, 72) : BOOL
136 : ite(135, 74, 75) : BV:8
137 : ite(134, 71, 136) : BV:8
138 : ite(133, 68, 137) : BV:8
139 : ite(132, 65, 138) : BV:8
140 : ite(131, 62, 139) : BV:8
141 : 1 { 0x1 +1.11e129 } : BV:32
142 : bvadd(141, 56, 117) : BV:32
143 : eq(142, 60) : BOOL
144 : eq(142, 63) : BOOL
145 : eq(142, 66) : BOOL
146 : eq(142, 69) : BOOL
147 : eq(142, 72) : BOOL
148 : ite(147, 74, 75) : BV:8
149 : ite(146, 71, 148) : BV:8
150 : ite(145, 68, 149) : BV:8
151 : ite(144, 65, 150) : BV:8
152 : ite(143, 62, 151) : BV:8
153 : bvadd(56, 117) : BV:32
154 : eq(153, 60) : BOOL
155 : eq(153, 63) : BOOL
156 : eq(153, 66) : BOOL
157 : eq(153, 69) : BOOL
158 : eq(153, 72) : BOOL
159 : ite(158, 74, 75) : BV:8
160 : ite(157, 71, 159) : BV:8
161 : ite(156, 68, 160) : BV:8
162 : ite(155, 65, 161) : BV:8
163 : ite(154, 62, 162) : BV:8
164 : bvconcat(128, 140, 152, 163) : BV:32
165 : ite(55, 2, 164) : BV:32
166 : lambda(52, 165) : FUNCTION[BV:32 -> BV:32]
167 : map(51, 166) : MAP[BV:32 -> BV:32]
168 : lambda(17, 167) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
169 : map(16, 168) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
170 : sym_const(169) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46375Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1947313567 { 0x7411a59f +1.13786685e105 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46376Var : BV:32
18 : Lambda46377Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1947313569 { 0x7411a5a1 +1.13786709e105 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46378Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 405399299 { 0x1829e703 +1.32736241e177 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
80 : eq(78, 79) : BOOL
81 : 67 { 0x43 } : BV:8
82 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
83 : eq(78, 82) : BOOL
84 : 137 { 0x89 -119 } : BV:8
85 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
86 : eq(78, 85) : BOOL
87 : 184 { 0xb8 -72 } : BV:8
88 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
89 : eq(78, 88) : BOOL
90 : 20 { 0x14 } : BV:8
91 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
92 : eq(78, 91) : BOOL
93 : 1 { 0x1 } : BV:8
94 : 0 { 0x0 } : BV:8
95 : ite(92, 93, 94) : BV:8
96 : ite(89, 90, 95) : BV:8
97 : ite(86, 87, 96) : BV:8
98 : ite(83, 84, 97) : BV:8
99 : ite(80, 81, 98) : BV:8
100 : 405399298 { 0x1829e702 +1.32736229e177 } : BV:32
101 : bvadd(100, 77) : BV:32
102 : eq(101, 79) : BOOL
103 : eq(101, 82) : BOOL
104 : eq(101, 85) : BOOL
105 : eq(101, 88) : BOOL
106 : eq(101, 91) : BOOL
107 : ite(106, 93, 94) : BV:8
108 : ite(105, 90, 107) : BV:8
109 : ite(104, 87, 108) : BV:8
110 : ite(103, 84, 109) : BV:8
111 : ite(102, 81, 110) : BV:8
112 : 405399297 { 0x1829e701 +1.32736217e177 } : BV:32
113 : bvadd(112, 77) : BV:32
114 : eq(113, 79) : BOOL
115 : eq(113, 82) : BOOL
116 : eq(113, 85) : BOOL
117 : eq(113, 88) : BOOL
118 : eq(113, 91) : BOOL
119 : ite(118, 93, 94) : BV:8
120 : ite(117, 90, 119) : BV:8
121 : ite(116, 87, 120) : BV:8
122 : ite(115, 84, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : 405399296 { 0x1829e700 +1.32736206e177 } : BV:32
125 : bvadd(124, 77) : BV:32
126 : eq(125, 79) : BOOL
127 : eq(125, 82) : BOOL
128 : eq(125, 85) : BOOL
129 : eq(125, 88) : BOOL
130 : eq(125, 91) : BOOL
131 : ite(130, 93, 94) : BV:8
132 : ite(129, 90, 131) : BV:8
133 : ite(128, 87, 132) : BV:8
134 : ite(127, 84, 133) : BV:8
135 : ite(126, 81, 134) : BV:8
136 : bvconcat(99, 111, 123, 135) : BV:32
137 : bvadd(34, 75, 136) : BV:32
138 : eq(137, 79) : BOOL
139 : eq(137, 82) : BOOL
140 : eq(137, 85) : BOOL
141 : eq(137, 88) : BOOL
142 : eq(137, 91) : BOOL
143 : ite(142, 93, 94) : BV:8
144 : ite(141, 90, 143) : BV:8
145 : ite(140, 87, 144) : BV:8
146 : ite(139, 84, 145) : BV:8
147 : ite(138, 81, 146) : BV:8
148 : 2 { 0x2 +1.23e129 } : BV:32
149 : bvadd(148, 75, 136) : BV:32
150 : eq(149, 79) : BOOL
151 : eq(149, 82) : BOOL
152 : eq(149, 85) : BOOL
153 : eq(149, 88) : BOOL
154 : eq(149, 91) : BOOL
155 : ite(154, 93, 94) : BV:8
156 : ite(153, 90, 155) : BV:8
157 : ite(152, 87, 156) : BV:8
158 : ite(151, 84, 157) : BV:8
159 : ite(150, 81, 158) : BV:8
160 : 1 { 0x1 +1.11e129 } : BV:32
161 : bvadd(160, 75, 136) : BV:32
162 : eq(161, 79) : BOOL
163 : eq(161, 82) : BOOL
164 : eq(161, 85) : BOOL
165 : eq(161, 88) : BOOL
166 : eq(161, 91) : BOOL
167 : ite(166, 93, 94) : BV:8
168 : ite(165, 90, 167) : BV:8
169 : ite(164, 87, 168) : BV:8
170 : ite(163, 84, 169) : BV:8
171 : ite(162, 81, 170) : BV:8
172 : bvadd(75, 136) : BV:32
173 : eq(172, 79) : BOOL
174 : eq(172, 82) : BOOL
175 : eq(172, 85) : BOOL
176 : eq(172, 88) : BOOL
177 : eq(172, 91) : BOOL
178 : ite(177, 93, 94) : BV:8
179 : ite(176, 90, 178) : BV:8
180 : ite(175, 87, 179) : BV:8
181 : ite(174, 84, 180) : BV:8
182 : ite(173, 81, 181) : BV:8
183 : bvconcat(147, 159, 171, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : ite(74, 183, 184) : BV:32
186 : ite(55, 2, 185) : BV:32
187 : lambda(52, 186) : FUNCTION[BV:32 -> BV:32]
188 : map(51, 187) : MAP[BV:32 -> BV:32]
189 : lambda(17, 188) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
190 : map(16, 189) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
191 : sym_const(190) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 339970487 ] -> 0, [ 339970488; 339970488 ] -> 1, [ 339970489; 405399291 ] -> 0, [ 405399292; 405399292 ] -> 184, [ 405399293; 405399293 ] -> 137, [ 405399294; 405399294 ] -> 67, [ 405399295; 405399295 ] -> 20, [ 405399296; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 260; 263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 264; 287 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 288; 291 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 292; 2969567235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2969567236; 2969567239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2969567240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 288 { 0x120 +1.3433e129 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2969567236 { 0xb1000004 -1325400060 -1.47e227 } : BV:32
=input.dst.llvm-%n
1 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.llvm-%x
1 : 405399296 { 0x1829e700 +1.32736206e177 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46382Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46383Var : BV:32
18 : eq(17, 2) : BOOL
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvmul(8, 17) : BV:32
21 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
22 : bvadd(4, 20, 21) : BV:32
23 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
24 : eq(22, 23) : BOOL
25 : 67 { 0x43 } : BV:8
26 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
27 : eq(22, 26) : BOOL
28 : 137 { 0x89 -119 } : BV:8
29 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
30 : eq(22, 29) : BOOL
31 : 184 { 0xb8 -72 } : BV:8
32 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
33 : eq(22, 32) : BOOL
34 : 20 { 0x14 } : BV:8
35 : eq(22, 21) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 34, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 20, 21) : BV:32
45 : eq(44, 23) : BOOL
46 : eq(44, 26) : BOOL
47 : eq(44, 29) : BOOL
48 : eq(44, 32) : BOOL
49 : eq(44, 21) : BOOL
50 : ite(49, 36, 37) : BV:8
51 : ite(48, 34, 50) : BV:8
52 : ite(47, 31, 51) : BV:8
53 : ite(46, 28, 52) : BV:8
54 : ite(45, 25, 53) : BV:8
55 : bvadd(19, 20, 21) : BV:32
56 : eq(55, 23) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 21) : BOOL
61 : ite(60, 36, 37) : BV:8
62 : ite(59, 34, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 28, 63) : BV:8
65 : ite(56, 25, 64) : BV:8
66 : bvadd(20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 21) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 31, 73) : BV:8
75 : ite(68, 28, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : bvconcat(42, 54, 65, 76) : BV:32
78 : ite(18, 19, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda46364Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda46365Var : BV:32
20 : eq(19, 4) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvmul(10, 19) : BV:32
23 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
24 : bvadd(6, 22, 23) : BV:32
25 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
26 : eq(24, 25) : BOOL
27 : 67 { 0x43 } : BV:8
28 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
29 : eq(24, 28) : BOOL
30 : 137 { 0x89 -119 } : BV:8
31 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
32 : eq(24, 31) : BOOL
33 : 184 { 0xb8 -72 } : BV:8
34 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
35 : eq(24, 34) : BOOL
36 : 20 { 0x14 } : BV:8
37 : eq(24, 23) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(35, 36, 40) : BV:8
42 : ite(32, 33, 41) : BV:8
43 : ite(29, 30, 42) : BV:8
44 : ite(26, 27, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 22, 23) : BV:32
47 : eq(46, 25) : BOOL
48 : eq(46, 28) : BOOL
49 : eq(46, 31) : BOOL
50 : eq(46, 34) : BOOL
51 : eq(46, 23) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 36, 52) : BV:8
54 : ite(49, 33, 53) : BV:8
55 : ite(48, 30, 54) : BV:8
56 : ite(47, 27, 55) : BV:8
57 : bvadd(21, 22, 23) : BV:32
58 : eq(57, 25) : BOOL
59 : eq(57, 28) : BOOL
60 : eq(57, 31) : BOOL
61 : eq(57, 34) : BOOL
62 : eq(57, 23) : BOOL
63 : ite(62, 38, 39) : BV:8
64 : ite(61, 36, 63) : BV:8
65 : ite(60, 33, 64) : BV:8
66 : ite(59, 30, 65) : BV:8
67 : ite(58, 27, 66) : BV:8
68 : bvadd(22, 23) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : eq(68, 34) : BOOL
73 : eq(68, 23) : BOOL
74 : ite(73, 38, 39) : BV:8
75 : ite(72, 36, 74) : BV:8
76 : ite(71, 33, 75) : BV:8
77 : ite(70, 30, 76) : BV:8
78 : ite(69, 27, 77) : BV:8
79 : bvconcat(44, 56, 67, 78) : BV:32
80 : ite(20, 21, 79) : BV:32
81 : lambda(19, 80) : FUNCTION[BV:32 -> BV:32]
82 : map(18, 81) : MAP[BV:32 -> BV:32]
83 : sum(1, 2, 82) : SUM[UNIT,MAP[BV:32 -> BV:32]]
84 : sym_const(83) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 705377944 { 0x2a0b3698 +1.8760356e213 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46387Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46388Var : BV:32
18 : eq(17, 2) : BOOL
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvmul(8, 17) : BV:32
21 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
22 : bvadd(4, 20, 21) : BV:32
23 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
24 : eq(22, 23) : BOOL
25 : 67 { 0x43 } : BV:8
26 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
27 : eq(22, 26) : BOOL
28 : 137 { 0x89 -119 } : BV:8
29 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
30 : eq(22, 29) : BOOL
31 : 184 { 0xb8 -72 } : BV:8
32 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
33 : eq(22, 32) : BOOL
34 : 20 { 0x14 } : BV:8
35 : eq(22, 21) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(33, 34, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 20, 21) : BV:32
45 : eq(44, 23) : BOOL
46 : eq(44, 26) : BOOL
47 : eq(44, 29) : BOOL
48 : eq(44, 32) : BOOL
49 : eq(44, 21) : BOOL
50 : ite(49, 36, 37) : BV:8
51 : ite(48, 34, 50) : BV:8
52 : ite(47, 31, 51) : BV:8
53 : ite(46, 28, 52) : BV:8
54 : ite(45, 25, 53) : BV:8
55 : bvadd(19, 20, 21) : BV:32
56 : eq(55, 23) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 21) : BOOL
61 : ite(60, 36, 37) : BV:8
62 : ite(59, 34, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 28, 63) : BV:8
65 : ite(56, 25, 64) : BV:8
66 : bvadd(20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 21) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 31, 73) : BV:8
75 : ite(68, 28, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : bvconcat(42, 54, 65, 76) : BV:32
78 : ite(18, 19, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2016495345 { 0x783146f1 +1.38497745e113 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2969567236 { 0xb1000004 -1325400060 -1.47e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2969567239 { 0xb1000007 -1325400057 -1.83e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 263 { 0x107 +1.3135e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 288 { 0x120 +1.3433e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 291 { 0x123 +1.3468e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46197Var : BV:32
2 : Lambda46198Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 405399299 { 0x1829e703 +1.32736241e177 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
14 : eq(12, 13) : BOOL
15 : 67 { 0x43 } : BV:8
16 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
17 : eq(12, 16) : BOOL
18 : 137 { 0x89 -119 } : BV:8
19 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
20 : eq(12, 19) : BOOL
21 : 184 { 0xb8 -72 } : BV:8
22 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
23 : eq(12, 22) : BOOL
24 : 20 { 0x14 } : BV:8
25 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
26 : eq(12, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : 405399298 { 0x1829e702 +1.32736229e177 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : eq(35, 22) : BOOL
40 : eq(35, 25) : BOOL
41 : ite(40, 27, 28) : BV:8
42 : ite(39, 24, 41) : BV:8
43 : ite(38, 21, 42) : BV:8
44 : ite(37, 18, 43) : BV:8
45 : ite(36, 15, 44) : BV:8
46 : 405399297 { 0x1829e701 +1.32736217e177 } : BV:32
47 : bvadd(46, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : ite(52, 27, 28) : BV:8
54 : ite(51, 24, 53) : BV:8
55 : ite(50, 21, 54) : BV:8
56 : ite(49, 18, 55) : BV:8
57 : ite(48, 15, 56) : BV:8
58 : 405399296 { 0x1829e700 +1.32736206e177 } : BV:32
59 : bvadd(58, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 24, 65) : BV:8
67 : ite(62, 21, 66) : BV:8
68 : ite(61, 18, 67) : BV:8
69 : ite(60, 15, 68) : BV:8
70 : bvconcat(33, 45, 57, 69) : BV:32
71 : bvadd(7, 9, 70) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 16) : BOOL
74 : eq(71, 19) : BOOL
75 : eq(71, 22) : BOOL
76 : eq(71, 25) : BOOL
77 : ite(76, 27, 28) : BV:8
78 : ite(75, 24, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 18, 79) : BV:8
81 : ite(72, 15, 80) : BV:8
82 : 2 { 0x2 +1.23e129 } : BV:32
83 : bvadd(82, 9, 70) : BV:32
84 : eq(83, 13) : BOOL
85 : eq(83, 16) : BOOL
86 : eq(83, 19) : BOOL
87 : eq(83, 22) : BOOL
88 : eq(83, 25) : BOOL
89 : ite(88, 27, 28) : BV:8
90 : ite(87, 24, 89) : BV:8
91 : ite(86, 21, 90) : BV:8
92 : ite(85, 18, 91) : BV:8
93 : ite(84, 15, 92) : BV:8
94 : 1 { 0x1 +1.11e129 } : BV:32
95 : bvadd(94, 9, 70) : BV:32
96 : eq(95, 13) : BOOL
97 : eq(95, 16) : BOOL
98 : eq(95, 19) : BOOL
99 : eq(95, 22) : BOOL
100 : eq(95, 25) : BOOL
101 : ite(100, 27, 28) : BV:8
102 : ite(99, 24, 101) : BV:8
103 : ite(98, 21, 102) : BV:8
104 : ite(97, 18, 103) : BV:8
105 : ite(96, 15, 104) : BV:8
106 : bvadd(9, 70) : BV:32
107 : eq(106, 13) : BOOL
108 : eq(106, 16) : BOOL
109 : eq(106, 19) : BOOL
110 : eq(106, 22) : BOOL
111 : eq(106, 25) : BOOL
112 : ite(111, 27, 28) : BV:8
113 : ite(110, 24, 112) : BV:8
114 : ite(109, 21, 113) : BV:8
115 : ite(108, 18, 114) : BV:8
116 : ite(107, 15, 115) : BV:8
117 : bvconcat(81, 93, 105, 116) : BV:32
118 : ite(6, 3, 117) : BV:32
119 : lambda(1, 2, 118) : FUNCTION[BV:32,BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46199Var : BV:32
2 : Lambda46200Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1947313567 { 0x7411a59f +1.13786685e105 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1947313569 { 0x7411a5a1 +1.13786709e105 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1947313567 ] -> true, [ 1947313568; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1947313567 ] -> true, [ 1947313568; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46209Var : BV:32
2 : Lambda46210Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1947313567 { 0x7411a59f +1.13786685e105 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1947313569 { 0x7411a5a1 +1.13786709e105 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46213Var : BV:32
2 : Lambda46214Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1947313567 { 0x7411a59f +1.13786685e105 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1947313568 { 0x7411a5a0 +1.13786697e105 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1947313569 { 0x7411a5a1 +1.13786709e105 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : 405399299 { 0x1829e703 +1.32736241e177 } : BV:32
50 : bvmul(33, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
53 : eq(51, 52) : BOOL
54 : 67 { 0x43 } : BV:8
55 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
56 : eq(51, 55) : BOOL
57 : 137 { 0x89 -119 } : BV:8
58 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
59 : eq(51, 58) : BOOL
60 : 184 { 0xb8 -72 } : BV:8
61 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
62 : eq(51, 61) : BOOL
63 : 20 { 0x14 } : BV:8
64 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
65 : eq(51, 64) : BOOL
66 : 1 { 0x1 } : BV:8
67 : 0 { 0x0 } : BV:8
68 : ite(65, 66, 67) : BV:8
69 : ite(62, 63, 68) : BV:8
70 : ite(59, 60, 69) : BV:8
71 : ite(56, 57, 70) : BV:8
72 : ite(53, 54, 71) : BV:8
73 : 405399298 { 0x1829e702 +1.32736229e177 } : BV:32
74 : bvadd(73, 50) : BV:32
75 : eq(74, 52) : BOOL
76 : eq(74, 55) : BOOL
77 : eq(74, 58) : BOOL
78 : eq(74, 61) : BOOL
79 : eq(74, 64) : BOOL
80 : ite(79, 66, 67) : BV:8
81 : ite(78, 63, 80) : BV:8
82 : ite(77, 60, 81) : BV:8
83 : ite(76, 57, 82) : BV:8
84 : ite(75, 54, 83) : BV:8
85 : 405399297 { 0x1829e701 +1.32736217e177 } : BV:32
86 : bvadd(85, 50) : BV:32
87 : eq(86, 52) : BOOL
88 : eq(86, 55) : BOOL
89 : eq(86, 58) : BOOL
90 : eq(86, 61) : BOOL
91 : eq(86, 64) : BOOL
92 : ite(91, 66, 67) : BV:8
93 : ite(90, 63, 92) : BV:8
94 : ite(89, 60, 93) : BV:8
95 : ite(88, 57, 94) : BV:8
96 : ite(87, 54, 95) : BV:8
97 : 405399296 { 0x1829e700 +1.32736206e177 } : BV:32
98 : bvadd(97, 50) : BV:32
99 : eq(98, 52) : BOOL
100 : eq(98, 55) : BOOL
101 : eq(98, 58) : BOOL
102 : eq(98, 61) : BOOL
103 : eq(98, 64) : BOOL
104 : ite(103, 66, 67) : BV:8
105 : ite(102, 63, 104) : BV:8
106 : ite(101, 60, 105) : BV:8
107 : ite(100, 57, 106) : BV:8
108 : ite(99, 54, 107) : BV:8
109 : bvconcat(72, 84, 96, 108) : BV:32
110 : bvadd(30, 48, 109) : BV:32
111 : eq(110, 52) : BOOL
112 : eq(110, 55) : BOOL
113 : eq(110, 58) : BOOL
114 : eq(110, 61) : BOOL
115 : eq(110, 64) : BOOL
116 : ite(115, 66, 67) : BV:8
117 : ite(114, 63, 116) : BV:8
118 : ite(113, 60, 117) : BV:8
119 : ite(112, 57, 118) : BV:8
120 : ite(111, 54, 119) : BV:8
121 : 2 { 0x2 +1.23e129 } : BV:32
122 : bvadd(121, 48, 109) : BV:32
123 : eq(122, 52) : BOOL
124 : eq(122, 55) : BOOL
125 : eq(122, 58) : BOOL
126 : eq(122, 61) : BOOL
127 : eq(122, 64) : BOOL
128 : ite(127, 66, 67) : BV:8
129 : ite(126, 63, 128) : BV:8
130 : ite(125, 60, 129) : BV:8
131 : ite(124, 57, 130) : BV:8
132 : ite(123, 54, 131) : BV:8
133 : 1 { 0x1 +1.11e129 } : BV:32
134 : bvadd(133, 48, 109) : BV:32
135 : eq(134, 52) : BOOL
136 : eq(134, 55) : BOOL
137 : eq(134, 58) : BOOL
138 : eq(134, 61) : BOOL
139 : eq(134, 64) : BOOL
140 : ite(139, 66, 67) : BV:8
141 : ite(138, 63, 140) : BV:8
142 : ite(137, 60, 141) : BV:8
143 : ite(136, 57, 142) : BV:8
144 : ite(135, 54, 143) : BV:8
145 : bvadd(48, 109) : BV:32
146 : eq(145, 52) : BOOL
147 : eq(145, 55) : BOOL
148 : eq(145, 58) : BOOL
149 : eq(145, 61) : BOOL
150 : eq(145, 64) : BOOL
151 : ite(150, 66, 67) : BV:8
152 : ite(149, 63, 151) : BV:8
153 : ite(148, 60, 152) : BV:8
154 : ite(147, 57, 153) : BV:8
155 : ite(146, 54, 154) : BV:8
156 : bvconcat(120, 132, 144, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : ite(47, 156, 157) : BV:32
159 : ite(6, 3, 158) : BV:32
160 : lambda(1, 2, 159) : FUNCTION[BV:32,BV:32 -> BV:32]
161 : sym_const(160) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46218Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
11 : eq(9, 10) : BOOL
12 : 67 { 0x43 } : BV:8
13 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
14 : eq(9, 13) : BOOL
15 : 137 { 0x89 -119 } : BV:8
16 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
17 : eq(9, 16) : BOOL
18 : 184 { 0xb8 -72 } : BV:8
19 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
20 : eq(9, 19) : BOOL
21 : 20 { 0x14 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46219Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
11 : eq(9, 10) : BOOL
12 : 67 { 0x43 } : BV:8
13 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
14 : eq(9, 13) : BOOL
15 : 137 { 0x89 -119 } : BV:8
16 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
17 : eq(9, 16) : BOOL
18 : 184 { 0xb8 -72 } : BV:8
19 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
20 : eq(9, 19) : BOOL
21 : 20 { 0x14 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46226Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 339970488 { 0x144389b8 +1.52764034e169 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 405399294 { 0x1829e6fe +1.32736182e177 } : BV:32
11 : eq(9, 10) : BOOL
12 : 67 { 0x43 } : BV:8
13 : 405399293 { 0x1829e6fd +1.32736170e177 } : BV:32
14 : eq(9, 13) : BOOL
15 : 137 { 0x89 -119 } : BV:8
16 : 405399292 { 0x1829e6fc +1.32736158e177 } : BV:32
17 : eq(9, 16) : BOOL
18 : 184 { 0xb8 -72 } : BV:8
19 : 405399295 { 0x1829e6ff +1.32736194e177 } : BV:32
20 : eq(9, 19) : BOOL
21 : 20 { 0x14 } : BV:8
22 : eq(9, 8) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 8) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 8) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 8) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 21, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
546297313
=counter_example_end
=global nodece 56 num_edges_traversed 2
=global nodece 56 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 57
=global nodece 57 nodece z3.ce4309.num_edges_traversed1
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3.ce4309 72597b1a70dabfacb2ff9b79180f61a
=input.spec-%var-x-1
1 : Lambda47255Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47256Var : BV:32
18 : Lambda47257Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 32767 { 0x7fff +1.390613e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32769 { 0x8001 +1.390636e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 32768 { 0x8000 +1.390625e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47258Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
82 : eq(80, 81) : BOOL
83 : 127 { 0x7f } : BV:8
84 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
85 : eq(80, 84) : BOOL
86 : 255 { 0xff -1 } : BV:8
87 : eq(80, 78) : BOOL
88 : 151 { 0x97 -105 } : BV:8
89 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
90 : eq(80, 89) : BOOL
91 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
92 : eq(80, 91) : BOOL
93 : 240 { 0xf0 -16 } : BV:8
94 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
95 : eq(80, 94) : BOOL
96 : 248 { 0xf8 -8 } : BV:8
97 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
98 : eq(80, 97) : BOOL
99 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
100 : eq(80, 99) : BOOL
101 : 61 { 0x3d } : BV:8
102 : 0 { 0x0 } : BV:8
103 : ite(100, 101, 102) : BV:8
104 : ite(98, 86, 103) : BV:8
105 : ite(95, 96, 104) : BV:8
106 : ite(92, 93, 105) : BV:8
107 : ite(90, 86, 106) : BV:8
108 : ite(87, 88, 107) : BV:8
109 : ite(85, 86, 108) : BV:8
110 : ite(82, 83, 109) : BV:8
111 : bvadd(97, 79) : BV:32
112 : eq(111, 81) : BOOL
113 : eq(111, 84) : BOOL
114 : eq(111, 78) : BOOL
115 : eq(111, 89) : BOOL
116 : eq(111, 91) : BOOL
117 : eq(111, 94) : BOOL
118 : eq(111, 97) : BOOL
119 : eq(111, 99) : BOOL
120 : ite(119, 101, 102) : BV:8
121 : ite(118, 86, 120) : BV:8
122 : ite(117, 96, 121) : BV:8
123 : ite(116, 93, 122) : BV:8
124 : ite(115, 86, 123) : BV:8
125 : ite(114, 88, 124) : BV:8
126 : ite(113, 86, 125) : BV:8
127 : ite(112, 83, 126) : BV:8
128 : bvadd(99, 79) : BV:32
129 : eq(128, 81) : BOOL
130 : eq(128, 84) : BOOL
131 : eq(128, 78) : BOOL
132 : eq(128, 89) : BOOL
133 : eq(128, 91) : BOOL
134 : eq(128, 94) : BOOL
135 : eq(128, 97) : BOOL
136 : eq(128, 99) : BOOL
137 : ite(136, 101, 102) : BV:8
138 : ite(135, 86, 137) : BV:8
139 : ite(134, 96, 138) : BV:8
140 : ite(133, 93, 139) : BV:8
141 : ite(132, 86, 140) : BV:8
142 : ite(131, 88, 141) : BV:8
143 : ite(130, 86, 142) : BV:8
144 : ite(129, 83, 143) : BV:8
145 : bvadd(91, 79) : BV:32
146 : eq(145, 81) : BOOL
147 : eq(145, 84) : BOOL
148 : eq(145, 78) : BOOL
149 : eq(145, 89) : BOOL
150 : eq(145, 91) : BOOL
151 : eq(145, 94) : BOOL
152 : eq(145, 97) : BOOL
153 : eq(145, 99) : BOOL
154 : ite(153, 101, 102) : BV:8
155 : ite(152, 86, 154) : BV:8
156 : ite(151, 96, 155) : BV:8
157 : ite(150, 93, 156) : BV:8
158 : ite(149, 86, 157) : BV:8
159 : ite(148, 88, 158) : BV:8
160 : ite(147, 86, 159) : BV:8
161 : ite(146, 83, 160) : BV:8
162 : bvconcat(110, 127, 144, 161) : BV:32
163 : bvadd(75, 77, 162) : BV:32
164 : eq(163, 81) : BOOL
165 : eq(163, 84) : BOOL
166 : eq(163, 78) : BOOL
167 : eq(163, 89) : BOOL
168 : eq(163, 91) : BOOL
169 : eq(163, 94) : BOOL
170 : eq(163, 97) : BOOL
171 : eq(163, 99) : BOOL
172 : ite(171, 101, 102) : BV:8
173 : ite(170, 86, 172) : BV:8
174 : ite(169, 96, 173) : BV:8
175 : ite(168, 93, 174) : BV:8
176 : ite(167, 86, 175) : BV:8
177 : ite(166, 88, 176) : BV:8
178 : ite(165, 86, 177) : BV:8
179 : ite(164, 83, 178) : BV:8
180 : 2 { 0x2 +1.23e129 } : BV:32
181 : bvadd(180, 77, 162) : BV:32
182 : eq(181, 81) : BOOL
183 : eq(181, 84) : BOOL
184 : eq(181, 78) : BOOL
185 : eq(181, 89) : BOOL
186 : eq(181, 91) : BOOL
187 : eq(181, 94) : BOOL
188 : eq(181, 97) : BOOL
189 : eq(181, 99) : BOOL
190 : ite(189, 101, 102) : BV:8
191 : ite(188, 86, 190) : BV:8
192 : ite(187, 96, 191) : BV:8
193 : ite(186, 93, 192) : BV:8
194 : ite(185, 86, 193) : BV:8
195 : ite(184, 88, 194) : BV:8
196 : ite(183, 86, 195) : BV:8
197 : ite(182, 83, 196) : BV:8
198 : 1 { 0x1 +1.11e129 } : BV:32
199 : bvadd(198, 77, 162) : BV:32
200 : eq(199, 81) : BOOL
201 : eq(199, 84) : BOOL
202 : eq(199, 78) : BOOL
203 : eq(199, 89) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : eq(199, 99) : BOOL
208 : ite(207, 101, 102) : BV:8
209 : ite(206, 86, 208) : BV:8
210 : ite(205, 96, 209) : BV:8
211 : ite(204, 93, 210) : BV:8
212 : ite(203, 86, 211) : BV:8
213 : ite(202, 88, 212) : BV:8
214 : ite(201, 86, 213) : BV:8
215 : ite(200, 83, 214) : BV:8
216 : bvadd(77, 162) : BV:32
217 : eq(216, 81) : BOOL
218 : eq(216, 84) : BOOL
219 : eq(216, 78) : BOOL
220 : eq(216, 89) : BOOL
221 : eq(216, 91) : BOOL
222 : eq(216, 94) : BOOL
223 : eq(216, 97) : BOOL
224 : eq(216, 99) : BOOL
225 : ite(224, 101, 102) : BV:8
226 : ite(223, 86, 225) : BV:8
227 : ite(222, 96, 226) : BV:8
228 : ite(221, 93, 227) : BV:8
229 : ite(220, 86, 228) : BV:8
230 : ite(219, 88, 229) : BV:8
231 : ite(218, 86, 230) : BV:8
232 : ite(217, 83, 231) : BV:8
233 : bvconcat(179, 197, 215, 232) : BV:32
234 : ite(55, 2, 233) : BV:32
235 : ite(74, 233, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : lambda(52, 236) : FUNCTION[BV:32 -> BV:32]
238 : map(51, 237) : MAP[BV:32 -> BV:32]
239 : lambda(17, 238) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
240 : map(16, 239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
241 : sym_const(240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda47275Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47276Var : BV:32
18 : Lambda47277Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 32767 { 0x7fff +1.390613e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32769 { 0x8001 +1.390636e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 32768 { 0x8000 +1.390625e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47278Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
63 : eq(61, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
66 : eq(61, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : eq(61, 59) : BOOL
69 : 151 { 0x97 -105 } : BV:8
70 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
71 : eq(61, 70) : BOOL
72 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
73 : eq(61, 72) : BOOL
74 : 240 { 0xf0 -16 } : BV:8
75 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
76 : eq(61, 75) : BOOL
77 : 248 { 0xf8 -8 } : BV:8
78 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
79 : eq(61, 78) : BOOL
80 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
81 : eq(61, 80) : BOOL
82 : 61 { 0x3d } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : ite(79, 67, 84) : BV:8
86 : ite(76, 77, 85) : BV:8
87 : ite(73, 74, 86) : BV:8
88 : ite(71, 67, 87) : BV:8
89 : ite(68, 69, 88) : BV:8
90 : ite(66, 67, 89) : BV:8
91 : ite(63, 64, 90) : BV:8
92 : bvadd(78, 60) : BV:32
93 : eq(92, 62) : BOOL
94 : eq(92, 65) : BOOL
95 : eq(92, 59) : BOOL
96 : eq(92, 70) : BOOL
97 : eq(92, 72) : BOOL
98 : eq(92, 75) : BOOL
99 : eq(92, 78) : BOOL
100 : eq(92, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : ite(99, 67, 101) : BV:8
103 : ite(98, 77, 102) : BV:8
104 : ite(97, 74, 103) : BV:8
105 : ite(96, 67, 104) : BV:8
106 : ite(95, 69, 105) : BV:8
107 : ite(94, 67, 106) : BV:8
108 : ite(93, 64, 107) : BV:8
109 : bvadd(80, 60) : BV:32
110 : eq(109, 62) : BOOL
111 : eq(109, 65) : BOOL
112 : eq(109, 59) : BOOL
113 : eq(109, 70) : BOOL
114 : eq(109, 72) : BOOL
115 : eq(109, 75) : BOOL
116 : eq(109, 78) : BOOL
117 : eq(109, 80) : BOOL
118 : ite(117, 82, 83) : BV:8
119 : ite(116, 67, 118) : BV:8
120 : ite(115, 77, 119) : BV:8
121 : ite(114, 74, 120) : BV:8
122 : ite(113, 67, 121) : BV:8
123 : ite(112, 69, 122) : BV:8
124 : ite(111, 67, 123) : BV:8
125 : ite(110, 64, 124) : BV:8
126 : bvadd(72, 60) : BV:32
127 : eq(126, 62) : BOOL
128 : eq(126, 65) : BOOL
129 : eq(126, 59) : BOOL
130 : eq(126, 70) : BOOL
131 : eq(126, 72) : BOOL
132 : eq(126, 75) : BOOL
133 : eq(126, 78) : BOOL
134 : eq(126, 80) : BOOL
135 : ite(134, 82, 83) : BV:8
136 : ite(133, 67, 135) : BV:8
137 : ite(132, 77, 136) : BV:8
138 : ite(131, 74, 137) : BV:8
139 : ite(130, 67, 138) : BV:8
140 : ite(129, 69, 139) : BV:8
141 : ite(128, 67, 140) : BV:8
142 : ite(127, 64, 141) : BV:8
143 : bvconcat(91, 108, 125, 142) : BV:32
144 : bvadd(56, 58, 143) : BV:32
145 : eq(144, 62) : BOOL
146 : eq(144, 65) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 70) : BOOL
149 : eq(144, 72) : BOOL
150 : eq(144, 75) : BOOL
151 : eq(144, 78) : BOOL
152 : eq(144, 80) : BOOL
153 : ite(152, 82, 83) : BV:8
154 : ite(151, 67, 153) : BV:8
155 : ite(150, 77, 154) : BV:8
156 : ite(149, 74, 155) : BV:8
157 : ite(148, 67, 156) : BV:8
158 : ite(147, 69, 157) : BV:8
159 : ite(146, 67, 158) : BV:8
160 : ite(145, 64, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 58, 143) : BV:32
163 : eq(162, 62) : BOOL
164 : eq(162, 65) : BOOL
165 : eq(162, 59) : BOOL
166 : eq(162, 70) : BOOL
167 : eq(162, 72) : BOOL
168 : eq(162, 75) : BOOL
169 : eq(162, 78) : BOOL
170 : eq(162, 80) : BOOL
171 : ite(170, 82, 83) : BV:8
172 : ite(169, 67, 171) : BV:8
173 : ite(168, 77, 172) : BV:8
174 : ite(167, 74, 173) : BV:8
175 : ite(166, 67, 174) : BV:8
176 : ite(165, 69, 175) : BV:8
177 : ite(164, 67, 176) : BV:8
178 : ite(163, 64, 177) : BV:8
179 : 1 { 0x1 +1.11e129 } : BV:32
180 : bvadd(179, 58, 143) : BV:32
181 : eq(180, 62) : BOOL
182 : eq(180, 65) : BOOL
183 : eq(180, 59) : BOOL
184 : eq(180, 70) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : eq(180, 80) : BOOL
189 : ite(188, 82, 83) : BV:8
190 : ite(187, 67, 189) : BV:8
191 : ite(186, 77, 190) : BV:8
192 : ite(185, 74, 191) : BV:8
193 : ite(184, 67, 192) : BV:8
194 : ite(183, 69, 193) : BV:8
195 : ite(182, 67, 194) : BV:8
196 : ite(181, 64, 195) : BV:8
197 : bvadd(58, 143) : BV:32
198 : eq(197, 62) : BOOL
199 : eq(197, 65) : BOOL
200 : eq(197, 59) : BOOL
201 : eq(197, 70) : BOOL
202 : eq(197, 72) : BOOL
203 : eq(197, 75) : BOOL
204 : eq(197, 78) : BOOL
205 : eq(197, 80) : BOOL
206 : ite(205, 82, 83) : BV:8
207 : ite(204, 67, 206) : BV:8
208 : ite(203, 77, 207) : BV:8
209 : ite(202, 74, 208) : BV:8
210 : ite(201, 67, 209) : BV:8
211 : ite(200, 69, 210) : BV:8
212 : ite(199, 67, 211) : BV:8
213 : ite(198, 64, 212) : BV:8
214 : bvconcat(160, 178, 196, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1610088451 ] -> 0, [ 1610088452; 1610088452 ] -> 240, [ 1610088453; 1610088453 ] -> 61, [ 1610088454; 1610088454 ] -> 255, [ 1610088455; 1610088455 ] -> 151, [ 1610088456; 1610612735 ] -> 0, [ 1610612736; 1610612736 ] -> 248, [ 1610612737; 1610612738 ] -> 255, [ 1610612739; 1610612739 ] -> 127, [ 1610612740; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 81805347 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 81805348; 81805351 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 81805352; 1742864423 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1742864424; 1742864427 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1742864428; 4082352139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4082352140; 4082352143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4082352144; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4082352140 { 0xf353c00c -212615156 -1.65429830e103 } : BV:32
=input.dst.llvm-%m
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1742864424 { 0x67e20028 +1.76562976e80 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 81805348 { 0x4e04024 +1.75195741e138 } : BV:32
=input.dst.llvm-%x
1 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 524284 { 0x7fffc +1.6249952e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 845160944 { 0x326021f0 +1.75103569e229 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda47282Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47283Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
23 : bvadd(18, 21, 22) : BV:32
24 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
25 : eq(23, 24) : BOOL
26 : 127 { 0x7f } : BV:8
27 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
31 : eq(23, 30) : BOOL
32 : 151 { 0x97 -105 } : BV:8
33 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
34 : eq(23, 33) : BOOL
35 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
36 : eq(23, 35) : BOOL
37 : 240 { 0xf0 -16 } : BV:8
38 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
39 : eq(23, 38) : BOOL
40 : 248 { 0xf8 -8 } : BV:8
41 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
42 : eq(23, 41) : BOOL
43 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
44 : eq(23, 43) : BOOL
45 : 61 { 0x3d } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 29, 47) : BV:8
49 : ite(39, 40, 48) : BV:8
50 : ite(36, 37, 49) : BV:8
51 : ite(34, 29, 50) : BV:8
52 : ite(31, 32, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 33) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 38) : BOOL
63 : eq(56, 41) : BOOL
64 : eq(56, 43) : BOOL
65 : ite(64, 45, 46) : BV:8
66 : ite(63, 29, 65) : BV:8
67 : ite(62, 40, 66) : BV:8
68 : ite(61, 37, 67) : BV:8
69 : ite(60, 29, 68) : BV:8
70 : ite(59, 32, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : ite(57, 26, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 21, 22) : BV:32
75 : eq(74, 24) : BOOL
76 : eq(74, 27) : BOOL
77 : eq(74, 30) : BOOL
78 : eq(74, 33) : BOOL
79 : eq(74, 35) : BOOL
80 : eq(74, 38) : BOOL
81 : eq(74, 41) : BOOL
82 : eq(74, 43) : BOOL
83 : ite(82, 45, 46) : BV:8
84 : ite(81, 29, 83) : BV:8
85 : ite(80, 40, 84) : BV:8
86 : ite(79, 37, 85) : BV:8
87 : ite(78, 29, 86) : BV:8
88 : ite(77, 32, 87) : BV:8
89 : ite(76, 29, 88) : BV:8
90 : ite(75, 26, 89) : BV:8
91 : bvadd(21, 22) : BV:32
92 : eq(91, 24) : BOOL
93 : eq(91, 27) : BOOL
94 : eq(91, 30) : BOOL
95 : eq(91, 33) : BOOL
96 : eq(91, 35) : BOOL
97 : eq(91, 38) : BOOL
98 : eq(91, 41) : BOOL
99 : eq(91, 43) : BOOL
100 : ite(99, 45, 46) : BV:8
101 : ite(98, 29, 100) : BV:8
102 : ite(97, 40, 101) : BV:8
103 : ite(96, 37, 102) : BV:8
104 : ite(95, 29, 103) : BV:8
105 : ite(94, 32, 104) : BV:8
106 : ite(93, 29, 105) : BV:8
107 : ite(92, 26, 106) : BV:8
108 : bvconcat(54, 72, 90, 107) : BV:32
109 : ite(19, 2, 108) : BV:32
110 : lambda(17, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(16, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
2 : unit : UNIT
3 : Lambda47264Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 32767 { 0x7fff +1.390613e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 32768 { 0x8000 +1.390625e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda47265Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
26 : bvadd(20, 24, 25) : BV:32
27 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
28 : eq(26, 27) : BOOL
29 : 127 { 0x7f } : BV:8
30 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
31 : eq(26, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
34 : eq(26, 33) : BOOL
35 : 151 { 0x97 -105 } : BV:8
36 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
37 : eq(26, 36) : BOOL
38 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
39 : eq(26, 38) : BOOL
40 : 240 { 0xf0 -16 } : BV:8
41 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
42 : eq(26, 41) : BOOL
43 : 248 { 0xf8 -8 } : BV:8
44 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
45 : eq(26, 44) : BOOL
46 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
47 : eq(26, 46) : BOOL
48 : 61 { 0x3d } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(45, 32, 50) : BV:8
52 : ite(42, 43, 51) : BV:8
53 : ite(39, 40, 52) : BV:8
54 : ite(37, 32, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(31, 32, 55) : BV:8
57 : ite(28, 29, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 24, 25) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : eq(59, 33) : BOOL
63 : eq(59, 36) : BOOL
64 : eq(59, 38) : BOOL
65 : eq(59, 41) : BOOL
66 : eq(59, 44) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 32, 68) : BV:8
70 : ite(65, 43, 69) : BV:8
71 : ite(64, 40, 70) : BV:8
72 : ite(63, 32, 71) : BV:8
73 : ite(62, 35, 72) : BV:8
74 : ite(61, 32, 73) : BV:8
75 : ite(60, 29, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 24, 25) : BV:32
78 : eq(77, 27) : BOOL
79 : eq(77, 30) : BOOL
80 : eq(77, 33) : BOOL
81 : eq(77, 36) : BOOL
82 : eq(77, 38) : BOOL
83 : eq(77, 41) : BOOL
84 : eq(77, 44) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 32, 86) : BV:8
88 : ite(83, 43, 87) : BV:8
89 : ite(82, 40, 88) : BV:8
90 : ite(81, 32, 89) : BV:8
91 : ite(80, 35, 90) : BV:8
92 : ite(79, 32, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : bvadd(24, 25) : BV:32
95 : eq(94, 27) : BOOL
96 : eq(94, 30) : BOOL
97 : eq(94, 33) : BOOL
98 : eq(94, 36) : BOOL
99 : eq(94, 38) : BOOL
100 : eq(94, 41) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 32, 103) : BV:8
105 : ite(100, 43, 104) : BV:8
106 : ite(99, 40, 105) : BV:8
107 : ite(98, 32, 106) : BV:8
108 : ite(97, 35, 107) : BV:8
109 : ite(96, 32, 108) : BV:8
110 : ite(95, 29, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(22, 4, 111) : BV:32
113 : ite(21, 4, 112) : BV:32
114 : lambda(19, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(18, 114) : MAP[BV:32 -> BV:32]
116 : sum(1, 2, 115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
117 : sym_const(116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : eq(2, 2) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 2) : BV:32
22 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
23 : bvadd(2, 21, 22) : BV:32
24 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
25 : eq(23, 24) : BOOL
26 : 127 { 0x7f } : BV:8
27 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
31 : eq(23, 30) : BOOL
32 : 151 { 0x97 -105 } : BV:8
33 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
34 : eq(23, 33) : BOOL
35 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
36 : eq(23, 35) : BOOL
37 : 240 { 0xf0 -16 } : BV:8
38 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
39 : eq(23, 38) : BOOL
40 : 248 { 0xf8 -8 } : BV:8
41 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
42 : eq(23, 41) : BOOL
43 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
44 : eq(23, 43) : BOOL
45 : 61 { 0x3d } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 29, 47) : BV:8
49 : ite(39, 40, 48) : BV:8
50 : ite(36, 37, 49) : BV:8
51 : ite(34, 29, 50) : BV:8
52 : ite(31, 32, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 33) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 38) : BOOL
63 : eq(56, 41) : BOOL
64 : eq(56, 43) : BOOL
65 : ite(64, 45, 46) : BV:8
66 : ite(63, 29, 65) : BV:8
67 : ite(62, 40, 66) : BV:8
68 : ite(61, 37, 67) : BV:8
69 : ite(60, 29, 68) : BV:8
70 : ite(59, 32, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : ite(57, 26, 71) : BV:8
73 : bvadd(16, 21, 22) : BV:32
74 : eq(73, 24) : BOOL
75 : eq(73, 27) : BOOL
76 : eq(73, 30) : BOOL
77 : eq(73, 33) : BOOL
78 : eq(73, 35) : BOOL
79 : eq(73, 38) : BOOL
80 : eq(73, 41) : BOOL
81 : eq(73, 43) : BOOL
82 : ite(81, 45, 46) : BV:8
83 : ite(80, 29, 82) : BV:8
84 : ite(79, 40, 83) : BV:8
85 : ite(78, 37, 84) : BV:8
86 : ite(77, 29, 85) : BV:8
87 : ite(76, 32, 86) : BV:8
88 : ite(75, 29, 87) : BV:8
89 : ite(74, 26, 88) : BV:8
90 : bvadd(21, 22) : BV:32
91 : eq(90, 24) : BOOL
92 : eq(90, 27) : BOOL
93 : eq(90, 30) : BOOL
94 : eq(90, 33) : BOOL
95 : eq(90, 35) : BOOL
96 : eq(90, 38) : BOOL
97 : eq(90, 41) : BOOL
98 : eq(90, 43) : BOOL
99 : ite(98, 45, 46) : BV:8
100 : ite(97, 29, 99) : BV:8
101 : ite(96, 40, 100) : BV:8
102 : ite(95, 37, 101) : BV:8
103 : ite(94, 29, 102) : BV:8
104 : ite(93, 32, 103) : BV:8
105 : ite(92, 29, 104) : BV:8
106 : ite(91, 26, 105) : BV:8
107 : bvconcat(54, 72, 89, 106) : BV:32
108 : ite(19, 1, 107) : BV:32
109 : sum(17, 18, 108) : SUM[UNIT,BV:32]
110 : sym_const(109) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 376516644 { 0x16713024 +1.88428163e173 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda47287Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47288Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
24 : bvadd(18, 22, 23) : BV:32
25 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
26 : eq(24, 25) : BOOL
27 : 127 { 0x7f } : BV:8
28 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
29 : eq(24, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
32 : eq(24, 31) : BOOL
33 : 151 { 0x97 -105 } : BV:8
34 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
35 : eq(24, 34) : BOOL
36 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
37 : eq(24, 36) : BOOL
38 : 240 { 0xf0 -16 } : BV:8
39 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
40 : eq(24, 39) : BOOL
41 : 248 { 0xf8 -8 } : BV:8
42 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
43 : eq(24, 42) : BOOL
44 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
45 : eq(24, 44) : BOOL
46 : 61 { 0x3d } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(43, 30, 48) : BV:8
50 : ite(40, 41, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(35, 30, 51) : BV:8
53 : ite(32, 33, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(26, 27, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 22, 23) : BV:32
58 : eq(57, 25) : BOOL
59 : eq(57, 28) : BOOL
60 : eq(57, 31) : BOOL
61 : eq(57, 34) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 30, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 30, 69) : BV:8
71 : ite(60, 33, 70) : BV:8
72 : ite(59, 30, 71) : BV:8
73 : ite(58, 27, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 22, 23) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : eq(75, 34) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 30, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 30, 87) : BV:8
89 : ite(78, 33, 88) : BV:8
90 : ite(77, 30, 89) : BV:8
91 : ite(76, 27, 90) : BV:8
92 : bvadd(22, 23) : BV:32
93 : eq(92, 25) : BOOL
94 : eq(92, 28) : BOOL
95 : eq(92, 31) : BOOL
96 : eq(92, 34) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 30, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 30, 104) : BV:8
106 : ite(95, 33, 105) : BV:8
107 : ite(94, 30, 106) : BV:8
108 : ite(93, 27, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(20, 2, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 135570370 { 0x814a3c2 +1.16124749e145 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 524284 { 0x7fffc +1.6249952e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1742864424 { 0x67e20028 +1.76562976e80 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1742864427 { 0x67e2002b +1.76563012e80 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 81805348 { 0x4e04024 +1.75195741e138 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 81805351 { 0x4e04027 +1.75195777e138 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4082352140 { 0xf353c00c -212615156 -1.65429830e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4082352143 { 0xf353c00f -212615153 -1.65429866e103 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda47147Var : BV:32
2 : Lambda47148Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 32767 { 0x7fff +1.390613e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 32769 { 0x8001 +1.390636e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 32768 { 0x8000 +1.390625e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
55 : eq(53, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
58 : eq(53, 57) : BOOL
59 : 255 { 0xff -1 } : BV:8
60 : eq(53, 51) : BOOL
61 : 151 { 0x97 -105 } : BV:8
62 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
63 : eq(53, 62) : BOOL
64 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
65 : eq(53, 64) : BOOL
66 : 240 { 0xf0 -16 } : BV:8
67 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
68 : eq(53, 67) : BOOL
69 : 248 { 0xf8 -8 } : BV:8
70 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
71 : eq(53, 70) : BOOL
72 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
73 : eq(53, 72) : BOOL
74 : 61 { 0x3d } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(71, 59, 76) : BV:8
78 : ite(68, 69, 77) : BV:8
79 : ite(65, 66, 78) : BV:8
80 : ite(63, 59, 79) : BV:8
81 : ite(60, 61, 80) : BV:8
82 : ite(58, 59, 81) : BV:8
83 : ite(55, 56, 82) : BV:8
84 : bvadd(70, 52) : BV:32
85 : eq(84, 54) : BOOL
86 : eq(84, 57) : BOOL
87 : eq(84, 51) : BOOL
88 : eq(84, 62) : BOOL
89 : eq(84, 64) : BOOL
90 : eq(84, 67) : BOOL
91 : eq(84, 70) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 59, 93) : BV:8
95 : ite(90, 69, 94) : BV:8
96 : ite(89, 66, 95) : BV:8
97 : ite(88, 59, 96) : BV:8
98 : ite(87, 61, 97) : BV:8
99 : ite(86, 59, 98) : BV:8
100 : ite(85, 56, 99) : BV:8
101 : bvadd(72, 52) : BV:32
102 : eq(101, 54) : BOOL
103 : eq(101, 57) : BOOL
104 : eq(101, 51) : BOOL
105 : eq(101, 62) : BOOL
106 : eq(101, 64) : BOOL
107 : eq(101, 67) : BOOL
108 : eq(101, 70) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 59, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 66, 112) : BV:8
114 : ite(105, 59, 113) : BV:8
115 : ite(104, 61, 114) : BV:8
116 : ite(103, 59, 115) : BV:8
117 : ite(102, 56, 116) : BV:8
118 : bvadd(64, 52) : BV:32
119 : eq(118, 54) : BOOL
120 : eq(118, 57) : BOOL
121 : eq(118, 51) : BOOL
122 : eq(118, 62) : BOOL
123 : eq(118, 64) : BOOL
124 : eq(118, 67) : BOOL
125 : eq(118, 70) : BOOL
126 : eq(118, 72) : BOOL
127 : ite(126, 74, 75) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 69, 128) : BV:8
130 : ite(123, 66, 129) : BV:8
131 : ite(122, 59, 130) : BV:8
132 : ite(121, 61, 131) : BV:8
133 : ite(120, 59, 132) : BV:8
134 : ite(119, 56, 133) : BV:8
135 : bvconcat(83, 100, 117, 134) : BV:32
136 : bvadd(48, 50, 135) : BV:32
137 : eq(136, 54) : BOOL
138 : eq(136, 57) : BOOL
139 : eq(136, 51) : BOOL
140 : eq(136, 62) : BOOL
141 : eq(136, 64) : BOOL
142 : eq(136, 67) : BOOL
143 : eq(136, 70) : BOOL
144 : eq(136, 72) : BOOL
145 : ite(144, 74, 75) : BV:8
146 : ite(143, 59, 145) : BV:8
147 : ite(142, 69, 146) : BV:8
148 : ite(141, 66, 147) : BV:8
149 : ite(140, 59, 148) : BV:8
150 : ite(139, 61, 149) : BV:8
151 : ite(138, 59, 150) : BV:8
152 : ite(137, 56, 151) : BV:8
153 : 2 { 0x2 +1.23e129 } : BV:32
154 : bvadd(153, 50, 135) : BV:32
155 : eq(154, 54) : BOOL
156 : eq(154, 57) : BOOL
157 : eq(154, 51) : BOOL
158 : eq(154, 62) : BOOL
159 : eq(154, 64) : BOOL
160 : eq(154, 67) : BOOL
161 : eq(154, 70) : BOOL
162 : eq(154, 72) : BOOL
163 : ite(162, 74, 75) : BV:8
164 : ite(161, 59, 163) : BV:8
165 : ite(160, 69, 164) : BV:8
166 : ite(159, 66, 165) : BV:8
167 : ite(158, 59, 166) : BV:8
168 : ite(157, 61, 167) : BV:8
169 : ite(156, 59, 168) : BV:8
170 : ite(155, 56, 169) : BV:8
171 : 1 { 0x1 +1.11e129 } : BV:32
172 : bvadd(171, 50, 135) : BV:32
173 : eq(172, 54) : BOOL
174 : eq(172, 57) : BOOL
175 : eq(172, 51) : BOOL
176 : eq(172, 62) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : eq(172, 72) : BOOL
181 : ite(180, 74, 75) : BV:8
182 : ite(179, 59, 181) : BV:8
183 : ite(178, 69, 182) : BV:8
184 : ite(177, 66, 183) : BV:8
185 : ite(176, 59, 184) : BV:8
186 : ite(175, 61, 185) : BV:8
187 : ite(174, 59, 186) : BV:8
188 : ite(173, 56, 187) : BV:8
189 : bvadd(50, 135) : BV:32
190 : eq(189, 54) : BOOL
191 : eq(189, 57) : BOOL
192 : eq(189, 51) : BOOL
193 : eq(189, 62) : BOOL
194 : eq(189, 64) : BOOL
195 : eq(189, 67) : BOOL
196 : eq(189, 70) : BOOL
197 : eq(189, 72) : BOOL
198 : ite(197, 74, 75) : BV:8
199 : ite(196, 59, 198) : BV:8
200 : ite(195, 69, 199) : BV:8
201 : ite(194, 66, 200) : BV:8
202 : ite(193, 59, 201) : BV:8
203 : ite(192, 61, 202) : BV:8
204 : ite(191, 59, 203) : BV:8
205 : ite(190, 56, 204) : BV:8
206 : bvconcat(152, 170, 188, 205) : BV:32
207 : ite(6, 3, 206) : BV:32
208 : ite(47, 206, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda47152Var : BV:32
2 : Lambda47153Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 32767 { 0x7fff +1.390613e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32769 { 0x8001 +1.390636e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 32768 { 0x8000 +1.390625e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda47161Var : BV:32
2 : Lambda47162Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 32767 { 0x7fff +1.390613e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32769 { 0x8001 +1.390636e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 32768 { 0x8000 +1.390625e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda47157Var : BV:32
2 : Lambda47158Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
14 : eq(12, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
17 : eq(12, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : eq(12, 10) : BOOL
20 : 151 { 0x97 -105 } : BV:8
21 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
22 : eq(12, 21) : BOOL
23 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
24 : eq(12, 23) : BOOL
25 : 240 { 0xf0 -16 } : BV:8
26 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
27 : eq(12, 26) : BOOL
28 : 248 { 0xf8 -8 } : BV:8
29 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
30 : eq(12, 29) : BOOL
31 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
32 : eq(12, 31) : BOOL
33 : 61 { 0x3d } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(27, 28, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 18, 38) : BV:8
40 : ite(19, 20, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : ite(14, 15, 41) : BV:8
43 : bvadd(29, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 10) : BOOL
47 : eq(43, 21) : BOOL
48 : eq(43, 23) : BOOL
49 : eq(43, 26) : BOOL
50 : eq(43, 29) : BOOL
51 : eq(43, 31) : BOOL
52 : ite(51, 33, 34) : BV:8
53 : ite(50, 18, 52) : BV:8
54 : ite(49, 28, 53) : BV:8
55 : ite(48, 25, 54) : BV:8
56 : ite(47, 18, 55) : BV:8
57 : ite(46, 20, 56) : BV:8
58 : ite(45, 18, 57) : BV:8
59 : ite(44, 15, 58) : BV:8
60 : bvadd(31, 11) : BV:32
61 : eq(60, 13) : BOOL
62 : eq(60, 16) : BOOL
63 : eq(60, 10) : BOOL
64 : eq(60, 21) : BOOL
65 : eq(60, 23) : BOOL
66 : eq(60, 26) : BOOL
67 : eq(60, 29) : BOOL
68 : eq(60, 31) : BOOL
69 : ite(68, 33, 34) : BV:8
70 : ite(67, 18, 69) : BV:8
71 : ite(66, 28, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 18, 72) : BV:8
74 : ite(63, 20, 73) : BV:8
75 : ite(62, 18, 74) : BV:8
76 : ite(61, 15, 75) : BV:8
77 : bvadd(23, 11) : BV:32
78 : eq(77, 13) : BOOL
79 : eq(77, 16) : BOOL
80 : eq(77, 10) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 23) : BOOL
83 : eq(77, 26) : BOOL
84 : eq(77, 29) : BOOL
85 : eq(77, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 28, 87) : BV:8
89 : ite(82, 25, 88) : BV:8
90 : ite(81, 18, 89) : BV:8
91 : ite(80, 20, 90) : BV:8
92 : ite(79, 18, 91) : BV:8
93 : ite(78, 15, 92) : BV:8
94 : bvconcat(42, 59, 76, 93) : BV:32
95 : bvadd(7, 9, 94) : BV:32
96 : eq(95, 13) : BOOL
97 : eq(95, 16) : BOOL
98 : eq(95, 10) : BOOL
99 : eq(95, 21) : BOOL
100 : eq(95, 23) : BOOL
101 : eq(95, 26) : BOOL
102 : eq(95, 29) : BOOL
103 : eq(95, 31) : BOOL
104 : ite(103, 33, 34) : BV:8
105 : ite(102, 18, 104) : BV:8
106 : ite(101, 28, 105) : BV:8
107 : ite(100, 25, 106) : BV:8
108 : ite(99, 18, 107) : BV:8
109 : ite(98, 20, 108) : BV:8
110 : ite(97, 18, 109) : BV:8
111 : ite(96, 15, 110) : BV:8
112 : 2 { 0x2 +1.23e129 } : BV:32
113 : bvadd(112, 9, 94) : BV:32
114 : eq(113, 13) : BOOL
115 : eq(113, 16) : BOOL
116 : eq(113, 10) : BOOL
117 : eq(113, 21) : BOOL
118 : eq(113, 23) : BOOL
119 : eq(113, 26) : BOOL
120 : eq(113, 29) : BOOL
121 : eq(113, 31) : BOOL
122 : ite(121, 33, 34) : BV:8
123 : ite(120, 18, 122) : BV:8
124 : ite(119, 28, 123) : BV:8
125 : ite(118, 25, 124) : BV:8
126 : ite(117, 18, 125) : BV:8
127 : ite(116, 20, 126) : BV:8
128 : ite(115, 18, 127) : BV:8
129 : ite(114, 15, 128) : BV:8
130 : 1 { 0x1 +1.11e129 } : BV:32
131 : bvadd(130, 9, 94) : BV:32
132 : eq(131, 13) : BOOL
133 : eq(131, 16) : BOOL
134 : eq(131, 10) : BOOL
135 : eq(131, 21) : BOOL
136 : eq(131, 23) : BOOL
137 : eq(131, 26) : BOOL
138 : eq(131, 29) : BOOL
139 : eq(131, 31) : BOOL
140 : ite(139, 33, 34) : BV:8
141 : ite(138, 18, 140) : BV:8
142 : ite(137, 28, 141) : BV:8
143 : ite(136, 25, 142) : BV:8
144 : ite(135, 18, 143) : BV:8
145 : ite(134, 20, 144) : BV:8
146 : ite(133, 18, 145) : BV:8
147 : ite(132, 15, 146) : BV:8
148 : bvadd(9, 94) : BV:32
149 : eq(148, 13) : BOOL
150 : eq(148, 16) : BOOL
151 : eq(148, 10) : BOOL
152 : eq(148, 21) : BOOL
153 : eq(148, 23) : BOOL
154 : eq(148, 26) : BOOL
155 : eq(148, 29) : BOOL
156 : eq(148, 31) : BOOL
157 : ite(156, 33, 34) : BV:8
158 : ite(155, 18, 157) : BV:8
159 : ite(154, 28, 158) : BV:8
160 : ite(153, 25, 159) : BV:8
161 : ite(152, 18, 160) : BV:8
162 : ite(151, 20, 161) : BV:8
163 : ite(150, 18, 162) : BV:8
164 : ite(149, 15, 163) : BV:8
165 : bvconcat(111, 129, 147, 164) : BV:32
166 : ite(6, 3, 165) : BV:32
167 : lambda(1, 2, 166) : FUNCTION[BV:32,BV:32 -> BV:32]
168 : sym_const(167) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda47168Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
11 : eq(9, 10) : BOOL
12 : 127 { 0x7f } : BV:8
13 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
14 : eq(9, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
17 : eq(9, 16) : BOOL
18 : 151 { 0x97 -105 } : BV:8
19 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
20 : eq(9, 19) : BOOL
21 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
22 : eq(9, 21) : BOOL
23 : 240 { 0xf0 -16 } : BV:8
24 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
25 : eq(9, 24) : BOOL
26 : 248 { 0xf8 -8 } : BV:8
27 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
28 : eq(9, 27) : BOOL
29 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
30 : eq(9, 29) : BOOL
31 : 61 { 0x3d } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 15, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(20, 15, 36) : BV:8
38 : ite(17, 18, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 15, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 15, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : ite(43, 12, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 7, 8) : BV:32
61 : eq(60, 10) : BOOL
62 : eq(60, 13) : BOOL
63 : eq(60, 16) : BOOL
64 : eq(60, 19) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 15, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 15, 72) : BV:8
74 : ite(63, 18, 73) : BV:8
75 : ite(62, 15, 74) : BV:8
76 : ite(61, 12, 75) : BV:8
77 : bvadd(7, 8) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 13) : BOOL
80 : eq(77, 16) : BOOL
81 : eq(77, 19) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 15, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 15, 89) : BV:8
91 : ite(80, 18, 90) : BV:8
92 : ite(79, 15, 91) : BV:8
93 : ite(78, 12, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(5, 4, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda47169Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
11 : eq(9, 10) : BOOL
12 : 127 { 0x7f } : BV:8
13 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
14 : eq(9, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
17 : eq(9, 16) : BOOL
18 : 151 { 0x97 -105 } : BV:8
19 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
20 : eq(9, 19) : BOOL
21 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
22 : eq(9, 21) : BOOL
23 : 240 { 0xf0 -16 } : BV:8
24 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
25 : eq(9, 24) : BOOL
26 : 248 { 0xf8 -8 } : BV:8
27 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
28 : eq(9, 27) : BOOL
29 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
30 : eq(9, 29) : BOOL
31 : 61 { 0x3d } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 15, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(20, 15, 36) : BV:8
38 : ite(17, 18, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 15, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 15, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : ite(43, 12, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 7, 8) : BV:32
61 : eq(60, 10) : BOOL
62 : eq(60, 13) : BOOL
63 : eq(60, 16) : BOOL
64 : eq(60, 19) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 15, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 15, 72) : BV:8
74 : ite(63, 18, 73) : BV:8
75 : ite(62, 15, 74) : BV:8
76 : ite(61, 12, 75) : BV:8
77 : bvadd(7, 8) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 13) : BOOL
80 : eq(77, 16) : BOOL
81 : eq(77, 19) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 15, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 15, 89) : BV:8
91 : ite(80, 18, 90) : BV:8
92 : ite(79, 15, 91) : BV:8
93 : ite(78, 12, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(5, 4, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda47176Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
10 : eq(8, 9) : BOOL
11 : 127 { 0x7f } : BV:8
12 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
16 : eq(8, 15) : BOOL
17 : 151 { 0x97 -105 } : BV:8
18 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
21 : eq(8, 20) : BOOL
22 : 240 { 0xf0 -16 } : BV:8
23 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
24 : eq(8, 23) : BOOL
25 : 248 { 0xf8 -8 } : BV:8
26 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 61 { 0x3d } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(27, 14, 32) : BV:8
34 : ite(24, 25, 33) : BV:8
35 : ite(21, 22, 34) : BV:8
36 : ite(19, 14, 35) : BV:8
37 : ite(16, 17, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 18) : BOOL
46 : eq(41, 20) : BOOL
47 : eq(41, 23) : BOOL
48 : eq(41, 26) : BOOL
49 : eq(41, 28) : BOOL
50 : ite(49, 30, 31) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : ite(45, 14, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : ite(42, 11, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 6, 7) : BV:32
60 : eq(59, 9) : BOOL
61 : eq(59, 12) : BOOL
62 : eq(59, 15) : BOOL
63 : eq(59, 18) : BOOL
64 : eq(59, 20) : BOOL
65 : eq(59, 23) : BOOL
66 : eq(59, 26) : BOOL
67 : eq(59, 28) : BOOL
68 : ite(67, 30, 31) : BV:8
69 : ite(66, 14, 68) : BV:8
70 : ite(65, 25, 69) : BV:8
71 : ite(64, 22, 70) : BV:8
72 : ite(63, 14, 71) : BV:8
73 : ite(62, 17, 72) : BV:8
74 : ite(61, 14, 73) : BV:8
75 : ite(60, 11, 74) : BV:8
76 : bvadd(6, 7) : BV:32
77 : eq(76, 9) : BOOL
78 : eq(76, 12) : BOOL
79 : eq(76, 15) : BOOL
80 : eq(76, 18) : BOOL
81 : eq(76, 20) : BOOL
82 : eq(76, 23) : BOOL
83 : eq(76, 26) : BOOL
84 : eq(76, 28) : BOOL
85 : ite(84, 30, 31) : BV:8
86 : ite(83, 14, 85) : BV:8
87 : ite(82, 25, 86) : BV:8
88 : ite(81, 22, 87) : BV:8
89 : ite(80, 14, 88) : BV:8
90 : ite(79, 17, 89) : BV:8
91 : ite(78, 14, 90) : BV:8
92 : ite(77, 11, 91) : BV:8
93 : bvconcat(39, 57, 75, 92) : BV:32
94 : ite(3, 4, 93) : BV:32
95 : lambda(1, 94) : FUNCTION[BV:32 -> BV:32]
96 : sym_const(95) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
698551660
=counter_example_end
=global nodece 57 num_edges_traversed 1
=global nodece 57 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 58
=global nodece 58 nodece z3.ce4351.num_edges_traversed2
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(epsilon)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3.ce4351 1ae3e86c5fcf6227b47255135901bd4
=input.spec-%var-x-1
1 : Lambda47255Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47256Var : BV:32
18 : Lambda47257Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 32767 { 0x7fff +1.390613e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32769 { 0x8001 +1.390636e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 32768 { 0x8000 +1.390625e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47258Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
82 : eq(80, 81) : BOOL
83 : 127 { 0x7f } : BV:8
84 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
85 : eq(80, 84) : BOOL
86 : 255 { 0xff -1 } : BV:8
87 : eq(80, 78) : BOOL
88 : 151 { 0x97 -105 } : BV:8
89 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
90 : eq(80, 89) : BOOL
91 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
92 : eq(80, 91) : BOOL
93 : 240 { 0xf0 -16 } : BV:8
94 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
95 : eq(80, 94) : BOOL
96 : 248 { 0xf8 -8 } : BV:8
97 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
98 : eq(80, 97) : BOOL
99 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
100 : eq(80, 99) : BOOL
101 : 61 { 0x3d } : BV:8
102 : 0 { 0x0 } : BV:8
103 : ite(100, 101, 102) : BV:8
104 : ite(98, 86, 103) : BV:8
105 : ite(95, 96, 104) : BV:8
106 : ite(92, 93, 105) : BV:8
107 : ite(90, 86, 106) : BV:8
108 : ite(87, 88, 107) : BV:8
109 : ite(85, 86, 108) : BV:8
110 : ite(82, 83, 109) : BV:8
111 : bvadd(97, 79) : BV:32
112 : eq(111, 81) : BOOL
113 : eq(111, 84) : BOOL
114 : eq(111, 78) : BOOL
115 : eq(111, 89) : BOOL
116 : eq(111, 91) : BOOL
117 : eq(111, 94) : BOOL
118 : eq(111, 97) : BOOL
119 : eq(111, 99) : BOOL
120 : ite(119, 101, 102) : BV:8
121 : ite(118, 86, 120) : BV:8
122 : ite(117, 96, 121) : BV:8
123 : ite(116, 93, 122) : BV:8
124 : ite(115, 86, 123) : BV:8
125 : ite(114, 88, 124) : BV:8
126 : ite(113, 86, 125) : BV:8
127 : ite(112, 83, 126) : BV:8
128 : bvadd(99, 79) : BV:32
129 : eq(128, 81) : BOOL
130 : eq(128, 84) : BOOL
131 : eq(128, 78) : BOOL
132 : eq(128, 89) : BOOL
133 : eq(128, 91) : BOOL
134 : eq(128, 94) : BOOL
135 : eq(128, 97) : BOOL
136 : eq(128, 99) : BOOL
137 : ite(136, 101, 102) : BV:8
138 : ite(135, 86, 137) : BV:8
139 : ite(134, 96, 138) : BV:8
140 : ite(133, 93, 139) : BV:8
141 : ite(132, 86, 140) : BV:8
142 : ite(131, 88, 141) : BV:8
143 : ite(130, 86, 142) : BV:8
144 : ite(129, 83, 143) : BV:8
145 : bvadd(91, 79) : BV:32
146 : eq(145, 81) : BOOL
147 : eq(145, 84) : BOOL
148 : eq(145, 78) : BOOL
149 : eq(145, 89) : BOOL
150 : eq(145, 91) : BOOL
151 : eq(145, 94) : BOOL
152 : eq(145, 97) : BOOL
153 : eq(145, 99) : BOOL
154 : ite(153, 101, 102) : BV:8
155 : ite(152, 86, 154) : BV:8
156 : ite(151, 96, 155) : BV:8
157 : ite(150, 93, 156) : BV:8
158 : ite(149, 86, 157) : BV:8
159 : ite(148, 88, 158) : BV:8
160 : ite(147, 86, 159) : BV:8
161 : ite(146, 83, 160) : BV:8
162 : bvconcat(110, 127, 144, 161) : BV:32
163 : bvadd(75, 77, 162) : BV:32
164 : eq(163, 81) : BOOL
165 : eq(163, 84) : BOOL
166 : eq(163, 78) : BOOL
167 : eq(163, 89) : BOOL
168 : eq(163, 91) : BOOL
169 : eq(163, 94) : BOOL
170 : eq(163, 97) : BOOL
171 : eq(163, 99) : BOOL
172 : ite(171, 101, 102) : BV:8
173 : ite(170, 86, 172) : BV:8
174 : ite(169, 96, 173) : BV:8
175 : ite(168, 93, 174) : BV:8
176 : ite(167, 86, 175) : BV:8
177 : ite(166, 88, 176) : BV:8
178 : ite(165, 86, 177) : BV:8
179 : ite(164, 83, 178) : BV:8
180 : 2 { 0x2 +1.23e129 } : BV:32
181 : bvadd(180, 77, 162) : BV:32
182 : eq(181, 81) : BOOL
183 : eq(181, 84) : BOOL
184 : eq(181, 78) : BOOL
185 : eq(181, 89) : BOOL
186 : eq(181, 91) : BOOL
187 : eq(181, 94) : BOOL
188 : eq(181, 97) : BOOL
189 : eq(181, 99) : BOOL
190 : ite(189, 101, 102) : BV:8
191 : ite(188, 86, 190) : BV:8
192 : ite(187, 96, 191) : BV:8
193 : ite(186, 93, 192) : BV:8
194 : ite(185, 86, 193) : BV:8
195 : ite(184, 88, 194) : BV:8
196 : ite(183, 86, 195) : BV:8
197 : ite(182, 83, 196) : BV:8
198 : 1 { 0x1 +1.11e129 } : BV:32
199 : bvadd(198, 77, 162) : BV:32
200 : eq(199, 81) : BOOL
201 : eq(199, 84) : BOOL
202 : eq(199, 78) : BOOL
203 : eq(199, 89) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : eq(199, 99) : BOOL
208 : ite(207, 101, 102) : BV:8
209 : ite(206, 86, 208) : BV:8
210 : ite(205, 96, 209) : BV:8
211 : ite(204, 93, 210) : BV:8
212 : ite(203, 86, 211) : BV:8
213 : ite(202, 88, 212) : BV:8
214 : ite(201, 86, 213) : BV:8
215 : ite(200, 83, 214) : BV:8
216 : bvadd(77, 162) : BV:32
217 : eq(216, 81) : BOOL
218 : eq(216, 84) : BOOL
219 : eq(216, 78) : BOOL
220 : eq(216, 89) : BOOL
221 : eq(216, 91) : BOOL
222 : eq(216, 94) : BOOL
223 : eq(216, 97) : BOOL
224 : eq(216, 99) : BOOL
225 : ite(224, 101, 102) : BV:8
226 : ite(223, 86, 225) : BV:8
227 : ite(222, 96, 226) : BV:8
228 : ite(221, 93, 227) : BV:8
229 : ite(220, 86, 228) : BV:8
230 : ite(219, 88, 229) : BV:8
231 : ite(218, 86, 230) : BV:8
232 : ite(217, 83, 231) : BV:8
233 : bvconcat(179, 197, 215, 232) : BV:32
234 : ite(55, 2, 233) : BV:32
235 : ite(74, 233, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : lambda(52, 236) : FUNCTION[BV:32 -> BV:32]
238 : map(51, 237) : MAP[BV:32 -> BV:32]
239 : lambda(17, 238) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
240 : map(16, 239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
241 : sym_const(240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda47275Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47276Var : BV:32
18 : Lambda47277Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 32767 { 0x7fff +1.390613e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32769 { 0x8001 +1.390636e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 32768 { 0x8000 +1.390625e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47278Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
63 : eq(61, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
66 : eq(61, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : eq(61, 59) : BOOL
69 : 151 { 0x97 -105 } : BV:8
70 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
71 : eq(61, 70) : BOOL
72 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
73 : eq(61, 72) : BOOL
74 : 240 { 0xf0 -16 } : BV:8
75 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
76 : eq(61, 75) : BOOL
77 : 248 { 0xf8 -8 } : BV:8
78 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
79 : eq(61, 78) : BOOL
80 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
81 : eq(61, 80) : BOOL
82 : 61 { 0x3d } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : ite(79, 67, 84) : BV:8
86 : ite(76, 77, 85) : BV:8
87 : ite(73, 74, 86) : BV:8
88 : ite(71, 67, 87) : BV:8
89 : ite(68, 69, 88) : BV:8
90 : ite(66, 67, 89) : BV:8
91 : ite(63, 64, 90) : BV:8
92 : bvadd(78, 60) : BV:32
93 : eq(92, 62) : BOOL
94 : eq(92, 65) : BOOL
95 : eq(92, 59) : BOOL
96 : eq(92, 70) : BOOL
97 : eq(92, 72) : BOOL
98 : eq(92, 75) : BOOL
99 : eq(92, 78) : BOOL
100 : eq(92, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : ite(99, 67, 101) : BV:8
103 : ite(98, 77, 102) : BV:8
104 : ite(97, 74, 103) : BV:8
105 : ite(96, 67, 104) : BV:8
106 : ite(95, 69, 105) : BV:8
107 : ite(94, 67, 106) : BV:8
108 : ite(93, 64, 107) : BV:8
109 : bvadd(80, 60) : BV:32
110 : eq(109, 62) : BOOL
111 : eq(109, 65) : BOOL
112 : eq(109, 59) : BOOL
113 : eq(109, 70) : BOOL
114 : eq(109, 72) : BOOL
115 : eq(109, 75) : BOOL
116 : eq(109, 78) : BOOL
117 : eq(109, 80) : BOOL
118 : ite(117, 82, 83) : BV:8
119 : ite(116, 67, 118) : BV:8
120 : ite(115, 77, 119) : BV:8
121 : ite(114, 74, 120) : BV:8
122 : ite(113, 67, 121) : BV:8
123 : ite(112, 69, 122) : BV:8
124 : ite(111, 67, 123) : BV:8
125 : ite(110, 64, 124) : BV:8
126 : bvadd(72, 60) : BV:32
127 : eq(126, 62) : BOOL
128 : eq(126, 65) : BOOL
129 : eq(126, 59) : BOOL
130 : eq(126, 70) : BOOL
131 : eq(126, 72) : BOOL
132 : eq(126, 75) : BOOL
133 : eq(126, 78) : BOOL
134 : eq(126, 80) : BOOL
135 : ite(134, 82, 83) : BV:8
136 : ite(133, 67, 135) : BV:8
137 : ite(132, 77, 136) : BV:8
138 : ite(131, 74, 137) : BV:8
139 : ite(130, 67, 138) : BV:8
140 : ite(129, 69, 139) : BV:8
141 : ite(128, 67, 140) : BV:8
142 : ite(127, 64, 141) : BV:8
143 : bvconcat(91, 108, 125, 142) : BV:32
144 : bvadd(56, 58, 143) : BV:32
145 : eq(144, 62) : BOOL
146 : eq(144, 65) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 70) : BOOL
149 : eq(144, 72) : BOOL
150 : eq(144, 75) : BOOL
151 : eq(144, 78) : BOOL
152 : eq(144, 80) : BOOL
153 : ite(152, 82, 83) : BV:8
154 : ite(151, 67, 153) : BV:8
155 : ite(150, 77, 154) : BV:8
156 : ite(149, 74, 155) : BV:8
157 : ite(148, 67, 156) : BV:8
158 : ite(147, 69, 157) : BV:8
159 : ite(146, 67, 158) : BV:8
160 : ite(145, 64, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 58, 143) : BV:32
163 : eq(162, 62) : BOOL
164 : eq(162, 65) : BOOL
165 : eq(162, 59) : BOOL
166 : eq(162, 70) : BOOL
167 : eq(162, 72) : BOOL
168 : eq(162, 75) : BOOL
169 : eq(162, 78) : BOOL
170 : eq(162, 80) : BOOL
171 : ite(170, 82, 83) : BV:8
172 : ite(169, 67, 171) : BV:8
173 : ite(168, 77, 172) : BV:8
174 : ite(167, 74, 173) : BV:8
175 : ite(166, 67, 174) : BV:8
176 : ite(165, 69, 175) : BV:8
177 : ite(164, 67, 176) : BV:8
178 : ite(163, 64, 177) : BV:8
179 : 1 { 0x1 +1.11e129 } : BV:32
180 : bvadd(179, 58, 143) : BV:32
181 : eq(180, 62) : BOOL
182 : eq(180, 65) : BOOL
183 : eq(180, 59) : BOOL
184 : eq(180, 70) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : eq(180, 80) : BOOL
189 : ite(188, 82, 83) : BV:8
190 : ite(187, 67, 189) : BV:8
191 : ite(186, 77, 190) : BV:8
192 : ite(185, 74, 191) : BV:8
193 : ite(184, 67, 192) : BV:8
194 : ite(183, 69, 193) : BV:8
195 : ite(182, 67, 194) : BV:8
196 : ite(181, 64, 195) : BV:8
197 : bvadd(58, 143) : BV:32
198 : eq(197, 62) : BOOL
199 : eq(197, 65) : BOOL
200 : eq(197, 59) : BOOL
201 : eq(197, 70) : BOOL
202 : eq(197, 72) : BOOL
203 : eq(197, 75) : BOOL
204 : eq(197, 78) : BOOL
205 : eq(197, 80) : BOOL
206 : ite(205, 82, 83) : BV:8
207 : ite(204, 67, 206) : BV:8
208 : ite(203, 77, 207) : BV:8
209 : ite(202, 74, 208) : BV:8
210 : ite(201, 67, 209) : BV:8
211 : ite(200, 69, 210) : BV:8
212 : ite(199, 67, 211) : BV:8
213 : ite(198, 64, 212) : BV:8
214 : bvconcat(160, 178, 196, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1610088451 ] -> 0, [ 1610088452; 1610088452 ] -> 240, [ 1610088453; 1610088453 ] -> 61, [ 1610088454; 1610088454 ] -> 255, [ 1610088455; 1610088455 ] -> 151, [ 1610088456; 1610612735 ] -> 0, [ 1610612736; 1610612736 ] -> 248, [ 1610612737; 1610612738 ] -> 255, [ 1610612739; 1610612739 ] -> 127, [ 1610612740; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 81805347 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 81805348; 81805351 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 81805352; 1742864423 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1742864424; 1742864427 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1742864428; 4082352139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4082352140; 4082352143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4082352144; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4082352140 { 0xf353c00c -212615156 -1.65429830e103 } : BV:32
=input.dst.llvm-%m
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1742864424 { 0x67e20028 +1.76562976e80 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 81805348 { 0x4e04024 +1.75195741e138 } : BV:32
=input.dst.llvm-%x
1 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 845160944 { 0x326021f0 +1.75103569e229 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda47282Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47283Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
23 : bvadd(18, 21, 22) : BV:32
24 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
25 : eq(23, 24) : BOOL
26 : 127 { 0x7f } : BV:8
27 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
31 : eq(23, 30) : BOOL
32 : 151 { 0x97 -105 } : BV:8
33 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
34 : eq(23, 33) : BOOL
35 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
36 : eq(23, 35) : BOOL
37 : 240 { 0xf0 -16 } : BV:8
38 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
39 : eq(23, 38) : BOOL
40 : 248 { 0xf8 -8 } : BV:8
41 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
42 : eq(23, 41) : BOOL
43 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
44 : eq(23, 43) : BOOL
45 : 61 { 0x3d } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 29, 47) : BV:8
49 : ite(39, 40, 48) : BV:8
50 : ite(36, 37, 49) : BV:8
51 : ite(34, 29, 50) : BV:8
52 : ite(31, 32, 51) : BV:8
53 : ite(28, 29, 52) : BV:8
54 : ite(25, 26, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 21, 22) : BV:32
57 : eq(56, 24) : BOOL
58 : eq(56, 27) : BOOL
59 : eq(56, 30) : BOOL
60 : eq(56, 33) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 38) : BOOL
63 : eq(56, 41) : BOOL
64 : eq(56, 43) : BOOL
65 : ite(64, 45, 46) : BV:8
66 : ite(63, 29, 65) : BV:8
67 : ite(62, 40, 66) : BV:8
68 : ite(61, 37, 67) : BV:8
69 : ite(60, 29, 68) : BV:8
70 : ite(59, 32, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : ite(57, 26, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 21, 22) : BV:32
75 : eq(74, 24) : BOOL
76 : eq(74, 27) : BOOL
77 : eq(74, 30) : BOOL
78 : eq(74, 33) : BOOL
79 : eq(74, 35) : BOOL
80 : eq(74, 38) : BOOL
81 : eq(74, 41) : BOOL
82 : eq(74, 43) : BOOL
83 : ite(82, 45, 46) : BV:8
84 : ite(81, 29, 83) : BV:8
85 : ite(80, 40, 84) : BV:8
86 : ite(79, 37, 85) : BV:8
87 : ite(78, 29, 86) : BV:8
88 : ite(77, 32, 87) : BV:8
89 : ite(76, 29, 88) : BV:8
90 : ite(75, 26, 89) : BV:8
91 : bvadd(21, 22) : BV:32
92 : eq(91, 24) : BOOL
93 : eq(91, 27) : BOOL
94 : eq(91, 30) : BOOL
95 : eq(91, 33) : BOOL
96 : eq(91, 35) : BOOL
97 : eq(91, 38) : BOOL
98 : eq(91, 41) : BOOL
99 : eq(91, 43) : BOOL
100 : ite(99, 45, 46) : BV:8
101 : ite(98, 29, 100) : BV:8
102 : ite(97, 40, 101) : BV:8
103 : ite(96, 37, 102) : BV:8
104 : ite(95, 29, 103) : BV:8
105 : ite(94, 32, 104) : BV:8
106 : ite(93, 29, 105) : BV:8
107 : ite(92, 26, 106) : BV:8
108 : bvconcat(54, 72, 90, 107) : BV:32
109 : ite(19, 2, 108) : BV:32
110 : lambda(17, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(16, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
2 : unit : UNIT
3 : Lambda47264Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 32767 { 0x7fff +1.390613e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 32768 { 0x8000 +1.390625e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda47265Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
26 : bvadd(20, 24, 25) : BV:32
27 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
28 : eq(26, 27) : BOOL
29 : 127 { 0x7f } : BV:8
30 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
31 : eq(26, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
34 : eq(26, 33) : BOOL
35 : 151 { 0x97 -105 } : BV:8
36 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
37 : eq(26, 36) : BOOL
38 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
39 : eq(26, 38) : BOOL
40 : 240 { 0xf0 -16 } : BV:8
41 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
42 : eq(26, 41) : BOOL
43 : 248 { 0xf8 -8 } : BV:8
44 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
45 : eq(26, 44) : BOOL
46 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
47 : eq(26, 46) : BOOL
48 : 61 { 0x3d } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(45, 32, 50) : BV:8
52 : ite(42, 43, 51) : BV:8
53 : ite(39, 40, 52) : BV:8
54 : ite(37, 32, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(31, 32, 55) : BV:8
57 : ite(28, 29, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 24, 25) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : eq(59, 33) : BOOL
63 : eq(59, 36) : BOOL
64 : eq(59, 38) : BOOL
65 : eq(59, 41) : BOOL
66 : eq(59, 44) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 32, 68) : BV:8
70 : ite(65, 43, 69) : BV:8
71 : ite(64, 40, 70) : BV:8
72 : ite(63, 32, 71) : BV:8
73 : ite(62, 35, 72) : BV:8
74 : ite(61, 32, 73) : BV:8
75 : ite(60, 29, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 24, 25) : BV:32
78 : eq(77, 27) : BOOL
79 : eq(77, 30) : BOOL
80 : eq(77, 33) : BOOL
81 : eq(77, 36) : BOOL
82 : eq(77, 38) : BOOL
83 : eq(77, 41) : BOOL
84 : eq(77, 44) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 32, 86) : BV:8
88 : ite(83, 43, 87) : BV:8
89 : ite(82, 40, 88) : BV:8
90 : ite(81, 32, 89) : BV:8
91 : ite(80, 35, 90) : BV:8
92 : ite(79, 32, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : bvadd(24, 25) : BV:32
95 : eq(94, 27) : BOOL
96 : eq(94, 30) : BOOL
97 : eq(94, 33) : BOOL
98 : eq(94, 36) : BOOL
99 : eq(94, 38) : BOOL
100 : eq(94, 41) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 32, 103) : BV:8
105 : ite(100, 43, 104) : BV:8
106 : ite(99, 40, 105) : BV:8
107 : ite(98, 32, 106) : BV:8
108 : ite(97, 35, 107) : BV:8
109 : ite(96, 32, 108) : BV:8
110 : ite(95, 29, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(22, 4, 111) : BV:32
113 : ite(21, 4, 112) : BV:32
114 : lambda(19, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(18, 114) : MAP[BV:32 -> BV:32]
116 : sum(1, 2, 115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
117 : sym_const(116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 376516645 { 0x16713025 +1.88428175e173 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda47287Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47288Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
24 : bvadd(18, 22, 23) : BV:32
25 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
26 : eq(24, 25) : BOOL
27 : 127 { 0x7f } : BV:8
28 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
29 : eq(24, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
32 : eq(24, 31) : BOOL
33 : 151 { 0x97 -105 } : BV:8
34 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
35 : eq(24, 34) : BOOL
36 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
37 : eq(24, 36) : BOOL
38 : 240 { 0xf0 -16 } : BV:8
39 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
40 : eq(24, 39) : BOOL
41 : 248 { 0xf8 -8 } : BV:8
42 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
43 : eq(24, 42) : BOOL
44 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
45 : eq(24, 44) : BOOL
46 : 61 { 0x3d } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(43, 30, 48) : BV:8
50 : ite(40, 41, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(35, 30, 51) : BV:8
53 : ite(32, 33, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(26, 27, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 22, 23) : BV:32
58 : eq(57, 25) : BOOL
59 : eq(57, 28) : BOOL
60 : eq(57, 31) : BOOL
61 : eq(57, 34) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 30, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 30, 69) : BV:8
71 : ite(60, 33, 70) : BV:8
72 : ite(59, 30, 71) : BV:8
73 : ite(58, 27, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 22, 23) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : eq(75, 34) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 30, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 30, 87) : BV:8
89 : ite(78, 33, 88) : BV:8
90 : ite(77, 30, 89) : BV:8
91 : ite(76, 27, 90) : BV:8
92 : bvadd(22, 23) : BV:32
93 : eq(92, 25) : BOOL
94 : eq(92, 28) : BOOL
95 : eq(92, 31) : BOOL
96 : eq(92, 34) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 30, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 30, 104) : BV:8
106 : ite(95, 33, 105) : BV:8
107 : ite(94, 30, 106) : BV:8
108 : ite(93, 27, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(20, 2, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 135570371 { 0x814a3c3 +1.16124761e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1742864424 { 0x67e20028 +1.76562976e80 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1742864427 { 0x67e2002b +1.76563012e80 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 81805348 { 0x4e04024 +1.75195741e138 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 81805351 { 0x4e04027 +1.75195777e138 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4082352140 { 0xf353c00c -212615156 -1.65429830e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4082352143 { 0xf353c00f -212615153 -1.65429866e103 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda47147Var : BV:32
2 : Lambda47148Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 32767 { 0x7fff +1.390613e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 32769 { 0x8001 +1.390636e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 32768 { 0x8000 +1.390625e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
55 : eq(53, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
58 : eq(53, 57) : BOOL
59 : 255 { 0xff -1 } : BV:8
60 : eq(53, 51) : BOOL
61 : 151 { 0x97 -105 } : BV:8
62 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
63 : eq(53, 62) : BOOL
64 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
65 : eq(53, 64) : BOOL
66 : 240 { 0xf0 -16 } : BV:8
67 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
68 : eq(53, 67) : BOOL
69 : 248 { 0xf8 -8 } : BV:8
70 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
71 : eq(53, 70) : BOOL
72 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
73 : eq(53, 72) : BOOL
74 : 61 { 0x3d } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(71, 59, 76) : BV:8
78 : ite(68, 69, 77) : BV:8
79 : ite(65, 66, 78) : BV:8
80 : ite(63, 59, 79) : BV:8
81 : ite(60, 61, 80) : BV:8
82 : ite(58, 59, 81) : BV:8
83 : ite(55, 56, 82) : BV:8
84 : bvadd(70, 52) : BV:32
85 : eq(84, 54) : BOOL
86 : eq(84, 57) : BOOL
87 : eq(84, 51) : BOOL
88 : eq(84, 62) : BOOL
89 : eq(84, 64) : BOOL
90 : eq(84, 67) : BOOL
91 : eq(84, 70) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 59, 93) : BV:8
95 : ite(90, 69, 94) : BV:8
96 : ite(89, 66, 95) : BV:8
97 : ite(88, 59, 96) : BV:8
98 : ite(87, 61, 97) : BV:8
99 : ite(86, 59, 98) : BV:8
100 : ite(85, 56, 99) : BV:8
101 : bvadd(72, 52) : BV:32
102 : eq(101, 54) : BOOL
103 : eq(101, 57) : BOOL
104 : eq(101, 51) : BOOL
105 : eq(101, 62) : BOOL
106 : eq(101, 64) : BOOL
107 : eq(101, 67) : BOOL
108 : eq(101, 70) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 59, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 66, 112) : BV:8
114 : ite(105, 59, 113) : BV:8
115 : ite(104, 61, 114) : BV:8
116 : ite(103, 59, 115) : BV:8
117 : ite(102, 56, 116) : BV:8
118 : bvadd(64, 52) : BV:32
119 : eq(118, 54) : BOOL
120 : eq(118, 57) : BOOL
121 : eq(118, 51) : BOOL
122 : eq(118, 62) : BOOL
123 : eq(118, 64) : BOOL
124 : eq(118, 67) : BOOL
125 : eq(118, 70) : BOOL
126 : eq(118, 72) : BOOL
127 : ite(126, 74, 75) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 69, 128) : BV:8
130 : ite(123, 66, 129) : BV:8
131 : ite(122, 59, 130) : BV:8
132 : ite(121, 61, 131) : BV:8
133 : ite(120, 59, 132) : BV:8
134 : ite(119, 56, 133) : BV:8
135 : bvconcat(83, 100, 117, 134) : BV:32
136 : bvadd(48, 50, 135) : BV:32
137 : eq(136, 54) : BOOL
138 : eq(136, 57) : BOOL
139 : eq(136, 51) : BOOL
140 : eq(136, 62) : BOOL
141 : eq(136, 64) : BOOL
142 : eq(136, 67) : BOOL
143 : eq(136, 70) : BOOL
144 : eq(136, 72) : BOOL
145 : ite(144, 74, 75) : BV:8
146 : ite(143, 59, 145) : BV:8
147 : ite(142, 69, 146) : BV:8
148 : ite(141, 66, 147) : BV:8
149 : ite(140, 59, 148) : BV:8
150 : ite(139, 61, 149) : BV:8
151 : ite(138, 59, 150) : BV:8
152 : ite(137, 56, 151) : BV:8
153 : 2 { 0x2 +1.23e129 } : BV:32
154 : bvadd(153, 50, 135) : BV:32
155 : eq(154, 54) : BOOL
156 : eq(154, 57) : BOOL
157 : eq(154, 51) : BOOL
158 : eq(154, 62) : BOOL
159 : eq(154, 64) : BOOL
160 : eq(154, 67) : BOOL
161 : eq(154, 70) : BOOL
162 : eq(154, 72) : BOOL
163 : ite(162, 74, 75) : BV:8
164 : ite(161, 59, 163) : BV:8
165 : ite(160, 69, 164) : BV:8
166 : ite(159, 66, 165) : BV:8
167 : ite(158, 59, 166) : BV:8
168 : ite(157, 61, 167) : BV:8
169 : ite(156, 59, 168) : BV:8
170 : ite(155, 56, 169) : BV:8
171 : 1 { 0x1 +1.11e129 } : BV:32
172 : bvadd(171, 50, 135) : BV:32
173 : eq(172, 54) : BOOL
174 : eq(172, 57) : BOOL
175 : eq(172, 51) : BOOL
176 : eq(172, 62) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : eq(172, 72) : BOOL
181 : ite(180, 74, 75) : BV:8
182 : ite(179, 59, 181) : BV:8
183 : ite(178, 69, 182) : BV:8
184 : ite(177, 66, 183) : BV:8
185 : ite(176, 59, 184) : BV:8
186 : ite(175, 61, 185) : BV:8
187 : ite(174, 59, 186) : BV:8
188 : ite(173, 56, 187) : BV:8
189 : bvadd(50, 135) : BV:32
190 : eq(189, 54) : BOOL
191 : eq(189, 57) : BOOL
192 : eq(189, 51) : BOOL
193 : eq(189, 62) : BOOL
194 : eq(189, 64) : BOOL
195 : eq(189, 67) : BOOL
196 : eq(189, 70) : BOOL
197 : eq(189, 72) : BOOL
198 : ite(197, 74, 75) : BV:8
199 : ite(196, 59, 198) : BV:8
200 : ite(195, 69, 199) : BV:8
201 : ite(194, 66, 200) : BV:8
202 : ite(193, 59, 201) : BV:8
203 : ite(192, 61, 202) : BV:8
204 : ite(191, 59, 203) : BV:8
205 : ite(190, 56, 204) : BV:8
206 : bvconcat(152, 170, 188, 205) : BV:32
207 : ite(6, 3, 206) : BV:32
208 : ite(47, 206, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda47152Var : BV:32
2 : Lambda47153Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 32767 { 0x7fff +1.390613e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32769 { 0x8001 +1.390636e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 32768 { 0x8000 +1.390625e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda47161Var : BV:32
2 : Lambda47162Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 32767 { 0x7fff +1.390613e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32769 { 0x8001 +1.390636e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 32768 { 0x8000 +1.390625e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda47157Var : BV:32
2 : Lambda47158Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
14 : eq(12, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
17 : eq(12, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : eq(12, 10) : BOOL
20 : 151 { 0x97 -105 } : BV:8
21 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
22 : eq(12, 21) : BOOL
23 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
24 : eq(12, 23) : BOOL
25 : 240 { 0xf0 -16 } : BV:8
26 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
27 : eq(12, 26) : BOOL
28 : 248 { 0xf8 -8 } : BV:8
29 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
30 : eq(12, 29) : BOOL
31 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
32 : eq(12, 31) : BOOL
33 : 61 { 0x3d } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(27, 28, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 18, 38) : BV:8
40 : ite(19, 20, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : ite(14, 15, 41) : BV:8
43 : bvadd(29, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 10) : BOOL
47 : eq(43, 21) : BOOL
48 : eq(43, 23) : BOOL
49 : eq(43, 26) : BOOL
50 : eq(43, 29) : BOOL
51 : eq(43, 31) : BOOL
52 : ite(51, 33, 34) : BV:8
53 : ite(50, 18, 52) : BV:8
54 : ite(49, 28, 53) : BV:8
55 : ite(48, 25, 54) : BV:8
56 : ite(47, 18, 55) : BV:8
57 : ite(46, 20, 56) : BV:8
58 : ite(45, 18, 57) : BV:8
59 : ite(44, 15, 58) : BV:8
60 : bvadd(31, 11) : BV:32
61 : eq(60, 13) : BOOL
62 : eq(60, 16) : BOOL
63 : eq(60, 10) : BOOL
64 : eq(60, 21) : BOOL
65 : eq(60, 23) : BOOL
66 : eq(60, 26) : BOOL
67 : eq(60, 29) : BOOL
68 : eq(60, 31) : BOOL
69 : ite(68, 33, 34) : BV:8
70 : ite(67, 18, 69) : BV:8
71 : ite(66, 28, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 18, 72) : BV:8
74 : ite(63, 20, 73) : BV:8
75 : ite(62, 18, 74) : BV:8
76 : ite(61, 15, 75) : BV:8
77 : bvadd(23, 11) : BV:32
78 : eq(77, 13) : BOOL
79 : eq(77, 16) : BOOL
80 : eq(77, 10) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 23) : BOOL
83 : eq(77, 26) : BOOL
84 : eq(77, 29) : BOOL
85 : eq(77, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 28, 87) : BV:8
89 : ite(82, 25, 88) : BV:8
90 : ite(81, 18, 89) : BV:8
91 : ite(80, 20, 90) : BV:8
92 : ite(79, 18, 91) : BV:8
93 : ite(78, 15, 92) : BV:8
94 : bvconcat(42, 59, 76, 93) : BV:32
95 : bvadd(7, 9, 94) : BV:32
96 : eq(95, 13) : BOOL
97 : eq(95, 16) : BOOL
98 : eq(95, 10) : BOOL
99 : eq(95, 21) : BOOL
100 : eq(95, 23) : BOOL
101 : eq(95, 26) : BOOL
102 : eq(95, 29) : BOOL
103 : eq(95, 31) : BOOL
104 : ite(103, 33, 34) : BV:8
105 : ite(102, 18, 104) : BV:8
106 : ite(101, 28, 105) : BV:8
107 : ite(100, 25, 106) : BV:8
108 : ite(99, 18, 107) : BV:8
109 : ite(98, 20, 108) : BV:8
110 : ite(97, 18, 109) : BV:8
111 : ite(96, 15, 110) : BV:8
112 : 2 { 0x2 +1.23e129 } : BV:32
113 : bvadd(112, 9, 94) : BV:32
114 : eq(113, 13) : BOOL
115 : eq(113, 16) : BOOL
116 : eq(113, 10) : BOOL
117 : eq(113, 21) : BOOL
118 : eq(113, 23) : BOOL
119 : eq(113, 26) : BOOL
120 : eq(113, 29) : BOOL
121 : eq(113, 31) : BOOL
122 : ite(121, 33, 34) : BV:8
123 : ite(120, 18, 122) : BV:8
124 : ite(119, 28, 123) : BV:8
125 : ite(118, 25, 124) : BV:8
126 : ite(117, 18, 125) : BV:8
127 : ite(116, 20, 126) : BV:8
128 : ite(115, 18, 127) : BV:8
129 : ite(114, 15, 128) : BV:8
130 : 1 { 0x1 +1.11e129 } : BV:32
131 : bvadd(130, 9, 94) : BV:32
132 : eq(131, 13) : BOOL
133 : eq(131, 16) : BOOL
134 : eq(131, 10) : BOOL
135 : eq(131, 21) : BOOL
136 : eq(131, 23) : BOOL
137 : eq(131, 26) : BOOL
138 : eq(131, 29) : BOOL
139 : eq(131, 31) : BOOL
140 : ite(139, 33, 34) : BV:8
141 : ite(138, 18, 140) : BV:8
142 : ite(137, 28, 141) : BV:8
143 : ite(136, 25, 142) : BV:8
144 : ite(135, 18, 143) : BV:8
145 : ite(134, 20, 144) : BV:8
146 : ite(133, 18, 145) : BV:8
147 : ite(132, 15, 146) : BV:8
148 : bvadd(9, 94) : BV:32
149 : eq(148, 13) : BOOL
150 : eq(148, 16) : BOOL
151 : eq(148, 10) : BOOL
152 : eq(148, 21) : BOOL
153 : eq(148, 23) : BOOL
154 : eq(148, 26) : BOOL
155 : eq(148, 29) : BOOL
156 : eq(148, 31) : BOOL
157 : ite(156, 33, 34) : BV:8
158 : ite(155, 18, 157) : BV:8
159 : ite(154, 28, 158) : BV:8
160 : ite(153, 25, 159) : BV:8
161 : ite(152, 18, 160) : BV:8
162 : ite(151, 20, 161) : BV:8
163 : ite(150, 18, 162) : BV:8
164 : ite(149, 15, 163) : BV:8
165 : bvconcat(111, 129, 147, 164) : BV:32
166 : ite(6, 3, 165) : BV:32
167 : lambda(1, 2, 166) : FUNCTION[BV:32,BV:32 -> BV:32]
168 : sym_const(167) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda47168Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
11 : eq(9, 10) : BOOL
12 : 127 { 0x7f } : BV:8
13 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
14 : eq(9, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
17 : eq(9, 16) : BOOL
18 : 151 { 0x97 -105 } : BV:8
19 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
20 : eq(9, 19) : BOOL
21 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
22 : eq(9, 21) : BOOL
23 : 240 { 0xf0 -16 } : BV:8
24 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
25 : eq(9, 24) : BOOL
26 : 248 { 0xf8 -8 } : BV:8
27 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
28 : eq(9, 27) : BOOL
29 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
30 : eq(9, 29) : BOOL
31 : 61 { 0x3d } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 15, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(20, 15, 36) : BV:8
38 : ite(17, 18, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 15, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 15, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : ite(43, 12, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 7, 8) : BV:32
61 : eq(60, 10) : BOOL
62 : eq(60, 13) : BOOL
63 : eq(60, 16) : BOOL
64 : eq(60, 19) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 15, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 15, 72) : BV:8
74 : ite(63, 18, 73) : BV:8
75 : ite(62, 15, 74) : BV:8
76 : ite(61, 12, 75) : BV:8
77 : bvadd(7, 8) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 13) : BOOL
80 : eq(77, 16) : BOOL
81 : eq(77, 19) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 15, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 15, 89) : BV:8
91 : ite(80, 18, 90) : BV:8
92 : ite(79, 15, 91) : BV:8
93 : ite(78, 12, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(5, 4, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda47169Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
11 : eq(9, 10) : BOOL
12 : 127 { 0x7f } : BV:8
13 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
14 : eq(9, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
17 : eq(9, 16) : BOOL
18 : 151 { 0x97 -105 } : BV:8
19 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
20 : eq(9, 19) : BOOL
21 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
22 : eq(9, 21) : BOOL
23 : 240 { 0xf0 -16 } : BV:8
24 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
25 : eq(9, 24) : BOOL
26 : 248 { 0xf8 -8 } : BV:8
27 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
28 : eq(9, 27) : BOOL
29 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
30 : eq(9, 29) : BOOL
31 : 61 { 0x3d } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 15, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(20, 15, 36) : BV:8
38 : ite(17, 18, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 15, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 15, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : ite(43, 12, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 7, 8) : BV:32
61 : eq(60, 10) : BOOL
62 : eq(60, 13) : BOOL
63 : eq(60, 16) : BOOL
64 : eq(60, 19) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 15, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 15, 72) : BV:8
74 : ite(63, 18, 73) : BV:8
75 : ite(62, 15, 74) : BV:8
76 : ite(61, 12, 75) : BV:8
77 : bvadd(7, 8) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 13) : BOOL
80 : eq(77, 16) : BOOL
81 : eq(77, 19) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 15, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 15, 89) : BV:8
91 : ite(80, 18, 90) : BV:8
92 : ite(79, 15, 91) : BV:8
93 : ite(78, 12, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(5, 4, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda47176Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2147483640 { 0x7ffffff8 +1.99999904e128 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 1610612739 { 0x60000003 +1.35e65 } : BV:32
10 : eq(8, 9) : BOOL
11 : 127 { 0x7f } : BV:8
12 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1610088455 { 0x5ff80007 +1.93750083e64 } : BV:32
16 : eq(8, 15) : BOOL
17 : 151 { 0x97 -105 } : BV:8
18 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1610088452 { 0x5ff80004 +1.93750047e64 } : BV:32
21 : eq(8, 20) : BOOL
22 : 240 { 0xf0 -16 } : BV:8
23 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
24 : eq(8, 23) : BOOL
25 : 248 { 0xf8 -8 } : BV:8
26 : 1610088454 { 0x5ff80006 +1.93750071e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 1610088453 { 0x5ff80005 +1.93750059e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 61 { 0x3d } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(27, 14, 32) : BV:8
34 : ite(24, 25, 33) : BV:8
35 : ite(21, 22, 34) : BV:8
36 : ite(19, 14, 35) : BV:8
37 : ite(16, 17, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 18) : BOOL
46 : eq(41, 20) : BOOL
47 : eq(41, 23) : BOOL
48 : eq(41, 26) : BOOL
49 : eq(41, 28) : BOOL
50 : ite(49, 30, 31) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : ite(45, 14, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : ite(42, 11, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 6, 7) : BV:32
60 : eq(59, 9) : BOOL
61 : eq(59, 12) : BOOL
62 : eq(59, 15) : BOOL
63 : eq(59, 18) : BOOL
64 : eq(59, 20) : BOOL
65 : eq(59, 23) : BOOL
66 : eq(59, 26) : BOOL
67 : eq(59, 28) : BOOL
68 : ite(67, 30, 31) : BV:8
69 : ite(66, 14, 68) : BV:8
70 : ite(65, 25, 69) : BV:8
71 : ite(64, 22, 70) : BV:8
72 : ite(63, 14, 71) : BV:8
73 : ite(62, 17, 72) : BV:8
74 : ite(61, 14, 73) : BV:8
75 : ite(60, 11, 74) : BV:8
76 : bvadd(6, 7) : BV:32
77 : eq(76, 9) : BOOL
78 : eq(76, 12) : BOOL
79 : eq(76, 15) : BOOL
80 : eq(76, 18) : BOOL
81 : eq(76, 20) : BOOL
82 : eq(76, 23) : BOOL
83 : eq(76, 26) : BOOL
84 : eq(76, 28) : BOOL
85 : ite(84, 30, 31) : BV:8
86 : ite(83, 14, 85) : BV:8
87 : ite(82, 25, 86) : BV:8
88 : ite(81, 22, 87) : BV:8
89 : ite(80, 14, 88) : BV:8
90 : ite(79, 17, 89) : BV:8
91 : ite(78, 14, 90) : BV:8
92 : ite(77, 11, 91) : BV:8
93 : bvconcat(39, 57, 75, 92) : BV:32
94 : ite(3, 4, 93) : BV:32
95 : lambda(1, 94) : FUNCTION[BV:32 -> BV:32]
96 : sym_const(95) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
698551660
=counter_example_end
=global nodece 58 num_edges_traversed 2
=global nodece 58 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 59
=global nodece 59 nodece z3.ce4387.num_edges_traversed1
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3.ce4387 a9e82765fb33a6f7f05727559ac6e6a
=input.spec-%var-x-1
1 : Lambda47808Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147516415 { 0x80007fff -2147450881 -1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47809Var : BV:32
18 : Lambda47810Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147516417 { 0x80008001 -2147450879 -1.390636e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268435456 { 0x10000000 +1.0e161 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268435457 { 0x10000001 +1.11e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268435458 { 0x10000002 +1.23e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47811Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 131075 { 0x20003 +1.1562535e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : 229 { 0xe5 -27 } : BV:8
84 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
85 : eq(80, 84) : BOOL
86 : 5 { 0x5 } : BV:8
87 : eq(80, 78) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 99 { 0x63 } : BV:8
92 : 131072 { 0x20000 +1.1562500e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 238 { 0xee -18 } : BV:8
95 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
96 : eq(80, 95) : BOOL
97 : 4 { 0x4 } : BV:8
98 : 131074 { 0x20002 +1.1562523e129 } : BV:32
99 : eq(80, 98) : BOOL
100 : 253 { 0xfd -3 } : BV:8
101 : 131073 { 0x20001 +1.1562511e129 } : BV:32
102 : eq(80, 101) : BOOL
103 : 239 { 0xef -17 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(92, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda47828Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147516415 { 0x80007fff -2147450881 -1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47829Var : BV:32
18 : Lambda47830Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147516417 { 0x80008001 -2147450879 -1.390636e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268435456 { 0x10000000 +1.0e161 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268435457 { 0x10000001 +1.11e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268435458 { 0x10000002 +1.23e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47831Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 131075 { 0x20003 +1.1562535e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
63 : eq(61, 62) : BOOL
64 : 229 { 0xe5 -27 } : BV:8
65 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
66 : eq(61, 65) : BOOL
67 : 5 { 0x5 } : BV:8
68 : eq(61, 59) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 99 { 0x63 } : BV:8
73 : 131072 { 0x20000 +1.1562500e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 238 { 0xee -18 } : BV:8
76 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
77 : eq(61, 76) : BOOL
78 : 4 { 0x4 } : BV:8
79 : 131074 { 0x20002 +1.1562523e129 } : BV:32
80 : eq(61, 79) : BOOL
81 : 253 { 0xfd -3 } : BV:8
82 : 131073 { 0x20001 +1.1562511e129 } : BV:32
83 : eq(61, 82) : BOOL
84 : 239 { 0xef -17 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(73, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 131067 ] -> 0, [ 131068; 131068 ] -> 4, [ 131069; 131069 ] -> 5, [ 131070; 131070 ] -> 99, [ 131071; 131071 ] -> 229, [ 131072; 131072 ] -> 238, [ 131073; 131073 ] -> 239, [ 131074; 131074 ] -> 253, [ 131075; 131075 ] -> 255, [ 131076; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1995425111 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1995425112; 1995425115 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1995425116; 2537514443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2537514444; 2537514447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2537514448; 4179536359 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4179536360; 4179536363 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4179536364; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4179536360 { 0xf91ea9e8 -115430936 -1.23956012e115 } : BV:32
=input.dst.llvm-%m
1 : 268435457 { 0x10000001 +1.11e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1995425112 { 0x76efc558 +1.87320995e110 } : BV:32
=input.dst.llvm-%n
1 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2537514444 { 0x973f65cc -1757452852 -1.49529409e175 } : BV:32
=input.dst.llvm-%x
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1304440700 { 0x4dc02f7c +1.50144910e28 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda47835Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435456 { 0x10000000 +1.0e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435457 { 0x10000001 +1.11e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47836Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 229 { 0xe5 -27 } : BV:8
27 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : 131075 { 0x20003 +1.1562535e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 99 { 0x63 } : BV:8
36 : 131072 { 0x20000 +1.1562500e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 238 { 0xee -18 } : BV:8
39 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
40 : eq(23, 39) : BOOL
41 : 4 { 0x4 } : BV:8
42 : 131074 { 0x20002 +1.1562523e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : 131073 { 0x20001 +1.1562511e129 } : BV:32
46 : eq(23, 45) : BOOL
47 : 239 { 0xef -17 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2048 { 0x800 +1.24414e129 } : BV:32
2 : unit : UNIT
3 : Lambda47817Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 268435456 { 0x10000000 +1.0e161 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 268435457 { 0x10000001 +1.11e161 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda47818Var : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvmul(20, 19) : BV:32
25 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
26 : bvadd(23, 24, 25) : BV:32
27 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 229 { 0xe5 -27 } : BV:8
30 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 5 { 0x5 } : BV:8
33 : 131075 { 0x20003 +1.1562535e129 } : BV:32
34 : eq(26, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
37 : eq(26, 36) : BOOL
38 : 99 { 0x63 } : BV:8
39 : 131072 { 0x20000 +1.1562500e129 } : BV:32
40 : eq(26, 39) : BOOL
41 : 238 { 0xee -18 } : BV:8
42 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
43 : eq(26, 42) : BOOL
44 : 4 { 0x4 } : BV:8
45 : 131074 { 0x20002 +1.1562523e129 } : BV:32
46 : eq(26, 45) : BOOL
47 : 253 { 0xfd -3 } : BV:8
48 : 131073 { 0x20001 +1.1562511e129 } : BV:32
49 : eq(26, 48) : BOOL
50 : 239 { 0xef -17 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(22, 4, 113) : BV:32
115 : ite(21, 4, 114) : BV:32
116 : lambda(19, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(18, 116) : MAP[BV:32 -> BV:32]
118 : sum(1, 2, 117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
119 : sym_const(118) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 268435456 { 0x10000000 +1.0e161 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435457 { 0x10000001 +1.11e161 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : eq(2, 2) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(2, 2) : BV:32
22 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 229 { 0xe5 -27 } : BV:8
27 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : 131075 { 0x20003 +1.1562535e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 99 { 0x63 } : BV:8
36 : 131072 { 0x20000 +1.1562500e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 238 { 0xee -18 } : BV:8
39 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
40 : eq(23, 39) : BOOL
41 : 4 { 0x4 } : BV:8
42 : 131074 { 0x20002 +1.1562523e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : 131073 { 0x20001 +1.1562511e129 } : BV:32
46 : eq(23, 45) : BOOL
47 : 239 { 0xef -17 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : bvadd(16, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 45) : BOOL
84 : ite(83, 47, 48) : BV:8
85 : ite(82, 44, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 45) : BOOL
101 : ite(100, 47, 48) : BV:8
102 : ite(99, 44, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(56, 74, 91, 108) : BV:32
110 : ite(19, 1, 109) : BV:32
111 : sum(17, 18, 110) : SUM[UNIT,BV:32]
112 : sym_const(111) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 211792836 { 0xc9fb3c4 +1.24767351e154 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda47840Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435456 { 0x10000000 +1.0e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435457 { 0x10000001 +1.11e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47841Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(18, 17) : BV:32
23 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 229 { 0xe5 -27 } : BV:8
28 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
29 : eq(24, 28) : BOOL
30 : 5 { 0x5 } : BV:8
31 : 131075 { 0x20003 +1.1562535e129 } : BV:32
32 : eq(24, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
35 : eq(24, 34) : BOOL
36 : 99 { 0x63 } : BV:8
37 : 131072 { 0x20000 +1.1562500e129 } : BV:32
38 : eq(24, 37) : BOOL
39 : 238 { 0xee -18 } : BV:8
40 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
41 : eq(24, 40) : BOOL
42 : 4 { 0x4 } : BV:8
43 : 131074 { 0x20002 +1.1562523e129 } : BV:32
44 : eq(24, 43) : BOOL
45 : 253 { 0xfd -3 } : BV:8
46 : 131073 { 0x20001 +1.1562511e129 } : BV:32
47 : eq(24, 46) : BOOL
48 : 239 { 0xef -17 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 22, 23) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 31) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 33, 72) : BV:8
74 : ite(61, 30, 73) : BV:8
75 : ite(60, 27, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 33, 90) : BV:8
92 : ite(79, 30, 91) : BV:8
93 : ite(78, 27, 92) : BV:8
94 : bvadd(22, 23) : BV:32
95 : eq(94, 25) : BOOL
96 : eq(94, 28) : BOOL
97 : eq(94, 31) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 33, 107) : BV:8
109 : ite(96, 30, 108) : BV:8
110 : ite(95, 27, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 405351753 { 0x18292d49 +1.32169449e177 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 3848471828 { 0xe5630514 -446495468 -1.77359247e75 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 3848471828 { 0xe5630514 -446495468 -1.77359247e75 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1995425112 { 0x76efc558 +1.87320995e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1995425115 { 0x76efc55b +1.87321031e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2537514444 { 0x973f65cc -1757452852 -1.49529409e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2537514447 { 0x973f65cf -1757452849 -1.49529445e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4179536360 { 0xf91ea9e8 -115430936 -1.23956012e115 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4179536363 { 0xf91ea9eb -115430933 -1.23956048e115 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda47700Var : BV:32
2 : Lambda47701Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147516415 { 0x80007fff -2147450881 -1.390613e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147516417 { 0x80008001 -2147450879 -1.390636e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 268435456 { 0x10000000 +1.0e161 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 268435457 { 0x10000001 +1.11e161 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 268435458 { 0x10000002 +1.23e161 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 131075 { 0x20003 +1.1562535e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
55 : eq(53, 54) : BOOL
56 : 229 { 0xe5 -27 } : BV:8
57 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
58 : eq(53, 57) : BOOL
59 : 5 { 0x5 } : BV:8
60 : eq(53, 51) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 99 { 0x63 } : BV:8
65 : 131072 { 0x20000 +1.1562500e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 238 { 0xee -18 } : BV:8
68 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
69 : eq(53, 68) : BOOL
70 : 4 { 0x4 } : BV:8
71 : 131074 { 0x20002 +1.1562523e129 } : BV:32
72 : eq(53, 71) : BOOL
73 : 253 { 0xfd -3 } : BV:8
74 : 131073 { 0x20001 +1.1562511e129 } : BV:32
75 : eq(53, 74) : BOOL
76 : 239 { 0xef -17 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(65, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda47705Var : BV:32
2 : Lambda47706Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147516415 { 0x80007fff -2147450881 -1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147516417 { 0x80008001 -2147450879 -1.390636e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268435456 { 0x10000000 +1.0e161 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268435457 { 0x10000001 +1.11e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268435458 { 0x10000002 +1.23e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147516415 ] -> true, [ 2147516416; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147516415 ] -> true, [ 2147516416; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda47714Var : BV:32
2 : Lambda47715Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147516415 { 0x80007fff -2147450881 -1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147516417 { 0x80008001 -2147450879 -1.390636e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268435456 { 0x10000000 +1.0e161 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268435457 { 0x10000001 +1.11e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268435458 { 0x10000002 +1.23e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda47710Var : BV:32
2 : Lambda47711Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 131075 { 0x20003 +1.1562535e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 229 { 0xe5 -27 } : BV:8
16 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : eq(12, 10) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 99 { 0x63 } : BV:8
24 : 131072 { 0x20000 +1.1562500e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 238 { 0xee -18 } : BV:8
27 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 131074 { 0x20002 +1.1562523e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 131073 { 0x20001 +1.1562511e129 } : BV:32
34 : eq(12, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(24, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 268435456 ] -> true, [ 268435457; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda47721Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 229 { 0xe5 -27 } : BV:8
13 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 5 { 0x5 } : BV:8
16 : 131075 { 0x20003 +1.1562535e129 } : BV:32
17 : eq(9, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 99 { 0x63 } : BV:8
22 : 131072 { 0x20000 +1.1562500e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 238 { 0xee -18 } : BV:8
25 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
26 : eq(9, 25) : BOOL
27 : 4 { 0x4 } : BV:8
28 : 131074 { 0x20002 +1.1562523e129 } : BV:32
29 : eq(9, 28) : BOOL
30 : 253 { 0xfd -3 } : BV:8
31 : 131073 { 0x20001 +1.1562511e129 } : BV:32
32 : eq(9, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda47722Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 229 { 0xe5 -27 } : BV:8
13 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 5 { 0x5 } : BV:8
16 : 131075 { 0x20003 +1.1562535e129 } : BV:32
17 : eq(9, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 99 { 0x63 } : BV:8
22 : 131072 { 0x20000 +1.1562500e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 238 { 0xee -18 } : BV:8
25 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
26 : eq(9, 25) : BOOL
27 : 4 { 0x4 } : BV:8
28 : 131074 { 0x20002 +1.1562523e129 } : BV:32
29 : eq(9, 28) : BOOL
30 : 253 { 0xfd -3 } : BV:8
31 : 131073 { 0x20001 +1.1562511e129 } : BV:32
32 : eq(9, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 268435456 ] -> true, [ 268435457; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 268435456 ] -> true, [ 268435457; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda47729Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 } : BV:8
15 : 131075 { 0x20003 +1.1562535e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 99 { 0x63 } : BV:8
21 : 131072 { 0x20000 +1.1562500e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 238 { 0xee -18 } : BV:8
24 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 131074 { 0x20002 +1.1562523e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 131073 { 0x20001 +1.1562511e129 } : BV:32
31 : eq(8, 30) : BOOL
32 : 239 { 0xef -17 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
2384224804
=counter_example_end
=global nodece 59 num_edges_traversed 1
=global nodece 59 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 60
=global nodece 60 nodece z3.ce4429.num_edges_traversed2
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(epsilon)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3.ce4429 d87aa85233d892a41f73dfcf123b817
=input.spec-%var-x-1
1 : Lambda47808Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147516415 { 0x80007fff -2147450881 -1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47809Var : BV:32
18 : Lambda47810Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147516417 { 0x80008001 -2147450879 -1.390636e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268435456 { 0x10000000 +1.0e161 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268435457 { 0x10000001 +1.11e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268435458 { 0x10000002 +1.23e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47811Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 131075 { 0x20003 +1.1562535e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : 229 { 0xe5 -27 } : BV:8
84 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
85 : eq(80, 84) : BOOL
86 : 5 { 0x5 } : BV:8
87 : eq(80, 78) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 99 { 0x63 } : BV:8
92 : 131072 { 0x20000 +1.1562500e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 238 { 0xee -18 } : BV:8
95 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
96 : eq(80, 95) : BOOL
97 : 4 { 0x4 } : BV:8
98 : 131074 { 0x20002 +1.1562523e129 } : BV:32
99 : eq(80, 98) : BOOL
100 : 253 { 0xfd -3 } : BV:8
101 : 131073 { 0x20001 +1.1562511e129 } : BV:32
102 : eq(80, 101) : BOOL
103 : 239 { 0xef -17 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(92, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda47828Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147516415 { 0x80007fff -2147450881 -1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47829Var : BV:32
18 : Lambda47830Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147516417 { 0x80008001 -2147450879 -1.390636e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268435456 { 0x10000000 +1.0e161 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268435457 { 0x10000001 +1.11e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268435458 { 0x10000002 +1.23e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47831Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 131075 { 0x20003 +1.1562535e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
63 : eq(61, 62) : BOOL
64 : 229 { 0xe5 -27 } : BV:8
65 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
66 : eq(61, 65) : BOOL
67 : 5 { 0x5 } : BV:8
68 : eq(61, 59) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 99 { 0x63 } : BV:8
73 : 131072 { 0x20000 +1.1562500e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 238 { 0xee -18 } : BV:8
76 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
77 : eq(61, 76) : BOOL
78 : 4 { 0x4 } : BV:8
79 : 131074 { 0x20002 +1.1562523e129 } : BV:32
80 : eq(61, 79) : BOOL
81 : 253 { 0xfd -3 } : BV:8
82 : 131073 { 0x20001 +1.1562511e129 } : BV:32
83 : eq(61, 82) : BOOL
84 : 239 { 0xef -17 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(73, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 131067 ] -> 0, [ 131068; 131068 ] -> 4, [ 131069; 131069 ] -> 5, [ 131070; 131070 ] -> 99, [ 131071; 131071 ] -> 229, [ 131072; 131072 ] -> 238, [ 131073; 131073 ] -> 239, [ 131074; 131074 ] -> 253, [ 131075; 131075 ] -> 255, [ 131076; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1995425111 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1995425112; 1995425115 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1995425116; 2537514443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2537514444; 2537514447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2537514448; 4179536359 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4179536360; 4179536363 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4179536364; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4179536360 { 0xf91ea9e8 -115430936 -1.23956012e115 } : BV:32
=input.dst.llvm-%m
1 : 268435457 { 0x10000001 +1.11e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1995425112 { 0x76efc558 +1.87320995e110 } : BV:32
=input.dst.llvm-%n
1 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2537514444 { 0x973f65cc -1757452852 -1.49529409e175 } : BV:32
=input.dst.llvm-%x
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1304440700 { 0x4dc02f7c +1.50144910e28 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda47835Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435456 { 0x10000000 +1.0e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435457 { 0x10000001 +1.11e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47836Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 229 { 0xe5 -27 } : BV:8
27 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : 131075 { 0x20003 +1.1562535e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 99 { 0x63 } : BV:8
36 : 131072 { 0x20000 +1.1562500e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 238 { 0xee -18 } : BV:8
39 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
40 : eq(23, 39) : BOOL
41 : 4 { 0x4 } : BV:8
42 : 131074 { 0x20002 +1.1562523e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : 131073 { 0x20001 +1.1562511e129 } : BV:32
46 : eq(23, 45) : BOOL
47 : 239 { 0xef -17 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2048 { 0x800 +1.24414e129 } : BV:32
2 : unit : UNIT
3 : Lambda47817Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 268435456 { 0x10000000 +1.0e161 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 268435457 { 0x10000001 +1.11e161 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda47818Var : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvmul(20, 19) : BV:32
25 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
26 : bvadd(23, 24, 25) : BV:32
27 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 229 { 0xe5 -27 } : BV:8
30 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 5 { 0x5 } : BV:8
33 : 131075 { 0x20003 +1.1562535e129 } : BV:32
34 : eq(26, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
37 : eq(26, 36) : BOOL
38 : 99 { 0x63 } : BV:8
39 : 131072 { 0x20000 +1.1562500e129 } : BV:32
40 : eq(26, 39) : BOOL
41 : 238 { 0xee -18 } : BV:8
42 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
43 : eq(26, 42) : BOOL
44 : 4 { 0x4 } : BV:8
45 : 131074 { 0x20002 +1.1562523e129 } : BV:32
46 : eq(26, 45) : BOOL
47 : 253 { 0xfd -3 } : BV:8
48 : 131073 { 0x20001 +1.1562511e129 } : BV:32
49 : eq(26, 48) : BOOL
50 : 239 { 0xef -17 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(22, 4, 113) : BV:32
115 : ite(21, 4, 114) : BV:32
116 : lambda(19, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(18, 116) : MAP[BV:32 -> BV:32]
118 : sum(1, 2, 117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
119 : sym_const(118) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 211792837 { 0xc9fb3c5 +1.24767363e154 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda47840Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435456 { 0x10000000 +1.0e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435457 { 0x10000001 +1.11e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47841Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(18, 17) : BV:32
23 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 229 { 0xe5 -27 } : BV:8
28 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
29 : eq(24, 28) : BOOL
30 : 5 { 0x5 } : BV:8
31 : 131075 { 0x20003 +1.1562535e129 } : BV:32
32 : eq(24, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
35 : eq(24, 34) : BOOL
36 : 99 { 0x63 } : BV:8
37 : 131072 { 0x20000 +1.1562500e129 } : BV:32
38 : eq(24, 37) : BOOL
39 : 238 { 0xee -18 } : BV:8
40 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
41 : eq(24, 40) : BOOL
42 : 4 { 0x4 } : BV:8
43 : 131074 { 0x20002 +1.1562523e129 } : BV:32
44 : eq(24, 43) : BOOL
45 : 253 { 0xfd -3 } : BV:8
46 : 131073 { 0x20001 +1.1562511e129 } : BV:32
47 : eq(24, 46) : BOOL
48 : 239 { 0xef -17 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 22, 23) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 31) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 33, 72) : BV:8
74 : ite(61, 30, 73) : BV:8
75 : ite(60, 27, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 33, 90) : BV:8
92 : ite(79, 30, 91) : BV:8
93 : ite(78, 27, 92) : BV:8
94 : bvadd(22, 23) : BV:32
95 : eq(94, 25) : BOOL
96 : eq(94, 28) : BOOL
97 : eq(94, 31) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 33, 107) : BV:8
109 : ite(96, 30, 108) : BV:8
110 : ite(95, 27, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 405351754 { 0x18292d4a +1.32169461e177 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1995425112 { 0x76efc558 +1.87320995e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1995425115 { 0x76efc55b +1.87321031e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2537514444 { 0x973f65cc -1757452852 -1.49529409e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2537514447 { 0x973f65cf -1757452849 -1.49529445e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4179536360 { 0xf91ea9e8 -115430936 -1.23956012e115 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4179536363 { 0xf91ea9eb -115430933 -1.23956048e115 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda47700Var : BV:32
2 : Lambda47701Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147516415 { 0x80007fff -2147450881 -1.390613e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147516417 { 0x80008001 -2147450879 -1.390636e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 268435456 { 0x10000000 +1.0e161 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 268435457 { 0x10000001 +1.11e161 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 268435458 { 0x10000002 +1.23e161 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 131075 { 0x20003 +1.1562535e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
55 : eq(53, 54) : BOOL
56 : 229 { 0xe5 -27 } : BV:8
57 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
58 : eq(53, 57) : BOOL
59 : 5 { 0x5 } : BV:8
60 : eq(53, 51) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 99 { 0x63 } : BV:8
65 : 131072 { 0x20000 +1.1562500e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 238 { 0xee -18 } : BV:8
68 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
69 : eq(53, 68) : BOOL
70 : 4 { 0x4 } : BV:8
71 : 131074 { 0x20002 +1.1562523e129 } : BV:32
72 : eq(53, 71) : BOOL
73 : 253 { 0xfd -3 } : BV:8
74 : 131073 { 0x20001 +1.1562511e129 } : BV:32
75 : eq(53, 74) : BOOL
76 : 239 { 0xef -17 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(65, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda47705Var : BV:32
2 : Lambda47706Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147516415 { 0x80007fff -2147450881 -1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147516417 { 0x80008001 -2147450879 -1.390636e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268435456 { 0x10000000 +1.0e161 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268435457 { 0x10000001 +1.11e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268435458 { 0x10000002 +1.23e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147516415 ] -> true, [ 2147516416; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147516415 ] -> true, [ 2147516416; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda47714Var : BV:32
2 : Lambda47715Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147516415 { 0x80007fff -2147450881 -1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147516416 { 0x80008000 -2147450880 -1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147516417 { 0x80008001 -2147450879 -1.390636e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268435456 { 0x10000000 +1.0e161 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268435457 { 0x10000001 +1.11e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268435458 { 0x10000002 +1.23e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda47710Var : BV:32
2 : Lambda47711Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 131075 { 0x20003 +1.1562535e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 229 { 0xe5 -27 } : BV:8
16 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : eq(12, 10) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 99 { 0x63 } : BV:8
24 : 131072 { 0x20000 +1.1562500e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 238 { 0xee -18 } : BV:8
27 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 131074 { 0x20002 +1.1562523e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 131073 { 0x20001 +1.1562511e129 } : BV:32
34 : eq(12, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(24, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 268435456 ] -> true, [ 268435457; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda47721Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 229 { 0xe5 -27 } : BV:8
13 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 5 { 0x5 } : BV:8
16 : 131075 { 0x20003 +1.1562535e129 } : BV:32
17 : eq(9, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 99 { 0x63 } : BV:8
22 : 131072 { 0x20000 +1.1562500e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 238 { 0xee -18 } : BV:8
25 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
26 : eq(9, 25) : BOOL
27 : 4 { 0x4 } : BV:8
28 : 131074 { 0x20002 +1.1562523e129 } : BV:32
29 : eq(9, 28) : BOOL
30 : 253 { 0xfd -3 } : BV:8
31 : 131073 { 0x20001 +1.1562511e129 } : BV:32
32 : eq(9, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda47722Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 229 { 0xe5 -27 } : BV:8
13 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 5 { 0x5 } : BV:8
16 : 131075 { 0x20003 +1.1562535e129 } : BV:32
17 : eq(9, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 99 { 0x63 } : BV:8
22 : 131072 { 0x20000 +1.1562500e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 238 { 0xee -18 } : BV:8
25 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
26 : eq(9, 25) : BOOL
27 : 4 { 0x4 } : BV:8
28 : 131074 { 0x20002 +1.1562523e129 } : BV:32
29 : eq(9, 28) : BOOL
30 : 253 { 0xfd -3 } : BV:8
31 : 131073 { 0x20001 +1.1562511e129 } : BV:32
32 : eq(9, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 268435456 ] -> true, [ 268435457; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 268435456 ] -> true, [ 268435457; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda47729Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 3848471812 { 0xe5630504 -446495484 -1.77359056e75 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 229 { 0xe5 -27 } : BV:8
12 : 131069 { 0x1fffd +1.1562464e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 } : BV:8
15 : 131075 { 0x20003 +1.1562535e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 131070 { 0x1fffe +1.1562476e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 99 { 0x63 } : BV:8
21 : 131072 { 0x20000 +1.1562500e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 238 { 0xee -18 } : BV:8
24 : 131068 { 0x1fffc +1.1562452e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 131074 { 0x20002 +1.1562523e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 131073 { 0x20001 +1.1562511e129 } : BV:32
31 : eq(8, 30) : BOOL
32 : 239 { 0xef -17 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
2384224804
=counter_example_end
=global nodece 60 num_edges_traversed 2
=global nodece 60 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 61
=global nodece 61 nodece z3.ce4465.num_edges_traversed1
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce4465 6ed82f192b37fabd5947bb6ca993760
=input.spec-%var-x-1
1 : Lambda49390Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870920 { 0x20000008 +1.95e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870921 { 0x20000009 +1.107e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49391Var : BV:32
18 : Lambda49392Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870922 { 0x2000000a +1.119e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536872963 { 0x20000803 +1.24449e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda49393Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 75) : BOOL
81 : 223 { 0xdf -33 } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(79, 82) : BOOL
84 : 102 { 0x66 } : BV:8
85 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
86 : eq(79, 85) : BOOL
87 : 36 { 0x24 } : BV:8
88 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
89 : eq(79, 88) : BOOL
90 : 184 { 0xb8 -72 } : BV:8
91 : eq(79, 2) : BOOL
92 : 186 { 0xba -70 } : BV:8
93 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
94 : eq(79, 93) : BOOL
95 : 192 { 0xc0 -64 } : BV:8
96 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
97 : eq(79, 96) : BOOL
98 : 96 { 0x60 } : BV:8
99 : 2 { 0x2 +1.23e129 } : BV:32
100 : eq(79, 99) : BOOL
101 : 191 { 0xbf -65 } : BV:8
102 : 0 { 0x0 } : BV:8
103 : ite(100, 101, 102) : BV:8
104 : ite(97, 98, 103) : BV:8
105 : ite(94, 95, 104) : BV:8
106 : ite(91, 92, 105) : BV:8
107 : ite(89, 90, 106) : BV:8
108 : ite(86, 87, 107) : BV:8
109 : ite(83, 84, 108) : BV:8
110 : ite(80, 81, 109) : BV:8
111 : bvadd(99, 78) : BV:32
112 : eq(111, 75) : BOOL
113 : eq(111, 82) : BOOL
114 : eq(111, 85) : BOOL
115 : eq(111, 88) : BOOL
116 : eq(111, 2) : BOOL
117 : eq(111, 93) : BOOL
118 : eq(111, 96) : BOOL
119 : eq(111, 99) : BOOL
120 : ite(119, 101, 102) : BV:8
121 : ite(118, 98, 120) : BV:8
122 : ite(117, 95, 121) : BV:8
123 : ite(116, 92, 122) : BV:8
124 : ite(115, 90, 123) : BV:8
125 : ite(114, 87, 124) : BV:8
126 : ite(113, 84, 125) : BV:8
127 : ite(112, 81, 126) : BV:8
128 : bvadd(82, 78) : BV:32
129 : eq(128, 75) : BOOL
130 : eq(128, 82) : BOOL
131 : eq(128, 85) : BOOL
132 : eq(128, 88) : BOOL
133 : eq(128, 2) : BOOL
134 : eq(128, 93) : BOOL
135 : eq(128, 96) : BOOL
136 : eq(128, 99) : BOOL
137 : ite(136, 101, 102) : BV:8
138 : ite(135, 98, 137) : BV:8
139 : ite(134, 95, 138) : BV:8
140 : ite(133, 92, 139) : BV:8
141 : ite(132, 90, 140) : BV:8
142 : ite(131, 87, 141) : BV:8
143 : ite(130, 84, 142) : BV:8
144 : ite(129, 81, 143) : BV:8
145 : eq(78, 75) : BOOL
146 : eq(78, 82) : BOOL
147 : eq(78, 85) : BOOL
148 : eq(78, 88) : BOOL
149 : eq(78, 2) : BOOL
150 : eq(78, 93) : BOOL
151 : eq(78, 96) : BOOL
152 : eq(78, 99) : BOOL
153 : ite(152, 101, 102) : BV:8
154 : ite(151, 98, 153) : BV:8
155 : ite(150, 95, 154) : BV:8
156 : ite(149, 92, 155) : BV:8
157 : ite(148, 90, 156) : BV:8
158 : ite(147, 87, 157) : BV:8
159 : ite(146, 84, 158) : BV:8
160 : ite(145, 81, 159) : BV:8
161 : bvconcat(110, 127, 144, 160) : BV:32
162 : bvadd(75, 77, 161) : BV:32
163 : eq(162, 75) : BOOL
164 : eq(162, 82) : BOOL
165 : eq(162, 85) : BOOL
166 : eq(162, 88) : BOOL
167 : eq(162, 2) : BOOL
168 : eq(162, 93) : BOOL
169 : eq(162, 96) : BOOL
170 : eq(162, 99) : BOOL
171 : ite(170, 101, 102) : BV:8
172 : ite(169, 98, 171) : BV:8
173 : ite(168, 95, 172) : BV:8
174 : ite(167, 92, 173) : BV:8
175 : ite(166, 90, 174) : BV:8
176 : ite(165, 87, 175) : BV:8
177 : ite(164, 84, 176) : BV:8
178 : ite(163, 81, 177) : BV:8
179 : bvadd(99, 77, 161) : BV:32
180 : eq(179, 75) : BOOL
181 : eq(179, 82) : BOOL
182 : eq(179, 85) : BOOL
183 : eq(179, 88) : BOOL
184 : eq(179, 2) : BOOL
185 : eq(179, 93) : BOOL
186 : eq(179, 96) : BOOL
187 : eq(179, 99) : BOOL
188 : ite(187, 101, 102) : BV:8
189 : ite(186, 98, 188) : BV:8
190 : ite(185, 95, 189) : BV:8
191 : ite(184, 92, 190) : BV:8
192 : ite(183, 90, 191) : BV:8
193 : ite(182, 87, 192) : BV:8
194 : ite(181, 84, 193) : BV:8
195 : ite(180, 81, 194) : BV:8
196 : bvadd(82, 77, 161) : BV:32
197 : eq(196, 75) : BOOL
198 : eq(196, 82) : BOOL
199 : eq(196, 85) : BOOL
200 : eq(196, 88) : BOOL
201 : eq(196, 2) : BOOL
202 : eq(196, 93) : BOOL
203 : eq(196, 96) : BOOL
204 : eq(196, 99) : BOOL
205 : ite(204, 101, 102) : BV:8
206 : ite(203, 98, 205) : BV:8
207 : ite(202, 95, 206) : BV:8
208 : ite(201, 92, 207) : BV:8
209 : ite(200, 90, 208) : BV:8
210 : ite(199, 87, 209) : BV:8
211 : ite(198, 84, 210) : BV:8
212 : ite(197, 81, 211) : BV:8
213 : bvadd(77, 161) : BV:32
214 : eq(213, 75) : BOOL
215 : eq(213, 82) : BOOL
216 : eq(213, 85) : BOOL
217 : eq(213, 88) : BOOL
218 : eq(213, 2) : BOOL
219 : eq(213, 93) : BOOL
220 : eq(213, 96) : BOOL
221 : eq(213, 99) : BOOL
222 : ite(221, 101, 102) : BV:8
223 : ite(220, 98, 222) : BV:8
224 : ite(219, 95, 223) : BV:8
225 : ite(218, 92, 224) : BV:8
226 : ite(217, 90, 225) : BV:8
227 : ite(216, 87, 226) : BV:8
228 : ite(215, 84, 227) : BV:8
229 : ite(214, 81, 228) : BV:8
230 : bvconcat(178, 195, 212, 229) : BV:32
231 : ite(55, 2, 230) : BV:32
232 : ite(74, 230, 231) : BV:32
233 : ite(55, 2, 232) : BV:32
234 : lambda(52, 233) : FUNCTION[BV:32 -> BV:32]
235 : map(51, 234) : MAP[BV:32 -> BV:32]
236 : lambda(17, 235) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
237 : map(16, 236) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
238 : sym_const(237) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda49410Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870920 { 0x20000008 +1.95e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870921 { 0x20000009 +1.107e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49411Var : BV:32
18 : Lambda49412Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870922 { 0x2000000a +1.119e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536872963 { 0x20000803 +1.24449e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda49413Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 56) : BOOL
62 : 223 { 0xdf -33 } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(60, 63) : BOOL
65 : 102 { 0x66 } : BV:8
66 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
67 : eq(60, 66) : BOOL
68 : 36 { 0x24 } : BV:8
69 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
70 : eq(60, 69) : BOOL
71 : 184 { 0xb8 -72 } : BV:8
72 : eq(60, 2) : BOOL
73 : 186 { 0xba -70 } : BV:8
74 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
75 : eq(60, 74) : BOOL
76 : 192 { 0xc0 -64 } : BV:8
77 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
78 : eq(60, 77) : BOOL
79 : 96 { 0x60 } : BV:8
80 : 2 { 0x2 +1.23e129 } : BV:32
81 : eq(60, 80) : BOOL
82 : 191 { 0xbf -65 } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : ite(78, 79, 84) : BV:8
86 : ite(75, 76, 85) : BV:8
87 : ite(72, 73, 86) : BV:8
88 : ite(70, 71, 87) : BV:8
89 : ite(67, 68, 88) : BV:8
90 : ite(64, 65, 89) : BV:8
91 : ite(61, 62, 90) : BV:8
92 : bvadd(80, 59) : BV:32
93 : eq(92, 56) : BOOL
94 : eq(92, 63) : BOOL
95 : eq(92, 66) : BOOL
96 : eq(92, 69) : BOOL
97 : eq(92, 2) : BOOL
98 : eq(92, 74) : BOOL
99 : eq(92, 77) : BOOL
100 : eq(92, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : ite(99, 79, 101) : BV:8
103 : ite(98, 76, 102) : BV:8
104 : ite(97, 73, 103) : BV:8
105 : ite(96, 71, 104) : BV:8
106 : ite(95, 68, 105) : BV:8
107 : ite(94, 65, 106) : BV:8
108 : ite(93, 62, 107) : BV:8
109 : bvadd(63, 59) : BV:32
110 : eq(109, 56) : BOOL
111 : eq(109, 63) : BOOL
112 : eq(109, 66) : BOOL
113 : eq(109, 69) : BOOL
114 : eq(109, 2) : BOOL
115 : eq(109, 74) : BOOL
116 : eq(109, 77) : BOOL
117 : eq(109, 80) : BOOL
118 : ite(117, 82, 83) : BV:8
119 : ite(116, 79, 118) : BV:8
120 : ite(115, 76, 119) : BV:8
121 : ite(114, 73, 120) : BV:8
122 : ite(113, 71, 121) : BV:8
123 : ite(112, 68, 122) : BV:8
124 : ite(111, 65, 123) : BV:8
125 : ite(110, 62, 124) : BV:8
126 : eq(59, 56) : BOOL
127 : eq(59, 63) : BOOL
128 : eq(59, 66) : BOOL
129 : eq(59, 69) : BOOL
130 : eq(59, 2) : BOOL
131 : eq(59, 74) : BOOL
132 : eq(59, 77) : BOOL
133 : eq(59, 80) : BOOL
134 : ite(133, 82, 83) : BV:8
135 : ite(132, 79, 134) : BV:8
136 : ite(131, 76, 135) : BV:8
137 : ite(130, 73, 136) : BV:8
138 : ite(129, 71, 137) : BV:8
139 : ite(128, 68, 138) : BV:8
140 : ite(127, 65, 139) : BV:8
141 : ite(126, 62, 140) : BV:8
142 : bvconcat(91, 108, 125, 141) : BV:32
143 : bvadd(56, 58, 142) : BV:32
144 : eq(143, 56) : BOOL
145 : eq(143, 63) : BOOL
146 : eq(143, 66) : BOOL
147 : eq(143, 69) : BOOL
148 : eq(143, 2) : BOOL
149 : eq(143, 74) : BOOL
150 : eq(143, 77) : BOOL
151 : eq(143, 80) : BOOL
152 : ite(151, 82, 83) : BV:8
153 : ite(150, 79, 152) : BV:8
154 : ite(149, 76, 153) : BV:8
155 : ite(148, 73, 154) : BV:8
156 : ite(147, 71, 155) : BV:8
157 : ite(146, 68, 156) : BV:8
158 : ite(145, 65, 157) : BV:8
159 : ite(144, 62, 158) : BV:8
160 : bvadd(80, 58, 142) : BV:32
161 : eq(160, 56) : BOOL
162 : eq(160, 63) : BOOL
163 : eq(160, 66) : BOOL
164 : eq(160, 69) : BOOL
165 : eq(160, 2) : BOOL
166 : eq(160, 74) : BOOL
167 : eq(160, 77) : BOOL
168 : eq(160, 80) : BOOL
169 : ite(168, 82, 83) : BV:8
170 : ite(167, 79, 169) : BV:8
171 : ite(166, 76, 170) : BV:8
172 : ite(165, 73, 171) : BV:8
173 : ite(164, 71, 172) : BV:8
174 : ite(163, 68, 173) : BV:8
175 : ite(162, 65, 174) : BV:8
176 : ite(161, 62, 175) : BV:8
177 : bvadd(63, 58, 142) : BV:32
178 : eq(177, 56) : BOOL
179 : eq(177, 63) : BOOL
180 : eq(177, 66) : BOOL
181 : eq(177, 69) : BOOL
182 : eq(177, 2) : BOOL
183 : eq(177, 74) : BOOL
184 : eq(177, 77) : BOOL
185 : eq(177, 80) : BOOL
186 : ite(185, 82, 83) : BV:8
187 : ite(184, 79, 186) : BV:8
188 : ite(183, 76, 187) : BV:8
189 : ite(182, 73, 188) : BV:8
190 : ite(181, 71, 189) : BV:8
191 : ite(180, 68, 190) : BV:8
192 : ite(179, 65, 191) : BV:8
193 : ite(178, 62, 192) : BV:8
194 : bvadd(58, 142) : BV:32
195 : eq(194, 56) : BOOL
196 : eq(194, 63) : BOOL
197 : eq(194, 66) : BOOL
198 : eq(194, 69) : BOOL
199 : eq(194, 2) : BOOL
200 : eq(194, 74) : BOOL
201 : eq(194, 77) : BOOL
202 : eq(194, 80) : BOOL
203 : ite(202, 82, 83) : BV:8
204 : ite(201, 79, 203) : BV:8
205 : ite(200, 76, 204) : BV:8
206 : ite(199, 73, 205) : BV:8
207 : ite(198, 71, 206) : BV:8
208 : ite(197, 68, 207) : BV:8
209 : ite(196, 65, 208) : BV:8
210 : ite(195, 62, 209) : BV:8
211 : bvconcat(159, 176, 193, 210) : BV:32
212 : ite(55, 2, 211) : BV:32
213 : lambda(52, 212) : FUNCTION[BV:32 -> BV:32]
214 : map(51, 213) : MAP[BV:32 -> BV:32]
215 : lambda(17, 214) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
216 : map(16, 215) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
217 : sym_const(216) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 186, [ 1; 1 ] -> 102, [ 2; 2 ] -> 191, [ 3; 3 ] -> 223, [ 4; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 36, [ 2147483645; 2147483645 ] -> 96, [ 2147483646; 2147483646 ] -> 184, [ 2147483647; 2147483647 ] -> 192, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1655256095 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1655256096; 1655256099 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1655256100; 2756897515 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2756897516; 2756897519 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2756897520; 2773020119 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2773020120; 2773020123 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2773020124; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1655256096 { 0x62a93420 +1.32190322e70 } : BV:32
=input.dst.llvm-%m
1 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2756897516 { 0xa452eaec -1538069780 -1.64779424e201 } : BV:32
=input.dst.llvm-%n
1 : 536870921 { 0x20000009 +1.107e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2773020120 { 0xa548edd8 -1521947176 -1.56975841e203 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 958698756 { 0x39249504 +1.28579759e243 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 536870921 { 0x20000009 +1.107e193 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda49417Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49418Var : BV:32
18 : 536870912 { 0x20000000 +1.0e193 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870920 { 0x20000008 +1.95e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 223 { 0xdf -33 } : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 102 { 0x66 } : BV:8
32 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
33 : eq(26, 32) : BOOL
34 : 36 { 0x24 } : BV:8
35 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
36 : eq(26, 35) : BOOL
37 : 184 { 0xb8 -72 } : BV:8
38 : eq(26, 2) : BOOL
39 : 186 { 0xba -70 } : BV:8
40 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
41 : eq(26, 40) : BOOL
42 : 192 { 0xc0 -64 } : BV:8
43 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
44 : eq(26, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : eq(26, 46) : BOOL
48 : 191 { 0xbf -65 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(36, 37, 53) : BV:8
55 : ite(33, 34, 54) : BV:8
56 : ite(30, 31, 55) : BV:8
57 : ite(27, 28, 56) : BV:8
58 : bvadd(46, 24, 25) : BV:32
59 : eq(58, 22) : BOOL
60 : eq(58, 29) : BOOL
61 : eq(58, 32) : BOOL
62 : eq(58, 35) : BOOL
63 : eq(58, 2) : BOOL
64 : eq(58, 40) : BOOL
65 : eq(58, 43) : BOOL
66 : eq(58, 46) : BOOL
67 : ite(66, 48, 49) : BV:8
68 : ite(65, 45, 67) : BV:8
69 : ite(64, 42, 68) : BV:8
70 : ite(63, 39, 69) : BV:8
71 : ite(62, 37, 70) : BV:8
72 : ite(61, 34, 71) : BV:8
73 : ite(60, 31, 72) : BV:8
74 : ite(59, 28, 73) : BV:8
75 : bvadd(29, 24, 25) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 29) : BOOL
78 : eq(75, 32) : BOOL
79 : eq(75, 35) : BOOL
80 : eq(75, 2) : BOOL
81 : eq(75, 40) : BOOL
82 : eq(75, 43) : BOOL
83 : eq(75, 46) : BOOL
84 : ite(83, 48, 49) : BV:8
85 : ite(82, 45, 84) : BV:8
86 : ite(81, 42, 85) : BV:8
87 : ite(80, 39, 86) : BV:8
88 : ite(79, 37, 87) : BV:8
89 : ite(78, 34, 88) : BV:8
90 : ite(77, 31, 89) : BV:8
91 : ite(76, 28, 90) : BV:8
92 : bvadd(24, 25) : BV:32
93 : eq(92, 22) : BOOL
94 : eq(92, 29) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 35) : BOOL
97 : eq(92, 2) : BOOL
98 : eq(92, 40) : BOOL
99 : eq(92, 43) : BOOL
100 : eq(92, 46) : BOOL
101 : ite(100, 48, 49) : BV:8
102 : ite(99, 45, 101) : BV:8
103 : ite(98, 42, 102) : BV:8
104 : ite(97, 39, 103) : BV:8
105 : ite(96, 37, 104) : BV:8
106 : ite(95, 34, 105) : BV:8
107 : ite(94, 31, 106) : BV:8
108 : ite(93, 28, 107) : BV:8
109 : bvconcat(57, 74, 91, 108) : BV:32
110 : ite(21, 2, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
2 : unit : UNIT
3 : Lambda49399Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda49400Var : BV:32
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(19, 20) : BOOL
22 : 536870920 { 0x20000008 +1.95e193 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : eq(29, 25) : BOOL
31 : 223 { 0xdf -33 } : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(29, 32) : BOOL
34 : 102 { 0x66 } : BV:8
35 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
36 : eq(29, 35) : BOOL
37 : 36 { 0x24 } : BV:8
38 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
39 : eq(29, 38) : BOOL
40 : 184 { 0xb8 -72 } : BV:8
41 : eq(29, 4) : BOOL
42 : 186 { 0xba -70 } : BV:8
43 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
44 : eq(29, 43) : BOOL
45 : 192 { 0xc0 -64 } : BV:8
46 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
47 : eq(29, 46) : BOOL
48 : 96 { 0x60 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(29, 49) : BOOL
51 : 191 { 0xbf -65 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(39, 40, 56) : BV:8
58 : ite(36, 37, 57) : BV:8
59 : ite(33, 34, 58) : BV:8
60 : ite(30, 31, 59) : BV:8
61 : bvadd(49, 27, 28) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 32) : BOOL
64 : eq(61, 35) : BOOL
65 : eq(61, 38) : BOOL
66 : eq(61, 4) : BOOL
67 : eq(61, 43) : BOOL
68 : eq(61, 46) : BOOL
69 : eq(61, 49) : BOOL
70 : ite(69, 51, 52) : BV:8
71 : ite(68, 48, 70) : BV:8
72 : ite(67, 45, 71) : BV:8
73 : ite(66, 42, 72) : BV:8
74 : ite(65, 40, 73) : BV:8
75 : ite(64, 37, 74) : BV:8
76 : ite(63, 34, 75) : BV:8
77 : ite(62, 31, 76) : BV:8
78 : bvadd(32, 27, 28) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 32) : BOOL
81 : eq(78, 35) : BOOL
82 : eq(78, 38) : BOOL
83 : eq(78, 4) : BOOL
84 : eq(78, 43) : BOOL
85 : eq(78, 46) : BOOL
86 : eq(78, 49) : BOOL
87 : ite(86, 51, 52) : BV:8
88 : ite(85, 48, 87) : BV:8
89 : ite(84, 45, 88) : BV:8
90 : ite(83, 42, 89) : BV:8
91 : ite(82, 40, 90) : BV:8
92 : ite(81, 37, 91) : BV:8
93 : ite(80, 34, 92) : BV:8
94 : ite(79, 31, 93) : BV:8
95 : bvadd(27, 28) : BV:32
96 : eq(95, 25) : BOOL
97 : eq(95, 32) : BOOL
98 : eq(95, 35) : BOOL
99 : eq(95, 38) : BOOL
100 : eq(95, 4) : BOOL
101 : eq(95, 43) : BOOL
102 : eq(95, 46) : BOOL
103 : eq(95, 49) : BOOL
104 : ite(103, 51, 52) : BV:8
105 : ite(102, 48, 104) : BV:8
106 : ite(101, 45, 105) : BV:8
107 : ite(100, 42, 106) : BV:8
108 : ite(99, 40, 107) : BV:8
109 : ite(98, 37, 108) : BV:8
110 : ite(97, 34, 109) : BV:8
111 : ite(96, 31, 110) : BV:8
112 : bvconcat(60, 77, 94, 111) : BV:32
113 : ite(24, 4, 112) : BV:32
114 : ite(23, 4, 113) : BV:32
115 : ite(21, 4, 114) : BV:32
116 : lambda(19, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(18, 116) : MAP[BV:32 -> BV:32]
118 : sum(1, 2, 117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
119 : sym_const(118) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 536870920 { 0x20000008 +1.95e193 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : 536870912 { 0x20000000 +1.0e193 } : BV:32
20 : eq(2, 19) : BOOL
21 : eq(2, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 2) : BV:32
25 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 223 { 0xdf -33 } : BV:8
29 : eq(26, 16) : BOOL
30 : 102 { 0x66 } : BV:8
31 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
32 : eq(26, 31) : BOOL
33 : 36 { 0x24 } : BV:8
34 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
35 : eq(26, 34) : BOOL
36 : 184 { 0xb8 -72 } : BV:8
37 : eq(26, 1) : BOOL
38 : 186 { 0xba -70 } : BV:8
39 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
40 : eq(26, 39) : BOOL
41 : 192 { 0xc0 -64 } : BV:8
42 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
43 : eq(26, 42) : BOOL
44 : 96 { 0x60 } : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : eq(26, 45) : BOOL
47 : 191 { 0xbf -65 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(35, 36, 52) : BV:8
54 : ite(32, 33, 53) : BV:8
55 : ite(29, 30, 54) : BV:8
56 : ite(27, 28, 55) : BV:8
57 : bvadd(45, 24, 25) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 16) : BOOL
60 : eq(57, 31) : BOOL
61 : eq(57, 34) : BOOL
62 : eq(57, 1) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 45) : BOOL
66 : ite(65, 47, 48) : BV:8
67 : ite(64, 44, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 33, 70) : BV:8
72 : ite(59, 30, 71) : BV:8
73 : ite(58, 28, 72) : BV:8
74 : bvadd(16, 24, 25) : BV:32
75 : eq(74, 22) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 31) : BOOL
78 : eq(74, 34) : BOOL
79 : eq(74, 1) : BOOL
80 : eq(74, 39) : BOOL
81 : eq(74, 42) : BOOL
82 : eq(74, 45) : BOOL
83 : ite(82, 47, 48) : BV:8
84 : ite(81, 44, 83) : BV:8
85 : ite(80, 41, 84) : BV:8
86 : ite(79, 38, 85) : BV:8
87 : ite(78, 36, 86) : BV:8
88 : ite(77, 33, 87) : BV:8
89 : ite(76, 30, 88) : BV:8
90 : ite(75, 28, 89) : BV:8
91 : bvadd(24, 25) : BV:32
92 : eq(91, 22) : BOOL
93 : eq(91, 16) : BOOL
94 : eq(91, 31) : BOOL
95 : eq(91, 34) : BOOL
96 : eq(91, 1) : BOOL
97 : eq(91, 39) : BOOL
98 : eq(91, 42) : BOOL
99 : eq(91, 45) : BOOL
100 : ite(99, 47, 48) : BV:8
101 : ite(98, 44, 100) : BV:8
102 : ite(97, 41, 101) : BV:8
103 : ite(96, 38, 102) : BV:8
104 : ite(95, 36, 103) : BV:8
105 : ite(94, 33, 104) : BV:8
106 : ite(93, 30, 105) : BV:8
107 : ite(92, 28, 106) : BV:8
108 : bvconcat(56, 73, 90, 107) : BV:32
109 : ite(21, 1, 108) : BV:32
110 : ite(20, 1, 109) : BV:32
111 : sum(17, 18, 110) : SUM[UNIT,BV:32]
112 : sym_const(111) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 644522464 { 0x266aa1e0 +1.83306503e205 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 536870921 { 0x20000009 +1.107e193 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda49422Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49423Var : BV:32
18 : 536870912 { 0x20000000 +1.0e193 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870920 { 0x20000008 +1.95e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : eq(27, 23) : BOOL
29 : 223 { 0xdf -33 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(27, 30) : BOOL
32 : 102 { 0x66 } : BV:8
33 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
34 : eq(27, 33) : BOOL
35 : 36 { 0x24 } : BV:8
36 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
37 : eq(27, 36) : BOOL
38 : 184 { 0xb8 -72 } : BV:8
39 : eq(27, 2) : BOOL
40 : 186 { 0xba -70 } : BV:8
41 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
42 : eq(27, 41) : BOOL
43 : 192 { 0xc0 -64 } : BV:8
44 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
45 : eq(27, 44) : BOOL
46 : 96 { 0x60 } : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : eq(27, 47) : BOOL
49 : 191 { 0xbf -65 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(37, 38, 54) : BV:8
56 : ite(34, 35, 55) : BV:8
57 : ite(31, 32, 56) : BV:8
58 : ite(28, 29, 57) : BV:8
59 : bvadd(47, 25, 26) : BV:32
60 : eq(59, 23) : BOOL
61 : eq(59, 30) : BOOL
62 : eq(59, 33) : BOOL
63 : eq(59, 36) : BOOL
64 : eq(59, 2) : BOOL
65 : eq(59, 41) : BOOL
66 : eq(59, 44) : BOOL
67 : eq(59, 47) : BOOL
68 : ite(67, 49, 50) : BV:8
69 : ite(66, 46, 68) : BV:8
70 : ite(65, 43, 69) : BV:8
71 : ite(64, 40, 70) : BV:8
72 : ite(63, 38, 71) : BV:8
73 : ite(62, 35, 72) : BV:8
74 : ite(61, 32, 73) : BV:8
75 : ite(60, 29, 74) : BV:8
76 : bvadd(30, 25, 26) : BV:32
77 : eq(76, 23) : BOOL
78 : eq(76, 30) : BOOL
79 : eq(76, 33) : BOOL
80 : eq(76, 36) : BOOL
81 : eq(76, 2) : BOOL
82 : eq(76, 41) : BOOL
83 : eq(76, 44) : BOOL
84 : eq(76, 47) : BOOL
85 : ite(84, 49, 50) : BV:8
86 : ite(83, 46, 85) : BV:8
87 : ite(82, 43, 86) : BV:8
88 : ite(81, 40, 87) : BV:8
89 : ite(80, 38, 88) : BV:8
90 : ite(79, 35, 89) : BV:8
91 : ite(78, 32, 90) : BV:8
92 : ite(77, 29, 91) : BV:8
93 : bvadd(25, 26) : BV:32
94 : eq(93, 23) : BOOL
95 : eq(93, 30) : BOOL
96 : eq(93, 33) : BOOL
97 : eq(93, 36) : BOOL
98 : eq(93, 2) : BOOL
99 : eq(93, 41) : BOOL
100 : eq(93, 44) : BOOL
101 : eq(93, 47) : BOOL
102 : ite(101, 49, 50) : BV:8
103 : ite(100, 46, 102) : BV:8
104 : ite(99, 43, 103) : BV:8
105 : ite(98, 40, 104) : BV:8
106 : ite(97, 38, 105) : BV:8
107 : ite(96, 35, 106) : BV:8
108 : ite(95, 32, 107) : BV:8
109 : ite(94, 29, 108) : BV:8
110 : bvconcat(58, 75, 92, 109) : BV:32
111 : ite(22, 2, 110) : BV:32
112 : ite(21, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 536870921 { 0x20000009 +1.107e193 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 791552517 { 0x2f2e2205 +1.36041319e223 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 2147483680 { 0x80000020 -2147483616 -1.381e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1085825092 { 0x40b86044 +1.44043779e2 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 2147483680 { 0x80000020 -2147483616 -1.381e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 1085825092 { 0x40b86044 +1.44043779e2 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 536870921 { 0x20000009 +1.107e193 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 536870921 { 0x20000009 +1.107e193 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2756897516 { 0xa452eaec -1538069780 -1.64779424e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2756897519 { 0xa452eaef -1538069777 -1.64779460e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2773020120 { 0xa548edd8 -1521947176 -1.56975841e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2773020123 { 0xa548eddb -1521947173 -1.56975877e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1655256096 { 0x62a93420 +1.32190322e70 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1655256099 { 0x62a93423 +1.32190358e70 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda49282Var : BV:32
2 : Lambda49283Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870920 { 0x20000008 +1.95e193 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870921 { 0x20000009 +1.107e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 536870922 { 0x2000000a +1.119e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 536872963 { 0x20000803 +1.24449e193 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 48) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(52, 55) : BOOL
57 : 102 { 0x66 } : BV:8
58 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
59 : eq(52, 58) : BOOL
60 : 36 { 0x24 } : BV:8
61 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
62 : eq(52, 61) : BOOL
63 : 184 { 0xb8 -72 } : BV:8
64 : eq(52, 3) : BOOL
65 : 186 { 0xba -70 } : BV:8
66 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
67 : eq(52, 66) : BOOL
68 : 192 { 0xc0 -64 } : BV:8
69 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
70 : eq(52, 69) : BOOL
71 : 96 { 0x60 } : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : eq(52, 72) : BOOL
74 : 191 { 0xbf -65 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(62, 63, 79) : BV:8
81 : ite(59, 60, 80) : BV:8
82 : ite(56, 57, 81) : BV:8
83 : ite(53, 54, 82) : BV:8
84 : bvadd(72, 51) : BV:32
85 : eq(84, 48) : BOOL
86 : eq(84, 55) : BOOL
87 : eq(84, 58) : BOOL
88 : eq(84, 61) : BOOL
89 : eq(84, 3) : BOOL
90 : eq(84, 66) : BOOL
91 : eq(84, 69) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 71, 93) : BV:8
95 : ite(90, 68, 94) : BV:8
96 : ite(89, 65, 95) : BV:8
97 : ite(88, 63, 96) : BV:8
98 : ite(87, 60, 97) : BV:8
99 : ite(86, 57, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : bvadd(55, 51) : BV:32
102 : eq(101, 48) : BOOL
103 : eq(101, 55) : BOOL
104 : eq(101, 58) : BOOL
105 : eq(101, 61) : BOOL
106 : eq(101, 3) : BOOL
107 : eq(101, 66) : BOOL
108 : eq(101, 69) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 71, 110) : BV:8
112 : ite(107, 68, 111) : BV:8
113 : ite(106, 65, 112) : BV:8
114 : ite(105, 63, 113) : BV:8
115 : ite(104, 60, 114) : BV:8
116 : ite(103, 57, 115) : BV:8
117 : ite(102, 54, 116) : BV:8
118 : eq(51, 48) : BOOL
119 : eq(51, 55) : BOOL
120 : eq(51, 58) : BOOL
121 : eq(51, 61) : BOOL
122 : eq(51, 3) : BOOL
123 : eq(51, 66) : BOOL
124 : eq(51, 69) : BOOL
125 : eq(51, 72) : BOOL
126 : ite(125, 74, 75) : BV:8
127 : ite(124, 71, 126) : BV:8
128 : ite(123, 68, 127) : BV:8
129 : ite(122, 65, 128) : BV:8
130 : ite(121, 63, 129) : BV:8
131 : ite(120, 60, 130) : BV:8
132 : ite(119, 57, 131) : BV:8
133 : ite(118, 54, 132) : BV:8
134 : bvconcat(83, 100, 117, 133) : BV:32
135 : bvadd(48, 50, 134) : BV:32
136 : eq(135, 48) : BOOL
137 : eq(135, 55) : BOOL
138 : eq(135, 58) : BOOL
139 : eq(135, 61) : BOOL
140 : eq(135, 3) : BOOL
141 : eq(135, 66) : BOOL
142 : eq(135, 69) : BOOL
143 : eq(135, 72) : BOOL
144 : ite(143, 74, 75) : BV:8
145 : ite(142, 71, 144) : BV:8
146 : ite(141, 68, 145) : BV:8
147 : ite(140, 65, 146) : BV:8
148 : ite(139, 63, 147) : BV:8
149 : ite(138, 60, 148) : BV:8
150 : ite(137, 57, 149) : BV:8
151 : ite(136, 54, 150) : BV:8
152 : bvadd(72, 50, 134) : BV:32
153 : eq(152, 48) : BOOL
154 : eq(152, 55) : BOOL
155 : eq(152, 58) : BOOL
156 : eq(152, 61) : BOOL
157 : eq(152, 3) : BOOL
158 : eq(152, 66) : BOOL
159 : eq(152, 69) : BOOL
160 : eq(152, 72) : BOOL
161 : ite(160, 74, 75) : BV:8
162 : ite(159, 71, 161) : BV:8
163 : ite(158, 68, 162) : BV:8
164 : ite(157, 65, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 60, 165) : BV:8
167 : ite(154, 57, 166) : BV:8
168 : ite(153, 54, 167) : BV:8
169 : bvadd(55, 50, 134) : BV:32
170 : eq(169, 48) : BOOL
171 : eq(169, 55) : BOOL
172 : eq(169, 58) : BOOL
173 : eq(169, 61) : BOOL
174 : eq(169, 3) : BOOL
175 : eq(169, 66) : BOOL
176 : eq(169, 69) : BOOL
177 : eq(169, 72) : BOOL
178 : ite(177, 74, 75) : BV:8
179 : ite(176, 71, 178) : BV:8
180 : ite(175, 68, 179) : BV:8
181 : ite(174, 65, 180) : BV:8
182 : ite(173, 63, 181) : BV:8
183 : ite(172, 60, 182) : BV:8
184 : ite(171, 57, 183) : BV:8
185 : ite(170, 54, 184) : BV:8
186 : bvadd(50, 134) : BV:32
187 : eq(186, 48) : BOOL
188 : eq(186, 55) : BOOL
189 : eq(186, 58) : BOOL
190 : eq(186, 61) : BOOL
191 : eq(186, 3) : BOOL
192 : eq(186, 66) : BOOL
193 : eq(186, 69) : BOOL
194 : eq(186, 72) : BOOL
195 : ite(194, 74, 75) : BV:8
196 : ite(193, 71, 195) : BV:8
197 : ite(192, 68, 196) : BV:8
198 : ite(191, 65, 197) : BV:8
199 : ite(190, 63, 198) : BV:8
200 : ite(189, 60, 199) : BV:8
201 : ite(188, 57, 200) : BV:8
202 : ite(187, 54, 201) : BV:8
203 : bvconcat(151, 168, 185, 202) : BV:32
204 : ite(6, 3, 203) : BV:32
205 : ite(47, 203, 204) : BV:32
206 : ite(6, 3, 205) : BV:32
207 : lambda(1, 2, 206) : FUNCTION[BV:32,BV:32 -> BV:32]
208 : sym_const(207) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda49287Var : BV:32
2 : Lambda49288Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870920 { 0x20000008 +1.95e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870921 { 0x20000009 +1.107e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870922 { 0x2000000a +1.119e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536872963 { 0x20000803 +1.24449e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870920 ] -> true, [ 536870921; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 536870920 ] -> true, [ 536870921; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda49296Var : BV:32
2 : Lambda49297Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870920 { 0x20000008 +1.95e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870921 { 0x20000009 +1.107e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870922 { 0x2000000a +1.119e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536872963 { 0x20000803 +1.24449e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda49292Var : BV:32
2 : Lambda49293Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 223 { 0xdf -33 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 102 { 0x66 } : BV:8
17 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
18 : eq(11, 17) : BOOL
19 : 36 { 0x24 } : BV:8
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : eq(11, 20) : BOOL
22 : 184 { 0xb8 -72 } : BV:8
23 : eq(11, 3) : BOOL
24 : 186 { 0xba -70 } : BV:8
25 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
26 : eq(11, 25) : BOOL
27 : 192 { 0xc0 -64 } : BV:8
28 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
29 : eq(11, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 191 { 0xbf -65 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(21, 22, 38) : BV:8
40 : ite(18, 19, 39) : BV:8
41 : ite(15, 16, 40) : BV:8
42 : ite(12, 13, 41) : BV:8
43 : bvadd(31, 10) : BV:32
44 : eq(43, 7) : BOOL
45 : eq(43, 14) : BOOL
46 : eq(43, 17) : BOOL
47 : eq(43, 20) : BOOL
48 : eq(43, 3) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 28) : BOOL
51 : eq(43, 31) : BOOL
52 : ite(51, 33, 34) : BV:8
53 : ite(50, 30, 52) : BV:8
54 : ite(49, 27, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 22, 55) : BV:8
57 : ite(46, 19, 56) : BV:8
58 : ite(45, 16, 57) : BV:8
59 : ite(44, 13, 58) : BV:8
60 : bvadd(14, 10) : BV:32
61 : eq(60, 7) : BOOL
62 : eq(60, 14) : BOOL
63 : eq(60, 17) : BOOL
64 : eq(60, 20) : BOOL
65 : eq(60, 3) : BOOL
66 : eq(60, 25) : BOOL
67 : eq(60, 28) : BOOL
68 : eq(60, 31) : BOOL
69 : ite(68, 33, 34) : BV:8
70 : ite(67, 30, 69) : BV:8
71 : ite(66, 27, 70) : BV:8
72 : ite(65, 24, 71) : BV:8
73 : ite(64, 22, 72) : BV:8
74 : ite(63, 19, 73) : BV:8
75 : ite(62, 16, 74) : BV:8
76 : ite(61, 13, 75) : BV:8
77 : eq(10, 7) : BOOL
78 : eq(10, 14) : BOOL
79 : eq(10, 17) : BOOL
80 : eq(10, 20) : BOOL
81 : eq(10, 3) : BOOL
82 : eq(10, 25) : BOOL
83 : eq(10, 28) : BOOL
84 : eq(10, 31) : BOOL
85 : ite(84, 33, 34) : BV:8
86 : ite(83, 30, 85) : BV:8
87 : ite(82, 27, 86) : BV:8
88 : ite(81, 24, 87) : BV:8
89 : ite(80, 22, 88) : BV:8
90 : ite(79, 19, 89) : BV:8
91 : ite(78, 16, 90) : BV:8
92 : ite(77, 13, 91) : BV:8
93 : bvconcat(42, 59, 76, 92) : BV:32
94 : bvadd(7, 9, 93) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 14) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 3) : BOOL
100 : eq(94, 25) : BOOL
101 : eq(94, 28) : BOOL
102 : eq(94, 31) : BOOL
103 : ite(102, 33, 34) : BV:8
104 : ite(101, 30, 103) : BV:8
105 : ite(100, 27, 104) : BV:8
106 : ite(99, 24, 105) : BV:8
107 : ite(98, 22, 106) : BV:8
108 : ite(97, 19, 107) : BV:8
109 : ite(96, 16, 108) : BV:8
110 : ite(95, 13, 109) : BV:8
111 : bvadd(31, 9, 93) : BV:32
112 : eq(111, 7) : BOOL
113 : eq(111, 14) : BOOL
114 : eq(111, 17) : BOOL
115 : eq(111, 20) : BOOL
116 : eq(111, 3) : BOOL
117 : eq(111, 25) : BOOL
118 : eq(111, 28) : BOOL
119 : eq(111, 31) : BOOL
120 : ite(119, 33, 34) : BV:8
121 : ite(118, 30, 120) : BV:8
122 : ite(117, 27, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 22, 123) : BV:8
125 : ite(114, 19, 124) : BV:8
126 : ite(113, 16, 125) : BV:8
127 : ite(112, 13, 126) : BV:8
128 : bvadd(14, 9, 93) : BV:32
129 : eq(128, 7) : BOOL
130 : eq(128, 14) : BOOL
131 : eq(128, 17) : BOOL
132 : eq(128, 20) : BOOL
133 : eq(128, 3) : BOOL
134 : eq(128, 25) : BOOL
135 : eq(128, 28) : BOOL
136 : eq(128, 31) : BOOL
137 : ite(136, 33, 34) : BV:8
138 : ite(135, 30, 137) : BV:8
139 : ite(134, 27, 138) : BV:8
140 : ite(133, 24, 139) : BV:8
141 : ite(132, 22, 140) : BV:8
142 : ite(131, 19, 141) : BV:8
143 : ite(130, 16, 142) : BV:8
144 : ite(129, 13, 143) : BV:8
145 : bvadd(9, 93) : BV:32
146 : eq(145, 7) : BOOL
147 : eq(145, 14) : BOOL
148 : eq(145, 17) : BOOL
149 : eq(145, 20) : BOOL
150 : eq(145, 3) : BOOL
151 : eq(145, 25) : BOOL
152 : eq(145, 28) : BOOL
153 : eq(145, 31) : BOOL
154 : ite(153, 33, 34) : BV:8
155 : ite(152, 30, 154) : BV:8
156 : ite(151, 27, 155) : BV:8
157 : ite(150, 24, 156) : BV:8
158 : ite(149, 22, 157) : BV:8
159 : ite(148, 19, 158) : BV:8
160 : ite(147, 16, 159) : BV:8
161 : ite(146, 13, 160) : BV:8
162 : bvconcat(110, 127, 144, 161) : BV:32
163 : ite(6, 3, 162) : BV:32
164 : lambda(1, 2, 163) : FUNCTION[BV:32,BV:32 -> BV:32]
165 : sym_const(164) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 536872961 ] -> true, [ 536872962; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda49303Var : BV:32
2 : 536870912 { 0x20000000 +1.0e193 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870920 { 0x20000008 +1.95e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : eq(12, 8) : BOOL
14 : 223 { 0xdf -33 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 102 { 0x66 } : BV:8
18 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
19 : eq(12, 18) : BOOL
20 : 36 { 0x24 } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 184 { 0xb8 -72 } : BV:8
24 : eq(12, 4) : BOOL
25 : 186 { 0xba -70 } : BV:8
26 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
27 : eq(12, 26) : BOOL
28 : 192 { 0xc0 -64 } : BV:8
29 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
30 : eq(12, 29) : BOOL
31 : 96 { 0x60 } : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : eq(12, 32) : BOOL
34 : 191 { 0xbf -65 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(13, 14, 42) : BV:8
44 : bvadd(32, 10, 11) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 4) : BOOL
50 : eq(44, 26) : BOOL
51 : eq(44, 29) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 31, 53) : BV:8
55 : ite(50, 28, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 17, 58) : BV:8
60 : ite(45, 14, 59) : BV:8
61 : bvadd(15, 10, 11) : BV:32
62 : eq(61, 8) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 18) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 4) : BOOL
67 : eq(61, 26) : BOOL
68 : eq(61, 29) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 31, 70) : BV:8
72 : ite(67, 28, 71) : BV:8
73 : ite(66, 25, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : bvadd(10, 11) : BV:32
79 : eq(78, 8) : BOOL
80 : eq(78, 15) : BOOL
81 : eq(78, 18) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 4) : BOOL
84 : eq(78, 26) : BOOL
85 : eq(78, 29) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 28, 88) : BV:8
90 : ite(83, 25, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 17, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : ite(7, 4, 95) : BV:32
97 : ite(6, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda49304Var : BV:32
2 : 536870912 { 0x20000000 +1.0e193 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870920 { 0x20000008 +1.95e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : eq(12, 8) : BOOL
14 : 223 { 0xdf -33 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 102 { 0x66 } : BV:8
18 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
19 : eq(12, 18) : BOOL
20 : 36 { 0x24 } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 184 { 0xb8 -72 } : BV:8
24 : eq(12, 4) : BOOL
25 : 186 { 0xba -70 } : BV:8
26 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
27 : eq(12, 26) : BOOL
28 : 192 { 0xc0 -64 } : BV:8
29 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
30 : eq(12, 29) : BOOL
31 : 96 { 0x60 } : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : eq(12, 32) : BOOL
34 : 191 { 0xbf -65 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(13, 14, 42) : BV:8
44 : bvadd(32, 10, 11) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 4) : BOOL
50 : eq(44, 26) : BOOL
51 : eq(44, 29) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 31, 53) : BV:8
55 : ite(50, 28, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 17, 58) : BV:8
60 : ite(45, 14, 59) : BV:8
61 : bvadd(15, 10, 11) : BV:32
62 : eq(61, 8) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 18) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 4) : BOOL
67 : eq(61, 26) : BOOL
68 : eq(61, 29) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 31, 70) : BV:8
72 : ite(67, 28, 71) : BV:8
73 : ite(66, 25, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : bvadd(10, 11) : BV:32
79 : eq(78, 8) : BOOL
80 : eq(78, 15) : BOOL
81 : eq(78, 18) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 4) : BOOL
84 : eq(78, 26) : BOOL
85 : eq(78, 29) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 28, 88) : BV:8
90 : ite(83, 25, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 17, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : ite(7, 4, 95) : BV:32
97 : ite(6, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 536872961 ] -> true, [ 536872962; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 536872961 ] -> true, [ 536872962; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda49311Var : BV:32
2 : 536870912 { 0x20000000 +1.0e193 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870920 { 0x20000008 +1.95e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 223 { 0xdf -33 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 102 { 0x66 } : BV:8
17 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
18 : eq(11, 17) : BOOL
19 : 36 { 0x24 } : BV:8
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : eq(11, 20) : BOOL
22 : 184 { 0xb8 -72 } : BV:8
23 : eq(11, 4) : BOOL
24 : 186 { 0xba -70 } : BV:8
25 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
26 : eq(11, 25) : BOOL
27 : 192 { 0xc0 -64 } : BV:8
28 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
29 : eq(11, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 191 { 0xbf -65 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(21, 22, 38) : BV:8
40 : ite(18, 19, 39) : BV:8
41 : ite(15, 16, 40) : BV:8
42 : ite(12, 13, 41) : BV:8
43 : bvadd(31, 9, 10) : BV:32
44 : eq(43, 7) : BOOL
45 : eq(43, 14) : BOOL
46 : eq(43, 17) : BOOL
47 : eq(43, 20) : BOOL
48 : eq(43, 4) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 28) : BOOL
51 : eq(43, 31) : BOOL
52 : ite(51, 33, 34) : BV:8
53 : ite(50, 30, 52) : BV:8
54 : ite(49, 27, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 22, 55) : BV:8
57 : ite(46, 19, 56) : BV:8
58 : ite(45, 16, 57) : BV:8
59 : ite(44, 13, 58) : BV:8
60 : bvadd(14, 9, 10) : BV:32
61 : eq(60, 7) : BOOL
62 : eq(60, 14) : BOOL
63 : eq(60, 17) : BOOL
64 : eq(60, 20) : BOOL
65 : eq(60, 4) : BOOL
66 : eq(60, 25) : BOOL
67 : eq(60, 28) : BOOL
68 : eq(60, 31) : BOOL
69 : ite(68, 33, 34) : BV:8
70 : ite(67, 30, 69) : BV:8
71 : ite(66, 27, 70) : BV:8
72 : ite(65, 24, 71) : BV:8
73 : ite(64, 22, 72) : BV:8
74 : ite(63, 19, 73) : BV:8
75 : ite(62, 16, 74) : BV:8
76 : ite(61, 13, 75) : BV:8
77 : bvadd(9, 10) : BV:32
78 : eq(77, 7) : BOOL
79 : eq(77, 14) : BOOL
80 : eq(77, 17) : BOOL
81 : eq(77, 20) : BOOL
82 : eq(77, 4) : BOOL
83 : eq(77, 25) : BOOL
84 : eq(77, 28) : BOOL
85 : eq(77, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : ite(82, 24, 88) : BV:8
90 : ite(81, 22, 89) : BV:8
91 : ite(80, 19, 90) : BV:8
92 : ite(79, 16, 91) : BV:8
93 : ite(78, 13, 92) : BV:8
94 : bvconcat(42, 59, 76, 93) : BV:32
95 : ite(6, 4, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
1351403582
=counter_example_end
=global nodece 61 num_edges_traversed 1
=global nodece 61 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 62
=global nodece 62 nodece z3.ce4507.num_edges_traversed2
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(epsilon)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3.ce4507 886d47443698916452320d656e89ce
=input.spec-%var-x-1
1 : Lambda49390Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870920 { 0x20000008 +1.95e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870921 { 0x20000009 +1.107e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49391Var : BV:32
18 : Lambda49392Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870922 { 0x2000000a +1.119e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536872963 { 0x20000803 +1.24449e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda49393Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 75) : BOOL
81 : 223 { 0xdf -33 } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(79, 82) : BOOL
84 : 102 { 0x66 } : BV:8
85 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
86 : eq(79, 85) : BOOL
87 : 36 { 0x24 } : BV:8
88 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
89 : eq(79, 88) : BOOL
90 : 184 { 0xb8 -72 } : BV:8
91 : eq(79, 2) : BOOL
92 : 186 { 0xba -70 } : BV:8
93 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
94 : eq(79, 93) : BOOL
95 : 192 { 0xc0 -64 } : BV:8
96 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
97 : eq(79, 96) : BOOL
98 : 96 { 0x60 } : BV:8
99 : 2 { 0x2 +1.23e129 } : BV:32
100 : eq(79, 99) : BOOL
101 : 191 { 0xbf -65 } : BV:8
102 : 0 { 0x0 } : BV:8
103 : ite(100, 101, 102) : BV:8
104 : ite(97, 98, 103) : BV:8
105 : ite(94, 95, 104) : BV:8
106 : ite(91, 92, 105) : BV:8
107 : ite(89, 90, 106) : BV:8
108 : ite(86, 87, 107) : BV:8
109 : ite(83, 84, 108) : BV:8
110 : ite(80, 81, 109) : BV:8
111 : bvadd(99, 78) : BV:32
112 : eq(111, 75) : BOOL
113 : eq(111, 82) : BOOL
114 : eq(111, 85) : BOOL
115 : eq(111, 88) : BOOL
116 : eq(111, 2) : BOOL
117 : eq(111, 93) : BOOL
118 : eq(111, 96) : BOOL
119 : eq(111, 99) : BOOL
120 : ite(119, 101, 102) : BV:8
121 : ite(118, 98, 120) : BV:8
122 : ite(117, 95, 121) : BV:8
123 : ite(116, 92, 122) : BV:8
124 : ite(115, 90, 123) : BV:8
125 : ite(114, 87, 124) : BV:8
126 : ite(113, 84, 125) : BV:8
127 : ite(112, 81, 126) : BV:8
128 : bvadd(82, 78) : BV:32
129 : eq(128, 75) : BOOL
130 : eq(128, 82) : BOOL
131 : eq(128, 85) : BOOL
132 : eq(128, 88) : BOOL
133 : eq(128, 2) : BOOL
134 : eq(128, 93) : BOOL
135 : eq(128, 96) : BOOL
136 : eq(128, 99) : BOOL
137 : ite(136, 101, 102) : BV:8
138 : ite(135, 98, 137) : BV:8
139 : ite(134, 95, 138) : BV:8
140 : ite(133, 92, 139) : BV:8
141 : ite(132, 90, 140) : BV:8
142 : ite(131, 87, 141) : BV:8
143 : ite(130, 84, 142) : BV:8
144 : ite(129, 81, 143) : BV:8
145 : eq(78, 75) : BOOL
146 : eq(78, 82) : BOOL
147 : eq(78, 85) : BOOL
148 : eq(78, 88) : BOOL
149 : eq(78, 2) : BOOL
150 : eq(78, 93) : BOOL
151 : eq(78, 96) : BOOL
152 : eq(78, 99) : BOOL
153 : ite(152, 101, 102) : BV:8
154 : ite(151, 98, 153) : BV:8
155 : ite(150, 95, 154) : BV:8
156 : ite(149, 92, 155) : BV:8
157 : ite(148, 90, 156) : BV:8
158 : ite(147, 87, 157) : BV:8
159 : ite(146, 84, 158) : BV:8
160 : ite(145, 81, 159) : BV:8
161 : bvconcat(110, 127, 144, 160) : BV:32
162 : bvadd(75, 77, 161) : BV:32
163 : eq(162, 75) : BOOL
164 : eq(162, 82) : BOOL
165 : eq(162, 85) : BOOL
166 : eq(162, 88) : BOOL
167 : eq(162, 2) : BOOL
168 : eq(162, 93) : BOOL
169 : eq(162, 96) : BOOL
170 : eq(162, 99) : BOOL
171 : ite(170, 101, 102) : BV:8
172 : ite(169, 98, 171) : BV:8
173 : ite(168, 95, 172) : BV:8
174 : ite(167, 92, 173) : BV:8
175 : ite(166, 90, 174) : BV:8
176 : ite(165, 87, 175) : BV:8
177 : ite(164, 84, 176) : BV:8
178 : ite(163, 81, 177) : BV:8
179 : bvadd(99, 77, 161) : BV:32
180 : eq(179, 75) : BOOL
181 : eq(179, 82) : BOOL
182 : eq(179, 85) : BOOL
183 : eq(179, 88) : BOOL
184 : eq(179, 2) : BOOL
185 : eq(179, 93) : BOOL
186 : eq(179, 96) : BOOL
187 : eq(179, 99) : BOOL
188 : ite(187, 101, 102) : BV:8
189 : ite(186, 98, 188) : BV:8
190 : ite(185, 95, 189) : BV:8
191 : ite(184, 92, 190) : BV:8
192 : ite(183, 90, 191) : BV:8
193 : ite(182, 87, 192) : BV:8
194 : ite(181, 84, 193) : BV:8
195 : ite(180, 81, 194) : BV:8
196 : bvadd(82, 77, 161) : BV:32
197 : eq(196, 75) : BOOL
198 : eq(196, 82) : BOOL
199 : eq(196, 85) : BOOL
200 : eq(196, 88) : BOOL
201 : eq(196, 2) : BOOL
202 : eq(196, 93) : BOOL
203 : eq(196, 96) : BOOL
204 : eq(196, 99) : BOOL
205 : ite(204, 101, 102) : BV:8
206 : ite(203, 98, 205) : BV:8
207 : ite(202, 95, 206) : BV:8
208 : ite(201, 92, 207) : BV:8
209 : ite(200, 90, 208) : BV:8
210 : ite(199, 87, 209) : BV:8
211 : ite(198, 84, 210) : BV:8
212 : ite(197, 81, 211) : BV:8
213 : bvadd(77, 161) : BV:32
214 : eq(213, 75) : BOOL
215 : eq(213, 82) : BOOL
216 : eq(213, 85) : BOOL
217 : eq(213, 88) : BOOL
218 : eq(213, 2) : BOOL
219 : eq(213, 93) : BOOL
220 : eq(213, 96) : BOOL
221 : eq(213, 99) : BOOL
222 : ite(221, 101, 102) : BV:8
223 : ite(220, 98, 222) : BV:8
224 : ite(219, 95, 223) : BV:8
225 : ite(218, 92, 224) : BV:8
226 : ite(217, 90, 225) : BV:8
227 : ite(216, 87, 226) : BV:8
228 : ite(215, 84, 227) : BV:8
229 : ite(214, 81, 228) : BV:8
230 : bvconcat(178, 195, 212, 229) : BV:32
231 : ite(55, 2, 230) : BV:32
232 : ite(74, 230, 231) : BV:32
233 : ite(55, 2, 232) : BV:32
234 : lambda(52, 233) : FUNCTION[BV:32 -> BV:32]
235 : map(51, 234) : MAP[BV:32 -> BV:32]
236 : lambda(17, 235) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
237 : map(16, 236) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
238 : sym_const(237) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda49410Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870920 { 0x20000008 +1.95e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870921 { 0x20000009 +1.107e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49411Var : BV:32
18 : Lambda49412Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870922 { 0x2000000a +1.119e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536872963 { 0x20000803 +1.24449e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda49413Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 56) : BOOL
62 : 223 { 0xdf -33 } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(60, 63) : BOOL
65 : 102 { 0x66 } : BV:8
66 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
67 : eq(60, 66) : BOOL
68 : 36 { 0x24 } : BV:8
69 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
70 : eq(60, 69) : BOOL
71 : 184 { 0xb8 -72 } : BV:8
72 : eq(60, 2) : BOOL
73 : 186 { 0xba -70 } : BV:8
74 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
75 : eq(60, 74) : BOOL
76 : 192 { 0xc0 -64 } : BV:8
77 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
78 : eq(60, 77) : BOOL
79 : 96 { 0x60 } : BV:8
80 : 2 { 0x2 +1.23e129 } : BV:32
81 : eq(60, 80) : BOOL
82 : 191 { 0xbf -65 } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : ite(78, 79, 84) : BV:8
86 : ite(75, 76, 85) : BV:8
87 : ite(72, 73, 86) : BV:8
88 : ite(70, 71, 87) : BV:8
89 : ite(67, 68, 88) : BV:8
90 : ite(64, 65, 89) : BV:8
91 : ite(61, 62, 90) : BV:8
92 : bvadd(80, 59) : BV:32
93 : eq(92, 56) : BOOL
94 : eq(92, 63) : BOOL
95 : eq(92, 66) : BOOL
96 : eq(92, 69) : BOOL
97 : eq(92, 2) : BOOL
98 : eq(92, 74) : BOOL
99 : eq(92, 77) : BOOL
100 : eq(92, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : ite(99, 79, 101) : BV:8
103 : ite(98, 76, 102) : BV:8
104 : ite(97, 73, 103) : BV:8
105 : ite(96, 71, 104) : BV:8
106 : ite(95, 68, 105) : BV:8
107 : ite(94, 65, 106) : BV:8
108 : ite(93, 62, 107) : BV:8
109 : bvadd(63, 59) : BV:32
110 : eq(109, 56) : BOOL
111 : eq(109, 63) : BOOL
112 : eq(109, 66) : BOOL
113 : eq(109, 69) : BOOL
114 : eq(109, 2) : BOOL
115 : eq(109, 74) : BOOL
116 : eq(109, 77) : BOOL
117 : eq(109, 80) : BOOL
118 : ite(117, 82, 83) : BV:8
119 : ite(116, 79, 118) : BV:8
120 : ite(115, 76, 119) : BV:8
121 : ite(114, 73, 120) : BV:8
122 : ite(113, 71, 121) : BV:8
123 : ite(112, 68, 122) : BV:8
124 : ite(111, 65, 123) : BV:8
125 : ite(110, 62, 124) : BV:8
126 : eq(59, 56) : BOOL
127 : eq(59, 63) : BOOL
128 : eq(59, 66) : BOOL
129 : eq(59, 69) : BOOL
130 : eq(59, 2) : BOOL
131 : eq(59, 74) : BOOL
132 : eq(59, 77) : BOOL
133 : eq(59, 80) : BOOL
134 : ite(133, 82, 83) : BV:8
135 : ite(132, 79, 134) : BV:8
136 : ite(131, 76, 135) : BV:8
137 : ite(130, 73, 136) : BV:8
138 : ite(129, 71, 137) : BV:8
139 : ite(128, 68, 138) : BV:8
140 : ite(127, 65, 139) : BV:8
141 : ite(126, 62, 140) : BV:8
142 : bvconcat(91, 108, 125, 141) : BV:32
143 : bvadd(56, 58, 142) : BV:32
144 : eq(143, 56) : BOOL
145 : eq(143, 63) : BOOL
146 : eq(143, 66) : BOOL
147 : eq(143, 69) : BOOL
148 : eq(143, 2) : BOOL
149 : eq(143, 74) : BOOL
150 : eq(143, 77) : BOOL
151 : eq(143, 80) : BOOL
152 : ite(151, 82, 83) : BV:8
153 : ite(150, 79, 152) : BV:8
154 : ite(149, 76, 153) : BV:8
155 : ite(148, 73, 154) : BV:8
156 : ite(147, 71, 155) : BV:8
157 : ite(146, 68, 156) : BV:8
158 : ite(145, 65, 157) : BV:8
159 : ite(144, 62, 158) : BV:8
160 : bvadd(80, 58, 142) : BV:32
161 : eq(160, 56) : BOOL
162 : eq(160, 63) : BOOL
163 : eq(160, 66) : BOOL
164 : eq(160, 69) : BOOL
165 : eq(160, 2) : BOOL
166 : eq(160, 74) : BOOL
167 : eq(160, 77) : BOOL
168 : eq(160, 80) : BOOL
169 : ite(168, 82, 83) : BV:8
170 : ite(167, 79, 169) : BV:8
171 : ite(166, 76, 170) : BV:8
172 : ite(165, 73, 171) : BV:8
173 : ite(164, 71, 172) : BV:8
174 : ite(163, 68, 173) : BV:8
175 : ite(162, 65, 174) : BV:8
176 : ite(161, 62, 175) : BV:8
177 : bvadd(63, 58, 142) : BV:32
178 : eq(177, 56) : BOOL
179 : eq(177, 63) : BOOL
180 : eq(177, 66) : BOOL
181 : eq(177, 69) : BOOL
182 : eq(177, 2) : BOOL
183 : eq(177, 74) : BOOL
184 : eq(177, 77) : BOOL
185 : eq(177, 80) : BOOL
186 : ite(185, 82, 83) : BV:8
187 : ite(184, 79, 186) : BV:8
188 : ite(183, 76, 187) : BV:8
189 : ite(182, 73, 188) : BV:8
190 : ite(181, 71, 189) : BV:8
191 : ite(180, 68, 190) : BV:8
192 : ite(179, 65, 191) : BV:8
193 : ite(178, 62, 192) : BV:8
194 : bvadd(58, 142) : BV:32
195 : eq(194, 56) : BOOL
196 : eq(194, 63) : BOOL
197 : eq(194, 66) : BOOL
198 : eq(194, 69) : BOOL
199 : eq(194, 2) : BOOL
200 : eq(194, 74) : BOOL
201 : eq(194, 77) : BOOL
202 : eq(194, 80) : BOOL
203 : ite(202, 82, 83) : BV:8
204 : ite(201, 79, 203) : BV:8
205 : ite(200, 76, 204) : BV:8
206 : ite(199, 73, 205) : BV:8
207 : ite(198, 71, 206) : BV:8
208 : ite(197, 68, 207) : BV:8
209 : ite(196, 65, 208) : BV:8
210 : ite(195, 62, 209) : BV:8
211 : bvconcat(159, 176, 193, 210) : BV:32
212 : ite(55, 2, 211) : BV:32
213 : lambda(52, 212) : FUNCTION[BV:32 -> BV:32]
214 : map(51, 213) : MAP[BV:32 -> BV:32]
215 : lambda(17, 214) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
216 : map(16, 215) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
217 : sym_const(216) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 186, [ 1; 1 ] -> 102, [ 2; 2 ] -> 191, [ 3; 3 ] -> 223, [ 4; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 36, [ 2147483645; 2147483645 ] -> 96, [ 2147483646; 2147483646 ] -> 184, [ 2147483647; 2147483647 ] -> 192, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1655256095 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1655256096; 1655256099 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1655256100; 2756897515 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2756897516; 2756897519 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2756897520; 2773020119 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2773020120; 2773020123 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2773020124; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1655256096 { 0x62a93420 +1.32190322e70 } : BV:32
=input.dst.llvm-%m
1 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2756897516 { 0xa452eaec -1538069780 -1.64779424e201 } : BV:32
=input.dst.llvm-%n
1 : 536870921 { 0x20000009 +1.107e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2773020120 { 0xa548edd8 -1521947176 -1.56975841e203 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 958698756 { 0x39249504 +1.28579759e243 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 536870922 { 0x2000000a +1.119e193 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda49417Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49418Var : BV:32
18 : 536870912 { 0x20000000 +1.0e193 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870920 { 0x20000008 +1.95e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 223 { 0xdf -33 } : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 102 { 0x66 } : BV:8
32 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
33 : eq(26, 32) : BOOL
34 : 36 { 0x24 } : BV:8
35 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
36 : eq(26, 35) : BOOL
37 : 184 { 0xb8 -72 } : BV:8
38 : eq(26, 2) : BOOL
39 : 186 { 0xba -70 } : BV:8
40 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
41 : eq(26, 40) : BOOL
42 : 192 { 0xc0 -64 } : BV:8
43 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
44 : eq(26, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : eq(26, 46) : BOOL
48 : 191 { 0xbf -65 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(36, 37, 53) : BV:8
55 : ite(33, 34, 54) : BV:8
56 : ite(30, 31, 55) : BV:8
57 : ite(27, 28, 56) : BV:8
58 : bvadd(46, 24, 25) : BV:32
59 : eq(58, 22) : BOOL
60 : eq(58, 29) : BOOL
61 : eq(58, 32) : BOOL
62 : eq(58, 35) : BOOL
63 : eq(58, 2) : BOOL
64 : eq(58, 40) : BOOL
65 : eq(58, 43) : BOOL
66 : eq(58, 46) : BOOL
67 : ite(66, 48, 49) : BV:8
68 : ite(65, 45, 67) : BV:8
69 : ite(64, 42, 68) : BV:8
70 : ite(63, 39, 69) : BV:8
71 : ite(62, 37, 70) : BV:8
72 : ite(61, 34, 71) : BV:8
73 : ite(60, 31, 72) : BV:8
74 : ite(59, 28, 73) : BV:8
75 : bvadd(29, 24, 25) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 29) : BOOL
78 : eq(75, 32) : BOOL
79 : eq(75, 35) : BOOL
80 : eq(75, 2) : BOOL
81 : eq(75, 40) : BOOL
82 : eq(75, 43) : BOOL
83 : eq(75, 46) : BOOL
84 : ite(83, 48, 49) : BV:8
85 : ite(82, 45, 84) : BV:8
86 : ite(81, 42, 85) : BV:8
87 : ite(80, 39, 86) : BV:8
88 : ite(79, 37, 87) : BV:8
89 : ite(78, 34, 88) : BV:8
90 : ite(77, 31, 89) : BV:8
91 : ite(76, 28, 90) : BV:8
92 : bvadd(24, 25) : BV:32
93 : eq(92, 22) : BOOL
94 : eq(92, 29) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 35) : BOOL
97 : eq(92, 2) : BOOL
98 : eq(92, 40) : BOOL
99 : eq(92, 43) : BOOL
100 : eq(92, 46) : BOOL
101 : ite(100, 48, 49) : BV:8
102 : ite(99, 45, 101) : BV:8
103 : ite(98, 42, 102) : BV:8
104 : ite(97, 39, 103) : BV:8
105 : ite(96, 37, 104) : BV:8
106 : ite(95, 34, 105) : BV:8
107 : ite(94, 31, 106) : BV:8
108 : ite(93, 28, 107) : BV:8
109 : bvconcat(57, 74, 91, 108) : BV:32
110 : ite(21, 2, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
2 : unit : UNIT
3 : Lambda49399Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda49400Var : BV:32
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(19, 20) : BOOL
22 : 536870920 { 0x20000008 +1.95e193 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : eq(29, 25) : BOOL
31 : 223 { 0xdf -33 } : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(29, 32) : BOOL
34 : 102 { 0x66 } : BV:8
35 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
36 : eq(29, 35) : BOOL
37 : 36 { 0x24 } : BV:8
38 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
39 : eq(29, 38) : BOOL
40 : 184 { 0xb8 -72 } : BV:8
41 : eq(29, 4) : BOOL
42 : 186 { 0xba -70 } : BV:8
43 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
44 : eq(29, 43) : BOOL
45 : 192 { 0xc0 -64 } : BV:8
46 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
47 : eq(29, 46) : BOOL
48 : 96 { 0x60 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(29, 49) : BOOL
51 : 191 { 0xbf -65 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(39, 40, 56) : BV:8
58 : ite(36, 37, 57) : BV:8
59 : ite(33, 34, 58) : BV:8
60 : ite(30, 31, 59) : BV:8
61 : bvadd(49, 27, 28) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 32) : BOOL
64 : eq(61, 35) : BOOL
65 : eq(61, 38) : BOOL
66 : eq(61, 4) : BOOL
67 : eq(61, 43) : BOOL
68 : eq(61, 46) : BOOL
69 : eq(61, 49) : BOOL
70 : ite(69, 51, 52) : BV:8
71 : ite(68, 48, 70) : BV:8
72 : ite(67, 45, 71) : BV:8
73 : ite(66, 42, 72) : BV:8
74 : ite(65, 40, 73) : BV:8
75 : ite(64, 37, 74) : BV:8
76 : ite(63, 34, 75) : BV:8
77 : ite(62, 31, 76) : BV:8
78 : bvadd(32, 27, 28) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 32) : BOOL
81 : eq(78, 35) : BOOL
82 : eq(78, 38) : BOOL
83 : eq(78, 4) : BOOL
84 : eq(78, 43) : BOOL
85 : eq(78, 46) : BOOL
86 : eq(78, 49) : BOOL
87 : ite(86, 51, 52) : BV:8
88 : ite(85, 48, 87) : BV:8
89 : ite(84, 45, 88) : BV:8
90 : ite(83, 42, 89) : BV:8
91 : ite(82, 40, 90) : BV:8
92 : ite(81, 37, 91) : BV:8
93 : ite(80, 34, 92) : BV:8
94 : ite(79, 31, 93) : BV:8
95 : bvadd(27, 28) : BV:32
96 : eq(95, 25) : BOOL
97 : eq(95, 32) : BOOL
98 : eq(95, 35) : BOOL
99 : eq(95, 38) : BOOL
100 : eq(95, 4) : BOOL
101 : eq(95, 43) : BOOL
102 : eq(95, 46) : BOOL
103 : eq(95, 49) : BOOL
104 : ite(103, 51, 52) : BV:8
105 : ite(102, 48, 104) : BV:8
106 : ite(101, 45, 105) : BV:8
107 : ite(100, 42, 106) : BV:8
108 : ite(99, 40, 107) : BV:8
109 : ite(98, 37, 108) : BV:8
110 : ite(97, 34, 109) : BV:8
111 : ite(96, 31, 110) : BV:8
112 : bvconcat(60, 77, 94, 111) : BV:32
113 : ite(24, 4, 112) : BV:32
114 : ite(23, 4, 113) : BV:32
115 : ite(21, 4, 114) : BV:32
116 : lambda(19, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(18, 116) : MAP[BV:32 -> BV:32]
118 : sum(1, 2, 117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
119 : sym_const(118) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 644522465 { 0x266aa1e1 +1.83306515e205 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda49422Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49423Var : BV:32
18 : 536870912 { 0x20000000 +1.0e193 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870920 { 0x20000008 +1.95e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : eq(27, 23) : BOOL
29 : 223 { 0xdf -33 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(27, 30) : BOOL
32 : 102 { 0x66 } : BV:8
33 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
34 : eq(27, 33) : BOOL
35 : 36 { 0x24 } : BV:8
36 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
37 : eq(27, 36) : BOOL
38 : 184 { 0xb8 -72 } : BV:8
39 : eq(27, 2) : BOOL
40 : 186 { 0xba -70 } : BV:8
41 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
42 : eq(27, 41) : BOOL
43 : 192 { 0xc0 -64 } : BV:8
44 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
45 : eq(27, 44) : BOOL
46 : 96 { 0x60 } : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : eq(27, 47) : BOOL
49 : 191 { 0xbf -65 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(37, 38, 54) : BV:8
56 : ite(34, 35, 55) : BV:8
57 : ite(31, 32, 56) : BV:8
58 : ite(28, 29, 57) : BV:8
59 : bvadd(47, 25, 26) : BV:32
60 : eq(59, 23) : BOOL
61 : eq(59, 30) : BOOL
62 : eq(59, 33) : BOOL
63 : eq(59, 36) : BOOL
64 : eq(59, 2) : BOOL
65 : eq(59, 41) : BOOL
66 : eq(59, 44) : BOOL
67 : eq(59, 47) : BOOL
68 : ite(67, 49, 50) : BV:8
69 : ite(66, 46, 68) : BV:8
70 : ite(65, 43, 69) : BV:8
71 : ite(64, 40, 70) : BV:8
72 : ite(63, 38, 71) : BV:8
73 : ite(62, 35, 72) : BV:8
74 : ite(61, 32, 73) : BV:8
75 : ite(60, 29, 74) : BV:8
76 : bvadd(30, 25, 26) : BV:32
77 : eq(76, 23) : BOOL
78 : eq(76, 30) : BOOL
79 : eq(76, 33) : BOOL
80 : eq(76, 36) : BOOL
81 : eq(76, 2) : BOOL
82 : eq(76, 41) : BOOL
83 : eq(76, 44) : BOOL
84 : eq(76, 47) : BOOL
85 : ite(84, 49, 50) : BV:8
86 : ite(83, 46, 85) : BV:8
87 : ite(82, 43, 86) : BV:8
88 : ite(81, 40, 87) : BV:8
89 : ite(80, 38, 88) : BV:8
90 : ite(79, 35, 89) : BV:8
91 : ite(78, 32, 90) : BV:8
92 : ite(77, 29, 91) : BV:8
93 : bvadd(25, 26) : BV:32
94 : eq(93, 23) : BOOL
95 : eq(93, 30) : BOOL
96 : eq(93, 33) : BOOL
97 : eq(93, 36) : BOOL
98 : eq(93, 2) : BOOL
99 : eq(93, 41) : BOOL
100 : eq(93, 44) : BOOL
101 : eq(93, 47) : BOOL
102 : ite(101, 49, 50) : BV:8
103 : ite(100, 46, 102) : BV:8
104 : ite(99, 43, 103) : BV:8
105 : ite(98, 40, 104) : BV:8
106 : ite(97, 38, 105) : BV:8
107 : ite(96, 35, 106) : BV:8
108 : ite(95, 32, 107) : BV:8
109 : ite(94, 29, 108) : BV:8
110 : bvconcat(58, 75, 92, 109) : BV:32
111 : ite(22, 2, 110) : BV:32
112 : ite(21, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 536870922 { 0x2000000a +1.119e193 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 791552518 { 0x2f2e2206 +1.36041331e223 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2756897516 { 0xa452eaec -1538069780 -1.64779424e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2756897519 { 0xa452eaef -1538069777 -1.64779460e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2773020120 { 0xa548edd8 -1521947176 -1.56975841e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2773020123 { 0xa548eddb -1521947173 -1.56975877e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1655256096 { 0x62a93420 +1.32190322e70 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1655256099 { 0x62a93423 +1.32190358e70 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda49282Var : BV:32
2 : Lambda49283Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870920 { 0x20000008 +1.95e193 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870921 { 0x20000009 +1.107e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 536870922 { 0x2000000a +1.119e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 536872963 { 0x20000803 +1.24449e193 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 48) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(52, 55) : BOOL
57 : 102 { 0x66 } : BV:8
58 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
59 : eq(52, 58) : BOOL
60 : 36 { 0x24 } : BV:8
61 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
62 : eq(52, 61) : BOOL
63 : 184 { 0xb8 -72 } : BV:8
64 : eq(52, 3) : BOOL
65 : 186 { 0xba -70 } : BV:8
66 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
67 : eq(52, 66) : BOOL
68 : 192 { 0xc0 -64 } : BV:8
69 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
70 : eq(52, 69) : BOOL
71 : 96 { 0x60 } : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : eq(52, 72) : BOOL
74 : 191 { 0xbf -65 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(62, 63, 79) : BV:8
81 : ite(59, 60, 80) : BV:8
82 : ite(56, 57, 81) : BV:8
83 : ite(53, 54, 82) : BV:8
84 : bvadd(72, 51) : BV:32
85 : eq(84, 48) : BOOL
86 : eq(84, 55) : BOOL
87 : eq(84, 58) : BOOL
88 : eq(84, 61) : BOOL
89 : eq(84, 3) : BOOL
90 : eq(84, 66) : BOOL
91 : eq(84, 69) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 71, 93) : BV:8
95 : ite(90, 68, 94) : BV:8
96 : ite(89, 65, 95) : BV:8
97 : ite(88, 63, 96) : BV:8
98 : ite(87, 60, 97) : BV:8
99 : ite(86, 57, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : bvadd(55, 51) : BV:32
102 : eq(101, 48) : BOOL
103 : eq(101, 55) : BOOL
104 : eq(101, 58) : BOOL
105 : eq(101, 61) : BOOL
106 : eq(101, 3) : BOOL
107 : eq(101, 66) : BOOL
108 : eq(101, 69) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 71, 110) : BV:8
112 : ite(107, 68, 111) : BV:8
113 : ite(106, 65, 112) : BV:8
114 : ite(105, 63, 113) : BV:8
115 : ite(104, 60, 114) : BV:8
116 : ite(103, 57, 115) : BV:8
117 : ite(102, 54, 116) : BV:8
118 : eq(51, 48) : BOOL
119 : eq(51, 55) : BOOL
120 : eq(51, 58) : BOOL
121 : eq(51, 61) : BOOL
122 : eq(51, 3) : BOOL
123 : eq(51, 66) : BOOL
124 : eq(51, 69) : BOOL
125 : eq(51, 72) : BOOL
126 : ite(125, 74, 75) : BV:8
127 : ite(124, 71, 126) : BV:8
128 : ite(123, 68, 127) : BV:8
129 : ite(122, 65, 128) : BV:8
130 : ite(121, 63, 129) : BV:8
131 : ite(120, 60, 130) : BV:8
132 : ite(119, 57, 131) : BV:8
133 : ite(118, 54, 132) : BV:8
134 : bvconcat(83, 100, 117, 133) : BV:32
135 : bvadd(48, 50, 134) : BV:32
136 : eq(135, 48) : BOOL
137 : eq(135, 55) : BOOL
138 : eq(135, 58) : BOOL
139 : eq(135, 61) : BOOL
140 : eq(135, 3) : BOOL
141 : eq(135, 66) : BOOL
142 : eq(135, 69) : BOOL
143 : eq(135, 72) : BOOL
144 : ite(143, 74, 75) : BV:8
145 : ite(142, 71, 144) : BV:8
146 : ite(141, 68, 145) : BV:8
147 : ite(140, 65, 146) : BV:8
148 : ite(139, 63, 147) : BV:8
149 : ite(138, 60, 148) : BV:8
150 : ite(137, 57, 149) : BV:8
151 : ite(136, 54, 150) : BV:8
152 : bvadd(72, 50, 134) : BV:32
153 : eq(152, 48) : BOOL
154 : eq(152, 55) : BOOL
155 : eq(152, 58) : BOOL
156 : eq(152, 61) : BOOL
157 : eq(152, 3) : BOOL
158 : eq(152, 66) : BOOL
159 : eq(152, 69) : BOOL
160 : eq(152, 72) : BOOL
161 : ite(160, 74, 75) : BV:8
162 : ite(159, 71, 161) : BV:8
163 : ite(158, 68, 162) : BV:8
164 : ite(157, 65, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 60, 165) : BV:8
167 : ite(154, 57, 166) : BV:8
168 : ite(153, 54, 167) : BV:8
169 : bvadd(55, 50, 134) : BV:32
170 : eq(169, 48) : BOOL
171 : eq(169, 55) : BOOL
172 : eq(169, 58) : BOOL
173 : eq(169, 61) : BOOL
174 : eq(169, 3) : BOOL
175 : eq(169, 66) : BOOL
176 : eq(169, 69) : BOOL
177 : eq(169, 72) : BOOL
178 : ite(177, 74, 75) : BV:8
179 : ite(176, 71, 178) : BV:8
180 : ite(175, 68, 179) : BV:8
181 : ite(174, 65, 180) : BV:8
182 : ite(173, 63, 181) : BV:8
183 : ite(172, 60, 182) : BV:8
184 : ite(171, 57, 183) : BV:8
185 : ite(170, 54, 184) : BV:8
186 : bvadd(50, 134) : BV:32
187 : eq(186, 48) : BOOL
188 : eq(186, 55) : BOOL
189 : eq(186, 58) : BOOL
190 : eq(186, 61) : BOOL
191 : eq(186, 3) : BOOL
192 : eq(186, 66) : BOOL
193 : eq(186, 69) : BOOL
194 : eq(186, 72) : BOOL
195 : ite(194, 74, 75) : BV:8
196 : ite(193, 71, 195) : BV:8
197 : ite(192, 68, 196) : BV:8
198 : ite(191, 65, 197) : BV:8
199 : ite(190, 63, 198) : BV:8
200 : ite(189, 60, 199) : BV:8
201 : ite(188, 57, 200) : BV:8
202 : ite(187, 54, 201) : BV:8
203 : bvconcat(151, 168, 185, 202) : BV:32
204 : ite(6, 3, 203) : BV:32
205 : ite(47, 203, 204) : BV:32
206 : ite(6, 3, 205) : BV:32
207 : lambda(1, 2, 206) : FUNCTION[BV:32,BV:32 -> BV:32]
208 : sym_const(207) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda49287Var : BV:32
2 : Lambda49288Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870920 { 0x20000008 +1.95e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870921 { 0x20000009 +1.107e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870922 { 0x2000000a +1.119e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536872963 { 0x20000803 +1.24449e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870920 ] -> true, [ 536870921; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 536870920 ] -> true, [ 536870921; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda49296Var : BV:32
2 : Lambda49297Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870920 { 0x20000008 +1.95e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870921 { 0x20000009 +1.107e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870922 { 0x2000000a +1.119e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536872961 { 0x20000801 +1.24425e193 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536872962 { 0x20000802 +1.24437e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536872963 { 0x20000803 +1.24449e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda49292Var : BV:32
2 : Lambda49293Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 223 { 0xdf -33 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 102 { 0x66 } : BV:8
17 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
18 : eq(11, 17) : BOOL
19 : 36 { 0x24 } : BV:8
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : eq(11, 20) : BOOL
22 : 184 { 0xb8 -72 } : BV:8
23 : eq(11, 3) : BOOL
24 : 186 { 0xba -70 } : BV:8
25 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
26 : eq(11, 25) : BOOL
27 : 192 { 0xc0 -64 } : BV:8
28 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
29 : eq(11, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 191 { 0xbf -65 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(21, 22, 38) : BV:8
40 : ite(18, 19, 39) : BV:8
41 : ite(15, 16, 40) : BV:8
42 : ite(12, 13, 41) : BV:8
43 : bvadd(31, 10) : BV:32
44 : eq(43, 7) : BOOL
45 : eq(43, 14) : BOOL
46 : eq(43, 17) : BOOL
47 : eq(43, 20) : BOOL
48 : eq(43, 3) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 28) : BOOL
51 : eq(43, 31) : BOOL
52 : ite(51, 33, 34) : BV:8
53 : ite(50, 30, 52) : BV:8
54 : ite(49, 27, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 22, 55) : BV:8
57 : ite(46, 19, 56) : BV:8
58 : ite(45, 16, 57) : BV:8
59 : ite(44, 13, 58) : BV:8
60 : bvadd(14, 10) : BV:32
61 : eq(60, 7) : BOOL
62 : eq(60, 14) : BOOL
63 : eq(60, 17) : BOOL
64 : eq(60, 20) : BOOL
65 : eq(60, 3) : BOOL
66 : eq(60, 25) : BOOL
67 : eq(60, 28) : BOOL
68 : eq(60, 31) : BOOL
69 : ite(68, 33, 34) : BV:8
70 : ite(67, 30, 69) : BV:8
71 : ite(66, 27, 70) : BV:8
72 : ite(65, 24, 71) : BV:8
73 : ite(64, 22, 72) : BV:8
74 : ite(63, 19, 73) : BV:8
75 : ite(62, 16, 74) : BV:8
76 : ite(61, 13, 75) : BV:8
77 : eq(10, 7) : BOOL
78 : eq(10, 14) : BOOL
79 : eq(10, 17) : BOOL
80 : eq(10, 20) : BOOL
81 : eq(10, 3) : BOOL
82 : eq(10, 25) : BOOL
83 : eq(10, 28) : BOOL
84 : eq(10, 31) : BOOL
85 : ite(84, 33, 34) : BV:8
86 : ite(83, 30, 85) : BV:8
87 : ite(82, 27, 86) : BV:8
88 : ite(81, 24, 87) : BV:8
89 : ite(80, 22, 88) : BV:8
90 : ite(79, 19, 89) : BV:8
91 : ite(78, 16, 90) : BV:8
92 : ite(77, 13, 91) : BV:8
93 : bvconcat(42, 59, 76, 92) : BV:32
94 : bvadd(7, 9, 93) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 14) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 3) : BOOL
100 : eq(94, 25) : BOOL
101 : eq(94, 28) : BOOL
102 : eq(94, 31) : BOOL
103 : ite(102, 33, 34) : BV:8
104 : ite(101, 30, 103) : BV:8
105 : ite(100, 27, 104) : BV:8
106 : ite(99, 24, 105) : BV:8
107 : ite(98, 22, 106) : BV:8
108 : ite(97, 19, 107) : BV:8
109 : ite(96, 16, 108) : BV:8
110 : ite(95, 13, 109) : BV:8
111 : bvadd(31, 9, 93) : BV:32
112 : eq(111, 7) : BOOL
113 : eq(111, 14) : BOOL
114 : eq(111, 17) : BOOL
115 : eq(111, 20) : BOOL
116 : eq(111, 3) : BOOL
117 : eq(111, 25) : BOOL
118 : eq(111, 28) : BOOL
119 : eq(111, 31) : BOOL
120 : ite(119, 33, 34) : BV:8
121 : ite(118, 30, 120) : BV:8
122 : ite(117, 27, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 22, 123) : BV:8
125 : ite(114, 19, 124) : BV:8
126 : ite(113, 16, 125) : BV:8
127 : ite(112, 13, 126) : BV:8
128 : bvadd(14, 9, 93) : BV:32
129 : eq(128, 7) : BOOL
130 : eq(128, 14) : BOOL
131 : eq(128, 17) : BOOL
132 : eq(128, 20) : BOOL
133 : eq(128, 3) : BOOL
134 : eq(128, 25) : BOOL
135 : eq(128, 28) : BOOL
136 : eq(128, 31) : BOOL
137 : ite(136, 33, 34) : BV:8
138 : ite(135, 30, 137) : BV:8
139 : ite(134, 27, 138) : BV:8
140 : ite(133, 24, 139) : BV:8
141 : ite(132, 22, 140) : BV:8
142 : ite(131, 19, 141) : BV:8
143 : ite(130, 16, 142) : BV:8
144 : ite(129, 13, 143) : BV:8
145 : bvadd(9, 93) : BV:32
146 : eq(145, 7) : BOOL
147 : eq(145, 14) : BOOL
148 : eq(145, 17) : BOOL
149 : eq(145, 20) : BOOL
150 : eq(145, 3) : BOOL
151 : eq(145, 25) : BOOL
152 : eq(145, 28) : BOOL
153 : eq(145, 31) : BOOL
154 : ite(153, 33, 34) : BV:8
155 : ite(152, 30, 154) : BV:8
156 : ite(151, 27, 155) : BV:8
157 : ite(150, 24, 156) : BV:8
158 : ite(149, 22, 157) : BV:8
159 : ite(148, 19, 158) : BV:8
160 : ite(147, 16, 159) : BV:8
161 : ite(146, 13, 160) : BV:8
162 : bvconcat(110, 127, 144, 161) : BV:32
163 : ite(6, 3, 162) : BV:32
164 : lambda(1, 2, 163) : FUNCTION[BV:32,BV:32 -> BV:32]
165 : sym_const(164) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 536872961 ] -> true, [ 536872962; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda49303Var : BV:32
2 : 536870912 { 0x20000000 +1.0e193 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870920 { 0x20000008 +1.95e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : eq(12, 8) : BOOL
14 : 223 { 0xdf -33 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 102 { 0x66 } : BV:8
18 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
19 : eq(12, 18) : BOOL
20 : 36 { 0x24 } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 184 { 0xb8 -72 } : BV:8
24 : eq(12, 4) : BOOL
25 : 186 { 0xba -70 } : BV:8
26 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
27 : eq(12, 26) : BOOL
28 : 192 { 0xc0 -64 } : BV:8
29 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
30 : eq(12, 29) : BOOL
31 : 96 { 0x60 } : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : eq(12, 32) : BOOL
34 : 191 { 0xbf -65 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(13, 14, 42) : BV:8
44 : bvadd(32, 10, 11) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 4) : BOOL
50 : eq(44, 26) : BOOL
51 : eq(44, 29) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 31, 53) : BV:8
55 : ite(50, 28, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 17, 58) : BV:8
60 : ite(45, 14, 59) : BV:8
61 : bvadd(15, 10, 11) : BV:32
62 : eq(61, 8) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 18) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 4) : BOOL
67 : eq(61, 26) : BOOL
68 : eq(61, 29) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 31, 70) : BV:8
72 : ite(67, 28, 71) : BV:8
73 : ite(66, 25, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : bvadd(10, 11) : BV:32
79 : eq(78, 8) : BOOL
80 : eq(78, 15) : BOOL
81 : eq(78, 18) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 4) : BOOL
84 : eq(78, 26) : BOOL
85 : eq(78, 29) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 28, 88) : BV:8
90 : ite(83, 25, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 17, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : ite(7, 4, 95) : BV:32
97 : ite(6, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda49304Var : BV:32
2 : 536870912 { 0x20000000 +1.0e193 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870920 { 0x20000008 +1.95e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : eq(12, 8) : BOOL
14 : 223 { 0xdf -33 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 102 { 0x66 } : BV:8
18 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
19 : eq(12, 18) : BOOL
20 : 36 { 0x24 } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 184 { 0xb8 -72 } : BV:8
24 : eq(12, 4) : BOOL
25 : 186 { 0xba -70 } : BV:8
26 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
27 : eq(12, 26) : BOOL
28 : 192 { 0xc0 -64 } : BV:8
29 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
30 : eq(12, 29) : BOOL
31 : 96 { 0x60 } : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : eq(12, 32) : BOOL
34 : 191 { 0xbf -65 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(13, 14, 42) : BV:8
44 : bvadd(32, 10, 11) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 4) : BOOL
50 : eq(44, 26) : BOOL
51 : eq(44, 29) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 31, 53) : BV:8
55 : ite(50, 28, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 17, 58) : BV:8
60 : ite(45, 14, 59) : BV:8
61 : bvadd(15, 10, 11) : BV:32
62 : eq(61, 8) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 18) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 4) : BOOL
67 : eq(61, 26) : BOOL
68 : eq(61, 29) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 31, 70) : BV:8
72 : ite(67, 28, 71) : BV:8
73 : ite(66, 25, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : bvadd(10, 11) : BV:32
79 : eq(78, 8) : BOOL
80 : eq(78, 15) : BOOL
81 : eq(78, 18) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 4) : BOOL
84 : eq(78, 26) : BOOL
85 : eq(78, 29) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 28, 88) : BV:8
90 : ite(83, 25, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 17, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : ite(7, 4, 95) : BV:32
97 : ite(6, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 536872961 ] -> true, [ 536872962; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 536872961 ] -> true, [ 536872962; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda49311Var : BV:32
2 : 536870912 { 0x20000000 +1.0e193 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870920 { 0x20000008 +1.95e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3233308708 { 0xc0b86024 -1061658588 -1.44043397e2 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 223 { 0xdf -33 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 102 { 0x66 } : BV:8
17 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
18 : eq(11, 17) : BOOL
19 : 36 { 0x24 } : BV:8
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : eq(11, 20) : BOOL
22 : 184 { 0xb8 -72 } : BV:8
23 : eq(11, 4) : BOOL
24 : 186 { 0xba -70 } : BV:8
25 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
26 : eq(11, 25) : BOOL
27 : 192 { 0xc0 -64 } : BV:8
28 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
29 : eq(11, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 191 { 0xbf -65 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(21, 22, 38) : BV:8
40 : ite(18, 19, 39) : BV:8
41 : ite(15, 16, 40) : BV:8
42 : ite(12, 13, 41) : BV:8
43 : bvadd(31, 9, 10) : BV:32
44 : eq(43, 7) : BOOL
45 : eq(43, 14) : BOOL
46 : eq(43, 17) : BOOL
47 : eq(43, 20) : BOOL
48 : eq(43, 4) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 28) : BOOL
51 : eq(43, 31) : BOOL
52 : ite(51, 33, 34) : BV:8
53 : ite(50, 30, 52) : BV:8
54 : ite(49, 27, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 22, 55) : BV:8
57 : ite(46, 19, 56) : BV:8
58 : ite(45, 16, 57) : BV:8
59 : ite(44, 13, 58) : BV:8
60 : bvadd(14, 9, 10) : BV:32
61 : eq(60, 7) : BOOL
62 : eq(60, 14) : BOOL
63 : eq(60, 17) : BOOL
64 : eq(60, 20) : BOOL
65 : eq(60, 4) : BOOL
66 : eq(60, 25) : BOOL
67 : eq(60, 28) : BOOL
68 : eq(60, 31) : BOOL
69 : ite(68, 33, 34) : BV:8
70 : ite(67, 30, 69) : BV:8
71 : ite(66, 27, 70) : BV:8
72 : ite(65, 24, 71) : BV:8
73 : ite(64, 22, 72) : BV:8
74 : ite(63, 19, 73) : BV:8
75 : ite(62, 16, 74) : BV:8
76 : ite(61, 13, 75) : BV:8
77 : bvadd(9, 10) : BV:32
78 : eq(77, 7) : BOOL
79 : eq(77, 14) : BOOL
80 : eq(77, 17) : BOOL
81 : eq(77, 20) : BOOL
82 : eq(77, 4) : BOOL
83 : eq(77, 25) : BOOL
84 : eq(77, 28) : BOOL
85 : eq(77, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : ite(82, 24, 88) : BV:8
90 : ite(81, 22, 89) : BV:8
91 : ite(80, 19, 90) : BV:8
92 : ite(79, 16, 91) : BV:8
93 : ite(78, 13, 92) : BV:8
94 : bvconcat(42, 59, 76, 93) : BV:32
95 : ite(6, 4, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
1351403582
=counter_example_end
=global nodece 62 num_edges_traversed 2
=global nodece 62 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 63
=global nodece 63 nodece z3.ce4543.num_edges_traversed1
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3.ce4543 e4bf2bbbef289f90f3dcf4cce840f2ed
=input.spec-%var-x-1
1 : Lambda52602Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 687931393 { 0x29010001 +1.781261e211 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52603Var : BV:32
18 : Lambda52604Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 939590146 { 0x38010202 +1.787377e241 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda52605Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 207 { 0xcf -49 } : BV:8
83 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
84 : eq(80, 83) : BOOL
85 : 12 { 0xc } : BV:8
86 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
87 : eq(80, 86) : BOOL
88 : 194 { 0xc2 -62 } : BV:8
89 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
90 : eq(80, 89) : BOOL
91 : 101 { 0x65 } : BV:8
92 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
93 : eq(80, 92) : BOOL
94 : 255 { 0xff -1 } : BV:8
95 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
96 : eq(80, 95) : BOOL
97 : 149 { 0x95 -107 } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(93, 94, 99) : BV:8
101 : ite(90, 91, 100) : BV:8
102 : ite(87, 88, 101) : BV:8
103 : ite(84, 85, 102) : BV:8
104 : ite(81, 82, 103) : BV:8
105 : bvadd(92, 79) : BV:32
106 : eq(105, 78) : BOOL
107 : eq(105, 83) : BOOL
108 : eq(105, 86) : BOOL
109 : eq(105, 89) : BOOL
110 : eq(105, 92) : BOOL
111 : eq(105, 95) : BOOL
112 : ite(111, 97, 98) : BV:8
113 : ite(110, 94, 112) : BV:8
114 : ite(109, 91, 113) : BV:8
115 : ite(108, 88, 114) : BV:8
116 : ite(107, 85, 115) : BV:8
117 : ite(106, 82, 116) : BV:8
118 : bvadd(95, 79) : BV:32
119 : eq(118, 78) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 89) : BOOL
123 : eq(118, 92) : BOOL
124 : eq(118, 95) : BOOL
125 : ite(124, 97, 98) : BV:8
126 : ite(123, 94, 125) : BV:8
127 : ite(122, 91, 126) : BV:8
128 : ite(121, 88, 127) : BV:8
129 : ite(120, 85, 128) : BV:8
130 : ite(119, 82, 129) : BV:8
131 : bvadd(86, 79) : BV:32
132 : eq(131, 78) : BOOL
133 : eq(131, 83) : BOOL
134 : eq(131, 86) : BOOL
135 : eq(131, 89) : BOOL
136 : eq(131, 92) : BOOL
137 : eq(131, 95) : BOOL
138 : ite(137, 97, 98) : BV:8
139 : ite(136, 94, 138) : BV:8
140 : ite(135, 91, 139) : BV:8
141 : ite(134, 88, 140) : BV:8
142 : ite(133, 85, 141) : BV:8
143 : ite(132, 82, 142) : BV:8
144 : bvconcat(104, 117, 130, 143) : BV:32
145 : bvadd(75, 77, 144) : BV:32
146 : eq(145, 78) : BOOL
147 : eq(145, 83) : BOOL
148 : eq(145, 86) : BOOL
149 : eq(145, 89) : BOOL
150 : eq(145, 92) : BOOL
151 : eq(145, 95) : BOOL
152 : ite(151, 97, 98) : BV:8
153 : ite(150, 94, 152) : BV:8
154 : ite(149, 91, 153) : BV:8
155 : ite(148, 88, 154) : BV:8
156 : ite(147, 85, 155) : BV:8
157 : ite(146, 82, 156) : BV:8
158 : 2 { 0x2 +1.23e129 } : BV:32
159 : bvadd(158, 77, 144) : BV:32
160 : eq(159, 78) : BOOL
161 : eq(159, 83) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : eq(159, 95) : BOOL
166 : ite(165, 97, 98) : BV:8
167 : ite(164, 94, 166) : BV:8
168 : ite(163, 91, 167) : BV:8
169 : ite(162, 88, 168) : BV:8
170 : ite(161, 85, 169) : BV:8
171 : ite(160, 82, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 77, 144) : BV:32
174 : eq(173, 78) : BOOL
175 : eq(173, 83) : BOOL
176 : eq(173, 86) : BOOL
177 : eq(173, 89) : BOOL
178 : eq(173, 92) : BOOL
179 : eq(173, 95) : BOOL
180 : ite(179, 97, 98) : BV:8
181 : ite(178, 94, 180) : BV:8
182 : ite(177, 91, 181) : BV:8
183 : ite(176, 88, 182) : BV:8
184 : ite(175, 85, 183) : BV:8
185 : ite(174, 82, 184) : BV:8
186 : bvadd(77, 144) : BV:32
187 : eq(186, 78) : BOOL
188 : eq(186, 83) : BOOL
189 : eq(186, 86) : BOOL
190 : eq(186, 89) : BOOL
191 : eq(186, 92) : BOOL
192 : eq(186, 95) : BOOL
193 : ite(192, 97, 98) : BV:8
194 : ite(191, 94, 193) : BV:8
195 : ite(190, 91, 194) : BV:8
196 : ite(189, 88, 195) : BV:8
197 : ite(188, 85, 196) : BV:8
198 : ite(187, 82, 197) : BV:8
199 : bvconcat(157, 171, 185, 198) : BV:32
200 : ite(55, 2, 199) : BV:32
201 : ite(74, 199, 200) : BV:32
202 : ite(55, 2, 201) : BV:32
203 : lambda(52, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(51, 203) : MAP[BV:32 -> BV:32]
205 : lambda(17, 204) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
206 : map(16, 205) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
207 : sym_const(206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1476919296 { 0x58080000 +1.6250000e49 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda52622Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 687931393 { 0x29010001 +1.781261e211 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52623Var : BV:32
18 : Lambda52624Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 939590146 { 0x38010202 +1.787377e241 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda52625Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 207 { 0xcf -49 } : BV:8
64 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
65 : eq(61, 64) : BOOL
66 : 12 { 0xc } : BV:8
67 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
68 : eq(61, 67) : BOOL
69 : 194 { 0xc2 -62 } : BV:8
70 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
71 : eq(61, 70) : BOOL
72 : 101 { 0x65 } : BV:8
73 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
74 : eq(61, 73) : BOOL
75 : 255 { 0xff -1 } : BV:8
76 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
77 : eq(61, 76) : BOOL
78 : 149 { 0x95 -107 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : bvadd(73, 60) : BV:32
87 : eq(86, 59) : BOOL
88 : eq(86, 64) : BOOL
89 : eq(86, 67) : BOOL
90 : eq(86, 70) : BOOL
91 : eq(86, 73) : BOOL
92 : eq(86, 76) : BOOL
93 : ite(92, 78, 79) : BV:8
94 : ite(91, 75, 93) : BV:8
95 : ite(90, 72, 94) : BV:8
96 : ite(89, 69, 95) : BV:8
97 : ite(88, 66, 96) : BV:8
98 : ite(87, 63, 97) : BV:8
99 : bvadd(76, 60) : BV:32
100 : eq(99, 59) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 67) : BOOL
103 : eq(99, 70) : BOOL
104 : eq(99, 73) : BOOL
105 : eq(99, 76) : BOOL
106 : ite(105, 78, 79) : BV:8
107 : ite(104, 75, 106) : BV:8
108 : ite(103, 72, 107) : BV:8
109 : ite(102, 69, 108) : BV:8
110 : ite(101, 66, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : bvadd(67, 60) : BV:32
113 : eq(112, 59) : BOOL
114 : eq(112, 64) : BOOL
115 : eq(112, 67) : BOOL
116 : eq(112, 70) : BOOL
117 : eq(112, 73) : BOOL
118 : eq(112, 76) : BOOL
119 : ite(118, 78, 79) : BV:8
120 : ite(117, 75, 119) : BV:8
121 : ite(116, 72, 120) : BV:8
122 : ite(115, 69, 121) : BV:8
123 : ite(114, 66, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : bvconcat(85, 98, 111, 124) : BV:32
126 : bvadd(56, 58, 125) : BV:32
127 : eq(126, 59) : BOOL
128 : eq(126, 64) : BOOL
129 : eq(126, 67) : BOOL
130 : eq(126, 70) : BOOL
131 : eq(126, 73) : BOOL
132 : eq(126, 76) : BOOL
133 : ite(132, 78, 79) : BV:8
134 : ite(131, 75, 133) : BV:8
135 : ite(130, 72, 134) : BV:8
136 : ite(129, 69, 135) : BV:8
137 : ite(128, 66, 136) : BV:8
138 : ite(127, 63, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 58, 125) : BV:32
141 : eq(140, 59) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : eq(140, 76) : BOOL
147 : ite(146, 78, 79) : BV:8
148 : ite(145, 75, 147) : BV:8
149 : ite(144, 72, 148) : BV:8
150 : ite(143, 69, 149) : BV:8
151 : ite(142, 66, 150) : BV:8
152 : ite(141, 63, 151) : BV:8
153 : 1 { 0x1 +1.11e129 } : BV:32
154 : bvadd(153, 58, 125) : BV:32
155 : eq(154, 59) : BOOL
156 : eq(154, 64) : BOOL
157 : eq(154, 67) : BOOL
158 : eq(154, 70) : BOOL
159 : eq(154, 73) : BOOL
160 : eq(154, 76) : BOOL
161 : ite(160, 78, 79) : BV:8
162 : ite(159, 75, 161) : BV:8
163 : ite(158, 72, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 66, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : bvadd(58, 125) : BV:32
168 : eq(167, 59) : BOOL
169 : eq(167, 64) : BOOL
170 : eq(167, 67) : BOOL
171 : eq(167, 70) : BOOL
172 : eq(167, 73) : BOOL
173 : eq(167, 76) : BOOL
174 : ite(173, 78, 79) : BV:8
175 : ite(172, 75, 174) : BV:8
176 : ite(171, 72, 175) : BV:8
177 : ite(170, 69, 176) : BV:8
178 : ite(169, 66, 177) : BV:8
179 : ite(168, 63, 178) : BV:8
180 : bvconcat(138, 152, 166, 179) : BV:32
181 : ite(55, 2, 180) : BV:32
182 : lambda(52, 181) : FUNCTION[BV:32 -> BV:32]
183 : map(51, 182) : MAP[BV:32 -> BV:32]
184 : lambda(17, 183) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
185 : map(16, 184) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
186 : sym_const(185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1476919297 ] -> 0, [ 1476919298; 1476919298 ] -> 12, [ 1476919299; 1476919299 ] -> 101, [ 1476919300; 3087532035 ] -> 0, [ 3087532036; 3087532036 ] -> 194, [ 3087532037; 3087532037 ] -> 149, [ 3087532038; 3087532038 ] -> 255, [ 3087532039; 3087532039 ] -> 207, [ 3087532040; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 586797247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 586797248; 586797251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 586797252; 3574094339 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3574094340; 3574094343 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3574094344; 4077912067 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4077912068; 4077912071 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4077912072; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3574094340 { 0xd5085a04 -720872956 -1.6524705e43 } : BV:32
=input.dst.llvm-%m
1 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4077912068 { 0xf3100004 -217055228 -1.12500047e103 } : BV:32
=input.dst.llvm-%n
1 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 586797248 { 0x22f9d0c0 +1.95168304e198 } : BV:32
=input.dst.llvm-%x
1 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 671088639 { 0x27ffffff +1.99999988e208 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 696347132 { 0x298169fc +1.1104688e212 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda52629Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52630Var : BV:32
18 : 671088640 { 0x28000000 +1.0e209 } : BV:32
19 : eq(17, 18) : BOOL
20 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
28 : eq(26, 27) : BOOL
29 : 207 { 0xcf -49 } : BV:8
30 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
31 : eq(26, 30) : BOOL
32 : 12 { 0xc } : BV:8
33 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
34 : eq(26, 33) : BOOL
35 : 194 { 0xc2 -62 } : BV:8
36 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
37 : eq(26, 36) : BOOL
38 : 101 { 0x65 } : BV:8
39 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
40 : eq(26, 39) : BOOL
41 : 255 { 0xff -1 } : BV:8
42 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
43 : eq(26, 42) : BOOL
44 : 149 { 0x95 -107 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 24, 25) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : eq(53, 33) : BOOL
57 : eq(53, 36) : BOOL
58 : eq(53, 39) : BOOL
59 : eq(53, 42) : BOOL
60 : ite(59, 44, 45) : BV:8
61 : ite(58, 41, 60) : BV:8
62 : ite(57, 38, 61) : BV:8
63 : ite(56, 35, 62) : BV:8
64 : ite(55, 32, 63) : BV:8
65 : ite(54, 29, 64) : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : bvadd(66, 24, 25) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : eq(67, 33) : BOOL
71 : eq(67, 36) : BOOL
72 : eq(67, 39) : BOOL
73 : eq(67, 42) : BOOL
74 : ite(73, 44, 45) : BV:8
75 : ite(72, 41, 74) : BV:8
76 : ite(71, 38, 75) : BV:8
77 : ite(70, 35, 76) : BV:8
78 : ite(69, 32, 77) : BV:8
79 : ite(68, 29, 78) : BV:8
80 : bvadd(24, 25) : BV:32
81 : eq(80, 27) : BOOL
82 : eq(80, 30) : BOOL
83 : eq(80, 33) : BOOL
84 : eq(80, 36) : BOOL
85 : eq(80, 39) : BOOL
86 : eq(80, 42) : BOOL
87 : ite(86, 44, 45) : BV:8
88 : ite(85, 41, 87) : BV:8
89 : ite(84, 38, 88) : BV:8
90 : ite(83, 35, 89) : BV:8
91 : ite(82, 32, 90) : BV:8
92 : ite(81, 29, 91) : BV:8
93 : bvconcat(51, 65, 79, 92) : BV:32
94 : ite(21, 2, 93) : BV:32
95 : ite(19, 2, 94) : BV:32
96 : lambda(17, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(16, 96) : MAP[BV:32 -> BV:32]
98 : sym_const(97) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 671088640 { 0x28000000 +1.0e209 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
2 : unit : UNIT
3 : Lambda52611Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda52612Var : BV:32
20 : 671088640 { 0x28000000 +1.0e209 } : BV:32
21 : eq(19, 20) : BOOL
22 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
31 : eq(29, 30) : BOOL
32 : 207 { 0xcf -49 } : BV:8
33 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
34 : eq(29, 33) : BOOL
35 : 12 { 0xc } : BV:8
36 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
37 : eq(29, 36) : BOOL
38 : 194 { 0xc2 -62 } : BV:8
39 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
40 : eq(29, 39) : BOOL
41 : 101 { 0x65 } : BV:8
42 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
43 : eq(29, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
46 : eq(29, 45) : BOOL
47 : 149 { 0x95 -107 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 27, 28) : BV:32
57 : eq(56, 30) : BOOL
58 : eq(56, 33) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 39) : BOOL
61 : eq(56, 42) : BOOL
62 : eq(56, 45) : BOOL
63 : ite(62, 47, 48) : BV:8
64 : ite(61, 44, 63) : BV:8
65 : ite(60, 41, 64) : BV:8
66 : ite(59, 38, 65) : BV:8
67 : ite(58, 35, 66) : BV:8
68 : ite(57, 32, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 27, 28) : BV:32
71 : eq(70, 30) : BOOL
72 : eq(70, 33) : BOOL
73 : eq(70, 36) : BOOL
74 : eq(70, 39) : BOOL
75 : eq(70, 42) : BOOL
76 : eq(70, 45) : BOOL
77 : ite(76, 47, 48) : BV:8
78 : ite(75, 44, 77) : BV:8
79 : ite(74, 41, 78) : BV:8
80 : ite(73, 38, 79) : BV:8
81 : ite(72, 35, 80) : BV:8
82 : ite(71, 32, 81) : BV:8
83 : bvadd(27, 28) : BV:32
84 : eq(83, 30) : BOOL
85 : eq(83, 33) : BOOL
86 : eq(83, 36) : BOOL
87 : eq(83, 39) : BOOL
88 : eq(83, 42) : BOOL
89 : eq(83, 45) : BOOL
90 : ite(89, 47, 48) : BV:8
91 : ite(88, 44, 90) : BV:8
92 : ite(87, 41, 91) : BV:8
93 : ite(86, 38, 92) : BV:8
94 : ite(85, 35, 93) : BV:8
95 : ite(84, 32, 94) : BV:8
96 : bvconcat(54, 68, 82, 95) : BV:32
97 : ite(24, 4, 96) : BV:32
98 : ite(23, 4, 97) : BV:32
99 : ite(21, 4, 98) : BV:32
100 : lambda(19, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(18, 100) : MAP[BV:32 -> BV:32]
102 : sum(1, 2, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : 671088640 { 0x28000000 +1.0e209 } : BV:32
20 : eq(2, 19) : BOOL
21 : eq(2, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 2) : BV:32
25 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
28 : eq(26, 27) : BOOL
29 : 207 { 0xcf -49 } : BV:8
30 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
31 : eq(26, 30) : BOOL
32 : 12 { 0xc } : BV:8
33 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
34 : eq(26, 33) : BOOL
35 : 194 { 0xc2 -62 } : BV:8
36 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
37 : eq(26, 36) : BOOL
38 : 101 { 0x65 } : BV:8
39 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
40 : eq(26, 39) : BOOL
41 : 255 { 0xff -1 } : BV:8
42 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
43 : eq(26, 42) : BOOL
44 : 149 { 0x95 -107 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 24, 25) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : eq(53, 33) : BOOL
57 : eq(53, 36) : BOOL
58 : eq(53, 39) : BOOL
59 : eq(53, 42) : BOOL
60 : ite(59, 44, 45) : BV:8
61 : ite(58, 41, 60) : BV:8
62 : ite(57, 38, 61) : BV:8
63 : ite(56, 35, 62) : BV:8
64 : ite(55, 32, 63) : BV:8
65 : ite(54, 29, 64) : BV:8
66 : bvadd(16, 24, 25) : BV:32
67 : eq(66, 27) : BOOL
68 : eq(66, 30) : BOOL
69 : eq(66, 33) : BOOL
70 : eq(66, 36) : BOOL
71 : eq(66, 39) : BOOL
72 : eq(66, 42) : BOOL
73 : ite(72, 44, 45) : BV:8
74 : ite(71, 41, 73) : BV:8
75 : ite(70, 38, 74) : BV:8
76 : ite(69, 35, 75) : BV:8
77 : ite(68, 32, 76) : BV:8
78 : ite(67, 29, 77) : BV:8
79 : bvadd(24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : ite(85, 44, 45) : BV:8
87 : ite(84, 41, 86) : BV:8
88 : ite(83, 38, 87) : BV:8
89 : ite(82, 35, 88) : BV:8
90 : ite(81, 32, 89) : BV:8
91 : ite(80, 29, 90) : BV:8
92 : bvconcat(51, 65, 78, 91) : BV:32
93 : ite(21, 1, 92) : BV:32
94 : ite(20, 1, 93) : BV:32
95 : sum(17, 18, 94) : SUM[UNIT,BV:32]
96 : sym_const(95) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1494445479 { 0x59136da7 +1.15178382e51 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda52634Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52635Var : BV:32
18 : 671088640 { 0x28000000 +1.0e209 } : BV:32
19 : eq(17, 18) : BOOL
20 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
29 : eq(27, 28) : BOOL
30 : 207 { 0xcf -49 } : BV:8
31 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
32 : eq(27, 31) : BOOL
33 : 12 { 0xc } : BV:8
34 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
35 : eq(27, 34) : BOOL
36 : 194 { 0xc2 -62 } : BV:8
37 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
38 : eq(27, 37) : BOOL
39 : 101 { 0x65 } : BV:8
40 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
41 : eq(27, 40) : BOOL
42 : 255 { 0xff -1 } : BV:8
43 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
44 : eq(27, 43) : BOOL
45 : 149 { 0x95 -107 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 25, 26) : BV:32
55 : eq(54, 28) : BOOL
56 : eq(54, 31) : BOOL
57 : eq(54, 34) : BOOL
58 : eq(54, 37) : BOOL
59 : eq(54, 40) : BOOL
60 : eq(54, 43) : BOOL
61 : ite(60, 45, 46) : BV:8
62 : ite(59, 42, 61) : BV:8
63 : ite(58, 39, 62) : BV:8
64 : ite(57, 36, 63) : BV:8
65 : ite(56, 33, 64) : BV:8
66 : ite(55, 30, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 25, 26) : BV:32
69 : eq(68, 28) : BOOL
70 : eq(68, 31) : BOOL
71 : eq(68, 34) : BOOL
72 : eq(68, 37) : BOOL
73 : eq(68, 40) : BOOL
74 : eq(68, 43) : BOOL
75 : ite(74, 45, 46) : BV:8
76 : ite(73, 42, 75) : BV:8
77 : ite(72, 39, 76) : BV:8
78 : ite(71, 36, 77) : BV:8
79 : ite(70, 33, 78) : BV:8
80 : ite(69, 30, 79) : BV:8
81 : bvadd(25, 26) : BV:32
82 : eq(81, 28) : BOOL
83 : eq(81, 31) : BOOL
84 : eq(81, 34) : BOOL
85 : eq(81, 37) : BOOL
86 : eq(81, 40) : BOOL
87 : eq(81, 43) : BOOL
88 : ite(87, 45, 46) : BV:8
89 : ite(86, 42, 88) : BV:8
90 : ite(85, 39, 89) : BV:8
91 : ite(84, 36, 90) : BV:8
92 : ite(83, 33, 91) : BV:8
93 : ite(82, 30, 92) : BV:8
94 : bvconcat(52, 66, 80, 93) : BV:32
95 : ite(22, 2, 94) : BV:32
96 : ite(21, 2, 95) : BV:32
97 : ite(19, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 671088639 { 0x27ffffff +1.99999988e208 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1449319478 { 0x5662dc36 +1.77234530e45 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 2751725576 { 0xa4040008 -1543241720 -1.3125095e201 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 152043528 { 0x9100008 +1.12500095e147 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 2751725576 { 0xa4040008 -1543241720 -1.3125095e201 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 1476919296 { 0x58080000 +1.6250000e49 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 152043528 { 0x9100008 +1.12500095e147 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4077912068 { 0xf3100004 -217055228 -1.12500047e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4077912071 { 0xf3100007 -217055225 -1.12500083e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 586797248 { 0x22f9d0c0 +1.95168304e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 586797251 { 0x22f9d0c3 +1.95168340e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3574094340 { 0xd5085a04 -720872956 -1.6524705e43 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3574094343 { 0xd5085a07 -720872953 -1.6524741e43 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda52494Var : BV:32
2 : Lambda52495Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 687931393 { 0x29010001 +1.781261e211 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 939590146 { 0x38010202 +1.787377e241 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 207 { 0xcf -49 } : BV:8
56 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
57 : eq(53, 56) : BOOL
58 : 12 { 0xc } : BV:8
59 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
60 : eq(53, 59) : BOOL
61 : 194 { 0xc2 -62 } : BV:8
62 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
63 : eq(53, 62) : BOOL
64 : 101 { 0x65 } : BV:8
65 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
66 : eq(53, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
69 : eq(53, 68) : BOOL
70 : 149 { 0x95 -107 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(57, 58, 75) : BV:8
77 : ite(54, 55, 76) : BV:8
78 : bvadd(65, 52) : BV:32
79 : eq(78, 51) : BOOL
80 : eq(78, 56) : BOOL
81 : eq(78, 59) : BOOL
82 : eq(78, 62) : BOOL
83 : eq(78, 65) : BOOL
84 : eq(78, 68) : BOOL
85 : ite(84, 70, 71) : BV:8
86 : ite(83, 67, 85) : BV:8
87 : ite(82, 64, 86) : BV:8
88 : ite(81, 61, 87) : BV:8
89 : ite(80, 58, 88) : BV:8
90 : ite(79, 55, 89) : BV:8
91 : bvadd(68, 52) : BV:32
92 : eq(91, 51) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 62) : BOOL
96 : eq(91, 65) : BOOL
97 : eq(91, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : ite(93, 58, 101) : BV:8
103 : ite(92, 55, 102) : BV:8
104 : bvadd(59, 52) : BV:32
105 : eq(104, 51) : BOOL
106 : eq(104, 56) : BOOL
107 : eq(104, 59) : BOOL
108 : eq(104, 62) : BOOL
109 : eq(104, 65) : BOOL
110 : eq(104, 68) : BOOL
111 : ite(110, 70, 71) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 64, 112) : BV:8
114 : ite(107, 61, 113) : BV:8
115 : ite(106, 58, 114) : BV:8
116 : ite(105, 55, 115) : BV:8
117 : bvconcat(77, 90, 103, 116) : BV:32
118 : bvadd(48, 50, 117) : BV:32
119 : eq(118, 51) : BOOL
120 : eq(118, 56) : BOOL
121 : eq(118, 59) : BOOL
122 : eq(118, 62) : BOOL
123 : eq(118, 65) : BOOL
124 : eq(118, 68) : BOOL
125 : ite(124, 70, 71) : BV:8
126 : ite(123, 67, 125) : BV:8
127 : ite(122, 64, 126) : BV:8
128 : ite(121, 61, 127) : BV:8
129 : ite(120, 58, 128) : BV:8
130 : ite(119, 55, 129) : BV:8
131 : 2 { 0x2 +1.23e129 } : BV:32
132 : bvadd(131, 50, 117) : BV:32
133 : eq(132, 51) : BOOL
134 : eq(132, 56) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : eq(132, 68) : BOOL
139 : ite(138, 70, 71) : BV:8
140 : ite(137, 67, 139) : BV:8
141 : ite(136, 64, 140) : BV:8
142 : ite(135, 61, 141) : BV:8
143 : ite(134, 58, 142) : BV:8
144 : ite(133, 55, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 50, 117) : BV:32
147 : eq(146, 51) : BOOL
148 : eq(146, 56) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 62) : BOOL
151 : eq(146, 65) : BOOL
152 : eq(146, 68) : BOOL
153 : ite(152, 70, 71) : BV:8
154 : ite(151, 67, 153) : BV:8
155 : ite(150, 64, 154) : BV:8
156 : ite(149, 61, 155) : BV:8
157 : ite(148, 58, 156) : BV:8
158 : ite(147, 55, 157) : BV:8
159 : bvadd(50, 117) : BV:32
160 : eq(159, 51) : BOOL
161 : eq(159, 56) : BOOL
162 : eq(159, 59) : BOOL
163 : eq(159, 62) : BOOL
164 : eq(159, 65) : BOOL
165 : eq(159, 68) : BOOL
166 : ite(165, 70, 71) : BV:8
167 : ite(164, 67, 166) : BV:8
168 : ite(163, 64, 167) : BV:8
169 : ite(162, 61, 168) : BV:8
170 : ite(161, 58, 169) : BV:8
171 : ite(160, 55, 170) : BV:8
172 : bvconcat(130, 144, 158, 171) : BV:32
173 : ite(6, 3, 172) : BV:32
174 : ite(47, 172, 173) : BV:32
175 : ite(6, 3, 174) : BV:32
176 : lambda(1, 2, 175) : FUNCTION[BV:32,BV:32 -> BV:32]
177 : sym_const(176) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda52499Var : BV:32
2 : Lambda52500Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 687931393 { 0x29010001 +1.781261e211 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 939590146 { 0x38010202 +1.787377e241 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 687931393 ] -> true, [ 687931394; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 687931393 ] -> true, [ 687931394; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda52508Var : BV:32
2 : Lambda52509Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 687931393 { 0x29010001 +1.781261e211 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 939590146 { 0x38010202 +1.787377e241 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda52504Var : BV:32
2 : Lambda52505Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 207 { 0xcf -49 } : BV:8
15 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
16 : eq(12, 15) : BOOL
17 : 12 { 0xc } : BV:8
18 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
19 : eq(12, 18) : BOOL
20 : 194 { 0xc2 -62 } : BV:8
21 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
22 : eq(12, 21) : BOOL
23 : 101 { 0x65 } : BV:8
24 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
25 : eq(12, 24) : BOOL
26 : 255 { 0xff -1 } : BV:8
27 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
28 : eq(12, 27) : BOOL
29 : 149 { 0x95 -107 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : bvadd(24, 11) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 15) : BOOL
40 : eq(37, 18) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 17, 47) : BV:8
49 : ite(38, 14, 48) : BV:8
50 : bvadd(27, 11) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 15) : BOOL
53 : eq(50, 18) : BOOL
54 : eq(50, 21) : BOOL
55 : eq(50, 24) : BOOL
56 : eq(50, 27) : BOOL
57 : ite(56, 29, 30) : BV:8
58 : ite(55, 26, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 20, 59) : BV:8
61 : ite(52, 17, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : bvadd(18, 11) : BV:32
64 : eq(63, 10) : BOOL
65 : eq(63, 15) : BOOL
66 : eq(63, 18) : BOOL
67 : eq(63, 21) : BOOL
68 : eq(63, 24) : BOOL
69 : eq(63, 27) : BOOL
70 : ite(69, 29, 30) : BV:8
71 : ite(68, 26, 70) : BV:8
72 : ite(67, 23, 71) : BV:8
73 : ite(66, 20, 72) : BV:8
74 : ite(65, 17, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : bvconcat(36, 49, 62, 75) : BV:32
77 : bvadd(7, 9, 76) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 15) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 24) : BOOL
83 : eq(77, 27) : BOOL
84 : ite(83, 29, 30) : BV:8
85 : ite(82, 26, 84) : BV:8
86 : ite(81, 23, 85) : BV:8
87 : ite(80, 20, 86) : BV:8
88 : ite(79, 17, 87) : BV:8
89 : ite(78, 14, 88) : BV:8
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : bvadd(90, 9, 76) : BV:32
92 : eq(91, 10) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : eq(91, 27) : BOOL
98 : ite(97, 29, 30) : BV:8
99 : ite(96, 26, 98) : BV:8
100 : ite(95, 23, 99) : BV:8
101 : ite(94, 20, 100) : BV:8
102 : ite(93, 17, 101) : BV:8
103 : ite(92, 14, 102) : BV:8
104 : 1 { 0x1 +1.11e129 } : BV:32
105 : bvadd(104, 9, 76) : BV:32
106 : eq(105, 10) : BOOL
107 : eq(105, 15) : BOOL
108 : eq(105, 18) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : eq(105, 27) : BOOL
112 : ite(111, 29, 30) : BV:8
113 : ite(110, 26, 112) : BV:8
114 : ite(109, 23, 113) : BV:8
115 : ite(108, 20, 114) : BV:8
116 : ite(107, 17, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : bvadd(9, 76) : BV:32
119 : eq(118, 10) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 18) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : ite(124, 29, 30) : BV:8
126 : ite(123, 26, 125) : BV:8
127 : ite(122, 23, 126) : BV:8
128 : ite(121, 20, 127) : BV:8
129 : ite(120, 17, 128) : BV:8
130 : ite(119, 14, 129) : BV:8
131 : bvconcat(89, 103, 117, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : lambda(1, 2, 132) : FUNCTION[BV:32,BV:32 -> BV:32]
134 : sym_const(133) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 939590144 ] -> true, [ 939590145; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda52515Var : BV:32
2 : 671088640 { 0x28000000 +1.0e209 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
14 : eq(12, 13) : BOOL
15 : 207 { 0xcf -49 } : BV:8
16 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
17 : eq(12, 16) : BOOL
18 : 12 { 0xc } : BV:8
19 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
20 : eq(12, 19) : BOOL
21 : 194 { 0xc2 -62 } : BV:8
22 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
23 : eq(12, 22) : BOOL
24 : 101 { 0x65 } : BV:8
25 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
26 : eq(12, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
29 : eq(12, 28) : BOOL
30 : 149 { 0x95 -107 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 10, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 10, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(10, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : ite(7, 4, 79) : BV:32
81 : ite(6, 4, 80) : BV:32
82 : ite(3, 4, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda52516Var : BV:32
2 : 671088640 { 0x28000000 +1.0e209 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
14 : eq(12, 13) : BOOL
15 : 207 { 0xcf -49 } : BV:8
16 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
17 : eq(12, 16) : BOOL
18 : 12 { 0xc } : BV:8
19 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
20 : eq(12, 19) : BOOL
21 : 194 { 0xc2 -62 } : BV:8
22 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
23 : eq(12, 22) : BOOL
24 : 101 { 0x65 } : BV:8
25 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
26 : eq(12, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
29 : eq(12, 28) : BOOL
30 : 149 { 0x95 -107 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 10, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 10, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(10, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : ite(7, 4, 79) : BV:32
81 : ite(6, 4, 80) : BV:32
82 : ite(3, 4, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 939590144 ] -> true, [ 939590145; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 939590144 ] -> true, [ 939590145; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda52523Var : BV:32
2 : 671088640 { 0x28000000 +1.0e209 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
13 : eq(11, 12) : BOOL
14 : 207 { 0xcf -49 } : BV:8
15 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
16 : eq(11, 15) : BOOL
17 : 12 { 0xc } : BV:8
18 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
19 : eq(11, 18) : BOOL
20 : 194 { 0xc2 -62 } : BV:8
21 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
22 : eq(11, 21) : BOOL
23 : 101 { 0x65 } : BV:8
24 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
25 : eq(11, 24) : BOOL
26 : 255 { 0xff -1 } : BV:8
27 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
28 : eq(11, 27) : BOOL
29 : 149 { 0x95 -107 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 15) : BOOL
41 : eq(38, 18) : BOOL
42 : eq(38, 21) : BOOL
43 : eq(38, 24) : BOOL
44 : eq(38, 27) : BOOL
45 : ite(44, 29, 30) : BV:8
46 : ite(43, 26, 45) : BV:8
47 : ite(42, 23, 46) : BV:8
48 : ite(41, 20, 47) : BV:8
49 : ite(40, 17, 48) : BV:8
50 : ite(39, 14, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 9, 10) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : eq(52, 18) : BOOL
56 : eq(52, 21) : BOOL
57 : eq(52, 24) : BOOL
58 : eq(52, 27) : BOOL
59 : ite(58, 29, 30) : BV:8
60 : ite(57, 26, 59) : BV:8
61 : ite(56, 23, 60) : BV:8
62 : ite(55, 20, 61) : BV:8
63 : ite(54, 17, 62) : BV:8
64 : ite(53, 14, 63) : BV:8
65 : bvadd(9, 10) : BV:32
66 : eq(65, 12) : BOOL
67 : eq(65, 15) : BOOL
68 : eq(65, 18) : BOOL
69 : eq(65, 21) : BOOL
70 : eq(65, 24) : BOOL
71 : eq(65, 27) : BOOL
72 : ite(71, 29, 30) : BV:8
73 : ite(70, 26, 72) : BV:8
74 : ite(69, 23, 73) : BV:8
75 : ite(68, 20, 74) : BV:8
76 : ite(67, 17, 75) : BV:8
77 : ite(66, 14, 76) : BV:8
78 : bvconcat(36, 50, 64, 77) : BV:32
79 : ite(6, 4, 78) : BV:32
80 : ite(3, 4, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
3528612801
=counter_example_end
=global nodece 63 num_edges_traversed 1
=global nodece 63 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 64
=global nodece 64 nodece z3.ce4585.num_edges_traversed2
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(epsilon)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3.ce4585 7b629f9e65ebaf8d9cdd2f45fa5c568a
=input.spec-%var-x-1
1 : Lambda52602Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 687931393 { 0x29010001 +1.781261e211 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52603Var : BV:32
18 : Lambda52604Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 939590146 { 0x38010202 +1.787377e241 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda52605Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 207 { 0xcf -49 } : BV:8
83 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
84 : eq(80, 83) : BOOL
85 : 12 { 0xc } : BV:8
86 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
87 : eq(80, 86) : BOOL
88 : 194 { 0xc2 -62 } : BV:8
89 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
90 : eq(80, 89) : BOOL
91 : 101 { 0x65 } : BV:8
92 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
93 : eq(80, 92) : BOOL
94 : 255 { 0xff -1 } : BV:8
95 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
96 : eq(80, 95) : BOOL
97 : 149 { 0x95 -107 } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(93, 94, 99) : BV:8
101 : ite(90, 91, 100) : BV:8
102 : ite(87, 88, 101) : BV:8
103 : ite(84, 85, 102) : BV:8
104 : ite(81, 82, 103) : BV:8
105 : bvadd(92, 79) : BV:32
106 : eq(105, 78) : BOOL
107 : eq(105, 83) : BOOL
108 : eq(105, 86) : BOOL
109 : eq(105, 89) : BOOL
110 : eq(105, 92) : BOOL
111 : eq(105, 95) : BOOL
112 : ite(111, 97, 98) : BV:8
113 : ite(110, 94, 112) : BV:8
114 : ite(109, 91, 113) : BV:8
115 : ite(108, 88, 114) : BV:8
116 : ite(107, 85, 115) : BV:8
117 : ite(106, 82, 116) : BV:8
118 : bvadd(95, 79) : BV:32
119 : eq(118, 78) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 89) : BOOL
123 : eq(118, 92) : BOOL
124 : eq(118, 95) : BOOL
125 : ite(124, 97, 98) : BV:8
126 : ite(123, 94, 125) : BV:8
127 : ite(122, 91, 126) : BV:8
128 : ite(121, 88, 127) : BV:8
129 : ite(120, 85, 128) : BV:8
130 : ite(119, 82, 129) : BV:8
131 : bvadd(86, 79) : BV:32
132 : eq(131, 78) : BOOL
133 : eq(131, 83) : BOOL
134 : eq(131, 86) : BOOL
135 : eq(131, 89) : BOOL
136 : eq(131, 92) : BOOL
137 : eq(131, 95) : BOOL
138 : ite(137, 97, 98) : BV:8
139 : ite(136, 94, 138) : BV:8
140 : ite(135, 91, 139) : BV:8
141 : ite(134, 88, 140) : BV:8
142 : ite(133, 85, 141) : BV:8
143 : ite(132, 82, 142) : BV:8
144 : bvconcat(104, 117, 130, 143) : BV:32
145 : bvadd(75, 77, 144) : BV:32
146 : eq(145, 78) : BOOL
147 : eq(145, 83) : BOOL
148 : eq(145, 86) : BOOL
149 : eq(145, 89) : BOOL
150 : eq(145, 92) : BOOL
151 : eq(145, 95) : BOOL
152 : ite(151, 97, 98) : BV:8
153 : ite(150, 94, 152) : BV:8
154 : ite(149, 91, 153) : BV:8
155 : ite(148, 88, 154) : BV:8
156 : ite(147, 85, 155) : BV:8
157 : ite(146, 82, 156) : BV:8
158 : 2 { 0x2 +1.23e129 } : BV:32
159 : bvadd(158, 77, 144) : BV:32
160 : eq(159, 78) : BOOL
161 : eq(159, 83) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : eq(159, 95) : BOOL
166 : ite(165, 97, 98) : BV:8
167 : ite(164, 94, 166) : BV:8
168 : ite(163, 91, 167) : BV:8
169 : ite(162, 88, 168) : BV:8
170 : ite(161, 85, 169) : BV:8
171 : ite(160, 82, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 77, 144) : BV:32
174 : eq(173, 78) : BOOL
175 : eq(173, 83) : BOOL
176 : eq(173, 86) : BOOL
177 : eq(173, 89) : BOOL
178 : eq(173, 92) : BOOL
179 : eq(173, 95) : BOOL
180 : ite(179, 97, 98) : BV:8
181 : ite(178, 94, 180) : BV:8
182 : ite(177, 91, 181) : BV:8
183 : ite(176, 88, 182) : BV:8
184 : ite(175, 85, 183) : BV:8
185 : ite(174, 82, 184) : BV:8
186 : bvadd(77, 144) : BV:32
187 : eq(186, 78) : BOOL
188 : eq(186, 83) : BOOL
189 : eq(186, 86) : BOOL
190 : eq(186, 89) : BOOL
191 : eq(186, 92) : BOOL
192 : eq(186, 95) : BOOL
193 : ite(192, 97, 98) : BV:8
194 : ite(191, 94, 193) : BV:8
195 : ite(190, 91, 194) : BV:8
196 : ite(189, 88, 195) : BV:8
197 : ite(188, 85, 196) : BV:8
198 : ite(187, 82, 197) : BV:8
199 : bvconcat(157, 171, 185, 198) : BV:32
200 : ite(55, 2, 199) : BV:32
201 : ite(74, 199, 200) : BV:32
202 : ite(55, 2, 201) : BV:32
203 : lambda(52, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(51, 203) : MAP[BV:32 -> BV:32]
205 : lambda(17, 204) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
206 : map(16, 205) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
207 : sym_const(206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda52622Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 687931393 { 0x29010001 +1.781261e211 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52623Var : BV:32
18 : Lambda52624Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 939590146 { 0x38010202 +1.787377e241 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda52625Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 207 { 0xcf -49 } : BV:8
64 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
65 : eq(61, 64) : BOOL
66 : 12 { 0xc } : BV:8
67 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
68 : eq(61, 67) : BOOL
69 : 194 { 0xc2 -62 } : BV:8
70 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
71 : eq(61, 70) : BOOL
72 : 101 { 0x65 } : BV:8
73 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
74 : eq(61, 73) : BOOL
75 : 255 { 0xff -1 } : BV:8
76 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
77 : eq(61, 76) : BOOL
78 : 149 { 0x95 -107 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : bvadd(73, 60) : BV:32
87 : eq(86, 59) : BOOL
88 : eq(86, 64) : BOOL
89 : eq(86, 67) : BOOL
90 : eq(86, 70) : BOOL
91 : eq(86, 73) : BOOL
92 : eq(86, 76) : BOOL
93 : ite(92, 78, 79) : BV:8
94 : ite(91, 75, 93) : BV:8
95 : ite(90, 72, 94) : BV:8
96 : ite(89, 69, 95) : BV:8
97 : ite(88, 66, 96) : BV:8
98 : ite(87, 63, 97) : BV:8
99 : bvadd(76, 60) : BV:32
100 : eq(99, 59) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 67) : BOOL
103 : eq(99, 70) : BOOL
104 : eq(99, 73) : BOOL
105 : eq(99, 76) : BOOL
106 : ite(105, 78, 79) : BV:8
107 : ite(104, 75, 106) : BV:8
108 : ite(103, 72, 107) : BV:8
109 : ite(102, 69, 108) : BV:8
110 : ite(101, 66, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : bvadd(67, 60) : BV:32
113 : eq(112, 59) : BOOL
114 : eq(112, 64) : BOOL
115 : eq(112, 67) : BOOL
116 : eq(112, 70) : BOOL
117 : eq(112, 73) : BOOL
118 : eq(112, 76) : BOOL
119 : ite(118, 78, 79) : BV:8
120 : ite(117, 75, 119) : BV:8
121 : ite(116, 72, 120) : BV:8
122 : ite(115, 69, 121) : BV:8
123 : ite(114, 66, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : bvconcat(85, 98, 111, 124) : BV:32
126 : bvadd(56, 58, 125) : BV:32
127 : eq(126, 59) : BOOL
128 : eq(126, 64) : BOOL
129 : eq(126, 67) : BOOL
130 : eq(126, 70) : BOOL
131 : eq(126, 73) : BOOL
132 : eq(126, 76) : BOOL
133 : ite(132, 78, 79) : BV:8
134 : ite(131, 75, 133) : BV:8
135 : ite(130, 72, 134) : BV:8
136 : ite(129, 69, 135) : BV:8
137 : ite(128, 66, 136) : BV:8
138 : ite(127, 63, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 58, 125) : BV:32
141 : eq(140, 59) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : eq(140, 76) : BOOL
147 : ite(146, 78, 79) : BV:8
148 : ite(145, 75, 147) : BV:8
149 : ite(144, 72, 148) : BV:8
150 : ite(143, 69, 149) : BV:8
151 : ite(142, 66, 150) : BV:8
152 : ite(141, 63, 151) : BV:8
153 : 1 { 0x1 +1.11e129 } : BV:32
154 : bvadd(153, 58, 125) : BV:32
155 : eq(154, 59) : BOOL
156 : eq(154, 64) : BOOL
157 : eq(154, 67) : BOOL
158 : eq(154, 70) : BOOL
159 : eq(154, 73) : BOOL
160 : eq(154, 76) : BOOL
161 : ite(160, 78, 79) : BV:8
162 : ite(159, 75, 161) : BV:8
163 : ite(158, 72, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 66, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : bvadd(58, 125) : BV:32
168 : eq(167, 59) : BOOL
169 : eq(167, 64) : BOOL
170 : eq(167, 67) : BOOL
171 : eq(167, 70) : BOOL
172 : eq(167, 73) : BOOL
173 : eq(167, 76) : BOOL
174 : ite(173, 78, 79) : BV:8
175 : ite(172, 75, 174) : BV:8
176 : ite(171, 72, 175) : BV:8
177 : ite(170, 69, 176) : BV:8
178 : ite(169, 66, 177) : BV:8
179 : ite(168, 63, 178) : BV:8
180 : bvconcat(138, 152, 166, 179) : BV:32
181 : ite(55, 2, 180) : BV:32
182 : lambda(52, 181) : FUNCTION[BV:32 -> BV:32]
183 : map(51, 182) : MAP[BV:32 -> BV:32]
184 : lambda(17, 183) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
185 : map(16, 184) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
186 : sym_const(185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1476919297 ] -> 0, [ 1476919298; 1476919298 ] -> 12, [ 1476919299; 1476919299 ] -> 101, [ 1476919300; 3087532035 ] -> 0, [ 3087532036; 3087532036 ] -> 194, [ 3087532037; 3087532037 ] -> 149, [ 3087532038; 3087532038 ] -> 255, [ 3087532039; 3087532039 ] -> 207, [ 3087532040; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 586797247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 586797248; 586797251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 586797252; 3574094339 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3574094340; 3574094343 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3574094344; 4077912067 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4077912068; 4077912071 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4077912072; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3574094340 { 0xd5085a04 -720872956 -1.6524705e43 } : BV:32
=input.dst.llvm-%m
1 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4077912068 { 0xf3100004 -217055228 -1.12500047e103 } : BV:32
=input.dst.llvm-%n
1 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 586797248 { 0x22f9d0c0 +1.95168304e198 } : BV:32
=input.dst.llvm-%x
1 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 671088639 { 0x27ffffff +1.99999988e208 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 696347132 { 0x298169fc +1.1104688e212 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 687931396 { 0x29010004 +1.781297e211 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda52629Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52630Var : BV:32
18 : 671088640 { 0x28000000 +1.0e209 } : BV:32
19 : eq(17, 18) : BOOL
20 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
28 : eq(26, 27) : BOOL
29 : 207 { 0xcf -49 } : BV:8
30 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
31 : eq(26, 30) : BOOL
32 : 12 { 0xc } : BV:8
33 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
34 : eq(26, 33) : BOOL
35 : 194 { 0xc2 -62 } : BV:8
36 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
37 : eq(26, 36) : BOOL
38 : 101 { 0x65 } : BV:8
39 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
40 : eq(26, 39) : BOOL
41 : 255 { 0xff -1 } : BV:8
42 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
43 : eq(26, 42) : BOOL
44 : 149 { 0x95 -107 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 24, 25) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : eq(53, 33) : BOOL
57 : eq(53, 36) : BOOL
58 : eq(53, 39) : BOOL
59 : eq(53, 42) : BOOL
60 : ite(59, 44, 45) : BV:8
61 : ite(58, 41, 60) : BV:8
62 : ite(57, 38, 61) : BV:8
63 : ite(56, 35, 62) : BV:8
64 : ite(55, 32, 63) : BV:8
65 : ite(54, 29, 64) : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : bvadd(66, 24, 25) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : eq(67, 33) : BOOL
71 : eq(67, 36) : BOOL
72 : eq(67, 39) : BOOL
73 : eq(67, 42) : BOOL
74 : ite(73, 44, 45) : BV:8
75 : ite(72, 41, 74) : BV:8
76 : ite(71, 38, 75) : BV:8
77 : ite(70, 35, 76) : BV:8
78 : ite(69, 32, 77) : BV:8
79 : ite(68, 29, 78) : BV:8
80 : bvadd(24, 25) : BV:32
81 : eq(80, 27) : BOOL
82 : eq(80, 30) : BOOL
83 : eq(80, 33) : BOOL
84 : eq(80, 36) : BOOL
85 : eq(80, 39) : BOOL
86 : eq(80, 42) : BOOL
87 : ite(86, 44, 45) : BV:8
88 : ite(85, 41, 87) : BV:8
89 : ite(84, 38, 88) : BV:8
90 : ite(83, 35, 89) : BV:8
91 : ite(82, 32, 90) : BV:8
92 : ite(81, 29, 91) : BV:8
93 : bvconcat(51, 65, 79, 92) : BV:32
94 : ite(21, 2, 93) : BV:32
95 : ite(19, 2, 94) : BV:32
96 : lambda(17, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(16, 96) : MAP[BV:32 -> BV:32]
98 : sym_const(97) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 671088640 { 0x28000000 +1.0e209 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
2 : unit : UNIT
3 : Lambda52611Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda52612Var : BV:32
20 : 671088640 { 0x28000000 +1.0e209 } : BV:32
21 : eq(19, 20) : BOOL
22 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
31 : eq(29, 30) : BOOL
32 : 207 { 0xcf -49 } : BV:8
33 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
34 : eq(29, 33) : BOOL
35 : 12 { 0xc } : BV:8
36 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
37 : eq(29, 36) : BOOL
38 : 194 { 0xc2 -62 } : BV:8
39 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
40 : eq(29, 39) : BOOL
41 : 101 { 0x65 } : BV:8
42 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
43 : eq(29, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
46 : eq(29, 45) : BOOL
47 : 149 { 0x95 -107 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 27, 28) : BV:32
57 : eq(56, 30) : BOOL
58 : eq(56, 33) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 39) : BOOL
61 : eq(56, 42) : BOOL
62 : eq(56, 45) : BOOL
63 : ite(62, 47, 48) : BV:8
64 : ite(61, 44, 63) : BV:8
65 : ite(60, 41, 64) : BV:8
66 : ite(59, 38, 65) : BV:8
67 : ite(58, 35, 66) : BV:8
68 : ite(57, 32, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 27, 28) : BV:32
71 : eq(70, 30) : BOOL
72 : eq(70, 33) : BOOL
73 : eq(70, 36) : BOOL
74 : eq(70, 39) : BOOL
75 : eq(70, 42) : BOOL
76 : eq(70, 45) : BOOL
77 : ite(76, 47, 48) : BV:8
78 : ite(75, 44, 77) : BV:8
79 : ite(74, 41, 78) : BV:8
80 : ite(73, 38, 79) : BV:8
81 : ite(72, 35, 80) : BV:8
82 : ite(71, 32, 81) : BV:8
83 : bvadd(27, 28) : BV:32
84 : eq(83, 30) : BOOL
85 : eq(83, 33) : BOOL
86 : eq(83, 36) : BOOL
87 : eq(83, 39) : BOOL
88 : eq(83, 42) : BOOL
89 : eq(83, 45) : BOOL
90 : ite(89, 47, 48) : BV:8
91 : ite(88, 44, 90) : BV:8
92 : ite(87, 41, 91) : BV:8
93 : ite(86, 38, 92) : BV:8
94 : ite(85, 35, 93) : BV:8
95 : ite(84, 32, 94) : BV:8
96 : bvconcat(54, 68, 82, 95) : BV:32
97 : ite(24, 4, 96) : BV:32
98 : ite(23, 4, 97) : BV:32
99 : ite(21, 4, 98) : BV:32
100 : lambda(19, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(18, 100) : MAP[BV:32 -> BV:32]
102 : sum(1, 2, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1494445480 { 0x59136da8 +1.15178394e51 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda52634Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda52635Var : BV:32
18 : 671088640 { 0x28000000 +1.0e209 } : BV:32
19 : eq(17, 18) : BOOL
20 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
29 : eq(27, 28) : BOOL
30 : 207 { 0xcf -49 } : BV:8
31 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
32 : eq(27, 31) : BOOL
33 : 12 { 0xc } : BV:8
34 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
35 : eq(27, 34) : BOOL
36 : 194 { 0xc2 -62 } : BV:8
37 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
38 : eq(27, 37) : BOOL
39 : 101 { 0x65 } : BV:8
40 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
41 : eq(27, 40) : BOOL
42 : 255 { 0xff -1 } : BV:8
43 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
44 : eq(27, 43) : BOOL
45 : 149 { 0x95 -107 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 25, 26) : BV:32
55 : eq(54, 28) : BOOL
56 : eq(54, 31) : BOOL
57 : eq(54, 34) : BOOL
58 : eq(54, 37) : BOOL
59 : eq(54, 40) : BOOL
60 : eq(54, 43) : BOOL
61 : ite(60, 45, 46) : BV:8
62 : ite(59, 42, 61) : BV:8
63 : ite(58, 39, 62) : BV:8
64 : ite(57, 36, 63) : BV:8
65 : ite(56, 33, 64) : BV:8
66 : ite(55, 30, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 25, 26) : BV:32
69 : eq(68, 28) : BOOL
70 : eq(68, 31) : BOOL
71 : eq(68, 34) : BOOL
72 : eq(68, 37) : BOOL
73 : eq(68, 40) : BOOL
74 : eq(68, 43) : BOOL
75 : ite(74, 45, 46) : BV:8
76 : ite(73, 42, 75) : BV:8
77 : ite(72, 39, 76) : BV:8
78 : ite(71, 36, 77) : BV:8
79 : ite(70, 33, 78) : BV:8
80 : ite(69, 30, 79) : BV:8
81 : bvadd(25, 26) : BV:32
82 : eq(81, 28) : BOOL
83 : eq(81, 31) : BOOL
84 : eq(81, 34) : BOOL
85 : eq(81, 37) : BOOL
86 : eq(81, 40) : BOOL
87 : eq(81, 43) : BOOL
88 : ite(87, 45, 46) : BV:8
89 : ite(86, 42, 88) : BV:8
90 : ite(85, 39, 89) : BV:8
91 : ite(84, 36, 90) : BV:8
92 : ite(83, 33, 91) : BV:8
93 : ite(82, 30, 92) : BV:8
94 : bvconcat(52, 66, 80, 93) : BV:32
95 : ite(22, 2, 94) : BV:32
96 : ite(21, 2, 95) : BV:32
97 : ite(19, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 671088639 { 0x27ffffff +1.99999988e208 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 687931396 { 0x29010004 +1.781297e211 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1449319479 { 0x5662dc37 +1.77234542e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4077912068 { 0xf3100004 -217055228 -1.12500047e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4077912071 { 0xf3100007 -217055225 -1.12500083e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 586797248 { 0x22f9d0c0 +1.95168304e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 586797251 { 0x22f9d0c3 +1.95168340e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3574094340 { 0xd5085a04 -720872956 -1.6524705e43 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3574094343 { 0xd5085a07 -720872953 -1.6524741e43 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda52494Var : BV:32
2 : Lambda52495Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 687931393 { 0x29010001 +1.781261e211 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 939590146 { 0x38010202 +1.787377e241 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 207 { 0xcf -49 } : BV:8
56 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
57 : eq(53, 56) : BOOL
58 : 12 { 0xc } : BV:8
59 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
60 : eq(53, 59) : BOOL
61 : 194 { 0xc2 -62 } : BV:8
62 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
63 : eq(53, 62) : BOOL
64 : 101 { 0x65 } : BV:8
65 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
66 : eq(53, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
69 : eq(53, 68) : BOOL
70 : 149 { 0x95 -107 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(57, 58, 75) : BV:8
77 : ite(54, 55, 76) : BV:8
78 : bvadd(65, 52) : BV:32
79 : eq(78, 51) : BOOL
80 : eq(78, 56) : BOOL
81 : eq(78, 59) : BOOL
82 : eq(78, 62) : BOOL
83 : eq(78, 65) : BOOL
84 : eq(78, 68) : BOOL
85 : ite(84, 70, 71) : BV:8
86 : ite(83, 67, 85) : BV:8
87 : ite(82, 64, 86) : BV:8
88 : ite(81, 61, 87) : BV:8
89 : ite(80, 58, 88) : BV:8
90 : ite(79, 55, 89) : BV:8
91 : bvadd(68, 52) : BV:32
92 : eq(91, 51) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 62) : BOOL
96 : eq(91, 65) : BOOL
97 : eq(91, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : ite(93, 58, 101) : BV:8
103 : ite(92, 55, 102) : BV:8
104 : bvadd(59, 52) : BV:32
105 : eq(104, 51) : BOOL
106 : eq(104, 56) : BOOL
107 : eq(104, 59) : BOOL
108 : eq(104, 62) : BOOL
109 : eq(104, 65) : BOOL
110 : eq(104, 68) : BOOL
111 : ite(110, 70, 71) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 64, 112) : BV:8
114 : ite(107, 61, 113) : BV:8
115 : ite(106, 58, 114) : BV:8
116 : ite(105, 55, 115) : BV:8
117 : bvconcat(77, 90, 103, 116) : BV:32
118 : bvadd(48, 50, 117) : BV:32
119 : eq(118, 51) : BOOL
120 : eq(118, 56) : BOOL
121 : eq(118, 59) : BOOL
122 : eq(118, 62) : BOOL
123 : eq(118, 65) : BOOL
124 : eq(118, 68) : BOOL
125 : ite(124, 70, 71) : BV:8
126 : ite(123, 67, 125) : BV:8
127 : ite(122, 64, 126) : BV:8
128 : ite(121, 61, 127) : BV:8
129 : ite(120, 58, 128) : BV:8
130 : ite(119, 55, 129) : BV:8
131 : 2 { 0x2 +1.23e129 } : BV:32
132 : bvadd(131, 50, 117) : BV:32
133 : eq(132, 51) : BOOL
134 : eq(132, 56) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : eq(132, 68) : BOOL
139 : ite(138, 70, 71) : BV:8
140 : ite(137, 67, 139) : BV:8
141 : ite(136, 64, 140) : BV:8
142 : ite(135, 61, 141) : BV:8
143 : ite(134, 58, 142) : BV:8
144 : ite(133, 55, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 50, 117) : BV:32
147 : eq(146, 51) : BOOL
148 : eq(146, 56) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 62) : BOOL
151 : eq(146, 65) : BOOL
152 : eq(146, 68) : BOOL
153 : ite(152, 70, 71) : BV:8
154 : ite(151, 67, 153) : BV:8
155 : ite(150, 64, 154) : BV:8
156 : ite(149, 61, 155) : BV:8
157 : ite(148, 58, 156) : BV:8
158 : ite(147, 55, 157) : BV:8
159 : bvadd(50, 117) : BV:32
160 : eq(159, 51) : BOOL
161 : eq(159, 56) : BOOL
162 : eq(159, 59) : BOOL
163 : eq(159, 62) : BOOL
164 : eq(159, 65) : BOOL
165 : eq(159, 68) : BOOL
166 : ite(165, 70, 71) : BV:8
167 : ite(164, 67, 166) : BV:8
168 : ite(163, 64, 167) : BV:8
169 : ite(162, 61, 168) : BV:8
170 : ite(161, 58, 169) : BV:8
171 : ite(160, 55, 170) : BV:8
172 : bvconcat(130, 144, 158, 171) : BV:32
173 : ite(6, 3, 172) : BV:32
174 : ite(47, 172, 173) : BV:32
175 : ite(6, 3, 174) : BV:32
176 : lambda(1, 2, 175) : FUNCTION[BV:32,BV:32 -> BV:32]
177 : sym_const(176) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda52499Var : BV:32
2 : Lambda52500Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 687931393 { 0x29010001 +1.781261e211 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 939590146 { 0x38010202 +1.787377e241 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 687931393 ] -> true, [ 687931394; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 687931393 ] -> true, [ 687931394; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda52508Var : BV:32
2 : Lambda52509Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 687931393 { 0x29010001 +1.781261e211 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 687931395 { 0x29010003 +1.781285e211 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 939590144 { 0x38010200 +1.787353e241 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 939590145 { 0x38010201 +1.787365e241 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 939590146 { 0x38010202 +1.787377e241 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda52504Var : BV:32
2 : Lambda52505Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 207 { 0xcf -49 } : BV:8
15 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
16 : eq(12, 15) : BOOL
17 : 12 { 0xc } : BV:8
18 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
19 : eq(12, 18) : BOOL
20 : 194 { 0xc2 -62 } : BV:8
21 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
22 : eq(12, 21) : BOOL
23 : 101 { 0x65 } : BV:8
24 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
25 : eq(12, 24) : BOOL
26 : 255 { 0xff -1 } : BV:8
27 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
28 : eq(12, 27) : BOOL
29 : 149 { 0x95 -107 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : bvadd(24, 11) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 15) : BOOL
40 : eq(37, 18) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 17, 47) : BV:8
49 : ite(38, 14, 48) : BV:8
50 : bvadd(27, 11) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 15) : BOOL
53 : eq(50, 18) : BOOL
54 : eq(50, 21) : BOOL
55 : eq(50, 24) : BOOL
56 : eq(50, 27) : BOOL
57 : ite(56, 29, 30) : BV:8
58 : ite(55, 26, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 20, 59) : BV:8
61 : ite(52, 17, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : bvadd(18, 11) : BV:32
64 : eq(63, 10) : BOOL
65 : eq(63, 15) : BOOL
66 : eq(63, 18) : BOOL
67 : eq(63, 21) : BOOL
68 : eq(63, 24) : BOOL
69 : eq(63, 27) : BOOL
70 : ite(69, 29, 30) : BV:8
71 : ite(68, 26, 70) : BV:8
72 : ite(67, 23, 71) : BV:8
73 : ite(66, 20, 72) : BV:8
74 : ite(65, 17, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : bvconcat(36, 49, 62, 75) : BV:32
77 : bvadd(7, 9, 76) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 15) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 24) : BOOL
83 : eq(77, 27) : BOOL
84 : ite(83, 29, 30) : BV:8
85 : ite(82, 26, 84) : BV:8
86 : ite(81, 23, 85) : BV:8
87 : ite(80, 20, 86) : BV:8
88 : ite(79, 17, 87) : BV:8
89 : ite(78, 14, 88) : BV:8
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : bvadd(90, 9, 76) : BV:32
92 : eq(91, 10) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : eq(91, 27) : BOOL
98 : ite(97, 29, 30) : BV:8
99 : ite(96, 26, 98) : BV:8
100 : ite(95, 23, 99) : BV:8
101 : ite(94, 20, 100) : BV:8
102 : ite(93, 17, 101) : BV:8
103 : ite(92, 14, 102) : BV:8
104 : 1 { 0x1 +1.11e129 } : BV:32
105 : bvadd(104, 9, 76) : BV:32
106 : eq(105, 10) : BOOL
107 : eq(105, 15) : BOOL
108 : eq(105, 18) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : eq(105, 27) : BOOL
112 : ite(111, 29, 30) : BV:8
113 : ite(110, 26, 112) : BV:8
114 : ite(109, 23, 113) : BV:8
115 : ite(108, 20, 114) : BV:8
116 : ite(107, 17, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : bvadd(9, 76) : BV:32
119 : eq(118, 10) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 18) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : ite(124, 29, 30) : BV:8
126 : ite(123, 26, 125) : BV:8
127 : ite(122, 23, 126) : BV:8
128 : ite(121, 20, 127) : BV:8
129 : ite(120, 17, 128) : BV:8
130 : ite(119, 14, 129) : BV:8
131 : bvconcat(89, 103, 117, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : lambda(1, 2, 132) : FUNCTION[BV:32,BV:32 -> BV:32]
134 : sym_const(133) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 939590144 ] -> true, [ 939590145; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda52515Var : BV:32
2 : 671088640 { 0x28000000 +1.0e209 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
14 : eq(12, 13) : BOOL
15 : 207 { 0xcf -49 } : BV:8
16 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
17 : eq(12, 16) : BOOL
18 : 12 { 0xc } : BV:8
19 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
20 : eq(12, 19) : BOOL
21 : 194 { 0xc2 -62 } : BV:8
22 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
23 : eq(12, 22) : BOOL
24 : 101 { 0x65 } : BV:8
25 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
26 : eq(12, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
29 : eq(12, 28) : BOOL
30 : 149 { 0x95 -107 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 10, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 10, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(10, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : ite(7, 4, 79) : BV:32
81 : ite(6, 4, 80) : BV:32
82 : ite(3, 4, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda52516Var : BV:32
2 : 671088640 { 0x28000000 +1.0e209 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
14 : eq(12, 13) : BOOL
15 : 207 { 0xcf -49 } : BV:8
16 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
17 : eq(12, 16) : BOOL
18 : 12 { 0xc } : BV:8
19 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
20 : eq(12, 19) : BOOL
21 : 194 { 0xc2 -62 } : BV:8
22 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
23 : eq(12, 22) : BOOL
24 : 101 { 0x65 } : BV:8
25 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
26 : eq(12, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
29 : eq(12, 28) : BOOL
30 : 149 { 0x95 -107 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 10, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 10, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(10, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : ite(7, 4, 79) : BV:32
81 : ite(6, 4, 80) : BV:32
82 : ite(3, 4, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 939590144 ] -> true, [ 939590145; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 939590144 ] -> true, [ 939590145; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda52523Var : BV:32
2 : 671088640 { 0x28000000 +1.0e209 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 687931394 { 0x29010002 +1.781273e211 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 1695285248 { 0x650c0000 +1.9375000e75 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 3087532039 { 0xb8080007 -1207435257 -1.6250083e241 } : BV:32
13 : eq(11, 12) : BOOL
14 : 207 { 0xcf -49 } : BV:8
15 : 1476919298 { 0x58080002 +1.6250023e49 } : BV:32
16 : eq(11, 15) : BOOL
17 : 12 { 0xc } : BV:8
18 : 3087532036 { 0xb8080004 -1207435260 -1.6250047e241 } : BV:32
19 : eq(11, 18) : BOOL
20 : 194 { 0xc2 -62 } : BV:8
21 : 1476919299 { 0x58080003 +1.6250035e49 } : BV:32
22 : eq(11, 21) : BOOL
23 : 101 { 0x65 } : BV:8
24 : 3087532038 { 0xb8080006 -1207435258 -1.6250071e241 } : BV:32
25 : eq(11, 24) : BOOL
26 : 255 { 0xff -1 } : BV:8
27 : 3087532037 { 0xb8080005 -1207435259 -1.6250059e241 } : BV:32
28 : eq(11, 27) : BOOL
29 : 149 { 0x95 -107 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 15) : BOOL
41 : eq(38, 18) : BOOL
42 : eq(38, 21) : BOOL
43 : eq(38, 24) : BOOL
44 : eq(38, 27) : BOOL
45 : ite(44, 29, 30) : BV:8
46 : ite(43, 26, 45) : BV:8
47 : ite(42, 23, 46) : BV:8
48 : ite(41, 20, 47) : BV:8
49 : ite(40, 17, 48) : BV:8
50 : ite(39, 14, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 9, 10) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : eq(52, 18) : BOOL
56 : eq(52, 21) : BOOL
57 : eq(52, 24) : BOOL
58 : eq(52, 27) : BOOL
59 : ite(58, 29, 30) : BV:8
60 : ite(57, 26, 59) : BV:8
61 : ite(56, 23, 60) : BV:8
62 : ite(55, 20, 61) : BV:8
63 : ite(54, 17, 62) : BV:8
64 : ite(53, 14, 63) : BV:8
65 : bvadd(9, 10) : BV:32
66 : eq(65, 12) : BOOL
67 : eq(65, 15) : BOOL
68 : eq(65, 18) : BOOL
69 : eq(65, 21) : BOOL
70 : eq(65, 24) : BOOL
71 : eq(65, 27) : BOOL
72 : ite(71, 29, 30) : BV:8
73 : ite(70, 26, 72) : BV:8
74 : ite(69, 23, 73) : BV:8
75 : ite(68, 20, 74) : BV:8
76 : ite(67, 17, 75) : BV:8
77 : ite(66, 14, 76) : BV:8
78 : bvconcat(36, 50, 64, 77) : BV:32
79 : ite(6, 4, 78) : BV:32
80 : ite(3, 4, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
3528612801
=counter_example_end
=global nodece 64 num_edges_traversed 2
=global nodece 64 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 65
=global nodece 65 nodece z3v487.ce4621.num_edges_traversed1
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3v487.ce4621 8eabd81755cb10a5e4b797bb312d1a6
=input.spec-%var-x-1
1 : Lambda56466Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda56467Var : BV:32
18 : Lambda56468Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 101359145 { 0x60a9e29 +1.8295166e141 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda56469Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda56487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda56488Var : BV:32
18 : Lambda56489Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 101359145 { 0x60a9e29 +1.8295166e141 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda56490Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1999 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2000; 2003 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2004; 1114115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1114116; 1114119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1114120; 3366453715 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3366453716; 3366453719 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3366453720; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2000 { 0x7d0 +1.23841e129 } : BV:32
=input.dst.llvm-%m
1 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1114116 { 0x110004 +1.13281297e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3366453716 { 0xc8a801d4 -928513580 -1.31255578e18 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 667875246 { 0x27cef7ae +1.61693358e208 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda56495Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda56496Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
2 : unit : UNIT
3 : Lambda56476Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda56477Var : BV:32
20 : bvule(4, 19) : BOOL
21 : bvule(19, 12) : BOOL
22 : and(20, 21) : BOOL
23 : ite(22, 4, 4) : BV:32
24 : lambda(19, 23) : FUNCTION[BV:32 -> BV:32]
25 : map(18, 24) : MAP[BV:32 -> BV:32]
26 : sum(1, 2, 25) : SUM[UNIT,MAP[BV:32 -> BV:32]]
27 : sym_const(26) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : and(3, 10) : BOOL
19 : ite(18, 1, 1) : BV:32
20 : sum(16, 17, 19) : SUM[UNIT,BV:32]
21 : sym_const(20) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda56501Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda56502Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1165678519 { 0x457ad7b7 +1.95970809e11 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1114116 { 0x110004 +1.13281297e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1114119 { 0x110007 +1.13281333e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3366453716 { 0xc8a801d4 -928513580 -1.31255578e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3366453719 { 0xc8a801d7 -928513577 -1.31255614e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2000 { 0x7d0 +1.23841e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2003 { 0x7d3 +1.23877e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda56389Var : BV:32
2 : Lambda56390Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 101359145 { 0x60a9e29 +1.8295166e141 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda56399Var : BV:32
2 : Lambda56400Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 101359145 { 0x60a9e29 +1.8295166e141 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda56403Var : BV:32
2 : Lambda56404Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 101359145 { 0x60a9e29 +1.8295166e141 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 101359143 ] -> true, [ 101359144; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 101359143 ] -> true, [ 101359144; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 101359143 ] -> true, [ 101359144; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
2235539320
=counter_example_end
=global nodece 65 num_edges_traversed 1
=global nodece 65 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 66
=global nodece 66 nodece z3.ce4647.num_edges_traversed1
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3.ce4647 4a88a5c2e47458baa2ff4f8904df1ef
=input.spec-%var-x-1
1 : Lambda57217Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57218Var : BV:32
18 : Lambda57219Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 8) : BOOL
25 : and(23, 24) : BOOL
26 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
27 : bvule(26, 17) : BOOL
28 : bvule(17, 10) : BOOL
29 : and(27, 28) : BOOL
30 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 4) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 26, 34) : BV:32
36 : ite(25, 8, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 30) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 7, 13) : BOOL
58 : ite(54, 7, 57) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda57220Var : BV:32
61 : eq(17, 30) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 2) : BOOL
65 : and(64, 62) : BOOL
66 : and(19, 32) : BOOL
67 : and(23, 28) : BOOL
68 : ite(67, 13, 13) : BOOL
69 : ite(66, 7, 68) : BOOL
70 : bvule(2, 60) : BOOL
71 : bvule(60, 2) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(42, 60) : BOOL
74 : bvule(60, 42) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(46, 60) : BOOL
77 : bvule(60, 10) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 46, 46) : BV:32
80 : ite(75, 42, 79) : BV:32
81 : ite(72, 2, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : and(38, 82) : BOOL
84 : and(55, 82) : BOOL
85 : ite(84, 7, 13) : BOOL
86 : ite(83, 7, 85) : BOOL
87 : and(69, 86) : BOOL
88 : 3 { 0x3 +1.35e129 } : BV:32
89 : 4 { 0x4 +1.47e129 } : BV:32
90 : bvmul(89, 60) : BV:32
91 : bvmul(89, 17) : BV:32
92 : bvadd(88, 91) : BV:32
93 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
94 : eq(92, 93) : BOOL
95 : 240 { 0xf0 -16 } : BV:8
96 : eq(92, 88) : BOOL
97 : 91 { 0x5b } : BV:8
98 : eq(92, 42) : BOOL
99 : 217 { 0xd9 -39 } : BV:8
100 : eq(92, 2) : BOOL
101 : 184 { 0xb8 -72 } : BV:8
102 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
103 : eq(92, 102) : BOOL
104 : 234 { 0xea -22 } : BV:8
105 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
106 : eq(92, 105) : BOOL
107 : 237 { 0xed -19 } : BV:8
108 : eq(92, 46) : BOOL
109 : 250 { 0xfa -6 } : BV:8
110 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
111 : eq(92, 110) : BOOL
112 : 190 { 0xbe -66 } : BV:8
113 : 0 { 0x0 } : BV:8
114 : ite(111, 112, 113) : BV:8
115 : ite(108, 109, 114) : BV:8
116 : ite(106, 107, 115) : BV:8
117 : ite(103, 104, 116) : BV:8
118 : ite(100, 101, 117) : BV:8
119 : ite(98, 99, 118) : BV:8
120 : ite(96, 97, 119) : BV:8
121 : ite(94, 95, 120) : BV:8
122 : bvadd(46, 91) : BV:32
123 : eq(122, 93) : BOOL
124 : eq(122, 88) : BOOL
125 : eq(122, 42) : BOOL
126 : eq(122, 2) : BOOL
127 : eq(122, 102) : BOOL
128 : eq(122, 105) : BOOL
129 : eq(122, 46) : BOOL
130 : eq(122, 110) : BOOL
131 : ite(130, 112, 113) : BV:8
132 : ite(129, 109, 131) : BV:8
133 : ite(128, 107, 132) : BV:8
134 : ite(127, 104, 133) : BV:8
135 : ite(126, 101, 134) : BV:8
136 : ite(125, 99, 135) : BV:8
137 : ite(124, 97, 136) : BV:8
138 : ite(123, 95, 137) : BV:8
139 : bvadd(42, 91) : BV:32
140 : eq(139, 93) : BOOL
141 : eq(139, 88) : BOOL
142 : eq(139, 42) : BOOL
143 : eq(139, 2) : BOOL
144 : eq(139, 102) : BOOL
145 : eq(139, 105) : BOOL
146 : eq(139, 46) : BOOL
147 : eq(139, 110) : BOOL
148 : ite(147, 112, 113) : BV:8
149 : ite(146, 109, 148) : BV:8
150 : ite(145, 107, 149) : BV:8
151 : ite(144, 104, 150) : BV:8
152 : ite(143, 101, 151) : BV:8
153 : ite(142, 99, 152) : BV:8
154 : ite(141, 97, 153) : BV:8
155 : ite(140, 95, 154) : BV:8
156 : eq(91, 93) : BOOL
157 : eq(91, 88) : BOOL
158 : eq(91, 42) : BOOL
159 : eq(91, 2) : BOOL
160 : eq(91, 102) : BOOL
161 : eq(91, 105) : BOOL
162 : eq(91, 46) : BOOL
163 : eq(91, 110) : BOOL
164 : ite(163, 112, 113) : BV:8
165 : ite(162, 109, 164) : BV:8
166 : ite(161, 107, 165) : BV:8
167 : ite(160, 104, 166) : BV:8
168 : ite(159, 101, 167) : BV:8
169 : ite(158, 99, 168) : BV:8
170 : ite(157, 97, 169) : BV:8
171 : ite(156, 95, 170) : BV:8
172 : bvconcat(121, 138, 155, 171) : BV:32
173 : bvadd(88, 90, 172) : BV:32
174 : eq(173, 93) : BOOL
175 : eq(173, 88) : BOOL
176 : eq(173, 42) : BOOL
177 : eq(173, 2) : BOOL
178 : eq(173, 102) : BOOL
179 : eq(173, 105) : BOOL
180 : eq(173, 46) : BOOL
181 : eq(173, 110) : BOOL
182 : ite(181, 112, 113) : BV:8
183 : ite(180, 109, 182) : BV:8
184 : ite(179, 107, 183) : BV:8
185 : ite(178, 104, 184) : BV:8
186 : ite(177, 101, 185) : BV:8
187 : ite(176, 99, 186) : BV:8
188 : ite(175, 97, 187) : BV:8
189 : ite(174, 95, 188) : BV:8
190 : bvadd(46, 90, 172) : BV:32
191 : eq(190, 93) : BOOL
192 : eq(190, 88) : BOOL
193 : eq(190, 42) : BOOL
194 : eq(190, 2) : BOOL
195 : eq(190, 102) : BOOL
196 : eq(190, 105) : BOOL
197 : eq(190, 46) : BOOL
198 : eq(190, 110) : BOOL
199 : ite(198, 112, 113) : BV:8
200 : ite(197, 109, 199) : BV:8
201 : ite(196, 107, 200) : BV:8
202 : ite(195, 104, 201) : BV:8
203 : ite(194, 101, 202) : BV:8
204 : ite(193, 99, 203) : BV:8
205 : ite(192, 97, 204) : BV:8
206 : ite(191, 95, 205) : BV:8
207 : bvadd(42, 90, 172) : BV:32
208 : eq(207, 93) : BOOL
209 : eq(207, 88) : BOOL
210 : eq(207, 42) : BOOL
211 : eq(207, 2) : BOOL
212 : eq(207, 102) : BOOL
213 : eq(207, 105) : BOOL
214 : eq(207, 46) : BOOL
215 : eq(207, 110) : BOOL
216 : ite(215, 112, 113) : BV:8
217 : ite(214, 109, 216) : BV:8
218 : ite(213, 107, 217) : BV:8
219 : ite(212, 104, 218) : BV:8
220 : ite(211, 101, 219) : BV:8
221 : ite(210, 99, 220) : BV:8
222 : ite(209, 97, 221) : BV:8
223 : ite(208, 95, 222) : BV:8
224 : bvadd(90, 172) : BV:32
225 : eq(224, 93) : BOOL
226 : eq(224, 88) : BOOL
227 : eq(224, 42) : BOOL
228 : eq(224, 2) : BOOL
229 : eq(224, 102) : BOOL
230 : eq(224, 105) : BOOL
231 : eq(224, 46) : BOOL
232 : eq(224, 110) : BOOL
233 : ite(232, 112, 113) : BV:8
234 : ite(231, 109, 233) : BV:8
235 : ite(230, 107, 234) : BV:8
236 : ite(229, 104, 235) : BV:8
237 : ite(228, 101, 236) : BV:8
238 : ite(227, 99, 237) : BV:8
239 : ite(226, 97, 238) : BV:8
240 : ite(225, 95, 239) : BV:8
241 : bvconcat(189, 206, 223, 240) : BV:32
242 : ite(65, 2, 241) : BV:32
243 : ite(63, 2, 242) : BV:32
244 : ite(87, 241, 243) : BV:32
245 : ite(65, 2, 244) : BV:32
246 : ite(63, 2, 245) : BV:32
247 : lambda(60, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(59, 247) : MAP[BV:32 -> BV:32]
249 : lambda(17, 248) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
250 : map(16, 249) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
251 : sym_const(250) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda57230Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57231Var : BV:32
18 : Lambda57232Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 8) : BOOL
25 : and(23, 24) : BOOL
26 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
27 : bvule(26, 17) : BOOL
28 : bvule(17, 10) : BOOL
29 : and(27, 28) : BOOL
30 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 4) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 26, 34) : BV:32
36 : ite(25, 8, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 30) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 7, 13) : BOOL
58 : ite(54, 7, 57) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda57233Var : BV:32
61 : eq(17, 30) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 2) : BOOL
65 : and(64, 62) : BOOL
66 : 3 { 0x3 +1.35e129 } : BV:32
67 : 4 { 0x4 +1.47e129 } : BV:32
68 : bvmul(67, 60) : BV:32
69 : bvmul(67, 17) : BV:32
70 : bvadd(66, 69) : BV:32
71 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
72 : eq(70, 71) : BOOL
73 : 240 { 0xf0 -16 } : BV:8
74 : eq(70, 66) : BOOL
75 : 91 { 0x5b } : BV:8
76 : eq(70, 42) : BOOL
77 : 217 { 0xd9 -39 } : BV:8
78 : eq(70, 2) : BOOL
79 : 184 { 0xb8 -72 } : BV:8
80 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
81 : eq(70, 80) : BOOL
82 : 234 { 0xea -22 } : BV:8
83 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
84 : eq(70, 83) : BOOL
85 : 237 { 0xed -19 } : BV:8
86 : eq(70, 46) : BOOL
87 : 250 { 0xfa -6 } : BV:8
88 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
89 : eq(70, 88) : BOOL
90 : 190 { 0xbe -66 } : BV:8
91 : 0 { 0x0 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(86, 87, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(81, 82, 94) : BV:8
96 : ite(78, 79, 95) : BV:8
97 : ite(76, 77, 96) : BV:8
98 : ite(74, 75, 97) : BV:8
99 : ite(72, 73, 98) : BV:8
100 : bvadd(46, 69) : BV:32
101 : eq(100, 71) : BOOL
102 : eq(100, 66) : BOOL
103 : eq(100, 42) : BOOL
104 : eq(100, 2) : BOOL
105 : eq(100, 80) : BOOL
106 : eq(100, 83) : BOOL
107 : eq(100, 46) : BOOL
108 : eq(100, 88) : BOOL
109 : ite(108, 90, 91) : BV:8
110 : ite(107, 87, 109) : BV:8
111 : ite(106, 85, 110) : BV:8
112 : ite(105, 82, 111) : BV:8
113 : ite(104, 79, 112) : BV:8
114 : ite(103, 77, 113) : BV:8
115 : ite(102, 75, 114) : BV:8
116 : ite(101, 73, 115) : BV:8
117 : bvadd(42, 69) : BV:32
118 : eq(117, 71) : BOOL
119 : eq(117, 66) : BOOL
120 : eq(117, 42) : BOOL
121 : eq(117, 2) : BOOL
122 : eq(117, 80) : BOOL
123 : eq(117, 83) : BOOL
124 : eq(117, 46) : BOOL
125 : eq(117, 88) : BOOL
126 : ite(125, 90, 91) : BV:8
127 : ite(124, 87, 126) : BV:8
128 : ite(123, 85, 127) : BV:8
129 : ite(122, 82, 128) : BV:8
130 : ite(121, 79, 129) : BV:8
131 : ite(120, 77, 130) : BV:8
132 : ite(119, 75, 131) : BV:8
133 : ite(118, 73, 132) : BV:8
134 : eq(69, 71) : BOOL
135 : eq(69, 66) : BOOL
136 : eq(69, 42) : BOOL
137 : eq(69, 2) : BOOL
138 : eq(69, 80) : BOOL
139 : eq(69, 83) : BOOL
140 : eq(69, 46) : BOOL
141 : eq(69, 88) : BOOL
142 : ite(141, 90, 91) : BV:8
143 : ite(140, 87, 142) : BV:8
144 : ite(139, 85, 143) : BV:8
145 : ite(138, 82, 144) : BV:8
146 : ite(137, 79, 145) : BV:8
147 : ite(136, 77, 146) : BV:8
148 : ite(135, 75, 147) : BV:8
149 : ite(134, 73, 148) : BV:8
150 : bvconcat(99, 116, 133, 149) : BV:32
151 : bvadd(66, 68, 150) : BV:32
152 : eq(151, 71) : BOOL
153 : eq(151, 66) : BOOL
154 : eq(151, 42) : BOOL
155 : eq(151, 2) : BOOL
156 : eq(151, 80) : BOOL
157 : eq(151, 83) : BOOL
158 : eq(151, 46) : BOOL
159 : eq(151, 88) : BOOL
160 : ite(159, 90, 91) : BV:8
161 : ite(158, 87, 160) : BV:8
162 : ite(157, 85, 161) : BV:8
163 : ite(156, 82, 162) : BV:8
164 : ite(155, 79, 163) : BV:8
165 : ite(154, 77, 164) : BV:8
166 : ite(153, 75, 165) : BV:8
167 : ite(152, 73, 166) : BV:8
168 : bvadd(46, 68, 150) : BV:32
169 : eq(168, 71) : BOOL
170 : eq(168, 66) : BOOL
171 : eq(168, 42) : BOOL
172 : eq(168, 2) : BOOL
173 : eq(168, 80) : BOOL
174 : eq(168, 83) : BOOL
175 : eq(168, 46) : BOOL
176 : eq(168, 88) : BOOL
177 : ite(176, 90, 91) : BV:8
178 : ite(175, 87, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 82, 179) : BV:8
181 : ite(172, 79, 180) : BV:8
182 : ite(171, 77, 181) : BV:8
183 : ite(170, 75, 182) : BV:8
184 : ite(169, 73, 183) : BV:8
185 : bvadd(42, 68, 150) : BV:32
186 : eq(185, 71) : BOOL
187 : eq(185, 66) : BOOL
188 : eq(185, 42) : BOOL
189 : eq(185, 2) : BOOL
190 : eq(185, 80) : BOOL
191 : eq(185, 83) : BOOL
192 : eq(185, 46) : BOOL
193 : eq(185, 88) : BOOL
194 : ite(193, 90, 91) : BV:8
195 : ite(192, 87, 194) : BV:8
196 : ite(191, 85, 195) : BV:8
197 : ite(190, 82, 196) : BV:8
198 : ite(189, 79, 197) : BV:8
199 : ite(188, 77, 198) : BV:8
200 : ite(187, 75, 199) : BV:8
201 : ite(186, 73, 200) : BV:8
202 : bvadd(68, 150) : BV:32
203 : eq(202, 71) : BOOL
204 : eq(202, 66) : BOOL
205 : eq(202, 42) : BOOL
206 : eq(202, 2) : BOOL
207 : eq(202, 80) : BOOL
208 : eq(202, 83) : BOOL
209 : eq(202, 46) : BOOL
210 : eq(202, 88) : BOOL
211 : ite(210, 90, 91) : BV:8
212 : ite(209, 87, 211) : BV:8
213 : ite(208, 85, 212) : BV:8
214 : ite(207, 82, 213) : BV:8
215 : ite(206, 79, 214) : BV:8
216 : ite(205, 77, 215) : BV:8
217 : ite(204, 75, 216) : BV:8
218 : ite(203, 73, 217) : BV:8
219 : bvconcat(167, 184, 201, 218) : BV:32
220 : ite(65, 2, 219) : BV:32
221 : ite(63, 2, 220) : BV:32
222 : lambda(60, 221) : FUNCTION[BV:32 -> BV:32]
223 : map(59, 222) : MAP[BV:32 -> BV:32]
224 : lambda(17, 223) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
225 : map(16, 224) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
226 : sym_const(225) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 184, [ 1; 1 ] -> 217, [ 2; 2 ] -> 250, [ 3; 3 ] -> 91, [ 4; 1033001635 ] -> 0, [ 1033001636; 1033001636 ] -> 240, [ 1033001637; 1033001637 ] -> 234, [ 1033001638; 1033001638 ] -> 237, [ 1033001639; 1033001639 ] -> 190, [ 1033001640; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3771733755 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3771733756; 3771733759 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3771733760; 3862300159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3862300160; 3862300163 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3862300164; 4284696055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4284696056; 4284696059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4284696060; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4284696056 { 0xff6345f8 -10271240 -1.77557277e127 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3771733756 { 0xe0d016fc -523233540 -1.62570142e66 } : BV:32
=input.dst.llvm-%n
1 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3862300160 { 0xe6360600 -432667136 -1.42205810e77 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda57324Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvule(3, 3) : BOOL
18 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 3, 3) : BV:32
22 : ite(16, 12, 21) : BV:32
23 : ite(11, 8, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : bvule(1, 2) : BOOL
28 : and(26, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 29) : BOOL
32 : and(30, 31) : BOOL
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvule(33, 1) : BOOL
35 : bvule(1, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 33, 33) : BV:32
38 : ite(32, 29, 37) : BV:32
39 : ite(28, 2, 38) : BV:32
40 : eq(39, 2) : BOOL
41 : and(25, 40) : BOOL
42 : 1 { 0x1 } : BOOL
43 : eq(24, 3) : BOOL
44 : and(43, 40) : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(44, 42, 45) : BOOL
47 : ite(41, 42, 46) : BOOL
48 : lambda(1, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda57325Var : BV:32
50 : eq(3, 3) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : eq(3, 2) : BOOL
54 : and(53, 51) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 49) : BV:32
58 : bvmul(56, 3) : BV:32
59 : bvadd(55, 58) : BV:32
60 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
61 : eq(59, 60) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : eq(59, 55) : BOOL
64 : 91 { 0x5b } : BV:8
65 : eq(59, 29) : BOOL
66 : 217 { 0xd9 -39 } : BV:8
67 : eq(59, 2) : BOOL
68 : 184 { 0xb8 -72 } : BV:8
69 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
70 : eq(59, 69) : BOOL
71 : 234 { 0xea -22 } : BV:8
72 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
73 : eq(59, 72) : BOOL
74 : 237 { 0xed -19 } : BV:8
75 : eq(59, 33) : BOOL
76 : 250 { 0xfa -6 } : BV:8
77 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
78 : eq(59, 77) : BOOL
79 : 190 { 0xbe -66 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 74, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(65, 66, 85) : BV:8
87 : ite(63, 64, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(33, 58) : BV:32
90 : eq(89, 60) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 2) : BOOL
94 : eq(89, 69) : BOOL
95 : eq(89, 72) : BOOL
96 : eq(89, 33) : BOOL
97 : eq(89, 77) : BOOL
98 : ite(97, 79, 80) : BV:8
99 : ite(96, 76, 98) : BV:8
100 : ite(95, 74, 99) : BV:8
101 : ite(94, 71, 100) : BV:8
102 : ite(93, 68, 101) : BV:8
103 : ite(92, 66, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : ite(90, 62, 104) : BV:8
106 : bvadd(29, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 55) : BOOL
109 : eq(106, 29) : BOOL
110 : eq(106, 2) : BOOL
111 : eq(106, 69) : BOOL
112 : eq(106, 72) : BOOL
113 : eq(106, 33) : BOOL
114 : eq(106, 77) : BOOL
115 : ite(114, 79, 80) : BV:8
116 : ite(113, 76, 115) : BV:8
117 : ite(112, 74, 116) : BV:8
118 : ite(111, 71, 117) : BV:8
119 : ite(110, 68, 118) : BV:8
120 : ite(109, 66, 119) : BV:8
121 : ite(108, 64, 120) : BV:8
122 : ite(107, 62, 121) : BV:8
123 : eq(58, 60) : BOOL
124 : eq(58, 55) : BOOL
125 : eq(58, 29) : BOOL
126 : eq(58, 2) : BOOL
127 : eq(58, 69) : BOOL
128 : eq(58, 72) : BOOL
129 : eq(58, 33) : BOOL
130 : eq(58, 77) : BOOL
131 : ite(130, 79, 80) : BV:8
132 : ite(129, 76, 131) : BV:8
133 : ite(128, 74, 132) : BV:8
134 : ite(127, 71, 133) : BV:8
135 : ite(126, 68, 134) : BV:8
136 : ite(125, 66, 135) : BV:8
137 : ite(124, 64, 136) : BV:8
138 : ite(123, 62, 137) : BV:8
139 : bvconcat(88, 105, 122, 138) : BV:32
140 : bvadd(55, 57, 139) : BV:32
141 : eq(140, 60) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 29) : BOOL
144 : eq(140, 2) : BOOL
145 : eq(140, 69) : BOOL
146 : eq(140, 72) : BOOL
147 : eq(140, 33) : BOOL
148 : eq(140, 77) : BOOL
149 : ite(148, 79, 80) : BV:8
150 : ite(147, 76, 149) : BV:8
151 : ite(146, 74, 150) : BV:8
152 : ite(145, 71, 151) : BV:8
153 : ite(144, 68, 152) : BV:8
154 : ite(143, 66, 153) : BV:8
155 : ite(142, 64, 154) : BV:8
156 : ite(141, 62, 155) : BV:8
157 : bvadd(33, 57, 139) : BV:32
158 : eq(157, 60) : BOOL
159 : eq(157, 55) : BOOL
160 : eq(157, 29) : BOOL
161 : eq(157, 2) : BOOL
162 : eq(157, 69) : BOOL
163 : eq(157, 72) : BOOL
164 : eq(157, 33) : BOOL
165 : eq(157, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 74, 167) : BV:8
169 : ite(162, 71, 168) : BV:8
170 : ite(161, 68, 169) : BV:8
171 : ite(160, 66, 170) : BV:8
172 : ite(159, 64, 171) : BV:8
173 : ite(158, 62, 172) : BV:8
174 : bvadd(29, 57, 139) : BV:32
175 : eq(174, 60) : BOOL
176 : eq(174, 55) : BOOL
177 : eq(174, 29) : BOOL
178 : eq(174, 2) : BOOL
179 : eq(174, 69) : BOOL
180 : eq(174, 72) : BOOL
181 : eq(174, 33) : BOOL
182 : eq(174, 77) : BOOL
183 : ite(182, 79, 80) : BV:8
184 : ite(181, 76, 183) : BV:8
185 : ite(180, 74, 184) : BV:8
186 : ite(179, 71, 185) : BV:8
187 : ite(178, 68, 186) : BV:8
188 : ite(177, 66, 187) : BV:8
189 : ite(176, 64, 188) : BV:8
190 : ite(175, 62, 189) : BV:8
191 : bvadd(57, 139) : BV:32
192 : eq(191, 60) : BOOL
193 : eq(191, 55) : BOOL
194 : eq(191, 29) : BOOL
195 : eq(191, 2) : BOOL
196 : eq(191, 69) : BOOL
197 : eq(191, 72) : BOOL
198 : eq(191, 33) : BOOL
199 : eq(191, 77) : BOOL
200 : ite(199, 79, 80) : BV:8
201 : ite(198, 76, 200) : BV:8
202 : ite(197, 74, 201) : BV:8
203 : ite(196, 71, 202) : BV:8
204 : ite(195, 68, 203) : BV:8
205 : ite(194, 66, 204) : BV:8
206 : ite(193, 64, 205) : BV:8
207 : ite(192, 62, 206) : BV:8
208 : bvconcat(156, 173, 190, 207) : BV:32
209 : ite(54, 2, 208) : BV:32
210 : ite(52, 2, 209) : BV:32
211 : lambda(49, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(48, 211) : MAP[BV:32 -> BV:32]
213 : sym_const(212) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 258250410 { 0xf6496aa +1.78584790e159 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda57314Var : BV:32
20 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 8) : BOOL
24 : and(9, 23) : BOOL
25 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
26 : bvule(25, 2) : BOOL
27 : and(26, 11) : BOOL
28 : bvule(2, 2) : BOOL
29 : and(28, 5) : BOOL
30 : ite(29, 2, 2) : BV:32
31 : ite(27, 25, 30) : BV:32
32 : ite(24, 8, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 1) : BOOL
35 : bvule(1, 19) : BOOL
36 : bvule(19, 1) : BOOL
37 : and(35, 36) : BOOL
38 : bvule(16, 19) : BOOL
39 : bvule(19, 16) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 19) : BOOL
43 : bvule(19, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 16, 45) : BV:32
47 : ite(37, 1, 46) : BV:32
48 : eq(47, 1) : BOOL
49 : and(34, 48) : BOOL
50 : eq(33, 2) : BOOL
51 : and(50, 48) : BOOL
52 : ite(51, 7, 13) : BOOL
53 : ite(49, 7, 52) : BOOL
54 : lambda(19, 53) : FUNCTION[BV:32 -> BOOL]
55 : Lambda57315Var : BV:32
56 : eq(2, 2) : BOOL
57 : eq(55, 1) : BOOL
58 : and(56, 57) : BOOL
59 : eq(2, 1) : BOOL
60 : and(59, 57) : BOOL
61 : 3 { 0x3 +1.35e129 } : BV:32
62 : 4 { 0x4 +1.47e129 } : BV:32
63 : bvmul(62, 55) : BV:32
64 : bvmul(62, 2) : BV:32
65 : bvadd(61, 64) : BV:32
66 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
67 : eq(65, 66) : BOOL
68 : 240 { 0xf0 -16 } : BV:8
69 : eq(65, 61) : BOOL
70 : 91 { 0x5b } : BV:8
71 : eq(65, 16) : BOOL
72 : 217 { 0xd9 -39 } : BV:8
73 : eq(65, 1) : BOOL
74 : 184 { 0xb8 -72 } : BV:8
75 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
76 : eq(65, 75) : BOOL
77 : 234 { 0xea -22 } : BV:8
78 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
79 : eq(65, 78) : BOOL
80 : 237 { 0xed -19 } : BV:8
81 : eq(65, 41) : BOOL
82 : 250 { 0xfa -6 } : BV:8
83 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
84 : eq(65, 83) : BOOL
85 : 190 { 0xbe -66 } : BV:8
86 : 0 { 0x0 } : BV:8
87 : ite(84, 85, 86) : BV:8
88 : ite(81, 82, 87) : BV:8
89 : ite(79, 80, 88) : BV:8
90 : ite(76, 77, 89) : BV:8
91 : ite(73, 74, 90) : BV:8
92 : ite(71, 72, 91) : BV:8
93 : ite(69, 70, 92) : BV:8
94 : ite(67, 68, 93) : BV:8
95 : bvadd(41, 64) : BV:32
96 : eq(95, 66) : BOOL
97 : eq(95, 61) : BOOL
98 : eq(95, 16) : BOOL
99 : eq(95, 1) : BOOL
100 : eq(95, 75) : BOOL
101 : eq(95, 78) : BOOL
102 : eq(95, 41) : BOOL
103 : eq(95, 83) : BOOL
104 : ite(103, 85, 86) : BV:8
105 : ite(102, 82, 104) : BV:8
106 : ite(101, 80, 105) : BV:8
107 : ite(100, 77, 106) : BV:8
108 : ite(99, 74, 107) : BV:8
109 : ite(98, 72, 108) : BV:8
110 : ite(97, 70, 109) : BV:8
111 : ite(96, 68, 110) : BV:8
112 : bvadd(16, 64) : BV:32
113 : eq(112, 66) : BOOL
114 : eq(112, 61) : BOOL
115 : eq(112, 16) : BOOL
116 : eq(112, 1) : BOOL
117 : eq(112, 75) : BOOL
118 : eq(112, 78) : BOOL
119 : eq(112, 41) : BOOL
120 : eq(112, 83) : BOOL
121 : ite(120, 85, 86) : BV:8
122 : ite(119, 82, 121) : BV:8
123 : ite(118, 80, 122) : BV:8
124 : ite(117, 77, 123) : BV:8
125 : ite(116, 74, 124) : BV:8
126 : ite(115, 72, 125) : BV:8
127 : ite(114, 70, 126) : BV:8
128 : ite(113, 68, 127) : BV:8
129 : eq(64, 66) : BOOL
130 : eq(64, 61) : BOOL
131 : eq(64, 16) : BOOL
132 : eq(64, 1) : BOOL
133 : eq(64, 75) : BOOL
134 : eq(64, 78) : BOOL
135 : eq(64, 41) : BOOL
136 : eq(64, 83) : BOOL
137 : ite(136, 85, 86) : BV:8
138 : ite(135, 82, 137) : BV:8
139 : ite(134, 80, 138) : BV:8
140 : ite(133, 77, 139) : BV:8
141 : ite(132, 74, 140) : BV:8
142 : ite(131, 72, 141) : BV:8
143 : ite(130, 70, 142) : BV:8
144 : ite(129, 68, 143) : BV:8
145 : bvconcat(94, 111, 128, 144) : BV:32
146 : bvadd(61, 63, 145) : BV:32
147 : eq(146, 66) : BOOL
148 : eq(146, 61) : BOOL
149 : eq(146, 16) : BOOL
150 : eq(146, 1) : BOOL
151 : eq(146, 75) : BOOL
152 : eq(146, 78) : BOOL
153 : eq(146, 41) : BOOL
154 : eq(146, 83) : BOOL
155 : ite(154, 85, 86) : BV:8
156 : ite(153, 82, 155) : BV:8
157 : ite(152, 80, 156) : BV:8
158 : ite(151, 77, 157) : BV:8
159 : ite(150, 74, 158) : BV:8
160 : ite(149, 72, 159) : BV:8
161 : ite(148, 70, 160) : BV:8
162 : ite(147, 68, 161) : BV:8
163 : bvadd(41, 63, 145) : BV:32
164 : eq(163, 66) : BOOL
165 : eq(163, 61) : BOOL
166 : eq(163, 16) : BOOL
167 : eq(163, 1) : BOOL
168 : eq(163, 75) : BOOL
169 : eq(163, 78) : BOOL
170 : eq(163, 41) : BOOL
171 : eq(163, 83) : BOOL
172 : ite(171, 85, 86) : BV:8
173 : ite(170, 82, 172) : BV:8
174 : ite(169, 80, 173) : BV:8
175 : ite(168, 77, 174) : BV:8
176 : ite(167, 74, 175) : BV:8
177 : ite(166, 72, 176) : BV:8
178 : ite(165, 70, 177) : BV:8
179 : ite(164, 68, 178) : BV:8
180 : bvadd(16, 63, 145) : BV:32
181 : eq(180, 66) : BOOL
182 : eq(180, 61) : BOOL
183 : eq(180, 16) : BOOL
184 : eq(180, 1) : BOOL
185 : eq(180, 75) : BOOL
186 : eq(180, 78) : BOOL
187 : eq(180, 41) : BOOL
188 : eq(180, 83) : BOOL
189 : ite(188, 85, 86) : BV:8
190 : ite(187, 82, 189) : BV:8
191 : ite(186, 80, 190) : BV:8
192 : ite(185, 77, 191) : BV:8
193 : ite(184, 74, 192) : BV:8
194 : ite(183, 72, 193) : BV:8
195 : ite(182, 70, 194) : BV:8
196 : ite(181, 68, 195) : BV:8
197 : bvadd(63, 145) : BV:32
198 : eq(197, 66) : BOOL
199 : eq(197, 61) : BOOL
200 : eq(197, 16) : BOOL
201 : eq(197, 1) : BOOL
202 : eq(197, 75) : BOOL
203 : eq(197, 78) : BOOL
204 : eq(197, 41) : BOOL
205 : eq(197, 83) : BOOL
206 : ite(205, 85, 86) : BV:8
207 : ite(204, 82, 206) : BV:8
208 : ite(203, 80, 207) : BV:8
209 : ite(202, 77, 208) : BV:8
210 : ite(201, 74, 209) : BV:8
211 : ite(200, 72, 210) : BV:8
212 : ite(199, 70, 211) : BV:8
213 : ite(198, 68, 212) : BV:8
214 : bvconcat(162, 179, 196, 213) : BV:32
215 : ite(60, 1, 214) : BV:32
216 : ite(58, 1, 215) : BV:32
217 : lambda(55, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(54, 217) : MAP[BV:32 -> BV:32]
219 : sum(17, 18, 218) : SUM[UNIT,MAP[BV:32 -> BV:32]]
220 : sym_const(219) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda57330Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvule(3, 3) : BOOL
18 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 3, 3) : BV:32
22 : ite(16, 12, 21) : BV:32
23 : ite(11, 8, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : bvule(1, 2) : BOOL
28 : and(26, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 29) : BOOL
32 : and(30, 31) : BOOL
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvule(33, 1) : BOOL
35 : bvule(1, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 33, 33) : BV:32
38 : ite(32, 29, 37) : BV:32
39 : ite(28, 2, 38) : BV:32
40 : eq(39, 2) : BOOL
41 : and(25, 40) : BOOL
42 : 1 { 0x1 } : BOOL
43 : eq(24, 3) : BOOL
44 : and(43, 40) : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(44, 42, 45) : BOOL
47 : ite(41, 42, 46) : BOOL
48 : lambda(1, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda57331Var : BV:32
50 : eq(3, 3) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : eq(3, 2) : BOOL
54 : and(53, 51) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 49) : BV:32
58 : bvmul(56, 3) : BV:32
59 : bvadd(55, 58) : BV:32
60 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
61 : eq(59, 60) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : eq(59, 55) : BOOL
64 : 91 { 0x5b } : BV:8
65 : eq(59, 29) : BOOL
66 : 217 { 0xd9 -39 } : BV:8
67 : eq(59, 2) : BOOL
68 : 184 { 0xb8 -72 } : BV:8
69 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
70 : eq(59, 69) : BOOL
71 : 234 { 0xea -22 } : BV:8
72 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
73 : eq(59, 72) : BOOL
74 : 237 { 0xed -19 } : BV:8
75 : eq(59, 33) : BOOL
76 : 250 { 0xfa -6 } : BV:8
77 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
78 : eq(59, 77) : BOOL
79 : 190 { 0xbe -66 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 74, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(65, 66, 85) : BV:8
87 : ite(63, 64, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(33, 58) : BV:32
90 : eq(89, 60) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 2) : BOOL
94 : eq(89, 69) : BOOL
95 : eq(89, 72) : BOOL
96 : eq(89, 33) : BOOL
97 : eq(89, 77) : BOOL
98 : ite(97, 79, 80) : BV:8
99 : ite(96, 76, 98) : BV:8
100 : ite(95, 74, 99) : BV:8
101 : ite(94, 71, 100) : BV:8
102 : ite(93, 68, 101) : BV:8
103 : ite(92, 66, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : ite(90, 62, 104) : BV:8
106 : bvadd(29, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 55) : BOOL
109 : eq(106, 29) : BOOL
110 : eq(106, 2) : BOOL
111 : eq(106, 69) : BOOL
112 : eq(106, 72) : BOOL
113 : eq(106, 33) : BOOL
114 : eq(106, 77) : BOOL
115 : ite(114, 79, 80) : BV:8
116 : ite(113, 76, 115) : BV:8
117 : ite(112, 74, 116) : BV:8
118 : ite(111, 71, 117) : BV:8
119 : ite(110, 68, 118) : BV:8
120 : ite(109, 66, 119) : BV:8
121 : ite(108, 64, 120) : BV:8
122 : ite(107, 62, 121) : BV:8
123 : eq(58, 60) : BOOL
124 : eq(58, 55) : BOOL
125 : eq(58, 29) : BOOL
126 : eq(58, 2) : BOOL
127 : eq(58, 69) : BOOL
128 : eq(58, 72) : BOOL
129 : eq(58, 33) : BOOL
130 : eq(58, 77) : BOOL
131 : ite(130, 79, 80) : BV:8
132 : ite(129, 76, 131) : BV:8
133 : ite(128, 74, 132) : BV:8
134 : ite(127, 71, 133) : BV:8
135 : ite(126, 68, 134) : BV:8
136 : ite(125, 66, 135) : BV:8
137 : ite(124, 64, 136) : BV:8
138 : ite(123, 62, 137) : BV:8
139 : bvconcat(88, 105, 122, 138) : BV:32
140 : bvadd(55, 57, 139) : BV:32
141 : eq(140, 60) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 29) : BOOL
144 : eq(140, 2) : BOOL
145 : eq(140, 69) : BOOL
146 : eq(140, 72) : BOOL
147 : eq(140, 33) : BOOL
148 : eq(140, 77) : BOOL
149 : ite(148, 79, 80) : BV:8
150 : ite(147, 76, 149) : BV:8
151 : ite(146, 74, 150) : BV:8
152 : ite(145, 71, 151) : BV:8
153 : ite(144, 68, 152) : BV:8
154 : ite(143, 66, 153) : BV:8
155 : ite(142, 64, 154) : BV:8
156 : ite(141, 62, 155) : BV:8
157 : bvadd(33, 57, 139) : BV:32
158 : eq(157, 60) : BOOL
159 : eq(157, 55) : BOOL
160 : eq(157, 29) : BOOL
161 : eq(157, 2) : BOOL
162 : eq(157, 69) : BOOL
163 : eq(157, 72) : BOOL
164 : eq(157, 33) : BOOL
165 : eq(157, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 74, 167) : BV:8
169 : ite(162, 71, 168) : BV:8
170 : ite(161, 68, 169) : BV:8
171 : ite(160, 66, 170) : BV:8
172 : ite(159, 64, 171) : BV:8
173 : ite(158, 62, 172) : BV:8
174 : bvadd(29, 57, 139) : BV:32
175 : eq(174, 60) : BOOL
176 : eq(174, 55) : BOOL
177 : eq(174, 29) : BOOL
178 : eq(174, 2) : BOOL
179 : eq(174, 69) : BOOL
180 : eq(174, 72) : BOOL
181 : eq(174, 33) : BOOL
182 : eq(174, 77) : BOOL
183 : ite(182, 79, 80) : BV:8
184 : ite(181, 76, 183) : BV:8
185 : ite(180, 74, 184) : BV:8
186 : ite(179, 71, 185) : BV:8
187 : ite(178, 68, 186) : BV:8
188 : ite(177, 66, 187) : BV:8
189 : ite(176, 64, 188) : BV:8
190 : ite(175, 62, 189) : BV:8
191 : bvadd(57, 139) : BV:32
192 : eq(191, 60) : BOOL
193 : eq(191, 55) : BOOL
194 : eq(191, 29) : BOOL
195 : eq(191, 2) : BOOL
196 : eq(191, 69) : BOOL
197 : eq(191, 72) : BOOL
198 : eq(191, 33) : BOOL
199 : eq(191, 77) : BOOL
200 : ite(199, 79, 80) : BV:8
201 : ite(198, 76, 200) : BV:8
202 : ite(197, 74, 201) : BV:8
203 : ite(196, 71, 202) : BV:8
204 : ite(195, 68, 203) : BV:8
205 : ite(194, 66, 204) : BV:8
206 : ite(193, 64, 205) : BV:8
207 : ite(192, 62, 206) : BV:8
208 : bvconcat(156, 173, 190, 207) : BV:32
209 : ite(54, 2, 208) : BV:32
210 : ite(52, 2, 209) : BV:32
211 : lambda(49, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(48, 211) : MAP[BV:32 -> BV:32]
213 : sym_const(212) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3771733756 { 0xe0d016fc -523233540 -1.62570142e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3771733759 { 0xe0d016ff -523233537 -1.62570178e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3862300160 { 0xe6360600 -432667136 -1.42205810e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3862300163 { 0xe6360603 -432667133 -1.42205846e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4284696056 { 0xff6345f8 -10271240 -1.77557277e127 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4284696059 { 0xff6345fb -10271237 -1.77557313e127 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda57147Var : BV:32
2 : Lambda57148Var : BV:32
3 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(1, 15) : BOOL
27 : and(16, 26) : BOOL
28 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
29 : bvule(28, 1) : BOOL
30 : and(29, 18) : BOOL
31 : bvule(3, 1) : BOOL
32 : and(31, 12) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(30, 28, 33) : BV:32
35 : ite(27, 15, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 5) : BOOL
38 : bvule(5, 2) : BOOL
39 : bvule(2, 5) : BOOL
40 : and(38, 39) : BOOL
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvule(41, 2) : BOOL
43 : bvule(2, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvule(45, 2) : BOOL
47 : bvule(2, 17) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 45, 45) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 5, 50) : BV:32
52 : eq(51, 5) : BOOL
53 : and(37, 52) : BOOL
54 : eq(36, 3) : BOOL
55 : and(54, 52) : BOOL
56 : ite(55, 14, 20) : BOOL
57 : ite(53, 14, 56) : BOOL
58 : and(22, 57) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 2) : BV:32
62 : bvmul(60, 1) : BV:32
63 : bvadd(59, 62) : BV:32
64 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
65 : eq(63, 64) : BOOL
66 : 240 { 0xf0 -16 } : BV:8
67 : eq(63, 59) : BOOL
68 : 91 { 0x5b } : BV:8
69 : eq(63, 41) : BOOL
70 : 217 { 0xd9 -39 } : BV:8
71 : eq(63, 5) : BOOL
72 : 184 { 0xb8 -72 } : BV:8
73 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
74 : eq(63, 73) : BOOL
75 : 234 { 0xea -22 } : BV:8
76 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
77 : eq(63, 76) : BOOL
78 : 237 { 0xed -19 } : BV:8
79 : eq(63, 45) : BOOL
80 : 250 { 0xfa -6 } : BV:8
81 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
82 : eq(63, 81) : BOOL
83 : 190 { 0xbe -66 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(67, 68, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : bvadd(45, 62) : BV:32
94 : eq(93, 64) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 41) : BOOL
97 : eq(93, 5) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 45) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 70, 106) : BV:8
108 : ite(95, 68, 107) : BV:8
109 : ite(94, 66, 108) : BV:8
110 : bvadd(41, 62) : BV:32
111 : eq(110, 64) : BOOL
112 : eq(110, 59) : BOOL
113 : eq(110, 41) : BOOL
114 : eq(110, 5) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 45) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 70, 123) : BV:8
125 : ite(112, 68, 124) : BV:8
126 : ite(111, 66, 125) : BV:8
127 : eq(62, 64) : BOOL
128 : eq(62, 59) : BOOL
129 : eq(62, 41) : BOOL
130 : eq(62, 5) : BOOL
131 : eq(62, 73) : BOOL
132 : eq(62, 76) : BOOL
133 : eq(62, 45) : BOOL
134 : eq(62, 81) : BOOL
135 : ite(134, 83, 84) : BV:8
136 : ite(133, 80, 135) : BV:8
137 : ite(132, 78, 136) : BV:8
138 : ite(131, 75, 137) : BV:8
139 : ite(130, 72, 138) : BV:8
140 : ite(129, 70, 139) : BV:8
141 : ite(128, 68, 140) : BV:8
142 : ite(127, 66, 141) : BV:8
143 : bvconcat(92, 109, 126, 142) : BV:32
144 : bvadd(59, 61, 143) : BV:32
145 : eq(144, 64) : BOOL
146 : eq(144, 59) : BOOL
147 : eq(144, 41) : BOOL
148 : eq(144, 5) : BOOL
149 : eq(144, 73) : BOOL
150 : eq(144, 76) : BOOL
151 : eq(144, 45) : BOOL
152 : eq(144, 81) : BOOL
153 : ite(152, 83, 84) : BV:8
154 : ite(151, 80, 153) : BV:8
155 : ite(150, 78, 154) : BV:8
156 : ite(149, 75, 155) : BV:8
157 : ite(148, 72, 156) : BV:8
158 : ite(147, 70, 157) : BV:8
159 : ite(146, 68, 158) : BV:8
160 : ite(145, 66, 159) : BV:8
161 : bvadd(45, 61, 143) : BV:32
162 : eq(161, 64) : BOOL
163 : eq(161, 59) : BOOL
164 : eq(161, 41) : BOOL
165 : eq(161, 5) : BOOL
166 : eq(161, 73) : BOOL
167 : eq(161, 76) : BOOL
168 : eq(161, 45) : BOOL
169 : eq(161, 81) : BOOL
170 : ite(169, 83, 84) : BV:8
171 : ite(168, 80, 170) : BV:8
172 : ite(167, 78, 171) : BV:8
173 : ite(166, 75, 172) : BV:8
174 : ite(165, 72, 173) : BV:8
175 : ite(164, 70, 174) : BV:8
176 : ite(163, 68, 175) : BV:8
177 : ite(162, 66, 176) : BV:8
178 : bvadd(41, 61, 143) : BV:32
179 : eq(178, 64) : BOOL
180 : eq(178, 59) : BOOL
181 : eq(178, 41) : BOOL
182 : eq(178, 5) : BOOL
183 : eq(178, 73) : BOOL
184 : eq(178, 76) : BOOL
185 : eq(178, 45) : BOOL
186 : eq(178, 81) : BOOL
187 : ite(186, 83, 84) : BV:8
188 : ite(185, 80, 187) : BV:8
189 : ite(184, 78, 188) : BV:8
190 : ite(183, 75, 189) : BV:8
191 : ite(182, 72, 190) : BV:8
192 : ite(181, 70, 191) : BV:8
193 : ite(180, 68, 192) : BV:8
194 : ite(179, 66, 193) : BV:8
195 : bvadd(61, 143) : BV:32
196 : eq(195, 64) : BOOL
197 : eq(195, 59) : BOOL
198 : eq(195, 41) : BOOL
199 : eq(195, 5) : BOOL
200 : eq(195, 73) : BOOL
201 : eq(195, 76) : BOOL
202 : eq(195, 45) : BOOL
203 : eq(195, 81) : BOOL
204 : ite(203, 83, 84) : BV:8
205 : ite(202, 80, 204) : BV:8
206 : ite(201, 78, 205) : BV:8
207 : ite(200, 75, 206) : BV:8
208 : ite(199, 72, 207) : BV:8
209 : ite(198, 70, 208) : BV:8
210 : ite(197, 68, 209) : BV:8
211 : ite(196, 66, 210) : BV:8
212 : bvconcat(160, 177, 194, 211) : BV:32
213 : ite(9, 5, 212) : BV:32
214 : ite(7, 5, 213) : BV:32
215 : ite(58, 212, 214) : BV:32
216 : ite(9, 5, 215) : BV:32
217 : ite(7, 5, 216) : BV:32
218 : lambda(1, 2, 217) : FUNCTION[BV:32,BV:32 -> BV:32]
219 : sym_const(218) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda57152Var : BV:32
2 : Lambda57153Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 14) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(25, 17) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2379298441 ] -> true, [ 2379298442; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2379298441 ] -> true, [ 2379298442; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda57161Var : BV:32
2 : Lambda57162Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 14) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(25, 17) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda57157Var : BV:32
2 : Lambda57158Var : BV:32
3 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
16 : eq(14, 15) : BOOL
17 : 240 { 0xf0 -16 } : BV:8
18 : eq(14, 10) : BOOL
19 : 91 { 0x5b } : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(14, 20) : BOOL
22 : 217 { 0xd9 -39 } : BV:8
23 : eq(14, 5) : BOOL
24 : 184 { 0xb8 -72 } : BV:8
25 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
26 : eq(14, 25) : BOOL
27 : 234 { 0xea -22 } : BV:8
28 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
29 : eq(14, 28) : BOOL
30 : 237 { 0xed -19 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 250 { 0xfa -6 } : BV:8
34 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
35 : eq(14, 34) : BOOL
36 : 190 { 0xbe -66 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(21, 22, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(16, 17, 44) : BV:8
46 : bvadd(31, 13) : BV:32
47 : eq(46, 15) : BOOL
48 : eq(46, 10) : BOOL
49 : eq(46, 20) : BOOL
50 : eq(46, 5) : BOOL
51 : eq(46, 25) : BOOL
52 : eq(46, 28) : BOOL
53 : eq(46, 31) : BOOL
54 : eq(46, 34) : BOOL
55 : ite(54, 36, 37) : BV:8
56 : ite(53, 33, 55) : BV:8
57 : ite(52, 30, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : ite(50, 24, 58) : BV:8
60 : ite(49, 22, 59) : BV:8
61 : ite(48, 19, 60) : BV:8
62 : ite(47, 17, 61) : BV:8
63 : bvadd(20, 13) : BV:32
64 : eq(63, 15) : BOOL
65 : eq(63, 10) : BOOL
66 : eq(63, 20) : BOOL
67 : eq(63, 5) : BOOL
68 : eq(63, 25) : BOOL
69 : eq(63, 28) : BOOL
70 : eq(63, 31) : BOOL
71 : eq(63, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 27, 74) : BV:8
76 : ite(67, 24, 75) : BV:8
77 : ite(66, 22, 76) : BV:8
78 : ite(65, 19, 77) : BV:8
79 : ite(64, 17, 78) : BV:8
80 : eq(13, 15) : BOOL
81 : eq(13, 10) : BOOL
82 : eq(13, 20) : BOOL
83 : eq(13, 5) : BOOL
84 : eq(13, 25) : BOOL
85 : eq(13, 28) : BOOL
86 : eq(13, 31) : BOOL
87 : eq(13, 34) : BOOL
88 : ite(87, 36, 37) : BV:8
89 : ite(86, 33, 88) : BV:8
90 : ite(85, 30, 89) : BV:8
91 : ite(84, 27, 90) : BV:8
92 : ite(83, 24, 91) : BV:8
93 : ite(82, 22, 92) : BV:8
94 : ite(81, 19, 93) : BV:8
95 : ite(80, 17, 94) : BV:8
96 : bvconcat(45, 62, 79, 95) : BV:32
97 : bvadd(10, 12, 96) : BV:32
98 : eq(97, 15) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 20) : BOOL
101 : eq(97, 5) : BOOL
102 : eq(97, 25) : BOOL
103 : eq(97, 28) : BOOL
104 : eq(97, 31) : BOOL
105 : eq(97, 34) : BOOL
106 : ite(105, 36, 37) : BV:8
107 : ite(104, 33, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 27, 108) : BV:8
110 : ite(101, 24, 109) : BV:8
111 : ite(100, 22, 110) : BV:8
112 : ite(99, 19, 111) : BV:8
113 : ite(98, 17, 112) : BV:8
114 : bvadd(31, 12, 96) : BV:32
115 : eq(114, 15) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 20) : BOOL
118 : eq(114, 5) : BOOL
119 : eq(114, 25) : BOOL
120 : eq(114, 28) : BOOL
121 : eq(114, 31) : BOOL
122 : eq(114, 34) : BOOL
123 : ite(122, 36, 37) : BV:8
124 : ite(121, 33, 123) : BV:8
125 : ite(120, 30, 124) : BV:8
126 : ite(119, 27, 125) : BV:8
127 : ite(118, 24, 126) : BV:8
128 : ite(117, 22, 127) : BV:8
129 : ite(116, 19, 128) : BV:8
130 : ite(115, 17, 129) : BV:8
131 : bvadd(20, 12, 96) : BV:32
132 : eq(131, 15) : BOOL
133 : eq(131, 10) : BOOL
134 : eq(131, 20) : BOOL
135 : eq(131, 5) : BOOL
136 : eq(131, 25) : BOOL
137 : eq(131, 28) : BOOL
138 : eq(131, 31) : BOOL
139 : eq(131, 34) : BOOL
140 : ite(139, 36, 37) : BV:8
141 : ite(138, 33, 140) : BV:8
142 : ite(137, 30, 141) : BV:8
143 : ite(136, 27, 142) : BV:8
144 : ite(135, 24, 143) : BV:8
145 : ite(134, 22, 144) : BV:8
146 : ite(133, 19, 145) : BV:8
147 : ite(132, 17, 146) : BV:8
148 : bvadd(12, 96) : BV:32
149 : eq(148, 15) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 20) : BOOL
152 : eq(148, 5) : BOOL
153 : eq(148, 25) : BOOL
154 : eq(148, 28) : BOOL
155 : eq(148, 31) : BOOL
156 : eq(148, 34) : BOOL
157 : ite(156, 36, 37) : BV:8
158 : ite(155, 33, 157) : BV:8
159 : ite(154, 30, 158) : BV:8
160 : ite(153, 27, 159) : BV:8
161 : ite(152, 24, 160) : BV:8
162 : ite(151, 22, 161) : BV:8
163 : ite(150, 19, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : bvconcat(113, 130, 147, 164) : BV:32
166 : ite(9, 5, 165) : BV:32
167 : ite(7, 5, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
287892332
=counter_example_end
=global nodece 66 num_edges_traversed 1
=global nodece 66 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 67
=global nodece 67 nodece z3.ce4687.num_edges_traversed2
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(epsilon)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3.ce4687 3d866bc07320ea74784dee7acc8d2
=input.spec-%var-x-1
1 : Lambda57217Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57218Var : BV:32
18 : Lambda57219Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 8) : BOOL
25 : and(23, 24) : BOOL
26 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
27 : bvule(26, 17) : BOOL
28 : bvule(17, 10) : BOOL
29 : and(27, 28) : BOOL
30 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 4) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 26, 34) : BV:32
36 : ite(25, 8, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 30) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 7, 13) : BOOL
58 : ite(54, 7, 57) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda57220Var : BV:32
61 : eq(17, 30) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 2) : BOOL
65 : and(64, 62) : BOOL
66 : and(19, 32) : BOOL
67 : and(23, 28) : BOOL
68 : ite(67, 13, 13) : BOOL
69 : ite(66, 7, 68) : BOOL
70 : bvule(2, 60) : BOOL
71 : bvule(60, 2) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(42, 60) : BOOL
74 : bvule(60, 42) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(46, 60) : BOOL
77 : bvule(60, 10) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 46, 46) : BV:32
80 : ite(75, 42, 79) : BV:32
81 : ite(72, 2, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : and(38, 82) : BOOL
84 : and(55, 82) : BOOL
85 : ite(84, 7, 13) : BOOL
86 : ite(83, 7, 85) : BOOL
87 : and(69, 86) : BOOL
88 : 3 { 0x3 +1.35e129 } : BV:32
89 : 4 { 0x4 +1.47e129 } : BV:32
90 : bvmul(89, 60) : BV:32
91 : bvmul(89, 17) : BV:32
92 : bvadd(88, 91) : BV:32
93 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
94 : eq(92, 93) : BOOL
95 : 240 { 0xf0 -16 } : BV:8
96 : eq(92, 88) : BOOL
97 : 91 { 0x5b } : BV:8
98 : eq(92, 42) : BOOL
99 : 217 { 0xd9 -39 } : BV:8
100 : eq(92, 2) : BOOL
101 : 184 { 0xb8 -72 } : BV:8
102 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
103 : eq(92, 102) : BOOL
104 : 234 { 0xea -22 } : BV:8
105 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
106 : eq(92, 105) : BOOL
107 : 237 { 0xed -19 } : BV:8
108 : eq(92, 46) : BOOL
109 : 250 { 0xfa -6 } : BV:8
110 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
111 : eq(92, 110) : BOOL
112 : 190 { 0xbe -66 } : BV:8
113 : 0 { 0x0 } : BV:8
114 : ite(111, 112, 113) : BV:8
115 : ite(108, 109, 114) : BV:8
116 : ite(106, 107, 115) : BV:8
117 : ite(103, 104, 116) : BV:8
118 : ite(100, 101, 117) : BV:8
119 : ite(98, 99, 118) : BV:8
120 : ite(96, 97, 119) : BV:8
121 : ite(94, 95, 120) : BV:8
122 : bvadd(46, 91) : BV:32
123 : eq(122, 93) : BOOL
124 : eq(122, 88) : BOOL
125 : eq(122, 42) : BOOL
126 : eq(122, 2) : BOOL
127 : eq(122, 102) : BOOL
128 : eq(122, 105) : BOOL
129 : eq(122, 46) : BOOL
130 : eq(122, 110) : BOOL
131 : ite(130, 112, 113) : BV:8
132 : ite(129, 109, 131) : BV:8
133 : ite(128, 107, 132) : BV:8
134 : ite(127, 104, 133) : BV:8
135 : ite(126, 101, 134) : BV:8
136 : ite(125, 99, 135) : BV:8
137 : ite(124, 97, 136) : BV:8
138 : ite(123, 95, 137) : BV:8
139 : bvadd(42, 91) : BV:32
140 : eq(139, 93) : BOOL
141 : eq(139, 88) : BOOL
142 : eq(139, 42) : BOOL
143 : eq(139, 2) : BOOL
144 : eq(139, 102) : BOOL
145 : eq(139, 105) : BOOL
146 : eq(139, 46) : BOOL
147 : eq(139, 110) : BOOL
148 : ite(147, 112, 113) : BV:8
149 : ite(146, 109, 148) : BV:8
150 : ite(145, 107, 149) : BV:8
151 : ite(144, 104, 150) : BV:8
152 : ite(143, 101, 151) : BV:8
153 : ite(142, 99, 152) : BV:8
154 : ite(141, 97, 153) : BV:8
155 : ite(140, 95, 154) : BV:8
156 : eq(91, 93) : BOOL
157 : eq(91, 88) : BOOL
158 : eq(91, 42) : BOOL
159 : eq(91, 2) : BOOL
160 : eq(91, 102) : BOOL
161 : eq(91, 105) : BOOL
162 : eq(91, 46) : BOOL
163 : eq(91, 110) : BOOL
164 : ite(163, 112, 113) : BV:8
165 : ite(162, 109, 164) : BV:8
166 : ite(161, 107, 165) : BV:8
167 : ite(160, 104, 166) : BV:8
168 : ite(159, 101, 167) : BV:8
169 : ite(158, 99, 168) : BV:8
170 : ite(157, 97, 169) : BV:8
171 : ite(156, 95, 170) : BV:8
172 : bvconcat(121, 138, 155, 171) : BV:32
173 : bvadd(88, 90, 172) : BV:32
174 : eq(173, 93) : BOOL
175 : eq(173, 88) : BOOL
176 : eq(173, 42) : BOOL
177 : eq(173, 2) : BOOL
178 : eq(173, 102) : BOOL
179 : eq(173, 105) : BOOL
180 : eq(173, 46) : BOOL
181 : eq(173, 110) : BOOL
182 : ite(181, 112, 113) : BV:8
183 : ite(180, 109, 182) : BV:8
184 : ite(179, 107, 183) : BV:8
185 : ite(178, 104, 184) : BV:8
186 : ite(177, 101, 185) : BV:8
187 : ite(176, 99, 186) : BV:8
188 : ite(175, 97, 187) : BV:8
189 : ite(174, 95, 188) : BV:8
190 : bvadd(46, 90, 172) : BV:32
191 : eq(190, 93) : BOOL
192 : eq(190, 88) : BOOL
193 : eq(190, 42) : BOOL
194 : eq(190, 2) : BOOL
195 : eq(190, 102) : BOOL
196 : eq(190, 105) : BOOL
197 : eq(190, 46) : BOOL
198 : eq(190, 110) : BOOL
199 : ite(198, 112, 113) : BV:8
200 : ite(197, 109, 199) : BV:8
201 : ite(196, 107, 200) : BV:8
202 : ite(195, 104, 201) : BV:8
203 : ite(194, 101, 202) : BV:8
204 : ite(193, 99, 203) : BV:8
205 : ite(192, 97, 204) : BV:8
206 : ite(191, 95, 205) : BV:8
207 : bvadd(42, 90, 172) : BV:32
208 : eq(207, 93) : BOOL
209 : eq(207, 88) : BOOL
210 : eq(207, 42) : BOOL
211 : eq(207, 2) : BOOL
212 : eq(207, 102) : BOOL
213 : eq(207, 105) : BOOL
214 : eq(207, 46) : BOOL
215 : eq(207, 110) : BOOL
216 : ite(215, 112, 113) : BV:8
217 : ite(214, 109, 216) : BV:8
218 : ite(213, 107, 217) : BV:8
219 : ite(212, 104, 218) : BV:8
220 : ite(211, 101, 219) : BV:8
221 : ite(210, 99, 220) : BV:8
222 : ite(209, 97, 221) : BV:8
223 : ite(208, 95, 222) : BV:8
224 : bvadd(90, 172) : BV:32
225 : eq(224, 93) : BOOL
226 : eq(224, 88) : BOOL
227 : eq(224, 42) : BOOL
228 : eq(224, 2) : BOOL
229 : eq(224, 102) : BOOL
230 : eq(224, 105) : BOOL
231 : eq(224, 46) : BOOL
232 : eq(224, 110) : BOOL
233 : ite(232, 112, 113) : BV:8
234 : ite(231, 109, 233) : BV:8
235 : ite(230, 107, 234) : BV:8
236 : ite(229, 104, 235) : BV:8
237 : ite(228, 101, 236) : BV:8
238 : ite(227, 99, 237) : BV:8
239 : ite(226, 97, 238) : BV:8
240 : ite(225, 95, 239) : BV:8
241 : bvconcat(189, 206, 223, 240) : BV:32
242 : ite(65, 2, 241) : BV:32
243 : ite(63, 2, 242) : BV:32
244 : ite(87, 241, 243) : BV:32
245 : ite(65, 2, 244) : BV:32
246 : ite(63, 2, 245) : BV:32
247 : lambda(60, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(59, 247) : MAP[BV:32 -> BV:32]
249 : lambda(17, 248) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
250 : map(16, 249) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
251 : sym_const(250) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda57230Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57231Var : BV:32
18 : Lambda57232Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 8) : BOOL
25 : and(23, 24) : BOOL
26 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
27 : bvule(26, 17) : BOOL
28 : bvule(17, 10) : BOOL
29 : and(27, 28) : BOOL
30 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 4) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 26, 34) : BV:32
36 : ite(25, 8, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 30) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 7, 13) : BOOL
58 : ite(54, 7, 57) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda57233Var : BV:32
61 : eq(17, 30) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 2) : BOOL
65 : and(64, 62) : BOOL
66 : 3 { 0x3 +1.35e129 } : BV:32
67 : 4 { 0x4 +1.47e129 } : BV:32
68 : bvmul(67, 60) : BV:32
69 : bvmul(67, 17) : BV:32
70 : bvadd(66, 69) : BV:32
71 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
72 : eq(70, 71) : BOOL
73 : 240 { 0xf0 -16 } : BV:8
74 : eq(70, 66) : BOOL
75 : 91 { 0x5b } : BV:8
76 : eq(70, 42) : BOOL
77 : 217 { 0xd9 -39 } : BV:8
78 : eq(70, 2) : BOOL
79 : 184 { 0xb8 -72 } : BV:8
80 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
81 : eq(70, 80) : BOOL
82 : 234 { 0xea -22 } : BV:8
83 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
84 : eq(70, 83) : BOOL
85 : 237 { 0xed -19 } : BV:8
86 : eq(70, 46) : BOOL
87 : 250 { 0xfa -6 } : BV:8
88 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
89 : eq(70, 88) : BOOL
90 : 190 { 0xbe -66 } : BV:8
91 : 0 { 0x0 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(86, 87, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(81, 82, 94) : BV:8
96 : ite(78, 79, 95) : BV:8
97 : ite(76, 77, 96) : BV:8
98 : ite(74, 75, 97) : BV:8
99 : ite(72, 73, 98) : BV:8
100 : bvadd(46, 69) : BV:32
101 : eq(100, 71) : BOOL
102 : eq(100, 66) : BOOL
103 : eq(100, 42) : BOOL
104 : eq(100, 2) : BOOL
105 : eq(100, 80) : BOOL
106 : eq(100, 83) : BOOL
107 : eq(100, 46) : BOOL
108 : eq(100, 88) : BOOL
109 : ite(108, 90, 91) : BV:8
110 : ite(107, 87, 109) : BV:8
111 : ite(106, 85, 110) : BV:8
112 : ite(105, 82, 111) : BV:8
113 : ite(104, 79, 112) : BV:8
114 : ite(103, 77, 113) : BV:8
115 : ite(102, 75, 114) : BV:8
116 : ite(101, 73, 115) : BV:8
117 : bvadd(42, 69) : BV:32
118 : eq(117, 71) : BOOL
119 : eq(117, 66) : BOOL
120 : eq(117, 42) : BOOL
121 : eq(117, 2) : BOOL
122 : eq(117, 80) : BOOL
123 : eq(117, 83) : BOOL
124 : eq(117, 46) : BOOL
125 : eq(117, 88) : BOOL
126 : ite(125, 90, 91) : BV:8
127 : ite(124, 87, 126) : BV:8
128 : ite(123, 85, 127) : BV:8
129 : ite(122, 82, 128) : BV:8
130 : ite(121, 79, 129) : BV:8
131 : ite(120, 77, 130) : BV:8
132 : ite(119, 75, 131) : BV:8
133 : ite(118, 73, 132) : BV:8
134 : eq(69, 71) : BOOL
135 : eq(69, 66) : BOOL
136 : eq(69, 42) : BOOL
137 : eq(69, 2) : BOOL
138 : eq(69, 80) : BOOL
139 : eq(69, 83) : BOOL
140 : eq(69, 46) : BOOL
141 : eq(69, 88) : BOOL
142 : ite(141, 90, 91) : BV:8
143 : ite(140, 87, 142) : BV:8
144 : ite(139, 85, 143) : BV:8
145 : ite(138, 82, 144) : BV:8
146 : ite(137, 79, 145) : BV:8
147 : ite(136, 77, 146) : BV:8
148 : ite(135, 75, 147) : BV:8
149 : ite(134, 73, 148) : BV:8
150 : bvconcat(99, 116, 133, 149) : BV:32
151 : bvadd(66, 68, 150) : BV:32
152 : eq(151, 71) : BOOL
153 : eq(151, 66) : BOOL
154 : eq(151, 42) : BOOL
155 : eq(151, 2) : BOOL
156 : eq(151, 80) : BOOL
157 : eq(151, 83) : BOOL
158 : eq(151, 46) : BOOL
159 : eq(151, 88) : BOOL
160 : ite(159, 90, 91) : BV:8
161 : ite(158, 87, 160) : BV:8
162 : ite(157, 85, 161) : BV:8
163 : ite(156, 82, 162) : BV:8
164 : ite(155, 79, 163) : BV:8
165 : ite(154, 77, 164) : BV:8
166 : ite(153, 75, 165) : BV:8
167 : ite(152, 73, 166) : BV:8
168 : bvadd(46, 68, 150) : BV:32
169 : eq(168, 71) : BOOL
170 : eq(168, 66) : BOOL
171 : eq(168, 42) : BOOL
172 : eq(168, 2) : BOOL
173 : eq(168, 80) : BOOL
174 : eq(168, 83) : BOOL
175 : eq(168, 46) : BOOL
176 : eq(168, 88) : BOOL
177 : ite(176, 90, 91) : BV:8
178 : ite(175, 87, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 82, 179) : BV:8
181 : ite(172, 79, 180) : BV:8
182 : ite(171, 77, 181) : BV:8
183 : ite(170, 75, 182) : BV:8
184 : ite(169, 73, 183) : BV:8
185 : bvadd(42, 68, 150) : BV:32
186 : eq(185, 71) : BOOL
187 : eq(185, 66) : BOOL
188 : eq(185, 42) : BOOL
189 : eq(185, 2) : BOOL
190 : eq(185, 80) : BOOL
191 : eq(185, 83) : BOOL
192 : eq(185, 46) : BOOL
193 : eq(185, 88) : BOOL
194 : ite(193, 90, 91) : BV:8
195 : ite(192, 87, 194) : BV:8
196 : ite(191, 85, 195) : BV:8
197 : ite(190, 82, 196) : BV:8
198 : ite(189, 79, 197) : BV:8
199 : ite(188, 77, 198) : BV:8
200 : ite(187, 75, 199) : BV:8
201 : ite(186, 73, 200) : BV:8
202 : bvadd(68, 150) : BV:32
203 : eq(202, 71) : BOOL
204 : eq(202, 66) : BOOL
205 : eq(202, 42) : BOOL
206 : eq(202, 2) : BOOL
207 : eq(202, 80) : BOOL
208 : eq(202, 83) : BOOL
209 : eq(202, 46) : BOOL
210 : eq(202, 88) : BOOL
211 : ite(210, 90, 91) : BV:8
212 : ite(209, 87, 211) : BV:8
213 : ite(208, 85, 212) : BV:8
214 : ite(207, 82, 213) : BV:8
215 : ite(206, 79, 214) : BV:8
216 : ite(205, 77, 215) : BV:8
217 : ite(204, 75, 216) : BV:8
218 : ite(203, 73, 217) : BV:8
219 : bvconcat(167, 184, 201, 218) : BV:32
220 : ite(65, 2, 219) : BV:32
221 : ite(63, 2, 220) : BV:32
222 : lambda(60, 221) : FUNCTION[BV:32 -> BV:32]
223 : map(59, 222) : MAP[BV:32 -> BV:32]
224 : lambda(17, 223) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
225 : map(16, 224) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
226 : sym_const(225) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 184, [ 1; 1 ] -> 217, [ 2; 2 ] -> 250, [ 3; 3 ] -> 91, [ 4; 1033001635 ] -> 0, [ 1033001636; 1033001636 ] -> 240, [ 1033001637; 1033001637 ] -> 234, [ 1033001638; 1033001638 ] -> 237, [ 1033001639; 1033001639 ] -> 190, [ 1033001640; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3771733755 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3771733756; 3771733759 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3771733760; 3862300159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3862300160; 3862300163 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3862300164; 4284696055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4284696056; 4284696059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4284696060; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4284696056 { 0xff6345f8 -10271240 -1.77557277e127 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3771733756 { 0xe0d016fc -523233540 -1.62570142e66 } : BV:32
=input.dst.llvm-%n
1 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3862300160 { 0xe6360600 -432667136 -1.42205810e77 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda57324Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvule(3, 3) : BOOL
18 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 3, 3) : BV:32
22 : ite(16, 12, 21) : BV:32
23 : ite(11, 8, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : bvule(1, 2) : BOOL
28 : and(26, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 29) : BOOL
32 : and(30, 31) : BOOL
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvule(33, 1) : BOOL
35 : bvule(1, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 33, 33) : BV:32
38 : ite(32, 29, 37) : BV:32
39 : ite(28, 2, 38) : BV:32
40 : eq(39, 2) : BOOL
41 : and(25, 40) : BOOL
42 : 1 { 0x1 } : BOOL
43 : eq(24, 3) : BOOL
44 : and(43, 40) : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(44, 42, 45) : BOOL
47 : ite(41, 42, 46) : BOOL
48 : lambda(1, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda57325Var : BV:32
50 : eq(3, 3) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : eq(3, 2) : BOOL
54 : and(53, 51) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 49) : BV:32
58 : bvmul(56, 3) : BV:32
59 : bvadd(55, 58) : BV:32
60 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
61 : eq(59, 60) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : eq(59, 55) : BOOL
64 : 91 { 0x5b } : BV:8
65 : eq(59, 29) : BOOL
66 : 217 { 0xd9 -39 } : BV:8
67 : eq(59, 2) : BOOL
68 : 184 { 0xb8 -72 } : BV:8
69 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
70 : eq(59, 69) : BOOL
71 : 234 { 0xea -22 } : BV:8
72 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
73 : eq(59, 72) : BOOL
74 : 237 { 0xed -19 } : BV:8
75 : eq(59, 33) : BOOL
76 : 250 { 0xfa -6 } : BV:8
77 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
78 : eq(59, 77) : BOOL
79 : 190 { 0xbe -66 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 74, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(65, 66, 85) : BV:8
87 : ite(63, 64, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(33, 58) : BV:32
90 : eq(89, 60) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 2) : BOOL
94 : eq(89, 69) : BOOL
95 : eq(89, 72) : BOOL
96 : eq(89, 33) : BOOL
97 : eq(89, 77) : BOOL
98 : ite(97, 79, 80) : BV:8
99 : ite(96, 76, 98) : BV:8
100 : ite(95, 74, 99) : BV:8
101 : ite(94, 71, 100) : BV:8
102 : ite(93, 68, 101) : BV:8
103 : ite(92, 66, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : ite(90, 62, 104) : BV:8
106 : bvadd(29, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 55) : BOOL
109 : eq(106, 29) : BOOL
110 : eq(106, 2) : BOOL
111 : eq(106, 69) : BOOL
112 : eq(106, 72) : BOOL
113 : eq(106, 33) : BOOL
114 : eq(106, 77) : BOOL
115 : ite(114, 79, 80) : BV:8
116 : ite(113, 76, 115) : BV:8
117 : ite(112, 74, 116) : BV:8
118 : ite(111, 71, 117) : BV:8
119 : ite(110, 68, 118) : BV:8
120 : ite(109, 66, 119) : BV:8
121 : ite(108, 64, 120) : BV:8
122 : ite(107, 62, 121) : BV:8
123 : eq(58, 60) : BOOL
124 : eq(58, 55) : BOOL
125 : eq(58, 29) : BOOL
126 : eq(58, 2) : BOOL
127 : eq(58, 69) : BOOL
128 : eq(58, 72) : BOOL
129 : eq(58, 33) : BOOL
130 : eq(58, 77) : BOOL
131 : ite(130, 79, 80) : BV:8
132 : ite(129, 76, 131) : BV:8
133 : ite(128, 74, 132) : BV:8
134 : ite(127, 71, 133) : BV:8
135 : ite(126, 68, 134) : BV:8
136 : ite(125, 66, 135) : BV:8
137 : ite(124, 64, 136) : BV:8
138 : ite(123, 62, 137) : BV:8
139 : bvconcat(88, 105, 122, 138) : BV:32
140 : bvadd(55, 57, 139) : BV:32
141 : eq(140, 60) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 29) : BOOL
144 : eq(140, 2) : BOOL
145 : eq(140, 69) : BOOL
146 : eq(140, 72) : BOOL
147 : eq(140, 33) : BOOL
148 : eq(140, 77) : BOOL
149 : ite(148, 79, 80) : BV:8
150 : ite(147, 76, 149) : BV:8
151 : ite(146, 74, 150) : BV:8
152 : ite(145, 71, 151) : BV:8
153 : ite(144, 68, 152) : BV:8
154 : ite(143, 66, 153) : BV:8
155 : ite(142, 64, 154) : BV:8
156 : ite(141, 62, 155) : BV:8
157 : bvadd(33, 57, 139) : BV:32
158 : eq(157, 60) : BOOL
159 : eq(157, 55) : BOOL
160 : eq(157, 29) : BOOL
161 : eq(157, 2) : BOOL
162 : eq(157, 69) : BOOL
163 : eq(157, 72) : BOOL
164 : eq(157, 33) : BOOL
165 : eq(157, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 74, 167) : BV:8
169 : ite(162, 71, 168) : BV:8
170 : ite(161, 68, 169) : BV:8
171 : ite(160, 66, 170) : BV:8
172 : ite(159, 64, 171) : BV:8
173 : ite(158, 62, 172) : BV:8
174 : bvadd(29, 57, 139) : BV:32
175 : eq(174, 60) : BOOL
176 : eq(174, 55) : BOOL
177 : eq(174, 29) : BOOL
178 : eq(174, 2) : BOOL
179 : eq(174, 69) : BOOL
180 : eq(174, 72) : BOOL
181 : eq(174, 33) : BOOL
182 : eq(174, 77) : BOOL
183 : ite(182, 79, 80) : BV:8
184 : ite(181, 76, 183) : BV:8
185 : ite(180, 74, 184) : BV:8
186 : ite(179, 71, 185) : BV:8
187 : ite(178, 68, 186) : BV:8
188 : ite(177, 66, 187) : BV:8
189 : ite(176, 64, 188) : BV:8
190 : ite(175, 62, 189) : BV:8
191 : bvadd(57, 139) : BV:32
192 : eq(191, 60) : BOOL
193 : eq(191, 55) : BOOL
194 : eq(191, 29) : BOOL
195 : eq(191, 2) : BOOL
196 : eq(191, 69) : BOOL
197 : eq(191, 72) : BOOL
198 : eq(191, 33) : BOOL
199 : eq(191, 77) : BOOL
200 : ite(199, 79, 80) : BV:8
201 : ite(198, 76, 200) : BV:8
202 : ite(197, 74, 201) : BV:8
203 : ite(196, 71, 202) : BV:8
204 : ite(195, 68, 203) : BV:8
205 : ite(194, 66, 204) : BV:8
206 : ite(193, 64, 205) : BV:8
207 : ite(192, 62, 206) : BV:8
208 : bvconcat(156, 173, 190, 207) : BV:32
209 : ite(54, 2, 208) : BV:32
210 : ite(52, 2, 209) : BV:32
211 : lambda(49, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(48, 211) : MAP[BV:32 -> BV:32]
213 : sym_const(212) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 258250410 { 0xf6496aa +1.78584790e159 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda57314Var : BV:32
20 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 8) : BOOL
24 : and(9, 23) : BOOL
25 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
26 : bvule(25, 2) : BOOL
27 : and(26, 11) : BOOL
28 : bvule(2, 2) : BOOL
29 : and(28, 5) : BOOL
30 : ite(29, 2, 2) : BV:32
31 : ite(27, 25, 30) : BV:32
32 : ite(24, 8, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 1) : BOOL
35 : bvule(1, 19) : BOOL
36 : bvule(19, 1) : BOOL
37 : and(35, 36) : BOOL
38 : bvule(16, 19) : BOOL
39 : bvule(19, 16) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 19) : BOOL
43 : bvule(19, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 16, 45) : BV:32
47 : ite(37, 1, 46) : BV:32
48 : eq(47, 1) : BOOL
49 : and(34, 48) : BOOL
50 : eq(33, 2) : BOOL
51 : and(50, 48) : BOOL
52 : ite(51, 7, 13) : BOOL
53 : ite(49, 7, 52) : BOOL
54 : lambda(19, 53) : FUNCTION[BV:32 -> BOOL]
55 : Lambda57315Var : BV:32
56 : eq(2, 2) : BOOL
57 : eq(55, 1) : BOOL
58 : and(56, 57) : BOOL
59 : eq(2, 1) : BOOL
60 : and(59, 57) : BOOL
61 : 3 { 0x3 +1.35e129 } : BV:32
62 : 4 { 0x4 +1.47e129 } : BV:32
63 : bvmul(62, 55) : BV:32
64 : bvmul(62, 2) : BV:32
65 : bvadd(61, 64) : BV:32
66 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
67 : eq(65, 66) : BOOL
68 : 240 { 0xf0 -16 } : BV:8
69 : eq(65, 61) : BOOL
70 : 91 { 0x5b } : BV:8
71 : eq(65, 16) : BOOL
72 : 217 { 0xd9 -39 } : BV:8
73 : eq(65, 1) : BOOL
74 : 184 { 0xb8 -72 } : BV:8
75 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
76 : eq(65, 75) : BOOL
77 : 234 { 0xea -22 } : BV:8
78 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
79 : eq(65, 78) : BOOL
80 : 237 { 0xed -19 } : BV:8
81 : eq(65, 41) : BOOL
82 : 250 { 0xfa -6 } : BV:8
83 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
84 : eq(65, 83) : BOOL
85 : 190 { 0xbe -66 } : BV:8
86 : 0 { 0x0 } : BV:8
87 : ite(84, 85, 86) : BV:8
88 : ite(81, 82, 87) : BV:8
89 : ite(79, 80, 88) : BV:8
90 : ite(76, 77, 89) : BV:8
91 : ite(73, 74, 90) : BV:8
92 : ite(71, 72, 91) : BV:8
93 : ite(69, 70, 92) : BV:8
94 : ite(67, 68, 93) : BV:8
95 : bvadd(41, 64) : BV:32
96 : eq(95, 66) : BOOL
97 : eq(95, 61) : BOOL
98 : eq(95, 16) : BOOL
99 : eq(95, 1) : BOOL
100 : eq(95, 75) : BOOL
101 : eq(95, 78) : BOOL
102 : eq(95, 41) : BOOL
103 : eq(95, 83) : BOOL
104 : ite(103, 85, 86) : BV:8
105 : ite(102, 82, 104) : BV:8
106 : ite(101, 80, 105) : BV:8
107 : ite(100, 77, 106) : BV:8
108 : ite(99, 74, 107) : BV:8
109 : ite(98, 72, 108) : BV:8
110 : ite(97, 70, 109) : BV:8
111 : ite(96, 68, 110) : BV:8
112 : bvadd(16, 64) : BV:32
113 : eq(112, 66) : BOOL
114 : eq(112, 61) : BOOL
115 : eq(112, 16) : BOOL
116 : eq(112, 1) : BOOL
117 : eq(112, 75) : BOOL
118 : eq(112, 78) : BOOL
119 : eq(112, 41) : BOOL
120 : eq(112, 83) : BOOL
121 : ite(120, 85, 86) : BV:8
122 : ite(119, 82, 121) : BV:8
123 : ite(118, 80, 122) : BV:8
124 : ite(117, 77, 123) : BV:8
125 : ite(116, 74, 124) : BV:8
126 : ite(115, 72, 125) : BV:8
127 : ite(114, 70, 126) : BV:8
128 : ite(113, 68, 127) : BV:8
129 : eq(64, 66) : BOOL
130 : eq(64, 61) : BOOL
131 : eq(64, 16) : BOOL
132 : eq(64, 1) : BOOL
133 : eq(64, 75) : BOOL
134 : eq(64, 78) : BOOL
135 : eq(64, 41) : BOOL
136 : eq(64, 83) : BOOL
137 : ite(136, 85, 86) : BV:8
138 : ite(135, 82, 137) : BV:8
139 : ite(134, 80, 138) : BV:8
140 : ite(133, 77, 139) : BV:8
141 : ite(132, 74, 140) : BV:8
142 : ite(131, 72, 141) : BV:8
143 : ite(130, 70, 142) : BV:8
144 : ite(129, 68, 143) : BV:8
145 : bvconcat(94, 111, 128, 144) : BV:32
146 : bvadd(61, 63, 145) : BV:32
147 : eq(146, 66) : BOOL
148 : eq(146, 61) : BOOL
149 : eq(146, 16) : BOOL
150 : eq(146, 1) : BOOL
151 : eq(146, 75) : BOOL
152 : eq(146, 78) : BOOL
153 : eq(146, 41) : BOOL
154 : eq(146, 83) : BOOL
155 : ite(154, 85, 86) : BV:8
156 : ite(153, 82, 155) : BV:8
157 : ite(152, 80, 156) : BV:8
158 : ite(151, 77, 157) : BV:8
159 : ite(150, 74, 158) : BV:8
160 : ite(149, 72, 159) : BV:8
161 : ite(148, 70, 160) : BV:8
162 : ite(147, 68, 161) : BV:8
163 : bvadd(41, 63, 145) : BV:32
164 : eq(163, 66) : BOOL
165 : eq(163, 61) : BOOL
166 : eq(163, 16) : BOOL
167 : eq(163, 1) : BOOL
168 : eq(163, 75) : BOOL
169 : eq(163, 78) : BOOL
170 : eq(163, 41) : BOOL
171 : eq(163, 83) : BOOL
172 : ite(171, 85, 86) : BV:8
173 : ite(170, 82, 172) : BV:8
174 : ite(169, 80, 173) : BV:8
175 : ite(168, 77, 174) : BV:8
176 : ite(167, 74, 175) : BV:8
177 : ite(166, 72, 176) : BV:8
178 : ite(165, 70, 177) : BV:8
179 : ite(164, 68, 178) : BV:8
180 : bvadd(16, 63, 145) : BV:32
181 : eq(180, 66) : BOOL
182 : eq(180, 61) : BOOL
183 : eq(180, 16) : BOOL
184 : eq(180, 1) : BOOL
185 : eq(180, 75) : BOOL
186 : eq(180, 78) : BOOL
187 : eq(180, 41) : BOOL
188 : eq(180, 83) : BOOL
189 : ite(188, 85, 86) : BV:8
190 : ite(187, 82, 189) : BV:8
191 : ite(186, 80, 190) : BV:8
192 : ite(185, 77, 191) : BV:8
193 : ite(184, 74, 192) : BV:8
194 : ite(183, 72, 193) : BV:8
195 : ite(182, 70, 194) : BV:8
196 : ite(181, 68, 195) : BV:8
197 : bvadd(63, 145) : BV:32
198 : eq(197, 66) : BOOL
199 : eq(197, 61) : BOOL
200 : eq(197, 16) : BOOL
201 : eq(197, 1) : BOOL
202 : eq(197, 75) : BOOL
203 : eq(197, 78) : BOOL
204 : eq(197, 41) : BOOL
205 : eq(197, 83) : BOOL
206 : ite(205, 85, 86) : BV:8
207 : ite(204, 82, 206) : BV:8
208 : ite(203, 80, 207) : BV:8
209 : ite(202, 77, 208) : BV:8
210 : ite(201, 74, 209) : BV:8
211 : ite(200, 72, 210) : BV:8
212 : ite(199, 70, 211) : BV:8
213 : ite(198, 68, 212) : BV:8
214 : bvconcat(162, 179, 196, 213) : BV:32
215 : ite(60, 1, 214) : BV:32
216 : ite(58, 1, 215) : BV:32
217 : lambda(55, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(54, 217) : MAP[BV:32 -> BV:32]
219 : sum(17, 18, 218) : SUM[UNIT,MAP[BV:32 -> BV:32]]
220 : sym_const(219) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda57330Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvule(3, 3) : BOOL
18 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 3, 3) : BV:32
22 : ite(16, 12, 21) : BV:32
23 : ite(11, 8, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : bvule(1, 2) : BOOL
28 : and(26, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 29) : BOOL
32 : and(30, 31) : BOOL
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvule(33, 1) : BOOL
35 : bvule(1, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 33, 33) : BV:32
38 : ite(32, 29, 37) : BV:32
39 : ite(28, 2, 38) : BV:32
40 : eq(39, 2) : BOOL
41 : and(25, 40) : BOOL
42 : 1 { 0x1 } : BOOL
43 : eq(24, 3) : BOOL
44 : and(43, 40) : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(44, 42, 45) : BOOL
47 : ite(41, 42, 46) : BOOL
48 : lambda(1, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda57331Var : BV:32
50 : eq(3, 3) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : eq(3, 2) : BOOL
54 : and(53, 51) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 49) : BV:32
58 : bvmul(56, 3) : BV:32
59 : bvadd(55, 58) : BV:32
60 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
61 : eq(59, 60) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : eq(59, 55) : BOOL
64 : 91 { 0x5b } : BV:8
65 : eq(59, 29) : BOOL
66 : 217 { 0xd9 -39 } : BV:8
67 : eq(59, 2) : BOOL
68 : 184 { 0xb8 -72 } : BV:8
69 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
70 : eq(59, 69) : BOOL
71 : 234 { 0xea -22 } : BV:8
72 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
73 : eq(59, 72) : BOOL
74 : 237 { 0xed -19 } : BV:8
75 : eq(59, 33) : BOOL
76 : 250 { 0xfa -6 } : BV:8
77 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
78 : eq(59, 77) : BOOL
79 : 190 { 0xbe -66 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 74, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(65, 66, 85) : BV:8
87 : ite(63, 64, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(33, 58) : BV:32
90 : eq(89, 60) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 2) : BOOL
94 : eq(89, 69) : BOOL
95 : eq(89, 72) : BOOL
96 : eq(89, 33) : BOOL
97 : eq(89, 77) : BOOL
98 : ite(97, 79, 80) : BV:8
99 : ite(96, 76, 98) : BV:8
100 : ite(95, 74, 99) : BV:8
101 : ite(94, 71, 100) : BV:8
102 : ite(93, 68, 101) : BV:8
103 : ite(92, 66, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : ite(90, 62, 104) : BV:8
106 : bvadd(29, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 55) : BOOL
109 : eq(106, 29) : BOOL
110 : eq(106, 2) : BOOL
111 : eq(106, 69) : BOOL
112 : eq(106, 72) : BOOL
113 : eq(106, 33) : BOOL
114 : eq(106, 77) : BOOL
115 : ite(114, 79, 80) : BV:8
116 : ite(113, 76, 115) : BV:8
117 : ite(112, 74, 116) : BV:8
118 : ite(111, 71, 117) : BV:8
119 : ite(110, 68, 118) : BV:8
120 : ite(109, 66, 119) : BV:8
121 : ite(108, 64, 120) : BV:8
122 : ite(107, 62, 121) : BV:8
123 : eq(58, 60) : BOOL
124 : eq(58, 55) : BOOL
125 : eq(58, 29) : BOOL
126 : eq(58, 2) : BOOL
127 : eq(58, 69) : BOOL
128 : eq(58, 72) : BOOL
129 : eq(58, 33) : BOOL
130 : eq(58, 77) : BOOL
131 : ite(130, 79, 80) : BV:8
132 : ite(129, 76, 131) : BV:8
133 : ite(128, 74, 132) : BV:8
134 : ite(127, 71, 133) : BV:8
135 : ite(126, 68, 134) : BV:8
136 : ite(125, 66, 135) : BV:8
137 : ite(124, 64, 136) : BV:8
138 : ite(123, 62, 137) : BV:8
139 : bvconcat(88, 105, 122, 138) : BV:32
140 : bvadd(55, 57, 139) : BV:32
141 : eq(140, 60) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 29) : BOOL
144 : eq(140, 2) : BOOL
145 : eq(140, 69) : BOOL
146 : eq(140, 72) : BOOL
147 : eq(140, 33) : BOOL
148 : eq(140, 77) : BOOL
149 : ite(148, 79, 80) : BV:8
150 : ite(147, 76, 149) : BV:8
151 : ite(146, 74, 150) : BV:8
152 : ite(145, 71, 151) : BV:8
153 : ite(144, 68, 152) : BV:8
154 : ite(143, 66, 153) : BV:8
155 : ite(142, 64, 154) : BV:8
156 : ite(141, 62, 155) : BV:8
157 : bvadd(33, 57, 139) : BV:32
158 : eq(157, 60) : BOOL
159 : eq(157, 55) : BOOL
160 : eq(157, 29) : BOOL
161 : eq(157, 2) : BOOL
162 : eq(157, 69) : BOOL
163 : eq(157, 72) : BOOL
164 : eq(157, 33) : BOOL
165 : eq(157, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 74, 167) : BV:8
169 : ite(162, 71, 168) : BV:8
170 : ite(161, 68, 169) : BV:8
171 : ite(160, 66, 170) : BV:8
172 : ite(159, 64, 171) : BV:8
173 : ite(158, 62, 172) : BV:8
174 : bvadd(29, 57, 139) : BV:32
175 : eq(174, 60) : BOOL
176 : eq(174, 55) : BOOL
177 : eq(174, 29) : BOOL
178 : eq(174, 2) : BOOL
179 : eq(174, 69) : BOOL
180 : eq(174, 72) : BOOL
181 : eq(174, 33) : BOOL
182 : eq(174, 77) : BOOL
183 : ite(182, 79, 80) : BV:8
184 : ite(181, 76, 183) : BV:8
185 : ite(180, 74, 184) : BV:8
186 : ite(179, 71, 185) : BV:8
187 : ite(178, 68, 186) : BV:8
188 : ite(177, 66, 187) : BV:8
189 : ite(176, 64, 188) : BV:8
190 : ite(175, 62, 189) : BV:8
191 : bvadd(57, 139) : BV:32
192 : eq(191, 60) : BOOL
193 : eq(191, 55) : BOOL
194 : eq(191, 29) : BOOL
195 : eq(191, 2) : BOOL
196 : eq(191, 69) : BOOL
197 : eq(191, 72) : BOOL
198 : eq(191, 33) : BOOL
199 : eq(191, 77) : BOOL
200 : ite(199, 79, 80) : BV:8
201 : ite(198, 76, 200) : BV:8
202 : ite(197, 74, 201) : BV:8
203 : ite(196, 71, 202) : BV:8
204 : ite(195, 68, 203) : BV:8
205 : ite(194, 66, 204) : BV:8
206 : ite(193, 64, 205) : BV:8
207 : ite(192, 62, 206) : BV:8
208 : bvconcat(156, 173, 190, 207) : BV:32
209 : ite(54, 2, 208) : BV:32
210 : ite(52, 2, 209) : BV:32
211 : lambda(49, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(48, 211) : MAP[BV:32 -> BV:32]
213 : sym_const(212) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3771733756 { 0xe0d016fc -523233540 -1.62570142e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3771733759 { 0xe0d016ff -523233537 -1.62570178e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3862300160 { 0xe6360600 -432667136 -1.42205810e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3862300163 { 0xe6360603 -432667133 -1.42205846e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4284696056 { 0xff6345f8 -10271240 -1.77557277e127 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4284696059 { 0xff6345fb -10271237 -1.77557313e127 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda57147Var : BV:32
2 : Lambda57148Var : BV:32
3 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(1, 15) : BOOL
27 : and(16, 26) : BOOL
28 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
29 : bvule(28, 1) : BOOL
30 : and(29, 18) : BOOL
31 : bvule(3, 1) : BOOL
32 : and(31, 12) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(30, 28, 33) : BV:32
35 : ite(27, 15, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 5) : BOOL
38 : bvule(5, 2) : BOOL
39 : bvule(2, 5) : BOOL
40 : and(38, 39) : BOOL
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvule(41, 2) : BOOL
43 : bvule(2, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvule(45, 2) : BOOL
47 : bvule(2, 17) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 45, 45) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 5, 50) : BV:32
52 : eq(51, 5) : BOOL
53 : and(37, 52) : BOOL
54 : eq(36, 3) : BOOL
55 : and(54, 52) : BOOL
56 : ite(55, 14, 20) : BOOL
57 : ite(53, 14, 56) : BOOL
58 : and(22, 57) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 2) : BV:32
62 : bvmul(60, 1) : BV:32
63 : bvadd(59, 62) : BV:32
64 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
65 : eq(63, 64) : BOOL
66 : 240 { 0xf0 -16 } : BV:8
67 : eq(63, 59) : BOOL
68 : 91 { 0x5b } : BV:8
69 : eq(63, 41) : BOOL
70 : 217 { 0xd9 -39 } : BV:8
71 : eq(63, 5) : BOOL
72 : 184 { 0xb8 -72 } : BV:8
73 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
74 : eq(63, 73) : BOOL
75 : 234 { 0xea -22 } : BV:8
76 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
77 : eq(63, 76) : BOOL
78 : 237 { 0xed -19 } : BV:8
79 : eq(63, 45) : BOOL
80 : 250 { 0xfa -6 } : BV:8
81 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
82 : eq(63, 81) : BOOL
83 : 190 { 0xbe -66 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(67, 68, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : bvadd(45, 62) : BV:32
94 : eq(93, 64) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 41) : BOOL
97 : eq(93, 5) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 45) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 70, 106) : BV:8
108 : ite(95, 68, 107) : BV:8
109 : ite(94, 66, 108) : BV:8
110 : bvadd(41, 62) : BV:32
111 : eq(110, 64) : BOOL
112 : eq(110, 59) : BOOL
113 : eq(110, 41) : BOOL
114 : eq(110, 5) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 45) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 70, 123) : BV:8
125 : ite(112, 68, 124) : BV:8
126 : ite(111, 66, 125) : BV:8
127 : eq(62, 64) : BOOL
128 : eq(62, 59) : BOOL
129 : eq(62, 41) : BOOL
130 : eq(62, 5) : BOOL
131 : eq(62, 73) : BOOL
132 : eq(62, 76) : BOOL
133 : eq(62, 45) : BOOL
134 : eq(62, 81) : BOOL
135 : ite(134, 83, 84) : BV:8
136 : ite(133, 80, 135) : BV:8
137 : ite(132, 78, 136) : BV:8
138 : ite(131, 75, 137) : BV:8
139 : ite(130, 72, 138) : BV:8
140 : ite(129, 70, 139) : BV:8
141 : ite(128, 68, 140) : BV:8
142 : ite(127, 66, 141) : BV:8
143 : bvconcat(92, 109, 126, 142) : BV:32
144 : bvadd(59, 61, 143) : BV:32
145 : eq(144, 64) : BOOL
146 : eq(144, 59) : BOOL
147 : eq(144, 41) : BOOL
148 : eq(144, 5) : BOOL
149 : eq(144, 73) : BOOL
150 : eq(144, 76) : BOOL
151 : eq(144, 45) : BOOL
152 : eq(144, 81) : BOOL
153 : ite(152, 83, 84) : BV:8
154 : ite(151, 80, 153) : BV:8
155 : ite(150, 78, 154) : BV:8
156 : ite(149, 75, 155) : BV:8
157 : ite(148, 72, 156) : BV:8
158 : ite(147, 70, 157) : BV:8
159 : ite(146, 68, 158) : BV:8
160 : ite(145, 66, 159) : BV:8
161 : bvadd(45, 61, 143) : BV:32
162 : eq(161, 64) : BOOL
163 : eq(161, 59) : BOOL
164 : eq(161, 41) : BOOL
165 : eq(161, 5) : BOOL
166 : eq(161, 73) : BOOL
167 : eq(161, 76) : BOOL
168 : eq(161, 45) : BOOL
169 : eq(161, 81) : BOOL
170 : ite(169, 83, 84) : BV:8
171 : ite(168, 80, 170) : BV:8
172 : ite(167, 78, 171) : BV:8
173 : ite(166, 75, 172) : BV:8
174 : ite(165, 72, 173) : BV:8
175 : ite(164, 70, 174) : BV:8
176 : ite(163, 68, 175) : BV:8
177 : ite(162, 66, 176) : BV:8
178 : bvadd(41, 61, 143) : BV:32
179 : eq(178, 64) : BOOL
180 : eq(178, 59) : BOOL
181 : eq(178, 41) : BOOL
182 : eq(178, 5) : BOOL
183 : eq(178, 73) : BOOL
184 : eq(178, 76) : BOOL
185 : eq(178, 45) : BOOL
186 : eq(178, 81) : BOOL
187 : ite(186, 83, 84) : BV:8
188 : ite(185, 80, 187) : BV:8
189 : ite(184, 78, 188) : BV:8
190 : ite(183, 75, 189) : BV:8
191 : ite(182, 72, 190) : BV:8
192 : ite(181, 70, 191) : BV:8
193 : ite(180, 68, 192) : BV:8
194 : ite(179, 66, 193) : BV:8
195 : bvadd(61, 143) : BV:32
196 : eq(195, 64) : BOOL
197 : eq(195, 59) : BOOL
198 : eq(195, 41) : BOOL
199 : eq(195, 5) : BOOL
200 : eq(195, 73) : BOOL
201 : eq(195, 76) : BOOL
202 : eq(195, 45) : BOOL
203 : eq(195, 81) : BOOL
204 : ite(203, 83, 84) : BV:8
205 : ite(202, 80, 204) : BV:8
206 : ite(201, 78, 205) : BV:8
207 : ite(200, 75, 206) : BV:8
208 : ite(199, 72, 207) : BV:8
209 : ite(198, 70, 208) : BV:8
210 : ite(197, 68, 209) : BV:8
211 : ite(196, 66, 210) : BV:8
212 : bvconcat(160, 177, 194, 211) : BV:32
213 : ite(9, 5, 212) : BV:32
214 : ite(7, 5, 213) : BV:32
215 : ite(58, 212, 214) : BV:32
216 : ite(9, 5, 215) : BV:32
217 : ite(7, 5, 216) : BV:32
218 : lambda(1, 2, 217) : FUNCTION[BV:32,BV:32 -> BV:32]
219 : sym_const(218) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda57152Var : BV:32
2 : Lambda57153Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 14) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(25, 17) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2379298441 ] -> true, [ 2379298442; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2379298441 ] -> true, [ 2379298442; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda57161Var : BV:32
2 : Lambda57162Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 258250408 { 0xf6496a8 +1.78584766e159 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2379298442 { 0x8dd1368a -1915668854 -1.63447690e156 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2379298443 { 0x8dd1368b -1915668853 -1.63447701e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 2379298441 { 0x8dd13689 -1915668855 -1.63447678e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 14) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(25, 17) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda57157Var : BV:32
2 : Lambda57158Var : BV:32
3 : 258250409 { 0xf6496a9 +1.78584778e159 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : 1033001636 { 0x3d925aa4 +1.14339113e252 } : BV:32
16 : eq(14, 15) : BOOL
17 : 240 { 0xf0 -16 } : BV:8
18 : eq(14, 10) : BOOL
19 : 91 { 0x5b } : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(14, 20) : BOOL
22 : 217 { 0xd9 -39 } : BV:8
23 : eq(14, 5) : BOOL
24 : 184 { 0xb8 -72 } : BV:8
25 : 1033001637 { 0x3d925aa5 +1.14339125e252 } : BV:32
26 : eq(14, 25) : BOOL
27 : 234 { 0xea -22 } : BV:8
28 : 1033001638 { 0x3d925aa6 +1.14339137e252 } : BV:32
29 : eq(14, 28) : BOOL
30 : 237 { 0xed -19 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 250 { 0xfa -6 } : BV:8
34 : 1033001639 { 0x3d925aa7 +1.14339148e252 } : BV:32
35 : eq(14, 34) : BOOL
36 : 190 { 0xbe -66 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(21, 22, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(16, 17, 44) : BV:8
46 : bvadd(31, 13) : BV:32
47 : eq(46, 15) : BOOL
48 : eq(46, 10) : BOOL
49 : eq(46, 20) : BOOL
50 : eq(46, 5) : BOOL
51 : eq(46, 25) : BOOL
52 : eq(46, 28) : BOOL
53 : eq(46, 31) : BOOL
54 : eq(46, 34) : BOOL
55 : ite(54, 36, 37) : BV:8
56 : ite(53, 33, 55) : BV:8
57 : ite(52, 30, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : ite(50, 24, 58) : BV:8
60 : ite(49, 22, 59) : BV:8
61 : ite(48, 19, 60) : BV:8
62 : ite(47, 17, 61) : BV:8
63 : bvadd(20, 13) : BV:32
64 : eq(63, 15) : BOOL
65 : eq(63, 10) : BOOL
66 : eq(63, 20) : BOOL
67 : eq(63, 5) : BOOL
68 : eq(63, 25) : BOOL
69 : eq(63, 28) : BOOL
70 : eq(63, 31) : BOOL
71 : eq(63, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 27, 74) : BV:8
76 : ite(67, 24, 75) : BV:8
77 : ite(66, 22, 76) : BV:8
78 : ite(65, 19, 77) : BV:8
79 : ite(64, 17, 78) : BV:8
80 : eq(13, 15) : BOOL
81 : eq(13, 10) : BOOL
82 : eq(13, 20) : BOOL
83 : eq(13, 5) : BOOL
84 : eq(13, 25) : BOOL
85 : eq(13, 28) : BOOL
86 : eq(13, 31) : BOOL
87 : eq(13, 34) : BOOL
88 : ite(87, 36, 37) : BV:8
89 : ite(86, 33, 88) : BV:8
90 : ite(85, 30, 89) : BV:8
91 : ite(84, 27, 90) : BV:8
92 : ite(83, 24, 91) : BV:8
93 : ite(82, 22, 92) : BV:8
94 : ite(81, 19, 93) : BV:8
95 : ite(80, 17, 94) : BV:8
96 : bvconcat(45, 62, 79, 95) : BV:32
97 : bvadd(10, 12, 96) : BV:32
98 : eq(97, 15) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 20) : BOOL
101 : eq(97, 5) : BOOL
102 : eq(97, 25) : BOOL
103 : eq(97, 28) : BOOL
104 : eq(97, 31) : BOOL
105 : eq(97, 34) : BOOL
106 : ite(105, 36, 37) : BV:8
107 : ite(104, 33, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 27, 108) : BV:8
110 : ite(101, 24, 109) : BV:8
111 : ite(100, 22, 110) : BV:8
112 : ite(99, 19, 111) : BV:8
113 : ite(98, 17, 112) : BV:8
114 : bvadd(31, 12, 96) : BV:32
115 : eq(114, 15) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 20) : BOOL
118 : eq(114, 5) : BOOL
119 : eq(114, 25) : BOOL
120 : eq(114, 28) : BOOL
121 : eq(114, 31) : BOOL
122 : eq(114, 34) : BOOL
123 : ite(122, 36, 37) : BV:8
124 : ite(121, 33, 123) : BV:8
125 : ite(120, 30, 124) : BV:8
126 : ite(119, 27, 125) : BV:8
127 : ite(118, 24, 126) : BV:8
128 : ite(117, 22, 127) : BV:8
129 : ite(116, 19, 128) : BV:8
130 : ite(115, 17, 129) : BV:8
131 : bvadd(20, 12, 96) : BV:32
132 : eq(131, 15) : BOOL
133 : eq(131, 10) : BOOL
134 : eq(131, 20) : BOOL
135 : eq(131, 5) : BOOL
136 : eq(131, 25) : BOOL
137 : eq(131, 28) : BOOL
138 : eq(131, 31) : BOOL
139 : eq(131, 34) : BOOL
140 : ite(139, 36, 37) : BV:8
141 : ite(138, 33, 140) : BV:8
142 : ite(137, 30, 141) : BV:8
143 : ite(136, 27, 142) : BV:8
144 : ite(135, 24, 143) : BV:8
145 : ite(134, 22, 144) : BV:8
146 : ite(133, 19, 145) : BV:8
147 : ite(132, 17, 146) : BV:8
148 : bvadd(12, 96) : BV:32
149 : eq(148, 15) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 20) : BOOL
152 : eq(148, 5) : BOOL
153 : eq(148, 25) : BOOL
154 : eq(148, 28) : BOOL
155 : eq(148, 31) : BOOL
156 : eq(148, 34) : BOOL
157 : ite(156, 36, 37) : BV:8
158 : ite(155, 33, 157) : BV:8
159 : ite(154, 30, 158) : BV:8
160 : ite(153, 27, 159) : BV:8
161 : ite(152, 24, 160) : BV:8
162 : ite(151, 22, 161) : BV:8
163 : ite(150, 19, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : bvconcat(113, 130, 147, 164) : BV:32
166 : ite(9, 5, 165) : BV:32
167 : ite(7, 5, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
287892332
=counter_example_end
=global nodece 67 num_edges_traversed 2
=global nodece 67 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 68
=global nodece 68 nodece z3v487.ce4740.num_edges_traversed0
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(epsilon)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3v487.ce4740 81fd90a9dbf2ded0b5ffc154d8b4577b
=input.spec-%var-x-1
1 : Lambda61692Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda61693Var : BV:32
18 : Lambda61694Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 2) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda61695Var : BV:32
61 : eq(17, 2) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 23) : BOOL
65 : and(64, 62) : BOOL
66 : 3 { 0x3 +1.35e129 } : BV:32
67 : 4 { 0x4 +1.47e129 } : BV:32
68 : bvmul(67, 60) : BV:32
69 : bvmul(67, 17) : BV:32
70 : bvadd(66, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : 40 { 0x28 } : BV:8
73 : 16 { 0x10 +1.190e129 } : BV:32
74 : eq(70, 73) : BOOL
75 : 157 { 0x9d -99 } : BV:8
76 : 18 { 0x12 +1.214e129 } : BV:32
77 : eq(70, 76) : BOOL
78 : 133 { 0x85 -123 } : BV:8
79 : eq(70, 42) : BOOL
80 : 72 { 0x48 } : BV:8
81 : eq(70, 66) : BOOL
82 : 194 { 0xc2 -62 } : BV:8
83 : 17 { 0x11 +1.202e129 } : BV:32
84 : eq(70, 83) : BOOL
85 : 129 { 0x81 -127 } : BV:8
86 : 19 { 0x13 +1.226e129 } : BV:32
87 : eq(70, 86) : BOOL
88 : 10 { 0xa } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 80, 92) : BV:8
94 : ite(77, 78, 93) : BV:8
95 : ite(74, 75, 94) : BV:8
96 : ite(71, 72, 95) : BV:8
97 : bvadd(46, 69) : BV:32
98 : eq(97, 2) : BOOL
99 : eq(97, 73) : BOOL
100 : eq(97, 76) : BOOL
101 : eq(97, 42) : BOOL
102 : eq(97, 66) : BOOL
103 : eq(97, 83) : BOOL
104 : eq(97, 86) : BOOL
105 : ite(104, 88, 89) : BV:8
106 : ite(103, 85, 105) : BV:8
107 : ite(102, 82, 106) : BV:8
108 : ite(101, 80, 107) : BV:8
109 : ite(100, 78, 108) : BV:8
110 : ite(99, 75, 109) : BV:8
111 : ite(98, 72, 110) : BV:8
112 : bvadd(42, 69) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 73) : BOOL
115 : eq(112, 76) : BOOL
116 : eq(112, 42) : BOOL
117 : eq(112, 66) : BOOL
118 : eq(112, 83) : BOOL
119 : eq(112, 86) : BOOL
120 : ite(119, 88, 89) : BV:8
121 : ite(118, 85, 120) : BV:8
122 : ite(117, 82, 121) : BV:8
123 : ite(116, 80, 122) : BV:8
124 : ite(115, 78, 123) : BV:8
125 : ite(114, 75, 124) : BV:8
126 : ite(113, 72, 125) : BV:8
127 : eq(69, 2) : BOOL
128 : eq(69, 73) : BOOL
129 : eq(69, 76) : BOOL
130 : eq(69, 42) : BOOL
131 : eq(69, 66) : BOOL
132 : eq(69, 83) : BOOL
133 : eq(69, 86) : BOOL
134 : ite(133, 88, 89) : BV:8
135 : ite(132, 85, 134) : BV:8
136 : ite(131, 82, 135) : BV:8
137 : ite(130, 80, 136) : BV:8
138 : ite(129, 78, 137) : BV:8
139 : ite(128, 75, 138) : BV:8
140 : ite(127, 72, 139) : BV:8
141 : bvconcat(96, 111, 126, 140) : BV:32
142 : bvadd(66, 68, 141) : BV:32
143 : eq(142, 2) : BOOL
144 : eq(142, 73) : BOOL
145 : eq(142, 76) : BOOL
146 : eq(142, 42) : BOOL
147 : eq(142, 66) : BOOL
148 : eq(142, 83) : BOOL
149 : eq(142, 86) : BOOL
150 : ite(149, 88, 89) : BV:8
151 : ite(148, 85, 150) : BV:8
152 : ite(147, 82, 151) : BV:8
153 : ite(146, 80, 152) : BV:8
154 : ite(145, 78, 153) : BV:8
155 : ite(144, 75, 154) : BV:8
156 : ite(143, 72, 155) : BV:8
157 : bvadd(46, 68, 141) : BV:32
158 : eq(157, 2) : BOOL
159 : eq(157, 73) : BOOL
160 : eq(157, 76) : BOOL
161 : eq(157, 42) : BOOL
162 : eq(157, 66) : BOOL
163 : eq(157, 83) : BOOL
164 : eq(157, 86) : BOOL
165 : ite(164, 88, 89) : BV:8
166 : ite(163, 85, 165) : BV:8
167 : ite(162, 82, 166) : BV:8
168 : ite(161, 80, 167) : BV:8
169 : ite(160, 78, 168) : BV:8
170 : ite(159, 75, 169) : BV:8
171 : ite(158, 72, 170) : BV:8
172 : bvadd(42, 68, 141) : BV:32
173 : eq(172, 2) : BOOL
174 : eq(172, 73) : BOOL
175 : eq(172, 76) : BOOL
176 : eq(172, 42) : BOOL
177 : eq(172, 66) : BOOL
178 : eq(172, 83) : BOOL
179 : eq(172, 86) : BOOL
180 : ite(179, 88, 89) : BV:8
181 : ite(178, 85, 180) : BV:8
182 : ite(177, 82, 181) : BV:8
183 : ite(176, 80, 182) : BV:8
184 : ite(175, 78, 183) : BV:8
185 : ite(174, 75, 184) : BV:8
186 : ite(173, 72, 185) : BV:8
187 : bvadd(68, 141) : BV:32
188 : eq(187, 2) : BOOL
189 : eq(187, 73) : BOOL
190 : eq(187, 76) : BOOL
191 : eq(187, 42) : BOOL
192 : eq(187, 66) : BOOL
193 : eq(187, 83) : BOOL
194 : eq(187, 86) : BOOL
195 : ite(194, 88, 89) : BV:8
196 : ite(193, 85, 195) : BV:8
197 : ite(192, 82, 196) : BV:8
198 : ite(191, 80, 197) : BV:8
199 : ite(190, 78, 198) : BV:8
200 : ite(189, 75, 199) : BV:8
201 : ite(188, 72, 200) : BV:8
202 : bvconcat(156, 171, 186, 201) : BV:32
203 : ite(65, 2, 202) : BV:32
204 : ite(63, 2, 203) : BV:32
205 : lambda(60, 204) : FUNCTION[BV:32 -> BV:32]
206 : map(59, 205) : MAP[BV:32 -> BV:32]
207 : lambda(17, 206) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
208 : map(16, 207) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
209 : sym_const(208) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda61705Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda61706Var : BV:32
18 : Lambda61707Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 2) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda61708Var : BV:32
61 : eq(17, 2) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 23) : BOOL
65 : and(64, 62) : BOOL
66 : and(19, 25) : BOOL
67 : and(27, 32) : BOOL
68 : ite(67, 13, 13) : BOOL
69 : ite(66, 7, 68) : BOOL
70 : bvule(2, 60) : BOOL
71 : bvule(60, 2) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(42, 60) : BOOL
74 : bvule(60, 42) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(46, 60) : BOOL
77 : bvule(60, 10) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 46, 46) : BV:32
80 : ite(75, 42, 79) : BV:32
81 : ite(72, 2, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : and(38, 82) : BOOL
84 : and(55, 82) : BOOL
85 : or(83, 84) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : and(69, 86) : BOOL
88 : 3 { 0x3 +1.35e129 } : BV:32
89 : 4 { 0x4 +1.47e129 } : BV:32
90 : bvmul(89, 60) : BV:32
91 : bvmul(89, 17) : BV:32
92 : bvadd(88, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : 40 { 0x28 } : BV:8
95 : 16 { 0x10 +1.190e129 } : BV:32
96 : eq(92, 95) : BOOL
97 : 157 { 0x9d -99 } : BV:8
98 : 18 { 0x12 +1.214e129 } : BV:32
99 : eq(92, 98) : BOOL
100 : 133 { 0x85 -123 } : BV:8
101 : eq(92, 42) : BOOL
102 : 72 { 0x48 } : BV:8
103 : eq(92, 88) : BOOL
104 : 194 { 0xc2 -62 } : BV:8
105 : 17 { 0x11 +1.202e129 } : BV:32
106 : eq(92, 105) : BOOL
107 : 129 { 0x81 -127 } : BV:8
108 : 19 { 0x13 +1.226e129 } : BV:32
109 : eq(92, 108) : BOOL
110 : 10 { 0xa } : BV:8
111 : 0 { 0x0 } : BV:8
112 : ite(109, 110, 111) : BV:8
113 : ite(106, 107, 112) : BV:8
114 : ite(103, 104, 113) : BV:8
115 : ite(101, 102, 114) : BV:8
116 : ite(99, 100, 115) : BV:8
117 : ite(96, 97, 116) : BV:8
118 : ite(93, 94, 117) : BV:8
119 : bvadd(46, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 95) : BOOL
122 : eq(119, 98) : BOOL
123 : eq(119, 42) : BOOL
124 : eq(119, 88) : BOOL
125 : eq(119, 105) : BOOL
126 : eq(119, 108) : BOOL
127 : ite(126, 110, 111) : BV:8
128 : ite(125, 107, 127) : BV:8
129 : ite(124, 104, 128) : BV:8
130 : ite(123, 102, 129) : BV:8
131 : ite(122, 100, 130) : BV:8
132 : ite(121, 97, 131) : BV:8
133 : ite(120, 94, 132) : BV:8
134 : bvadd(42, 91) : BV:32
135 : eq(134, 2) : BOOL
136 : eq(134, 95) : BOOL
137 : eq(134, 98) : BOOL
138 : eq(134, 42) : BOOL
139 : eq(134, 88) : BOOL
140 : eq(134, 105) : BOOL
141 : eq(134, 108) : BOOL
142 : ite(141, 110, 111) : BV:8
143 : ite(140, 107, 142) : BV:8
144 : ite(139, 104, 143) : BV:8
145 : ite(138, 102, 144) : BV:8
146 : ite(137, 100, 145) : BV:8
147 : ite(136, 97, 146) : BV:8
148 : ite(135, 94, 147) : BV:8
149 : eq(91, 2) : BOOL
150 : eq(91, 95) : BOOL
151 : eq(91, 98) : BOOL
152 : eq(91, 42) : BOOL
153 : eq(91, 88) : BOOL
154 : eq(91, 105) : BOOL
155 : eq(91, 108) : BOOL
156 : ite(155, 110, 111) : BV:8
157 : ite(154, 107, 156) : BV:8
158 : ite(153, 104, 157) : BV:8
159 : ite(152, 102, 158) : BV:8
160 : ite(151, 100, 159) : BV:8
161 : ite(150, 97, 160) : BV:8
162 : ite(149, 94, 161) : BV:8
163 : bvconcat(118, 133, 148, 162) : BV:32
164 : bvadd(88, 90, 163) : BV:32
165 : eq(164, 2) : BOOL
166 : eq(164, 95) : BOOL
167 : eq(164, 98) : BOOL
168 : eq(164, 42) : BOOL
169 : eq(164, 88) : BOOL
170 : eq(164, 105) : BOOL
171 : eq(164, 108) : BOOL
172 : ite(171, 110, 111) : BV:8
173 : ite(170, 107, 172) : BV:8
174 : ite(169, 104, 173) : BV:8
175 : ite(168, 102, 174) : BV:8
176 : ite(167, 100, 175) : BV:8
177 : ite(166, 97, 176) : BV:8
178 : ite(165, 94, 177) : BV:8
179 : bvadd(46, 90, 163) : BV:32
180 : eq(179, 2) : BOOL
181 : eq(179, 95) : BOOL
182 : eq(179, 98) : BOOL
183 : eq(179, 42) : BOOL
184 : eq(179, 88) : BOOL
185 : eq(179, 105) : BOOL
186 : eq(179, 108) : BOOL
187 : ite(186, 110, 111) : BV:8
188 : ite(185, 107, 187) : BV:8
189 : ite(184, 104, 188) : BV:8
190 : ite(183, 102, 189) : BV:8
191 : ite(182, 100, 190) : BV:8
192 : ite(181, 97, 191) : BV:8
193 : ite(180, 94, 192) : BV:8
194 : bvadd(42, 90, 163) : BV:32
195 : eq(194, 2) : BOOL
196 : eq(194, 95) : BOOL
197 : eq(194, 98) : BOOL
198 : eq(194, 42) : BOOL
199 : eq(194, 88) : BOOL
200 : eq(194, 105) : BOOL
201 : eq(194, 108) : BOOL
202 : ite(201, 110, 111) : BV:8
203 : ite(200, 107, 202) : BV:8
204 : ite(199, 104, 203) : BV:8
205 : ite(198, 102, 204) : BV:8
206 : ite(197, 100, 205) : BV:8
207 : ite(196, 97, 206) : BV:8
208 : ite(195, 94, 207) : BV:8
209 : bvadd(90, 163) : BV:32
210 : eq(209, 2) : BOOL
211 : eq(209, 95) : BOOL
212 : eq(209, 98) : BOOL
213 : eq(209, 42) : BOOL
214 : eq(209, 88) : BOOL
215 : eq(209, 105) : BOOL
216 : eq(209, 108) : BOOL
217 : ite(216, 110, 111) : BV:8
218 : ite(215, 107, 217) : BV:8
219 : ite(214, 104, 218) : BV:8
220 : ite(213, 102, 219) : BV:8
221 : ite(212, 100, 220) : BV:8
222 : ite(211, 97, 221) : BV:8
223 : ite(210, 94, 222) : BV:8
224 : bvconcat(178, 193, 208, 223) : BV:32
225 : ite(65, 2, 224) : BV:32
226 : ite(63, 2, 225) : BV:32
227 : ite(87, 224, 226) : BV:32
228 : ite(65, 2, 227) : BV:32
229 : ite(63, 2, 228) : BV:32
230 : lambda(60, 229) : FUNCTION[BV:32 -> BV:32]
231 : map(59, 230) : MAP[BV:32 -> BV:32]
232 : lambda(17, 231) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
233 : map(16, 232) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
234 : sym_const(233) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 40, [ 1; 1 ] -> 72, [ 2; 2 ] -> 0, [ 3; 3 ] -> 194, [ 4; 15 ] -> 0, [ 16; 16 ] -> 157, [ 17; 17 ] -> 129, [ 18; 18 ] -> 133, [ 19; 19 ] -> 10, [ 20; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 2396151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2396152; 2396155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2396156; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2396152 { 0x248ff8 +1.28564357e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2396152 { 0x248ff8 +1.28564357e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2396155 { 0x248ffb +1.28564393e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda61622Var : BV:32
2 : Lambda61623Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : and(8, 5) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : eq(14, 3) : BOOL
16 : 40 { 0x28 } : BV:8
17 : 16 { 0x10 +1.190e129 } : BV:32
18 : eq(14, 17) : BOOL
19 : 157 { 0x9d -99 } : BV:8
20 : 18 { 0x12 +1.214e129 } : BV:32
21 : eq(14, 20) : BOOL
22 : 133 { 0x85 -123 } : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(14, 23) : BOOL
25 : 72 { 0x48 } : BV:8
26 : eq(14, 10) : BOOL
27 : 194 { 0xc2 -62 } : BV:8
28 : 17 { 0x11 +1.202e129 } : BV:32
29 : eq(14, 28) : BOOL
30 : 129 { 0x81 -127 } : BV:8
31 : 19 { 0x13 +1.226e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 10 { 0xa } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(21, 22, 38) : BV:8
40 : ite(18, 19, 39) : BV:8
41 : ite(15, 16, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13) : BV:32
44 : eq(43, 3) : BOOL
45 : eq(43, 17) : BOOL
46 : eq(43, 20) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 10) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 25, 53) : BV:8
55 : ite(46, 22, 54) : BV:8
56 : ite(45, 19, 55) : BV:8
57 : ite(44, 16, 56) : BV:8
58 : bvadd(23, 13) : BV:32
59 : eq(58, 3) : BOOL
60 : eq(58, 17) : BOOL
61 : eq(58, 20) : BOOL
62 : eq(58, 23) : BOOL
63 : eq(58, 10) : BOOL
64 : eq(58, 28) : BOOL
65 : eq(58, 31) : BOOL
66 : ite(65, 33, 34) : BV:8
67 : ite(64, 30, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 25, 68) : BV:8
70 : ite(61, 22, 69) : BV:8
71 : ite(60, 19, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : eq(13, 3) : BOOL
74 : eq(13, 17) : BOOL
75 : eq(13, 20) : BOOL
76 : eq(13, 23) : BOOL
77 : eq(13, 10) : BOOL
78 : eq(13, 28) : BOOL
79 : eq(13, 31) : BOOL
80 : ite(79, 33, 34) : BV:8
81 : ite(78, 30, 80) : BV:8
82 : ite(77, 27, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 22, 83) : BV:8
85 : ite(74, 19, 84) : BV:8
86 : ite(73, 16, 85) : BV:8
87 : bvconcat(41, 57, 72, 86) : BV:32
88 : bvadd(10, 12, 87) : BV:32
89 : eq(88, 3) : BOOL
90 : eq(88, 17) : BOOL
91 : eq(88, 20) : BOOL
92 : eq(88, 23) : BOOL
93 : eq(88, 10) : BOOL
94 : eq(88, 28) : BOOL
95 : eq(88, 31) : BOOL
96 : ite(95, 33, 34) : BV:8
97 : ite(94, 30, 96) : BV:8
98 : ite(93, 27, 97) : BV:8
99 : ite(92, 25, 98) : BV:8
100 : ite(91, 22, 99) : BV:8
101 : ite(90, 19, 100) : BV:8
102 : ite(89, 16, 101) : BV:8
103 : bvadd(42, 12, 87) : BV:32
104 : eq(103, 3) : BOOL
105 : eq(103, 17) : BOOL
106 : eq(103, 20) : BOOL
107 : eq(103, 23) : BOOL
108 : eq(103, 10) : BOOL
109 : eq(103, 28) : BOOL
110 : eq(103, 31) : BOOL
111 : ite(110, 33, 34) : BV:8
112 : ite(109, 30, 111) : BV:8
113 : ite(108, 27, 112) : BV:8
114 : ite(107, 25, 113) : BV:8
115 : ite(106, 22, 114) : BV:8
116 : ite(105, 19, 115) : BV:8
117 : ite(104, 16, 116) : BV:8
118 : bvadd(23, 12, 87) : BV:32
119 : eq(118, 3) : BOOL
120 : eq(118, 17) : BOOL
121 : eq(118, 20) : BOOL
122 : eq(118, 23) : BOOL
123 : eq(118, 10) : BOOL
124 : eq(118, 28) : BOOL
125 : eq(118, 31) : BOOL
126 : ite(125, 33, 34) : BV:8
127 : ite(124, 30, 126) : BV:8
128 : ite(123, 27, 127) : BV:8
129 : ite(122, 25, 128) : BV:8
130 : ite(121, 22, 129) : BV:8
131 : ite(120, 19, 130) : BV:8
132 : ite(119, 16, 131) : BV:8
133 : bvadd(12, 87) : BV:32
134 : eq(133, 3) : BOOL
135 : eq(133, 17) : BOOL
136 : eq(133, 20) : BOOL
137 : eq(133, 23) : BOOL
138 : eq(133, 10) : BOOL
139 : eq(133, 28) : BOOL
140 : eq(133, 31) : BOOL
141 : ite(140, 33, 34) : BV:8
142 : ite(139, 30, 141) : BV:8
143 : ite(138, 27, 142) : BV:8
144 : ite(137, 25, 143) : BV:8
145 : ite(136, 22, 144) : BV:8
146 : ite(135, 19, 145) : BV:8
147 : ite(134, 16, 146) : BV:8
148 : bvconcat(102, 117, 132, 147) : BV:32
149 : ite(9, 3, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda61624Var : BV:32
2 : Lambda61625Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 19) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : eq(25, 3) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2411427025 ] -> true, [ 2411427026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2411427025 ] -> true, [ 2411427026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda61634Var : BV:32
2 : Lambda61635Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 19) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : eq(25, 3) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda61638Var : BV:32
2 : Lambda61639Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : and(8, 5) : BOOL
10 : bvule(3, 1) : BOOL
11 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(7, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 7, 34) : BV:32
36 : ite(25, 3, 35) : BV:32
37 : eq(36, 7) : BOOL
38 : bvule(3, 2) : BOOL
39 : bvule(2, 3) : BOOL
40 : and(38, 39) : BOOL
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvule(41, 2) : BOOL
43 : bvule(2, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvule(45, 2) : BOOL
47 : bvule(2, 17) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 45, 45) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 3, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : and(37, 52) : BOOL
54 : eq(36, 3) : BOOL
55 : and(54, 52) : BOOL
56 : or(53, 55) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : and(22, 57) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 2) : BV:32
62 : bvmul(60, 1) : BV:32
63 : bvadd(59, 62) : BV:32
64 : eq(63, 3) : BOOL
65 : 40 { 0x28 } : BV:8
66 : 16 { 0x10 +1.190e129 } : BV:32
67 : eq(63, 66) : BOOL
68 : 157 { 0x9d -99 } : BV:8
69 : 18 { 0x12 +1.214e129 } : BV:32
70 : eq(63, 69) : BOOL
71 : 133 { 0x85 -123 } : BV:8
72 : eq(63, 41) : BOOL
73 : 72 { 0x48 } : BV:8
74 : eq(63, 59) : BOOL
75 : 194 { 0xc2 -62 } : BV:8
76 : 17 { 0x11 +1.202e129 } : BV:32
77 : eq(63, 76) : BOOL
78 : 129 { 0x81 -127 } : BV:8
79 : 19 { 0x13 +1.226e129 } : BV:32
80 : eq(63, 79) : BOOL
81 : 10 { 0xa } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(72, 73, 85) : BV:8
87 : ite(70, 71, 86) : BV:8
88 : ite(67, 68, 87) : BV:8
89 : ite(64, 65, 88) : BV:8
90 : bvadd(45, 62) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 66) : BOOL
93 : eq(90, 69) : BOOL
94 : eq(90, 41) : BOOL
95 : eq(90, 59) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 73, 100) : BV:8
102 : ite(93, 71, 101) : BV:8
103 : ite(92, 68, 102) : BV:8
104 : ite(91, 65, 103) : BV:8
105 : bvadd(41, 62) : BV:32
106 : eq(105, 3) : BOOL
107 : eq(105, 66) : BOOL
108 : eq(105, 69) : BOOL
109 : eq(105, 41) : BOOL
110 : eq(105, 59) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 73, 115) : BV:8
117 : ite(108, 71, 116) : BV:8
118 : ite(107, 68, 117) : BV:8
119 : ite(106, 65, 118) : BV:8
120 : eq(62, 3) : BOOL
121 : eq(62, 66) : BOOL
122 : eq(62, 69) : BOOL
123 : eq(62, 41) : BOOL
124 : eq(62, 59) : BOOL
125 : eq(62, 76) : BOOL
126 : eq(62, 79) : BOOL
127 : ite(126, 81, 82) : BV:8
128 : ite(125, 78, 127) : BV:8
129 : ite(124, 75, 128) : BV:8
130 : ite(123, 73, 129) : BV:8
131 : ite(122, 71, 130) : BV:8
132 : ite(121, 68, 131) : BV:8
133 : ite(120, 65, 132) : BV:8
134 : bvconcat(89, 104, 119, 133) : BV:32
135 : bvadd(59, 61, 134) : BV:32
136 : eq(135, 3) : BOOL
137 : eq(135, 66) : BOOL
138 : eq(135, 69) : BOOL
139 : eq(135, 41) : BOOL
140 : eq(135, 59) : BOOL
141 : eq(135, 76) : BOOL
142 : eq(135, 79) : BOOL
143 : ite(142, 81, 82) : BV:8
144 : ite(141, 78, 143) : BV:8
145 : ite(140, 75, 144) : BV:8
146 : ite(139, 73, 145) : BV:8
147 : ite(138, 71, 146) : BV:8
148 : ite(137, 68, 147) : BV:8
149 : ite(136, 65, 148) : BV:8
150 : bvadd(45, 61, 134) : BV:32
151 : eq(150, 3) : BOOL
152 : eq(150, 66) : BOOL
153 : eq(150, 69) : BOOL
154 : eq(150, 41) : BOOL
155 : eq(150, 59) : BOOL
156 : eq(150, 76) : BOOL
157 : eq(150, 79) : BOOL
158 : ite(157, 81, 82) : BV:8
159 : ite(156, 78, 158) : BV:8
160 : ite(155, 75, 159) : BV:8
161 : ite(154, 73, 160) : BV:8
162 : ite(153, 71, 161) : BV:8
163 : ite(152, 68, 162) : BV:8
164 : ite(151, 65, 163) : BV:8
165 : bvadd(41, 61, 134) : BV:32
166 : eq(165, 3) : BOOL
167 : eq(165, 66) : BOOL
168 : eq(165, 69) : BOOL
169 : eq(165, 41) : BOOL
170 : eq(165, 59) : BOOL
171 : eq(165, 76) : BOOL
172 : eq(165, 79) : BOOL
173 : ite(172, 81, 82) : BV:8
174 : ite(171, 78, 173) : BV:8
175 : ite(170, 75, 174) : BV:8
176 : ite(169, 73, 175) : BV:8
177 : ite(168, 71, 176) : BV:8
178 : ite(167, 68, 177) : BV:8
179 : ite(166, 65, 178) : BV:8
180 : bvadd(61, 134) : BV:32
181 : eq(180, 3) : BOOL
182 : eq(180, 66) : BOOL
183 : eq(180, 69) : BOOL
184 : eq(180, 41) : BOOL
185 : eq(180, 59) : BOOL
186 : eq(180, 76) : BOOL
187 : eq(180, 79) : BOOL
188 : ite(187, 81, 82) : BV:8
189 : ite(186, 78, 188) : BV:8
190 : ite(185, 75, 189) : BV:8
191 : ite(184, 73, 190) : BV:8
192 : ite(183, 71, 191) : BV:8
193 : ite(182, 68, 192) : BV:8
194 : ite(181, 65, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(9, 3, 195) : BV:32
197 : ite(6, 3, 196) : BV:32
198 : ite(58, 195, 197) : BV:32
199 : ite(9, 3, 198) : BV:32
200 : ite(6, 3, 199) : BV:32
201 : lambda(1, 2, 200) : FUNCTION[BV:32,BV:32 -> BV:32]
202 : sym_const(201) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1955487242
=counter_example_end
=global nodece 68 num_edges_traversed 0
=global nodece 68 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 69
=global nodece 69 nodece z3.ce4741.num_edges_traversed0
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(epsilon)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3.ce4741 28c1e4c92297f54bf0bd8a5d739188eb
=input.spec-%var-x-1
1 : Lambda61742Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda61743Var : BV:32
18 : Lambda61744Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda61745Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 168 { 0xa8 -88 } : BV:8
81 : eq(78, 74) : BOOL
82 : 212 { 0xd4 -44 } : BV:8
83 : eq(78, 36) : BOOL
84 : 245 { 0xf5 -11 } : BV:8
85 : eq(78, 40) : BOOL
86 : 180 { 0xb4 -76 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(40, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 74) : BOOL
95 : eq(92, 36) : BOOL
96 : eq(92, 40) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(36, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 74) : BOOL
104 : eq(101, 36) : BOOL
105 : eq(101, 40) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 74) : BOOL
112 : eq(77, 36) : BOOL
113 : eq(77, 40) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(74, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 36) : BOOL
123 : eq(119, 40) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(40, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 74) : BOOL
131 : eq(128, 36) : BOOL
132 : eq(128, 40) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(36, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 74) : BOOL
140 : eq(137, 36) : BOOL
141 : eq(137, 40) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 74) : BOOL
149 : eq(146, 36) : BOOL
150 : eq(146, 40) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : ite(73, 155, 156) : BV:32
158 : ite(54, 2, 157) : BV:32
159 : lambda(51, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(50, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda61755Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda61756Var : BV:32
18 : Lambda61757Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda61758Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 168 { 0xa8 -88 } : BV:8
62 : eq(59, 55) : BOOL
63 : 212 { 0xd4 -44 } : BV:8
64 : eq(59, 36) : BOOL
65 : 245 { 0xf5 -11 } : BV:8
66 : eq(59, 40) : BOOL
67 : 180 { 0xb4 -76 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(40, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 36) : BOOL
77 : eq(73, 40) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(36, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 55) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 40) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 55) : BOOL
93 : eq(58, 36) : BOOL
94 : eq(58, 40) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(55, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 36) : BOOL
104 : eq(100, 40) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(40, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 36) : BOOL
113 : eq(109, 40) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(36, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 36) : BOOL
122 : eq(118, 40) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 36) : BOOL
131 : eq(127, 40) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(54, 2, 136) : BV:32
138 : lambda(51, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(50, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 168, [ 1; 1 ] -> 245, [ 2; 2 ] -> 180, [ 3; 3 ] -> 212, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1093150351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1093150352; 1093150355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1093150356; 1515532167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1515532168; 1515532171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1515532172; 3443193451 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3443193452; 3443193455 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3443193456; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3443193452 { 0xcd3af66c -851773844 -1.46064519e27 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1515532168 { 0x5a552f88 +1.66551303e53 } : BV:32
=input.dst.llvm-%n
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1093150352 { 0x41282690 +1.31367683e3 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1515532168 { 0x5a552f88 +1.66551303e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1515532171 { 0x5a552f8b +1.66551339e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1093150352 { 0x41282690 +1.31367683e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1093150355 { 0x41282693 +1.31367719e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3443193452 { 0xcd3af66c -851773844 -1.46064519e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3443193455 { 0xcd3af66f -851773841 -1.46064555e27 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda61641Var : BV:32
2 : Lambda61642Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : eq(51, 47) : BOOL
55 : 212 { 0xd4 -44 } : BV:8
56 : eq(51, 32) : BOOL
57 : 245 { 0xf5 -11 } : BV:8
58 : eq(51, 36) : BOOL
59 : 180 { 0xb4 -76 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(36, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 47) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 36) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(32, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 47) : BOOL
77 : eq(74, 32) : BOOL
78 : eq(74, 36) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 47) : BOOL
85 : eq(50, 32) : BOOL
86 : eq(50, 36) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(47, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 36) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(36, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 47) : BOOL
104 : eq(101, 32) : BOOL
105 : eq(101, 36) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(32, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 47) : BOOL
113 : eq(110, 32) : BOOL
114 : eq(110, 36) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 47) : BOOL
122 : eq(119, 32) : BOOL
123 : eq(119, 36) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(46, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda61646Var : BV:32
2 : Lambda61647Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4110164523 ] -> true, [ 4110164524; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4110164523 ] -> true, [ 4110164524; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda61655Var : BV:32
2 : Lambda61656Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda61651Var : BV:32
2 : Lambda61652Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 168 { 0xa8 -88 } : BV:8
14 : eq(11, 7) : BOOL
15 : 212 { 0xd4 -44 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 245 { 0xf5 -11 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 180 { 0xb4 -76 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1663917229
=counter_example_end
=global nodece 69 num_edges_traversed 0
=global nodece 69 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 70
=global nodece 70 nodece z3.ce5061.num_edges_traversed2
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(epsilon)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3.ce5061 252b75aada674d0324f11528d28e
=retaddr_const
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.spec-%var-x-1
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 137962127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 137962128; 137962131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 137962132; 807997699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 807997700; 807997703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 807997704; 1512563519 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1512563520; 1512563523 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1512563524; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda62851Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda62852Var : BV:32
14 : lambda(13, 1) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : sum(9, 10, 15) : SUM[UNIT,MAP[BV:32 -> BV:32]]
17 : sym_const(16) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 807997703 { 0x30291107 +1.32083213e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 137962131 { 0x8392293 +1.44636762e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1512563523 { 0x5a27e343 +1.31162297e53 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4158135134
=counter_example_end
=global nodece 70 num_edges_traversed 2
=global nodece 70 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 71
=global nodece 71 nodece z3.ce5043.num_edges_traversed2
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(epsilon)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3.ce5043 51ad31a4b66e097143b91c07884a7
=retaddr_const
1 : 459523490 { 0x1b63c5a2 +1.77946877e183 } : BV:32
=input.spec-%var-x-1
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 645922815 ] -> 8, [ 645922816; 645922819 ] -> 0, [ 645922820; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 645922815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 645922816; 645922819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 645922820; 2820053559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2820053560; 2820053563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2820053564; 3494369115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3494369116; 3494369119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3494369120; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.llvm-%m
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.llvm-%x
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda62789Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda62790Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : bvadd(8, 17, 18) : BV:32
45 : eq(44, 20) : BOOL
46 : eq(44, 23) : BOOL
47 : eq(44, 25) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 22, 29) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : ite(46, 22, 50) : BV:8
52 : ite(45, 22, 51) : BV:8
53 : bvadd(17, 18) : BV:32
54 : eq(53, 20) : BOOL
55 : eq(53, 23) : BOOL
56 : eq(53, 25) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 22, 29) : BV:8
59 : ite(56, 22, 58) : BV:8
60 : ite(55, 22, 59) : BV:8
61 : ite(54, 22, 60) : BV:8
62 : bvconcat(33, 43, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 20) : BOOL
65 : eq(63, 23) : BOOL
66 : eq(63, 25) : BOOL
67 : eq(63, 27) : BOOL
68 : ite(67, 22, 29) : BV:8
69 : ite(66, 22, 68) : BV:8
70 : ite(65, 22, 69) : BV:8
71 : ite(64, 22, 70) : BV:8
72 : bvadd(34, 16, 62) : BV:32
73 : eq(72, 20) : BOOL
74 : eq(72, 23) : BOOL
75 : eq(72, 25) : BOOL
76 : eq(72, 27) : BOOL
77 : ite(76, 22, 29) : BV:8
78 : ite(75, 22, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 22, 79) : BV:8
81 : bvadd(8, 16, 62) : BV:32
82 : eq(81, 20) : BOOL
83 : eq(81, 23) : BOOL
84 : eq(81, 25) : BOOL
85 : eq(81, 27) : BOOL
86 : ite(85, 22, 29) : BV:8
87 : ite(84, 22, 86) : BV:8
88 : ite(83, 22, 87) : BV:8
89 : ite(82, 22, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 20) : BOOL
92 : eq(90, 23) : BOOL
93 : eq(90, 25) : BOOL
94 : eq(90, 27) : BOOL
95 : ite(94, 22, 29) : BV:8
96 : ite(93, 22, 95) : BV:8
97 : ite(92, 22, 96) : BV:8
98 : ite(91, 22, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : sum(9, 10, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 171169745 { 0xa33d7d1 +1.40502369e149 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 459523490 { 0x1b63c5a2 +1.77946877e183 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 973936699 { 0x3a0d183b +1.10230195e245 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 645922819 { 0x26800003 +1.35e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2820053563 { 0xa8169a3b -1474913733 -1.17658174e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3494369119 { 0xd047d75f -800598177 -1.56126010e33 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda817Var : BV:32
2 : Lambda818Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda825Var : BV:32
2 : Lambda826Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2975070850
=counter_example_end
=global nodece 71 num_edges_traversed 2
=global nodece 71 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 72
=global nodece 72 nodece z3v487.ce5025.num_edges_traversed2
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(epsilon)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3v487.ce5025 0c62b3807f84a8e177e2154e3fc8
=retaddr_const
1 : 325794367 { 0x136b3a3f +1.83771502e167 } : BV:32
=input.spec-%var-x-1
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 7603007 ] -> 0, [ 7603008; 7603008 ] -> 4, [ 7603009; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2052; 2055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2056; 7603007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 7603008; 7603011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 7603012; 438370319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 438370320; 438370323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 438370324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda62727Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda62728Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 15) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 15) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 897265922 { 0x357b3102 +1.96243309e235 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 325794367 { 0x136b3a3f +1.83771502e167 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 639868110 { 0x26239cce +1.27822279e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2055 { 0x807 +1.24497e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7603011 { 0x740343 +1.90634953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 438370323 { 0x1a210013 +1.25781476e181 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda828Var : BV:32
2 : Lambda829Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda836Var : BV:32
2 : Lambda837Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1222028159
=counter_example_end
=global nodece 72 num_edges_traversed 2
=global nodece 72 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 73
=global nodece 73 nodece z3.ce5007.num_edges_traversed2
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(epsilon)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3.ce5007 dd841791b2c306295f0462e8911d0
=retaddr_const
1 : 427322464 { 0x19786c60 +1.94080734e179 } : BV:32
=input.spec-%var-x-1
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4247212035 ] -> 0, [ 4247212036; 4247212036 ] -> 2, [ 4247212037; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3094625979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3094625980; 3094625983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3094625984; 3103785023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3103785024; 3103785027 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3103785028; 4247212035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4247212036; 4247212039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4247212040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3103785024 { 0xb9000040 -1191182272 -1.762e243 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3094625980 { 0xb8743ebc -1200341316 -1.90816450e241 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda62665Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda62666Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 1) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 1) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 1) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1896763661 { 0x710e510d +1.11184847e99 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 427322464 { 0x19786c60 +1.94080734e179 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1143910515 { 0x442eb073 +1.36475980e9 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3103785024 { 0xb9000040 -1191182272 -1.762e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3103785027 { 0xb9000043 -1191182269 -1.798e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3094625980 { 0xb8743ebc -1200341316 -1.90816450e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3094625983 { 0xb8743ebf -1200341313 -1.90816485e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4247212039 { 0xfd275007 -47755257 -1.30712974e123 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1137Var : BV:32
2 : Lambda1138Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1145Var : BV:32
2 : Lambda1146Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4247212036 { 0xfd275004 -47755260 -1.30712938e123 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3669973894
=counter_example_end
=global nodece 73 num_edges_traversed 2
=global nodece 73 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 74
=global nodece 74 nodece z3.ce4989.num_edges_traversed2
=global nodece 74 nodece_path
=global nodece 74 nodece_path.graph_edge_composition
(epsilon)
=global nodece 74 nodece_cached_counterexample
=counter_example_begin z3.ce4989 993a8f755bd5748228ad3fc85b3ba83
=retaddr_const
1 : 737520530 { 0x2bf5ab92 +1.91929841e216 } : BV:32
=input.spec-%var-x-1
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 942134971 ] -> 0, [ 942134972; 942134972 ] -> 1, [ 942134973; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 942134971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 942134972; 942134975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 942134976; 1084194647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1084194648; 1084194651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1084194652; 3425107883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3425107884; 3425107887 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3425107888; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1084194648 { 0x409f7f58 +1.24607372e2 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3425107884 { 0xcc26ffac -869859412 -1.30467748e25 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda62603Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda62604Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 1) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 1) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 1) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 194177071 { 0xb92e82f +1.14771068e152 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 737520530 { 0x2bf5ab92 +1.91929841e216 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1406855773 { 0x53daea5d +1.71027719e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1084194648 { 0x409f7f58 +1.24607372e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1084194651 { 0x409f7f5b +1.24607408e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3425107884 { 0xcc26ffac -869859412 -1.30467748e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3425107887 { 0xcc26ffaf -869859409 -1.30467784e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 942134975 { 0x3827d6bf +1.31124103e241 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1362Var : BV:32
2 : Lambda1363Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1370Var : BV:32
2 : Lambda1371Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2606379763
=counter_example_end
=global nodece 74 num_edges_traversed 2
=global nodece 74 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 75
=global nodece 75 nodece z3.ce4971.num_edges_traversed2
=global nodece 75 nodece_path
=global nodece 75 nodece_path.graph_edge_composition
(epsilon)
=global nodece 75 nodece_cached_counterexample
=counter_example_begin z3.ce4971 b1dbd266190cdcbba4d1b9179dec33
=retaddr_const
1 : 561871738 { 0x217d7b7a +1.98033070e195 } : BV:32
=input.spec-%var-x-1
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3129957035 ] -> 0, [ 3129957036; 3129957039 ] -> 255, [ 3129957040; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2231376759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2231376760; 2231376763 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2231376764; 3129483643 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129483644; 3129483647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3129483648; 3129957035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129957036; 3129957039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3129957040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda62541Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda62542Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 1) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : bvadd(8, 17, 1) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 26) : BOOL
48 : ite(47, 21, 28) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 1) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 26) : BOOL
57 : ite(56, 21, 28) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(32, 42, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 26) : BOOL
67 : ite(66, 21, 28) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(33, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 26) : BOOL
76 : ite(75, 21, 28) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(8, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 26) : BOOL
85 : ite(84, 21, 28) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 26) : BOOL
94 : ite(93, 21, 28) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : sum(9, 10, 100) : SUM[UNIT,MAP[BV:32 -> BV:32]]
102 : sym_const(101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 376111491 { 0x166b0183 +1.83598363e173 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 561871738 { 0x217d7b7a +1.98033070e195 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1335717614 { 0x4f9d6eee +1.22994780e32 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2231376763 { 0x85001b7b -2063590533 -1.83863e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3129483647 { 0xba88217f -1165483649 -1.6352221e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda2046Var : BV:32
2 : Lambda2047Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2054Var : BV:32
2 : Lambda2055Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3032852315
=counter_example_end
=global nodece 75 num_edges_traversed 2
=global nodece 75 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 76
=global nodece 76 nodece z3v487.ce4899.num_edges_traversed2
=global nodece 76 nodece_path
=global nodece 76 nodece_path.graph_edge_composition
(epsilon)
=global nodece 76 nodece_cached_counterexample
=counter_example_begin z3v487.ce4899 722025853083fab4ba3468f8bb1e38
=retaddr_const
1 : 367982752 { 0x15eef8a0 +1.86696243e172 } : BV:32
=input.spec-%var-x-1
1 : Lambda28676Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28677Var : BV:32
18 : Lambda28678Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28679Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda28701Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28702Var : BV:32
18 : Lambda28703Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28704Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 1795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1796; 1799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1800; 1048831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048832; 1048835 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1048836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1796 { 0x704 +1.21409e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1048832 { 0x100100 +1.12503051e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1203433657 { 0x47baf0b9 +1.46047127e16 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda62309Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda62310Var : BV:32
21 : lambda(20, 1) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : sum(16, 17, 22) : SUM[UNIT,MAP[BV:32 -> BV:32]]
24 : sym_const(23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 806925716 { 0x3018b594 +1.19304132e225 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1737649109 { 0x67926bd5 +1.14391577e80 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 367982752 { 0x15eef8a0 +1.86696243e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1048832 { 0x100100 +1.12503051e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1048835 { 0x100103 +1.12503087e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1796 { 0x704 +1.21409e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1799 { 0x707 +1.21445e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2660698917
=counter_example_end
=global nodece 76 num_edges_traversed 2
=global nodece 76 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 77
=global nodece 77 nodece z3v487.ce4881.num_edges_traversed2
=global nodece 77 nodece_path
=global nodece 77 nodece_path.graph_edge_composition
(epsilon)
=global nodece 77 nodece_cached_counterexample
=counter_example_begin z3v487.ce4881 36fedcd7da12ef8d9ca4911262f73a2
=retaddr_const
1 : 955804646 { 0x38f86be6 +1.94079279e242 } : BV:32
=input.spec-%var-x-1
1 : Lambda32438Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32439Var : BV:32
18 : Lambda32440Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda32441Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda32463Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32464Var : BV:32
18 : Lambda32465Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda32466Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 1048579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048580; 1048583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1048584; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1559192439 { 0x5cef6377 +1.87022292e58 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda62247Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda62248Var : BV:32
21 : lambda(20, 1) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : sum(16, 17, 22) : SUM[UNIT,MAP[BV:32 -> BV:32]]
24 : sym_const(23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1307693327 { 0x4df1d10f +1.88919246e28 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 722217 { 0xb0529 +1.8609497e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 955804646 { 0x38f86be6 +1.94079279e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1048583 { 0x100007 +1.12500083e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3000339831
=counter_example_end
=global nodece 77 num_edges_traversed 2
=global nodece 77 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 78
=global nodece 78 nodece z3v487.ce4851.num_edges_traversed2
=global nodece 78 nodece_path
=global nodece 78 nodece_path.graph_edge_composition
(epsilon)
=global nodece 78 nodece_cached_counterexample
=counter_example_begin z3v487.ce4851 8d2114ec2bc7ebb3fd75dd48cb1ee59e
=retaddr_const
1 : 100573169 { 0x5fe9ff1 +1.98925602e140 } : BV:32
=input.spec-%var-x-1
1 : Lambda39588Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39589Var : BV:32
18 : Lambda39590Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda39591Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39613Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39614Var : BV:32
18 : Lambda39615Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda39616Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 134217727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 134217728; 134217731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 134217732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 218838602 { 0xd0b364a +1.8759427e155 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda62149Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda62150Var : BV:32
21 : lambda(20, 1) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : sum(16, 17, 22) : SUM[UNIT,MAP[BV:32 -> BV:32]]
24 : sym_const(23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1154632828 { 0x44d24c7c +1.64295911e10 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1385294383 { 0x5291ea2f +1.13995921e38 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 100573169 { 0x5fe9ff1 +1.98925602e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 134217731 { 0x8000003 +1.35e145 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2904503925
=counter_example_end
=global nodece 78 num_edges_traversed 2
=global nodece 78 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 79
=global nodece 79 nodece z3v487.ce4833.num_edges_traversed2
=global nodece 79 nodece_path
=global nodece 79 nodece_path.graph_edge_composition
(epsilon)
=global nodece 79 nodece_cached_counterexample
=counter_example_begin z3v487.ce4833 a9eeaebd0a5f3c86d9eb9db27a149d
=retaddr_const
1 : 1742332509 { 0x67d9e25d +1.70222055e80 } : BV:32
=input.spec-%var-x-1
1 : Lambda42618Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda42619Var : BV:32
17 : Lambda42620Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda42621Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda42643Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda42644Var : BV:32
17 : Lambda42645Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda42646Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 171929603 { 0xa3f7003 +1.49560582e149 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : and(8, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(6, 7, 11) : BOOL
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : ite(12, 13, 1) : BV:32
15 : unit : UNIT
16 : Lambda62087Var : BV:32
17 : lambda(16, 10) : FUNCTION[BV:32 -> BOOL]
18 : Lambda62088Var : BV:32
19 : lambda(18, 1) : FUNCTION[BV:32 -> BV:32]
20 : map(17, 19) : MAP[BV:32 -> BV:32]
21 : sum(14, 15, 20) : SUM[UNIT,MAP[BV:32 -> BV:32]]
22 : sym_const(21) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 386246974 { 0x1705a93e +1.4422736e175 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1862189312 { 0x6efec100 +1.99026489e94 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1742332509 { 0x67d9e25d +1.70222055e80 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3419677657
=counter_example_end
=global nodece 79 num_edges_traversed 2
=global nodece 79 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 80
=global nodece 80 nodece z3v487.ce4809.num_edges_traversed2
=global nodece 80 nodece_path
=global nodece 80 nodece_path.graph_edge_composition
(epsilon)
=global nodece 80 nodece_cached_counterexample
=counter_example_begin z3v487.ce4809 bb7d267d95f667d49d91a4b51710c0
=retaddr_const
1 : 1421749940 { 0x54be2eb4 +1.48580026e42 } : BV:32
=input.spec-%var-x-1
1 : Lambda56466Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda56467Var : BV:32
18 : Lambda56468Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 101359145 { 0x60a9e29 +1.8295166e141 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda56469Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda56487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda56488Var : BV:32
18 : Lambda56489Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 101359145 { 0x60a9e29 +1.8295166e141 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda56490Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1999 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2000; 2003 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2004; 1114115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1114116; 1114119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1114120; 3366453715 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3366453716; 3366453719 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3366453720; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2000 { 0x7d0 +1.23841e129 } : BV:32
=input.dst.llvm-%m
1 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1114116 { 0x110004 +1.13281297e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3366453716 { 0xc8a801d4 -928513580 -1.31255578e18 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 667875246 { 0x27cef7ae +1.61693358e208 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda62007Var : BV:32
19 : and(8, 8) : BOOL
20 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
21 : bvule(20, 2) : BOOL
22 : and(21, 10) : BOOL
23 : ite(22, 20, 20) : BV:32
24 : ite(19, 2, 23) : BV:32
25 : ite(6, 1, 24) : BV:32
26 : eq(25, 1) : BOOL
27 : bvule(1, 18) : BOOL
28 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
29 : bvule(18, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
32 : bvule(31, 18) : BOOL
33 : bvule(18, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 101359145 { 0x60a9e29 +1.8295166e141 } : BV:32
36 : bvule(35, 18) : BOOL
37 : bvule(18, 9) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 1, 40) : BV:32
42 : eq(41, 1) : BOOL
43 : and(26, 42) : BOOL
44 : ite(43, 7, 12) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda62008Var : BV:32
47 : eq(2, 1) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(1, 46) : BOOL
51 : bvule(46, 28) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(31, 46) : BOOL
54 : bvule(46, 31) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(35, 46) : BOOL
57 : bvule(46, 9) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 35, 35) : BV:32
60 : ite(55, 31, 59) : BV:32
61 : ite(52, 1, 60) : BV:32
62 : eq(61, 1) : BOOL
63 : and(26, 62) : BOOL
64 : ite(63, 7, 12) : BOOL
65 : and(14, 64) : BOOL
66 : ite(49, 1, 1) : BV:32
67 : ite(65, 1, 66) : BV:32
68 : ite(49, 1, 67) : BV:32
69 : lambda(46, 68) : FUNCTION[BV:32 -> BV:32]
70 : map(45, 69) : MAP[BV:32 -> BV:32]
71 : sum(16, 17, 70) : SUM[UNIT,MAP[BV:32 -> BV:32]]
72 : sym_const(71) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1165678519 { 0x457ad7b7 +1.95970809e11 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 715394195 { 0x2aa40c93 +1.28163373e214 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1421749940 { 0x54be2eb4 +1.48580026e42 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1114116 { 0x110004 +1.13281297e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1114119 { 0x110007 +1.13281333e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3366453716 { 0xc8a801d4 -928513580 -1.31255578e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3366453719 { 0xc8a801d7 -928513577 -1.31255614e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2000 { 0x7d0 +1.23841e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2003 { 0x7d3 +1.23877e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda56389Var : BV:32
2 : Lambda56390Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 101359145 { 0x60a9e29 +1.8295166e141 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda56399Var : BV:32
2 : Lambda56400Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 101359145 { 0x60a9e29 +1.8295166e141 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda56403Var : BV:32
2 : Lambda56404Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 101359143 { 0x60a9e27 +1.8295142e141 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 101359144 { 0x60a9e28 +1.8295154e141 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 101359145 { 0x60a9e29 +1.8295166e141 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 101359143 ] -> true, [ 101359144; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 101359143 ] -> true, [ 101359144; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 101359143 ] -> true, [ 101359144; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
305177168
=counter_example_end
=global nodece 80 num_edges_traversed 2
=global nodece 80 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%m : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 40
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 42
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 44
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 45
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 46
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 47
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 49
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 50
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 51
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 53
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 54
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 55
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 61
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 62
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 63
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 64
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 65
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 66
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 67
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 68
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 69
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 72
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 73
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=inductive-invariants point_set point_expr 74
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 75
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set point_expr 76
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 done
=inductive-invariants point_set point z3v487.ce64
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 done
=inductive-invariants point_set point z3.ce87
=inductive-invariants point_set point z3.ce87 expr point z3.ce87
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce87 expr point z3.ce87 done
=inductive-invariants point_set point z3.ce28
=inductive-invariants point_set point z3.ce28 expr point z3.ce28
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 6 for input.dst.llvm-%x
32
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 done
=inductive-invariants point_set point z3v487.ce27
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 6 for input.dst.llvm-%x
1073741824
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 done
=inductive-invariants point_set point z3v487.ce51
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 done
=inductive-invariants point_set point z3v487.ce88
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce88 expr point z3v487.ce88 done
=inductive-invariants point_set point z3v487.ce112
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 done
=inductive-invariants point_set point z3.ce231
=inductive-invariants point_set point z3.ce231 expr point z3.ce231
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 6 for input.dst.llvm-%x
3933454080
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 done
=inductive-invariants point_set point z3v487.ce255
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 done
=inductive-invariants point_set point z3.ce256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 done
=inductive-invariants point_set point z3.ce303
=inductive-invariants point_set point z3.ce303 expr point z3.ce303
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 done
=inductive-invariants point_set point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 done
=inductive-invariants point_set point z3.ce280
=inductive-invariants point_set point z3.ce280 expr point z3.ce280
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 6 for input.dst.llvm-%x
4208686592
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 done
=inductive-invariants point_set point z3v487.ce304
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 done
=inductive-invariants point_set point z3.ce63
=inductive-invariants point_set point z3.ce63 expr point z3.ce63
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 4 for input.dst.llvm-%m
134744072
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 6 for input.dst.llvm-%x
134744072
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 done
=inductive-invariants point_set point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 done
=inductive-invariants point_set point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 done
=inductive-invariants point_set point z3.ce111
=inductive-invariants point_set point z3.ce111 expr point z3.ce111
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 done
=inductive-invariants point_set point z3.ce160
=inductive-invariants point_set point z3.ce160 expr point z3.ce160
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 done
=inductive-invariants point_set point z3v487.ce159
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 4 for input.dst.llvm-%m
2155905152
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 done
=inductive-invariants point_set point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 done
=inductive-invariants point_set point z3.ce338
=inductive-invariants point_set point z3.ce338 expr point z3.ce338
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 4 for input.dst.llvm-%m
4096
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 done
=inductive-invariants point_set point z3v487.ce232
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 6 for input.dst.llvm-%x
3426812416
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 done
=inductive-invariants point_set point z3.ce207
=inductive-invariants point_set point z3.ce207 expr point z3.ce207
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 6 for input.dst.llvm-%x
3933454080
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 done
=inductive-invariants point_set point z3v487.ce208
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 6 for input.dst.llvm-%x
3426812416
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 done
=inductive-invariants point_set point z3v487.ce339
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 5 for input.dst.llvm-%n
32
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 done
=inductive-invariants point_set point z3.ce1900
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1900 expr point z3.ce1900 done
=inductive-invariants point_set point z3.ce4128
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 2 for input.spec-%var-i-0.L3%7%bbentry
276447231
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 5 for input.dst.llvm-%n
542932888
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 6 for input.dst.llvm-%x
1044840452
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
276447231
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 40 for input.spec-%var-ret-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
276447232
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4128 expr point z3.ce4128 done
=inductive-invariants point_set point z3v487.ce4129
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 5 for input.dst.llvm-%n
1947313568
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 6 for input.dst.llvm-%x
405399296
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 40 for input.spec-%var-ret-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4129 expr point z3v487.ce4129 done
=inductive-invariants point_set point z3v487.ce1780
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 5 for input.dst.llvm-%n
2048
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 done
=inductive-invariants point_set point z3.ce1740
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 done
=inductive-invariants point_set point z3v487.ce1739
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 5 for input.dst.llvm-%n
128
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 6 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 done
=inductive-invariants point_set point z3.ce1779
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 done
=inductive-invariants point_set point z3v487.ce1859
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1859 expr point z3v487.ce1859 done
=inductive-invariants point_set point z3.ce1820
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 5 for input.dst.llvm-%n
1048576
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 done
=inductive-invariants point_set point z3.ce1860
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 done
=inductive-invariants point_set point z3v487.ce1899
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 5 for input.dst.llvm-%n
2048
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1899 expr point z3v487.ce1899 done
=inductive-invariants point_set point z3.ce1939
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 done
=inductive-invariants point_set point z3.ce2019
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2019 expr point z3.ce2019 done
=inductive-invariants point_set point z3v487.ce1819
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 done
=inductive-invariants point_set point z3.ce1979
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1979 expr point z3.ce1979 done
=inductive-invariants point_set point z3v487.ce1940
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 done
=inductive-invariants point_set point z3v487.ce2060
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 done
=inductive-invariants point_set point z3v487.ce1980
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1980 expr point z3v487.ce1980 done
=inductive-invariants point_set point z3.ce2099
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2099 expr point z3.ce2099 done
=inductive-invariants point_set point z3v487.ce2020
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2020 expr point z3v487.ce2020 done
=inductive-invariants point_set point z3.ce2139
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2139 expr point z3.ce2139 done
=inductive-invariants point_set point z3.ce2059
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 done
=inductive-invariants point_set point z3v487.ce2100
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2100 expr point z3v487.ce2100 done
=inductive-invariants point_set point z3v487.ce2140
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2140 expr point z3v487.ce2140 done
=inductive-invariants point_set point z3.ce2996
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 5 for input.dst.llvm-%n
16
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 done
=inductive-invariants point_set point z3.ce3020
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3020 expr point z3.ce3020 done
=inductive-invariants point_set point z3v487.ce3006
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3006 expr point z3v487.ce3006 done
=inductive-invariants point_set point z3v487.ce3107
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 2 for input.spec-%var-i-0.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 6 for input.dst.llvm-%x
1073741824
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3107 expr point z3v487.ce3107 done
=inductive-invariants point_set point z3.ce3062
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 6 for input.dst.llvm-%x
32
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3062 expr point z3.ce3062 done
=inductive-invariants point_set point z3.ce3042
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3042 expr point z3.ce3042 done
=inductive-invariants point_set point z3v487.ce3072
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 6 for input.dst.llvm-%x
1073741824
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3072 expr point z3v487.ce3072 done
=inductive-invariants point_set point z3v487.ce3248
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3248 expr point z3v487.ce3248 done
=inductive-invariants point_set point z3v487.ce3273
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 5 for input.dst.llvm-%n
3
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3273 expr point z3v487.ce3273 done
=inductive-invariants point_set point z3.ce3274
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 2 for input.spec-%var-i-0.L3%7%bbentry
2
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3274 expr point z3.ce3274 done
=inductive-invariants point_set point z3.ce3320
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 5 for input.dst.llvm-%n
1073741826
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 done
=inductive-invariants point_set point z3v487.ce3319
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3319 expr point z3v487.ce3319 done
=inductive-invariants point_set point z3v487.ce3369
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3369 expr point z3v487.ce3369 done
=inductive-invariants point_set point z3.ce3370
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 5 for input.dst.llvm-%n
8194
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3370 expr point z3.ce3370 done
=inductive-invariants point_set point z3v487.ce3415
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3415 expr point z3v487.ce3415 done
=inductive-invariants point_set point z3v487.ce3486
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 2 for input.spec-%var-i-0.L3%7%bbentry
16384
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 5 for input.dst.llvm-%n
4202496
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
16384
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3486 expr point z3v487.ce3486 done
=inductive-invariants point_set point z3v487.ce3447
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 2 for input.spec-%var-i-0.L3%7%bbentry
5
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
6
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3447 expr point z3v487.ce3447 done
=inductive-invariants point_set point z3.ce3487
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 2 for input.spec-%var-i-0.L3%7%bbentry
136987657
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 5 for input.dst.llvm-%n
273309953
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
136987657
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3487 expr point z3.ce3487 done
=inductive-invariants point_set point z3v487.ce3517
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 2 for input.spec-%var-i-0.L3%7%bbentry
16384
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 5 for input.dst.llvm-%n
4202496
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
16384
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
16385
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3517 expr point z3v487.ce3517 done
=inductive-invariants point_set point z3v487.ce3552
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 4 for input.dst.llvm-%m
536870912
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 5 for input.dst.llvm-%n
2782613480
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3552 expr point z3v487.ce3552 done
=inductive-invariants point_set point z3.ce3551
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 4 for input.dst.llvm-%m
512
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 5 for input.dst.llvm-%n
3059709808
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3551 expr point z3.ce3551 done
=inductive-invariants point_set point z3.ce3647
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3647 expr point z3.ce3647 done
=inductive-invariants point_set point z3v487.ce3648
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3648 expr point z3v487.ce3648 done
=inductive-invariants point_set point z3v487.ce3601
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3601 expr point z3v487.ce3601 done
=inductive-invariants point_set point z3.ce3602
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 5 for input.dst.llvm-%n
4125555070
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3602 expr point z3.ce3602 done
=inductive-invariants point_set point z3v487.ce3724
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3724 expr point z3v487.ce3724 done
=inductive-invariants point_set point z3.ce3697
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 2 for input.spec-%var-i-0.L3%7%bbentry
2919768210
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 5 for input.dst.llvm-%n
3591639113
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2919768210
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2919768211
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3697 expr point z3.ce3697 done
=inductive-invariants point_set point z3.ce3725
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3725 expr point z3.ce3725 done
=inductive-invariants point_set point z3v487.ce4621
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 3 for input.spec-%var-ret-1.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 4 for input.dst.llvm-%m
101359144
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 done
=inductive-invariants point_set point z3.ce3800
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 2 for input.spec-%var-i-0.L3%7%bbentry
441321471
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 4 for input.dst.llvm-%m
512
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 5 for input.dst.llvm-%n
957746152
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 6 for input.dst.llvm-%x
164093952
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
441321471
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
441321472
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3800 expr point z3.ce3800 done
=inductive-invariants point_set point z3v487.ce3924
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 4 for input.dst.llvm-%m
2155905152
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 40 for input.spec-%var-ret-0.L3%19%bbentry
2155905152
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
2155905152
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3924 expr point z3v487.ce3924 done
=inductive-invariants point_set point z3.ce4011
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4011 expr point z3.ce4011 done
=inductive-invariants point_set point z3v487.ce3980
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 5 for input.dst.llvm-%n
128
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 6 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3980 expr point z3v487.ce3980 done
=inductive-invariants point_set point z3v487.ce4071
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4071 expr point z3v487.ce4071 done
=inductive-invariants point_set point z3.ce4164
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 2 for input.spec-%var-i-0.L3%7%bbentry
276447232
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 5 for input.dst.llvm-%n
542932888
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 6 for input.dst.llvm-%x
1044840452
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
276447232
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 40 for input.spec-%var-ret-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
276447233
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4164 expr point z3.ce4164 done
=inductive-invariants point_set point z3v487.ce4310
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 3 for input.spec-%var-ret-1.L3%7%bbentry
6445844
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 4 for input.dst.llvm-%m
6
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 5 for input.dst.llvm-%n
1138146288
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 6 for input.dst.llvm-%x
3221225472
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 39 for input.spec-%var-j-0.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4310 expr point z3v487.ce4310 done
=inductive-invariants point_set point z3.ce4222
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 2 for input.spec-%var-i-0.L3%7%bbentry
276447233
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 5 for input.dst.llvm-%n
542932888
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 6 for input.dst.llvm-%x
1044840452
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
276447233
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4222 expr point z3.ce4222 done
=inductive-invariants point_set point z3.ce4243
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 2 for input.spec-%var-i-0.L3%7%bbentry
276447233
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 5 for input.dst.llvm-%n
542932888
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 6 for input.dst.llvm-%x
1044840452
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
276447233
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 40 for input.spec-%var-ret-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
276447234
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4243 expr point z3.ce4243 done
=inductive-invariants point_set point z3.ce4309
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 2 for input.spec-%var-i-0.L3%7%bbentry
131071
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 3 for input.spec-%var-ret-1.L3%7%bbentry
845160944
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 4 for input.dst.llvm-%m
32768
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 6 for input.dst.llvm-%x
1610088452
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
131071
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 39 for input.spec-%var-j-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
131072
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4309 expr point z3.ce4309 done
=inductive-invariants point_set point z3.ce4387
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1304440700
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 4 for input.dst.llvm-%m
268435457
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 5 for input.dst.llvm-%n
2147516416
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 6 for input.dst.llvm-%x
131072
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4387 expr point z3.ce4387 done
=inductive-invariants point_set point z3v487.ce4388
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1983722464
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 4 for input.dst.llvm-%m
268435457
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 5 for input.dst.llvm-%n
3202038660
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 6 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4388 expr point z3v487.ce4388 done
=inductive-invariants point_set point z3.ce4465
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 2 for input.spec-%var-i-0.L3%7%bbentry
536870911
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 3 for input.spec-%var-ret-1.L3%7%bbentry
958698756
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 4 for input.dst.llvm-%m
536872962
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 5 for input.dst.llvm-%n
536870921
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 39 for input.spec-%var-j-0.L3%19%bbentry
536870921
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
536870912
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
536870921
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4465 expr point z3.ce4465 done
=inductive-invariants point_set point z3v487.ce4466
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 2 for input.spec-%var-i-0.L3%7%bbentry
268435455
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1258963528
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 4 for input.dst.llvm-%m
536870913
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 5 for input.dst.llvm-%n
268435457
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 6 for input.dst.llvm-%x
1073774340
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
268435455
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 39 for input.spec-%var-j-0.L3%19%bbentry
268435457
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
268435456
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
268435457
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4466 expr point z3v487.ce4466 done
=inductive-invariants point_set point z3.ce4647
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 2 for input.spec-%var-i-0.L3%7%bbentry
258250409
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 3 for input.spec-%var-ret-1.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 5 for input.dst.llvm-%n
2379298442
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
258250409
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 40 for input.spec-%var-ret-0.L3%19%bbentry
3
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
258250410
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
3
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4647 expr point z3.ce4647 done
=inductive-invariants point_set point z3v487.ce4648
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 2 for input.spec-%var-i-0.L3%7%bbentry
356937796
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 3 for input.spec-%var-ret-1.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 5 for input.dst.llvm-%n
2238068753
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
356937796
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 40 for input.spec-%var-ret-0.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
356937797
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
3
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4648 expr point z3v487.ce4648 done
=inductive-invariants point_set point z3.ce4543
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 2 for input.spec-%var-i-0.L3%7%bbentry
671088639
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 3 for input.spec-%var-ret-1.L3%7%bbentry
696347132
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 4 for input.dst.llvm-%m
939590145
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 5 for input.dst.llvm-%n
687931394
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 6 for input.dst.llvm-%x
3087532036
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
671088639
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 39 for input.spec-%var-j-0.L3%19%bbentry
687931395
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
671088640
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
687931395
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4543 expr point z3.ce4543 done
=inductive-invariants point_set point z3v487.ce4544
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 2 for input.spec-%var-i-0.L3%7%bbentry
8191
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1406449308
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 4 for input.dst.llvm-%m
67339266
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 5 for input.dst.llvm-%n
428288
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 6 for input.dst.llvm-%x
3227484160
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8191
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 39 for input.spec-%var-j-0.L3%19%bbentry
428289
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
8192
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
428289
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4544 expr point z3v487.ce4544 done
=inductive-invariants point_set point z3.ce4703
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 2 for input.spec-%var-i-0.L3%7%bbentry
258250410
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 3 for input.spec-%var-ret-1.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 5 for input.dst.llvm-%n
2379298442
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
258250410
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4703 expr point z3.ce4703 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%7%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at L3%19%bbentry_Lfor.cond1%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%7%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%x : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce64
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce87
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce28
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce27
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce51
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce63
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce111
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce3006
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3v487.ce4621
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce4222
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=11; number of preds=3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 7->0; 8->0; 
7
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce3006
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce3273
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce3369
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce3486
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce3601
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce3724
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce27
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce135
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce159
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce63
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce159
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce183
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce3006
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce3273
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3v487.ce3369
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 4: z3v487.ce3486
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 5: z3v487.ce3601
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 6: z3v487.ce3724
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 24 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3v487.ce27
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3.ce63
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 3: z3.ce135
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 4: z3v487.ce159
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 5: z3v487.ce3006
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=24; number of visited CEs=6; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini name local-sizes-are-equal
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini expr_group_type HOUDINI with 0 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node L3%19%bbentry_Lfor.cond1%1%bbentry for reason inductive-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 12 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%x : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 40
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 42
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 44
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.43
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.44
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-32-free_var_idx.42
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 4
=Comment
expr-group-bvs.linear2-32-free_var_idx.41
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-i-0.L3%7%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvneg(4) : BV:32
6 : bvadd(1, 5) : BV:32
=RhsExpr
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 5
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce28
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce51
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce4128
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce4129
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce1740
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce1739
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce3072
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce3800
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3v487.ce3924
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3.ce4011
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3.ce4164
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 13: z3.ce4647
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=12; number of visited CEs=14; number of preds=6
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 8->0; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 
8
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 8->1; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 
41
-2147483648->4294967295; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->0; 41->1; 42->0; 43->0; 44->0; 
42
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->0; 41->0; 42->1; 43->0; 44->0; 
43
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->4294967295; 40->0; 41->0; 42->0; 43->1; 44->0; 
44
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->4294967295; 41->0; 42->0; 43->0; 44->1; 
matrix done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce3924
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce4309
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce4387
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
src-branches-const-ineq.lb-unsigned
=LhsExpr
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce3072
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce3319
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce3415
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3.ce3551
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3.ce3647
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce51
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce135
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3.ce338
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce1779
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3v487.ce3107
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3v487.ce3072
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3v487.ce3415
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 4: z3v487.ce3447
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 5: z3.ce3647
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 6: z3.ce3697
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 1: z3v487.ce3924
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 2: z3.ce4309
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 3: z3.ce4387
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini name dst-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini expr_group_type HOUDINI with 48 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 45
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 46
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 47
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 49
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 50
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 51
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 53
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 54
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 55
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 57
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 58
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 59
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 61
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 62
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 63
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 64
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 65
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 66
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 67
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 68
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 2
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 1: z3.ce135
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 2: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 3: z3.ce338
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 4: z3v487.ce3072
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 5: z3.ce3647
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 6: z3v487.ce3924
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 7: z3.ce4465
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 8: z3.ce4543
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini summary: number of exprs=48; number of visited CEs=9; number of preds=3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based name spec-coupling-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 13 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 69
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 72
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 73
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 74
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 75
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 76
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 4
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based summary: number of exprs=13; number of visited CEs=1; number of preds=5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini name local-sizes-are-equal
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini expr_group_type HOUDINI with 0 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-0.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
5 : input.spec-%var-i-0.L3%7%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,MAP[BV:32 -> BV:32]]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-j-0.L3%19%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
6 : input.spec-%var-j-0.L3%19%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : 0 { 0x0 +1.0e1025 } : INT
11 : sum_is(7, 10) : BOOL
12 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
14 : map_get(12, 13) : SUM[UNIT,MAP[BV:32 -> BV:32]]
15 : sum_is(14, 8) : BOOL
16 : and(11, 15) : BOOL
17 : or(9, 16) : BOOL
18 : or(4, 17) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=Ranking exprs at node L3%7%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=DST Ranking expr 0
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%19%bbentry_Lfor.cond1%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 3
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 4
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 5
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 6
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=DST Ranking expr 5
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140468 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
140380 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140469 : select(140378, 140379, 140468, 140380, 140364, 140365) : BV:32
=RhsExpr
140381 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140470 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140471 : select(140378, 140379, 140470, 140382, 140364, 140365) : BV:32
=RhsExpr
140383 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140472 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140473 : select(140378, 140379, 140472, 140384, 140364, 140365) : BV:32
=RhsExpr
140385 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140385 : input.dst.llvm-%x : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140391 : islangaligned(140385, 140364) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
precond-mlasserts
=LhsExpr
140904 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
140905 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
140906 : bvule(140904, 140905) : BOOL
140361 : 4 { 0x4 +1.47e129 } : BV:32
140415 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140907 : bvadd(140361, 140415) : BV:32
140908 : bvadd(140904, 140907) : BV:32
140909 : eq(140905, 140908) : BOOL
140910 : and(140906, 140909) : BOOL
140911 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140912 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140913 : bvule(140911, 140912) : BOOL
140914 : and(140910, 140913) : BOOL
140915 : bvadd(140911, 140907) : BV:32
140916 : eq(140912, 140915) : BOOL
140917 : and(140914, 140916) : BOOL
140918 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
140919 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
140920 : bvule(140918, 140919) : BOOL
140921 : and(140917, 140920) : BOOL
140922 : bvadd(140918, 140907) : BV:32
140923 : eq(140919, 140922) : BOOL
140924 : and(140921, 140923) : BOOL
140925 : bvuge(140904, 140911) : BOOL
140926 : bvule(140904, 140912) : BOOL
140927 : and(140925, 140926) : BOOL
140929 : bvuge(140905, 140911) : BOOL
140930 : bvule(140905, 140912) : BOOL
140931 : and(140929, 140930) : BOOL
140932 : not(140931) : BOOL
140933 : andnot1(140927, 140932) : BOOL
140928 : bvuge(140911, 140904) : BOOL
140934 : bvule(140911, 140905) : BOOL
140935 : and(140928, 140934) : BOOL
140937 : bvuge(140912, 140904) : BOOL
140938 : bvule(140912, 140905) : BOOL
140939 : and(140937, 140938) : BOOL
140940 : not(140939) : BOOL
140941 : andnot1(140935, 140940) : BOOL
140936 : and(140933, 140941) : BOOL
140942 : bvuge(140904, 140918) : BOOL
140943 : bvule(140904, 140919) : BOOL
140944 : and(140942, 140943) : BOOL
140946 : bvuge(140905, 140918) : BOOL
140947 : bvule(140905, 140919) : BOOL
140948 : and(140946, 140947) : BOOL
140949 : not(140948) : BOOL
140950 : andnot1(140944, 140949) : BOOL
140953 : and(140936, 140950) : BOOL
140945 : bvuge(140918, 140904) : BOOL
140951 : bvule(140918, 140905) : BOOL
140952 : and(140945, 140951) : BOOL
140954 : bvuge(140919, 140904) : BOOL
140955 : bvule(140919, 140905) : BOOL
140956 : and(140954, 140955) : BOOL
140957 : not(140956) : BOOL
140958 : andnot1(140952, 140957) : BOOL
140959 : and(140953, 140958) : BOOL
140960 : bvuge(140911, 140918) : BOOL
140961 : bvule(140911, 140919) : BOOL
140962 : and(140960, 140961) : BOOL
140964 : bvuge(140912, 140918) : BOOL
140965 : bvule(140912, 140919) : BOOL
140966 : and(140964, 140965) : BOOL
140967 : not(140966) : BOOL
140968 : andnot1(140962, 140967) : BOOL
140971 : and(140959, 140968) : BOOL
140963 : bvuge(140918, 140911) : BOOL
140969 : bvule(140918, 140912) : BOOL
140970 : and(140963, 140969) : BOOL
140972 : bvuge(140919, 140911) : BOOL
140973 : bvule(140919, 140912) : BOOL
140974 : and(140972, 140973) : BOOL
140975 : not(140974) : BOOL
140976 : andnot1(140970, 140975) : BOOL
140977 : and(140971, 140976) : BOOL
140978 : and(140924, 140977) : BOOL
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140979 : 3 { 0x3 +1.35e129 } : BV:32
140980 : bvand(140382, 140979) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140981 : eq(140980, 140276) : BOOL
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140982 : bvand(140384, 140979) : BV:32
140983 : eq(140982, 140276) : BOOL
140984 : and(140981, 140983) : BOOL
140380 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140985 : bvand(140380, 140979) : BV:32
140986 : eq(140985, 140276) : BOOL
140987 : and(140984, 140986) : BOOL
140988 : and(140978, 140987) : BOOL
140989 : eq(140382, 140904) : BOOL
140990 : eq(140384, 140911) : BOOL
140991 : and(140989, 140990) : BOOL
140992 : eq(140380, 140918) : BOOL
140993 : and(140991, 140992) : BOOL
140994 : and(140988, 140993) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.pred
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140345 : Lambda0Var : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140349 : bvule(140276, 140345) : BOOL
140383 : input.dst.llvm-%n : BV:32
140996 : bvult(140345, 140383) : BOOL
140997 : and(140349, 140996) : BOOL
140998 : lambda(140345, 140997) : FUNCTION[BV:32 -> BOOL]
140346 : Lambda1Var : BV:32
140353 : bvule(140276, 140346) : BOOL
140381 : input.dst.llvm-%m : BV:32
140999 : bvult(140346, 140381) : BOOL
141018 : and(140353, 140999) : BOOL
141019 : lambda(140346, 141018) : FUNCTION[BV:32 -> BOOL]
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140995 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
140361 : 4 { 0x4 +1.47e129 } : BV:32
140367 : bvmul(140346, 140361) : BV:32
140362 : bvmul(140345, 140361) : BV:32
140385 : input.dst.llvm-%x : BV:32
141039 : bvadd(140362, 140385) : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
141059 : select(140378, 140379, 140995, 141039, 140364, 140365) : BV:32
141060 : bvadd(140367, 141059) : BV:32
141061 : select(140378, 140379, 140995, 141060, 140364, 140365) : BV:32
141062 : lambda(140346, 141061) : FUNCTION[BV:32 -> BV:32]
141063 : map(141019, 141062) : MAP[BV:32 -> BV:32]
141064 : lambda(140345, 141063) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141065 : map(140998, 141064) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
141066 : eq(140273, 141065) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140381 : input.dst.llvm-%m : BV:32
140615 : bvult(140614, 140381) : BOOL
140507 : 4 { 0x4 +1.0e1025 } : BV:64
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140409 : 32 { 0x20 +1.0e1025 } : INT
140633 : bvsign_ext(140612, 140409) : BV:64
140752 : bvmul(140507, 140633) : BV:64
140413 : 63 { 0x3f +1.0e1025 } : INT
140753 : bvextract(140752, 140413, 140409) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140632 : bvslt(140612, 140276) : BOOL
140415 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140766 : ite(140632, 140415, 140276) : BV:32
140768 : eq(140753, 140766) : BOOL
140364 : 4 { 0x4 +1.0e1025 } : INT
140770 : isindexforsize(140768, 140364) : BOOL
140385 : input.dst.llvm-%x : BV:32
140361 : 4 { 0x4 +1.47e129 } : BV:32
140699 : bvmul(140361, 140612) : BV:32
140702 : bvadd(140385, 140699) : BV:32
140772 : isgepoffset(140702, 140699) : BOOL
140776 : islangaligned(140702, 140364) : BOOL
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140493 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140365 : 0 { 0x0 } : BOOL
140708 : select(140378, 140379, 140493, 140702, 140364, 140365) : BV:32
140778 : islangaligned(140708, 140364) : BOOL
140781 : and(140776, 140778) : BOOL
140648 : bvsign_ext(140614, 140409) : BV:64
140794 : bvmul(140507, 140648) : BV:64
140795 : bvextract(140794, 140413, 140409) : BV:32
140647 : bvslt(140614, 140276) : BOOL
140808 : ite(140647, 140415, 140276) : BV:32
140810 : eq(140795, 140808) : BOOL
140812 : isindexforsize(140810, 140364) : BOOL
140711 : bvmul(140361, 140614) : BV:32
140713 : bvadd(140708, 140711) : BV:32
140814 : isgepoffset(140713, 140711) : BOOL
140819 : and(140770, 140772, 140776, 140781, 140812, 140814) : BOOL
140734 : islangaligned(140713, 140364) : BOOL
201240 : and(140819, 140734) : BOOL
140275 : 1 { 0x1 } : BOOL
202206 : eq(201240, 140275) : BOOL
202282 : implies(140615, 202206) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%7%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 5
=bv_rank at L3%19%bbentry_Lfor.cond1%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 9
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
